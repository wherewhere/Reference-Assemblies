<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) Microsoft Corporation.  All rights reserved. -->
<doc>
  <assembly>
    <name>mscorlib</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid">
<summary>[SECURITY CRITICAL] 为 Win32 关键句柄实现提供基类，在这些实现中值为 -1 时表示无效句柄。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.#ctor">
<summary>[SECURITY CRITICAL] 初始化 <see cref="T:Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid"/> 类的新实例。</summary>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.IsInvalid">
<summary>[SECURITY CRITICAL] 获取一个值，该值指示句柄是否无效。</summary>
<returns>如果句柄无效，则为 true；否则为 false。</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid">
<summary>[SECURITY CRITICAL] 为 Win32 安全句柄实现提供基类，在这些实现中值为 -1 时表示无效句柄。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.#ctor(System.Boolean)">
<summary>[SECURITY CRITICAL] 初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid"/> 类的新实例，并指定是否可靠地释放句柄。 </summary>
<param name="ownsHandle">如果为 true，则在完成阶段可靠地释放句柄；如果为 false，则阻止可靠释放（建议不要这样做）。</param>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.IsInvalid">
<summary>[SECURITY CRITICAL] 获取一个值，该值指示句柄是否无效。</summary>
<returns>如果句柄无效，则为 true；否则为 false。</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid">
<summary>[SECURITY CRITICAL] 为 Win32 安全句柄实现提供基类，在这些实现中，值为 0 或 -1 都表示无效句柄。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.#ctor(System.Boolean)">
<summary>[SECURITY CRITICAL] 初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"/> 类的新实例，并指定是否可靠地释放句柄。 </summary>
<param name="ownsHandle">如果为 true，则在完成阶段可靠地释放句柄；如果为 false，则阻止可靠释放（建议不要这样做）。</param>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid">
<summary>[SECURITY CRITICAL] 获取一个值，该值指示句柄是否无效。</summary>
<returns>如果句柄无效，则为 true；否则为 false。</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeWaitHandle">
<summary>[SECURITY CRITICAL] 表示等待句柄的包装类。 </summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeWaitHandle.#ctor(System.IntPtr,System.Boolean)">
<summary>[SECURITY CRITICAL] 初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle"/> 类的新实例。 </summary>
<param name="existingHandle">表示要使用的预先存在的句柄的 <see cref="T:System.IntPtr"/> 对象。</param>
<param name="ownsHandle">如果为 true，则在完成阶段可靠地释放句柄；如果为 false，则阻止可靠释放（建议不要这样做）。</param>
    </member>
    <member name="T:System.AccessViolationException">
<summary>在尝试读写受保护内存时引发的异常。</summary>
    </member>
    <member name="M:System.AccessViolationException.#ctor">
<summary>使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.AccessViolationException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.AccessViolationException.#ctor(System.String)">
<summary>使用描述错误的指定消息初始化 <see cref="T:System.AccessViolationException"/> 类的新实例。</summary>
<param name="message">描述异常的消息。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.AccessViolationException"/> 类的新实例。</summary>
<param name="message">描述异常的消息。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。 </param>
<param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="T:System.Action">
<summary>封装一个方法，该方法不具有参数并且不返回值。</summary>
    </member>
    <member name="T:System.Action`1">
<summary>封装一个方法，该方法只有一个参数并且不返回值。</summary>
<param name="obj">此委托封装的方法的参数。</param>
<typeparam name="T">此委托封装的方法的参数类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
    </member>
    <member name="T:System.Action`2">
<summary>封装一个方法，该方法具有两个参数并且不返回值。</summary>
<param name="arg1">此委托封装的方法的第一个参数。</param>
<param name="arg2">此委托封装的方法的第二个参数。</param>
<typeparam name="T1">此委托封装的方法的第一个参数的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
<typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`3">
<summary>封装一个方法，该方法具有三个参数并且不返回值。</summary>
<param name="arg1">此委托封装的方法的第一个参数。</param>
<param name="arg2">此委托封装的方法的第二个参数。</param>
<param name="arg3">此委托封装的方法的第三个参数。</param>
<typeparam name="T1">此委托封装的方法的第一个参数的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
<typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
<typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`4">
<summary>封装一个方法，该方法具有四个参数并且不返回值。</summary>
<param name="arg1">此委托封装的方法的第一个参数。</param>
<param name="arg2">此委托封装的方法的第二个参数。</param>
<param name="arg3">此委托封装的方法的第三个参数。</param>
<param name="arg4">此委托封装的方法的第四个参数。</param>
<typeparam name="T1">此委托封装的方法的第一个参数的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
<typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
<typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
<typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`5">
<summary>封装一个方法，该方法具有五个参数并且不返回值。</summary>
<param name="arg1">此委托封装的方法的第一个参数。</param>
<param name="arg2">此委托封装的方法的第二个参数。</param>
<param name="arg3">此委托封装的方法的第三个参数。</param>
<param name="arg4">此委托封装的方法的第四个参数。</param>
<param name="arg5">此委托封装的方法的第五个参数。</param>
<typeparam name="T1">此委托封装的方法的第一个参数的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
<typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
<typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
<typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
<typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`6">
<summary>封装一个方法，该方法具有六个参数并且不返回值。</summary>
<param name="arg1">此委托封装的方法的第一个参数。</param>
<param name="arg2">此委托封装的方法的第二个参数。</param>
<param name="arg3">此委托封装的方法的第三个参数。</param>
<param name="arg4">此委托封装的方法的第四个参数。</param>
<param name="arg5">此委托封装的方法的第五个参数。</param>
<param name="arg6">此委托封装的方法的第六个参数。</param>
<typeparam name="T1">此委托封装的方法的第一个参数的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
<typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
<typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
<typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
<typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
<typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`7">
<summary>封装一个方法，该方法具有七个参数并且不返回值。</summary>
<param name="arg1">此委托封装的方法的第一个参数。</param>
<param name="arg2">此委托封装的方法的第二个参数。</param>
<param name="arg3">此委托封装的方法的第三个参数。</param>
<param name="arg4">此委托封装的方法的第四个参数。</param>
<param name="arg5">此委托封装的方法的第五个参数。</param>
<param name="arg6">此委托封装的方法的第六个参数。</param>
<param name="arg7">此委托封装的方法的第七个参数。</param>
<typeparam name="T1">此委托封装的方法的第一个参数的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
<typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
<typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
<typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
<typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
<typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
<typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`8">
<summary>封装一个方法，该方法具有八个参数并且不返回值。</summary>
<param name="arg1">此委托封装的方法的第一个参数。</param>
<param name="arg2">此委托封装的方法的第二个参数。</param>
<param name="arg3">此委托封装的方法的第三个参数。</param>
<param name="arg4">此委托封装的方法的第四个参数。</param>
<param name="arg5">此委托封装的方法的第五个参数。</param>
<param name="arg6">此委托封装的方法的第六个参数。</param>
<param name="arg7">此委托封装的方法的第七个参数。</param>
<param name="arg8">此委托封装的方法的第八个参数。</param>
<typeparam name="T1">此委托封装的方法的第一个参数的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
<typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
<typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
<typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
<typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
<typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
<typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
<typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
    </member>
    <member name="T:System.Activator">
<summary>包含用以在本地创建对象类型的方法。无法继承此类。 </summary>
    </member>
    <member name="M:System.Activator.CreateInstance``1">
<summary>使用无参数构造函数，创建指定泛型类型参数所指定类型的实例。</summary>
<returns>对新创建对象的引用。</returns>
<typeparam name="T">要创建的类型。</typeparam>
<exception cref="T:System.MissingMethodException">为 <paramref name="T"/> 指定的类型没有无参数构造函数。</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type)">
<summary>使用指定类型的默认构造函数来创建该类型的实例。</summary>
<returns>对新创建对象的引用。</returns>
<param name="type">要创建的对象的类型。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="type"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="type"/> 不是 RuntimeType。-或- <paramref name="type"/> 是一个开放式泛型类型（即，<see cref="P:System.Type.ContainsGenericParameters"/> 属性返回 true）。</exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="type"/> 是 <see cref="T:System.Reflection.Emit.TypeBuilder"/>。-或- 不支持创建 <see cref="T:System.TypedReference"/>，<see cref="T:System.Void"/> 和 <see cref="T:System.RuntimeArgumentHandle"/> 类型或者由这些类型组成的数组。 </exception>
<exception cref="T:System.Reflection.TargetInvocationException">被调用的构造函数引发异常。 </exception>
<exception cref="T:System.MethodAccessException">调用方没有调用此构造函数的权限。 </exception>
<exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者用后期绑定机制调用了该成员。 </exception>
<exception cref="T:System.MissingMethodException">找不到匹配的公共构造函数。 </exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
<paramref name="type"/> 是一个 COM 对象，但用于获取类型的类标识符无效，或被标识的类未注册。 </exception>
      <exception cref="T:System.TypeLoadException">
<paramref name="type"/> 不是有效的类型。 </exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Object[])">
<summary>使用与指定参数匹配程度最高的构造函数创建指定类型的实例。</summary>
<returns>对新创建对象的引用。</returns>
<param name="type">要创建的对象的类型。 </param>
<param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。如果 <paramref name="args"/> 为空数组或 null 引用，则调用不带任何参数的构造函数（默认构造函数）。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="type"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="type"/> 不是 RuntimeType。-或- <paramref name="type"/> 是一个开放式泛型类型（即，<see cref="P:System.Type.ContainsGenericParameters"/> 属性返回 true）。</exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="type"/> 是 <see cref="T:System.Reflection.Emit.TypeBuilder"/>。-或- 不支持创建 <see cref="T:System.TypedReference"/>，<see cref="T:System.Void"/> 和 <see cref="T:System.RuntimeArgumentHandle"/> 类型或者由这些类型组成的数组。-或- 与 <paramref name="args"/> 匹配程度最高的构造函数具有 varargs 参数。</exception>
<exception cref="T:System.Reflection.TargetInvocationException">被调用的构造函数引发异常。 </exception>
<exception cref="T:System.MethodAccessException">调用方没有调用此构造函数的权限。 </exception>
<exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者用后期绑定机制调用了该成员。 </exception>
<exception cref="T:System.MissingMethodException">找不到匹配的公共构造函数。 </exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
<paramref name="type"/> 是一个 COM 对象，但用于获取类型的类标识符无效，或被标识的类未注册。 </exception>
      <exception cref="T:System.TypeLoadException">
<paramref name="type"/> 不是有效的类型。 </exception>
    </member>
    <member name="T:System.AppDomain">
<summary>表示应用程序域，它是一个应用程序在其中执行的独立环境。无法继承此类。</summary>
    </member>
    <member name="E:System.AppDomain.AssemblyResolve">
<summary>[SECURITY CRITICAL] 在对程序集的解析失败时发生。</summary>
    </member>
    <member name="P:System.AppDomain.CurrentDomain">
<summary>获取当前 <see cref="T:System.Threading.Thread"/> 的当前应用程序域。</summary>
<returns>当前应用程序域。</returns>
    </member>
    <member name="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
<summary>以指定名称和访问模式定义动态程序集。</summary>
<returns>创建的动态程序集。</returns>
<param name="name">动态程序集的唯一标识。 </param>
<param name="access">动态程序集的访问模式。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
<exception cref="T:System.ArgumentException"><paramref name="name"/> 的 Name 属性为 null 引用。-或- <paramref name="name"/> 的 Name 属性以空白开始，或包含正斜杠或反斜杠。 </exception>
<exception cref="T:System.AppDomainUnloadedException">尝试对已卸载的应用程序域进行操作。 </exception>
    </member>
    <member name="P:System.AppDomain.DomainManager">
<summary>[SECURITY CRITICAL] 获得初始化应用程序域时主机提供的域管理器。</summary>
<returns>初始化应用程序域时主机提供的域管理器 <see cref="T:System.AppDomainManager"/> 对象；如果未提供域管理器，则为 null。</returns>
    </member>
    <member name="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
<summary>[SECURITY CRITICAL] 在给定其显示名称的情况下执行程序集。</summary>
<returns>程序集的入口点返回的值。</returns>
<param name="assemblyName">程序集的显示名称。请参阅 <see cref="P:System.Reflection.Assembly.FullName"/>。</param>
    </member>
    <member name="P:System.AppDomain.FriendlyName">
<summary>获取此应用程序域的友好名称。</summary>
<returns>此应用程序域的友好名称。</returns>
<exception cref="T:System.AppDomainUnloadedException">尝试对已卸载的应用程序域进行操作。 </exception>
    </member>
    <member name="M:System.AppDomain.GetData(System.String)">
<summary>[SECURITY CRITICAL] 为指定名称获取存储在当前应用程序域中的值。</summary>
<returns><paramref name="name"/> 属性的值。</returns>
<param name="name">预定义应用程序域属性的名称，或已定义的应用程序域属性的名称。 </param>
    </member>
    <member name="M:System.AppDomain.GetType">
<summary>获取当前实例的类型。</summary>
<returns>表示 <see cref="T:System.AppDomain"/> 的 <see cref="T:System.Type"/> 对象。</returns>
    </member>
    <member name="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
<summary>获取可以为 null 的布尔值，该值指示是否设置了任何兼容性开关，如果已设置，则指定是否设置了指定的兼容性开关。</summary>
<returns>null 如果设置了兼容性开关；否则，一个指示由 <paramref name="value"/> 指定的兼容性开关是否设置的布尔值。</returns>
<param name="value">要检测的兼容性开关。</param>
    </member>
    <member name="P:System.AppDomain.MonitoringIsEnabled">
<summary>[SECURITY CRITICAL] 获取或设置一个值，该值指示是否对当前进程启用应用程序域的 CPU 和内存监视。一旦对进程启用了监视，则无法将其禁用。</summary>
<returns>如果启用监视，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.AppDomain.MonitoringSurvivedMemorySize">
<summary>[SECURITY CRITICAL] 获取上次完全阻止回收后保留下来的、已知由当前应用程序域引用的字节数。</summary>
<returns>保留下来的字节数。</returns>
    </member>
    <member name="P:System.AppDomain.MonitoringSurvivedProcessMemorySize">
<summary>[SECURITY CRITICAL] 获取进程中所有应用程序域的上次完全阻止回收后保留下来的总字节数。</summary>
<returns>进程的保留下来的总字节数。</returns>
    </member>
    <member name="P:System.AppDomain.MonitoringTotalAllocatedMemorySize">
<summary>[SECURITY CRITICAL] 获取自从创建应用程序域后由应用程序域进行的所有内存分配的总大小（以字节为单位，不扣除已回收的内存）。 </summary>
<returns>所有内存分配的总大小。</returns>
    </member>
    <member name="P:System.AppDomain.MonitoringTotalProcessorTime">
<summary>[SECURITY CRITICAL] 获取自从进程启动后所有线程在当前应用程序域中执行时所使用的总处理器时间。</summary>
<returns>当前应用程序域的总处理器时间。</returns>
    </member>
    <member name="M:System.AppDomain.SetData(System.String,System.Object)">
<summary>[SECURITY CRITICAL] 为指定的应用程序域属性分配指定值。</summary>
<param name="name">要创建或更改的用户定义应用程序域属性的名称。 </param>
<param name="data">属性的值。 </param>
    </member>
    <member name="M:System.AppDomain.ToString">
<summary>获取一个字符串表示，包含应用程序域友好名称和任意上下文策略。</summary>
<returns>一个字符串，通过连接字符串“Name:”、应用程序域的友好名称以及上下文策略的字符串表示或字符串“There are no context policies”而成。 </returns>
<exception cref="T:System.AppDomainUnloadedException">当前 <see cref="T:System.AppDomain"/> 表示的应用程序域已卸载。</exception>
    </member>
    <member name="E:System.AppDomain.UnhandledException">
<summary>[SECURITY CRITICAL] 当某个异常未被捕获时出现。</summary>
    </member>
    <member name="T:System.AppDomainManager">
<summary>[SECURITY CRITICAL] 提供非托管宿主的等效托管宿主。</summary>
    </member>
    <member name="M:System.AppDomainManager.#ctor">
<summary>[SECURITY CRITICAL] 初始化 <see cref="T:System.AppDomainManager"/> 类的新实例。 </summary>
    </member>
    <member name="M:System.AppDomainManager.CheckSecuritySettings(System.Security.SecurityState)">
<summary>[SECURITY CRITICAL] 返回一个 <see cref="T:System.Boolean"/> 值，该值指示是否允许在应用程序域中执行指定的操作。</summary>
<returns>如果宿主允许在应用程序域中执行 <paramref name="state"/> 指定的操作，则为 true；否则为 false。</returns>
<param name="state"><see cref="T:System.Security.SecurityState"/> 的一个子类，用来标识请求其安全状态的操作。 </param>
    </member>
    <member name="M:System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)">
<summary>[SECURITY CRITICAL] 初始化新应用程序域。</summary>
<param name="appDomainInfo">一个包含应用程序域初始化信息的 <see cref="T:System.AppDomainSetup"/> 对象。</param>
    </member>
    <member name="T:System.AppDomainSetup">
<summary>表示可以添加到 <see cref="T:System.AppDomain"/> 的实例的程序集绑定信息。</summary>
    </member>
    <member name="M:System.AppDomainSetup.#ctor">
<summary>初始化 <see cref="T:System.AppDomainSetup"/> 类的新实例。</summary>
    </member>
    <member name="P:System.AppDomainSetup.ApplicationBase">
<summary>[SECURITY CRITICAL] 获取或设置包含该应用程序的目录的名称。</summary>
<returns>一个包含应用程序基目录名称的 <see cref="T:System.String"/>。</returns>
    </member>
    <member name="P:System.AppDomainSetup.ApplicationName">
<summary>获取或设置应用程序的名称。</summary>
<returns>应用程序名称 <see cref="T:System.String"/>。</returns>
    </member>
    <member name="P:System.AppDomainSetup.LoaderOptimization">
<summary>指定用于加载可执行文件的优化策略。</summary>
<returns>应该程序域的优化策略。</returns>
    </member>
    <member name="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
<summary>设置指定的开关，从而使应用程序域针对指定问题与早期版本的 Silverlight .NET Framework 兼容。</summary>
<param name="switches">一组用于指定兼容性开关的可枚举字符串值，或者为 null 引用，null 表示清除现有的兼容性开关。</param>
    </member>
    <member name="T:System.AppDomainUnloadedException">
<summary>在尝试访问已卸载的应用程序域时引发的异常。 </summary>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor">
<summary>初始化 <see cref="T:System.AppDomainUnloadedException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.AppDomainUnloadedException"/> 类的新实例。</summary>
<param name="message">描述错误的消息。 </param>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.AppDomainUnloadedException"/> 类的新实例。</summary>
<param name="message">描述错误的消息。 </param>
<param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不为 null 引用，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="T:System.ArgumentException">
<summary>在向方法提供的其中一个参数无效时引发的异常。</summary>
    </member>
    <member name="M:System.ArgumentException.#ctor">
<summary>初始化 <see cref="T:System.ArgumentException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.ArgumentException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.ArgumentException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不为 null 引用，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.String)">
<summary>使用指定错误消息和导致此异常的参数的名称来初始化 <see cref="T:System.ArgumentException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="paramName">导致当前异常的参数的名称。 </param>
    </member>
    <member name="P:System.ArgumentException.Message">
<summary>获取错误消息和参数名；如果未设置参数名，则仅获取错误消息。</summary>
<returns>描述异常的详细信息的文本字符串。此属性的值采用以下两种形式之一：条件 值 <paramref name="paramName"/> 为 null 引用（在 Visual Basic 中为 Nothing）或长度为零。传递到构造函数的 <paramref name="message"/> 字符串。<paramref name="paramName"/> 不是空引用（在 Visual Basic 中为 Nothing）并且长度大于零。附有无效参数名的 <paramref name="message"/> 字符串。 </returns>
    </member>
    <member name="T:System.ArgumentNullException">
<summary>当将空引用（在 Visual Basic 中为 Nothing）传递给不接受它作为有效参数的方法时引发的异常。 </summary>
    </member>
    <member name="M:System.ArgumentNullException.#ctor">
<summary>初始化 <see cref="T:System.ArgumentNullException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String)">
<summary>使用导致此异常的参数的名称初始化 <see cref="T:System.ArgumentNullException"/> 类的新实例。</summary>
<param name="paramName">导致异常的参数的名称。 </param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String,System.Exception)">
<summary>使用指定的错误消息和引发此异常的异常初始化 <see cref="T:System.ArgumentNullException"/> 类的新实例。</summary>
<param name="message">说明发生此异常的原因的错误消息。 </param>
<param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个空引用（在 Visual Basic 中为 Nothing）。 </param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String,System.String)">
<summary>使用指定的错误消息和导致此异常的参数的名称来初始化 <see cref="T:System.ArgumentNullException"/> 类的新实例。</summary>
<param name="paramName">导致异常的参数的名称。 </param>
<param name="message">描述错误的消息。 </param>
    </member>
    <member name="T:System.ArgumentOutOfRangeException">
<summary>当参数值超出调用的方法所定义的允许取值范围时引发的异常。</summary>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor">
<summary>初始化 <see cref="T:System.ArgumentOutOfRangeException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
<summary>使用导致此异常的参数的名称初始化 <see cref="T:System.ArgumentOutOfRangeException"/> 类的新实例。</summary>
<param name="paramName">导致此异常的参数的名称。 </param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Exception)">
<summary>使用指定的错误消息和引发此异常的异常初始化 <see cref="T:System.ArgumentOutOfRangeException"/> 类的新实例。</summary>
<param name="message">说明发生此异常的原因的错误消息。 </param>
<param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个空引用（在 Visual Basic 中为 Nothing）。 </param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
<summary>使用指定错误消息和导致此异常的参数的名称来初始化 <see cref="T:System.ArgumentOutOfRangeException"/> 类的新实例。</summary>
<param name="paramName">导致异常的参数的名称。 </param>
<param name="message">描述错误的消息。 </param>
    </member>
    <member name="P:System.ArgumentOutOfRangeException.Message">
<summary>获取错误消息和无效参数值的字符串表示形式；或者，如果该参数值为 null，则仅获取错误消息。</summary>
<returns>此异常的文本消息。此属性的值采用以下两种形式之一。条件值 <paramref name="actualValue"/> 为 null。传递到构造函数的 <paramref name="message"/> 字符串。<paramref name="actualValue"/> 不为 null。附有无效参数值字符串表示形式的 <paramref name="message"/> 字符串。 </returns>
    </member>
    <member name="T:System.ArithmeticException">
<summary>因算术运算、类型转换或转换操作中的错误而引发的异常。</summary>
    </member>
    <member name="M:System.ArithmeticException.#ctor">
<summary>初始化 <see cref="T:System.ArithmeticException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.ArithmeticException"/> 类的新实例。</summary>
<param name="message">描述该错误的 <see cref="T:System.String"/>。 </param>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.ArithmeticException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不为 null 引用，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="T:System.Array">
<summary>提供创建、操作、搜索和排序数组的方法，因而在公共语言运行时中用作所有数组的基类。 </summary>
    </member>
    <member name="M:System.Array.AsReadOnly``1(``0[])">
<summary>返回指定数组的只读包装。</summary>
<returns>指定数组的只读 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> 包装。</returns>
<param name="array">要包装在只读 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> 包装中的从零开始的一维数组。 </param>
<typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
<summary>使用指定的 <see cref="T:System.Collections.IComparer"/> 接口，在一维排序 <see cref="T:System.Array"/> 的某个元素范围中搜索值。</summary>
<returns>如果找到 <paramref name="value"/>，则为指定 <paramref name="array"/> 中的指定 <paramref name="value"/> 的索引。如果找不到 <paramref name="value"/> 且 <paramref name="value"/> 小于 <paramref name="array"/> 中的一个或多个元素，则为一个负数，该负数是大于 <paramref name="value"/> 的第一个元素的索引的按位求补。如果找不到 <paramref name="value"/> 且 <paramref name="value"/> 大于 <paramref name="array"/> 中的任何元素，则为一个负数，该负数是（最后一个元素的索引加 1）的按位求补。</returns>
<param name="array">要搜索的已排序一维 <see cref="T:System.Array"/>。</param>
<param name="index">要搜索的范围的起始索引。</param>
<param name="length">要搜索的范围的长度。</param>
<param name="value">要搜索的对象。</param>
<param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.IComparer"/> 实现。-或- 若为 null 引用（在 Visual Basic 中为 Nothing），则使用每个元素的 <see cref="T:System.IComparable"/> 实现。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.RankException">
<paramref name="array"/> 是多维的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于 <paramref name="array"/> 的下限。-或- <paramref name="length"/> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="index"/> 和 <paramref name="length"/> 不指定 <paramref name="array"/> 中的有效范围。-或- <paramref name="comparer"/> 为 null，并且 <paramref name="value"/> 是不与 <paramref name="array"/> 中元素兼容的类型。</exception>
      <exception cref="T:System.InvalidOperationException">
<paramref name="comparer"/> 是 null，<paramref name="value"/> 没有实现 <see cref="T:System.IComparable"/> 接口，并且搜索时遇到没有实现 <see cref="T:System.IComparable"/> 接口的元素。</exception>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Object)">
<summary>使用由 <see cref="T:System.Array"/> 中每个元素和指定的对象实现的 <see cref="T:System.IComparable"/> 接口，在整个一维排序 <see cref="T:System.Array"/> 中搜索特定元素。</summary>
<returns>如果找到 <paramref name="value"/>，则为指定 <paramref name="array"/> 中的指定 <paramref name="value"/> 的索引。如果找不到 <paramref name="value"/> 且 <paramref name="value"/> 小于 <paramref name="array"/> 中的一个或多个元素，则为一个负数，该负数是大于 <paramref name="value"/> 的第一个元素的索引的按位求补。如果找不到 <paramref name="value"/> 且 <paramref name="value"/> 大于 <paramref name="array"/> 中的任何元素，则为一个负数，该负数是（最后一个元素的索引加 1）的按位求补。</returns>
<param name="array">要搜索的已排序一维 <see cref="T:System.Array"/>。</param>
<param name="value">要搜索的对象。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.RankException">
<paramref name="array"/> 是多维的。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="value"/> 是不与 <paramref name="array"/> 的元素兼容的类型。</exception>
      <exception cref="T:System.InvalidOperationException">
<paramref name="value"/> 没有实现 <see cref="T:System.IComparable"/> 接口，并且搜索时遇到没有实现 <see cref="T:System.IComparable"/> 接口的元素。</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)">
<summary>使用由 <see cref="T:System.Array"/> 中每个元素和指定值实现的 <see cref="T:System.IComparable`1"/> 泛型接口，在一维排序 <see cref="T:System.Array"/> 的某个元素范围中搜索值。</summary>
<returns>如果找到 <paramref name="value"/>，则为指定 <paramref name="array"/> 中的指定 <paramref name="value"/> 的索引。如果找不到 <paramref name="value"/> 且 <paramref name="value"/> 小于 <paramref name="array"/> 中的一个或多个元素，则为一个负数，该负数是大于 <paramref name="value"/> 的第一个元素的索引的按位求补。如果找不到 <paramref name="value"/> 且 <paramref name="value"/> 大于 <paramref name="array"/> 中的任何元素，则为一个负数，该负数是（最后一个元素的索引加 1）的按位求补。</returns>
<param name="array">要搜索的从零开始的一维排序 <see cref="T:System.Array"/>。 </param>
<param name="index">要搜索的范围的起始索引。</param>
<param name="length">要搜索的范围的长度。</param>
<param name="value">要搜索的对象。</param>
<typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于 <paramref name="array"/> 的下限。-或- <paramref name="length"/> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="index"/> 和 <paramref name="length"/> 不指定 <paramref name="array"/> 中的有效范围。- 或 <paramref name="value"/> 是不与 <paramref name="array"/> 中元素兼容的类型。</exception>
      <exception cref="T:System.InvalidOperationException">
<paramref name="value"/> 没有实现 <see cref="T:System.IComparable`1"/> 泛型接口，并且搜索时遇到没有实现 <see cref="T:System.IComparable`1"/> 泛型接口的元素。</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
<summary>使用指定的 <see cref="T:System.Collections.Generic.IComparer`1"/> 泛型接口，在一维排序 <see cref="T:System.Array"/> 的某个元素范围中搜索值。</summary>
<returns>如果找到 <paramref name="value"/>，则为指定 <paramref name="array"/> 中的指定 <paramref name="value"/> 的索引。如果找不到 <paramref name="value"/> 且 <paramref name="value"/> 小于 <paramref name="array"/> 中的一个或多个元素，则为一个负数，该负数是大于 <paramref name="value"/> 的第一个元素的索引的按位求补。如果找不到 <paramref name="value"/> 且 <paramref name="value"/> 大于 <paramref name="array"/> 中的任何元素，则为一个负数，该负数是（最后一个元素的索引加 1）的按位求补。</returns>
<param name="array">要搜索的从零开始的一维排序 <see cref="T:System.Array"/>。 </param>
<param name="index">要搜索的范围的起始索引。</param>
<param name="length">要搜索的范围的长度。</param>
<param name="value">要搜索的对象。</param>
<param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.Generic.IComparer`1"/> 实现。-或- 若为 null 引用（在 Visual Basic 中为 Nothing），则使用每个元素的 <see cref="T:System.IComparable`1"/> 实现。</param>
<typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于 <paramref name="array"/> 的下限。-或- <paramref name="length"/> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="index"/> 和 <paramref name="length"/> 不指定 <paramref name="array"/> 中的有效范围。-或- <paramref name="comparer"/> 为 null，并且 <paramref name="value"/> 是不与 <paramref name="array"/> 中元素兼容的类型。</exception>
      <exception cref="T:System.InvalidOperationException">
<paramref name="comparer"/> 是 null，<paramref name="value"/> 没有实现 <see cref="T:System.IComparable`1"/> 泛型接口，并且搜索时遇到没有实现 <see cref="T:System.IComparable`1"/> 泛型接口的元素。</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],``0)">
<summary>使用由 <see cref="T:System.Array"/> 中每个元素和指定的对象实现的 <see cref="T:System.IComparable`1"/> 泛型接口，在整个一维排序 <see cref="T:System.Array"/> 中搜索特定元素。</summary>
<returns>如果找到 <paramref name="value"/>，则为指定 <paramref name="array"/> 中的指定 <paramref name="value"/> 的索引。如果找不到 <paramref name="value"/> 且 <paramref name="value"/> 小于 <paramref name="array"/> 中的一个或多个元素，则为一个负数，该负数是大于 <paramref name="value"/> 的第一个元素的索引的按位求补。如果找不到 <paramref name="value"/> 且 <paramref name="value"/> 大于 <paramref name="array"/> 中的任何元素，则为一个负数，该负数是（最后一个元素的索引加 1）的按位求补。</returns>
<param name="array">要搜索的从零开始的一维排序 <see cref="T:System.Array"/>。 </param>
<param name="value">要搜索的对象。</param>
<typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
<paramref name="value"/> 没有实现 <see cref="T:System.IComparable`1"/> 泛型接口，并且搜索时遇到没有实现 <see cref="T:System.IComparable`1"/> 泛型接口的元素。</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})">
<summary>使用指定的 <see cref="T:System.Collections.Generic.IComparer`1"/> 泛型接口，在整个一维排序中 <see cref="T:System.Array"/> 搜索值。</summary>
<returns>如果找到 <paramref name="value"/>，则为指定 <paramref name="array"/> 中的指定 <paramref name="value"/> 的索引。如果找不到 <paramref name="value"/> 且 <paramref name="value"/> 小于 <paramref name="array"/> 中的一个或多个元素，则为一个负数，该负数是大于 <paramref name="value"/> 的第一个元素的索引的按位求补。如果找不到 <paramref name="value"/> 且 <paramref name="value"/> 大于 <paramref name="array"/> 中的任何元素，则为一个负数，该负数是（最后一个元素的索引加 1）的按位求补。</returns>
<param name="array">要搜索的从零开始的一维排序 <see cref="T:System.Array"/>。  </param>
<param name="value">要搜索的对象。</param>
<param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.Generic.IComparer`1"/> 实现。-或- 若为 null 引用（在 Visual Basic 中为 Nothing），则使用每个元素的 <see cref="T:System.IComparable`1"/> 实现。</param>
<typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="comparer"/> 是 null，并且 <paramref name="value"/> 是不与 <paramref name="array"/> 的元素兼容的类型。</exception>
      <exception cref="T:System.InvalidOperationException">
<paramref name="comparer"/> 是 null，<paramref name="value"/> 没有实现 <see cref="T:System.IComparable`1"/> 泛型接口，并且搜索时遇到没有实现 <see cref="T:System.IComparable`1"/> 泛型接口的元素。</exception>
    </member>
    <member name="M:System.Array.Clear(System.Array,System.Int32,System.Int32)">
<summary>将 <see cref="T:System.Array"/> 中的一系列元素设置为零、false 或 null，具体取决于元素类型。</summary>
<param name="array">需要清除其元素的 <see cref="T:System.Array"/>。</param>
<param name="index">要清除的一系列元素的起始索引。</param>
<param name="length">要清除的元素的个数。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
<paramref name="index"/> 小于 <paramref name="array"/> 的下限。-或- <paramref name="length"/> 小于零。-或- <paramref name="index"/> 和 <paramref name="length"/> 之和大于<see cref="T:System.Array"/> 的大小。</exception>
    </member>
    <member name="M:System.Array.Clone">
<summary>创建一个 <see cref="T:System.Array"/> 的浅表副本。</summary>
<returns><see cref="T:System.Array"/> 的浅表副本。</returns>
    </member>
    <member name="M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
<summary>从指定的源索引开始，复制 <see cref="T:System.Array"/> 中的一系列元素，将它们粘贴到另一 <see cref="T:System.Array"/> 中（从指定的目标索引开始）。保证在复制未成功完成的情况下撤消所有更改。</summary>
<param name="sourceArray"><see cref="T:System.Array"/>，它包含要复制的数据。</param>
<param name="sourceIndex">一个 32 位整数，它表示 <paramref name="sourceArray"/> 中复制开始处的索引。</param>
<param name="destinationArray"><see cref="T:System.Array"/>，它接收数据。</param>
<param name="destinationIndex">一个 32 位整数，它表示 <paramref name="destinationArray"/> 中存储开始处的索引。</param>
<param name="length">一个 32 位整数，它表示要复制的元素数目。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="sourceArray"/> 为 null。-或- <paramref name="destinationArray"/> 为 null。</exception>
      <exception cref="T:System.RankException">
<paramref name="sourceArray"/> 和 <paramref name="destinationArray"/> 的秩不同。</exception>
<exception cref="T:System.ArrayTypeMismatchException"><paramref name="sourceArray"/> 类型不同于并且不是从 <paramref name="destinationArray"/> 类型派生的。</exception>
<exception cref="T:System.InvalidCastException"><paramref name="sourceArray"/> 中的至少一个元素无法强制转换为 <paramref name="destinationArray"/> 类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="sourceIndex"/> 小于 <paramref name="sourceArray"/> 的第一维的下限。-或- <paramref name="destinationIndex"/> 小于<paramref name="destinationArray"/> 的第一维的下限。-或- <paramref name="length"/> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="length"/> 大于从 <paramref name="sourceIndex"/> 到 <paramref name="sourceArray"/> 末尾的元素数。-或- <paramref name="length"/> 大于从 <paramref name="destinationIndex"/> 到 <paramref name="destinationArray"/> 末尾的元素数。</exception>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Array,System.Int32)">
<summary>从第一个元素开始复制 <see cref="T:System.Array"/> 中的一系列元素，将它们粘贴到另一 <see cref="T:System.Array"/> 中（从第一个元素开始）。长度指定为 32 位整数。</summary>
<param name="sourceArray"><see cref="T:System.Array"/>，它包含要复制的数据。</param>
<param name="destinationArray"><see cref="T:System.Array"/>，它接收数据。</param>
<param name="length">一个 32 位整数，它表示要复制的元素数目。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="sourceArray"/> 为 null。-或- <paramref name="destinationArray"/> 为 null。</exception>
      <exception cref="T:System.RankException">
<paramref name="sourceArray"/> 和 <paramref name="destinationArray"/> 的秩不同。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
<paramref name="sourceArray"/> 和 <paramref name="destinationArray"/> 是不兼容的类型。</exception>
<exception cref="T:System.InvalidCastException"><paramref name="sourceArray"/> 中的至少一个元素无法强制转换为 <paramref name="destinationArray"/> 类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="length"/> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="length"/> 大于 <paramref name="sourceArray"/> 中的元素数。-或- <paramref name="length"/> 大于 <paramref name="destinationArray"/> 中的元素数。</exception>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
<summary>从指定的源索引开始，复制 <see cref="T:System.Array"/> 中的一系列元素，将它们粘贴到另一 <see cref="T:System.Array"/> 中（从指定的目标索引开始）。长度和索引指定为 32 位整数。</summary>
<param name="sourceArray"><see cref="T:System.Array"/>，它包含要复制的数据。</param>
<param name="sourceIndex">一个 32 位整数，它表示 <paramref name="sourceArray"/> 中复制开始处的索引。</param>
<param name="destinationArray"><see cref="T:System.Array"/>，它接收数据。</param>
<param name="destinationIndex">一个 32 位整数，它表示 <paramref name="destinationArray"/> 中存储开始处的索引。</param>
<param name="length">一个 32 位整数，它表示要复制的元素数目。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="sourceArray"/> 为 null。-或- <paramref name="destinationArray"/> 为 null。</exception>
      <exception cref="T:System.RankException">
<paramref name="sourceArray"/> 和 <paramref name="destinationArray"/> 的秩不同。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
<paramref name="sourceArray"/> 和 <paramref name="destinationArray"/> 是不兼容的类型。</exception>
<exception cref="T:System.InvalidCastException"><paramref name="sourceArray"/> 中的至少一个元素无法强制转换为 <paramref name="destinationArray"/> 类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="sourceIndex"/> 小于 <paramref name="sourceArray"/> 的第一维的下限。-或- <paramref name="destinationIndex"/> 小于<paramref name="destinationArray"/> 的第一维的下限。-或- <paramref name="length"/> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="length"/> 大于从 <paramref name="sourceIndex"/> 到 <paramref name="sourceArray"/> 末尾的元素数。-或- <paramref name="length"/> 大于从 <paramref name="destinationIndex"/> 到 <paramref name="destinationArray"/> 末尾的元素数。</exception>
    </member>
    <member name="M:System.Array.CopyTo(System.Array,System.Int32)">
<summary>将当前一维 <see cref="T:System.Array"/> 的所有元素复制到指定的一维 <see cref="T:System.Array"/>（从指定的目标 <see cref="T:System.Array"/> 索引开始）。索引指定为 32 位整数。</summary>
<param name="array">一维 <see cref="T:System.Array"/>，它是从当前 <see cref="T:System.Array"/> 复制的元素的目标位置。</param>
<param name="index">一个 32 位整数，它表示 <paramref name="array"/> 中复制开始处的索引。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于 <paramref name="array"/> 的下限。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="array"/> 是多维的。-或- 源 <see cref="T:System.Array"/> 中的元素数大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 结尾处之间的可用空间。</exception>
<exception cref="T:System.ArrayTypeMismatchException">源 <see cref="T:System.Array"/> 的类型无法自动转换为目标 <paramref name="array"/> 的类型。</exception>
<exception cref="T:System.RankException">源 <see cref="T:System.Array"/> 是多维的。</exception>
<exception cref="T:System.InvalidCastException">源 <see cref="T:System.Array"/> 中至少有一个元素无法强制转换为目标 <paramref name="array"/> 类型。</exception>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32)">
<summary>创建使用从零开始的索引、具有指定 <see cref="T:System.Type"/> 和长度的一维 <see cref="T:System.Array"/>。</summary>
<returns>使用从零开始的索引、具有指定 <see cref="T:System.Type"/> 和指定长度的新的一维 <see cref="T:System.Array"/>。</returns>
<param name="elementType">要创建的 <see cref="T:System.Array"/> 的 <see cref="T:System.Type"/>。</param>
<param name="length">要创建的 <see cref="T:System.Array"/> 的大小。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="elementType"/> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="elementType"/> 不是有效的 <see cref="T:System.Type"/>.</exception>
      <exception cref="T:System.NotSupportedException">
不支持 <paramref name="elementType"/>。例如，不支持 <see cref="T:System.Void"/>。-或- <paramref name="elementType"/> 是一个开放式泛型类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="length"/> 小于零。</exception>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32[])">
<summary>创建使用从零开始的索引、具有指定 <see cref="T:System.Type"/> 维长的多维 <see cref="T:System.Array"/>。维的长度在一个 32 位整数数组中指定。</summary>
<returns>使用从零开始的索引、具有指定 <see cref="T:System.Type"/> 的新的多维 <see cref="T:System.Array"/>。其每个维度都为指定的长度。</returns>
<param name="elementType">要创建的 <see cref="T:System.Array"/> 的 <see cref="T:System.Type"/>。</param>
<param name="lengths">一个 32 位整数数组，它表示要创建的 <see cref="T:System.Array"/> 中每个维的大小。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="elementType"/> 为 null。-或- <paramref name="lengths"/> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="elementType"/> 不是有效的 <see cref="T:System.Type"/>。-或- <paramref name="lengths"/> 数组包含的元素少于一个。</exception>
      <exception cref="T:System.NotSupportedException">
不支持 <paramref name="elementType"/>。例如，不支持 <see cref="T:System.Void"/>。-或- <paramref name="elementType"/> 是一个开放式泛型类型。</exception>
<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lengths"/> 中的任何值都小于零。</exception>
    </member>
    <member name="M:System.Array.ForEach``1(``0[],System.Action{``0})">
<summary>对指定数组的每个元素执行指定操作。</summary>
<param name="array">从零开始的一维 <see cref="T:System.Array"/>，要对其元素执行操作。</param>
<param name="action">要对 <paramref name="array"/> 的每个元素执行的 <see cref="T:System.Action`1"/>。</param>
<typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。-或- <paramref name="action"/> 为 null。</exception>
    </member>
    <member name="M:System.Array.GetEnumerator">
<summary>返回 <see cref="T:System.Collections.IEnumerator"/> 的 <see cref="T:System.Array"/>。</summary>
<returns><see cref="T:System.Array"/> 的 <see cref="T:System.Collections.IEnumerator"/>。</returns>
    </member>
    <member name="M:System.Array.GetLength(System.Int32)">
<summary>获取一个 32 位整数，该整数表示 <see cref="T:System.Array"/> 指定维中的元素数。</summary>
<returns>一个 32 位整数，它表示指定维中的元素数目。</returns>
<param name="dimension"><see cref="T:System.Array"/> 的从零开始的维度，其长度需要确定。</param>
      <exception cref="T:System.IndexOutOfRangeException">
<paramref name="dimension"/> 小于零。-或- <paramref name="dimension"/> 等于或大于 <see cref="P:System.Array.Rank"/>。</exception>
    </member>
    <member name="M:System.Array.GetLowerBound(System.Int32)">
<summary>获取 <see cref="T:System.Array"/> 中指定维度的下限。</summary>
<returns><see cref="T:System.Array"/> 中指定维度的下限。</returns>
<param name="dimension"><see cref="T:System.Array"/> 的从零开始的维度，其下限需要确定。</param>
      <exception cref="T:System.IndexOutOfRangeException">
<paramref name="dimension"/> 小于零。-或- <paramref name="dimension"/> 等于或大于 <see cref="P:System.Array.Rank"/>。</exception>
    </member>
    <member name="M:System.Array.GetUpperBound(System.Int32)">
<summary>获取 <see cref="T:System.Array"/> 中指定维度的上限。</summary>
<returns><see cref="T:System.Array"/> 中指定维度的上限。</returns>
<param name="dimension"><see cref="T:System.Array"/> 的从零开始的维度，其上限需要确定。</param>
      <exception cref="T:System.IndexOutOfRangeException">
<paramref name="dimension"/> 小于零。-或- <paramref name="dimension"/> 等于或大于 <see cref="P:System.Array.Rank"/>。</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int32)">
<summary>获取一维 <see cref="T:System.Array"/> 中指定位置的值。索引指定为 32 位整数。</summary>
<returns>一维 <see cref="T:System.Array"/> 中指定位置的值。</returns>
<param name="index">一个 32 位整数，它表示要获取的 <see cref="T:System.Array"/> 元素的位置。</param>
<exception cref="T:System.ArgumentException">当前的 <see cref="T:System.Array"/> 不是正好有一维。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
<paramref name="index"/> 超出当前 <see cref="T:System.Array"/> 的有效索引的范围。</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int32[])">
<summary>获取多维 <see cref="T:System.Array"/> 中指定位置的值。索引指定为一个 32 位整数数组。</summary>
<returns>多维 <see cref="T:System.Array"/> 中指定位置的值。</returns>
<param name="indices">32 位整数的一维数组，它表示用于指定要获取的 <see cref="T:System.Array"/> 元素的位置的索引。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="indices"/> 为 null。</exception>
<exception cref="T:System.ArgumentException">当前 <see cref="T:System.Array"/> 中的维数不等于 <paramref name="indices"/> 中的元素数。</exception>
<exception cref="T:System.IndexOutOfRangeException"><paramref name="indices"/> 中的任何元素都超出当前 <see cref="T:System.Array"/> 的对应维度的有效索引的范围。</exception>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)">
<summary>搜索指定的对象，并返回一维 <see cref="T:System.Array"/> 中从指定索引开始包含指定个元素的这部分元素中第一个匹配项的索引。</summary>
<returns>如果在 <paramref name="array"/> 中从 <paramref name="startIndex"/> 开始并且包含的元素个数为在 <paramref name="count"/> 中指定的个数的这部分元素中找到 <paramref name="value"/> 的匹配项，则为第一个匹配项的索引；否则为该数组的下限减 1。</returns>
<param name="array">要搜索的一维 <see cref="T:System.Array"/>。</param>
<param name="value">要在 <paramref name="array"/> 中查找的对象。</param>
<param name="startIndex">搜索的起始索引。</param>
<param name="count">要搜索的部分中的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 超出了 <paramref name="array"/> 的有效索引范围。-或-<paramref name="count"/> 小于零。-或-<paramref name="startIndex"/> 和 <paramref name="count"/> 指定的不是 <paramref name="array"/> 中的有效部分。</exception>
      <exception cref="T:System.RankException">
<paramref name="array"/> 是多维的。</exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0)">
<summary>搜索指定的对象，并返回整个 <see cref="T:System.Array"/> 中第一个匹配项的索引。</summary>
<returns>如果在整个 <paramref name="array"/> 中找到 <paramref name="value"/> 的匹配项，则为第一个匹配项的从零开始的索引；否则为 -1。</returns>
<param name="array">要搜索的从零开始的一维 <see cref="T:System.Array"/>。</param>
<param name="value">要在 <paramref name="array"/> 中查找的对象。</param>
<typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32)">
<summary>搜索指定的对象，并返回 <see cref="T:System.Array"/> 中从指定索引到最后一个元素这部分元素中第一个匹配项的索引。</summary>
<returns>如果在 <paramref name="array"/> 中从 <paramref name="startIndex"/> 到最后一个元素这部分元素中找到 <paramref name="value"/> 的匹配项，则为第一个匹配项的从零开始的索引；否则为 -1。</returns>
<param name="array">要搜索的从零开始的一维 <see cref="T:System.Array"/>。</param>
<param name="value">要在 <paramref name="array"/> 中查找的对象。</param>
<param name="startIndex">搜索的从零开始的起始索引。</param>
<typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 超出了 <paramref name="array"/> 的有效索引的范围。</exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)">
<summary>搜索指定的对象，并返回 <see cref="T:System.Array"/> 中从指定索引开始包含指定个元素的这部分元素中第一个匹配项的索引。</summary>
<returns>如果在 <paramref name="array"/> 中从 <paramref name="startIndex"/> 、包含 <paramref name="count"/> 所指定的元素个数的这部分元素中，找到 <paramref name="value"/> 的匹配项，则为第一个匹配项的从零开始的索引；否则为 -1。</returns>
<param name="array">要搜索的从零开始的一维 <see cref="T:System.Array"/>。</param>
<param name="value">要在 <paramref name="array"/> 中查找的对象。</param>
<param name="startIndex">搜索的从零开始的起始索引。</param>
<param name="count">要搜索的部分中的元素数。</param>
<typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 超出了 <paramref name="array"/> 的有效索引范围。-或-<paramref name="count"/> 小于零。-或-<paramref name="startIndex"/> 和 <paramref name="count"/> 指定的不是 <paramref name="array"/> 中的有效部分。</exception>
    </member>
    <member name="M:System.Array.Initialize">
<summary>通过调用值类型的默认构造函数，初始化值类型 <see cref="T:System.Array"/> 的每一个元素。</summary>
    </member>
    <member name="P:System.Array.IsFixedSize">
<summary>获取一个值，该值指示 <see cref="T:System.Array"/> 是否具有固定大小。</summary>
<returns>此属性对于所有数组总是 true。</returns>
    </member>
    <member name="P:System.Array.IsReadOnly">
<summary>获取一个值，该值指示 <see cref="T:System.Array"/> 是否为只读。</summary>
<returns>此属性对于所有数组总是 false。</returns>
    </member>
    <member name="P:System.Array.IsSynchronized">
<summary>获取一个值，该值指示是否同步对 <see cref="T:System.Array"/> 的访问（线程安全）。</summary>
<returns>此属性对于所有数组总是 false。</returns>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)">
<summary>搜索指定的对象，并返回一维 <see cref="T:System.Array"/> 中到指定索引为止包含指定个元素的这部分元素中最后一个匹配项的索引。</summary>
<returns>如果在 <paramref name="array"/> 中到 <paramref name="startIndex"/> 为止并且包含的元素个数为在 <paramref name="count"/> 中指定的个数的这部分元素中找到 <paramref name="value"/> 的匹配项，则为最后一个匹配项的索引；否则为该数组的下限减 1。</returns>
<param name="array">要搜索的一维 <see cref="T:System.Array"/>。</param>
<param name="value">要在 <paramref name="array"/> 中查找的对象。</param>
<param name="startIndex">向后搜索的起始索引。</param>
<param name="count">要搜索的部分中的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 超出了 <paramref name="array"/> 的有效索引范围。-或-<paramref name="count"/> 小于零。-或-<paramref name="startIndex"/> 和 <paramref name="count"/> 指定的不是 <paramref name="array"/> 中的有效部分。</exception>
      <exception cref="T:System.RankException">
<paramref name="array"/> 是多维的。</exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0)">
<summary>搜索指定的对象，并返回整个 <see cref="T:System.Array"/> 中最后一个匹配项的索引。</summary>
<returns>如果在整个 <paramref name="array"/> 中找到 <paramref name="value"/> 的匹配项，则为最后一个匹配项的从零开始的索引；否则为 -1。</returns>
<param name="array">要搜索的从零开始的一维 <see cref="T:System.Array"/>。</param>
<param name="value">要在 <paramref name="array"/> 中查找的对象。</param>
<typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32)">
<summary>搜索指定的对象，并返回 <see cref="T:System.Array"/> 中从第一个元素到指定索引这部分元素中最后一个匹配项的索引。</summary>
<returns>如果在 <paramref name="array"/> 中从第一个元素到 <paramref name="startIndex"/> 这部分元素中找到 <paramref name="value"/> 的匹配项，则为最后一个匹配项的从零开始的索引；否则为 -1。</returns>
<param name="array">要搜索的从零开始的一维 <see cref="T:System.Array"/>。</param>
<param name="value">要在 <paramref name="array"/> 中查找的对象。</param>
<param name="startIndex">向后搜索的从零开始的起始索引。</param>
<typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 超出了 <paramref name="array"/> 的有效索引的范围。</exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)">
<summary>搜索指定的对象，并返回 <see cref="T:System.Array"/> 中到指定索引为止包含指定个元素的这部分元素中最后一个匹配项的索引。</summary>
<returns>如果在 <paramref name="array"/> 中到 <paramref name="startIndex"/> 为止、包含 <paramref name="count"/> 所指定的元素个数的这部分元素中，找到 <paramref name="value"/> 的匹配项，则为最后一个匹配项的从零开始的索引；否则为 -1。</returns>
<param name="array">要搜索的从零开始的一维 <see cref="T:System.Array"/>。</param>
<param name="value">要在 <paramref name="array"/> 中查找的对象。</param>
<param name="startIndex">向后搜索的从零开始的起始索引。</param>
<param name="count">要搜索的部分中的元素数。</param>
<typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 超出了 <paramref name="array"/> 的有效索引范围。-或-<paramref name="count"/> 小于零。-或-<paramref name="startIndex"/> 和 <paramref name="count"/> 指定的不是 <paramref name="array"/> 中的有效部分。</exception>
    </member>
    <member name="P:System.Array.Length">
<summary>获得一个 32 位整数，该整数表示 <see cref="T:System.Array"/> 的所有维数中元素的总数；如果数组中没有元素，则该值为零。</summary>
<returns>一个 32 位整数，该整数表示 <see cref="T:System.Array"/> 的所有维数中元素的总数。</returns>
    </member>
    <member name="P:System.Array.Rank">
<summary>获取 <see cref="T:System.Array"/> 的从零开始的秩（数组维数）。</summary>
<returns><see cref="T:System.Array"/> 的从零开始的秩（数组维数）。</returns>
    </member>
    <member name="M:System.Array.Resize``1(``0[]@,System.Int32)">
<summary>将数组的元素数更改为指定的新大小。</summary>
<param name="array">要调整大小的一维数组，该数组从零开始；如果为 null 则新建具有指定大小的数组。</param>
<param name="newSize">新数组的大小。</param>
<typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="newSize"/> 小于零。</exception>
    </member>
    <member name="M:System.Array.Reverse(System.Array)">
<summary>反转整个一维 <see cref="T:System.Array"/> 中元素的顺序。</summary>
<param name="array">要反转的一维 <see cref="T:System.Array"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。 </exception>
      <exception cref="T:System.RankException">
<paramref name="array"/> 是多维的。 </exception>
    </member>
    <member name="M:System.Array.Reverse(System.Array,System.Int32,System.Int32)">
<summary>反转一维 <see cref="T:System.Array"/> 中某部分元素的元素顺序。</summary>
<param name="array">要反转的一维 <see cref="T:System.Array"/>。</param>
<param name="index">要反转的部分的起始索引。</param>
<param name="length">要反转的部分中的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.RankException">
<paramref name="array"/> 是多维的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于 <paramref name="array"/> 的下限。-或- <paramref name="length"/> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="index"/> 和 <paramref name="length"/> 不指定 <paramref name="array"/> 中的有效范围。</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32)">
<summary>将某值设置给一维 <see cref="T:System.Array"/> 中指定位置的元素。索引指定为 32 位整数。</summary>
<param name="value">指定元素的新值。</param>
<param name="index">一个 32 位整数，它表示要设置的 <see cref="T:System.Array"/> 元素的位置。</param>
<exception cref="T:System.ArgumentException">当前的 <see cref="T:System.Array"/> 不是正好有一维。</exception>
      <exception cref="T:System.InvalidCastException">
<paramref name="value"/> 不能强制转换为当前 <see cref="T:System.Array"/> 的元素类型。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
<paramref name="index"/> 超出当前 <see cref="T:System.Array"/> 的有效索引的范围。</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32[])">
<summary>将某值设置给多维 <see cref="T:System.Array"/> 中指定位置的元素。索引指定为一个 32 位整数数组。</summary>
<param name="value">指定元素的新值。</param>
<param name="indices">32 位整数的一维数组，它表示用于指定要设置的元素的位置的索引。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="indices"/> 为 null。</exception>
<exception cref="T:System.ArgumentException">当前 <see cref="T:System.Array"/> 中的维数不等于 <paramref name="indices"/> 中的元素数。</exception>
      <exception cref="T:System.InvalidCastException">
<paramref name="value"/> 不能强制转换为当前 <see cref="T:System.Array"/> 的元素类型。</exception>
<exception cref="T:System.IndexOutOfRangeException"><paramref name="indices"/> 中的任何元素都超出当前 <see cref="T:System.Array"/> 的对应维度的有效索引的范围。</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array)">
<summary>使用 <see cref="T:System.Array"/> 中每个元素的 <see cref="T:System.IComparable"/> 实现，对整个一维 <see cref="T:System.Array"/> 中的元素进行排序。</summary>
<param name="array">要排序的一维 <see cref="T:System.Array"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.RankException">
<paramref name="array"/> 是多维的。</exception>
<exception cref="T:System.InvalidOperationException"><paramref name="array"/> 中的一个或多个元素未实现 <see cref="T:System.IComparable"/> 接口。</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)">
<summary>基于第一个 <see cref="T:System.Array"/> 中的关键字，使用指定的 <see cref="T:System.Collections.IComparer"/>，对两个一维 <see cref="T:System.Array"/> 对象（一个包含关键字，另一个包含对应的项）进行排序。</summary>
<param name="keys">一维 <see cref="T:System.Array"/>，它包含要排序的关键字。</param>
<param name="items">一维 <see cref="T:System.Array"/>，其中包含与 <paramref name="keys"/><see cref="T:System.Array"/> 中每个关键字对应的项。-或- null 则只对 <paramref name="keys"/><see cref="T:System.Array"/> 排序。</param>
<param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.IComparer"/> 实现。-或- 若为 null 引用（在 Visual Basic 中为 Nothing），则使用每个元素的 <see cref="T:System.IComparable"/> 实现。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="keys"/> 为 null。</exception>
<exception cref="T:System.RankException"><paramref name="keys"/><see cref="T:System.Array"/> 是多维的。-或- <paramref name="items"/><see cref="T:System.Array"/> 是多维的。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="items"/> 不是 null，并且 <paramref name="keys"/> 下限与 <paramref name="items"/> 的下限不匹配。-或- <paramref name="items"/> 不是 null，并且 <paramref name="keys"/> 的长度大于 <paramref name="items"/> 的长度。-或- <paramref name="comparer"/> 的实现导致排序时出现错误。例如，将某个项与其自身进行比较时，<paramref name="comparer"/> 可能不返回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
<paramref name="comparer"/> 是 null，并且 <paramref name="keys"/><see cref="T:System.Array"/> 中的一个或多个元素不实现 <see cref="T:System.IComparable"/> 接口。</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
<summary>基于第一个 <see cref="T:System.Array"/> 中的关键字，使用指定的 <see cref="T:System.Collections.IComparer"/>，对两个一维 <see cref="T:System.Array"/> 对象（一个包含关键字，另一个包含对应的项）的部分元素进行排序。</summary>
<param name="keys">一维 <see cref="T:System.Array"/>，它包含要排序的关键字。</param>
<param name="items">一维 <see cref="T:System.Array"/>，其中包含与 <paramref name="keys"/><see cref="T:System.Array"/> 中每个关键字对应的项。-或- null 则只对 <paramref name="keys"/><see cref="T:System.Array"/> 排序。</param>
<param name="index">排序范围的起始索引。</param>
<param name="length">排序范围内的元素数。</param>
<param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.IComparer"/> 实现。-或- 若为 null 引用（在 Visual Basic 中为 Nothing），则使用每个元素的 <see cref="T:System.IComparable"/> 实现。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="keys"/> 为 null。</exception>
<exception cref="T:System.RankException"><paramref name="keys"/><see cref="T:System.Array"/> 是多维的。-或- <paramref name="items"/><see cref="T:System.Array"/> 是多维的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于 <paramref name="keys"/> 的下限。-或-<paramref name="length"/> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="items"/> 不是 null，并且 <paramref name="keys"/> 下限与 <paramref name="items"/> 的下限不匹配。-或- <paramref name="items"/> 不是 null，并且 <paramref name="keys"/> 的长度大于 <paramref name="items"/> 的长度。-或- <paramref name="index"/> 和 <paramref name="length"/> 未指定 <paramref name="keys"/><see cref="T:System.Array"/> 中的有效范围。-或- <paramref name="items"/> 不是 null，并且 <paramref name="index"/> 和 <paramref name="length"/> 未指定 <paramref name="items"/><see cref="T:System.Array"/> 中的有效范围。-或- <paramref name="comparer"/> 的实现导致排序时出现错误。例如，将某个项与其自身进行比较时，<paramref name="comparer"/> 可能不返回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
<paramref name="comparer"/> 是 null，并且 <paramref name="keys"/><see cref="T:System.Array"/> 中的一个或多个元素不实现 <see cref="T:System.IComparable"/> 接口。</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Collections.IComparer)">
<summary>使用指定的 <see cref="T:System.Collections.IComparer"/>，对一维 <see cref="T:System.Array"/> 中的元素进行排序。</summary>
<param name="array">要排序的一维 <see cref="T:System.Array"/>。</param>
<param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.IComparer"/> 实现。-或- 若为 null 引用（在 Visual Basic 中为 Nothing），则使用每个元素的 <see cref="T:System.IComparable"/> 实现。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.RankException">
<paramref name="array"/> 是多维的。</exception>
      <exception cref="T:System.InvalidOperationException">
<paramref name="comparer"/> 为 null，<paramref name="array"/> 中的一个或多个元素不实现 <see cref="T:System.IComparable"/> 接口。</exception>
<exception cref="T:System.ArgumentException"><paramref name="comparer"/> 的实现导致排序时出现错误。例如，将某个项与其自身进行比较时，<paramref name="comparer"/> 可能不返回 0。</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
<summary>使用指定的 <see cref="T:System.Collections.IComparer"/>，对一维 <see cref="T:System.Array"/> 中某个范围的元素进行排序。</summary>
<param name="array">要排序的一维 <see cref="T:System.Array"/>。</param>
<param name="index">排序范围的起始索引。</param>
<param name="length">排序范围内的元素数。</param>
<param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.IComparer"/> 实现。-或- 若为 null 引用（在 Visual Basic 中为 Nothing），则使用每个元素的 <see cref="T:System.IComparable"/> 实现。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.RankException">
<paramref name="array"/> 是多维的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于 <paramref name="array"/> 的下限。-或- <paramref name="length"/> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="index"/> 和 <paramref name="length"/> 不指定 <paramref name="array"/> 中的有效范围。-或- <paramref name="comparer"/> 的实现导致排序时出现错误。例如，将某个项与其自身进行比较时，<paramref name="comparer"/> 可能不返回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
<paramref name="comparer"/> 为 null，<paramref name="array"/> 中的一个或多个元素不实现 <see cref="T:System.IComparable"/> 接口。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[])">
<summary>使用 <see cref="T:System.Array"/> 的每个元素的 <see cref="T:System.IComparable`1"/> 泛型接口实现，对整个 <see cref="T:System.Array"/> 中的元素进行排序。</summary>
<param name="array">要排序的从零开始的一维 <see cref="T:System.Array"/>。</param>
<typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
<exception cref="T:System.InvalidOperationException"><paramref name="array"/> 中的一个或多个元素未实现 <see cref="T:System.IComparable`1"/> 泛型接口。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})">
<summary>使用指定的 <see cref="T:System.Collections.Generic.IComparer`1"/> 泛型接口，对 <see cref="T:System.Array"/> 中的元素进行排序。</summary>
<param name="array">要排序的从零开始的一维 <see cref="T:System.Array"/></param>
<param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.Generic.IComparer`1"/> 泛型接口实现；如果为 null，则使用每个元素的 <see cref="T:System.IComparable`1"/> 泛型接口实现。</param>
<typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
<paramref name="comparer"/> 为 null，<paramref name="array"/> 中的一个或多个元素不实现 <see cref="T:System.IComparable`1"/> 泛型接口。</exception>
<exception cref="T:System.ArgumentException"><paramref name="comparer"/> 的实现导致排序时出现错误。例如，将某个项与其自身进行比较时，<paramref name="comparer"/> 可能不返回 0。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Comparison{``0})">
<summary>使用指定的 <see cref="T:System.Comparison`1"/> 对 <see cref="T:System.Array"/> 中的元素进行排序。</summary>
<param name="array">要排序的从零开始的一维 <see cref="T:System.Array"/></param>
<param name="comparison">比较元素时要使用的 <see cref="T:System.Comparison`1"/>。</param>
<typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。-或- <paramref name="comparison"/> 为 null。</exception>
<exception cref="T:System.ArgumentException"><paramref name="comparison"/> 的实现导致排序时出现错误。例如，将某个项与其自身进行比较时，<paramref name="comparison"/> 可能不返回 0。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Int32,System.Int32)">
<summary>使用 <see cref="T:System.Array"/> 的每个元素的 <see cref="T:System.IComparable`1"/> 泛型接口实现，对 <see cref="T:System.Array"/> 中某个范围内的元素进行排序。</summary>
<param name="array">要排序的从零开始的一维 <see cref="T:System.Array"/></param>
<param name="index">排序范围的起始索引。</param>
<param name="length">排序范围内的元素数。</param>
<typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于 <paramref name="array"/> 的下限。-或- <paramref name="length"/> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="index"/> 和 <paramref name="length"/> 不指定 <paramref name="array"/> 中的有效范围。</exception>
<exception cref="T:System.InvalidOperationException"><paramref name="array"/> 中的一个或多个元素未实现 <see cref="T:System.IComparable`1"/> 泛型接口。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
<summary>使用指定的 <see cref="T:System.Collections.Generic.IComparer`1"/> 泛型接口，对 <see cref="T:System.Array"/> 中某个范围内的元素进行排序。</summary>
<param name="array">要排序的从零开始的一维 <see cref="T:System.Array"/>。</param>
<param name="index">排序范围的起始索引。</param>
<param name="length">排序范围内的元素数。</param>
<param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.Generic.IComparer`1"/> 泛型接口实现；如果为 null，则使用每个元素的 <see cref="T:System.IComparable`1"/> 泛型接口实现。</param>
<typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于 <paramref name="array"/> 的下限。-或- <paramref name="length"/> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="index"/> 和 <paramref name="length"/> 不指定 <paramref name="array"/> 中的有效范围。-或- <paramref name="comparer"/> 的实现导致排序时出现错误。例如，将某个项与其自身进行比较时，<paramref name="comparer"/> 可能不返回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
<paramref name="comparer"/> 为 null，<paramref name="array"/> 中的一个或多个元素不实现 <see cref="T:System.IComparable`1"/> 泛型接口。</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[])">
<summary>基于第一个 <see cref="T:System.Array"/> 中的关键字，使用每个关键字的 <see cref="T:System.IComparable`1"/> 泛型接口实现，对两个 <see cref="T:System.Array"/> 对象（一个包含关键字，另一个包含对应的项）进行排序。</summary>
<param name="keys">从零开始的一维 <see cref="T:System.Array"/>，它包含要排序的关键字。 </param>
<param name="items">从零开始的一维 <see cref="T:System.Array"/>，其中包含与 <paramref name="keys"/> 中的关键字对应的项；如果为 null，则只对 <paramref name="keys"/> 进行排序。</param>
<typeparam name="TKey">关键字数组元素的类型。</typeparam>
<typeparam name="TValue">项数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
<paramref name="keys"/> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="items"/> 不是 null，并且 <paramref name="keys"/> 下限与 <paramref name="items"/> 的下限不匹配。-或- <paramref name="items"/> 不是 null，并且 <paramref name="keys"/> 的长度大于 <paramref name="items"/> 的长度。</exception>
<exception cref="T:System.InvalidOperationException"><paramref name="keys"/><see cref="T:System.Array"/> 中的一个或多个元素未实现 <see cref="T:System.IComparable`1"/> 泛型接口。</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})">
<summary>基于第一个 <see cref="T:System.Array"/> 中的关键字，使用指定的 <see cref="T:System.Collections.Generic.IComparer`1"/> 泛型接口，对两个 <see cref="T:System.Array"/> 对象（一个包含关键字，另一个包含对应的项）进行排序。</summary>
<param name="keys">从零开始的一维 <see cref="T:System.Array"/>，它包含要排序的关键字。 </param>
<param name="items">从零开始的一维 <see cref="T:System.Array"/>，其中包含与 <paramref name="keys"/> 中的关键字对应的项；如果为 null，则只对 <paramref name="keys"/> 进行排序。</param>
<param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.Generic.IComparer`1"/> 泛型接口实现；如果为 null，则使用每个元素的 <see cref="T:System.IComparable`1"/> 泛型接口实现。</param>
<typeparam name="TKey">关键字数组元素的类型。</typeparam>
<typeparam name="TValue">项数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
<paramref name="keys"/> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="items"/> 不是 null，并且 <paramref name="keys"/> 的下限与 <paramref name="items"/> 的下限不匹配。-或- <paramref name="items"/> 不是 null，并且 <paramref name="keys"/> 的长度大于 <paramref name="items"/> 的长度。-或- <paramref name="comparer"/> 的实现导致排序时出现错误。例如，将某个项与其自身进行比较时，<paramref name="comparer"/> 可能不返回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
<paramref name="comparer"/> 是 null，并且 <paramref name="keys"/><see cref="T:System.Array"/> 中的一个或多个元素不实现 <see cref="T:System.IComparable`1"/> 泛型接口。</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)">
<summary>基于第一个 <see cref="T:System.Array"/> 中的关键字，使用每个关键字的 <see cref="T:System.IComparable`1"/> 泛型接口实现，对两个 <see cref="T:System.Array"/> 对象（一个包含关键字，另一个包含对应的项）的部分元素进行排序。</summary>
<param name="keys">从零开始的一维 <see cref="T:System.Array"/>，它包含要排序的关键字。 </param>
<param name="items">从零开始的一维 <see cref="T:System.Array"/>，其中包含与 <paramref name="keys"/> 中的关键字对应的项；如果为 null，则只对 <paramref name="keys"/> 进行排序。</param>
<param name="index">排序范围的起始索引。</param>
<param name="length">排序范围内的元素数。</param>
<typeparam name="TKey">关键字数组元素的类型。</typeparam>
<typeparam name="TValue">项数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
<paramref name="keys"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于 <paramref name="keys"/> 的下限。-或-<paramref name="length"/> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="items"/> 不是 null，并且 <paramref name="keys"/> 下限与 <paramref name="items"/> 的下限不匹配。-或- <paramref name="items"/> 不是 null，并且 <paramref name="keys"/> 的长度大于 <paramref name="items"/> 的长度。-或- <paramref name="index"/> 和 <paramref name="length"/> 未指定 <paramref name="keys"/><see cref="T:System.Array"/> 中的有效范围。-或- <paramref name="items"/> 不是 null，并且 <paramref name="index"/> 和 <paramref name="length"/> 未指定 <paramref name="items"/><see cref="T:System.Array"/> 中的有效范围。</exception>
<exception cref="T:System.InvalidOperationException"><paramref name="keys"/><see cref="T:System.Array"/> 中的一个或多个元素未实现 <see cref="T:System.IComparable`1"/> 泛型接口。</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
<summary>基于第一个 <see cref="T:System.Array"/> 中的关键字，使用指定的 <see cref="T:System.Collections.Generic.IComparer`1"/> 泛型接口，对两个 <see cref="T:System.Array"/> 对象（一个包含关键字，另一个包含对应的项）的部分元素进行排序。</summary>
<param name="keys">从零开始的一维 <see cref="T:System.Array"/>，它包含要排序的关键字。 </param>
<param name="items">从零开始的一维 <see cref="T:System.Array"/>，其中包含与 <paramref name="keys"/> 中的关键字对应的项；如果为 null，则只对 <paramref name="keys"/> 进行排序。</param>
<param name="index">排序范围的起始索引。</param>
<param name="length">排序范围内的元素数。</param>
<param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.Generic.IComparer`1"/> 泛型接口实现；如果为 null，则使用每个元素的 <see cref="T:System.IComparable`1"/> 泛型接口实现。</param>
<typeparam name="TKey">关键字数组元素的类型。</typeparam>
<typeparam name="TValue">项数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
<paramref name="keys"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于 <paramref name="keys"/> 的下限。-或-<paramref name="length"/> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="items"/> 不是 null，并且 <paramref name="keys"/> 下限与 <paramref name="items"/> 的下限不匹配。-或- <paramref name="items"/> 不是 null，并且 <paramref name="keys"/> 的长度大于 <paramref name="items"/> 的长度。-或- <paramref name="index"/> 和 <paramref name="length"/> 未指定 <paramref name="keys"/><see cref="T:System.Array"/> 中的有效范围。-或- <paramref name="items"/> 不是 null，并且 <paramref name="index"/> 和 <paramref name="length"/> 未指定 <paramref name="items"/><see cref="T:System.Array"/> 中的有效范围。-或- <paramref name="comparer"/> 的实现导致排序时出现错误。例如，将某个项与其自身进行比较时，<paramref name="comparer"/> 可能不返回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
<paramref name="comparer"/> 是 null，并且 <paramref name="keys"/><see cref="T:System.Array"/> 中的一个或多个元素不实现 <see cref="T:System.IComparable`1"/> 泛型接口。</exception>
    </member>
    <member name="P:System.Array.SyncRoot">
<summary>获取一个对象，该对象可以用于同步对 <see cref="T:System.Array"/> 的访问。</summary>
<returns>可用于同步对 <see cref="T:System.Array"/> 的访问的对象。</returns>
    </member>
    <member name="P:System.Array.System#Collections#ICollection#Count">
<summary>获取 <see cref="T:System.Array"/> 中包含的元素数量。</summary>
<returns><see cref="T:System.Array"/> 中包含的元素个数。</returns>
    </member>
    <member name="M:System.Array.System#Collections#IList#Add(System.Object)">
<summary>实现 <see cref="M:System.Collections.IList.Add(System.Object)"/>。在所有情况下均引发 <see cref="T:System.NotSupportedException"/>。</summary>
<returns>总是引发异常。</returns>
<param name="value">要添加到 <see cref="T:System.Array"/> 的对象。</param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Clear">
<summary>将 <see cref="T:System.Array"/> 中的所有元素设置为零、false 或 null，具体取决于元素类型。</summary>
<exception cref="T:System.NotSupportedException"><see cref="T:System.Array"/> 为只读。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Contains(System.Object)">
<summary>确定某元素是否在 <see cref="T:System.Array"/> 中。</summary>
<returns>如果 <paramref name="value"/> 在 <see cref="T:System.Array"/> 中，则为 true；否则为 false。</returns>
<param name="value">要在 <see cref="T:System.Array"/> 中查找的对象。要定位的元素对于引用类型可以是 null。</param>
<exception cref="T:System.RankException">当前 <see cref="T:System.Array"/> 是多维的。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#IndexOf(System.Object)">
<summary>搜索指定的对象，并返回当前一维实例中第一个匹配项的索引。</summary>
<returns>如果在整个 <see cref="T:System.Array"/> 中找到 <paramref name="value"/> 的匹配项，则为第一个匹配项的索引；否则为 <see cref="T:System.Array"/> 的下限 - 1。</returns>
<param name="value">要在当前 <see cref="T:System.Array"/> 中定位的对象。</param>
<exception cref="T:System.RankException">当前 <see cref="T:System.Array"/> 是多维的。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Insert(System.Int32,System.Object)">
<summary>实现 <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)"/>。在所有情况下均引发 <see cref="T:System.NotSupportedException"/>。</summary>
<param name="index">应插入 <paramref name="value"/> 的位置的索引。</param>
<param name="value">要插入的对象。</param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="P:System.Array.System#Collections#IList#Item(System.Int32)">
<summary>获取或设置位于指定索引处的元素。</summary>
<returns>位于指定索引处的元素。</returns>
<param name="index">要获取或设置的元素的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零。-或- <paramref name="index"/> 等于或大于 <see cref="P:System.Collections.ICollection.Count"/>。</exception>
<exception cref="T:System.ArgumentException">当前的 <see cref="T:System.Array"/> 不是正好有一维。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Remove(System.Object)">
<summary>实现 <see cref="M:System.Collections.IList.Remove(System.Object)"/>。在所有情况下均引发 <see cref="T:System.NotSupportedException"/>。</summary>
<param name="value">要从 <see cref="T:System.Array"/> 中移除的对象。</param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#RemoveAt(System.Int32)">
<summary>实现 <see cref="M:System.Collections.IList.RemoveAt(System.Int32)"/>。在所有情况下均引发 <see cref="T:System.NotSupportedException"/>。</summary>
<param name="index">要移除的元素的索引。</param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
<summary>确定当前集合对象在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
<returns>一个指示当前集合对象与其他对象的关系的整数，如下表所示。返回 值 描述 -1 当前实例位于 <paramref name="other"/> 之前。0 当前实例和 <paramref name="other"/> 相等。1 当前实例在 <paramref name="other"/> 之后。</returns>
<param name="other">要与当前实例进行比较的对象。</param>
<param name="comparer">一个将当前对象与 <paramref name="other"/> 进行比较的对象。</param>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
<summary>确定某个对象与当前实例是否相等。</summary>
<returns>如果两个对象相等，则为 true；否则为 false。</returns>
<param name="other">要与当前实例进行比较的对象。</param>
<param name="comparer">一个可确定当前实例与 <paramref name="other"/> 是否相等的对象。 </param>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
<summary>返回当前实例的哈希代码。</summary>
<returns>当前实例的哈希代码。</returns>
<param name="comparer">一个计算当前对象的哈希代码的对象。</param>
    </member>
    <member name="T:System.ArraySegment`1">
<summary>分隔一维数组的一部分。</summary>
<typeparam name="T">数组段中元素的类型。</typeparam>
    </member>
    <member name="M:System.ArraySegment`1.#ctor(`0[])">
<summary>初始化 <see cref="T:System.ArraySegment`1"/> 结构的新实例，该结构用于分隔指定数组中的所有元素。</summary>
<param name="array">要包装的数组。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
    </member>
    <member name="M:System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)">
<summary>初始化 <see cref="T:System.ArraySegment`1"/> 结构的新结构，该结构用于分隔指定数组中指定范围的元素。</summary>
<param name="array">包含要分隔的元素范围的数组。</param>
<param name="offset">相应范围中第一个元素的从零开始的索引。</param>
<param name="count">范围中的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="offset"/> 或 <paramref name="count"/> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="offset"/> 和 <paramref name="count"/> 不指定 <paramref name="array"/> 中的有效范围。</exception>
    </member>
    <member name="P:System.ArraySegment`1.Array">
<summary>获取原始数组，其中包含数组段分隔的元素范围。</summary>
<returns>传递到构造函数并且包含由 <see cref="T:System.ArraySegment`1"/> 分隔的范围的原始数组。</returns>
    </member>
    <member name="P:System.ArraySegment`1.Count">
<summary>获取由数组段分隔的范围中的元素个数。</summary>
<returns>由 <see cref="T:System.ArraySegment`1"/> 分隔的范围中的元素个数。</returns>
    </member>
    <member name="M:System.ArraySegment`1.Equals(System.ArraySegment{`0})">
<summary>确定指定的 <see cref="T:System.ArraySegment`1"/> 结构是否等于当前实例。</summary>
<returns>如果指定的 <see cref="T:System.ArraySegment`1"/> 结构等于当前实例，则为 true；否则为 false。</returns>
<param name="obj">要与当前实例进行比较的 <see cref="T:System.ArraySegment`1"/> 结构。</param>
    </member>
    <member name="M:System.ArraySegment`1.Equals(System.Object)">
<summary>确定指定的对象是否等于当前实例。</summary>
<returns>如果指定的对象为 <see cref="T:System.ArraySegment`1"/> 结构并且等于当前实例，则为 true；否则为 false。</returns>
<param name="obj">要与当前实例进行比较的对象。</param>
    </member>
    <member name="M:System.ArraySegment`1.GetHashCode">
<summary>返回当前实例的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="P:System.ArraySegment`1.Offset">
<summary>获取由数组段分隔的范围中的第一个元素的位置（相对于原始数组的开始位置）。</summary>
<returns>由 <see cref="T:System.ArraySegment`1"/> 分隔的范围中的第一个元素的位置（相对于原始数组的开始位置）。</returns>
    </member>
    <member name="M:System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})">
<summary>指示两个 <see cref="T:System.ArraySegment`1"/> 结构是否相等。</summary>
<returns>如果 <paramref name="a"/> 等于 <paramref name="b"/>，则为 true；否则为 false。</returns>
<param name="a">相等运算符左侧的 <see cref="T:System.ArraySegment`1"/> 结构。</param>
<param name="b">相等运算符右侧的 <see cref="T:System.ArraySegment`1"/> 结构。</param>
    </member>
    <member name="M:System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})">
<summary>指示两个 <see cref="T:System.ArraySegment`1"/> 结构是否不相等。</summary>
<returns>如果 <paramref name="a"/> 不等于 <paramref name="b"/>，则为 true；否则为 false。</returns>
<param name="a">不相等运算符左侧的 <see cref="T:System.ArraySegment`1"/> 结构。</param>
<param name="b">不相等运算符右侧的 <see cref="T:System.ArraySegment`1"/> 结构。</param>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Add(`0)">
<summary>将某项添加到数组段中。</summary>
<param name="item">要添加到数组段中的对象。</param>
<exception cref="T:System.NotSupportedException">数组段为只读。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Clear">
<summary>从数组段中移除所有项。</summary>
<exception cref="T:System.NotSupportedException">数组段为只读。 </exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
<summary>确定数组段是否包含特定值。</summary>
<returns>如果 <paramref name="item"/> 在数组段中，则为 true；否则为 false。</returns>
<param name="item">要在数组段中定位的对象。</param>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
<summary>从特定数组索引开始，将数组段的元素复制到某个数组。</summary>
<param name="array">作为从数组段复制的元素的目标的一维数组。该数组的索引必须从零开始。</param>
<param name="arrayIndex"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="arrayIndex"/> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="array"/> 是多维的。-或- 源数组段中的元素数目大于从 <paramref name="arrayIndex"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。-或- 无法自动将类型 <paramref name="T"/> 强制转换为目标 <paramref name="array"/> 的类型。</exception>
    </member>
    <member name="P:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
<summary>获取一个值，该值指示 <see cref="T:System.ArraySegment`1"/> 是否为只读。</summary>
<returns>如果 <see cref="T:System.ArraySegment`1"/> 为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
<summary>从数组段中移除第一次出现的特定对象。</summary>
<returns>如果从数组段中成功移除了 <paramref name="item"/>，则为 true；否则为 false。如果在原始数组段中没有找到 <paramref name="item"/>，此方法也会返回 false。</returns>
<param name="item">要从数组段中移除的对象。</param>
<exception cref="T:System.NotSupportedException">数组段为只读。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
<summary>返回循环访问数组段的枚举器。</summary>
<returns>一个可用于循环访问数组段的枚举器。</returns>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IList{T}#IndexOf(`0)">
<summary>确定数组段中特定项目的索引。</summary>
<returns>如果在列表中找到，则为 <paramref name="item"/> 的索引；否则为 -1。</returns>
<param name="item">要在数组段中定位的对象。</param>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
<summary>将一项插入数组段中指定索引处。</summary>
<param name="index">应插入 <paramref name="item"/> 的位置的零始索引。</param>
<param name="item">要插入到数组段中的对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 不是数组段中的有效索引。</exception>
<exception cref="T:System.NotSupportedException">数组段为只读。</exception>
    </member>
    <member name="P:System.ArraySegment`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
<summary>获取或设置位于指定索引处的元素。</summary>
<returns>位于指定索引处的元素。</returns>
<param name="index">要获取或设置的元素从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 不是 <see cref="T:System.ArraySegment`1"/> 中的有效索引。</exception>
<exception cref="T:System.NotSupportedException">设置该属性，而且 <see cref="T:System.ArraySegment`1"/> 为只读。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
<summary>移除指定索引处的数组段项。</summary>
<param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 不是数组段中的有效索引。</exception>
<exception cref="T:System.NotSupportedException">数组段为只读。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator">
<summary>返回循环访问数组段的枚举器。</summary>
<returns>一个可用于循环访问数组段的枚举器。</returns>
    </member>
    <member name="T:System.ArrayTypeMismatchException">
<summary>当试图在数组中存储类型不正确的元素时引发的异常。 </summary>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor">
<summary>初始化 <see cref="T:System.ArrayTypeMismatchException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.ArrayTypeMismatchException"/> 类的新实例。</summary>
<param name="message">描述该错误的 <see cref="T:System.String"/>。 </param>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.ArrayTypeMismatchException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不为 null 引用，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="T:System.AsyncCallback">
<summary>引用在相应异步操作完成时调用的方法。</summary>
<param name="ar">异步操作的结果。 </param>
    </member>
    <member name="T:System.Attribute">
<summary>表示自定义属性的基类。</summary>
    </member>
    <member name="M:System.Attribute.#ctor">
<summary>初始化 <see cref="T:System.Attribute"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Attribute.Equals(System.Object)">
<summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
<returns>如果 <paramref name="obj"/> 等于此实例的类型和值，则为 true；否则为 false。</returns>
<param name="obj">要与此实例进行比较的 <see cref="T:System.Object"/> 或 null。 </param>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)">
<summary>检索应用于指定程序集的自定义属性。参数指定程序集和要搜索的自定义属性的类型。</summary>
<returns>一个引用，指向单个类型为 <paramref name="attributeType"/> 且应用于 <paramref name="element"/> 的自定义属性；如果没有此类属性，则为 null。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.Assembly"/> 类派生的对象，该类描述可重用模块集合。 </param>
<param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 或 <paramref name="attributeType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 不是从 <see cref="T:System.Attribute"/> 派生得来的。 </exception>
<exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。 </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)">
<summary>检索应用于程序集的自定义属性。参数指定程序集、要搜索的自定义属性的类型以及忽略的搜索选项。</summary>
<returns>一个引用，指向单个类型为 <paramref name="attributeType"/> 且应用于 <paramref name="element"/> 的自定义属性；如果没有此类属性，则为 null。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.Assembly"/> 类派生的对象，该类描述可重用模块集合。 </param>
<param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
<param name="inherit">此参数被忽略，并且不会影响此方法的操作。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 或 <paramref name="attributeType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 不是从 <see cref="T:System.Attribute"/> 派生得来的。 </exception>
<exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。 </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)">
<summary>检索应用于类型成员的自定义属性。参数指定成员和要搜索的自定义属性的类型。</summary>
<returns>一个引用，指向单个类型为 <paramref name="attributeType"/> 且应用于 <paramref name="element"/> 的自定义属性；如果没有此类属性，则为 null。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.MemberInfo"/> 类派生的对象，该类描述类的构造函数、事件、字段、方法或属性成员。 </param>
<param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 或 <paramref name="attributeType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 不是从 <see cref="T:System.Attribute"/> 派生得来的。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="element"/> 不是构造函数、方法、属性、事件、类型或字段。 </exception>
<exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。 </exception>
<exception cref="T:System.TypeLoadException">无法加载自定义属性类型。 </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
<summary>检索应用于类型成员的自定义属性。参数指定成员、要搜索的自定义属性的类型以及是否搜索成员的祖先。</summary>
<returns>一个引用，指向单个类型为 <paramref name="attributeType"/> 且应用于 <paramref name="element"/> 的自定义属性；如果没有此类属性，则为 null。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.MemberInfo"/> 类派生的对象，该类描述类的构造函数、事件、字段、方法或属性成员。 </param>
<param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
<param name="inherit">如果为 true，则指定还在 <paramref name="element"/> 的祖先中搜索自定义属性。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 或 <paramref name="attributeType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 不是从 <see cref="T:System.Attribute"/> 派生得来的。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="element"/> 不是构造函数、方法、属性、事件、类型或字段。 </exception>
<exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。 </exception>
<exception cref="T:System.TypeLoadException">无法加载自定义属性类型。 </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)">
<summary>检索应用于模块的自定义属性。参数指定模块和要搜索的自定义属性的类型。</summary>
<returns>一个引用，指向单个类型为 <paramref name="attributeType"/> 且应用于 <paramref name="element"/> 的自定义属性；如果没有此类属性，则为 null。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.Module"/> 类派生的对象，该类描述可移植的可执行文件。 </param>
<param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 或 <paramref name="attributeType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 不是从 <see cref="T:System.Attribute"/> 派生得来的。 </exception>
<exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。 </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)">
<summary>检索应用于模块的自定义属性。参数指定模块、要搜索的自定义属性的类型以及忽略的搜索选项。</summary>
<returns>一个引用，指向单个类型为 <paramref name="attributeType"/> 且应用于 <paramref name="element"/> 的自定义属性；如果没有此类属性，则为 null。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.Module"/> 类派生的对象，该类描述可移植的可执行文件。 </param>
<param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
<param name="inherit">此参数被忽略，并且不会影响此方法的操作。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 或 <paramref name="attributeType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 不是从 <see cref="T:System.Attribute"/> 派生得来的。 </exception>
<exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。 </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)">
<summary>检索应用于方法参数的自定义属性。参数指定方法参数和要搜索的自定义属性的类型。</summary>
<returns>一个引用，指向单个类型为 <paramref name="attributeType"/> 且应用于 <paramref name="element"/> 的自定义属性；如果没有此类属性，则为 null。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.ParameterInfo"/> 类派生的对象，该类描述类成员的参数。 </param>
<param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 或 <paramref name="attributeType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 不是从 <see cref="T:System.Attribute"/> 派生得来的。 </exception>
<exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。 </exception>
<exception cref="T:System.TypeLoadException">无法加载自定义属性类型。 </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
<summary>检索应用于方法参数的自定义属性。参数指定方法参数、要搜索的自定义属性的类型以及是否搜索方法参数的祖先。</summary>
<returns>一个引用，指向单个类型为 <paramref name="attributeType"/> 且应用于 <paramref name="element"/> 的自定义属性；如果没有此类属性，则为 null。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.ParameterInfo"/> 类派生的对象，该类描述类成员的参数。 </param>
<param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
<param name="inherit">如果为 true，则指定还在 <paramref name="element"/> 的祖先中搜索自定义属性。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 或 <paramref name="attributeType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 不是从 <see cref="T:System.Attribute"/> 派生得来的。 </exception>
<exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。 </exception>
<exception cref="T:System.TypeLoadException">无法加载自定义属性类型。 </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly)">
<summary>检索应用于程序集的自定义属性的数组。参数指定程序集。</summary>
<returns>一个 <see cref="T:System.Attribute"/> 数组，包含应用于 <paramref name="element"/> 的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.Assembly"/> 类派生的对象，该类描述可重用模块集合。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 为 null。 </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)">
<summary>检索应用于程序集的自定义属性的数组。参数指定程序集及忽略的搜索选项。</summary>
<returns>一个 <see cref="T:System.Attribute"/> 数组，包含应用于 <paramref name="element"/> 的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.Assembly"/> 类派生的对象，该类描述可重用模块集合。 </param>
<param name="inherit">此参数被忽略，并且不会影响此方法的操作。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 或 <paramref name="attributeType"/> 为 null。 </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)">
<summary>检索应用于程序集的自定义属性的数组。参数指定程序集和要搜索的自定义属性的类型。</summary>
<returns>一个 <see cref="T:System.Attribute"/> 数组，包含应用于 <paramref name="element"/> 的 <paramref name="attributeType"/> 类型的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.Assembly"/> 类派生的对象，该类描述可重用模块集合。 </param>
<param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 或 <paramref name="attributeType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 不是从 <see cref="T:System.Attribute"/> 派生得来的。 </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)">
<summary>检索应用于程序集的自定义属性的数组。参数指定程序集、要搜索的自定义属性的类型以及忽略的搜索选项。</summary>
<returns>一个 <see cref="T:System.Attribute"/> 数组，包含应用于 <paramref name="element"/> 的 <paramref name="attributeType"/> 类型的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.Assembly"/> 类派生的对象，该类描述可重用模块集合。 </param>
<param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
<param name="inherit">此参数被忽略，并且不会影响此方法的操作。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 或 <paramref name="attributeType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 不是从 <see cref="T:System.Attribute"/> 派生得来的。 </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)">
<summary>检索应用于类型的成员的自定义属性的数组。参数指定成员。</summary>
<returns>一个 <see cref="T:System.Attribute"/> 数组，包含应用于 <paramref name="element"/> 的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.MemberInfo"/> 类派生的对象，该类描述类的构造函数、事件、字段、方法或属性成员。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 为 null。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="element"/> 不是构造函数、方法、属性、事件、类型或字段。 </exception>
<exception cref="T:System.TypeLoadException">无法加载自定义属性类型。 </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)">
<summary>检索应用于类型的成员的自定义属性的数组。参数指定成员、要搜索的自定义属性的类型以及是否搜索成员的祖先。</summary>
<returns>一个 <see cref="T:System.Attribute"/> 数组，包含应用于 <paramref name="element"/> 的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.MemberInfo"/> 类派生的对象，该类描述类的构造函数、事件、字段、方法或属性成员。 </param>
<param name="inherit">如果为 true，则指定还在 <paramref name="element"/> 的祖先中搜索自定义属性。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 为 null。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="element"/> 不是构造函数、方法、属性、事件、类型或字段。 </exception>
<exception cref="T:System.TypeLoadException">无法加载自定义属性类型。 </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)">
<summary>检索应用于类型的成员的自定义属性的数组。参数指定成员和要搜索的自定义属性的类型。</summary>
<returns>一个 <see cref="T:System.Attribute"/> 数组，包含应用于 <paramref name="element"/> 的 <paramref name="type"/> 类型的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.MemberInfo"/> 类派生的对象，该类描述类的构造函数、事件、字段、方法或属性成员。 </param>
<param name="type">要搜索的自定义属性的类型或基类型。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 或 <paramref name="type"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="type"/> 不是从 <see cref="T:System.Attribute"/> 派生得来的。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="element"/> 不是构造函数、方法、属性、事件、类型或字段。 </exception>
<exception cref="T:System.TypeLoadException">无法加载自定义属性类型。 </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
<summary>检索应用于类型的成员的自定义属性的数组。参数指定成员、要搜索的自定义属性的类型以及是否搜索成员的祖先。</summary>
<returns>一个 <see cref="T:System.Attribute"/> 数组，包含应用于 <paramref name="element"/> 的 <paramref name="type"/> 类型的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.MemberInfo"/> 类派生的对象，该类描述类的构造函数、事件、字段、方法或属性成员。 </param>
<param name="type">要搜索的自定义属性的类型或基类型。</param>
<param name="inherit">如果为 true，则指定还在 <paramref name="element"/> 的祖先中搜索自定义属性。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 或 <paramref name="type"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="type"/> 不是从 <see cref="T:System.Attribute"/> 派生得来的。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="element"/> 不是构造函数、方法、属性、事件、类型或字段。 </exception>
<exception cref="T:System.TypeLoadException">无法加载自定义属性类型。 </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module)">
<summary>检索应用于模块的自定义属性的数组。参数指定模块。</summary>
<returns>一个 <see cref="T:System.Attribute"/> 数组，包含应用于 <paramref name="element"/> 的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.Module"/> 类派生的对象，该类描述可移植的可执行文件。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 为 null。 </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)">
<summary>检索应用于模块的自定义属性的数组。参数指定模块及忽略的搜索选项。</summary>
<returns>一个 <see cref="T:System.Attribute"/> 数组，包含应用于 <paramref name="element"/> 的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.Module"/> 类派生的对象，该类描述可移植的可执行文件。 </param>
<param name="inherit">此参数被忽略，并且不会影响此方法的操作。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 或 <paramref name="attributeType"/> 为 null。 </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)">
<summary>检索应用于模块的自定义属性的数组。参数指定模块和要搜索的自定义属性的类型。</summary>
<returns>一个 <see cref="T:System.Attribute"/> 数组，包含应用于 <paramref name="element"/> 的 <paramref name="attributeType"/> 类型的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.Module"/> 类派生的对象，该类描述可移植的可执行文件。 </param>
<param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 或 <paramref name="attributeType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 不是从 <see cref="T:System.Attribute"/> 派生得来的。 </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)">
<summary>检索应用于模块的自定义属性的数组。参数指定模块、要搜索的自定义属性的类型以及忽略的搜索选项。</summary>
<returns>一个 <see cref="T:System.Attribute"/> 数组，包含应用于 <paramref name="element"/> 的 <paramref name="attributeType"/> 类型的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.Module"/> 类派生的对象，该类描述可移植的可执行文件。 </param>
<param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
<param name="inherit">此参数被忽略，并且不会影响此方法的操作。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 或 <paramref name="attributeType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 不是从 <see cref="T:System.Attribute"/> 派生得来的。 </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)">
<summary>检索应用于方法参数的自定义属性的数组。参数指定方法参数。</summary>
<returns>一个 <see cref="T:System.Attribute"/> 数组，包含应用于 <paramref name="element"/> 的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.ParameterInfo"/> 类派生的对象，该类描述类成员的参数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 为 null。 </exception>
<exception cref="T:System.TypeLoadException">无法加载自定义属性类型。 </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)">
<summary>检索应用于方法参数的自定义属性的数组。参数指定方法参数以及是否搜索方法参数的祖先。</summary>
<returns>一个 <see cref="T:System.Attribute"/> 数组，包含应用于 <paramref name="element"/> 的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.ParameterInfo"/> 类派生的对象，该类描述类成员的参数。 </param>
<param name="inherit">如果为 true，则指定还在 <paramref name="element"/> 的祖先中搜索自定义属性。 </param>
<exception cref="T:System.ArgumentException"><paramref name="element"/> 的 <see cref="P:System.Reflection.ParameterInfo.Member"/> 属性为 null。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 为 null。 </exception>
<exception cref="T:System.TypeLoadException">无法加载自定义属性类型。 </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)">
<summary>检索应用于方法参数的自定义属性的数组。参数指定方法参数和要搜索的自定义属性的类型。</summary>
<returns>一个 <see cref="T:System.Attribute"/> 数组，包含应用于 <paramref name="element"/> 的 <paramref name="attributeType"/> 类型的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.ParameterInfo"/> 类派生的对象，该类描述类成员的参数。 </param>
<param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 或 <paramref name="attributeType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 不是从 <see cref="T:System.Attribute"/> 派生得来的。 </exception>
<exception cref="T:System.TypeLoadException">无法加载自定义属性类型。 </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
<summary>检索应用于方法参数的自定义属性的数组。参数指定方法参数、要搜索的自定义属性的类型以及是否搜索方法参数的祖先。</summary>
<returns>一个 <see cref="T:System.Attribute"/> 数组，包含应用于 <paramref name="element"/> 的 <paramref name="attributeType"/> 类型的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.ParameterInfo"/> 类派生的对象，该类描述类成员的参数。 </param>
<param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
<param name="inherit">如果为 true，则指定还在 <paramref name="element"/> 的祖先中搜索自定义属性。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 或 <paramref name="attributeType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 不是从 <see cref="T:System.Attribute"/> 派生得来的。 </exception>
<exception cref="T:System.TypeLoadException">无法加载自定义属性类型。 </exception>
    </member>
    <member name="M:System.Attribute.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)">
<summary>确定是否将任意自定义属性应用于程序集。参数指定程序集和要搜索的自定义属性的类型。</summary>
<returns>如果类型 <paramref name="attributeType"/> 的某个自定义属性应用于 <paramref name="element"/>，则为 true；否则为 false。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.Assembly"/> 类派生的对象，该类描述可重用模块集合。 </param>
<param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 或 <paramref name="attributeType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 不是从 <see cref="T:System.Attribute"/> 派生得来的。 </exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)">
<summary>确定是否将任意自定义属性应用于程序集。参数指定程序集、要搜索的自定义属性的类型以及忽略的搜索选项。</summary>
<returns>如果类型 <paramref name="attributeType"/> 的某个自定义属性应用于 <paramref name="element"/>，则为 true；否则为 false。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.Assembly"/> 类派生的对象，该类描述可重用模块集合。 </param>
<param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
<param name="inherit">此参数被忽略，并且不会影响此方法的操作。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 或 <paramref name="attributeType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 不是从 <see cref="T:System.Attribute"/> 派生得来的。 </exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)">
<summary>确定是否将任意自定义属性应用于类型成员。参数指定成员和要搜索的自定义属性的类型。</summary>
<returns>如果类型 <paramref name="attributeType"/> 的某个自定义属性应用于 <paramref name="element"/>，则为 true；否则为 false。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.MemberInfo"/> 类派生的对象，该类描述类的构造函数、事件、字段、方法、类型或属性成员。 </param>
<param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 或 <paramref name="attributeType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 不是从 <see cref="T:System.Attribute"/> 派生得来的。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="element"/> 不是构造函数、方法、属性、事件、类型或字段。 </exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)">
<summary>确定是否将任意自定义属性应用于类型成员。参数指定成员、要搜索的自定义属性的类型以及是否搜索成员的祖先。</summary>
<returns>如果类型 <paramref name="attributeType"/> 的某个自定义属性应用于 <paramref name="element"/>，则为 true；否则为 false。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.MemberInfo"/> 类派生的对象，该类描述类的构造函数、事件、字段、方法、类型或属性成员。 </param>
<param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
<param name="inherit">如果为 true，则指定还在 <paramref name="element"/> 的祖先中搜索自定义属性。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 或 <paramref name="attributeType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 不是从 <see cref="T:System.Attribute"/> 派生得来的。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="element"/> 不是构造函数、方法、属性、事件、类型或字段。 </exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Module,System.Type)">
<summary>确定是否将指定类型的任何自定义属性应用于模块。参数指定模块和要搜索的自定义属性的类型。</summary>
<returns>如果类型 <paramref name="attributeType"/> 的某个自定义属性应用于 <paramref name="element"/>，则为 true；否则为 false。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.Module"/> 类派生的对象，该类描述可移植的可执行文件。 </param>
<param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 或 <paramref name="attributeType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 不是从 <see cref="T:System.Attribute"/> 派生得来的。 </exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)">
<summary>确定是否将任意自定义属性应用于模块。参数指定模块、要搜索的自定义属性的类型以及忽略的搜索选项。 </summary>
<returns>如果类型 <paramref name="attributeType"/> 的某个自定义属性应用于 <paramref name="element"/>，则为 true；否则为 false。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.Module"/> 类派生的对象，该类描述可移植的可执行文件。 </param>
<param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
<param name="inherit">此参数被忽略，并且不会影响此方法的操作。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 或 <paramref name="attributeType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 不是从 <see cref="T:System.Attribute"/> 派生得来的。 </exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)">
<summary>确定是否将任意自定义属性应用于方法参数。参数指定方法参数和要搜索的自定义属性的类型。</summary>
<returns>如果类型 <paramref name="attributeType"/> 的某个自定义属性应用于 <paramref name="element"/>，则为 true；否则为 false。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.ParameterInfo"/> 类派生的对象，该类描述类成员的参数。 </param>
<param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 或 <paramref name="attributeType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 不是从 <see cref="T:System.Attribute"/> 派生得来的。 </exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
<summary>确定是否将任意自定义属性应用于方法参数。参数指定方法参数、要搜索的自定义属性的类型以及是否搜索方法参数的祖先。</summary>
<returns>如果类型 <paramref name="attributeType"/> 的某个自定义属性应用于 <paramref name="element"/>，则为 true；否则为 false。</returns>
<param name="element">一个从 <see cref="T:System.Reflection.ParameterInfo"/> 类派生的对象，该类描述类成员的参数。 </param>
<param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
<param name="inherit">如果为 true，则指定还在 <paramref name="element"/> 的祖先中搜索自定义属性。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="element"/> 或 <paramref name="attributeType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 不是从 <see cref="T:System.Attribute"/> 派生得来的。 </exception>
      <exception cref="T:System.ExecutionEngineException">
<paramref name="element"/> 不是方法、构造函数或类型。 </exception>
    </member>
    <member name="M:System.Attribute.Match(System.Object)">
<summary>当在派生类中重写时，返回一个指示此实例是否等于指定对象的值。</summary>
<returns>如果此实例等于 <paramref name="obj"/>，则为 true；否则为 false。</returns>
<param name="obj">与 <see cref="T:System.Attribute"/> 的此实例进行比较的 <see cref="T:System.Object"/>。 </param>
    </member>
    <member name="T:System.AttributeTargets">
<summary>指定可以对它们应用属性的应用程序元素。</summary>
    </member>
    <member name="F:System.AttributeTargets.Assembly">
<summary>可以对程序集应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Module">
<summary>可以对模块应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Class">
<summary>可以对类应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Struct">
<summary>可以对结构应用属性，即值类型。</summary>
    </member>
    <member name="F:System.AttributeTargets.Enum">
<summary>可以对枚举应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Constructor">
<summary>可以对构造函数应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Method">
<summary>可以对方法应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Property">
<summary>可以对属性应用特性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Field">
<summary>可以对字段应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Event">
<summary>可以对事件应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Interface">
<summary>可以对接口应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Parameter">
<summary>可以对参数应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Delegate">
<summary>可以对委托应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.ReturnValue">
<summary>可以对返回值应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.GenericParameter">
<summary>可以对泛型参数应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.All">
<summary>可以对任何应用程序元素应用属性。</summary>
    </member>
    <member name="T:System.AttributeUsageAttribute">
<summary>指定另一属性类的用法。无法继承此类。</summary>
    </member>
    <member name="M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)">
<summary>用指定的 <see cref="T:System.AttributeTargets"/>、<see cref="P:System.AttributeUsageAttribute.AllowMultiple"/> 值和 <see cref="P:System.AttributeUsageAttribute.Inherited"/> 值列表初始化 <see cref="T:System.AttributeUsageAttribute"/> 类的新实例。</summary>
<param name="validOn">使用按位 OR 运算符组合的一组值，用于指示哪些程序元素是有效的。 </param>
    </member>
    <member name="P:System.AttributeUsageAttribute.AllowMultiple">
<summary>获取或设置一个布尔值，该值指示能否为一个程序元素指定多个指示属性实例。</summary>
<returns>如果允许指定多个实例，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.AttributeUsageAttribute.Inherited">
<summary>获取或设置一个布尔值，该值指示指示的属性能否由派生类和重写成员继承。</summary>
<returns>如果该属性可由派生类和重写成员继承，则为 true，否则为 false。默认值为 true。</returns>
    </member>
    <member name="P:System.AttributeUsageAttribute.ValidOn">
<summary>获取一组值，这组值标识指示的属性可应用到的程序元素。</summary>
<returns>一个或多个 <see cref="T:System.AttributeTargets"/> 值。默认值为 All。</returns>
    </member>
    <member name="T:System.BadImageFormatException">
<summary>当 DLL 或可执行程序的文件映像无效时引发的异常。 </summary>
    </member>
    <member name="M:System.BadImageFormatException.#ctor">
<summary>初始化 <see cref="T:System.BadImageFormatException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.BadImageFormatException"/> 类的新实例。</summary>
<param name="message">描述错误的消息。 </param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.BadImageFormatException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="inner">导致当前异常的异常。如果 <paramref name="inner"/> 参数不为 null 引用，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="P:System.BadImageFormatException.Message">
<summary>获取错误消息和引发此异常的文件的名称。</summary>
<returns>包含错误消息和引发此异常的文件名称的字符串。</returns>
    </member>
    <member name="M:System.BadImageFormatException.ToString">
<summary>返回该异常的完全限定名，还可能返回错误消息和内部异常的名称。</summary>
<returns>一个字符串，包含该异常的完全限定名，还可能包含错误消息和内部异常的名称。</returns>
    </member>
    <member name="T:System.BitConverter">
<summary>将基础数据类型与字节数组相互转换。</summary>
    </member>
    <member name="M:System.BitConverter.DoubleToInt64Bits(System.Double)">
<summary>将指定的双精度浮点数转换为 64 位带符号整数。</summary>
<returns>64 位带符号整数，其值等于 <paramref name="value"/>。</returns>
<param name="value">要转换的数字。</param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Boolean)">
<summary>以字节数组的形式返回指定的布尔值。</summary>
<returns>长度为 1 的字节数组。</returns>
<param name="value">一个布尔值。 </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Char)">
<summary>以字节数组的形式返回指定的 Unicode 字符值。</summary>
<returns>长度为 2 的字节数组。</returns>
<param name="value">要转换的字符。 </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Double)">
<summary>以字节数组的形式返回指定的双精度浮点值。</summary>
<returns>长度为 8 的字节数组。</returns>
<param name="value">要转换的数字。 </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int16)">
<summary>以字节数组的形式返回指定的 16 位带符号整数值。</summary>
<returns>长度为 2 的字节数组。</returns>
<param name="value">要转换的数字。 </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int32)">
<summary>以字节数组的形式返回指定的 32 位带符号整数值。</summary>
<returns>长度为 4 的字节数组。</returns>
<param name="value">要转换的数字。 </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int64)">
<summary>以字节数组的形式返回指定的 64 位带符号整数值。</summary>
<returns>长度为 8 的字节数组。</returns>
<param name="value">要转换的数字。 </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Single)">
<summary>以字节数组的形式返回指定的单精度浮点值。</summary>
<returns>长度为 4 的字节数组。</returns>
<param name="value">要转换的数字。 </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt16)">
<summary>以字节数组的形式返回指定的 16 位无符号整数值。</summary>
<returns>长度为 2 的字节数组。</returns>
<param name="value">要转换的数字。 </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt32)">
<summary>以字节数组的形式返回指定的 32 位无符号整数值。</summary>
<returns>长度为 4 的字节数组。</returns>
<param name="value">要转换的数字。 </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt64)">
<summary>以字节数组的形式返回指定的 64 位无符号整数值。</summary>
<returns>长度为 8 的字节数组。</returns>
<param name="value">要转换的数字。 </param>
    </member>
    <member name="M:System.BitConverter.Int64BitsToDouble(System.Int64)">
<summary>将指定的 64 位带符号整数转换成双精度浮点数。</summary>
<returns>双精度浮点数，其值等于 <paramref name="value"/>。</returns>
<param name="value">要转换的数字。</param>
    </member>
    <member name="F:System.BitConverter.IsLittleEndian">
<summary>指示数据在此计算机结构中存储时的字节顺序（“Endian”性质）。</summary>
    </member>
    <member name="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
<summary>返回由字节数组中指定位置的一个字节转换来的布尔值。</summary>
<returns>如果 <paramref name="value"/> 中的 <paramref name="startIndex"/> 处的字节非零，则为 true；否则为 false。</returns>
<param name="value">一个字节数组。 </param>
<param name="startIndex"><paramref name="value"/> 内的起始位置。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 小于零或大于 <paramref name="value"/> 减 1 的长度。 </exception>
    </member>
    <member name="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
<summary>返回由字节数组中指定位置的两个字节转换来的 Unicode 字符。</summary>
<returns>由两个字节构成、从 <paramref name="startIndex"/> 开始的字符。</returns>
<param name="value">数组。 </param>
<param name="startIndex"><paramref name="value"/> 内的起始位置。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="startIndex"/> 等于 <paramref name="value"/> 减 1 的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 小于零或大于 <paramref name="value"/> 减 1 的长度。 </exception>
    </member>
    <member name="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
<summary>返回由字节数组中指定位置的八个字节转换来的双精度浮点数。</summary>
<returns>由八个字节构成、从 <paramref name="startIndex"/> 开始的双精度浮点数。</returns>
<param name="value">一个字节数组。 </param>
<param name="startIndex"><paramref name="value"/> 内的起始位置。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="startIndex"/> 大于等于 <paramref name="value"/> 减 7 的长度，且小于等于 <paramref name="value"/> 减 1 的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 小于零或大于 <paramref name="value"/> 减 1 的长度。 </exception>
    </member>
    <member name="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
<summary>返回由字节数组中指定位置的两个字节转换来的 16 位带符号整数。</summary>
<returns>由两个字节构成、从 <paramref name="startIndex"/> 开始的 16 位带符号整数。</returns>
<param name="value">一个字节数组。 </param>
<param name="startIndex"><paramref name="value"/> 内的起始位置。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="startIndex"/> 等于 <paramref name="value"/> 减 1 的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 小于零或大于 <paramref name="value"/> 减 1 的长度。 </exception>
    </member>
    <member name="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
<summary>返回由字节数组中指定位置的四个字节转换来的 32 位带符号整数。</summary>
<returns>由四个字节构成、从 <paramref name="startIndex"/> 开始的 32 位带符号整数。</returns>
<param name="value">一个字节数组。 </param>
<param name="startIndex"><paramref name="value"/> 内的起始位置。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="startIndex"/> 大于等于 <paramref name="value"/> 减 3 的长度，且小于等于 <paramref name="value"/> 减 1 的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 小于零或大于 <paramref name="value"/> 减 1 的长度。 </exception>
    </member>
    <member name="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
<summary>返回由字节数组中指定位置的八个字节转换来的 64 位带符号整数。</summary>
<returns>由八个字节构成、从 <paramref name="startIndex"/> 开始的 64 位带符号整数。</returns>
<param name="value">一个字节数组。 </param>
<param name="startIndex"><paramref name="value"/> 内的起始位置。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="startIndex"/> 大于等于 <paramref name="value"/> 减 7 的长度，且小于等于 <paramref name="value"/> 减 1 的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 小于零或大于 <paramref name="value"/> 减 1 的长度。 </exception>
    </member>
    <member name="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
<summary>返回由字节数组中指定位置的四个字节转换来的单精度浮点数。</summary>
<returns>由四个字节构成、从 <paramref name="startIndex"/> 开始的单精度浮点数。</returns>
<param name="value">一个字节数组。 </param>
<param name="startIndex"><paramref name="value"/> 内的起始位置。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="startIndex"/> 大于等于 <paramref name="value"/> 减 3 的长度，且小于等于 <paramref name="value"/> 减 1 的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 小于零或大于 <paramref name="value"/> 减 1 的长度。 </exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[])">
<summary>将指定的字节数组的每个元素的数值转换为它的等效十六进制字符串表示形式。</summary>
<returns>由以连字符分隔的十六进制对构成的 <see cref="T:System.String"/>，其中每一对表示 <paramref name="value"/> 中对应的元素；例如“7F-2C-4A”。</returns>
<param name="value">一个字节数组。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
<summary>将指定的字节子数组的每个元素的数值转换为它的等效十六进制字符串表示形式。</summary>
<returns>由以连字符分隔的十六进制对构成的 <see cref="T:System.String"/>，其中每一对表示 <paramref name="value"/> 的子数组中对应的元素；例如“7F-2C-4A”。</returns>
<param name="value">一个字节数组。 </param>
<param name="startIndex"><paramref name="value"/> 内的起始位置。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 小于零或大于 <paramref name="value"/> 减 1 的长度。 </exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
<summary>将指定的字节子数组的每个元素的数值转换为它的等效十六进制字符串表示形式。</summary>
<returns>由以连字符分隔的十六进制对构成的 <see cref="T:System.String"/>，其中每一对表示 <paramref name="value"/> 的子数组中对应的元素；例如“7F-2C-4A”。</returns>
<param name="value">一个字节数组。 </param>
<param name="startIndex"><paramref name="value"/> 内的起始位置。 </param>
<param name="length">要转换的 <paramref name="value"/> 中的数组元素数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 或 <paramref name="length"/> 小于零。-或- <paramref name="startIndex"/> 大于零并且大于等于 <paramref name="value"/> 的长度。</exception>
<exception cref="T:System.ArgumentException"><paramref name="startIndex"/> 和 <paramref name="length"/> 的组合不指定 <paramref name="value"/> 中的位置；也就是说，<paramref name="startIndex"/> 参数大于 <paramref name="value"/> 的长度减去 <paramref name="length"/> 参数。</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
<summary>返回由字节数组中指定位置的两个字节转换来的 16 位无符号整数。</summary>
<returns>由两个字节构成、从 <paramref name="startIndex"/> 开始的 16 位无符号整数。</returns>
<param name="value">字节数组。 </param>
<param name="startIndex"><paramref name="value"/> 内的起始位置。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="startIndex"/> 等于 <paramref name="value"/> 减 1 的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 小于零或大于 <paramref name="value"/> 减 1 的长度。 </exception>
    </member>
    <member name="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
<summary>返回由字节数组中指定位置的四个字节转换来的 32 位无符号整数。</summary>
<returns>由四个字节构成、从 <paramref name="startIndex"/> 开始的 32 位无符号整数。</returns>
<param name="value">一个字节数组。 </param>
<param name="startIndex"><paramref name="value"/> 内的起始位置。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="startIndex"/> 大于等于 <paramref name="value"/> 减 3 的长度，且小于等于 <paramref name="value"/> 减 1 的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 小于零或大于 <paramref name="value"/> 减 1 的长度。 </exception>
    </member>
    <member name="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
<summary>返回由字节数组中指定位置的八个字节转换来的 64 位无符号整数。</summary>
<returns>由八个字节构成、从 <paramref name="startIndex"/> 开始的 64 位无符号整数。</returns>
<param name="value">一个字节数组。 </param>
<param name="startIndex"><paramref name="value"/> 内的起始位置。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="startIndex"/> 大于等于 <paramref name="value"/> 减 7 的长度，且小于等于 <paramref name="value"/> 减 1 的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 小于零或大于 <paramref name="value"/> 减 1 的长度。 </exception>
    </member>
    <member name="T:System.Boolean">
<summary>表示布尔值。</summary>
    </member>
    <member name="M:System.Boolean.CompareTo(System.Boolean)">
<summary>将此实例与指定的 <see cref="T:System.Boolean"/> 对象进行比较，返回一个指示二者关系的整数。</summary>
<returns>带符号整数，指示此实例和 <paramref name="value"/> 的相对值。返回值 条件 小于零 此实例为 false 并且 <paramref name="value"/> 为 true。零 此实例与 <paramref name="value"/> 相等（要么都为 true，要么都为 false）。大于零 此实例为 true 并且 <paramref name="value"/> 为 false。 </returns>
<param name="value">要与此实例进行比较的 <see cref="T:System.Boolean"/> 对象。 </param>
    </member>
    <member name="M:System.Boolean.CompareTo(System.Object)">
<summary>将此实例与指定对象进行比较，返回一个指示二者关系的整数。</summary>
<returns>带符号整数，指示此实例和 <paramref name="obj"/> 的相对顺序。返回值 条件 小于零 此实例为 false 并且 <paramref name="obj"/> 为 true。零 此实例与 <paramref name="obj"/> 相等（或者都为 true，或者都为 false）。大于零 此实例为 true 并且 <paramref name="obj"/> 为 false。-或- <paramref name="obj"/> 为 null。 </returns>
<param name="obj">要与此实例进行比较的对象或 null。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="obj"/> 不是 <see cref="T:System.Boolean"/>。 </exception>
    </member>
    <member name="M:System.Boolean.Equals(System.Boolean)">
<summary>返回一个值，该值指示此实例是否与指定的 <see cref="T:System.Boolean"/> 对象相等。</summary>
<returns>如果 <paramref name="obj"/> 的值与此实例相同，则为 true；否则为 false。</returns>
<param name="obj">要与此实例进行比较的 <see cref="T:System.Boolean"/> 值。</param>
    </member>
    <member name="M:System.Boolean.Equals(System.Object)">
<summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
<returns>如果 <paramref name="obj"/> 为 <see cref="T:System.Boolean"/> 并与此实例的值相等，则为 true；否则为 false。</returns>
<param name="obj">要与此实例进行比较的对象。 </param>
    </member>
    <member name="F:System.Boolean.FalseString">
<summary>将布尔值 false 表示为字符串。此字段为只读。</summary>
    </member>
    <member name="M:System.Boolean.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>当前 <see cref="T:System.Boolean"/> 的哈希代码。</returns>
    </member>
    <member name="M:System.Boolean.GetTypeCode">
<summary>返回值类型 <see cref="T:System.Boolean"/> 的 <see cref="T:System.TypeCode"/>。</summary>
<returns>枚举常数 <see cref="F:System.TypeCode.Boolean"/>。</returns>
    </member>
    <member name="M:System.Boolean.Parse(System.String)">
<summary>将逻辑值的指定字符串表示形式转换为它的等效 <see cref="T:System.Boolean"/> 值，如果字符串不等于 <see cref="F:System.Boolean.TrueString"/> 或 <see cref="F:System.Boolean.FalseString"/> 的值，则引发异常。</summary>
<returns>如果 <paramref name="value"/> 等于 <see cref="F:System.Boolean.TrueString"/> 字段的值，则为 true；如果 <paramref name="value"/> 等于 <see cref="F:System.Boolean.FalseString"/> 字段的值，则为 false。</returns>
<param name="value">包含要转换的值的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 不等于 <see cref="F:System.Boolean.TrueString"/> 或 <see cref="F:System.Boolean.FalseString"/> 字段的值。</exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToBoolean(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)"/>。 </summary>
<returns>true 或 false。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToByte(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)"/>。 </summary>
<returns>如果此实例的值为 true，则为 1；否则为 0。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToChar(System.IFormatProvider)">
<summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>不支持此转换。不返回任何值。</returns>
<param name="provider">忽略此参数。</param>
<exception cref="T:System.InvalidCastException">尝试将 <see cref="T:System.Boolean"/> 值转换为 <see cref="T:System.Char"/> 值。不支持此转换。</exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDateTime(System.IFormatProvider)">
<summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>不支持此转换。不返回任何值。</returns>
<param name="provider">忽略此参数。</param>
<exception cref="T:System.InvalidCastException">尝试将 <see cref="T:System.Boolean"/> 值转换为 <see cref="T:System.DateTime"/> 值。不支持此转换。</exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDecimal(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)"/>。</summary>
<returns>如果此实例为 true，则为 1；否则为 0。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDouble(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)"/>。</summary>
<returns>如果此实例为 true，则为 1；否则为 0。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt16(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)"/>。 </summary>
<returns>如果此实例为 true，则为 1；否则为 0。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt32(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)"/>。 </summary>
<returns>如果此实例为 true，则为 1；否则为 0。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt64(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)"/>。 </summary>
<returns>如果此实例为 true，则为 1；否则为 0。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToSByte(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)"/>。 </summary>
<returns>如果此实例为 true，则为 1；否则为 0。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToSingle(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)"/>。</summary>
<returns>如果此实例为 true，则为 1；否则为 0。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)"/>。 </summary>
<returns>一个指定类型的对象，其值与 <see cref="T:System.Boolean"/> 对象的值相等。</returns>
<param name="type">所需类型。 </param>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/> 实现，提供有关返回值格式的区域性特定信息。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="type"/> 为 null。 </exception>
<exception cref="T:System.InvalidCastException">不支持所请求的类型转换。 </exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt16(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)"/>。 </summary>
<returns>如果此实例为 true，则为 1；否则为 0。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt32(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)"/>。 </summary>
<returns>如果此实例为 true，则为 1；否则为 0。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt64(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)"/>。 </summary>
<returns>如果此实例为 true，则为 1；否则为 0。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Boolean.ToString">
<summary>将此实例的值转换为其等效字符串表示形式（“True”或“False”）。</summary>
      <returns>
如果此实例的值为 true，则为 <see cref="F:System.Boolean.TrueString"/>；如果此实例的值为 false，则为 <see cref="F:System.Boolean.FalseString"/>。</returns>
    </member>
    <member name="M:System.Boolean.ToString(System.IFormatProvider)">
<summary>将此实例的值转换为其等效字符串表示形式（“True”或“False”）。</summary>
      <returns>
如果此实例的值为 true，则为 <see cref="F:System.Boolean.TrueString"/>；如果此实例的值为 false，则为 <see cref="F:System.Boolean.FalseString"/>。</returns>
<param name="provider">（保留）一个 <see cref="T:System.IFormatProvider"/> 对象。 </param>
    </member>
    <member name="F:System.Boolean.TrueString">
<summary>将布尔值 true 表示为字符串。此字段为只读。</summary>
    </member>
    <member name="M:System.Boolean.TryParse(System.String,System.Boolean@)">
<summary>尝试将逻辑值的指定字符串表示形式转换为它的等效 <see cref="T:System.Boolean"/> 值。一个指示转换是否成功的返回值。</summary>
<returns>如果成功转换了 <paramref name="value"/>，则为 true；否则为 false。</returns>
<param name="value">包含要转换的值的字符串。 </param>
<param name="result">如果转换成功，当 <paramref name="value"/> 等于 <see cref="F:System.Boolean.TrueString"/> 时，此方法返回时将包含 true，当 <paramref name="value"/> 等于 <see cref="F:System.Boolean.FalseString"/> 时，此方法返回时将包含 false。如果转换失败，则包含 false。如果 <paramref name="value"/> 为 null 或不等于 <see cref="F:System.Boolean.TrueString"/> 或 <see cref="F:System.Boolean.FalseString"/> 字段，则转换将失败。</param>
    </member>
    <member name="T:System.Buffer">
<summary>操作基元类型的数组。</summary>
    </member>
    <member name="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
<summary>将指定数目的字节从起始于特定偏移量的源数组复制到起始于特定偏移量的目标数组。</summary>
<param name="src">源缓冲区。 </param>
<param name="srcOffset"><paramref name="src"/> 的字节偏移量，从零开始。 </param>
<param name="dst">目标缓冲区。 </param>
<param name="dstOffset"><paramref name="dst"/> 的字节偏移量，从零开始。 </param>
<param name="count">要复制的字节数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="src"/> 或 <paramref name="dst"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="src"/> 或 <paramref name="dst"/> 不是基元数组。-或- <paramref name="src"/> 的长度小于 <paramref name="srcOffset"/> 加上 <paramref name="count"/>。-或- <paramref name="dst"/> 的长度小于 <paramref name="dstOffset"/> 加上 <paramref name="count"/>。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="srcOffset"/>、<paramref name="dstOffset"/> 或 <paramref name="count"/> 小于 0。 </exception>
    </member>
    <member name="M:System.Buffer.ByteLength(System.Array)">
<summary>返回指定数组中的字节数。</summary>
<returns>数组中的字节数。</returns>
<param name="array">数组。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="array"/> 不是基元。 </exception>
    </member>
    <member name="M:System.Buffer.GetByte(System.Array,System.Int32)">
<summary>在指定数组中检索指定位置处的字节。</summary>
<returns>返回数组中的 <paramref name="index"/> 字节。</returns>
<param name="array">数组。 </param>
<param name="index">数组中的位置。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="array"/> 不是基元。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 为负或大于 <paramref name="array"/> 的长度。 </exception>
    </member>
    <member name="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
<summary>将指定的值分配给指定数组中特定位置处的字节。</summary>
<param name="array">数组。 </param>
<param name="index">数组中的位置。 </param>
<param name="value">要分配的值。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="array"/> 不是基元。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 为负或大于 <paramref name="array"/> 的长度。 </exception>
    </member>
    <member name="T:System.Byte">
<summary>表示 8 位无符号整数。</summary>
    </member>
    <member name="M:System.Byte.CompareTo(System.Byte)">
<summary>将此实例与指定的 8 位无符号整数进行比较并返回对其相对值的指示。</summary>
<returns>带符号整数，指示此实例与 <paramref name="value"/> 的关系。返回值 描述 小于零 此实例小于 <paramref name="value"/>。零 此实例等于 <paramref name="value"/>。大于零 此实例大于 <paramref name="value"/>。 </returns>
<param name="value">要比较的 8 位无符号整数。 </param>
    </member>
    <member name="M:System.Byte.CompareTo(System.Object)">
<summary>将此实例与指定对象进行比较并返回一个对二者的相对值的指示。</summary>
<returns>带符号整数，指示此实例与 <paramref name="value"/> 的关系。返回值 描述 小于零 此实例小于 <paramref name="value"/>。零 此实例等于 <paramref name="value"/>。大于零 此实例大于 <paramref name="value"/>。-或- <paramref name="value"/> 为 null。 </returns>
<param name="value">要比较的对象，或为 null。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="value"/> 不是 <see cref="T:System.Byte"/>。 </exception>
    </member>
    <member name="M:System.Byte.Equals(System.Byte)">
<summary>返回一个值，该值指示此实例和指定的 <see cref="T:System.Byte"/> 对象是否表示相同的值。</summary>
<returns>如果 <paramref name="obj"/> 等于此实例，则为 true；否则为 false。</returns>
<param name="obj">要与此实例进行比较的 <see cref="T:System.Byte"/> 对象。</param>
    </member>
    <member name="M:System.Byte.Equals(System.Object)">
<summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
<returns>如果 <paramref name="obj"/> 是 <see cref="T:System.Byte"/> 的实例并且等于此实例的值，则为 true；否则为 false。</returns>
<param name="obj">要与此实例比较的对象，或 null。 </param>
    </member>
    <member name="M:System.Byte.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>当前 <see cref="T:System.Byte"/> 的哈希代码。</returns>
    </member>
    <member name="M:System.Byte.GetTypeCode">
<summary>返回值类型 <see cref="T:System.Byte"/> 的 <see cref="T:System.TypeCode"/>。</summary>
<returns>枚举常数 <see cref="F:System.TypeCode.Byte"/>。</returns>
    </member>
    <member name="F:System.Byte.MaxValue">
<summary>表示 <see cref="T:System.Byte"/> 的最大可能值。此字段为常量。</summary>
    </member>
    <member name="F:System.Byte.MinValue">
<summary>表示 <see cref="T:System.Byte"/> 的最小可能值。此字段为常量。</summary>
    </member>
    <member name="M:System.Byte.Parse(System.String)">
<summary>将数字的字符串表示形式转换为它的等效 <see cref="T:System.Byte"/> 值。</summary>
<returns><paramref name="s"/> 中包含的数字的等效 <see cref="T:System.Byte"/> 值。</returns>
<param name="s">包含要转换的数字的字符串。该字符串使用 <see cref="F:System.Globalization.NumberStyles.Integer"/> 样式来进行解释。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 的格式不正确。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.Byte.MinValue"/> 或大于 <see cref="F:System.Byte.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles)">
<summary>将指定样式的数字的字符串表示形式转换为它的等效 <see cref="T:System.Byte"/>。</summary>
<returns><paramref name="s"/> 中包含的数字的等效 <see cref="T:System.Byte"/> 值。</returns>
<param name="s">包含要转换的数字的字符串。该字符串使用由 <paramref name="style"/> 指定的样式来进行解释。 </param>
<param name="style"><see cref="T:System.Globalization.NumberStyles"/> 值的按位组合，指示可出现在 <paramref name="s"/> 中的样式元素。一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 的格式不正确。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.Byte.MinValue"/> 或大于 <see cref="F:System.Byte.MaxValue"/> 的数字。-或-<paramref name="s"/> 包含非零的小数位。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或-<paramref name="style"/> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber"/> 值的组合。</exception>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
<summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 <see cref="T:System.Byte"/> 值。</summary>
<returns><paramref name="s"/> 中包含的数字的等效 <see cref="T:System.Byte"/> 值。</returns>
<param name="s">包含要转换的数字的字符串。该字符串使用由 <paramref name="style"/> 指定的样式来进行解释。 </param>
<param name="style"><see cref="T:System.Globalization.NumberStyles"/> 值的按位组合，指示可出现在 <paramref name="s"/> 中的样式元素。一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer"/>。</param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 对象，提供有关 <paramref name="s"/> 的格式的区域性特定信息。如果 <paramref name="provider"/> 为 null，则使用当前的线程区域性。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 的格式不正确。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.Byte.MinValue"/> 或大于 <see cref="F:System.Byte.MaxValue"/> 的数字。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或-<paramref name="style"/> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber"/> 值的组合。</exception>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.IFormatProvider)">
<summary>将指定的区域性特定格式的数字的字符串表示形式转换为它的等效 <see cref="T:System.Byte"/> 值。</summary>
<returns><paramref name="s"/> 中包含的数字的等效 <see cref="T:System.Byte"/> 值。</returns>
<param name="s">包含要转换的数字的字符串。该字符串使用 <see cref="F:System.Globalization.NumberStyles.Integer"/> 样式来进行解释。</param>
<param name="provider">一个对象，提供有关 <paramref name="s"/> 的区域性特定分析信息。如果 <paramref name="provider"/> 为 null，则使用当前的线程区域性。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。</exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.Byte.MinValue"/> 或大于 <see cref="F:System.Byte.MaxValue"/> 的数字。</exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToBoolean(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)"/>。 </summary>
<returns>如果当前实例的值不为零，则为 true；否则为 false。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToByte(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，未更改。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToChar(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Char"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDateTime(System.IFormatProvider)">
<summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>不支持此转换。不返回任何值。</returns>
<param name="provider">忽略此参数。</param>
<exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDecimal(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Decimal"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDouble(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Double"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt16(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Int16"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt32(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Int32"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt64(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Int64"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToSByte(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.SByte"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToSingle(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Single"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <paramref name="type"/>。</returns>
<param name="type">要将此 <see cref="T:System.Byte"/> 值转换为的类型。 </param>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/> 实现，提供有关返回值格式的信息。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="type"/> 为 null。 </exception>
<exception cref="T:System.InvalidCastException">不支持所请求的类型转换。 </exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt16(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)"/>。</summary>
<returns>当前实例的值，已转换为 <see cref="T:System.UInt16"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt32(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)"/>。</summary>
<returns>当前实例的值，已转换为 <see cref="T:System.UInt32"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt64(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)"/>。</summary>
<returns>当前实例的值，已转换为 <see cref="T:System.UInt64"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Byte.ToString">
<summary>将当前 <see cref="T:System.Byte"/> 对象的值转换为其等效的字符串表示形式。</summary>
<returns>此对象的值的字符串表示形式，由一系列从 0 到 9 之间的数字组成，不包含前导零。</returns>
    </member>
    <member name="M:System.Byte.ToString(System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息将当前 <see cref="T:System.Byte"/> 对象的数值转换为它的等效字符串表示形式。</summary>
<returns>此对象值的字符串表示形式，采用 <paramref name="provider"/> 参数所指定的格式。</returns>
<param name="provider">一个提供区域性特定的格式设置信息的 <see cref="T:System.IFormatProvider"/> 对象。</param>
    </member>
    <member name="M:System.Byte.ToString(System.String)">
<summary>使用指定的格式将当前 <see cref="T:System.Byte"/> 对象的值转换为它的等效字符串表示形式。</summary>
<returns>按照 <paramref name="format"/> 参数指定的方式进行格式设置的当前 <see cref="T:System.Byte"/> 对象的字符串表示形式。</returns>
<param name="format">一个数值格式字符串。</param>
      <exception cref="T:System.FormatException">
<paramref name="format"/> 包括不受支持的说明符。备注部分中列出了支持的格式说明符。</exception>
    </member>
    <member name="M:System.Byte.ToString(System.String,System.IFormatProvider)">
<summary>使用指定的格式和区域性特定的格式设置信息将当前 <see cref="T:System.Byte"/> 对象的值转换为它的等效字符串表示形式。</summary>
<returns>按照 <paramref name="format"/> 和 <paramref name="provider"/> 参数指定的方式进行格式设置的当前 <see cref="T:System.Byte"/> 对象的字符串表示形式。</returns>
<param name="format">标准或自定义的数值格式字符串。</param>
<param name="provider">一个提供区域性特定的格式设置信息的 <see cref="T:System.IFormatProvider"/> 对象。</param>
      <exception cref="T:System.FormatException">
<paramref name="format"/> 包括不受支持的说明符。备注部分中列出了支持的格式说明符。</exception>
    </member>
    <member name="M:System.Byte.TryParse(System.String,System.Byte@)">
<summary>尝试将数字的字符串表示形式转换为它的等效 <see cref="T:System.Byte"/>，并返回一个指示转换是否成功的值。</summary>
<returns>如果成功转换了 <paramref name="s"/>，则为 true；否则为 false。 </returns>
<param name="s">包含要转换的数字的字符串。该字符串使用 <see cref="F:System.Globalization.NumberStyles.Integer"/> 样式来进行解释。</param>
<param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s"/> 中所包含的数字等效的 <see cref="T:System.Byte"/> 值；如果转换失败，则包含零。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Byte.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Byte@)">
<summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 <see cref="T:System.Byte"/> 值。一个指示转换是否成功的返回值。</summary>
<returns>如果成功转换了 <paramref name="s"/>，则为 true；否则为 false。</returns>
<param name="s">包含要转换的数字的字符串。该字符串使用由 <paramref name="style"/> 指定的样式来进行解释。 </param>
<param name="style"><see cref="T:System.Globalization.NumberStyles"/> 值的按位组合，指示可出现在 <paramref name="s"/> 中的样式元素。一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer"/>。</param>
<param name="provider">一个提供有关 <paramref name="s"/> 的区域性特定的格式设置信息的 <see cref="T:System.IFormatProvider"/> 对象。如果 <paramref name="provider"/> 为 null，则使用当前的线程区域性。 </param>
<param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s"/> 中包含的数字等效的 8 位无符号整数值；如果转换失败，则包含零。如果 <paramref name="s"/> 参数为 null、格式不正确或者表示的数字小于 <see cref="F:System.Byte.MinValue"/> 或大于 <see cref="F:System.Byte.MaxValue"/>，则转换会失败。该参数未经初始化即被传递。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或-<paramref name="style"/> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber"/> 值的组合。</exception>
    </member>
    <member name="T:System.CannotUnloadAppDomainException">
<summary>卸载应用程序域的尝试失败时引发的异常。</summary>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor">
<summary>初始化 <see cref="T:System.CannotUnloadAppDomainException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.CannotUnloadAppDomainException"/> 类的新实例。</summary>
<param name="message">描述该错误的 <see cref="T:System.String"/>。 </param>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.CannotUnloadAppDomainException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不是 null 引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。 </param>
    </member>
    <member name="T:System.Char">
<summary>表示 Unicode 字符。</summary>
    </member>
    <member name="M:System.Char.CompareTo(System.Char)">
<summary>将此实例与指定的 <see cref="T:System.Char"/> 对象进行比较，并返回一个整数，该整数指示此实例在排序中的顺序是位于指定的 <see cref="T:System.Char"/> 值之前、之后还是与其在同一位置。</summary>
<returns>有符号数字，指示此实例在排序顺序中相对于 <paramref name="value"/> 参数的位置。返回值 描述 小于零 此实例位于 <paramref name="value"/> 之前。零 此实例在排序顺序中的位置与 <paramref name="value"/> 相同。大于零 此实例位于 <paramref name="value"/> 之后。 </returns>
<param name="value">要比较的 <see cref="T:System.Char"/> 对象。 </param>
    </member>
    <member name="M:System.Char.CompareTo(System.Object)">
<summary>将此实例与指定对象进行比较，并返回一个整数，该整数指示此实例在排序中的顺序是位于指定对象之前、之后还是与其在同一位置。</summary>
<returns>一个有符号数字，指示此实例在排序顺序中相对于 <paramref name="value"/> 参数的位置。返回值 描述 小于零 此实例位于 <paramref name="value"/> 之前。零 此实例在排序顺序中的位置与 <paramref name="value"/> 相同。大于零 此实例位于 <paramref name="value"/> 之后。-或- <paramref name="value"/> 为 null。 </returns>
<param name="value">要与此实例进行比较的对象或 null。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="value"/> 不是 <see cref="T:System.Char"/> 对象。 </exception>
    </member>
    <member name="M:System.Char.Equals(System.Char)">
<summary>返回一个值，该值指示此实例是否与指定的 <see cref="T:System.Char"/> 对象相等。</summary>
<returns>如果 <paramref name="value"/> 参数等于此实例的值，则为 true；否则为 false。</returns>
<param name="obj">要与此实例进行比较的 <see cref="T:System.Char"/> 对象。 </param>
    </member>
    <member name="M:System.Char.Equals(System.Object)">
<summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
<returns>如果 <paramref name="obj"/> 是 <see cref="T:System.Char"/> 的实例并且等于此实例的值，则为 true；否则为 false。</returns>
<param name="obj">要与此实例比较的对象或 null。 </param>
    </member>
    <member name="M:System.Char.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Char.GetNumericValue(System.Char)">
<summary>将指定的数字 Unicode 字符转换为双精度浮点数。</summary>
<returns>如果该字符表示数字，则为 <paramref name="c"/> 的数值；否则为 -1.0。</returns>
<param name="c">一个 Unicode 字符。 </param>
    </member>
    <member name="M:System.Char.GetNumericValue(System.String,System.Int32)">
<summary>将指定字符串中位于指定位置的数字 Unicode 字符转换为双精度浮点数。</summary>
<returns>如果 <paramref name="s"/> 中位于 <paramref name="index"/> 处的字符表示数字，则为该字符的数值；否则为 -1。</returns>
<param name="s">一个字符串。</param>
<param name="index"><paramref name="s"/> 中的字符位置。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零或大于 <paramref name="s"/> 中的最后一个位置。 </exception>
    </member>
    <member name="M:System.Char.GetTypeCode">
<summary>返回值类型 <see cref="T:System.Char"/> 的 <see cref="T:System.TypeCode"/>。</summary>
<returns>枚举常数 <see cref="F:System.TypeCode.Char"/>。</returns>
    </member>
    <member name="M:System.Char.GetUnicodeCategory(System.Char)">
<summary>将指定的 Unicode 字符分类到由某个 <see cref="T:System.Globalization.UnicodeCategory"/> 值标识的组中。</summary>
<returns>一个 <see cref="T:System.Globalization.UnicodeCategory"/> 值，它标识包含 <paramref name="c"/> 的组。</returns>
<param name="c">一个 Unicode 字符。 </param>
    </member>
    <member name="M:System.Char.GetUnicodeCategory(System.String,System.Int32)">
<summary>将指定字符串中位于指定位置的字符分类到由一个 <see cref="T:System.Globalization.UnicodeCategory"/> 值标识的组中。</summary>
<returns>一个 <see cref="T:System.Globalization.UnicodeCategory"/> 枚举常数，标识包含 <paramref name="s"/> 中位于 <paramref name="index"/> 处的字符的组。</returns>
<param name="s"><see cref="T:System.String"/>。 </param>
<param name="index"><paramref name="s"/> 中的字符位置。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零或大于 <paramref name="s"/> 中的最后一个位置。 </exception>
    </member>
    <member name="M:System.Char.IsControl(System.Char)">
<summary>指示指定的 Unicode 字符是否属于控制字符类别。</summary>
<returns>如果 <paramref name="c"/> 是控制字符，则为 true；否则为 false。</returns>
<param name="c">一个 Unicode 字符。 </param>
    </member>
    <member name="M:System.Char.IsControl(System.String,System.Int32)">
<summary>指示指定字符串中位于指定位置处的字符是否属于控制字符类别。</summary>
<returns>如果 <paramref name="s"/> 中位于 <paramref name="index"/> 处的字符是控制字符，则为 true；否则为 false。</returns>
<param name="s">一个字符串。 </param>
<param name="index"><paramref name="s"/> 中的字符位置。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零或大于 <paramref name="s"/> 中的最后一个位置。 </exception>
    </member>
    <member name="M:System.Char.IsDigit(System.Char)">
<summary>指示指定的 Unicode 字符是否属于十进制数字类别。</summary>
<returns>如果 <paramref name="c"/> 是十进制数字，则为 true；否则为 false。</returns>
<param name="c">一个 Unicode 字符。 </param>
    </member>
    <member name="M:System.Char.IsDigit(System.String,System.Int32)">
<summary>指示指定字符串中位于指定位置处的字符是否属于十进制数字类别。</summary>
<returns>如果 <paramref name="s"/> 中位于 <paramref name="index"/> 处的字符是十进制数字，则为 true；否则为 false。</returns>
<param name="s"><see cref="T:System.String"/>。 </param>
<param name="index"><paramref name="s"/> 中的字符位置。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零或大于 <paramref name="s"/> 中的最后一个位置。 </exception>
    </member>
    <member name="M:System.Char.IsLetter(System.Char)">
<summary>指示指定的 Unicode 字符是否属于 Unicode 字母类别。</summary>
<returns>如果 <paramref name="c"/> 是字母，则为 true；否则为 false。</returns>
<param name="c">要计算的 Unicode 字符。 </param>
    </member>
    <member name="M:System.Char.IsLetter(System.String,System.Int32)">
<summary>指示指定字符串中位于指定位置处的字符是否属于 Unicode 字母类别。</summary>
<returns>如果 <paramref name="s"/> 中位于 <paramref name="index"/> 的字符是字母，则为 true；否则为 false。</returns>
<param name="s">一个字符串。 </param>
<param name="index"><paramref name="s"/> 中要计算的字符的位置。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零或大于 <paramref name="s"/> 中的最后一个位置。 </exception>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.Char)">
<summary>指示指定的 Unicode 字符是否属于字母或十进制数字类别。</summary>
<returns>如果 <paramref name="c"/> 是字母或十进制数字，则为 true；否则为 false。</returns>
<param name="c">要计算的 Unicode 字符。 </param>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.String,System.Int32)">
<summary>指示指定字符串中位于指定位置处的字符是否属于字母或十进制数字类别。</summary>
<returns>如果 <paramref name="s"/> 中位于 <paramref name="index"/> 处的字符是字母或十进制数字，则为 true；否则为 false。</returns>
<param name="s">一个字符串。 </param>
<param name="index"><paramref name="s"/> 中要计算的字符的位置。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零或大于 <paramref name="s"/> 中的最后一个位置。 </exception>
    </member>
    <member name="M:System.Char.IsLower(System.Char)">
<summary>指示指定的 Unicode 字符是否属于小写字母类别。</summary>
<returns>如果 <paramref name="c"/> 是小写字母，则为 true；否则为 false。</returns>
<param name="c">一个 Unicode 字符。 </param>
    </member>
    <member name="M:System.Char.IsLower(System.String,System.Int32)">
<summary>指示指定字符串中位于指定位置处的字符是否属于小写字母类别。</summary>
<returns>如果 <paramref name="s"/> 中位于 <paramref name="index"/> 的字符是小写字母，则为 true；否则为 false。</returns>
<param name="s">一个字符串。 </param>
<param name="index"><paramref name="s"/> 中的字符位置。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零或大于 <paramref name="s"/> 中的最后一个位置。 </exception>
    </member>
    <member name="M:System.Char.IsNumber(System.Char)">
<summary>指示指定的 Unicode 字符是否属于数字类别。</summary>
<returns>如果 <paramref name="c"/> 是数字，则为 true；否则为 false。</returns>
<param name="c">一个 Unicode 字符。 </param>
    </member>
    <member name="M:System.Char.IsNumber(System.String,System.Int32)">
<summary>指示指定字符串中位于指定位置的字符是否属于数字类别。</summary>
<returns>如果 <paramref name="s"/> 中位于 <paramref name="index"/> 的字符是数字，则为 true；否则为 false。</returns>
<param name="s">一个字符串。 </param>
<param name="index"><paramref name="s"/> 中的字符位置。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零或大于 <paramref name="s"/> 中的最后一个位置。 </exception>
    </member>
    <member name="M:System.Char.IsPunctuation(System.Char)">
<summary>指示指定的 Unicode 字符是否属于标点符号类别。</summary>
<returns>如果 <paramref name="c"/> 是标点符号，则为 true；否则为 false。</returns>
<param name="c">一个 Unicode 字符。 </param>
    </member>
    <member name="M:System.Char.IsPunctuation(System.String,System.Int32)">
<summary>指示指定字符串中位于指定位置处的字符是否属于标点符号类别。</summary>
<returns>如果 <paramref name="s"/> 中位于 <paramref name="index"/> 的字符是标点符号，则为 true；否则为 false。</returns>
<param name="s">一个字符串。 </param>
<param name="index"><paramref name="s"/> 中的字符位置。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零或大于 <paramref name="s"/> 中的最后一个位置。 </exception>
    </member>
    <member name="M:System.Char.IsSeparator(System.Char)">
<summary>指示指定的 Unicode 字符是否属于分隔符类别。</summary>
<returns>如果 <paramref name="c"/> 是分隔符，则为 true；否则为 false。</returns>
<param name="c">一个 Unicode 字符。 </param>
    </member>
    <member name="M:System.Char.IsSeparator(System.String,System.Int32)">
<summary>指示指定字符串中位于指定位置处的字符是否属于分隔符类别。</summary>
<returns>如果 <paramref name="s"/> 中位于 <paramref name="index"/> 处的字符是分隔符，则为 true；否则为 false。</returns>
<param name="s">一个字符串。 </param>
<param name="index"><paramref name="s"/> 中的字符位置。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零或大于 <paramref name="s"/> 中的最后一个位置。 </exception>
    </member>
    <member name="M:System.Char.IsSurrogate(System.Char)">
<summary>指示指定的字符是否具有代理项码位。</summary>
<returns>如果 <paramref name="c"/> 为高代理项或低代理项，则为 true；否则为 false。</returns>
<param name="c">一个 Unicode 字符。 </param>
    </member>
    <member name="M:System.Char.IsSurrogate(System.String,System.Int32)">
<summary>指示指定字符串中位于指定位置的字符是否具有代理项码位。</summary>
<returns>如果 <paramref name="s"/> 中位于 <paramref name="index"/> 的字符是高代理项或小写字母，则为 true；否则为 false。</returns>
<param name="s">一个字符串。 </param>
<param name="index"><paramref name="s"/> 中的字符位置。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零或大于 <paramref name="s"/> 中的最后一个位置。 </exception>
    </member>
    <member name="M:System.Char.IsSurrogatePair(System.Char,System.Char)">
<summary>指示两个指定的 <see cref="T:System.Char"/> 对象是否形成代理项对。</summary>
<returns>如果 <paramref name="highSurrogate"/> 参数的数值范围是从 U+D800 到 U+DBFF，并且 <paramref name="lowSurrogate"/> 参数的数值范围是从 U+DC00 到 U+DFFF，则为 true；否则为 false。</returns>
<param name="highSurrogate">一个字符。 </param>
<param name="lowSurrogate">一个字符。 </param>
    </member>
    <member name="M:System.Char.IsSurrogatePair(System.String,System.Int32)">
<summary>指示字符串中指定位置处的两个相邻 <see cref="T:System.Char"/> 对象是否形成代理项对。</summary>
<returns>如果 <paramref name="s"/> 参数和 <paramref name="index"/> 参数指定一对相邻的字符，并且在 <paramref name="index"/> 位置的字符的数值范围是从 U+D800 到 U+DBFF，在 <paramref name="index"/>+1 位置的字符的数值范围是从 U+DC00 到 U+DFFF，则为 true；否则为 false。</returns>
<param name="s">一个字符串。 </param>
<param name="index"><paramref name="s"/> 内的一个位置。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 不是 <paramref name="s"/> 中的位置。 </exception>
    </member>
    <member name="M:System.Char.IsSymbol(System.Char)">
<summary>指示指定的 Unicode 字符是否属于符号字符类别。</summary>
<returns>如果 <paramref name="c"/> 是符号字符，则为 true；否则为 false。</returns>
<param name="c">一个 Unicode 字符。 </param>
    </member>
    <member name="M:System.Char.IsSymbol(System.String,System.Int32)">
<summary>指示指定字符串中位于指定位置处的字符是否属于符号字符类别。</summary>
<returns>如果 <paramref name="s"/> 中位于 <paramref name="index"/> 处的字符是符号字符，则为 true；否则为 false。</returns>
<param name="s">一个字符串。 </param>
<param name="index"><paramref name="s"/> 中的字符位置。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零或大于 <paramref name="s"/> 中的最后一个位置。 </exception>
    </member>
    <member name="M:System.Char.IsUpper(System.Char)">
<summary>指示指定的 Unicode 字符是否属于大写字母类别。</summary>
<returns>如果 <paramref name="c"/> 是大写字母，则为 true；否则为 false。</returns>
<param name="c">一个 Unicode 字符。 </param>
    </member>
    <member name="M:System.Char.IsUpper(System.String,System.Int32)">
<summary>指示指定字符串中位于指定位置处的字符是否属于大写字母类别。</summary>
<returns>如果 <paramref name="s"/> 中位于 <paramref name="index"/> 的字符是大写字母，则为 true；否则为 false。</returns>
<param name="s">一个字符串。 </param>
<param name="index"><paramref name="s"/> 中的字符位置。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零或大于 <paramref name="s"/> 中的最后一个位置。 </exception>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.Char)">
<summary>指示指定的 Unicode 字符是否属于空白类别。</summary>
<returns>如果 <paramref name="c"/> 是空白，则为 true；否则为 false。</returns>
<param name="c">一个 Unicode 字符。 </param>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.String,System.Int32)">
<summary>指示指定字符串中位于指定位置处的字符是否属于空白类别。</summary>
<returns>如果 <paramref name="s"/> 中位于 <paramref name="index"/> 的字符是空白，则为 true；否则为 false。</returns>
<param name="s">一个字符串。 </param>
<param name="index"><paramref name="s"/> 中的字符位置。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零或大于 <paramref name="s"/> 中的最后一个位置。 </exception>
    </member>
    <member name="F:System.Char.MaxValue">
<summary>表示 <see cref="T:System.Char"/> 的最大可能值。此字段为常量。</summary>
    </member>
    <member name="F:System.Char.MinValue">
<summary>表示 <see cref="T:System.Char"/> 的最小可能值。此字段为常量。</summary>
    </member>
    <member name="M:System.Char.System#IConvertible#ToBoolean(System.IFormatProvider)">
<summary>注意   不支持此转换。尝试这样做会引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>不支持此转换。不返回任何值。</returns>
<param name="provider">忽略此参数。</param>
<exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToByte(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)"/>。</summary>
<returns>当前 <see cref="T:System.Char"/> 对象的转换值。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToChar(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)"/>。</summary>
<returns>当前 <see cref="T:System.Char"/> 对象的值保持不变。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDateTime(System.IFormatProvider)">
<summary>注意   不支持此转换。尝试这样做会引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>不返回任何值。</returns>
<param name="provider">忽略此参数。</param>
<exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDecimal(System.IFormatProvider)">
<summary>注意   不支持此转换。尝试这样做会引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>不返回任何值。</returns>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/> 对象。（由于 <paramref name="provider"/> 参数已被忽略，因此指定 null。）</param>
<exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDouble(System.IFormatProvider)">
<summary>注意   不支持此转换。尝试这样做会引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>不返回任何值。</returns>
<param name="provider">忽略此参数。</param>
<exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt16(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)"/>。</summary>
<returns>当前 <see cref="T:System.Char"/> 对象的转换值。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt32(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)"/>。</summary>
<returns>当前 <see cref="T:System.Char"/> 对象的转换值。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt64(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)"/>。</summary>
<returns>当前 <see cref="T:System.Char"/> 对象的转换值。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToSByte(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)"/>。</summary>
<returns>当前 <see cref="T:System.Char"/> 对象的转换值。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToSingle(System.IFormatProvider)">
<summary>注意   不支持此转换。尝试这样做会引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>不返回任何值。</returns>
<param name="provider">忽略此参数。</param>
<exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)"/>。</summary>
<returns>指定类型的对象。</returns>
<param name="type">一个 <see cref="T:System.Type"/> 对象。 </param>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/> 对象。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="type"/> 为 null。</exception>
<exception cref="T:System.InvalidCastException">无法将当前 <see cref="T:System.Char"/> 对象的值转换为 <paramref name="type"/> 参数指定的类型。 </exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt16(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)"/>。</summary>
<returns>当前 <see cref="T:System.Char"/> 对象的转换值。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt32(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)"/>。</summary>
<returns>当前 <see cref="T:System.Char"/> 对象的转换值。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt64(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)"/>。</summary>
<returns>当前 <see cref="T:System.Char"/> 对象的转换值。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Char.ToLower(System.Char)">
<summary>将 Unicode 字符的值转换为它的小写等效项。</summary>
<returns><paramref name="c"/> 的小写等效项；如果 <paramref name="c"/> 已经是小写形式或不是字母，则为 <paramref name="c"/> 的未更改值。</returns>
<param name="c">一个 Unicode 字符。 </param>
    </member>
    <member name="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)">
<summary>使用指定的区域性特定格式设置信息将指定 Unicode 字符的值转换为它的小写等效项。</summary>
<returns>根据 <paramref name="culture"/> 修改的 <paramref name="c"/> 的小写等效项；如果 <paramref name="c"/> 已经是小写形式或不是字母，则为 <paramref name="c"/> 的未更改值。</returns>
<param name="c">一个 Unicode 字符。 </param>
<param name="culture">一个对象，用于提供区域性特定的大小写规则。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="culture"/> 为 null。 </exception>
    </member>
    <member name="M:System.Char.ToLowerInvariant(System.Char)">
<summary>使用固定区域性的大小写规则，将 Unicode 字符的值转换为其小写等效项。</summary>
<returns><paramref name="c"/> 参数的小写等效项；如果 <paramref name="c"/> 已经是小写形式或不是字母，则为 <paramref name="c"/> 的未更改值。</returns>
<param name="c">一个 Unicode 字符。 </param>
    </member>
    <member name="M:System.Char.ToString">
<summary>将此实例的值转换为其等效的字符串表示形式。</summary>
<returns>此实例的值的字符串表示。</returns>
    </member>
    <member name="M:System.Char.ToString(System.Char)">
<summary>将指定的 Unicode 字符转换为它的等效字符串表示形式。</summary>
<returns><paramref name="c"/> 的值的字符串表示形式。</returns>
<param name="c">一个 Unicode 字符。 </param>
    </member>
    <member name="M:System.Char.ToString(System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息将此实例的值转换为它的等效字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由 <paramref name="provider"/> 指定。</returns>
<param name="provider">（保留）一个提供区域性特定的格式设置信息的 <see cref="T:System.IFormatProvider"/>。 </param>
    </member>
    <member name="M:System.Char.ToUpper(System.Char)">
<summary>将 Unicode 字符的值转换为它的大写等效项。</summary>
<returns><paramref name="c"/> 的大写等效项；如果 <paramref name="c"/> 已经是大写形式、没有大写等效项或不是字母，则为 <paramref name="c"/> 的未更改值。</returns>
<param name="c">一个 Unicode 字符。 </param>
    </member>
    <member name="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)">
<summary>使用指定的区域性特定格式设置信息将指定 Unicode 字符的值转换为它的大写等效项。</summary>
<returns>根据 <paramref name="culture"/> 修改的 <paramref name="c"/> 的大写等效项；如果 <paramref name="c"/> 已经是大写形式、没有大写等效项或不是字母，则为 <paramref name="c"/> 的未更改值。</returns>
<param name="c">一个 Unicode 字符。 </param>
<param name="culture">一个对象，用于提供区域性特定的大小写规则。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="culture"/> 为 null。 </exception>
    </member>
    <member name="M:System.Char.ToUpperInvariant(System.Char)">
<summary>使用固定区域性的大小写规则，将 Unicode 字符的值转换为其大写等效项。</summary>
<returns><paramref name="c"/> 参数的大写等效项；如果 <paramref name="c"/> 已经是大写形式或不是字母，则为 <paramref name="c"/> 的未更改值。</returns>
<param name="c">要转换的 Unicode 字符。</param>
    </member>
    <member name="M:System.Char.TryParse(System.String,System.Char@)">
<summary>将指定字符串的值转换为它的等效 Unicode 字符。一个指示转换是否成功的返回代码。</summary>
<returns>如果 <paramref name="s"/> 参数成功转换，则为 true；否则为 false。</returns>
<param name="s">包含单个字符的字符串或 null。 </param>
<param name="result">此方法返回时，如果转换成功，则包含与 <paramref name="s"/> 中的单个字符等效的 Unicode 字符；如果转换失败，则包含未定义的值。如果 <paramref name="s"/> 参数为 null 或 <paramref name="s"/> 的长度不为 1，则转换失败。此参数未经初始化即被传递。 </param>
    </member>
    <member name="T:System.CLSCompliantAttribute">
<summary>指示程序元素是否符合公共语言规范 (CLS)。无法继承此类。</summary>
    </member>
    <member name="M:System.CLSCompliantAttribute.#ctor(System.Boolean)">
<summary>用布尔值初始化 <see cref="T:System.CLSCompliantAttribute"/> 类的实例，该值指示所指示的程序元素是否符合 CLS。 </summary>
<param name="isCompliant">如果符合 CLS，则为 true；否则为 false。 </param>
    </member>
    <member name="P:System.CLSCompliantAttribute.IsCompliant">
<summary>获取指示所指示的程序元素是否符合 CLS 的布尔值。</summary>
<returns>如果程序元素符合 CLS，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Comparison`1">
<summary>表示比较同一类型的两个对象的方法。</summary>
<returns>带符号整数，指示 x 与 y 的相对值，如下表所示。值 条件 小于 0 <paramref name="x"/> 小于 <paramref name="y"/>。0 <paramref name="x"/> 等于 <paramref name="y"/>。大于 0 <paramref name="x"/> 大于 <paramref name="y"/>。</returns>
<param name="x">要比较的第一个对象。</param>
<param name="y">要比较的第二个对象。</param>
<typeparam name="T">要比较的对象的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
    </member>
    <member name="T:System.Console">
<summary>表示控制台应用程序的标准输入流、输出流和错误流。无法继承此类。</summary>
    </member>
    <member name="P:System.Console.Error">
<summary>获取标准错误输出流。</summary>
<returns>表示标准错误输出流的 <see cref="T:System.IO.TextWriter"/>。</returns>
    </member>
    <member name="P:System.Console.In">
<summary>获取标准输入流。</summary>
<returns>表示标准输入流的 <see cref="T:System.IO.TextReader"/>。</returns>
    </member>
    <member name="P:System.Console.Out">
<summary>获取标准输出流。</summary>
<returns>表示标准输出流的 <see cref="T:System.IO.TextWriter"/>。</returns>
    </member>
    <member name="M:System.Console.ReadLine">
<summary>从控制台读取一行字符。</summary>
<returns>控制台中的下一行字符。</returns>
    </member>
    <member name="M:System.Console.SetError(System.IO.TextWriter)">
<summary>[SECURITY CRITICAL] 设置 <see cref="P:System.Console.Error"/> 属性。</summary>
<param name="newError">一个流，它是新的标准错误输出。 </param>
    </member>
    <member name="M:System.Console.SetIn(System.IO.TextReader)">
<summary>[SECURITY CRITICAL] 设置 <see cref="P:System.Console.In"/> 属性。</summary>
<param name="newIn">一个流，它是新的标准输入。 </param>
    </member>
    <member name="M:System.Console.SetOut(System.IO.TextWriter)">
<summary>[SECURITY CRITICAL] 设置 <see cref="P:System.Console.Out"/> 属性。</summary>
<param name="newOut">一个流，它是新的标准输出。 </param>
    </member>
    <member name="M:System.Console.Write(System.Char)">
<summary>将指定的 Unicode 字符值写入标准输出流。</summary>
<param name="value">要写入的值。 </param>
    </member>
    <member name="M:System.Console.Write(System.Char[])">
<summary>将指定的 Unicode 字符数组写入标准输出流。</summary>
<param name="buffer">Unicode 字符数组。 </param>
    </member>
    <member name="M:System.Console.Write(System.Char[],System.Int32,System.Int32)">
<summary>将指定的 Unicode 字符子数组写入标准输出流。</summary>
<param name="buffer">Unicode 字符的数组。 </param>
<param name="index"><paramref name="buffer"/> 中的起始位置。 </param>
<param name="count">要写入的字符数。 </param>
    </member>
    <member name="M:System.Console.Write(System.Int32)">
<summary>将指定的 32 位带符号整数值的文本表示写入标准输出流。</summary>
<param name="value">要写入的值。 </param>
    </member>
    <member name="M:System.Console.Write(System.Object)">
<summary>将指定对象的文本表示形式写入标准输出流。</summary>
<param name="value">要写入的值，或者为 null。 </param>
    </member>
    <member name="M:System.Console.Write(System.String)">
<summary>将指定的字符串值写入标准输出流。</summary>
<param name="value">要写入的值。 </param>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object)">
<summary>使用指定的格式信息将指定对象的文本表示形式写入标准输出流。</summary>
<param name="format">复合格式字符串。</param>
<param name="arg0">要使用 <paramref name="format"/> 写入的对象。</param>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object,System.Object)">
<summary>使用指定的格式信息将指定对象的文本表示形式写入标准输出流。</summary>
<param name="format">复合格式字符串。</param>
<param name="arg0">要使用 <paramref name="format"/> 写入的第一个对象。 </param>
<param name="arg1">要使用 <paramref name="format"/> 写入的第二个对象。 </param>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
<summary>使用指定的格式信息将指定对象的文本表示形式写入标准输出流。</summary>
<param name="format">复合格式字符串。 </param>
<param name="arg0">要使用 <paramref name="format"/> 写入的第一个对象。 </param>
<param name="arg1">要使用 <paramref name="format"/> 写入的第二个对象。 </param>
<param name="arg2">要使用 <paramref name="format"/> 写入的第三个对象。 </param>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object[])">
<summary>使用指定的格式信息将指定的对象数组的文本表示形式写入标准输出流。</summary>
<param name="format">复合格式字符串。 </param>
<param name="arg">要使用 <paramref name="format"/> 写入的对象的数组。 </param>
    </member>
    <member name="M:System.Console.WriteLine">
<summary>将当前行终止符写入标准输出流。</summary>
    </member>
    <member name="M:System.Console.WriteLine(System.Char)">
<summary>将指定的 Unicode 字符值（后跟当前行终止符）写入标准输出流。</summary>
<param name="value">要写入的值。 </param>
    </member>
    <member name="M:System.Console.WriteLine(System.Char[])">
<summary>将指定的 Unicode 字符数组（后跟当前行终止符）写入标准输出流。</summary>
<param name="buffer">Unicode 字符数组。 </param>
    </member>
    <member name="M:System.Console.WriteLine(System.Int32)">
<summary>将指定的 32 位带符号整数值的文本表示（后跟当前行的结束符）写入标准输出流。</summary>
<param name="value">要写入的值。</param>
    </member>
    <member name="M:System.Console.WriteLine(System.Object)">
<summary>将指定对象的文本表示形式（后跟当前行终止符）写入标准输出流。</summary>
<param name="value">要写入的值。 </param>
    </member>
    <member name="M:System.Console.WriteLine(System.String)">
<summary>将指定的字符串值（后跟当前行终止符）写入标准输出流。</summary>
<param name="value">要写入的值。 </param>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object)">
<summary>使用指定的格式信息，将指定对象（后跟当前行终止符）的文本表示形式写入标准输出流。</summary>
<param name="format">复合格式字符串。 </param>
<param name="arg0">要使用 <paramref name="format"/> 写入的对象。 </param>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
<summary>使用指定的格式信息，将指定对象的文本表示形式（后跟当前行终止符）写入标准输出流。</summary>
<param name="format">复合格式字符串。 </param>
<param name="arg0">要使用 <paramref name="format"/> 写入的第一个对象。 </param>
<param name="arg1">要使用 <paramref name="format"/> 写入的第二个对象。 </param>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
<summary>使用指定的格式信息，将指定对象的文本表示形式（后跟当前行终止符）写入标准输出流。</summary>
<param name="format">复合格式字符串。 </param>
<param name="arg0">要使用 <paramref name="format"/> 写入的第一个对象。 </param>
<param name="arg1">要使用 <paramref name="format"/> 写入的第二个对象。 </param>
<param name="arg2">要使用 <paramref name="format"/> 写入的第三个对象。 </param>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object[])">
<summary>使用指定的格式信息，将指定的对象数组（后跟当前行终止符）的文本表示形式写入标准输出流。</summary>
<param name="format">复合格式字符串。 </param>
<param name="arg">要使用 <paramref name="format"/> 写入的对象的数组。 </param>
    </member>
    <member name="T:System.ContextMarshalException">
<summary>在尝试将对象封送过上下文边界失败时引发的异常。</summary>
    </member>
    <member name="M:System.ContextMarshalException.#ctor">
<summary>使用默认属性初始化 <see cref="T:System.ContextMarshalException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.ContextMarshalException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.ContextMarshalException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="inner">导致当前异常的异常。如果 <paramref name="inner"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="T:System.ContextStaticAttribute">
<summary>指示静态字段的值是特定上下文的唯一值。</summary>
    </member>
    <member name="M:System.ContextStaticAttribute.#ctor">
<summary>初始化 <see cref="T:System.ContextStaticAttribute"/> 类的新实例。</summary>
    </member>
    <member name="T:System.Convert">
<summary>将一个基本数据类型转换为另一个基本数据类型。</summary>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
<summary>返回指定类型的对象，其值等效于指定对象。参数提供区域性特定的格式设置信息。</summary>
<returns>一个对象，其类型为 <paramref name="conversionType"/>，并且其值等效于 <paramref name="value"/>。-或- 如果 <paramref name="value"/> 和 <paramref name="conversionType"/> 的类型相同，则为 <paramref name="value"/>。-或- 如果 <paramref name="value"/> 为 null，并且 <paramref name="conversionType"/> 不是值类型，则为空引用（在 Visual Basic 中为 Nothing）。</returns>
<param name="value">实现 <see cref="T:System.IConvertible"/> 接口的对象。 </param>
<param name="conversionType">要返回的对象的类型。 </param>
<param name="provider">一个提供区域性特定的格式设置信息的对象。 </param>
<exception cref="T:System.InvalidCastException">不支持此转换。-或-<paramref name="value"/> 为 null 并且 <paramref name="conversionType"/> 为值类型。-或-<paramref name="value"/> 不实现 <see cref="T:System.IConvertible"/> 接口。</exception>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 的格式不是 <paramref name="provider"/> 可以识别的 <paramref name="conversionType"/> 的格式。</exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 表示超出 <paramref name="conversionType"/> 范围的数字。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="conversionType"/> 为 null。</exception>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
<summary>返回指定类型的对象，其值等效于指定对象。参数提供区域性特定的格式设置信息。</summary>
<returns>一个对象，其基础类型为 <paramref name="typeCode"/>，并且其值等效于 <paramref name="value"/>。-或- 如果 <paramref name="value"/> 为 null 并且 <paramref name="typeCode"/> 为 <see cref="F:System.TypeCode.Empty"/>、<see cref="F:System.TypeCode.String"/> 或 <see cref="F:System.TypeCode.Object"/>，则为空引用（在 Visual Basic 中为 Nothing）。</returns>
<param name="value">实现 <see cref="T:System.IConvertible"/> 接口的对象。 </param>
<param name="typeCode">要返回的对象的类型。 </param>
<param name="provider">一个提供区域性特定的格式设置信息的对象。 </param>
<exception cref="T:System.InvalidCastException">不支持此转换。-或-<paramref name="value"/> 为 null 并且 <paramref name="typeCode"/> 指定值类型。-或-<paramref name="value"/> 不实现 <see cref="T:System.IConvertible"/> 接口。</exception>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 的格式不是 <paramref name="provider"/> 可以识别的 <paramref name="typeCode"/> 类型的格式。</exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 表示超出 <paramref name="typeCode"/> 类型范围的数字。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="typeCode"/> 无效。 </exception>
    </member>
    <member name="F:System.Convert.DBNull">
<summary>一个常数，表示没有数据的数据库列（即数据库为空）。</summary>
    </member>
    <member name="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
<summary>将 Unicode 字符数组的子集（它将二进制数据编码为 Base64 数字）转换成等效的 8 位无符号整数数组。参数指定输入数组的子集以及要转换的元素数。</summary>
<returns>等效于 <paramref name="inArray"/> 中位于 <paramref name="offset"/> 位置的 <paramref name="length"/> 元素的 8 位无符号整数数组。</returns>
<param name="inArray">Unicode 字符数组。 </param>
<param name="offset"><paramref name="inArray"/> 内的一个位置。 </param>
<param name="length"><paramref name="inArray"/> 中要转换的元素数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="inArray"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="offset"/> 或 <paramref name="length"/> 小于 0。-或- <paramref name="offset"/> 加上 <paramref name="length"/> 指示的位置不在 <paramref name="inArray"/> 内。 </exception>
<exception cref="T:System.FormatException"><paramref name="inArray"/> 的长度（忽略空白字符）不是 0 或 4 的倍数。-或-<paramref name="inArray"/> 的格式无效。<paramref name="inArray"/> 包含一个非 Base64 字符、两个以上的填充字符或者在填充字符中包含非空白字符。 </exception>
    </member>
    <member name="M:System.Convert.FromBase64String(System.String)">
<summary>将指定的 <see cref="T:System.String"/>（它将二进制数据编码为 Base64 数字）转换成等效的 8 位无符号整数数组。</summary>
<returns>等效于 <paramref name="s"/> 的 8 位无符号整数数组。</returns>
<param name="s"><see cref="T:System.String"/>。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
<exception cref="T:System.FormatException"><paramref name="s"/> 的长度（忽略空白字符）不是 0 或 4 的倍数。-或-<paramref name="s"/> 的格式无效。<paramref name="s"/> 包含一个非 base 64 字符、两个以上的填充字符或者在填充字符中包含非空白字符。</exception>
    </member>
    <member name="M:System.Convert.GetTypeCode(System.Object)">
<summary>返回指定对象的 <see cref="T:System.TypeCode"/>。</summary>
<returns><paramref name="value"/> 的 <see cref="T:System.TypeCode"/>，或者如果 <paramref name="value"/> 为 null，则为 <see cref="F:System.TypeCode.Empty"/>。</returns>
<param name="value">实现 <see cref="T:System.IConvertible"/> 接口的 <see cref="T:System.Object"/>。 </param>
    </member>
    <member name="M:System.Convert.IsDBNull(System.Object)">
<summary>返回有关指定对象是否为 <see cref="T:System.DBNull"/> 类型的指示。</summary>
<returns>如果 <paramref name="value"/> 的类型为 <see cref="T:System.DBNull"/>，则为 true；否则为 false。</returns>
<param name="value">一个对象。 </param>
    </member>
    <member name="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
<summary>将 8 位无符号整数数组的子集转换为用 Base64 数字编码的 Unicode 字符数组的等价子集。参数将子集指定为输入和输出数组中的偏移量和输入数组中要转换的元素数。</summary>
<returns>包含 <paramref name="outArray"/> 中的字节数的 32 位带符号整数。</returns>
<param name="inArray">8 位无符号整数的输入数组。 </param>
<param name="offsetIn"><paramref name="inArray"/> 内的一个位置。 </param>
<param name="length">要转换的 <paramref name="inArray"/> 的元素数。 </param>
<param name="outArray">Unicode 字符的输出数组。 </param>
<param name="offsetOut"><paramref name="outArray"/> 内的一个位置。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="inArray"/> 或 <paramref name="outArray"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="offsetIn"/>、<paramref name="offsetOut"/> 或 <paramref name="length"/> 为负。-或- <paramref name="offsetIn"/> 加上 <paramref name="length"/> 大于 <paramref name="inArray"/> 的长度。-或- <paramref name="offsetOut"/> 加上要返回的元素数大于 <paramref name="outArray"/> 的长度。 </exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[])">
<summary>将 8 位无符号整数数组转换为它的等效 <see cref="T:System.String"/> 表示形式（使用 Base64 数字编码）。</summary>
<returns><paramref name="inArray"/> 内容的 <see cref="T:System.String"/> 表示形式，以 Base64 表示。</returns>
<param name="inArray">一个 8 位无符号整数数组。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="inArray"/> 为 null。 </exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
<summary>将 8 位无符号整数数组的子集转换为它的等效 <see cref="T:System.String"/> 表示形式（使用 Base64 数字编码）。参数将子集指定为输入数组中的偏移量和数组中要转换的元素数。</summary>
<returns><paramref name="inArray"/> 中从位置 <paramref name="offset"/> 开始的 <paramref name="length"/> 元素的 <see cref="T:System.String"/> 表示形式，以 Base 64 表示。</returns>
<param name="inArray">一个 8 位无符号整数数组。 </param>
<param name="offset"><paramref name="inArray"/> 中的偏移量。 </param>
<param name="length">要转换的 <paramref name="inArray"/> 的元素数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="inArray"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="offset"/> 或 <paramref name="length"/> 为负。-或- <paramref name="offset"/> 加上 <paramref name="length"/> 大于 <paramref name="inArray"/> 的长度。 </exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Boolean)">
<summary>返回指定的布尔值；不执行任何实际的转换。</summary>
<returns>参数 <paramref name="value"/> 不经更改即被返回。</returns>
<param name="value">一个布尔值。 </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Byte)">
<summary>将指定的 8 位无符号整数的值转换为等效的布尔值。</summary>
<returns>如果 <paramref name="value"/> 为非零值，则为 true；否则为 false。</returns>
<param name="value">8 位的无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Char)">
<summary>调用此方法始终引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>不支持此转换。不返回任何值。</returns>
<param name="value">一个 Unicode 字符。 </param>
<exception cref="T:System.InvalidCastException">不支持此转换。 </exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Decimal)">
<summary>将指定的 <see cref="T:System.Decimal"/> 数字的值转换为等效布尔值。</summary>
<returns>如果 <paramref name="value"/> 为非零值，则为 true；否则为 false。</returns>
<param name="value"><see cref="T:System.Decimal"/> 数字。 </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Double)">
<summary>将指定的双精度浮点数的值转换为等效的布尔值。</summary>
<returns>如果 <paramref name="value"/> 为非零值，则为 true；否则为 false。</returns>
<param name="value">双精度浮点数。 </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int16)">
<summary>将指定的 16 位带符号整数的值转换为等效的布尔值。</summary>
<returns>如果 <paramref name="value"/> 为非零值，则为 true；否则为 false。</returns>
<param name="value">16 位带符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int32)">
<summary>将指定的 32 位带符号整数的值转换为等效的布尔值。</summary>
<returns>如果 <paramref name="value"/> 为非零值，则为 true；否则为 false。</returns>
<param name="value">32 位带符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int64)">
<summary>将指定的 64 位带符号整数的值转换为等效的布尔值。</summary>
<returns>如果 <paramref name="value"/> 为非零值，则为 true；否则为 false。</returns>
<param name="value">64 位带符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object)">
<summary>将指定的 <see cref="T:System.Object"/> 的值转换为等效的布尔值。</summary>
<returns>true 或 false，它将反映通过对 <paramref name="value"/> 的基础类型调用 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)"/> 方法而返回的值。如果 <paramref name="value"/> 为 null，则该方法返回 false。 </returns>
<param name="value">实现 <see cref="T:System.IConvertible"/> 接口的 <see cref="T:System.Object"/> 或 null。 </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
<summary>使用指定的区域性特定的格式设置信息，将指定 <see cref="T:System.Object"/> 的值转换为等效的布尔值。</summary>
<returns>true 或 false，它将反映通过对 <paramref name="value"/> 的基础类型调用 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)"/> 方法而返回的值。如果 <paramref name="value"/> 为 null，则该方法返回 false。</returns>
<param name="value">实现 <see cref="T:System.IConvertible"/> 接口的 <see cref="T:System.Object"/> 或 null。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
      <exception cref="T:System.InvalidCastException">
<paramref name="value"/> 不实现 <see cref="T:System.IConvertible"/> 接口。 </exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.SByte)">
<summary>将指定的 8 位带符号整数的值转换为等效的布尔值。</summary>
<returns>如果 <paramref name="value"/> 为非零值，则为 true；否则为 false。</returns>
<param name="value">8 位的带符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Single)">
<summary>将指定的单精度浮点数字的值转换为等效的布尔值。</summary>
<returns>如果 <paramref name="value"/> 为非零值，则为 true；否则为 false。</returns>
<param name="value">单精度浮点数。 </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String)">
<summary>将逻辑值的指定 <see cref="T:System.String"/> 表示形式转换为它的等效布尔值。</summary>
<returns>如果 <paramref name="value"/> 等于 <see cref="F:System.Boolean.TrueString"/>，则为 true；如果 <paramref name="value"/> 等于 <see cref="F:System.Boolean.FalseString"/> 或 null，则为 false。</returns>
<param name="value">包含 <see cref="F:System.Boolean.TrueString"/> 或者 <see cref="F:System.Boolean.FalseString"/> 的值的 <see cref="T:System.String"/>。 </param>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 不等于 <see cref="F:System.Boolean.TrueString"/> 或 <see cref="F:System.Boolean.FalseString"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将逻辑值的指定 <see cref="T:System.String"/> 表示形式转换为它的等效布尔值。</summary>
<returns>如果 <paramref name="value"/> 等于 <see cref="F:System.Boolean.TrueString"/>，则为 true；如果 <paramref name="value"/> 等于 <see cref="F:System.Boolean.FalseString"/> 或 null，则为 false。</returns>
<param name="value">包含 <see cref="F:System.Boolean.TrueString"/> 或者 <see cref="F:System.Boolean.FalseString"/> 的值的字符串。 </param>
<param name="provider">（保留）<see cref="T:System.IFormatProvider"/> 接口实现，它提供区域性特定的格式设置信息。 </param>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 不等于 <see cref="F:System.Boolean.TrueString"/> 或 <see cref="F:System.Boolean.FalseString"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt16)">
<summary>将指定的 16 位无符号整数的值转换为等效的布尔值。</summary>
<returns>如果 <paramref name="value"/> 为非零值，则为 true；否则为 false。</returns>
<param name="value">16 位无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt32)">
<summary>将指定的 32 位无符号整数的值转换为等效的布尔值。</summary>
<returns>如果 <paramref name="value"/> 为非零值，则为 true；否则为 false。</returns>
<param name="value">32 位无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt64)">
<summary>将指定的 64 位无符号整数的值转换为等效的布尔值。</summary>
<returns>如果 <paramref name="value"/> 为非零值，则为 true；否则为 false。</returns>
<param name="value">64 位无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToByte(System.Boolean)">
<summary>将指定布尔值的值转换为等效的 8 位无符号整数。</summary>
<returns>如果 <paramref name="value"/> 为 true，则为数字 1；否则为 0。</returns>
<param name="value">一个布尔值。 </param>
    </member>
    <member name="M:System.Convert.ToByte(System.Byte)">
<summary>返回指定的 8 位无符号整数；不执行任何实际的转换。</summary>
<returns>参数 <paramref name="value"/> 不经更改即被返回。</returns>
<param name="value">8 位的无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToByte(System.Char)">
<summary>将指定 Unicode 字符的值转换为等效的 8 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的 8 位无符号整数。</returns>
<param name="value">一个 Unicode 字符。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.Byte.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Decimal)">
<summary>将指定的 <see cref="T:System.Decimal"/> 数的值转换为等效的 8 位无符号整数。</summary>
      <returns>
舍入为最接近的 8 位带符号整数的 <paramref name="value"/>。如果 <paramref name="value"/> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
<param name="value"><see cref="T:System.Decimal"/> 数字。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.Byte.MaxValue"/> 或小于 <see cref="F:System.Byte.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Double)">
<summary>将指定的双精度浮点数的值转换为等效的 8 位无符号整数。</summary>
      <returns>
舍入为最接近的 8 位带符号整数的 <paramref name="value"/>。如果 <paramref name="value"/> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
<param name="value">双精度浮点数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.Byte.MaxValue"/> 或小于 <see cref="F:System.Byte.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int16)">
<summary>将指定的 16 位带符号整数的值转换为等效的 8 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 8 位无符号整数。</returns>
<param name="value">16 位带符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于 <see cref="F:System.Byte.MinValue"/> 或大于 <see cref="F:System.Byte.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int32)">
<summary>将指定的 32 位带符号整数的值转换为等效的 8 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 8 位无符号整数。</returns>
<param name="value">32 位带符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于 <see cref="F:System.Byte.MinValue"/> 或大于 <see cref="F:System.Byte.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int64)">
<summary>将指定的 64 位带符号整数的值转换为等效的 8 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 8 位无符号整数。</returns>
<param name="value">64 位带符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于 <see cref="F:System.Byte.MinValue"/> 或大于 <see cref="F:System.Byte.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Object)">
<summary>将指定 <see cref="T:System.Object"/> 的值转换为 8 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 8 位无符号整数，或者如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">实现 <see cref="T:System.IConvertible"/> 接口的 <see cref="T:System.Object"/> 或 null。 </param>
      <exception cref="T:System.InvalidCastException">
<paramref name="value"/> 不实现 <see cref="T:System.IConvertible"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将指定 <see cref="T:System.Object"/> 的值转换为 8 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 8 位无符号整数，或者如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">实现 <see cref="T:System.IConvertible"/> 接口的 <see cref="T:System.Object"/>。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.Convert.ToByte(System.SByte)">
<summary>将指定的 8 位带符号整数的值转换为等效的 8 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 8 位无符号整数。</returns>
<param name="value">8 位的带符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于 <see cref="F:System.Byte.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Single)">
<summary>将指定的单精度浮点数字的值转换为等效的 8 位无符号整数。</summary>
      <returns>
舍入为最接近的 8 位带符号整数的 <paramref name="value"/>。如果 <paramref name="value"/> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
<param name="value">单精度浮点数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.Byte.MaxValue"/> 或小于 <see cref="F:System.Byte.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String)">
<summary>将数字的指定 <see cref="T:System.String"/> 表示形式转换为等效的 8 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 8 位无符号整数。-或- 如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">包含要转换的数字的 <see cref="T:System.String"/>。 </param>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 不是由一个可选符号后跟数字序列（0 到 9）组成的。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 表示小于 <see cref="F:System.Byte.MinValue"/> 或大于 <see cref="F:System.Byte.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将数字的指定 <see cref="T:System.String"/> 表示形式转换为等效的 8 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 8 位带符号整数。-或- 如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">包含要转换的数字的 <see cref="T:System.String"/>。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 不是由一个可选符号后跟数字序列（0 到 9）组成的。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 表示小于 <see cref="F:System.Byte.MinValue"/> 或大于 <see cref="F:System.Byte.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.Int32)">
<summary>将指定基数的数字的字符串表示形式转换为等效的 8 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 中数字的 8 位无符号整数。-或- 如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">包含数字的 <see cref="T:System.String"/>。 </param>
<param name="fromBase"><paramref name="value"/> 中数字的基数，它必须是 2、8、10 或 16。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="fromBase"/> 不是 2、8、10 或 16。-或-<paramref name="value"/>，它表示一个非 10 为基的无符号数，前面带一个负号。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 包含的一个字符不是 <paramref name="fromBase"/> 指定的基中的有效数字。如果 <paramref name="value"/> 中的第一个字符无效，异常消息则指示没有可转换的数字；否则，该消息将指示 <paramref name="value"/> 包含无效的尾随字符。</exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/>，它表示一个 10 为基的无符号数，前面带一个负号。-或- 返回值小于 <see cref="F:System.Byte.MinValue"/> 或大于 <see cref="F:System.Byte.MaxValue"/>。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt16)">
<summary>将指定的 16 位无符号整数的值转换为等效的 8 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 8 位无符号整数。</returns>
<param name="value">16 位无符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.Byte.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt32)">
<summary>将指定的 32 位无符号整数的值转换为等效的 8 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 8 位无符号整数。</returns>
<param name="value">32 位无符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.Byte.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt64)">
<summary>将指定的 64 位无符号整数的值转换为等效的 8 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 8 位无符号整数。</returns>
<param name="value">64 位无符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.Byte.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Byte)">
<summary>将指定的 8 位无符号整数的值转换为它的等效 Unicode 字符。</summary>
<returns>等效于 <paramref name="value"/> 的值的 Unicode 字符。</returns>
<param name="value">8 位的无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToChar(System.Char)">
<summary>返回指定的 Unicode 字符值；不执行任何实际的转换。</summary>
<returns>参数 <paramref name="value"/> 不经更改即被返回。</returns>
<param name="value">一个 Unicode 字符。 </param>
    </member>
    <member name="M:System.Convert.ToChar(System.Decimal)">
<summary>调用此方法始终引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>不支持此转换。不返回任何值。</returns>
<param name="value"><see cref="T:System.Decimal"/> 数字。 </param>
<exception cref="T:System.InvalidCastException">不支持此转换。 </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Double)">
<summary>调用此方法始终引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>不支持此转换。不返回任何值。</returns>
<param name="value">双精度浮点数。 </param>
<exception cref="T:System.InvalidCastException">不支持此转换。 </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int16)">
<summary>将指定的 16 位带符号整数的值转换为其等效的 Unicode 字符。</summary>
<returns>等效于 <paramref name="value"/> 的值的 Unicode 字符。</returns>
<param name="value">16 位带符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于 <see cref="F:System.Char.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int32)">
<summary>将指定的 32 位带符号整数的值转换为其等效的 Unicode 字符。</summary>
<returns>等效于 <paramref name="value"/> 的值的 Unicode 字符。</returns>
<param name="value">32 位带符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于 <see cref="F:System.Char.MinValue"/> 或大于 <see cref="F:System.Char.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int64)">
<summary>将指定的 64 位带符号整数的值转换为其等效的 Unicode 字符。</summary>
<returns>等效于 <paramref name="value"/> 的值的 Unicode 字符。</returns>
<param name="value">64 位带符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于 <see cref="F:System.Char.MinValue"/> 或大于 <see cref="F:System.Char.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Object)">
<summary>将指定 <see cref="T:System.Object"/> 的值转换为 Unicode 字符。</summary>
<returns>等效于 <paramref name="value"/> 的值的 Unicode 字符。-或- 如果 <paramref name="value"/> 等于 null，则为 <see cref="F:System.Char.MinValue"/>。</returns>
<param name="value">实现 <see cref="T:System.IConvertible"/> 接口的 <see cref="T:System.Object"/>。 </param>
      <exception cref="T:System.InvalidCastException">
<paramref name="value"/> 不实现 <see cref="T:System.IConvertible"/> 接口。 </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将指定 <see cref="T:System.Object"/> 的值转换为它的等效 Unicode 字符。</summary>
<returns>等效于 <paramref name="value"/> 的值的 Unicode 字符。-或- 如果 <paramref name="value"/> 等于 null，则为 <see cref="F:System.Char.MinValue"/>。</returns>
<param name="value">实现 <see cref="T:System.IConvertible"/> 接口的 <see cref="T:System.Object"/>。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
      <exception cref="T:System.InvalidCastException">
<paramref name="value"/> 不实现 <see cref="T:System.IConvertible"/> 接口。 </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.SByte)">
<summary>将指定的 8 位带符号整数的值转换为其等效的 Unicode 字符。</summary>
<returns>等效于 <paramref name="value"/> 的值的 Unicode 字符。</returns>
<param name="value">8 位的带符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于 <see cref="F:System.Char.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Single)">
<summary>调用此方法始终引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>不支持此转换。不返回任何值。</returns>
<param name="value">单精度浮点数。 </param>
<exception cref="T:System.InvalidCastException">不支持此转换。 </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.String)">
<summary>将 <see cref="T:System.String"/> 的第一个字符转换为 Unicode 字符。</summary>
<returns>等效于 <paramref name="value"/> 中的第一个也是唯一的字符的 Unicode 字符。</returns>
<param name="value">一个长度为 1 的 <see cref="T:System.String"/> 或 null。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
<exception cref="T:System.FormatException"><paramref name="value"/> 的长度不是 1。 </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将 <see cref="T:System.String"/> 的第一个字符转换为 Unicode 字符。</summary>
<returns>等效于 <paramref name="value"/> 中的第一个也是唯一的字符的 Unicode 字符。</returns>
<param name="value">一个长度为 1 的 <see cref="T:System.String"/> 或 null。 </param>
<param name="provider">（保留）<see cref="T:System.IFormatProvider"/> 接口实现，它提供区域性特定的格式设置信息。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
<exception cref="T:System.FormatException"><paramref name="value"/> 的长度不是 1。 </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt16)">
<summary>将指定的 16 位无符号整数的值转换为它的等效 Unicode 字符。</summary>
<returns>等效于 <paramref name="value"/> 的值的 Unicode 字符。</returns>
<param name="value">16 位无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt32)">
<summary>将指定的 32 位无符号整数的值转换为它的等效 Unicode 字符。</summary>
<returns>等效于 <paramref name="value"/> 的值的 Unicode 字符。</returns>
<param name="value">32 位无符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.Char.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt64)">
<summary>将指定的 64 位无符号整数的值转换为它的等效 Unicode 字符。</summary>
<returns>等效于 <paramref name="value"/> 的值的 Unicode 字符。</returns>
<param name="value">64 位无符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.Char.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object)">
<summary>将指定 <see cref="T:System.Object"/> 的值转换为 <see cref="T:System.DateTime"/>。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.DateTime"/>。-或- 如果 <paramref name="value"/> 为 null，则为等效于 <see cref="F:System.DateTime.MinValue"/> 的 <see cref="T:System.DateTime"/>。</returns>
<param name="value">实现 <see cref="T:System.IConvertible"/> 接口的 <see cref="T:System.Object"/> 或 null。 </param>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 不是有效的 <see cref="T:System.DateTime"/> 值。</exception>
      <exception cref="T:System.InvalidCastException">
<paramref name="value"/> 不实现 <see cref="T:System.IConvertible"/>。-或- 不支持该转换。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将指定 <see cref="T:System.Object"/> 的值转换为 <see cref="T:System.DateTime"/>。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.DateTime"/>。-或- 如果 <paramref name="value"/> 为 null，则为等效于 <see cref="F:System.DateTime.MinValue"/> 的 <see cref="T:System.DateTime"/>。</returns>
<param name="value">实现 <see cref="T:System.IConvertible"/> 接口的 <see cref="T:System.Object"/>。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
      <exception cref="T:System.InvalidCastException">
<paramref name="value"/> 不实现 <see cref="T:System.IConvertible"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String)">
<summary>将日期和时间的指定 <see cref="T:System.String"/> 表示形式转换为等效的 <see cref="T:System.DateTime"/>。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.DateTime"/>。-或- 如果 <paramref name="value"/> 为 null，则为等效于 <see cref="F:System.DateTime.MinValue"/> 的 <see cref="T:System.DateTime"/>。</returns>
<param name="value">日期和时间的字符串表示形式。</param>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 不是格式正确的日期和时间字符串。 </exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将数字的指定 <see cref="T:System.String"/> 表示形式转换为等效的 <see cref="T:System.DateTime"/>。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.DateTime"/>。-或- 如果 <paramref name="value"/> 为 null，则为等效于 <see cref="F:System.DateTime.MinValue"/> 的 <see cref="T:System.DateTime"/>。</returns>
<param name="value">包含要转换的日期和时间的 <see cref="T:System.String"/>。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 不是格式正确的日期和时间字符串。 </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Boolean)">
<summary>将指定的布尔值转换为等效的 <see cref="T:System.Decimal"/> 数字。</summary>
<returns>如果 <paramref name="value"/> 为 true，则为数字 1；否则为 0。</returns>
<param name="value">一个布尔值。 </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Byte)">
<summary>将指定的 8 位无符号整数的值转换为等效的 <see cref="T:System.Decimal"/> 数字。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.Decimal"/> 数字。</returns>
<param name="value">8 位的无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Char)">
<summary>调用此方法始终引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>不支持此转换。不返回任何值。</returns>
<param name="value">一个 Unicode 字符。 </param>
<exception cref="T:System.InvalidCastException">不支持此转换。 </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.DateTime)">
<summary>调用此方法始终引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>不支持此转换。不返回任何值。</returns>
<param name="value"><see cref="T:System.DateTime"/>。 </param>
<exception cref="T:System.InvalidCastException">不支持此转换。 </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Decimal)">
<summary>返回指定的 <see cref="T:System.Decimal"/> 数字；不执行任何实际的转换。</summary>
<returns>参数 <paramref name="value"/> 不经更改即被返回。</returns>
<param name="value"><see cref="T:System.Decimal"/> 数字。 </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Double)">
<summary>将指定的双精度浮点数的值转换为等效的 <see cref="T:System.Decimal"/> 数字。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.Decimal"/> 数字。 </returns>
<param name="value">双精度浮点数。 </param>
<exception cref="T:System.OverflowException"><paramref name="value"/> 的数值大于 <see cref="F:System.Decimal.MaxValue"/> 或小于 <see cref="F:System.Decimal.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int16)">
<summary>将指定的 16 位带符号整数的值转换为等效的 <see cref="T:System.Decimal"/> 数字。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.Decimal"/> 数字。</returns>
<param name="value">16 位带符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int32)">
<summary>将指定的 32 位带符号整数的值转换为等效的 <see cref="T:System.Decimal"/> 数字。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.Decimal"/> 数字。</returns>
<param name="value">32 位带符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int64)">
<summary>将指定的 64 位带符号整数的值转换为等效的 <see cref="T:System.Decimal"/> 数字。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.Decimal"/> 数字。</returns>
<param name="value">64 位带符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object)">
<summary>将指定 <see cref="T:System.Object"/> 的值转换为 <see cref="T:System.Decimal"/> 数字。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.Decimal"/> 数字；或者，如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">实现 <see cref="T:System.IConvertible"/> 接口的 <see cref="T:System.Object"/> 或 null。 </param>
      <exception cref="T:System.InvalidCastException">
<paramref name="value"/> 不实现 <see cref="T:System.IConvertible"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将指定 <see cref="T:System.Object"/> 的值转换为 <see cref="T:System.Decimal"/> 数字。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.Decimal"/> 数字；或者，如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">实现 <see cref="T:System.IConvertible"/> 接口的 <see cref="T:System.Object"/>。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
      <exception cref="T:System.InvalidCastException">
<paramref name="value"/> 不实现 <see cref="T:System.IConvertible"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.SByte)">
<summary>将指定的 8 位带符号整数的值转换为等效的 <see cref="T:System.Decimal"/> 数字。</summary>
<returns>等效于 <paramref name="value"/> 的值的 8 位带符号整数。</returns>
<param name="value">8 位的带符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Single)">
<summary>将指定的单精度浮点数字的值转换为等效的 <see cref="T:System.Decimal"/> 数字。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.Decimal"/> 数字。 </returns>
<param name="value">单精度浮点数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.Decimal.MaxValue"/> 或小于 <see cref="F:System.Decimal.MinValue"/>。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String)">
<summary>将数字的指定 <see cref="T:System.String"/> 表示形式转换为等效的 <see cref="T:System.Decimal"/> 数字。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.Decimal"/> 数字。-或- 如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">包含要转换的数字的 <see cref="T:System.String"/>。 </param>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 不是一个有效格式的数字。</exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 表示小于 <see cref="F:System.Decimal.MinValue"/> 或大于 <see cref="F:System.Decimal.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将数字的指定 <see cref="T:System.String"/> 表示形式转换为等效的 <see cref="T:System.Decimal"/> 数字。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.Decimal"/> 数字。-或- 如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">包含要转换的数字的 <see cref="T:System.String"/>。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 不是一个有效格式的数字。</exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 表示小于 <see cref="F:System.Decimal.MinValue"/> 或大于 <see cref="F:System.Decimal.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt16)">
<summary>将指定的 16 位无符号整数的值转换为等效的 <see cref="T:System.Decimal"/> 数字。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.Decimal"/> 数字。</returns>
<param name="value">16 位无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt32)">
<summary>将指定的 32 位无符号整数的值转换为等效的 <see cref="T:System.Decimal"/> 数字。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.Decimal"/> 数字。</returns>
<param name="value">32 位无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt64)">
<summary>将指定的 64 位无符号整数的值转换为等效的 <see cref="T:System.Decimal"/> 数字。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.Decimal"/> 数字。</returns>
<param name="value">64 位无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Boolean)">
<summary>将指定的布尔值转换为等效的双精度浮点数。</summary>
<returns>如果 <paramref name="value"/> 为 true，则为数字 1；否则为 0。</returns>
<param name="value">一个布尔值。 </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Byte)">
<summary>将指定的 8 位无符号整数的值转换为等效的双精度浮点数。</summary>
<returns>等效于 <paramref name="value"/> 的值的双精度浮点数。</returns>
<param name="value">8 位的无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Char)">
<summary>调用此方法始终引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>不支持此转换。不返回任何值。</returns>
<param name="value">一个 Unicode 字符。 </param>
<exception cref="T:System.InvalidCastException">不支持此转换。 </exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.Decimal)">
<summary>将指定 <see cref="T:System.Decimal"/> 数字的值转换为等效的双精度浮点数。</summary>
<returns>等效于 <paramref name="value"/> 的值的双精度浮点数。</returns>
<param name="value"><see cref="T:System.Decimal"/> 数字。 </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Double)">
<summary>返回指定的双精度浮点数；不执行任何实际的转换。</summary>
<returns>参数 <paramref name="value"/> 不经更改即被返回。</returns>
<param name="value">双精度浮点数。 </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int16)">
<summary>将指定的 16 位带符号整数的值转换为等效的双精度浮点数。</summary>
<returns>等效于 <paramref name="value"/> 的值的双精度浮点数。</returns>
<param name="value">16 位带符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int32)">
<summary>将指定的 32 位带符号整数的值转换为等效的双精度浮点数。</summary>
<returns>等效于 <paramref name="value"/> 的值的双精度浮点数。</returns>
<param name="value">32 位带符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int64)">
<summary>将指定的 64 位带符号整数的值转换为等效的双精度浮点数。</summary>
<returns>等效于 <paramref name="value"/> 的值的双精度浮点数。</returns>
<param name="value">64 位带符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object)">
<summary>将指定 <see cref="T:System.Object"/> 的值转换为双精度浮点数。</summary>
<returns>等效于 <paramref name="value"/> 的值的双精度浮点数，或者如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">实现 <see cref="T:System.IConvertible"/> 接口的 <see cref="T:System.Object"/> 或 null。 </param>
      <exception cref="T:System.InvalidCastException">
<paramref name="value"/> 不实现 <see cref="T:System.IConvertible"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将指定 <see cref="T:System.Object"/> 的值转换为双精度浮点数。</summary>
<returns>等效于 <paramref name="value"/> 的值的双精度浮点数，或者如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">实现 <see cref="T:System.IConvertible"/> 接口的 <see cref="T:System.Object"/>。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
      <exception cref="T:System.InvalidCastException">
<paramref name="value"/> 不实现 <see cref="T:System.IConvertible"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.SByte)">
<summary>将指定的 8 位带符号整数的值转换为等效的双精度浮点数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 8 位带符号整数。</returns>
<param name="value">8 位的带符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Single)">
<summary>将指定的单精度浮点数字的值转换为等效的双精度浮点数。</summary>
<returns>等效于 <paramref name="value"/> 的值的双精度浮点数。</returns>
<param name="value">单精度浮点数。 </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.String)">
<summary>将数字的指定 <see cref="T:System.String"/> 表示形式转换为等效的双精度浮点数。</summary>
<returns>等效于 <paramref name="value"/> 的值的双精度浮点数。-或- 如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">包含要转换的数字的 <see cref="T:System.String"/>。 </param>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 不是一个有效格式的数字。</exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 表示小于 <see cref="F:System.Double.MinValue"/> 或大于 <see cref="F:System.Double.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将数字的指定 <see cref="T:System.String"/> 表示形式转换为等效的双精度浮点数。</summary>
<returns>等效于 <paramref name="value"/> 的值的双精度浮点数。-或- 如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">包含要转换的数字的 <see cref="T:System.String"/>。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 不是一个有效格式的数字。</exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 表示小于 <see cref="F:System.Double.MinValue"/> 或大于 <see cref="F:System.Double.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt16)">
<summary>将指定的 16 位无符号整数的值转换为等效的双精度浮点数。</summary>
<returns>等效于 <paramref name="value"/> 的值的双精度浮点数。</returns>
<param name="value">16 位无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt32)">
<summary>将指定的 32 位无符号整数的值转换为等效的双精度浮点数。</summary>
<returns>等效于 <paramref name="value"/> 的值的双精度浮点数。</returns>
<param name="value">32 位无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt64)">
<summary>将指定的 64 位无符号整数的值转换为等效的双精度浮点数。</summary>
<returns>等效于 <paramref name="value"/> 的值的双精度浮点数。</returns>
<param name="value">64 位无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToInt16(System.Boolean)">
<summary>将指定布尔值的值转换为等效的 16 位带符号整数。</summary>
<returns>如果 <paramref name="value"/> 为 true，则为数字 1；否则为 0。</returns>
<param name="value">一个布尔值。 </param>
    </member>
    <member name="M:System.Convert.ToInt16(System.Byte)">
<summary>将指定的 8 位无符号整数的值转换为等效的 16 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 16 位带符号整数。</returns>
<param name="value">8 位的无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToInt16(System.Char)">
<summary>将指定的 Unicode 字符的值转换为等效的 16 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的 16 位带符号整数。</returns>
<param name="value">一个 Unicode 字符。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.Int16.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Decimal)">
<summary>将指定的 <see cref="T:System.Decimal"/> 数的值转换为等效的 16 位带符号整数。</summary>
      <returns>
舍入为最接近的 16 位带符号整数的 <paramref name="value"/>。如果 <paramref name="value"/> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
<param name="value"><see cref="T:System.Decimal"/> 数字。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.Int16.MaxValue"/> 或小于 <see cref="F:System.Int16.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Double)">
<summary>将指定的双精度浮点数的值转换为等效的 16 位带符号整数。</summary>
      <returns>
舍入为最接近的 16 位带符号整数的 <paramref name="value"/>。如果 <paramref name="value"/> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
<param name="value">双精度浮点数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.Int16.MaxValue"/> 或小于 <see cref="F:System.Int16.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int16)">
<summary>返回指定的 16 位带符号整数；不执行任何实际的转换。</summary>
<returns>参数 <paramref name="value"/> 不经更改即被返回。</returns>
<param name="value">16 位带符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int32)">
<summary>将指定的 32 位带符号整数的值转换为等效的 16 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的 16 位带符号整数。</returns>
<param name="value">32 位带符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.Int16.MaxValue"/> 或小于 <see cref="F:System.Int16.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int64)">
<summary>将指定的 64 位带符号整数的值转换为等效的 16 位带符号整数。</summary>
<returns>与 <paramref name="value"/> 的值等效的 16 位带符号整数。</returns>
<param name="value">64 位带符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.Int16.MaxValue"/> 或小于 <see cref="F:System.Int16.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object)">
<summary>将指定 <see cref="T:System.Object"/> 的值转换为 16 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 16 位带符号整数，或者如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">实现 <see cref="T:System.IConvertible"/> 接口的 <see cref="T:System.Object"/> 或 null。 </param>
      <exception cref="T:System.InvalidCastException">
<paramref name="value"/> 不实现 <see cref="T:System.IConvertible"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将指定 <see cref="T:System.Object"/> 的值转换为 16 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 16 位带符号整数，或者如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">实现 <see cref="T:System.IConvertible"/> 接口的 <see cref="T:System.Object"/>。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
      <exception cref="T:System.InvalidCastException">
<paramref name="value"/> 不实现 <see cref="T:System.IConvertible"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.SByte)">
<summary>将指定的 8 位带符号整数的值转换为等效的 16 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 8 位带符号整数。</returns>
<param name="value">8 位的带符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToInt16(System.Single)">
<summary>将指定的单精度浮点数字的值转换为等效的 16 位带符号整数。</summary>
      <returns>
舍入为最接近的 16 位带符号整数的 <paramref name="value"/>。如果 <paramref name="value"/> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
<param name="value">单精度浮点数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.Int16.MaxValue"/> 或小于 <see cref="F:System.Int16.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String)">
<summary>将数字的指定 <see cref="T:System.String"/> 表示形式转换为等效的 16 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 16 位带符号整数。-或- 如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">包含要转换的数字的 <see cref="T:System.String"/>。 </param>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 不是由一个可选符号后跟数字序列（0 到 9）组成的。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 表示小于 <see cref="F:System.Int16.MinValue"/> 或大于 <see cref="F:System.Int16.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将数字的指定 <see cref="T:System.String"/> 表示形式转换为等效的 16 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 16 位带符号整数。-或- 如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">包含要转换的数字的 <see cref="T:System.String"/>。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 不是由一个可选符号后跟数字序列（0 到 9）组成的。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 表示小于 <see cref="F:System.Int16.MinValue"/> 或大于 <see cref="F:System.Int16.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.Int32)">
<summary>将指定基数的数字的字符串表示形式转换为等效的 16 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 中数字的 16 位带符号整数。-或- 如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">一个包含数字的字符串。 </param>
<param name="fromBase"><paramref name="value"/> 中数字的基数，它必须是 2、8、10 或 16。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="fromBase"/> 不是 2、8、10 或 16。-或-<paramref name="value"/>，它表示一个非 10 为基的有符号数，前面带一个负号。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 包含的一个字符不是 <paramref name="fromBase"/> 指定的基中的有效数字。如果 <paramref name="value"/> 中的第一个字符无效，异常消息则指示没有可转换的数字；否则，该消息将指示 <paramref name="value"/> 包含无效的尾随字符。</exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/>，它表示一个非 10 为基的有符号数，前面带一个负号。-或- 返回值小于 <see cref="F:System.Int16.MinValue"/> 或大于 <see cref="F:System.Int16.MaxValue"/>。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt16)">
<summary>将指定的 16 位无符号整数的值转换为等效的 16 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 16 位带符号整数。</returns>
<param name="value">16 位无符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.Int16.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt32)">
<summary>将指定的 32 位无符号整数的值转换为等效的 16 位带符号整数。</summary>
<returns>与 <paramref name="value"/> 的值等效的 16 位带符号整数。</returns>
<param name="value">32 位无符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.Int16.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt64)">
<summary>将指定的 64 位无符号整数的值转换为等效的 16 位带符号整数。</summary>
<returns>与 <paramref name="value"/> 的值等效的 16 位带符号整数。</returns>
<param name="value">64 位无符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.Int16.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Boolean)">
<summary>将指定布尔值的值转换为等效的 32 位带符号整数。</summary>
<returns>如果 <paramref name="value"/> 为 true，则为数字 1；否则为 0。</returns>
<param name="value">一个布尔值。 </param>
    </member>
    <member name="M:System.Convert.ToInt32(System.Byte)">
<summary>将指定的 8 位无符号整数的值转换为等效的 32 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 32 位带符号整数。</returns>
<param name="value">8 位的无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToInt32(System.Char)">
<summary>将指定的 Unicode 字符的值转换为等效的 32 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的 32 位带符号整数。</returns>
<param name="value">一个 Unicode 字符。 </param>
    </member>
    <member name="M:System.Convert.ToInt32(System.Decimal)">
<summary>将指定的 <see cref="T:System.Decimal"/> 数的值转换为等效的 32 位带符号整数。</summary>
      <returns>
舍入为最接近的 32 位带符号整数的 <paramref name="value"/>。如果 <paramref name="value"/> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
<param name="value"><see cref="T:System.Decimal"/> 数字。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.Int32.MaxValue"/> 或小于 <see cref="F:System.Int32.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Double)">
<summary>将指定的双精度浮点数的值转换为等效的 32 位带符号整数。</summary>
      <returns>
舍入为最接近的 32 位带符号整数的 <paramref name="value"/>。如果 <paramref name="value"/> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
<param name="value">双精度浮点数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.Int32.MaxValue"/> 或小于 <see cref="F:System.Int32.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int16)">
<summary>将指定的 16 位带符号整数的值转换为等效的 32 位带符号整数。</summary>
<returns>与 <paramref name="value"/> 的值等效的 32 位带符号整数。</returns>
<param name="value">16 位带符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int32)">
<summary>返回指定的 32 位带符号整数；不执行任何实际的转换。</summary>
<returns>参数 <paramref name="value"/> 不经更改即被返回。</returns>
<param name="value">32 位带符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int64)">
<summary>将指定的 64 位带符号整数的值转换为等效的 32 位带符号整数。</summary>
<returns>与 <paramref name="value"/> 的值等效的 32 位带符号整数。</returns>
<param name="value">64 位带符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.Int32.MaxValue"/> 或小于 <see cref="F:System.Int32.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object)">
<summary>将指定 <see cref="T:System.Object"/> 的值转换为 32 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 32 位带符号整数，或者如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">实现 <see cref="T:System.IConvertible"/> 接口的 <see cref="T:System.Object"/> 或 null。 </param>
      <exception cref="T:System.InvalidCastException">
<paramref name="value"/> 不实现 <see cref="T:System.IConvertible"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将指定 <see cref="T:System.Object"/> 的值转换为 32 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 32 位带符号整数，或者如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">实现 <see cref="T:System.IConvertible"/> 接口的 <see cref="T:System.Object"/>。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
      <exception cref="T:System.InvalidCastException">
<paramref name="value"/> 不实现 <see cref="T:System.IConvertible"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.SByte)">
<summary>将指定的 8 位带符号整数的值转换为等效的 32 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 8 位带符号整数。</returns>
<param name="value">8 位的带符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToInt32(System.Single)">
<summary>将指定的单精度浮点数字的值转换为等效的 32 位带符号整数。</summary>
      <returns>
舍入为最接近的 32 位带符号整数的 <paramref name="value"/>。如果 <paramref name="value"/> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
<param name="value">单精度浮点数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.Int32.MaxValue"/> 或小于 <see cref="F:System.Int32.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String)">
<summary>将数字的指定 <see cref="T:System.String"/> 表示形式转换为等效的 32 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 32 位带符号整数。-或- 如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">包含要转换的数字的 <see cref="T:System.String"/>。 </param>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 不是由一个可选符号后跟数字序列（0 到 9）组成的。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 表示小于 <see cref="F:System.Int32.MinValue"/> 或大于 <see cref="F:System.Int32.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
<summary>通过使用指定的区域性特定格式设置信息，将数字的指定 <see cref="T:System.String"/> 表示形式转换为等效的 32 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 32 位带符号整数。-或- 如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">包含要转换的数字的 <see cref="T:System.String"/>。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 不是由一个可选符号后跟数字序列（0 到 9）组成的。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 表示小于 <see cref="F:System.Int32.MinValue"/> 或大于 <see cref="F:System.Int32.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.Int32)">
<summary>将指定基数的数字的 <see cref="T:System.String"/> 表示形式转换为等效的 32 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 中数字的 32 位带符号整数。-或- 如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">包含数字的 <see cref="T:System.String"/>。 </param>
<param name="fromBase"><paramref name="value"/> 中数字的基数，它必须是 2、8、10 或 16。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="fromBase"/> 不是 2、8、10 或 16。-或-<paramref name="value"/>，它表示一个非 10 为基的有符号数，前面带一个负号。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 包含的一个字符不是 <paramref name="fromBase"/> 指定的基中的有效数字。如果 <paramref name="value"/> 中的第一个字符无效，异常消息则指示没有可转换的数字；否则，该消息将指示 <paramref name="value"/> 包含无效的尾随字符。</exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/>，它表示一个非 10 为基的有符号数，前面带一个负号。-或- 返回值小于 <see cref="F:System.Int32.MinValue"/> 或大于 <see cref="F:System.Int32.MaxValue"/>。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt16)">
<summary>将指定的 16 位无符号整数的值转换为等效的 32 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 32 位带符号整数。</returns>
<param name="value">16 位无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt32)">
<summary>将指定的 32 位无符号整数的值转换为等效的 32 位带符号整数。</summary>
<returns>与 <paramref name="value"/> 的值等效的 32 位带符号整数。</returns>
<param name="value">32 位无符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.Int32.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt64)">
<summary>将指定的 64 位无符号整数的值转换为等效的 32 位带符号整数。</summary>
<returns>与 <paramref name="value"/> 的值等效的 32 位带符号整数。</returns>
<param name="value">64 位无符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.Int32.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Boolean)">
<summary>将指定布尔值的值转换为等效的 64 位带符号整数。</summary>
<returns>如果 <paramref name="value"/> 为 true，则为数字 1；否则为 0。</returns>
<param name="value">一个布尔值。 </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Byte)">
<summary>将指定的 8 位无符号整数的值转换为等效的 64 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 64 位带符号整数。</returns>
<param name="value">8 位的无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Char)">
<summary>将指定的 Unicode 字符的值转换为等效的 64 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的 64 位带符号整数。</returns>
<param name="value">一个 Unicode 字符。 </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Decimal)">
<summary>将指定的 <see cref="T:System.Decimal"/> 数的值转换为等效的 64 位带符号整数。</summary>
      <returns>
舍入为最接近的 64 位带符号整数的 <paramref name="value"/>。如果 <paramref name="value"/> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
<param name="value"><see cref="T:System.Decimal"/> 数字。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.Int64.MaxValue"/> 或小于 <see cref="F:System.Int64.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Double)">
<summary>将指定的双精度浮点数的值转换为等效的 64 位带符号整数。</summary>
      <returns>
舍入为最接近的 64 位带符号整数的 <paramref name="value"/>。如果 <paramref name="value"/> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
<param name="value">双精度浮点数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.Int64.MaxValue"/> 或小于 <see cref="F:System.Int64.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int16)">
<summary>将指定的 16 位带符号整数的值转换为等效的 64 位带符号整数。</summary>
<returns>与 <paramref name="value"/> 的值等效的 64 位带符号整数。</returns>
<param name="value">16 位带符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int32)">
<summary>将指定的 32 位带符号整数的值转换为等效的 64 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 64 位带符号整数。</returns>
<param name="value">32 位带符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int64)">
<summary>返回指定的 64 位带符号整数；不执行任何实际的转换。</summary>
<returns>参数 <paramref name="value"/> 不经更改即被返回。</returns>
<param name="value">64 位带符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object)">
<summary>将指定 <see cref="T:System.Object"/> 的值转换为 64 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 64 位带符号整数，或者如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">实现 <see cref="T:System.IConvertible"/> 接口的 <see cref="T:System.Object"/> 或 null。 </param>
      <exception cref="T:System.InvalidCastException">
<paramref name="value"/> 不实现 <see cref="T:System.IConvertible"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将指定 <see cref="T:System.Object"/> 的值转换为 64 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 64 位带符号整数，或者如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">实现 <see cref="T:System.IConvertible"/> 接口的 <see cref="T:System.Object"/>。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
      <exception cref="T:System.InvalidCastException">
<paramref name="value"/> 不实现 <see cref="T:System.IConvertible"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.SByte)">
<summary>将指定的 8 位带符号整数的值转换为等效的 64 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 64 位带符号整数。</returns>
<param name="value">8 位的带符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Single)">
<summary>将指定的单精度浮点数字的值转换为等效的 64 位带符号整数。</summary>
      <returns>
舍入为最接近的 64 位带符号整数的 <paramref name="value"/>。如果 <paramref name="value"/> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
<param name="value">单精度浮点数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.Int64.MaxValue"/> 或小于 <see cref="F:System.Int64.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String)">
<summary>将数字的指定 <see cref="T:System.String"/> 表示形式转换为等效的 64 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 64 位带符号整数。-或- 如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">包含要转换的数字的 <see cref="T:System.String"/>。 </param>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 不是由一个可选符号后跟数字序列（0 到 9）组成的。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 表示小于 <see cref="F:System.Int64.MinValue"/> 或大于 <see cref="F:System.Int64.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将数字的指定 <see cref="T:System.String"/> 表示形式转换为等效的 64 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 64 位带符号整数。-或- 如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">包含要转换的数字的 <see cref="T:System.String"/>。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 不是由一个可选符号后跟数字序列（0 到 9）组成的。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 表示小于 <see cref="F:System.Int64.MinValue"/> 或大于 <see cref="F:System.Int64.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.Int32)">
<summary>将指定基数的数字的字符串表示形式转换为等效的 64 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 中数字的 64 位带符号整数。-或- 如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">一个包含数字的字符串。 </param>
<param name="fromBase"><paramref name="value"/> 中数字的基数，它必须是 2、8、10 或 16。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="fromBase"/> 不是 2、8、10 或 16。-或-<paramref name="value"/>，它表示一个非 10 为基的有符号数，前面带一个负号。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 包含的一个字符不是 <paramref name="fromBase"/> 指定的基中的有效数字。如果 <paramref name="value"/> 中的第一个字符无效，异常消息则指示没有可转换的数字；否则，该消息将指示 <paramref name="value"/> 包含无效的尾随字符。</exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/>，它表示一个非 10 为基的有符号数，前面带一个负号。-或- 返回值小于 <see cref="F:System.Int64.MinValue"/> 或大于 <see cref="F:System.Int64.MaxValue"/>。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt16)">
<summary>将指定的 16 位无符号整数的值转换为等效的 64 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 64 位带符号整数。</returns>
<param name="value">16 位无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt32)">
<summary>将指定的 32 位无符号整数的值转换为等效的 64 位带符号整数。</summary>
<returns>与 <paramref name="value"/> 的值等效的 64 位带符号整数。</returns>
<param name="value">32 位无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt64)">
<summary>将指定的 64 位无符号整数的值转换为等效的 64 位带符号整数。</summary>
<returns>与 <paramref name="value"/> 的值等效的 64 位带符号整数。</returns>
<param name="value">64 位无符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.Int64.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Boolean)">
<summary>将指定布尔值的值转换为等效的 8 位带符号整数。</summary>
<returns>如果 <paramref name="value"/> 为 true，则为数字 1；否则为 0。</returns>
<param name="value">一个布尔值。 </param>
    </member>
    <member name="M:System.Convert.ToSByte(System.Byte)">
<summary>将指定的 8 位无符号整数的值转换为等效的 8 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 8 位带符号整数。</returns>
<param name="value">8 位的无符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.SByte.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Char)">
<summary>将指定的 Unicode 字符的值转换为等效的 8 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的 8 位带符号整数。</returns>
<param name="value">一个 Unicode 字符。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.SByte.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Decimal)">
<summary>将指定的 <see cref="T:System.Decimal"/> 数的值转换为等效的 8 位带符号整数。</summary>
      <returns>
舍入为最接近的 8 位带符号整数的 <paramref name="value"/>。如果 <paramref name="value"/> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
<param name="value"><see cref="T:System.Decimal"/> 数字。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.SByte.MaxValue"/> 或小于 <see cref="F:System.SByte.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Double)">
<summary>将指定的双精度浮点数的值转换为等效的 8 位带符号整数。</summary>
      <returns>
舍入为最接近的 8 位带符号整数的 <paramref name="value"/>。如果 <paramref name="value"/> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
<param name="value">双精度浮点数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.SByte.MaxValue"/> 或小于 <see cref="F:System.SByte.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int16)">
<summary>将指定的 16 位带符号整数的值转换为等效的 8 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 8 位带符号整数。</returns>
<param name="value">16 位带符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.SByte.MaxValue"/> 或小于 <see cref="F:System.SByte.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int32)">
<summary>将指定的 32 位带符号整数的值转换为等效的 8 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的 8 位带符号整数。</returns>
<param name="value">32 位带符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.SByte.MaxValue"/> 或小于 <see cref="F:System.SByte.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int64)">
<summary>将指定的 64 位带符号整数的值转换为等效的 8 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 8 位带符号整数。</returns>
<param name="value">64 位带符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.SByte.MaxValue"/> 或小于 <see cref="F:System.SByte.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object)">
<summary>将指定 <see cref="T:System.Object"/> 的值转换为 8 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 8 位带符号整数，或者如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">实现 <see cref="T:System.IConvertible"/> 接口的 <see cref="T:System.Object"/> 或 null。 </param>
      <exception cref="T:System.InvalidCastException">
<paramref name="value"/> 不实现 <see cref="T:System.IConvertible"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将指定 <see cref="T:System.Object"/> 的值转换为 8 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 8 位带符号整数，或者如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">实现 <see cref="T:System.IConvertible"/> 接口的 <see cref="T:System.Object"/>。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.Convert.ToSByte(System.SByte)">
<summary>返回指定的 8 位带符号整数；不执行任何实际的转换。</summary>
<returns>参数 <paramref name="value"/> 不经更改即被返回。</returns>
<param name="value">8 位的带符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToSByte(System.Single)">
<summary>将指定的单精度浮点数字的值转换为等效的 8 位带符号整数。</summary>
      <returns>
舍入为最接近的 8 位带符号整数的 <paramref name="value"/>。如果 <paramref name="value"/> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
<param name="value">单精度浮点数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.SByte.MaxValue"/> 或小于 <see cref="F:System.SByte.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String)">
<summary>将数字的指定 <see cref="T:System.String"/> 表示形式转换为等效的 8 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 8 位带符号整数。-或- 如果值为 null，则为零。</returns>
<param name="value">包含要转换的数字的 <see cref="T:System.String"/>。 </param>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 不是由一个可选符号后跟数字序列（0 到 9）组成的。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 表示小于 <see cref="F:System.SByte.MinValue"/> 或大于 <see cref="F:System.SByte.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
<summary>通过使用指定的区域性特定格式设置信息，将数字的指定 <see cref="T:System.String"/> 表示形式转换为等效的 8 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 8 位带符号整数。</returns>
<param name="value">包含要转换的数字的 <see cref="T:System.String"/>。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 不是由一个可选符号后跟数字序列（0 到 9）组成的。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 表示小于 <see cref="F:System.SByte.MinValue"/> 或大于 <see cref="F:System.SByte.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.Int32)">
<summary>将指定基数的数字的字符串表示形式转换为等效的 8 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 中数字的 8 位带符号整数。-或- 如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">一个包含数字的字符串。 </param>
<param name="fromBase"><paramref name="value"/> 中数字的基数，它必须是 2、8、10 或 16。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="fromBase"/> 不是 2、8、10 或 16。-或-<paramref name="value"/>，它表示一个非 10 为基的有符号数，前面带一个负号。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 包含的一个字符不是 <paramref name="fromBase"/> 指定的基中的有效数字。如果 <paramref name="value"/> 中的第一个字符无效，异常消息则指示没有可转换的数字；否则，该消息将指示 <paramref name="value"/> 包含无效的尾随字符。</exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/>，它表示一个非 10 为基的有符号数，前面带一个负号。-或- 返回值小于 <see cref="F:System.SByte.MinValue"/> 或大于 <see cref="F:System.SByte.MaxValue"/>。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt16)">
<summary>将指定的 16 位无符号整数的值转换为等效的 8 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 8 位带符号整数。</returns>
<param name="value">16 位无符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.SByte.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt32)">
<summary>将指定的 32 位无符号整数的值转换为等效的 8 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 8 位带符号整数。</returns>
<param name="value">32 位无符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.SByte.MaxValue"/> 或小于 <see cref="F:System.SByte.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt64)">
<summary>将指定的 64 位无符号整数的值转换为等效的 8 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 8 位带符号整数。</returns>
<param name="value">64 位无符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.SByte.MaxValue"/> 或小于 <see cref="F:System.SByte.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Boolean)">
<summary>将指定布尔值的值转换为等效的单精度浮点数字。</summary>
<returns>如果 <paramref name="value"/> 为 true，则为数字 1；否则为 0。</returns>
<param name="value">一个布尔值。 </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Byte)">
<summary>将指定的 8 位无符号整数的值转换为等效的单精度浮点数字。</summary>
<returns>等效于 <paramref name="value"/> 的值的单精度浮点数字。</returns>
<param name="value">8 位的无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Char)">
<summary>调用此方法始终引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>不支持此转换。不返回任何值。</returns>
<param name="value">一个 Unicode 字符。 </param>
<exception cref="T:System.InvalidCastException">不支持此转换。 </exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Decimal)">
<summary>将指定 <see cref="T:System.Decimal"/> 数字的值转换为等效的单精度浮点数。</summary>
<returns>等效于 <paramref name="value"/> 的值的单精度浮点数字。<paramref name="value"/> 使用“舍入到最接近的数字”规则进行舍入。例如，当舍入为两位小数时，值 2.345 变成 2.34，而值 2.355 变成 2.36。</returns>
<param name="value"><see cref="T:System.Decimal"/> 数字。 </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Double)">
<summary>将指定双精度浮点数的值转换为等效的单精度浮点数字。</summary>
<returns>等效于 <paramref name="value"/> 的值的单精度浮点数字。<paramref name="value"/> 使用“舍入到最接近的数字”规则进行舍入。例如，当舍入为两位小数时，值 2.345 变成 2.34，而值 2.355 变成 2.36。</returns>
<param name="value">双精度浮点数。 </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int16)">
<summary>将指定的 16 位带符号整数的值转换为等效的单精度浮点数字。</summary>
<returns>等效于 <paramref name="value"/> 的值的单精度浮点数字。</returns>
<param name="value">16 位带符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int32)">
<summary>将指定的 32 位带符号整数的值转换为等效的单精度浮点数字。</summary>
<returns>等效于 <paramref name="value"/> 的值的单精度浮点数字。</returns>
<param name="value">32 位带符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int64)">
<summary>将指定的 64 位带符号整数的值转换为等效的单精度浮点数字。</summary>
<returns>等效于 <paramref name="value"/> 的值的单精度浮点数字。</returns>
<param name="value">64 位带符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object)">
<summary>将指定 <see cref="T:System.Object"/> 的值转换为单精度浮点数。</summary>
<returns>等效于 <paramref name="value"/> 的值的单精度浮点数，或者如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">实现 <see cref="T:System.IConvertible"/> 接口的 <see cref="T:System.Object"/> 或 null。 </param>
      <exception cref="T:System.InvalidCastException">
<paramref name="value"/> 不实现 <see cref="T:System.IConvertible"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将指定 <see cref="T:System.Object"/> 的值转换为单精度浮点数。</summary>
<returns>等效于 <paramref name="value"/> 的值的单精度浮点数，或者如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">实现 <see cref="T:System.IConvertible"/> 接口的 <see cref="T:System.Object"/>。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
      <exception cref="T:System.InvalidCastException">
<paramref name="value"/> 不实现 <see cref="T:System.IConvertible"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.SByte)">
<summary>将指定的 8 位带符号整数的值转换为等效的单精度浮点数字。</summary>
<returns>等效于 <paramref name="value"/> 的值的 8 位带符号整数。</returns>
<param name="value">8 位的带符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Single)">
<summary>返回指定的单精度浮点数字；不执行任何实际的转换。</summary>
<returns>参数 <paramref name="value"/> 不经更改即被返回。</returns>
<param name="value">单精度浮点数。 </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.String)">
<summary>将数字的指定 <see cref="T:System.String"/> 表示形式转换为等效的单精度浮点数。</summary>
<returns>等效于 <paramref name="value"/> 的值的单精度浮点数。-或- 如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">包含要转换的数字的 <see cref="T:System.String"/>。 </param>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 不是一个有效格式的数字。</exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 表示小于 <see cref="F:System.Single.MinValue"/> 或大于 <see cref="F:System.Single.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将数字的指定 <see cref="T:System.String"/> 表示形式转换为等效的单精度浮点数。</summary>
<returns>等效于 <paramref name="value"/> 的值的单精度浮点数。-或- 如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">包含要转换的数字的 <see cref="T:System.String"/>。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 不是一个有效格式的数字。</exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 表示小于 <see cref="F:System.Single.MinValue"/> 或大于 <see cref="F:System.Single.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt16)">
<summary>将指定的 16 位无符号整数的值转换为等效的单精度浮点数字。</summary>
<returns>等效于 <paramref name="value"/> 的值的单精度浮点数字。</returns>
<param name="value">16 位无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt32)">
<summary>将指定的 32 位无符号整数的值转换为等效的单精度浮点数字。</summary>
<returns>等效于 <paramref name="value"/> 的值的单精度浮点数字。</returns>
<param name="value">32 位无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt64)">
<summary>将指定的 64 位无符号整数的值转换为等效的单精度浮点数字。</summary>
<returns>等效于 <paramref name="value"/> 的值的单精度浮点数字。</returns>
<param name="value">64 位无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean)">
<summary>将指定的布尔值转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.String"/>。</returns>
<param name="value">一个布尔值。 </param>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
<summary>将指定的布尔值转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.String"/>。</returns>
<param name="value">一个布尔值。 </param>
<param name="provider">（保留）<see cref="T:System.IFormatProvider"/> 接口实现的实例。 </param>
    </member>
    <member name="M:System.Convert.ToString(System.Byte)">
<summary>将指定的 8 位无符号整数的值转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.String"/>。</returns>
<param name="value">8 位的无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.IFormatProvider)">
<summary>将指定的 8 位无符号整数的值转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.String"/>。</returns>
<param name="value">8 位的无符号整数。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.Int32)">
<summary>将 8 位无符号整数的值转换为其等效的指定基数的字符串表示形式。</summary>
<returns>以 <paramref name="toBase"/> 为基数的 <paramref name="value"/> 的字符串表示形式。</returns>
<param name="value">8 位的无符号整数。 </param>
<param name="toBase">返回值的基数，必须是 2、8、10 或 16。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="toBase"/> 不是 2、8、10 或 16。 </exception>
    </member>
    <member name="M:System.Convert.ToString(System.Char)">
<summary>将指定的 Unicode 字符的值转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.String"/>。</returns>
<param name="value">一个 Unicode 字符。 </param>
    </member>
    <member name="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
<summary>将指定的 Unicode 字符的值转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.String"/>。</returns>
<param name="value">一个 Unicode 字符。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime)">
<summary>将指定的 <see cref="T:System.DateTime"/> 的值转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.String"/>。</returns>
<param name="value"><see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)">
<summary>将指定的 <see cref="T:System.DateTime"/> 的值转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.String"/>。</returns>
<param name="value"><see cref="T:System.DateTime"/>。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal)">
<summary>将指定的 <see cref="T:System.Decimal"/> 数字的值转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.String"/>。</returns>
<param name="value"><see cref="T:System.Decimal"/> 数字。 </param>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)">
<summary>将指定的 <see cref="T:System.Decimal"/> 数字的值转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.String"/>。</returns>
<param name="value"><see cref="T:System.Decimal"/> 数字。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.Convert.ToString(System.Double)">
<summary>将指定的双精度浮点数的值转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.String"/>。</returns>
<param name="value">双精度浮点数。 </param>
    </member>
    <member name="M:System.Convert.ToString(System.Double,System.IFormatProvider)">
<summary>将指定的双精度浮点数的值转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.String"/>。忽略 <paramref name="provider"/>，它不参与此操作。</returns>
<param name="value">双精度浮点数。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.Convert.ToString(System.Int16)">
<summary>将指定的 16 位带符号整数的值转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.String"/>。</returns>
<param name="value">16 位带符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
<summary>将指定的 16 位带符号整数的值转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.String"/>。</returns>
<param name="value">16 位带符号整数。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.Int32)">
<summary>将 16 位带符号整数的值以指定的基数转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>以 <paramref name="toBase"/> 为基数的 <paramref name="value"/> 的 <see cref="T:System.String"/> 表示形式。</returns>
<param name="value">16 位带符号整数。 </param>
<param name="toBase">返回值的基数，必须是 2、8、10 或 16。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="toBase"/> 不是 2、8、10 或 16。 </exception>
    </member>
    <member name="M:System.Convert.ToString(System.Int32)">
<summary>将指定的 32 位带符号整数的值转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.String"/>。</returns>
<param name="value">32 位带符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
<summary>将指定的 32 位带符号整数的值转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.String"/>。</returns>
<param name="value">32 位带符号整数。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.Int32)">
<summary>将 32 位带符号整数的值以指定的基数转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>以 <paramref name="toBase"/> 为基数的 <paramref name="value"/> 的 <see cref="T:System.String"/> 表示形式。</returns>
<param name="value">32 位带符号整数。 </param>
<param name="toBase">返回值的基数，必须是 2、8、10 或 16。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="toBase"/> 不是 2、8、10 或 16。 </exception>
    </member>
    <member name="M:System.Convert.ToString(System.Int64)">
<summary>将指定的 64 位带符号整数的值转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.String"/>。</returns>
<param name="value">64 位带符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
<summary>将指定的 64 位带符号整数的值转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.String"/>。</returns>
<param name="value">64 位带符号整数。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.Int32)">
<summary>将 64 位带符号整数的值以指定的基数转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>以 <paramref name="toBase"/> 为基数的 <paramref name="value"/> 的 <see cref="T:System.String"/> 表示形式。</returns>
<param name="value">64 位带符号整数。 </param>
<param name="toBase">返回值的基数，必须是 2、8、10 或 16。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="toBase"/> 不是 2、8、10 或 16。 </exception>
    </member>
    <member name="M:System.Convert.ToString(System.Object)">
<summary>将指定的 <see cref="T:System.Object"/> 的值转换为它的 <see cref="T:System.String"/> 表示形式。</summary>
<returns><paramref name="value"/> 的值的 <see cref="T:System.String"/> 表示形式；如果值为 null，则为 <see cref="F:System.String.Empty"/>。</returns>
<param name="value">一个 <see cref="T:System.Object"/> 或 null。 </param>
    </member>
    <member name="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将指定 <see cref="T:System.Object"/> 的值转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns><paramref name="value"/> 的值的 <see cref="T:System.String"/> 表示形式；如果 <paramref name="value"/> 为 null，则为 <see cref="F:System.String.Empty"/>。</returns>
<param name="value">一个 <see cref="T:System.Object"/> 或 null。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.Convert.ToString(System.SByte)">
<summary>将指定的 8 位带符号整数的值转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.String"/>。</returns>
<param name="value">8 位的带符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
<summary>将指定的 8 位带符号整数的值转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.String"/>。</returns>
<param name="value">8 位的带符号整数。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.Convert.ToString(System.Single)">
<summary>将指定的单精度浮点数的值转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.String"/>。</returns>
<param name="value">单精度浮点数。 </param>
    </member>
    <member name="M:System.Convert.ToString(System.Single,System.IFormatProvider)">
<summary>将指定的单精度浮点数的值转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.String"/>。</returns>
<param name="value">单精度浮点数。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16)">
<summary>将指定的 16 位无符号整数的值转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.String"/>。</returns>
<param name="value">16 位无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
<summary>将指定的 16 位无符号整数的值转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.String"/>。</returns>
<param name="value">16 位无符号整数。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32)">
<summary>将指定的 32 位无符号整数的值转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.String"/>。</returns>
<param name="value">32 位无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
<summary>将指定的 32 位无符号整数的值转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.String"/>。</returns>
<param name="value">32 位无符号整数。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64)">
<summary>将指定的 64 位无符号整数的值转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.String"/>。</returns>
<param name="value">64 位无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
<summary>将指定的 64 位无符号整数的值转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>等效于 <paramref name="value"/> 的值的 <see cref="T:System.String"/>。</returns>
<param name="value">64 位无符号整数。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Boolean)">
<summary>将指定布尔值的值转换为等效的 16 位无符号整数。</summary>
<returns>如果 <paramref name="value"/> 为 true，则为数字 1；否则为 0。</returns>
<param name="value">一个布尔值。 </param>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Byte)">
<summary>将指定的 8 位无符号整数的值转换为等效的 16 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 16 位无符号整数。</returns>
<param name="value">8 位的无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Char)">
<summary>将指定 Unicode 字符的值转换为等效的 16 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的 16 位无符号整数。</returns>
<param name="value">一个 Unicode 字符。 </param>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Decimal)">
<summary>将指定的 <see cref="T:System.Decimal"/> 数的值转换为等效的 16 位无符号整数。</summary>
      <returns>
舍入为最接近的 16 位无符号整数的 <paramref name="value"/>。如果 <paramref name="value"/> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
<param name="value"><see cref="T:System.Decimal"/> 数字。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于零或大于 <see cref="F:System.UInt16.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Double)">
<summary>将指定的双精度浮点数的值转换为等效的 16 位无符号整数。</summary>
      <returns>
舍入为最接近的 16 位无符号整数的 <paramref name="value"/>。如果 <paramref name="value"/> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
<param name="value">双精度浮点数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于零或大于 <see cref="F:System.UInt16.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int16)">
<summary>将指定的 16 位带符号整数的值转换为等效的 16 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 16 位无符号整数。</returns>
<param name="value">16 位带符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于零。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int32)">
<summary>将指定的 32 位带符号整数的值转换为等效的 16 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的 16 位无符号整数。</returns>
<param name="value">32 位带符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于零或大于 <see cref="F:System.UInt16.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int64)">
<summary>将指定的 64 位带符号整数的值转换为等效的 16 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 16 位无符号整数。</returns>
<param name="value">64 位带符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于零或大于 <see cref="F:System.UInt16.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object)">
<summary>将指定 <see cref="T:System.Object"/> 的值转换为 16 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 16 位无符号整数，或者如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">实现 <see cref="T:System.IConvertible"/> 接口的 <see cref="T:System.Object"/> 或 null。 </param>
      <exception cref="T:System.InvalidCastException">
<paramref name="value"/> 不实现 <see cref="T:System.IConvertible"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将指定 <see cref="T:System.Object"/> 的值转换为 16 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 16 位无符号整数，或者如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">实现 <see cref="T:System.IConvertible"/> 接口的 <see cref="T:System.Object"/>。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.Convert.ToUInt16(System.SByte)">
<summary>将指定的 8 位带符号整数的值转换为等效的 16 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 16 位无符号整数。</returns>
<param name="value">8 位的带符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于零。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Single)">
<summary>将指定的单精度浮点数字的值转换为等效的 16 位无符号整数。</summary>
      <returns>
舍入为最接近的 16 位无符号整数的 <paramref name="value"/>。如果 <paramref name="value"/> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
<param name="value">单精度浮点数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于零或大于 <see cref="F:System.UInt16.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String)">
<summary>将数字的指定 <see cref="T:System.String"/> 表示形式转换为等效的 16 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 16 位无符号整数。-或- 如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">包含要转换的数字的 <see cref="T:System.String"/>。 </param>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 不是由一个可选符号后跟数字序列（0 到 9）组成的。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 表示小于 <see cref="F:System.Int16.MinValue"/> 或大于 <see cref="F:System.Int16.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
<summary>通过使用指定的区域性特定格式设置信息，将数字的指定 <see cref="T:System.String"/> 表示形式转换为等效的 16 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 16 位无符号整数。-或- 如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">包含要转换的数字的 <see cref="T:System.String"/>。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 不是由一个可选符号后跟数字序列（0 到 9）组成的。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 表示小于 <see cref="F:System.Int16.MinValue"/> 或大于 <see cref="F:System.Int16.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.Int32)">
<summary>将指定基数的数字的字符串表示形式转换为等效的 16 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 中数字的 16 位无符号整数。-或- 如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">一个包含数字的字符串。 </param>
<param name="fromBase"><paramref name="value"/> 中数字的基数，它必须是 2、8、10 或 16。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="fromBase"/> 不是 2、8、10 或 16。-或-<paramref name="value"/>，它表示一个非 10 为基的无符号数，前面带一个负号。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 包含的一个字符不是 <paramref name="fromBase"/> 指定的基中的有效数字。如果 <paramref name="value"/> 中的第一个字符无效，异常消息则指示没有可转换的数字；否则，该消息将指示 <paramref name="value"/> 包含无效的尾随字符。</exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/>，它表示一个非 10 为基的无符号数，前面带一个负号。-或- 返回值小于 <see cref="F:System.UInt16.MinValue"/> 或大于 <see cref="F:System.UInt16.MaxValue"/>。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt16)">
<summary>返回指定的 16 位无符号整数；不执行任何实际的转换。</summary>
<returns>参数 <paramref name="value"/> 不经更改即被返回。</returns>
<param name="value">16 位无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt32)">
<summary>将指定的 32 位无符号整数的值转换为等效的 16 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 16 位无符号整数。</returns>
<param name="value">32 位无符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.UInt16.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt64)">
<summary>将指定的 64 位无符号整数的值转换为等效的 16 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 16 位无符号整数。</returns>
<param name="value">64 位无符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.UInt16.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Boolean)">
<summary>将指定布尔值的值转换为等效的 32 位无符号整数。</summary>
<returns>如果 <paramref name="value"/> 为 true，则为数字 1；否则为 0。</returns>
<param name="value">一个布尔值。 </param>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Byte)">
<summary>将指定的 8 位无符号整数的值转换为等效的 32 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 32 位无符号整数。</returns>
<param name="value">8 位的无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Char)">
<summary>将指定 Unicode 字符的值转换为等效的 32 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的 32 位无符号整数。</returns>
<param name="value">一个 Unicode 字符。 </param>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Decimal)">
<summary>将指定的 <see cref="T:System.Decimal"/> 数的值转换为等效的 32 位无符号整数。</summary>
      <returns>
舍入为最接近的 32 位无符号整数的 <paramref name="value"/>。如果 <paramref name="value"/> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
<param name="value"><see cref="T:System.Decimal"/> 数字。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于零或大于 <see cref="F:System.UInt32.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Double)">
<summary>将指定的双精度浮点数的值转换为等效的 32 位无符号整数。</summary>
      <returns>
舍入为最接近的 32 位无符号整数的 <paramref name="value"/>。如果 <paramref name="value"/> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
<param name="value">双精度浮点数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于零或大于 <see cref="F:System.UInt32.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int16)">
<summary>将指定的 16 位带符号整数的值转换为等效的 32 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 32 位无符号整数。</returns>
<param name="value">16 位带符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于零。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int32)">
<summary>将指定的 32 位带符号整数的值转换为等效的 32 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的 32 位无符号整数。</returns>
<param name="value">32 位带符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于零。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int64)">
<summary>将指定的 64 位带符号整数的值转换为等效的 32 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 32 位无符号整数。</returns>
<param name="value">64 位带符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于零或大于 <see cref="F:System.UInt32.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object)">
<summary>将指定 <see cref="T:System.Object"/> 的值转换为 32 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 32 位无符号整数，或者如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">实现 <see cref="T:System.IConvertible"/> 接口的 <see cref="T:System.Object"/> 或 null。 </param>
      <exception cref="T:System.InvalidCastException">
<paramref name="value"/> 不实现 <see cref="T:System.IConvertible"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将指定 <see cref="T:System.Object"/> 的值转换为 32 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 32 位无符号整数，或者如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">实现 <see cref="T:System.IConvertible"/> 接口的 <see cref="T:System.Object"/>。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.Convert.ToUInt32(System.SByte)">
<summary>将指定的 8 位带符号整数的值转换为等效的 32 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 8 位无符号整数。</returns>
<param name="value">8 位的带符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于零。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Single)">
<summary>将指定的单精度浮点数字的值转换为等效的 32 位无符号整数。</summary>
      <returns>
舍入为最接近的 32 位无符号整数的 <paramref name="value"/>。如果 <paramref name="value"/> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
<param name="value">单精度浮点数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于零或大于 <see cref="F:System.UInt32.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String)">
<summary>将数字的指定 <see cref="T:System.String"/> 表示形式转换为等效的 32 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 32 位无符号整数。-或- 如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">包含要转换的数字的 <see cref="T:System.String"/>。 </param>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 不是由一个可选符号后跟数字序列（0 到 9）组成的。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 表示小于 <see cref="F:System.Int32.MinValue"/> 或大于 <see cref="F:System.Int32.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将数字的指定 <see cref="T:System.String"/> 表示形式转换为等效的 32 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 32 位无符号整数。-或- 如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">包含要转换的数字的 <see cref="T:System.String"/>。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 不是由一个可选符号后跟数字序列（0 到 9）组成的。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 表示小于 <see cref="F:System.Int32.MinValue"/> 或大于 <see cref="F:System.Int32.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.Int32)">
<summary>将指定基数的数字的字符串表示形式转换为等效的 32 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 中数字的 32 位无符号整数。-或- 如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">一个包含数字的字符串。 </param>
<param name="fromBase"><paramref name="value"/> 中数字的基数，它必须是 2、8、10 或 16。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="fromBase"/> 不是 2、8、10 或 16。-或-<paramref name="value"/>，它表示一个非 10 为基的无符号数，前面带一个负号。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 包含的一个字符不是 <paramref name="fromBase"/> 指定的基中的有效数字。如果 <paramref name="value"/> 中的第一个字符无效，异常消息则指示没有可转换的数字；否则，该消息将指示 <paramref name="value"/> 包含无效的尾随字符。</exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/>，它表示一个非 10 为基的无符号数，前面带一个负号。-或- 返回值小于 <see cref="F:System.UInt32.MinValue"/> 或大于 <see cref="F:System.UInt32.MaxValue"/>。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt16)">
<summary>将指定的 16 位无符号整数的值转换为等效的 32 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 32 位无符号整数。</returns>
<param name="value">16 位无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt32)">
<summary>返回指定的 32 位无符号整数；不执行任何实际的转换。</summary>
<returns>参数 <paramref name="value"/> 不经更改即被返回。</returns>
<param name="value">32 位无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt64)">
<summary>将指定的 64 位无符号整数的值转换为等效的 32 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 32 位无符号整数。</returns>
<param name="value">64 位无符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.UInt32.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Boolean)">
<summary>将指定布尔值的值转换为等效的 64 位无符号整数。</summary>
<returns>如果 <paramref name="value"/> 为 true，则为数字 1；否则为 0。</returns>
<param name="value">一个布尔值。 </param>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Byte)">
<summary>将指定的 8 位无符号整数的值转换为等效的 64 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 64 位带符号整数。</returns>
<param name="value">8 位的无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Char)">
<summary>将指定 Unicode 字符的值转换为等效的 64 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的 64 位无符号整数。</returns>
<param name="value">一个 Unicode 字符。 </param>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Decimal)">
<summary>将指定的 <see cref="T:System.Decimal"/> 数的值转换为等效的 64 位无符号整数。</summary>
      <returns>
舍入为最接近的 64 位无符号整数的 <paramref name="value"/>。如果 <paramref name="value"/> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
<param name="value"><see cref="T:System.Decimal"/> 数字。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于零或大于 <see cref="F:System.UInt64.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Double)">
<summary>将指定的双精度浮点数的值转换为等效的 64 位无符号整数。</summary>
      <returns>
舍入为最接近的 64 位无符号整数的 <paramref name="value"/>。如果 <paramref name="value"/> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
<param name="value">双精度浮点数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于零或大于 <see cref="F:System.UInt64.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int16)">
<summary>将指定的 16 位带符号整数的值转换为等效的 64 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 64 位无符号整数。</returns>
<param name="value">16 位带符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于零。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int32)">
<summary>将指定的 32 位带符号整数的值转换为等效的 64 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的 64 位无符号整数。</returns>
<param name="value">32 位带符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于零。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int64)">
<summary>将指定的 64 位带符号整数的值转换为等效的 64 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 64 位无符号整数。</returns>
<param name="value">64 位带符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于零。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object)">
<summary>将指定 <see cref="T:System.Object"/> 的值转换为 64 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 64 位无符号整数，或者如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">实现 <see cref="T:System.IConvertible"/> 接口的 <see cref="T:System.Object"/> 或 null。 </param>
      <exception cref="T:System.InvalidCastException">
<paramref name="value"/> 不实现 <see cref="T:System.IConvertible"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将指定 <see cref="T:System.Object"/> 的值转换为 64 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 64 位无符号整数，或者如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">实现 <see cref="T:System.IConvertible"/> 接口的 <see cref="T:System.Object"/>。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.Convert.ToUInt64(System.SByte)">
<summary>将指定的 8 位带符号整数的值转换为等效的 64 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 64 位无符号整数。</returns>
<param name="value">8 位的带符号整数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于零。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Single)">
<summary>将指定的单精度浮点数字的值转换为等效的 64 位无符号整数。</summary>
      <returns>
舍入为最接近的 64 位无符号整数的 <paramref name="value"/>。如果 <paramref name="value"/> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
<param name="value">单精度浮点数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于零或大于 <see cref="F:System.UInt64.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String)">
<summary>将数字的指定 <see cref="T:System.String"/> 表示形式转换为等效的 64 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 64 位带符号整数。-或- 如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">包含要转换的数字的 <see cref="T:System.String"/>。 </param>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 不是由一个可选符号后跟数字序列（0 到 9）组成的。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 表示小于 <see cref="F:System.Int64.MinValue"/> 或大于 <see cref="F:System.Int64.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
<summary>通过使用指定的区域性特定格式设置信息，将数字的指定 <see cref="T:System.String"/> 表示形式转换为等效的 64 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 64 位无符号整数。-或- 如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">包含要转换的数字的 <see cref="T:System.String"/>。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 不是由一个可选符号后跟数字序列（0 到 9）组成的。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 表示小于 <see cref="F:System.Int64.MinValue"/> 或大于 <see cref="F:System.Int64.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.Int32)">
<summary>将指定基数的数字的字符串表示形式转换为等效的 64 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 中数字的 64 位无符号整数。-或- 如果 <paramref name="value"/> 为 null，则为零。</returns>
<param name="value">一个包含数字的字符串。 </param>
<param name="fromBase"><paramref name="value"/> 中数字的基数，它必须是 2、8、10 或 16。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="fromBase"/> 不是 2、8、10 或 16。-或-<paramref name="value"/>，它表示一个非 10 为基的无符号数，前面带一个负号。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="value"/> 包含的一个字符不是 <paramref name="fromBase"/> 指定的基中的有效数字。如果 <paramref name="value"/> 中的第一个字符无效，异常消息则指示没有可转换的数字；否则，该消息将指示 <paramref name="value"/> 包含无效的尾随字符。</exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/>，它表示一个非 10 为基的无符号数，前面带一个负号。-或- 返回值小于 <see cref="F:System.UInt64.MinValue"/> 或大于 <see cref="F:System.UInt64.MaxValue"/>。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt16)">
<summary>将指定的 16 位无符号整数的值转换为等效的 64 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 64 位无符号整数。</returns>
<param name="value">16 位无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt32)">
<summary>将指定的 32 位无符号整数的值转换为等效的 64 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的 64 位无符号整数。</returns>
<param name="value">32 位无符号整数。 </param>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt64)">
<summary>返回指定的 64 位无符号整数；不执行任何实际的转换。</summary>
<returns>参数 <paramref name="value"/> 不经更改即被返回。</returns>
<param name="value">64 位无符号整数。 </param>
    </member>
    <member name="T:System.Converter`2">
<summary>表示将对象从一种类型转换为另一种类型的方法。</summary>
<returns>表示转换后的 <paramref name="TInput"/> 的 <paramref name="TOutput"/>。.NET Framework for Silverlight 类库中没有任何方法使用 <see cref="T:System.Converter`2"/> 委托作为参数。<see cref="T:System.Converter`2"/> 委托存在的目的主要是支持基础结构，但您仍可以使用它来创建使用转换器的自定义方法。</returns>
<param name="input">要转换的对象。</param>
<typeparam name="TInput">要转换的对象的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
<typeparam name="TOutput">要将输入对象转换到的类型。该类型参数是协变的。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
    </member>
    <member name="T:System.DataMisalignedException">
<summary>当在某个地址读取或写入一个单元的数据，但该地址不是此数据大小的整数倍时引发的异常。无法继承此类。</summary>
    </member>
    <member name="T:System.DateTime">
<summary>表示某个时刻，通常表示为日期加上一天中的某个具体时间。 </summary>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)">
<summary>将 <see cref="T:System.DateTime"/> 结构的新实例初始化为指定的年、月和日。</summary>
<param name="year">年（1 到 9999）。 </param>
<param name="month">月（1 到 12）。 </param>
<param name="day">日（1 到 <paramref name="month"/> 中的天数）。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 小于 1 或大于 9999。-或- <paramref name="month"/> 小于 1 或大于 12。-或- <paramref name="day"/> 小于 1 或大于 <paramref name="month"/> 中的天数。 </exception>
<exception cref="T:System.ArgumentException">指定的参数计算为早于 <see cref="F:System.DateTime.MinValue"/> 或晚于 <see cref="F:System.DateTime.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
<summary>将 <see cref="T:System.DateTime"/> 结构的新实例初始化为指定日历的指定年、月和日。</summary>
<param name="year">年（1 到 <paramref name="calendar"/> 中的年数）。 </param>
<param name="month">月（1 到 <paramref name="calendar"/> 中的月数）。 </param>
<param name="day">日（1 到 <paramref name="month"/> 中的天数）。 </param>
<param name="calendar">要用于解释 <paramref name="year"/>、<paramref name="month"/> 和 <paramref name="day"/> 的日历。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="calendar"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 不在 <paramref name="calendar"/> 所支持的范围内。-或- <paramref name="month"/> 小于 1 或大于 <paramref name="calendar"/> 中的月数。-或- <paramref name="day"/> 小于 1 或大于 <paramref name="month"/> 中的天数。 </exception>
<exception cref="T:System.ArgumentException">指定的参数计算为早于 <see cref="F:System.DateTime.MinValue"/> 或晚于 <see cref="F:System.DateTime.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>将 <see cref="T:System.DateTime"/> 结构的新实例初始化为指定的年、月、日、小时、分钟和秒。</summary>
<param name="year">年（1 到 9999）。 </param>
<param name="month">月（1 到 12）。 </param>
<param name="day">日（1 到 <paramref name="month"/> 中的天数）。 </param>
<param name="hour">小时（0 到 23）。 </param>
<param name="minute">分（0 到 59）。 </param>
<param name="second">秒（0 到 59）。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 小于 1 或大于 9999。-或- <paramref name="month"/> 小于 1 或大于 12。-或- <paramref name="day"/> 小于 1 或大于 <paramref name="month"/> 中的天数。-或- <paramref name="hour"/> 小于 0 或大于 23。-或- <paramref name="minute"/> 小于 0 或大于 59。-或- <paramref name="second"/> 小于 0 或大于 59。 </exception>
<exception cref="T:System.ArgumentException">指定的参数计算为早于 <see cref="F:System.DateTime.MinValue"/> 或晚于 <see cref="F:System.DateTime.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
<summary>将 <see cref="T:System.DateTime"/> 结构的新实例初始化为指定年、月、日、小时、分钟、秒和协调世界时 (UTC) 或本地时间。</summary>
<param name="year">年（1 到 9999）。 </param>
<param name="month">月（1 到 12）。 </param>
<param name="day">日（1 到 <paramref name="month"/> 中的天数）。 </param>
<param name="hour">小时（0 到 23）。 </param>
<param name="minute">分（0 到 59）。 </param>
<param name="second">秒（0 到 59）。 </param>
<param name="kind">枚举值之一，该值指示 <paramref name="year"/>、<paramref name="month"/>、<paramref name="day"/>、<paramref name="hour"/>、<paramref name="minute"/> 和 <paramref name="second"/> 指定的是本地时间还是协调世界时 (UTC)，还是两者皆未指定。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 小于 1 或大于 9999。-或- <paramref name="month"/> 小于 1 或大于 12。-或- <paramref name="day"/> 小于 1 或大于 <paramref name="month"/> 中的天数。-或- <paramref name="hour"/> 小于 0 或大于 23。-或- <paramref name="minute"/> 小于 0 或大于 59。-或- <paramref name="second"/> 小于 0 或大于 59。 </exception>
<exception cref="T:System.ArgumentException">指定的日期和时间参数计算为早于 <see cref="F:System.DateTime.MinValue"/> 或晚于 <see cref="F:System.DateTime.MaxValue"/>。-或-<paramref name="kind"/> 不是 <see cref="T:System.DateTimeKind"/> 值之一。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
<summary>将 <see cref="T:System.DateTime"/> 结构的新实例初始化为指定日历的指定年、月、日、小时、分钟和秒。</summary>
<param name="year">年（1 到 <paramref name="calendar"/> 中的年数）。 </param>
<param name="month">月（1 到 <paramref name="calendar"/> 中的月数）。 </param>
<param name="day">日（1 到 <paramref name="month"/> 中的天数）。 </param>
<param name="hour">小时（0 到 23）。 </param>
<param name="minute">分（0 到 59）。 </param>
<param name="second">秒（0 到 59）。 </param>
<param name="calendar">要用于解释 <paramref name="year"/>、<paramref name="month"/> 和 <paramref name="day"/> 的日历。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="calendar"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 不在 <paramref name="calendar"/> 所支持的范围内。-或- <paramref name="month"/> 小于 1 或大于 <paramref name="calendar"/> 中的月数。-或- <paramref name="day"/> 小于 1 或大于 <paramref name="month"/> 中的天数。-或- <paramref name="hour"/> 小于 0 或大于 23 -或- <paramref name="minute"/> 小于 0 或大于 59。-或- <paramref name="second"/> 小于 0 或大于 59。 </exception>
<exception cref="T:System.ArgumentException">指定的参数计算为早于 <see cref="F:System.DateTime.MinValue"/> 或晚于 <see cref="F:System.DateTime.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>将 <see cref="T:System.DateTime"/> 结构的新实例初始化为指定的年、月、日、小时、分钟、秒和毫秒。</summary>
<param name="year">年（1 到 9999）。 </param>
<param name="month">月（1 到 12）。 </param>
<param name="day">日（1 到 <paramref name="month"/> 中的天数）。 </param>
<param name="hour">小时（0 到 23）。 </param>
<param name="minute">分（0 到 59）。 </param>
<param name="second">秒（0 到 59）。 </param>
<param name="millisecond">毫秒（0 到 999）。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 小于 1 或大于 9999。-或- <paramref name="month"/> 小于 1 或大于 12。-或- <paramref name="day"/> 小于 1 或大于 <paramref name="month"/> 中的天数。-或- <paramref name="hour"/> 小于 0 或大于 23。-或- <paramref name="minute"/> 小于 0 或大于 59。-或- <paramref name="second"/> 小于 0 或大于 59。-或- <paramref name="millisecond"/> 小于 0 或大于 999。 </exception>
<exception cref="T:System.ArgumentException">指定的参数计算为早于 <see cref="F:System.DateTime.MinValue"/> 或晚于 <see cref="F:System.DateTime.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
<summary>将 <see cref="T:System.DateTime"/> 结构的新实例初始化为指定年、月、日、小时、分钟、秒、毫秒和协调世界时 (UTC) 或本地时间。</summary>
<param name="year">年（1 到 9999）。 </param>
<param name="month">月（1 到 12）。 </param>
<param name="day">日（1 到 <paramref name="month"/> 中的天数）。 </param>
<param name="hour">小时（0 到 23）。 </param>
<param name="minute">分（0 到 59）。 </param>
<param name="second">秒（0 到 59）。 </param>
<param name="millisecond">毫秒（0 到 999）。 </param>
<param name="kind">枚举值之一，该值指示 <paramref name="year"/>、<paramref name="month"/>、<paramref name="day"/>、<paramref name="hour"/>、<paramref name="minute"/>、<paramref name="second"/> 和 <paramref name="millisecond"/> 指定的是本地时间还是协调世界时 (UTC)，还是两者皆未指定。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 小于 1 或大于 9999。-或- <paramref name="month"/> 小于 1 或大于 12。-或- <paramref name="day"/> 小于 1 或大于 <paramref name="month"/> 中的天数。-或- <paramref name="hour"/> 小于 0 或大于 23。-或- <paramref name="minute"/> 小于 0 或大于 59。-或- <paramref name="second"/> 小于 0 或大于 59。-或- <paramref name="millisecond"/> 小于 0 或大于 999。 </exception>
<exception cref="T:System.ArgumentException">指定的日期和时间参数计算为早于 <see cref="F:System.DateTime.MinValue"/> 或晚于 <see cref="F:System.DateTime.MaxValue"/>。-或-<paramref name="kind"/> 不是 <see cref="T:System.DateTimeKind"/> 值之一。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
<summary>将 <see cref="T:System.DateTime"/> 结构的新实例初始化为指定日历的指定年、月、日、小时、分钟、秒和毫秒。</summary>
<param name="year">年（1 到 <paramref name="calendar"/> 中的年数）。 </param>
<param name="month">月（1 到 <paramref name="calendar"/> 中的月数）。 </param>
<param name="day">日（1 到 <paramref name="month"/> 中的天数）。 </param>
<param name="hour">小时（0 到 23）。 </param>
<param name="minute">分（0 到 59）。 </param>
<param name="second">秒（0 到 59）。 </param>
<param name="millisecond">毫秒（0 到 999）。 </param>
<param name="calendar">要用于解释 <paramref name="year"/>、<paramref name="month"/> 和 <paramref name="day"/> 的日历。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="calendar"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 不在 <paramref name="calendar"/> 所支持的范围内。-或- <paramref name="month"/> 小于 1 或大于 <paramref name="calendar"/> 中的月数。-或- <paramref name="day"/> 小于 1 或大于 <paramref name="month"/> 中的天数。-或- <paramref name="hour"/> 小于 0 或大于 23。-或- <paramref name="minute"/> 小于 0 或大于 59。-或- <paramref name="second"/> 小于 0 或大于 59。-或- <paramref name="millisecond"/> 小于 0 或大于 999。 </exception>
<exception cref="T:System.ArgumentException">指定的参数计算为早于 <see cref="F:System.DateTime.MinValue"/> 或晚于 <see cref="F:System.DateTime.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)">
<summary>将 <see cref="T:System.DateTime"/> 结构的新实例初始化为指定日历的指定年、月、日、小时、分钟、秒、毫秒和协调世界时 (UTC) 或本地时间。</summary>
<param name="year">年（1 到 <paramref name="calendar"/> 中的年数）。 </param>
<param name="month">月（1 到 <paramref name="calendar"/> 中的月数）。 </param>
<param name="day">日（1 到 <paramref name="month"/> 中的天数）。 </param>
<param name="hour">小时（0 到 23）。 </param>
<param name="minute">分（0 到 59）。 </param>
<param name="second">秒（0 到 59）。 </param>
<param name="millisecond">毫秒（0 到 999）。 </param>
<param name="calendar">要用于解释 <paramref name="year"/>、<paramref name="month"/> 和 <paramref name="day"/> 的日历。 </param>
<param name="kind">枚举值之一，该值指示 <paramref name="year"/>、<paramref name="month"/>、<paramref name="day"/>、<paramref name="hour"/>、<paramref name="minute"/>、<paramref name="second"/> 和 <paramref name="millisecond"/> 指定的是本地时间还是协调世界时 (UTC)，还是两者皆未指定。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="calendar"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 不在 <paramref name="calendar"/> 所支持的范围内。-或- <paramref name="month"/> 小于 1 或大于 <paramref name="calendar"/> 中的月数。-或- <paramref name="day"/> 小于 1 或大于 <paramref name="month"/> 中的天数。-或- <paramref name="hour"/> 小于 0 或大于 23。-或- <paramref name="minute"/> 小于 0 或大于 59。-或- <paramref name="second"/> 小于 0 或大于 59。-或- <paramref name="millisecond"/> 小于 0 或大于 999。 </exception>
<exception cref="T:System.ArgumentException">指定的日期和时间参数计算为早于 <see cref="F:System.DateTime.MinValue"/> 或晚于 <see cref="F:System.DateTime.MaxValue"/>。-或-<paramref name="kind"/> 不是 <see cref="T:System.DateTimeKind"/> 值之一。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int64)">
<summary>将 <see cref="T:System.DateTime"/> 结构的新实例初始化为指定的刻度数。</summary>
<param name="ticks">一个日期和时间，以公历 0001 年 1 月 1 日 00:00:00.000 以来所经历的以 100 纳秒为间隔的间隔数来表示。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="ticks"/> 小于 <see cref="F:System.DateTime.MinValue"/> 或大于 <see cref="F:System.DateTime.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)">
<summary>将 <see cref="T:System.DateTime"/> 结构的新实例初始化为指定的计时周期数以及协调世界时 (UTC) 或本地时间。</summary>
<param name="ticks">一个日期和时间，以公历 0001 年 1 月 1 日 00:00:00.000 以来所经历的以 100 纳秒为间隔的间隔数来表示。</param>
<param name="kind">枚举值之一，指示 <paramref name="ticks"/> 指定的是本地时间还是协调世界时 (UTC)，还是两者皆未指定。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="ticks"/> 小于 <see cref="F:System.DateTime.MinValue"/> 或大于 <see cref="F:System.DateTime.MaxValue"/>。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="kind"/> 不是 <see cref="T:System.DateTimeKind"/> 值之一。</exception>
    </member>
    <member name="M:System.DateTime.Add(System.TimeSpan)">
<summary>返回一个新的 <see cref="T:System.DateTime"/>，它将指定 <see cref="T:System.TimeSpan"/> 的值与此实例的值相加。</summary>
<returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value"/> 所表示的时间间隔之和。</returns>
<param name="value">要添加的时间间隔。此值可以是正数也可以是负数。</param>
<exception cref="T:System.ArgumentOutOfRangeException">结果 <see cref="T:System.DateTime"/> 早于 <see cref="F:System.DateTime.MinValue"/> 或晚于 <see cref="F:System.DateTime.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.DateTime.AddDays(System.Double)">
<summary>返回一个新的 <see cref="T:System.DateTime"/>，它将指定的天数与此实例的值相加。</summary>
<returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value"/> 所表示的天数之和。</returns>
<param name="value">要添加的由整数和小数部分组成的天数。此值可以是正数也可以是负数。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">结果 <see cref="T:System.DateTime"/> 早于 <see cref="F:System.DateTime.MinValue"/> 或晚于 <see cref="F:System.DateTime.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.DateTime.AddHours(System.Double)">
<summary>返回一个新的 <see cref="T:System.DateTime"/>，它将指定的小时数与此实例的值相加。</summary>
<returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value"/> 所表示的小时数之和。</returns>
<param name="value">要添加的由整数和小数部分组成的小时数。此值可以是正数也可以是负数。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">结果 <see cref="T:System.DateTime"/> 早于 <see cref="F:System.DateTime.MinValue"/> 或晚于 <see cref="F:System.DateTime.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.DateTime.AddMilliseconds(System.Double)">
<summary>返回一个新的 <see cref="T:System.DateTime"/>，它将指定的毫秒数与此实例的值相加。</summary>
<returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value"/> 所表示的毫秒数之和。</returns>
<param name="value">要添加的由整数和小数部分组成的毫秒数。此值可正可负，并舍入到最接近的整数。</param>
<exception cref="T:System.ArgumentOutOfRangeException">结果 <see cref="T:System.DateTime"/> 早于 <see cref="F:System.DateTime.MinValue"/> 或晚于 <see cref="F:System.DateTime.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.DateTime.AddMinutes(System.Double)">
<summary>返回一个新的 <see cref="T:System.DateTime"/>，它将指定的分钟数与此实例的值相加。</summary>
<returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value"/> 所表示的分钟数之和。</returns>
<param name="value">要添加的由整数和小数部分组成的分钟数。此值可以是正数也可以是负数。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">结果 <see cref="T:System.DateTime"/> 早于 <see cref="F:System.DateTime.MinValue"/> 或晚于 <see cref="F:System.DateTime.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.DateTime.AddMonths(System.Int32)">
<summary>返回一个新的 <see cref="T:System.DateTime"/>，它将指定的月数与此实例的值相加。</summary>
<returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="months"/> 所表示的时间之和。</returns>
<param name="months">要添加的月数。此值可以是正数也可以是负数。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">结果 <see cref="T:System.DateTime"/> 早于 <see cref="F:System.DateTime.MinValue"/> 或晚于 <see cref="F:System.DateTime.MaxValue"/>。-或- <paramref name="months"/> 小于 -120,000 或大于 120,000。 </exception>
    </member>
    <member name="M:System.DateTime.AddSeconds(System.Double)">
<summary>返回一个新的 <see cref="T:System.DateTime"/>，它将指定的秒数与此实例的值相加。</summary>
<returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value"/> 所表示的秒数之和。</returns>
<param name="value">要添加的由整数和小数部分组成的秒数。此值可以是正数也可以是负数。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">结果 <see cref="T:System.DateTime"/> 早于 <see cref="F:System.DateTime.MinValue"/> 或晚于 <see cref="F:System.DateTime.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.DateTime.AddTicks(System.Int64)">
<summary>返回一个新的 <see cref="T:System.DateTime"/>，它将指定的计时周期数与此实例的值相加。</summary>
<returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value"/> 所表示的时间之和。</returns>
<param name="value">要添加的表示 100 纳秒的计时周期数。此值可以是正数也可以是负数。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">结果 <see cref="T:System.DateTime"/> 早于 <see cref="F:System.DateTime.MinValue"/> 或晚于 <see cref="F:System.DateTime.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.DateTime.AddYears(System.Int32)">
<summary>返回一个新的 <see cref="T:System.DateTime"/>，它将指定的年数与此实例的值相加。</summary>
<returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value"/> 所表示的年份数之和。</returns>
<param name="value">要添加的年数。此值可以是正数也可以是负数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="value"/>，或者结果 <see cref="T:System.DateTime"/> 早于 <see cref="F:System.DateTime.MinValue"/> 或晚于 <see cref="F:System.DateTime.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.DateTime.Compare(System.DateTime,System.DateTime)">
<summary>对两个 <see cref="T:System.DateTime"/> 的实例进行比较，并返回一个指示第一个 <see cref="T:System.DateTime"/> 实例是早于、等于还是晚于第二个 <see cref="T:System.DateTime"/> 实例的整数。</summary>
<returns>有符号数字，指示 <paramref name="t1"/> 和 <paramref name="t2"/> 的相对值。值 类型 条件 小于零 <paramref name="t1"/> 早于 <paramref name="t2"/>。零 <paramref name="t1"/> 等于 <paramref name="t2"/>。大于零 <paramref name="t1"/> 晚于 <paramref name="t2"/>。 </returns>
<param name="t1">要比较的第一个对象。 </param>
<param name="t2">要比较的第二个对象。 </param>
    </member>
    <member name="M:System.DateTime.CompareTo(System.DateTime)">
<summary>将此实例的值与指定的 <see cref="T:System.DateTime"/> 值相比较，并返回一个整数，该整数指示此实例是早于、等于还是晚于指定的 <see cref="T:System.DateTime"/> 值。</summary>
<returns>带符号整数，指示此实例与 <paramref name="value"/> 参数之间的关系，如下表所示。值 描述 小于零 此实例早于 <paramref name="value"/>。零 此实例与 <paramref name="value"/> 相同。大于零 此实例晚于 <paramref name="value"/>。 </returns>
<param name="value">要与此实例进行比较的对象。 </param>
    </member>
    <member name="M:System.DateTime.CompareTo(System.Object)">
<summary>将此实例的值与包含指定的 <see cref="T:System.DateTime"/> 值的指定对象相比较，并返回一个整数，该整数指示此实例是早于、等于还是晚于指定的 <see cref="T:System.DateTime"/> 值。</summary>
<returns>带符号整数，指示此实例与 <paramref name="value"/> 参数之间的关系，如下表所示。值 描述 小于零 此实例早于 <paramref name="value"/>。零 此实例与 <paramref name="value"/> 相同。大于零 此实例晚于 <paramref name="value"/> 或 <paramref name="value"/> 为 null。 </returns>
<param name="value">要与此实例进行比较的对象或 null。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="value"/> 不是 <see cref="T:System.DateTime"/>。 </exception>
    </member>
    <member name="P:System.DateTime.Date">
<summary>获取此实例的日期部分。</summary>
<returns>新的对象，其日期与此实例相同，其时间值设置为午夜 12:00:00 (00:00:00)。</returns>
    </member>
    <member name="P:System.DateTime.Day">
<summary>获取此实例所表示的日期为该月中的第几天。</summary>
<returns>日组成部分，表示为 1 和 31 之间的一个值。</returns>
    </member>
    <member name="P:System.DateTime.DayOfWeek">
<summary>获取此实例所表示的日期是星期几。</summary>
<returns>一个枚举常量，指示此 <see cref="T:System.DateTime"/> 值是星期几。 </returns>
    </member>
    <member name="P:System.DateTime.DayOfYear">
<summary>获取此实例所表示的日期是该年中的第几天。</summary>
<returns>该年中的第几天，表示为 1 和 366 之间的一个值。</returns>
    </member>
    <member name="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)">
<summary>返回指定年和月中的天数。</summary>
<returns>指定 <paramref name="year"/> 的 <paramref name="month"/> 中的天数。例如，如果 <paramref name="month"/> 等于 2（表示二月），则返回值为 28 或 29，具体取决于 <paramref name="year"/> 是否为闰年。</returns>
<param name="year">年。 </param>
<param name="month">月（介于 1 到 12 之间的一个数字）。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="month"/> 小于 1 或大于 12。-或- <paramref name="year"/> 小于 1 或大于 9999。</exception>
    </member>
    <member name="M:System.DateTime.Equals(System.DateTime)">
<summary>返回一个值，该值指示此实例是否与指定的 <see cref="T:System.DateTime"/> 实例相等。</summary>
<returns>如果 <paramref name="value"/> 参数等于此实例的值，则为 true；否则为 false。</returns>
<param name="value">要与此实例进行比较的对象。 </param>
    </member>
    <member name="M:System.DateTime.Equals(System.DateTime,System.DateTime)">
<summary>返回一个值，该值指示两个 <see cref="T:System.DateTime"/> 实例是否相等。</summary>
<returns>如果两个 <see cref="T:System.DateTime"/> 值相等，则为 true；否则为 false。</returns>
<param name="t1">要比较的第一个对象。 </param>
<param name="t2">要比较的第二个对象。 </param>
    </member>
    <member name="M:System.DateTime.Equals(System.Object)">
<summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
<returns>如果 <paramref name="value"/> 是 <see cref="T:System.DateTime"/> 的实例并且等于此实例的值，则为 true；否则为 false。</returns>
<param name="value">要与此实例进行比较的对象。 </param>
    </member>
    <member name="M:System.DateTime.FromBinary(System.Int64)">
<summary>反序列化一个 64 位二进制值，并重新创建序列化的 <see cref="T:System.DateTime"/> 初始对象。</summary>
<returns>一个对象，它等效于原始 <see cref="T:System.DateTime"/> 对象。</returns>
<param name="dateData">64 位带符号整数，它对 2 位字段的 <see cref="P:System.DateTime.Kind"/> 属性以及 62 位字段的 <see cref="P:System.DateTime.Ticks"/> 属性进行了编码。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="dateData"/> 小于 <see cref="F:System.DateTime.MinValue"/> 或大于 <see cref="F:System.DateTime.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.DateTime.FromFileTime(System.Int64)">
<summary>将指定的 Windows 文件时间转换为等效的本地时间。</summary>
<returns>一个对象，表示等效于由 <paramref name="fileTime"/> 参数表示的日期和时间的本地时间。</returns>
<param name="fileTime">以计时周期表示的 Windows 文件时间。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="fileTime"/> 小于零或表示大于 <see cref="F:System.DateTime.MaxValue"/> 的时间。 </exception>
    </member>
    <member name="M:System.DateTime.FromFileTimeUtc(System.Int64)">
<summary>将指定的 Windows 文件时间转换为等效的 UTC 时间。</summary>
<returns>一个对象，表示等效于由 <paramref name="fileTime"/> 参数表示的日期和时间的 UTC 时间。</returns>
<param name="fileTime">以计时周期表示的 Windows 文件时间。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="fileTime"/> 小于零或表示大于 <see cref="F:System.DateTime.MaxValue"/> 的时间。 </exception>
    </member>
    <member name="M:System.DateTime.FromOADate(System.Double)">
<summary>返回与指定的 OLE 自动化日期等效的 <see cref="T:System.DateTime"/>。</summary>
<returns>一个对象，它表示与 <paramref name="d"/> 参数相同的日期和时间。</returns>
<param name="d">OLE 自动化日期值。 </param>
<exception cref="T:System.ArgumentException">该日期不是有效的 OLE 自动化日期值。 </exception>
    </member>
    <member name="M:System.DateTime.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="M:System.DateTime.GetTypeCode">
<summary>返回值类型 <see cref="T:System.DateTime"/> 的 <see cref="T:System.TypeCode"/>。</summary>
<returns>枚举常数 <see cref="F:System.TypeCode.DateTime"/>。</returns>
    </member>
    <member name="P:System.DateTime.Hour">
<summary>获取此实例所表示日期的小时部分。</summary>
<returns>小时组成部分，表示为 0 和 23 之间的一个值。</returns>
    </member>
    <member name="M:System.DateTime.IsDaylightSavingTime">
<summary>指示此 <see cref="T:System.DateTime"/> 实例是否在当前时区的夏时制范围内。</summary>
<returns>如果 <see cref="P:System.DateTime.Kind"/> 为 <see cref="F:System.DateTimeKind.Local"/> 或 <see cref="F:System.DateTimeKind.Unspecified"/> 并且此 <see cref="T:System.DateTime"/> 实例的值在当前时区的夏时制范围以内，则为 true。如果 <see cref="P:System.DateTime.Kind"/> 为 <see cref="F:System.DateTimeKind.Utc"/>，则为 false。</returns>
    </member>
    <member name="M:System.DateTime.IsLeapYear(System.Int32)">
<summary>返回指定的年份是否为闰年的指示。</summary>
<returns>如果 <paramref name="year"/> 是闰年，则为 true；否则为 false。</returns>
<param name="year">四位数年份。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 小于 1 或大于 9999。</exception>
    </member>
    <member name="P:System.DateTime.Kind">
<summary>获取一个值，该值指示由此实例表示的时间是基于本地时间还是协调世界时 (UTC)，还是两者皆否。</summary>
<returns>枚举值之一。默认值为 <see cref="F:System.DateTimeKind.Unspecified"/>。</returns>
    </member>
    <member name="F:System.DateTime.MaxValue">
<summary>表示 <see cref="T:System.DateTime"/> 的最大可能值。此字段为只读。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
<see cref="F:System.DateTime.MaxValue"/> 位于当前区域性的默认日历或指定区域性的默认日历的范围之外。</exception>
    </member>
    <member name="P:System.DateTime.Millisecond">
<summary>获取此实例所表示日期的毫秒部分。</summary>
<returns>毫秒组成部分，表示为 0 和 999 之间的一个值。</returns>
    </member>
    <member name="P:System.DateTime.Minute">
<summary>获取此实例所表示日期的分钟部分。</summary>
<returns>分钟组成部分，表示为 0 和 59 之间的一个值。</returns>
    </member>
    <member name="F:System.DateTime.MinValue">
<summary>表示 <see cref="T:System.DateTime"/> 的最小可能值。此字段为只读。</summary>
    </member>
    <member name="P:System.DateTime.Month">
<summary>获取此实例所表示日期的月份部分。</summary>
<returns>月组成部分，表示为 1 和 12 之间的一个值。</returns>
    </member>
    <member name="P:System.DateTime.Now">
<summary>获取一个 <see cref="T:System.DateTime"/> 对象，该对象设置为此计算机上的当前日期和时间，表示为本地时间。</summary>
<returns>其值为当前日期和时间的对象。</returns>
    </member>
    <member name="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)">
<summary>将指定的时间间隔加到指定的日期和时间以生成新的日期和时间。</summary>
<returns>一个对象，它是 <paramref name="d"/> 和 <paramref name="t"/> 值的和。</returns>
<param name="d">要添加的第一个对象。 </param>
<param name="t">要添加的第二个对象。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">结果 <see cref="T:System.DateTime"/> 早于 <see cref="F:System.DateTime.MinValue"/> 或晚于 <see cref="F:System.DateTime.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)">
<summary>确定 <see cref="T:System.DateTime"/> 的两个指定实例是否相等。</summary>
<returns>如果 <paramref name="d1"/> 和 <paramref name="d2"/> 表示同一日期和时间，则为 true；否则为 false。</returns>
<param name="d1">要比较的第一个对象。 </param>
<param name="d2">要比较的第二个对象。 </param>
    </member>
    <member name="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)">
<summary>确定指定的 <see cref="T:System.DateTime"/> 是否大于另一个指定的 <see cref="T:System.DateTime"/>。</summary>
<returns>如果 <paramref name="t1"/> 大于 <paramref name="t2"/>，则为 true；否则为 false。</returns>
<param name="t1">要比较的第一个对象。 </param>
<param name="t2">要比较的第二个对象。 </param>
    </member>
    <member name="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)">
<summary>确定指定的 <see cref="T:System.DateTime"/> 是否大于或等于另一个指定的 <see cref="T:System.DateTime"/>。</summary>
<returns>如果 <paramref name="t1"/> 大于或等于 <paramref name="t2"/>，则为 true；否则为 false。</returns>
<param name="t1">要比较的第一个对象。 </param>
<param name="t2">要比较的第二个对象。 </param>
    </member>
    <member name="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)">
<summary>确定 <see cref="T:System.DateTime"/> 的两个指定实例是否不相等。</summary>
<returns>如果 <paramref name="d1"/> 和 <paramref name="d2"/> 不表示同一日期和时间，则为 true；否则为 false。</returns>
<param name="d1">要比较的第一个对象。 </param>
<param name="d2">要比较的第二个对象。 </param>
    </member>
    <member name="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)">
<summary>确定指定的 <see cref="T:System.DateTime"/> 是否小于另一个指定的 <see cref="T:System.DateTime"/>。</summary>
<returns>如果 <paramref name="t1"/> 小于 <paramref name="t2"/>，则为 true；否则为 false。</returns>
<param name="t1">要比较的第一个对象。 </param>
<param name="t2">要比较的第二个对象。 </param>
    </member>
    <member name="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)">
<summary>确定指定的 <see cref="T:System.DateTime"/> 是否小于或等于另一个指定的 <see cref="T:System.DateTime"/>。</summary>
<returns>如果 <paramref name="t1"/> 小于或等于 <paramref name="t2"/>，则为 true；否则为 false。</returns>
<param name="t1">要比较的第一个对象。 </param>
<param name="t2">要比较的第二个对象。 </param>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)">
<summary>将指定的日期和时间与另一个指定的日期和时间相减，返回一个时间间隔。</summary>
<returns><paramref name="d1"/> 和 <paramref name="d2"/> 之间的时间间隔；即 <paramref name="d1"/> 减去 <paramref name="d2"/>。</returns>
<param name="d1">要从中减去的日期和时间值（被减数）。 </param>
<param name="d2">要减去的日期和时间值（减数）。 </param>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)">
<summary>从指定的日期和时间减去指定的时间间隔，返回新的日期和时间。</summary>
<returns>一个对象，其值为 <paramref name="d"/> 的值减去 <paramref name="t"/> 的值。</returns>
<param name="d">要从中减去的日期和时间值（被减数）。 </param>
<param name="t">待减去的时间间隔（减数）。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">结果 <see cref="T:System.DateTime"/> 早于 <see cref="F:System.DateTime.MinValue"/> 或晚于 <see cref="F:System.DateTime.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.DateTime.Parse(System.String)">
<summary>将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime"/>。</summary>
<returns>一个对象，它等效于 <paramref name="s"/> 参数中包含的日期和时间。</returns>
<param name="s">包含要转换的日期和时间的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 不包含日期和时间的有效字符串表示形式。 </exception>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime"/>。</summary>
<returns>一个对象，它等效于由 <paramref name="provider"/> 参数所指定的 <paramref name="s"/> 参数中包含的日期和时间。</returns>
<param name="s">包含要转换的日期和时间的字符串。 </param>
<param name="provider">一个对象，提供有关 <paramref name="s"/> 的区域性特定格式设置信息。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 不包含日期和时间的有效字符串表示形式。 </exception>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
<summary>使用指定的区域性特定格式设置信息和格式设置样式，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime"/>。</summary>
<returns>一个对象，它等效于由 <paramref name="provider"/> 和 <paramref name="styles"/> 参数所指定的 <paramref name="s"/> 参数中包含的日期和时间。</returns>
<param name="s">包含要转换的日期和时间的字符串。 </param>
<param name="provider">一个提供有关 <paramref name="s"/> 的区域性特定的格式设置信息的对象。 </param>
<param name="styles">枚举值的按位组合，用于指示 <paramref name="s"/> 成功执行分析操作所需的样式元素，并定义如何根据当前时区或当前日期解释已分析日期的样式元素。一个要指定的典型值为 <see cref="F:System.Globalization.DateTimeStyles.None"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 不包含日期和时间的有效字符串表示形式。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="styles"/> 包含无效的 <see cref="T:System.Globalization.DateTimeStyles"/> 值组合。例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal"/> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal"/>。</exception>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime"/>。字符串表示形式的格式必须与指定的格式完全匹配。</summary>
<returns>一个对象，它等效于由 <paramref name="format"/> 和 <paramref name="provider"/> 参数所指定的 <paramref name="s"/> 参数中包含的日期和时间。</returns>
<param name="s">包含要转换的日期和时间的字符串。 </param>
<param name="format">用于定义所需的 <paramref name="s"/> 格式的格式说明符。 </param>
<param name="provider">一个对象，提供有关 <paramref name="s"/> 的区域性特定格式设置信息。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 或 <paramref name="format"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 或 <paramref name="format"/> 是空字符串。-或- <paramref name="s"/> 不包含与 <paramref name="format"/> 中指定的模式相对应的日期和时间。 </exception>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
<summary>使用指定的格式、区域性特定格式设置信息和样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime"/>。字符串表示形式的格式必须与指定的格式完全匹配，否则会引发异常。</summary>
<returns>一个对象，它等效于由 <paramref name="format"/>、<paramref name="provider"/> 和 <paramref name="style"/> 参数所指定的 <paramref name="s"/> 参数中包含的日期和时间。</returns>
<param name="s">包含要转换的日期和时间的字符串。 </param>
<param name="format">用于定义所需的 <paramref name="s"/> 格式的格式说明符。 </param>
<param name="provider">一个提供有关 <paramref name="s"/> 的区域性特定的格式设置信息的对象。 </param>
<param name="style">枚举值的按位组合，提供有关以下内容的附加信息：<paramref name="s"/>、可能出现在 <paramref name="s"/> 中的样式元素或从 <paramref name="s"/> 到 <see cref="T:System.DateTime"/> 值的转换。一个要指定的典型值为 <see cref="F:System.Globalization.DateTimeStyles.None"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 或 <paramref name="format"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 或 <paramref name="format"/> 是空字符串。-或- <paramref name="s"/> 不包含与 <paramref name="format"/> 中指定的模式相对应的日期和时间。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 包含无效的 <see cref="T:System.Globalization.DateTimeStyles"/> 值组合。例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal"/> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal"/>。</exception>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
<summary>使用指定的格式数组、区域性特定格式设置信息和样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime"/>。字符串表示形式的格式必须至少与指定的格式之一完全匹配，否则会引发异常。</summary>
<returns>一个对象，它等效于由 <paramref name="formats"/>、<paramref name="provider"/> 和 <paramref name="style"/> 参数所指定的 <paramref name="s"/> 参数中包含的日期和时间。</returns>
<param name="s">包含要转换的一个或多个日期和时间的字符串。 </param>
<param name="formats"><paramref name="s"/> 的允许格式的数组。 </param>
<param name="provider">一个对象，提供有关 <paramref name="s"/> 的区域性特定格式设置信息。 </param>
<param name="style">枚举值的一个按位组合，指示 <paramref name="s"/> 所需的格式。一个要指定的典型值为 <see cref="F:System.Globalization.DateTimeStyles.None"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 或 <paramref name="formats"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 是空字符串。-或- <paramref name="formats"/> 的一个元素是空字符串。-或- <paramref name="s"/> 不包含与 <paramref name="formats"/> 中的任何元素对应的日期和时间。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 包含无效的 <see cref="T:System.Globalization.DateTimeStyles"/> 值组合。例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal"/> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal"/>。</exception>
    </member>
    <member name="P:System.DateTime.Second">
<summary>获取此实例所表示日期的秒部分。</summary>
<returns>秒组成部分，表示为 0 和 59 之间的一个值。</returns>
    </member>
    <member name="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)">
<summary>创建新的 <see cref="T:System.DateTime"/> 对象，该对象具有与指定的 <see cref="T:System.DateTime"/> 相同的刻度数，但是根据指定的 <see cref="T:System.DateTimeKind"/> 值的指示，指定为本地时间或协调世界时 (UTC)，或者两者皆否。</summary>
<returns>一个新对象，它具有与 <paramref name="value"/> 参数表示的对象相同的刻度数以及由 <paramref name="kind"/> 参数指定的 <see cref="T:System.DateTimeKind"/> 值。</returns>
<param name="value">新对象的日期和时间值。</param>
<param name="kind">枚举值之一，指示新对象是按本地时间还是 UTC 指定，还是两者皆否。</param>
    </member>
    <member name="M:System.DateTime.Subtract(System.DateTime)">
<summary>从此实例中减去指定的日期和时间。</summary>
<returns>一个时间间隔，它等于此实例所表示的日期和时间减去 <paramref name="value"/> 所表示的日期和时间。</returns>
<param name="value">要减去的日期和时间。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">结果小于 <see cref="F:System.DateTime.MinValue"/> 或大于 <see cref="F:System.DateTime.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.DateTime.Subtract(System.TimeSpan)">
<summary>从此实例中减去指定持续时间。</summary>
<returns>一个对象，它等于此实例所表示的日期和时间减去 <paramref name="value"/> 所表示的时间间隔。</returns>
<param name="value">待减去的时间间隔。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">结果小于 <see cref="F:System.DateTime.MinValue"/> 或大于 <see cref="F:System.DateTime.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)">
<summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>未使用此成员的返回值。</returns>
<param name="provider">实现 <see cref="T:System.IFormatProvider"/> 接口的对象。（未使用此参数；指定 null。）</param>
<exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)">
<summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>未使用此成员的返回值。</returns>
<param name="provider">实现 <see cref="T:System.IFormatProvider"/> 接口的对象。（未使用此参数；指定 null。）</param>
<exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)">
<summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>未使用此成员的返回值。</returns>
<param name="provider">实现 <see cref="T:System.IFormatProvider"/> 接口的对象。（未使用此参数；指定 null。）</param>
<exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)">
<summary>返回当前 <see cref="T:System.DateTime"/> 对象。</summary>
<returns>当前的 <see cref="T:System.DateTime"/> 对象。</returns>
<param name="provider">实现 <see cref="T:System.IFormatProvider"/> 接口的对象。（未使用此参数；指定 null。）</param>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)">
<summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>未使用此成员的返回值。</returns>
<param name="provider">实现 <see cref="T:System.IFormatProvider"/> 接口的对象。（未使用此参数；指定 null。） </param>
<exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)">
<summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>未使用此成员的返回值。</returns>
<param name="provider">实现 <see cref="T:System.IFormatProvider"/> 接口的对象。（未使用此参数；指定 null。）</param>
<exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)">
<summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>未使用此成员的返回值。</returns>
<param name="provider">实现 <see cref="T:System.IFormatProvider"/> 接口的对象。（未使用此参数；指定 null。）</param>
<exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)">
<summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>未使用此成员的返回值。</returns>
<param name="provider">实现 <see cref="T:System.IFormatProvider"/> 接口的对象。（未使用此参数；指定 null。）</param>
<exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)">
<summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>未使用此成员的返回值。</returns>
<param name="provider">实现 <see cref="T:System.IFormatProvider"/> 接口的对象。（未使用此参数；指定 null。）</param>
<exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)">
<summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>未使用此成员的返回值。</returns>
<param name="provider">实现 <see cref="T:System.IFormatProvider"/> 接口的对象。（未使用此参数；指定 null。）</param>
<exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)">
<summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>未使用此成员的返回值。</returns>
<param name="provider">实现 <see cref="T:System.IFormatProvider"/> 接口的对象。（未使用此参数；指定 null。）</param>
<exception cref="T:System.InvalidCastException">在所有情况下。 </exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
<summary>将当前的 <see cref="T:System.DateTime"/> 对象转换为指定类型的对象。</summary>
<returns>由 <paramref name="type"/> 参数指定的类型的对象，其值与当前 <see cref="T:System.DateTime"/> 对象等效。</returns>
<param name="type">所需类型。 </param>
<param name="provider">实现 <see cref="T:System.IFormatProvider"/> 接口的对象。（未使用此参数；指定 null。）</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="type"/> 为 null。 </exception>
<exception cref="T:System.InvalidCastException"><see cref="T:System.DateTime"/> 类型不支持此转换。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)">
<summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>未使用此成员的返回值。</returns>
<param name="provider">实现 <see cref="T:System.IFormatProvider"/> 接口的对象。（未使用此参数；指定 null。）</param>
<exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)">
<summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>未使用此成员的返回值。</returns>
<param name="provider">实现 <see cref="T:System.IFormatProvider"/> 接口的对象。（未使用此参数；指定 null。）</param>
<exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)">
<summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>未使用此成员的返回值。</returns>
<param name="provider">实现 <see cref="T:System.IFormatProvider"/> 接口的对象。（未使用此参数；指定 null。）</param>
<exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="P:System.DateTime.Ticks">
<summary>获取表示此实例的日期和时间的滴答数。</summary>
<returns>表示此实例的日期和时间的滴答数。DateTime.MinValue.Ticks 和 DateTime.MaxValue.Ticks 之间的值。</returns>
    </member>
    <member name="P:System.DateTime.TimeOfDay">
<summary>获取此实例的当天的时间。</summary>
<returns>一个时间间隔，它表示当天自午夜以来已经过时间的部分。</returns>
    </member>
    <member name="P:System.DateTime.Today">
<summary>获取当前日期。</summary>
<returns>一个对象，设置为当天日期，其时间组成部分设置为 00:00:00。</returns>
    </member>
    <member name="M:System.DateTime.ToFileTime">
<summary>将当前 <see cref="T:System.DateTime"/> 对象的值转换为 Windows 文件时间。</summary>
<returns>表示为 Windows 文件时间的当前 <see cref="T:System.DateTime"/> 对象的值。</returns>
<exception cref="T:System.ArgumentOutOfRangeException">所生成的文件时间将表示协调世界时公元 1601 年 1 月 1 日午夜 12:00 之前的日期和时间。 </exception>
    </member>
    <member name="M:System.DateTime.ToFileTimeUtc">
<summary>将当前 <see cref="T:System.DateTime"/> 对象的值转换为 Windows 文件时间。</summary>
<returns>表示为 Windows 文件时间的当前 <see cref="T:System.DateTime"/> 对象的值。</returns>
<exception cref="T:System.ArgumentOutOfRangeException">所生成的文件时间将表示协调世界时公元 1601 年 1 月 1 日午夜 12:00 之前的日期和时间。 </exception>
    </member>
    <member name="M:System.DateTime.ToLocalTime">
<summary>将当前 <see cref="T:System.DateTime"/> 对象的值转换为本地时间。</summary>
<returns>一个对象，其 <see cref="P:System.DateTime.Kind"/> 属性为 <see cref="F:System.DateTimeKind.Local"/>，并且其值是下列值之一：等效于当前 <see cref="T:System.DateTime"/> 值的本地时间；如果经转换的值过大以至于不能由 <see cref="T:System.DateTime"/> 对象表示，则为 <see cref="F:System.DateTime.MaxValue"/>，或者，如果经转换的值过小以至于不能表示为 <see cref="T:System.DateTime"/> 对象，则为 <see cref="F:System.DateTime.MinValue"/>。</returns>
    </member>
    <member name="M:System.DateTime.ToLongDateString">
<summary>将当前 <see cref="T:System.DateTime"/> 对象的值转换为其等效的长日期字符串表示形式。</summary>
<returns>当前 <see cref="T:System.DateTime"/> 对象的长日期字符串表示形式。</returns>
    </member>
    <member name="M:System.DateTime.ToLongTimeString">
<summary>将当前 <see cref="T:System.DateTime"/> 对象的值转换为其等效的长时间字符串表示形式。</summary>
<returns>当前 <see cref="T:System.DateTime"/> 对象的长时间字符串表示形式。</returns>
    </member>
    <member name="M:System.DateTime.ToOADate">
<summary>将此实例的值转换为等效的 OLE 自动化日期。</summary>
<returns>一个双精度浮点数，它包含与此实例的值等效的 OLE 自动化日期。</returns>
<exception cref="T:System.OverflowException">此实例的值无法表示为 OLE 自动化日期。 </exception>
    </member>
    <member name="M:System.DateTime.ToShortDateString">
<summary>将当前 <see cref="T:System.DateTime"/> 对象的值转换为其等效的短日期字符串表示形式。</summary>
<returns>当前 <see cref="T:System.DateTime"/> 对象的短日期字符串表示形式。</returns>
    </member>
    <member name="M:System.DateTime.ToShortTimeString">
<summary>将当前 <see cref="T:System.DateTime"/> 对象的值转换为其等效的短时间字符串表示形式。</summary>
<returns>当前 <see cref="T:System.DateTime"/> 对象的短时间字符串表示形式。</returns>
    </member>
    <member name="M:System.DateTime.ToString">
<summary>将当前 <see cref="T:System.DateTime"/> 对象的值转换为其等效的字符串表示形式。</summary>
<returns>当前 <see cref="T:System.DateTime"/> 对象的值的字符串表示形式。</returns>
<exception cref="T:System.ArgumentOutOfRangeException">当前区域性所使用的日历支持的日期范围之外的日期和时间。 </exception>
    </member>
    <member name="M:System.DateTime.ToString(System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息将当前 <see cref="T:System.DateTime"/> 对象的值转换为它的等效字符串表示形式。</summary>
<returns>由 <paramref name="provider"/> 参数指定的当前 <see cref="T:System.DateTime"/> 对象的值的字符串表示形式。</returns>
<param name="provider">一个提供区域性特定的格式设置信息的对象。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">日期和时间处于由 <paramref name="provider"/> 使用的日历支持的日期范围之外。 </exception>
    </member>
    <member name="M:System.DateTime.ToString(System.String)">
<summary>使用指定的格式将当前 <see cref="T:System.DateTime"/> 对象的值转换为它的等效字符串表示形式。</summary>
<returns>由 <paramref name="format"/> 参数指定的当前 <see cref="T:System.DateTime"/> 对象的值的字符串表示形式。</returns>
<param name="format">标准或自定义日期和时间格式字符串（请参阅“备注”）。</param>
<exception cref="T:System.FormatException"><paramref name="format"/> 的长度为 1，并且它不是为 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 定义的格式说明符之一。-或- <paramref name="format"/> 中不包含有效的自定义格式模式。 </exception>
    </member>
    <member name="M:System.DateTime.ToString(System.String,System.IFormatProvider)">
<summary>使用指定的格式和区域性特定的格式设置信息将当前 <see cref="T:System.DateTime"/> 对象的值转换为它的等效字符串表示形式。</summary>
<returns>按照 <paramref name="format"/> 和 <paramref name="provider"/> 参数指定的方式的当前 <see cref="T:System.DateTime"/> 对象的值的字符串表示形式。</returns>
<param name="format">标准或自定义日期和时间格式字符串（请参阅“备注”）。</param>
<param name="provider">一个提供区域性特定的格式设置信息的对象。 </param>
<exception cref="T:System.FormatException"><paramref name="format"/> 的长度为 1，并且它不是为 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 定义的格式说明符之一。-或- <paramref name="format"/> 中不包含有效的自定义格式模式。 </exception>
<exception cref="T:System.ArgumentOutOfRangeException">日期和时间处于由 <paramref name="provider"/> 使用的日历支持的日期范围之外。 </exception>
    </member>
    <member name="M:System.DateTime.ToUniversalTime">
<summary>将当前 <see cref="T:System.DateTime"/> 对象的值转换为协调世界时 (UTC)。</summary>
<returns>一个对象，其 <see cref="P:System.DateTime.Kind"/> 属性为 <see cref="F:System.DateTimeKind.Utc"/>，并且其值是下列值之一：等效于当前 <see cref="T:System.DateTime"/> 值的 UTC；如果经转换的值过大以至于不能由 <see cref="T:System.DateTime"/> 对象表示，则为 <see cref="F:System.DateTime.MaxValue"/>，或者，如果经转换的值过小以至于不能由 <see cref="T:System.DateTime"/> 对象表示，则为 <see cref="F:System.DateTime.MinValue"/>。</returns>
    </member>
    <member name="M:System.DateTime.TryParse(System.String,System.DateTime@)">
<summary>将日期和时间的指定字符串表示形式转换为它的等效 <see cref="T:System.DateTime"/>，并返回一个指示转换是否成功的值。</summary>
<returns>如果 <paramref name="s"/> 参数成功转换，则为 true；否则为 false。</returns>
<param name="s">包含要转换的日期和时间的字符串。 </param>
<param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s"/> 中包含的日期和时间等效的 <see cref="T:System.DateTime"/> 值；如果转换失败，则为 <see cref="F:System.DateTime.MinValue"/>。如果 <paramref name="s"/> 参数为 null、空字符串或者不包含日期和时间的有效字符串表示形式，转换将失败。该参数未经初始化即被传递。 </param>
    </member>
    <member name="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
<summary>使用指定的区域性特定格式设置信息和格式设置样式，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime"/>，并返回一个指示转换是否成功的值。</summary>
<returns>如果 <paramref name="s"/> 参数成功转换，则为 true；否则为 false。</returns>
<param name="s">包含要转换的日期和时间的字符串。 </param>
<param name="provider">一个提供有关 <paramref name="s"/> 的区域性特定的格式设置信息的对象。 </param>
<param name="styles">枚举值的按位组合，该组合定义如何根据当前时区或当前日期解释已分析日期。一个要指定的典型值为 <see cref="F:System.Globalization.DateTimeStyles.None"/>。</param>
<param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s"/> 中包含的日期和时间等效的 <see cref="T:System.DateTime"/> 值；如果转换失败，则为 <see cref="F:System.DateTime.MinValue"/>。如果 <paramref name="s"/> 参数为 null、空字符串 ("") 或者不包含日期和时间的有效字符串表示形式，转换将失败。该参数未经初始化即被传递。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="styles"/> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles"/> 值。-或- <paramref name="styles"/> 包含无效的 <see cref="T:System.Globalization.DateTimeStyles"/> 值组合（例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal"/> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal"/>）。</exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="provider"/> 是一个非特定区域性并且无法在分析操作中使用。</exception>
    </member>
    <member name="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
<summary>使用指定的格式、区域性特定格式设置信息和样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime"/>。字符串表示形式的格式必须与指定的格式完全匹配。该方法返回一个指示转换是否成功的值。</summary>
<returns>如果 <paramref name="s"/> 参数成功转换，则为 true；否则为 false。</returns>
<param name="s">包含要转换的日期和时间的字符串。 </param>
<param name="format">所需的 <paramref name="s"/> 格式。 </param>
<param name="provider">一个提供有关 <paramref name="s"/> 的区域性特定的格式设置信息的对象。 </param>
<param name="style">一个或多个枚举值的按位组合，指示 <paramref name="s"/> 允许使用的格式。 </param>
<param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s"/> 中包含的日期和时间等效的 <see cref="T:System.DateTime"/> 值；如果转换失败，则为 <see cref="F:System.DateTime.MinValue"/>。如果 <paramref name="s"/> 或 <paramref name="format"/> 参数为 null，或者为空字符串，或者不包含与 <paramref name="format"/> 中所指定的模式相对应的日期和时间，转换将失败。该参数未经初始化即被传递。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="styles"/> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles"/> 值。-或- <paramref name="styles"/> 包含无效的 <see cref="T:System.Globalization.DateTimeStyles"/> 值组合（例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal"/> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal"/>）。</exception>
    </member>
    <member name="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
<summary>使用指定的格式数组、区域性特定格式设置信息和样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime"/>。字符串表示形式的格式必须至少与指定的格式之一完全匹配。该方法返回一个指示转换是否成功的值。</summary>
<returns>如果 <paramref name="s"/> 参数成功转换，则为 true；否则为 false。</returns>
<param name="s">包含要转换的一个或多个日期和时间的字符串。 </param>
<param name="formats"><paramref name="s"/> 参数的允许格式的数组。 </param>
<param name="provider">一个对象，提供有关 <paramref name="s"/> 的区域性特定格式设置信息。 </param>
<param name="style">枚举值的一个按位组合，指示 <paramref name="s"/> 所允许的格式。一个要指定的典型值为 <see cref="F:System.Globalization.DateTimeStyles.None"/>。</param>
<param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s"/> 中包含的日期和时间等效的 <see cref="T:System.DateTime"/> 值；如果转换失败，则为 <see cref="F:System.DateTime.MinValue"/>。如果 <paramref name="s"/> 或 <paramref name="formats"/> 为 null，<paramref name="s"/> 或 <paramref name="formats"/> 的一个元素为空字符串，或者 <paramref name="s"/> 的格式与 <paramref name="formats"/> 中的格式模式所指定的格式都不完全匹配，则转换失败。该参数未经初始化即被传递。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="styles"/> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles"/> 值。-或- <paramref name="styles"/> 包含无效的 <see cref="T:System.Globalization.DateTimeStyles"/> 值组合（例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal"/> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal"/>）。</exception>
    </member>
    <member name="P:System.DateTime.UtcNow">
<summary>获取一个 <see cref="T:System.DateTime"/> 对象，该对象设置为此计算机上的当前日期和时间，表示为协调通用时间 (UTC)。</summary>
<returns>其值为当前 UTC 日期和时间的对象。</returns>
    </member>
    <member name="P:System.DateTime.Year">
<summary>获取此实例所表示日期的年份部分。</summary>
<returns>年组成部分，表示为 1 和 9999 之间的一个值。</returns>
    </member>
    <member name="T:System.DateTimeKind">
<summary>指定 <see cref="T:System.DateTime"/> 对象是表示本地时间还是协调通用时间 (UTC)，还是既不指定为本地时间，也不指定为 UTC。</summary>
    </member>
    <member name="F:System.DateTimeKind.Unspecified">
<summary>表示的时间既未指定为本地时间，也未指定为协调通用时间 (UTC)。</summary>
    </member>
    <member name="F:System.DateTimeKind.Utc">
<summary>表示的时间为 UTC。</summary>
    </member>
    <member name="F:System.DateTimeKind.Local">
<summary>表示的时间为本地时间。</summary>
    </member>
    <member name="T:System.DateTimeOffset">
<summary>表示一个时间点，通常以相对于协调世界时 (UTC) 的日期和时间来表示。</summary>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.DateTime)">
<summary>使用指定的 <see cref="T:System.DateTime"/> 值初始化 <see cref="T:System.DateTimeOffset"/> 结构的新实例。</summary>
<param name="dateTime">日期和时间。   </param>
<exception cref="T:System.ArgumentOutOfRangeException">通过应用偏移量所产生的协调世界时 (UTC) 的日期和时间早于 <see cref="F:System.DateTimeOffset.MinValue"/>。-或- 通过应用偏移量所产生的 UTC 日期和时间晚于 <see cref="F:System.DateTimeOffset.MaxValue"/>。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)">
<summary>使用指定的 <see cref="T:System.DateTime"/> 值和偏移量初始化 <see cref="T:System.DateTimeOffset"/> 结构的新实例。</summary>
<param name="dateTime">日期和时间。   </param>
<param name="offset">与协调世界时 (UTC) 之间的时间偏移量。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="dateTime.Kind"/> 等于 <see cref="F:System.DateTimeKind.Utc"/>，<paramref name="offset"/> 不等于零。-或- <paramref name="dateTime.Kind"/> 等于 <see cref="F:System.DateTimeKind.Local"/>，<paramref name="offset"/> 不等于系统的本地时区的偏移量。-或- 未采用整分钟数指定 <paramref name="offset"/>。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="offset"/> 小于 -14 小时或大于 14 小时。-或- <see cref="P:System.DateTimeOffset.UtcDateTime"/> 小于 <see cref="F:System.DateTimeOffset.MinValue"/> 或大于 <see cref="F:System.DateTimeOffset.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.TimeSpan)">
<summary>用指定日历的指定年、月、日、小时、分钟、秒、毫秒和偏移量初始化 <see cref="T:System.DateTimeOffset"/> 结构的新实例。</summary>
<param name="year">年。</param>
<param name="month">月（1 到 12）。</param>
<param name="day">日（1 到 <paramref name="month"/> 中的天数）。</param>
<param name="hour">小时（0 到 23）。   </param>
<param name="minute">分（0 到 59）。</param>
<param name="second">秒（0 到 59）。</param>
<param name="millisecond">毫秒（0 到 999）。</param>
<param name="calendar">已定义其时间的日历。</param>
<param name="offset">与协调世界时 (UTC) 之间的时间偏移量。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="offset"/> 并不表示整分钟数。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="calendar"/> 不能为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 小于 <paramref name="calendar"/> 参数的 MinSupportedDateTime.Year 或大于 MaxSupportedDateTime.Year。-或-<paramref name="month"/> 小于或大于 <paramref name="calendar"/> 中 <paramref name="year"/> 的月数。-或- <paramref name="day"/> 小于 1 或大于 <paramref name="month"/> 中的天数。-或- <paramref name="hour"/> 小于 0 或大于 23。-或- <paramref name="minute"/> 小于 0 或大于 59。-或- <paramref name="second"/> 小于 0 或大于 59。-或- <paramref name="millisecond"/> 小于 0 或大于 999。-或- <paramref name="offset"/> 小于 -14 小时或大于 14 小时。-或- <paramref name="year"/>、<paramref name="month"/> 和 <paramref name="day"/> 参数不能表示为日期和时间值。-或- <see cref="P:System.DateTimeOffset.UtcDateTime"/> 属性早于 <see cref="F:System.DateTimeOffset.MinValue"/> 或晚于 <see cref="F:System.DateTimeOffset.MaxValue"/>。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
<summary>使用指定的年、月、日、小时、分钟、秒、毫秒和偏移量初始化 <see cref="T:System.DateTimeOffset"/> 结构的新实例。</summary>
<param name="year">年（1 到 9999）。</param>
<param name="month">月（1 到 12）。</param>
<param name="day">日（1 到 <paramref name="month"/> 中的天数）。</param>
<param name="hour">小时（0 到 23）。   </param>
<param name="minute">分（0 到 59）。</param>
<param name="second">秒（0 到 59）。</param>
<param name="millisecond">毫秒（0 到 999）。</param>
<param name="offset">与协调世界时 (UTC) 之间的时间偏移量。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="offset"/> 并不表示整分钟数。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 小于 1 或大于 9999。-或- <paramref name="month"/> 小于 1 或大于 12。-或- <paramref name="day"/> 小于 1 或大于 <paramref name="month"/> 中的天数。-或- <paramref name="hour"/> 小于零或大于 23。-或- <paramref name="minute"/> 小于 0 或大于 59。-或- <paramref name="second"/> 小于 0 或大于 59。-或- <paramref name="millisecond"/> 小于 0 或大于 999。-或- <paramref name="offset"/> 小于 -14 或大于 14。-或- <see cref="P:System.DateTimeOffset.UtcDateTime"/> 属性早于 <see cref="F:System.DateTimeOffset.MinValue"/> 或晚于 <see cref="F:System.DateTimeOffset.MaxValue"/>。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
<summary>使用指定的年、月、日、小时、分钟、秒和偏移量初始化 <see cref="T:System.DateTimeOffset"/> 结构的新实例。</summary>
<param name="year">年（1 到 9999）。</param>
<param name="month">月（1 到 12）。</param>
<param name="day">日（1 到 <paramref name="month"/> 中的天数）。</param>
<param name="hour">小时（0 到 23）。   </param>
<param name="minute">分（0 到 59）。</param>
<param name="second">秒（0 到 59）。</param>
<param name="offset">与协调世界时 (UTC) 之间的时间偏移量。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="offset"/> 并不表示整分钟数。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 小于 1 或大于 9999。-或- <paramref name="month"/> 小于 1 或大于 12。-或- <paramref name="day"/> 小于 1 或大于 <paramref name="month"/> 中的天数。-或- <paramref name="hour"/> 小于零或大于 23。-或- <paramref name="minute"/> 小于 0 或大于 59。-或- <paramref name="second"/> 小于 0 或大于 59。-或- <paramref name="offset"/> 小于 -14 小时或大于 14 小时。-或- <see cref="P:System.DateTimeOffset.UtcDateTime"/> 属性早于 <see cref="F:System.DateTimeOffset.MinValue"/> 或晚于 <see cref="F:System.DateTimeOffset.MaxValue"/>。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)">
<summary>使用指定的计时周期数和偏移量初始化 <see cref="T:System.DateTimeOffset"/> 结构的新实例。</summary>
<param name="ticks">一个日期和时间，以 0001 年 1 月 1 日午夜 12:00:00 以来所经历的以 100 纳秒为间隔的间隔数来表示。</param>
<param name="offset">与协调世界时 (UTC) 之间的时间偏移量。</param>
      <exception cref="T:System.ArgumentException">
未采用整分钟数指定 <paramref name="offset"/>。</exception>
<exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.DateTimeOffset.UtcDateTime"/> 属性早于 <see cref="F:System.DateTimeOffset.MinValue"/> 或晚于 <see cref="F:System.DateTimeOffset.MaxValue"/>。-或-<paramref name="ticks"/> 小于 DateTimeOffset.MinValue.Ticks 或大于 DateTimeOffset.MaxValue.Ticks。-或- <paramref name="Offset"/> 小于 -14 小时或大于 14 小时。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Add(System.TimeSpan)">
<summary>将指定的时间间隔与 <see cref="T:System.DateTimeOffset"/> 对象相加。</summary>
<returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset"/> 对象所表示的日期和时间与 <paramref name="timeSpan"/> 所表示的时间间隔之和。</returns>
<param name="timeSpan">一个 <see cref="T:System.TimeSpan"/> 对象，表示正时间间隔或负时间间隔。</param>
<exception cref="T:System.ArgumentOutOfRangeException">结果 <see cref="T:System.DateTimeOffset"/> 值小于 <see cref="F:System.DateTimeOffset.MinValue"/>。-或- 结果 <see cref="T:System.DateTimeOffset"/> 值大于 <see cref="F:System.DateTimeOffset.MaxValue"/>。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddDays(System.Double)">
<summary>将由整数和小数部分组成的指定天数与当前的 <see cref="T:System.DateTimeOffset"/> 对象相加。</summary>
<returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset"/> 对象所表示的日期和时间与 <paramref name="days"/> 所表示的天数之和。</returns>
<param name="days">由整数和小数部分组成的天数。此数值可以是负数也可以是正数。</param>
<exception cref="T:System.ArgumentOutOfRangeException">结果 <see cref="T:System.DateTimeOffset"/> 值小于 <see cref="F:System.DateTimeOffset.MinValue"/>。-或- 结果 <see cref="T:System.DateTimeOffset"/> 值大于 <see cref="F:System.DateTimeOffset.MaxValue"/>。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddHours(System.Double)">
<summary>将由整数和小数部分组成的指定小时数与当前的 <see cref="T:System.DateTimeOffset"/> 对象相加。</summary>
<returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset"/> 对象所表示的日期和时间与 <paramref name="hours"/> 所表示的小时数之和。</returns>
<param name="hours">由整数和小数部分组成的小时数。此数值可以是负数也可以是正数。</param>
<exception cref="T:System.ArgumentOutOfRangeException">结果 <see cref="T:System.DateTimeOffset"/> 值小于 <see cref="F:System.DateTimeOffset.MinValue"/>。-或- 结果 <see cref="T:System.DateTimeOffset"/> 值大于 <see cref="F:System.DateTimeOffset.MaxValue"/>。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMilliseconds(System.Double)">
<summary>将指定的毫秒数与当前的 <see cref="T:System.DateTimeOffset"/> 对象相加。</summary>
<returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset"/> 对象所表示的日期和时间与 <paramref name="milliseconds"/> 所表示的整毫秒数之和。</returns>
<param name="milliseconds">由整数和小数部分组成的毫秒数。此数值可以是负数也可以是正数。   </param>
<exception cref="T:System.ArgumentOutOfRangeException">结果 <see cref="T:System.DateTimeOffset"/> 值小于 <see cref="F:System.DateTimeOffset.MinValue"/>。-或- 结果 <see cref="T:System.DateTimeOffset"/> 值大于 <see cref="F:System.DateTimeOffset.MaxValue"/>。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMinutes(System.Double)">
<summary>将由整数和小数部分组成的指定分钟数与当前的 <see cref="T:System.DateTimeOffset"/> 对象相加。</summary>
<returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset"/> 对象所表示的日期和时间与 <paramref name="minutes"/> 所表示的分钟数之和。</returns>
<param name="minutes">由整数和小数部分组成的分钟数。此数值可以是负数也可以是正数。   </param>
<exception cref="T:System.ArgumentOutOfRangeException">结果 <see cref="T:System.DateTimeOffset"/> 值小于 <see cref="F:System.DateTimeOffset.MinValue"/>。-或- 结果 <see cref="T:System.DateTimeOffset"/> 值大于 <see cref="F:System.DateTimeOffset.MaxValue"/>。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMonths(System.Int32)">
<summary>将指定的月数与当前的 <see cref="T:System.DateTimeOffset"/> 对象相加。</summary>
<returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset"/> 对象所表示的日期和时间与 <paramref name="months"/> 所表示的月份数之和。</returns>
<param name="months">整月份数。此数值可以是负数也可以是正数。</param>
<exception cref="T:System.ArgumentOutOfRangeException">结果 <see cref="T:System.DateTimeOffset"/> 值小于 <see cref="F:System.DateTimeOffset.MinValue"/>。-或- 结果 <see cref="T:System.DateTimeOffset"/> 值大于 <see cref="F:System.DateTimeOffset.MaxValue"/>。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddSeconds(System.Double)">
<summary>将由整数和小数部分组成的指定秒数与当前的 <see cref="T:System.DateTimeOffset"/> 对象相加。</summary>
<returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset"/> 对象所表示的日期和时间与 <paramref name="seconds"/> 所表示的秒数之和。</returns>
<param name="seconds">由整数和小数部分组成的秒数。此数值可以是负数也可以是正数。</param>
<exception cref="T:System.ArgumentOutOfRangeException">结果 <see cref="T:System.DateTimeOffset"/> 值小于 <see cref="F:System.DateTimeOffset.MinValue"/>。-或- 结果 <see cref="T:System.DateTimeOffset"/> 值大于 <see cref="F:System.DateTimeOffset.MaxValue"/>。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddTicks(System.Int64)">
<summary>将指定的计时周期数与当前的 <see cref="T:System.DateTimeOffset"/> 对象相加。</summary>
<returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset"/> 对象所表示的日期和时间与 <paramref name="ticks"/> 所表示的计时周期数之和。</returns>
<param name="ticks">以 100 纳秒为单位的计时周期数。此数值可以是负数也可以是正数。</param>
<exception cref="T:System.ArgumentOutOfRangeException">结果 <see cref="T:System.DateTimeOffset"/> 值小于 <see cref="F:System.DateTimeOffset.MinValue"/>。-或- 结果 <see cref="T:System.DateTimeOffset"/> 值大于 <see cref="F:System.DateTimeOffset.MaxValue"/>。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddYears(System.Int32)">
<summary>将指定的年数与当前的 <see cref="T:System.DateTimeOffset"/> 对象相加。</summary>
<returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset"/> 对象所表示的日期和时间与 <paramref name="years"/> 所表示的年数之和。</returns>
<param name="years">年份数。此数值可以是负数也可以是正数。</param>
<exception cref="T:System.ArgumentOutOfRangeException">结果 <see cref="T:System.DateTimeOffset"/> 值小于 <see cref="F:System.DateTimeOffset.MinValue"/>。-或- 结果 <see cref="T:System.DateTimeOffset"/> 值大于 <see cref="F:System.DateTimeOffset.MaxValue"/>。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)">
<summary>对两个 <see cref="T:System.DateTimeOffset"/> 对象进行比较，并指明第一个对象是早于、等于还是晚于第二个对象。</summary>
<returns>带符号整数，指示 <paramref name="first"/> 参数的值是早于、晚于或等于 <paramref name="second"/> 参数的值，如下表所示。返回值 描述 小于零 <paramref name="first"/> 早于 <paramref name="second"/>。零 <paramref name="first"/> 等于 <paramref name="second"/>。大于零 <paramref name="first"/> 晚于 <paramref name="second"/>。</returns>
<param name="first">要比较的第一个对象。</param>
<param name="second">要比较的第二个对象。</param>
    </member>
    <member name="M:System.DateTimeOffset.CompareTo(System.DateTimeOffset)">
<summary>将当前的 <see cref="T:System.DateTimeOffset"/> 对象与指定的 <see cref="T:System.DateTimeOffset"/> 对象进行比较，并指明当前对象是早于、等于还是晚于另一个 <see cref="T:System.DateTimeOffset"/> 对象。</summary>
<returns>带符号整数，指示当前的 <see cref="T:System.DateTimeOffset"/> 对象与 <paramref name="other"/> 之间的关系，如下表所示。返回值 描述 小于零 当前 <see cref="T:System.DateTimeOffset"/> 对象早于 <paramref name="other"/>。零 当前 <see cref="T:System.DateTimeOffset"/> 对象等于 <paramref name="other"/>。大于零。当前 <see cref="T:System.DateTimeOffset"/> 对象晚于 <paramref name="other"/>。</returns>
<param name="other">要与当前 <see cref="T:System.DateTimeOffset"/> 对象进行比较的对象。</param>
    </member>
    <member name="P:System.DateTimeOffset.Date">
<summary>获取 <see cref="T:System.DateTime"/> 值，该值表示当前 <see cref="T:System.DateTimeOffset"/> 对象的日期组成部分。</summary>
<returns>一个对象，其值表示当前 <see cref="T:System.DateTimeOffset"/> 对象的日期组成部分。</returns>
    </member>
    <member name="P:System.DateTimeOffset.DateTime">
<summary>获取 <see cref="T:System.DateTime"/> 值，该值表示当前 <see cref="T:System.DateTimeOffset"/> 对象的日期和时间。</summary>
<returns>一个对象，其值表示当前 <see cref="T:System.DateTimeOffset"/> 对象的日期和时间。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Day">
<summary>获取由当前 <see cref="T:System.DateTimeOffset"/> 对象所表示的月中的某一天。</summary>
<returns>当前 <see cref="T:System.DateTimeOffset"/> 对象的日组成部分，以 1 到 31 之间的一个值来表示。</returns>
    </member>
    <member name="P:System.DateTimeOffset.DayOfWeek">
<summary>获取由当前 <see cref="T:System.DateTimeOffset"/> 对象所表示的星期中的某一天。</summary>
<returns>用于指示当前 <see cref="T:System.DateTimeOffset"/> 对象的星期几的枚举值之一。</returns>
    </member>
    <member name="P:System.DateTimeOffset.DayOfYear">
<summary>获取由当前 <see cref="T:System.DateTimeOffset"/> 对象所表示的年中的某一天。</summary>
<returns>当前 <see cref="T:System.DateTimeOffset"/> 对象的年中的某一天，以 1 到 366 之间的一个值来表示。</returns>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.DateTimeOffset)">
<summary>确定当前的 <see cref="T:System.DateTimeOffset"/> 对象是否与指定的 <see cref="T:System.DateTimeOffset"/> 对象表示同一时间点。</summary>
<returns>如果两个 <see cref="T:System.DateTimeOffset"/> 对象具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime"/> 值，则为 true；否则为 false。</returns>
<param name="other">要与当前 <see cref="T:System.DateTimeOffset"/> 对象进行比较的对象。   </param>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)">
<summary>确定两个指定的 <see cref="T:System.DateTimeOffset"/> 对象是否表示同一时间点。</summary>
<returns>如果两个 <see cref="T:System.DateTimeOffset"/> 对象具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime"/> 值，则为 true；否则为 false。</returns>
<param name="first">要比较的第一个对象。</param>
<param name="second">要比较的第二个对象。</param>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.Object)">
<summary>确定 <see cref="T:System.DateTimeOffset"/> 对象是否与指定的对象表示同一时间点。</summary>
<returns>如果 <paramref name="obj"/> 参数是 <see cref="T:System.DateTimeOffset"/> 对象，并且与当前的 <see cref="T:System.DateTimeOffset"/> 对象表示同一时间点，则为 true；否则为 false。</returns>
<param name="obj">要与当前 <see cref="T:System.DateTimeOffset"/> 对象进行比较的对象。</param>
    </member>
    <member name="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)">
<summary>确定当前的 <see cref="T:System.DateTimeOffset"/> 对象与指定的 <see cref="T:System.DateTimeOffset"/> 对象是否表示同一时间并且是否具有相同的偏移量。</summary>
<returns>如果当前 <see cref="T:System.DateTimeOffset"/> 对象和 <paramref name="other"/> 具有相同的日期和时间值以及相同的 <see cref="P:System.DateTimeOffset.Offset"/> 值，则为 true；否则为 false。</returns>
<param name="other">要与当前 <see cref="T:System.DateTimeOffset"/> 对象进行比较的对象。 </param>
    </member>
    <member name="M:System.DateTimeOffset.FromFileTime(System.Int64)">
<summary>将指定的 Windows 文件时间转换为等效的本地时间。</summary>
<returns>一个对象，表示偏移量被设置为本地时间偏移量的 <paramref name="fileTime"/> 的日期和时间。</returns>
<param name="fileTime">以计时周期表示的 Windows 文件时间。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="filetime"/> 小于零。-或- <paramref name="filetime"/> 大于 DateTimeOffset.MaxValue.Ticks。</exception>
    </member>
    <member name="M:System.DateTimeOffset.GetHashCode">
<summary>返回当前 <see cref="T:System.DateTimeOffset"/> 对象的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Hour">
<summary>获取由当前 <see cref="T:System.DateTimeOffset"/> 对象所表示的时间的小时组成部分。</summary>
<returns>当前 <see cref="T:System.DateTimeOffset"/> 对象的小时组成部分。此属性使用 24 小时制；值介于 0 到 23 之间。</returns>
    </member>
    <member name="P:System.DateTimeOffset.LocalDateTime">
<summary>获取 <see cref="T:System.DateTime"/> 值，该值表示当前 <see cref="T:System.DateTimeOffset"/> 对象的本地日期和时间。</summary>
<returns>一个对象，其值表示当前 <see cref="T:System.DateTimeOffset"/> 对象的本地日期和时间。</returns>
    </member>
    <member name="F:System.DateTimeOffset.MaxValue">
<summary>表示 <see cref="T:System.DateTimeOffset"/> 的最大可能值。此字段为只读。</summary>
    </member>
    <member name="P:System.DateTimeOffset.Millisecond">
<summary>获取由当前 <see cref="T:System.DateTimeOffset"/> 对象所表示的时间的毫秒组成部分。</summary>
<returns>当前 <see cref="T:System.DateTimeOffset"/> 对象的毫秒组成部分，以 0 到 999 之间的一个整数来表示。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Minute">
<summary>获取由当前 <see cref="T:System.DateTimeOffset"/> 对象所表示的时间的分钟组成部分。</summary>
<returns>当前 <see cref="T:System.DateTimeOffset"/> 对象的分钟组成部分，以 0 到 59 之间的一个整数来表示。</returns>
    </member>
    <member name="F:System.DateTimeOffset.MinValue">
<summary>表示 <see cref="T:System.DateTimeOffset"/> 的最早可能值。此字段为只读。</summary>
    </member>
    <member name="P:System.DateTimeOffset.Month">
<summary>获取由当前 <see cref="T:System.DateTimeOffset"/> 对象所表示的日期的月份组成部分。</summary>
<returns>当前 <see cref="T:System.DateTimeOffset"/> 对象的月份组成部分，以 1 到 12 之间的一个整数来表示。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Now">
<summary>获取一个 <see cref="T:System.DateTimeOffset"/> 对象，该对象设置为当前计算机上的当前日期和时间，偏移量设置为本地时间与协调世界时 (UTC) 之间的偏移量。</summary>
<returns>一个对象，其日期和时间为当前的本地时间，其偏移量为本地时区与协调世界时 (UTC) 之间的偏移量。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Offset">
<summary>获取与协调世界时 (UTC) 之间的时间偏移量。 </summary>
<returns>一个对象，表示当前 <see cref="T:System.DateTimeOffset"/> 对象的时间值与协调世界时 (UTC) 之间的差值。</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)">
<summary>将指定的时间间隔与具有指定的日期和时间的 <see cref="T:System.DateTimeOffset"/> 对象相加，产生一个具有新的日期和时间的 <see cref="T:System.DateTimeOffset"/> 对象。</summary>
<returns>一个对象，其值为 <paramref name="dateTimeOffset"/> 与 <paramref name="timeSpan"/> 的值之和。</returns>
<param name="dateTimeOffset">要向其加上时间间隔的对象。</param>
<param name="timeSpan">待添加的时间间隔。</param>
<exception cref="T:System.ArgumentOutOfRangeException">结果 <see cref="T:System.DateTimeOffset"/> 值小于 <see cref="F:System.DateTimeOffset.MinValue"/>。-或- 结果 <see cref="T:System.DateTimeOffset"/> 值大于 <see cref="F:System.DateTimeOffset.MaxValue"/>。</exception>
    </member>
    <member name="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)">
<summary>确定两个指定的 <see cref="T:System.DateTimeOffset"/> 对象是否表示同一时间点。</summary>
<returns>如果两个 <see cref="T:System.DateTimeOffset"/> 对象具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime"/> 值，则为 true；否则为 false。</returns>
<param name="left">要比较的第一个对象。</param>
<param name="right">要比较的第二个对象。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)">
<summary>确定一个指定的 <see cref="T:System.DateTimeOffset"/> 对象是否大于（或晚于）另一个指定的 <see cref="T:System.DateTimeOffset"/> 对象。</summary>
<returns>如果 <paramref name="left"/> 的 <see cref="P:System.DateTimeOffset.UtcDateTime"/> 值晚于 <paramref name="right"/> 的 <see cref="P:System.DateTimeOffset.UtcDateTime"/> 值，则为 true；否则为 false。</returns>
<param name="left">要比较的第一个对象。</param>
<param name="right">要比较的第二个对象。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)">
<summary>确定一个指定的 <see cref="T:System.DateTimeOffset"/> 对象是大于还是等于另一个指定的 <see cref="T:System.DateTimeOffset"/> 对象。</summary>
<returns>如果 <paramref name="left"/> 的 <see cref="P:System.DateTimeOffset.UtcDateTime"/> 值等于或晚于 <paramref name="right"/> 的 <see cref="P:System.DateTimeOffset.UtcDateTime"/> 值，则为 true；否则为 false。</returns>
<param name="left">要比较的第一个对象。</param>
<param name="right">要比较的第二个对象。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset">
<summary>定义从 <see cref="T:System.DateTime"/> 对象到 <see cref="T:System.DateTimeOffset"/> 对象的隐式转换。</summary>
<returns>转换后的对象。</returns>
<param name="dateTime">要转换的对象。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">通过应用偏移量所产生的协调世界时 (UTC) 的日期和时间早于 <see cref="F:System.DateTimeOffset.MinValue"/>。-或- 通过应用偏移量所产生的 UTC 日期和时间晚于 <see cref="F:System.DateTimeOffset.MaxValue"/>。</exception>
    </member>
    <member name="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)">
<summary>确定两个指定的 <see cref="T:System.DateTimeOffset"/> 对象是否表示不同的时间点。</summary>
<returns>如果 <paramref name="left"/> 和 <paramref name="right"/> 不具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime"/> 值，则为 true；否则为 false。</returns>
<param name="left">要比较的第一个对象。</param>
<param name="right">要比较的第二个对象。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)">
<summary>确定一个指定的 <see cref="T:System.DateTimeOffset"/> 对象是否小于另一个指定的 <see cref="T:System.DateTimeOffset"/> 对象。</summary>
<returns>如果 <paramref name="left"/> 的 <see cref="P:System.DateTimeOffset.UtcDateTime"/> 值早于 <paramref name="right"/> 的 <see cref="P:System.DateTimeOffset.UtcDateTime"/> 值，则为 true；否则为 false。</returns>
<param name="left">要比较的第一个对象。</param>
<param name="right">要比较的第二个对象。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)">
<summary>确定一个指定的 <see cref="T:System.DateTimeOffset"/> 对象是否小于另一个指定的 <see cref="T:System.DateTimeOffset"/> 对象。</summary>
<returns>如果 <paramref name="left"/> 的 <see cref="P:System.DateTimeOffset.UtcDateTime"/> 值早于 <paramref name="right"/> 的 <see cref="P:System.DateTimeOffset.UtcDateTime"/> 值，则为 true；否则为 false。</returns>
<param name="left">要比较的第一个对象。</param>
<param name="right">要比较的第二个对象。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)">
<summary>从一个 <see cref="T:System.DateTimeOffset"/> 对象中减去另一个对象并生成时间间隔。</summary>
<returns>一个表示 <paramref name="left"/> 与 <paramref name="right"/> 之差的对象。</returns>
<param name="left">要从中减去的日期和时间（被减数）。   </param>
<param name="right">要减去的日期和时间（减数）。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)">
<summary>从指定的日期和时间减去指定的时间间隔，并生成新的日期和时间。</summary>
<returns>一个对象，它等于 <paramref name="dateTimeOffset"/> 减 <paramref name="timeSpan"/> 的值。</returns>
<param name="dateTimeOffset">要从中减去的日期和时间。</param>
<param name="timeSpan">待减去的时间间隔。</param>
<exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTimeOffset"/> 值小于 <see cref="F:System.DateTimeOffset.MinValue"/> 或大于 <see cref="F:System.DateTimeOffset.MaxValue"/>。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String)">
<summary>将日期、时间和偏移量的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset"/>。</summary>
<returns>一个对象，它等效于 <paramref name="input"/> 中包含的日期和时间。</returns>
<param name="input">包含要转换的日期和时间的字符串。</param>
<exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。</exception>
      <exception cref="T:System.FormatException">
<paramref name="input"/> 不包含日期和时间的有效字符串表示形式。-或- <paramref name="input"/> 包含不带日期或时间的偏移量值的字符串表示形式。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset"/>。</summary>
<returns>一个对象，它等效于 <paramref name="input"/> 中包含的日期和时间，由 <paramref name="formatProvider"/> 指定。</returns>
<param name="input">包含要转换的日期和时间的字符串。   </param>
<param name="formatProvider">一个对象，提供有关 <paramref name="input"/> 的区域性特定格式设置信息。</param>
<exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。</exception>
      <exception cref="T:System.FormatException">
<paramref name="input"/> 不包含日期和时间的有效字符串表示形式。-或- <paramref name="input"/> 包含不带日期或时间的偏移量值的字符串表示形式。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
<summary>使用指定的区域性特定格式设置信息和格式设置样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset"/>。</summary>
<returns>一个对象，它等效于 <paramref name="input"/> 中包含的日期和时间，由 <paramref name="formatProvider"/> 和 <paramref name="styles"/> 指定。</returns>
<param name="input">包含要转换的日期和时间的字符串。   </param>
<param name="formatProvider">一个对象，提供有关 <paramref name="input"/> 的区域性特定格式设置信息。</param>
<param name="styles">枚举值的一个按位组合，指示 <paramref name="input"/> 所允许的格式。一个要指定的典型值为 <see cref="F:System.Globalization.DateTimeStyles.None"/>。   </param>
<exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。-或- <paramref name="styles"/> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles"/> 值。-或- <paramref name="styles"/> 包含不支持的 <see cref="T:System.Globalization.DateTimeStyles"/> 值。-或- <paramref name="styles"/> 包含不能一起使用的 <see cref="T:System.Globalization.DateTimeStyles"/> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。</exception>
      <exception cref="T:System.FormatException">
<paramref name="input"/> 不包含日期和时间的有效字符串表示形式。-或- <paramref name="input"/> 包含不带日期或时间的偏移量值的字符串表示形式。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset"/>。字符串表示形式的格式必须与指定的格式完全匹配。</summary>
<returns>一个对象，它等效于 <paramref name="input"/> 中包含的日期和时间，由 <paramref name="format"/> 和 <paramref name="formatProvider"/> 指定。</returns>
<param name="input">包含要转换的日期和时间的字符串。</param>
<param name="format">用于定义预期的 <paramref name="input"/> 格式的格式说明符。</param>
<param name="formatProvider">一个提供有关 <paramref name="input"/> 的区域性特定的格式设置信息的对象。</param>
<exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。-或- <paramref name="format"/> 为 null。</exception>
      <exception cref="T:System.FormatException">
<paramref name="input"/> 为空字符串 ("")。-或- <paramref name="input"/> 不包含日期和时间的有效字符串表示形式。-或- <paramref name="format"/> 为空字符串。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
<summary>使用指定的格式、区域性特定格式设置信息和样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset"/>。字符串表示形式的格式必须与指定的格式完全匹配。</summary>
<returns>一个对象，它等效于 <paramref name="input"/> 参数中包含的日期和时间，由 <paramref name="format"/>、<paramref name="formatProvider"/> 和 <paramref name="styles"/> 参数指定。</returns>
<param name="input">包含要转换的日期和时间的字符串。</param>
<param name="format">用于定义预期的 <paramref name="input"/> 格式的格式说明符。</param>
<param name="formatProvider">一个提供有关 <paramref name="input"/> 的区域性特定的格式设置信息的对象。</param>
<param name="styles">枚举值的一个按位组合，指示 <paramref name="input"/> 所允许的格式。</param>
<exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。-或- <paramref name="styles"/> 参数包括不受支持的值。-或- <paramref name="styles"/> 包含不能一起使用的 <see cref="T:System.Globalization.DateTimeStyles"/> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。-或- <paramref name="format"/> 为 null。</exception>
      <exception cref="T:System.FormatException">
<paramref name="input"/> 为空字符串 ("")。-或- <paramref name="input"/> 不包含日期和时间的有效字符串表示形式。-或- <paramref name="format"/> 为空字符串。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
<summary>使用指定的格式、区域性特定格式设置信息和样式，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset"/>。字符串表示形式的格式必须与一种指定的格式完全匹配。</summary>
<returns>一个对象，它等效于 <paramref name="input"/> 参数中包含的日期和时间，由 <paramref name="formats"/>、<paramref name="formatProvider"/> 和 <paramref name="styles"/> 参数指定。</returns>
<param name="input">包含要转换的日期和时间的字符串。</param>
<param name="formats">一个由格式说明符组成的数组，格式说明符用于定义 <paramref name="input"/> 的所需格式。</param>
<param name="formatProvider">一个提供有关 <paramref name="input"/> 的区域性特定的格式设置信息的对象。</param>
<param name="styles">枚举值的一个按位组合，指示 <paramref name="input"/> 所允许的格式。</param>
<exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。-或- <paramref name="styles"/> 包括不受支持的值。-或- <paramref name="styles"/> 包含不能一起使用的 <see cref="T:System.Globalization.DateTimeStyles"/> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。</exception>
      <exception cref="T:System.FormatException">
<paramref name="input"/> 为空字符串 ("")。-或- <paramref name="input"/> 不包含日期和时间的有效字符串表示形式。-或- <paramref name="formats"/> 的元素不包含有效的格式说明符。</exception>
    </member>
    <member name="P:System.DateTimeOffset.Second">
<summary>获取由当前 <see cref="T:System.DateTimeOffset"/> 对象所表示的时钟时间的秒组成部分。</summary>
<returns><see cref="T:System.DateTimeOffset"/> 对象的秒组成部分，以 0 到 59 之间的一个整数值来表示。</returns>
    </member>
    <member name="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)">
<summary>从当前的 <see cref="T:System.DateTimeOffset"/> 对象中减去表示特定日期和时间的 <see cref="T:System.DateTimeOffset"/> 值。</summary>
<returns>一个指定两个 <see cref="T:System.DateTimeOffset"/> 对象之间的间隔的对象。</returns>
<param name="value">要减去的日期和时间。</param>
    </member>
    <member name="M:System.DateTimeOffset.Subtract(System.TimeSpan)">
<summary>从当前的 <see cref="T:System.DateTimeOffset"/> 对象中减去指定的时间间隔。</summary>
<returns>一个对象，它等于当前的 <see cref="T:System.DateTimeOffset"/> 对象所表示的日期和时间减去 <paramref name="value"/> 所表示的时间间隔。</returns>
<param name="value">待减去的时间间隔。</param>
<exception cref="T:System.ArgumentOutOfRangeException">结果 <see cref="T:System.DateTimeOffset"/> 值小于 <see cref="F:System.DateTimeOffset.MinValue"/>。-或- 结果 <see cref="T:System.DateTimeOffset"/> 值大于 <see cref="F:System.DateTimeOffset.MaxValue"/>。</exception>
    </member>
    <member name="M:System.DateTimeOffset.System#IComparable#CompareTo(System.Object)">
<summary>将当前 <see cref="T:System.DateTimeOffset"/> 对象的值与相同类型的另一个对象进行比较。</summary>
<returns>下表中的值之一。返回值 描述 小于零 当前 <see cref="T:System.DateTimeOffset"/> 对象小于（早于）<paramref name="obj"/>。零 当前 <see cref="T:System.DateTimeOffset"/> 对象等于（表示同一时间点） <paramref name="obj"/>。大于零 当前 <see cref="T:System.DateTimeOffset"/> 对象大于（晚于）<paramref name="obj"/>.</returns>
<param name="obj">要与当前 <see cref="T:System.DateTimeOffset"/> 对象进行比较的对象。</param>
    </member>
    <member name="P:System.DateTimeOffset.Ticks">
<summary>获取计时周期数，此计时周期数表示时钟时间中当前 <see cref="T:System.DateTimeOffset"/> 对象的日期和时间。</summary>
<returns><see cref="T:System.DateTimeOffset"/> 对象的时钟时间中的计时周期数。</returns>
    </member>
    <member name="P:System.DateTimeOffset.TimeOfDay">
<summary>获取当前 <see cref="T:System.DateTimeOffset"/> 对象的日时。</summary>
<returns>一个对象，表示自午夜以来已经历的当前日期的时间间隔。</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToFileTime">
<summary>将当前 <see cref="T:System.DateTimeOffset"/> 对象的值转换为 Windows 文件时间。</summary>
<returns>用 Windows 文件时间来表示的当前 <see cref="T:System.DateTimeOffset"/> 对象的值。</returns>
<exception cref="T:System.ArgumentOutOfRangeException">所生成的文件时间将表示协调世界时 (UTC) 公元 1601 年 1 月 1 日午夜之前的日期和时间。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToLocalTime">
<summary>将当前的 <see cref="T:System.DateTimeOffset"/> 对象转换为表示本地时间的 <see cref="T:System.DateTimeOffset"/> 对象。</summary>
<returns>一个对象，表示当前的 <see cref="T:System.DateTimeOffset"/> 对象的日期和时间，已转换为本地时间。</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToOffset(System.TimeSpan)">
<summary>将当前 <see cref="T:System.DateTimeOffset"/> 对象的值转换为偏移量值所指定的日期和时间。</summary>
<returns>一个对象，它等于原始的 <see cref="T:System.DateTimeOffset"/> 对象（也就是说，它们的 <see cref="M:System.DateTimeOffset.ToUniversalTime"/> 方法返回的时间点相同），但其 <see cref="P:System.DateTimeOffset.Offset"/> 属性设置为 <paramref name="offset"/>。</returns>
<param name="offset"><see cref="T:System.DateTimeOffset"/> 值所转换成的偏移量。   </param>
<exception cref="T:System.ArgumentException">结果 <see cref="T:System.DateTimeOffset"/> 对象具有早于 <see cref="F:System.DateTimeOffset.MinValue"/> 的 <see cref="P:System.DateTimeOffset.DateTime"/> 值。-或- 结果 <see cref="T:System.DateTimeOffset"/> 对象具有晚于 <see cref="F:System.DateTimeOffset.MaxValue"/> 的 <see cref="P:System.DateTimeOffset.DateTime"/> 值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="offset"/> 小于 -14 小时。-或- <paramref name="offset"/> 大于 14 小时。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString">
<summary>将当前 <see cref="T:System.DateTimeOffset"/> 对象的值转换为其等效的字符串表示形式。</summary>
<returns>一个 <see cref="T:System.DateTimeOffset"/> 对象的字符串表示形式，包括附加在字符串末尾的偏移量。</returns>
<exception cref="T:System.ArgumentOutOfRangeException">当前区域性所使用的日历支持的日期范围之外的日期和时间。 </exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息将当前 <see cref="T:System.DateTimeOffset"/> 对象的值转换为它的等效字符串表示形式。</summary>
<returns>由 <paramref name="formatProvider"/> 指定的当前 <see cref="T:System.DateTimeOffset"/> 对象的值的字符串表示形式。</returns>
<param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
<exception cref="T:System.ArgumentOutOfRangeException">日期和时间处于由 <paramref name="formatProvider"/> 使用的日历支持的日期范围之外。 </exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.String)">
<summary>使用指定的格式将当前 <see cref="T:System.DateTimeOffset"/> 对象的值转换为它的等效字符串表示形式。</summary>
<returns>由 <paramref name="format"/> 指定的当前 <see cref="T:System.DateTimeOffset"/> 对象的值的字符串表示形式。</returns>
<param name="format">格式字符串。</param>
<exception cref="T:System.FormatException"><paramref name="format"/> 的长度是 1，并且它不是为 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 定义的标准格式说明符之一。-或- <paramref name="format"/> 中不包含有效的自定义格式模式。</exception>
<exception cref="T:System.ArgumentOutOfRangeException">当前区域性所使用的日历支持的日期范围之外的日期和时间。 </exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)">
<summary>使用指定的格式和区域性特定的格式设置信息将当前 <see cref="T:System.DateTimeOffset"/> 对象的值转换为它的等效字符串表示形式。</summary>
<returns>由 <paramref name="format"/> 和 <paramref name="provider"/> 指定的当前 <see cref="T:System.DateTimeOffset"/> 对象的值的字符串表示形式。</returns>
<param name="format">格式字符串。</param>
<param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
<exception cref="T:System.FormatException"><paramref name="format"/> 的长度为 1，并且它不是为 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 定义的标准格式说明符之一。-或- <paramref name="format"/> 中不包含有效的自定义格式模式。 </exception>
<exception cref="T:System.ArgumentOutOfRangeException">日期和时间处于由 <paramref name="formatProvider"/> 使用的日历支持的日期范围之外。 </exception>
    </member>
    <member name="M:System.DateTimeOffset.ToUniversalTime">
<summary>将当前的 <see cref="T:System.DateTimeOffset"/> 对象转换为一个表示协调世界时 (UTC) 的 <see cref="T:System.DateTimeOffset"/> 值。</summary>
<returns>一个对象，它表示转换为协调世界时 (UTC) 的当前 <see cref="T:System.DateTimeOffset"/> 对象的日期和时间。</returns>
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)">
<summary>尝试将日期和时间的指定字符串表示形式转换为它的等效 <see cref="T:System.DateTimeOffset"/>，并返回一个指示转换是否成功的值。</summary>
<returns>如果 <paramref name="input"/> 参数成功转换，则为 true；否则为 false。</returns>
<param name="input">包含要转换的日期和时间的字符串。</param>
<param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input"/> 的日期和时间等效的 <see cref="T:System.DateTimeOffset"/>；如果转换失败，则包含 <see cref="F:System.DateTimeOffset.MinValue"/>。如果 <paramref name="input"/> 参数为 null，或者不包含日期和时间的有效字符串表示形式，则转换失败。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
<summary>尝试将日期和时间的指定字符串表示形式转换为它的等效 <see cref="T:System.DateTimeOffset"/>，并返回一个指示转换是否成功的值。</summary>
<returns>如果 <paramref name="input"/> 参数成功转换，则为 true；否则为 false。</returns>
<param name="input">包含要转换的日期和时间的字符串。</param>
<param name="formatProvider">一个对象，提供有关 <paramref name="input"/> 的区域性特定格式设置信息。</param>
<param name="styles">枚举值的一个按位组合，指示 <paramref name="input"/> 所允许的格式。 </param>
<param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input"/> 的日期和时间等效的 <see cref="T:System.DateTimeOffset"/> 值；如果转换失败，则包含 <see cref="F:System.DateTimeOffset.MinValue"/>。如果 <paramref name="input"/> 参数为 null，或者不包含日期和时间的有效字符串表示形式，则转换失败。该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="styles"/> 包括未定义的 <see cref="T:System.Globalization.DateTimeStyles"/> 值。-或- <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault"/>  不受支持。-或- <paramref name="styles"/> 包括相互排斥的 <see cref="T:System.Globalization.DateTimeStyles"/> 值。</exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
<summary>使用指定的格式、区域性特定格式设置信息和样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset"/>。字符串表示形式的格式必须与指定的格式完全匹配。</summary>
<returns>如果 <paramref name="input"/> 参数成功转换，则为 true；否则为 false。</returns>
<param name="input">包含要转换的日期和时间的字符串。</param>
<param name="format">用于定义所需的 <paramref name="input"/> 格式的格式说明符。</param>
<param name="formatProvider">一个提供有关 <paramref name="input"/> 的区域性特定的格式设置信息的对象。</param>
<param name="styles">枚举值的按位组合，用于指示输入的允许格式。一个要指定的典型值为 None。</param>
<param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input"/> 的日期和时间等效的 <see cref="T:System.DateTimeOffset"/>；如果转换失败，则包含 <see cref="F:System.DateTimeOffset.MinValue"/>。如果 <paramref name="input"/> 参数为 null，或者不包含 <paramref name="format"/> 和 <paramref name="provider"/> 所定义的所需格式的日期和时间的有效字符串表示形式，则转换失败。该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="styles"/> 包括未定义的 <see cref="T:System.Globalization.DateTimeStyles"/> 值。-或- <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault"/>  不受支持。-或- <paramref name="styles"/> 包括相互排斥的 <see cref="T:System.Globalization.DateTimeStyles"/> 值。</exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
<summary>使用指定的格式数组、区域性特定格式设置信息和样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset"/>。字符串表示形式的格式必须与一种指定的格式完全匹配。</summary>
<returns>如果 <paramref name="input"/> 参数成功转换，则为 true；否则为 false。</returns>
<param name="input">包含要转换的日期和时间的字符串。</param>
<param name="formats">一个用于定义 <paramref name="input"/> 的所需格式的数组。</param>
<param name="formatProvider">一个提供有关 <paramref name="input"/> 的区域性特定的格式设置信息的对象。</param>
<param name="styles">枚举值的按位组合，用于指示输入的允许格式。一个要指定的典型值为 None。</param>
<param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input"/> 的日期和时间等效的 <see cref="T:System.DateTimeOffset"/>；如果转换失败，则包含 <see cref="F:System.DateTimeOffset.MinValue"/>。如果 <paramref name="input"/> 不包含日期和时间的有效字符串表示形式，或者不包含 <paramref name="format"/> 所定义的所需格式的日期和时间，或者 <paramref name="formats"/> 为 null，则转换失败。该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="styles"/> 包括未定义的 <see cref="T:System.Globalization.DateTimeStyles"/> 值。-或- <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault"/>  不受支持。-或- <paramref name="styles"/> 包括相互排斥的 <see cref="T:System.Globalization.DateTimeStyles"/> 值。</exception>
    </member>
    <member name="P:System.DateTimeOffset.UtcDateTime">
<summary>获取一个 <see cref="T:System.DateTime"/> 值，该值表示当前 <see cref="T:System.DateTimeOffset"/> 对象的协调世界时 (UTC) 日期和时间。</summary>
<returns>一个对象，其值表示当前 <see cref="T:System.DateTimeOffset"/> 对象的协调世界时 (UTC) 日期和时间。</returns>
    </member>
    <member name="P:System.DateTimeOffset.UtcNow">
<summary>获取一个 <see cref="T:System.DateTimeOffset"/> 对象，其日期和时间设置为当前的协调世界时 (UTC) 日期和时间，其偏移量为 <see cref="F:System.TimeSpan.Zero"/>。</summary>
<returns>一个对象，其日期和时间为当前的协调世界时 (UTC)，其偏移量为 <see cref="F:System.TimeSpan.Zero"/>。</returns>
    </member>
    <member name="P:System.DateTimeOffset.UtcTicks">
<summary>获取计时周期数，此计时周期数表示当前 <see cref="T:System.DateTimeOffset"/> 对象的协调世界时 (UTC) 日期和时间的。</summary>
<returns><see cref="T:System.DateTimeOffset"/> 对象的协调世界时 (UTC) 中的计时周期数。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Year">
<summary>获取由当前 <see cref="T:System.DateTimeOffset"/> 对象所表示的日期的年份组成部分。</summary>
<returns>当前 <see cref="T:System.DateTimeOffset"/> 对象的年份组成部分，以 0 到 9999 之间的一个整数值来表示。</returns>
    </member>
    <member name="T:System.DayOfWeek">
<summary>指定一周的某天。</summary>
    </member>
    <member name="F:System.DayOfWeek.Sunday">
<summary>表示星期日。</summary>
    </member>
    <member name="F:System.DayOfWeek.Monday">
<summary>表示星期一。</summary>
    </member>
    <member name="F:System.DayOfWeek.Tuesday">
<summary>表示星期二。</summary>
    </member>
    <member name="F:System.DayOfWeek.Wednesday">
<summary>表示星期三。</summary>
    </member>
    <member name="F:System.DayOfWeek.Thursday">
<summary>表示星期四。</summary>
    </member>
    <member name="F:System.DayOfWeek.Friday">
<summary>表示星期五。</summary>
    </member>
    <member name="F:System.DayOfWeek.Saturday">
<summary>表示星期六。</summary>
    </member>
    <member name="T:System.DBNull">
<summary>表示不存在的值。无法继承此类。</summary>
    </member>
    <member name="M:System.DBNull.GetTypeCode">
<summary>获取 <see cref="T:System.DBNull"/> 的 <see cref="T:System.TypeCode"/> 值。</summary>
<returns><see cref="T:System.DBNull"/>（为 <see cref="F:System.TypeCode.DBNull"/>）的 <see cref="T:System.TypeCode"/> 值。</returns>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToBoolean(System.IFormatProvider)">
<summary>不支持此转换。如果尝试执行此转换，便会引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>无。未使用此成员的返回值。</returns>
<param name="provider">实现 <see cref="T:System.IFormatProvider"/> 接口的对象。（未使用此参数；指定 null。）</param>
<exception cref="T:System.InvalidCastException"><see cref="T:System.DBNull"/> 类型不支持此转换。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToByte(System.IFormatProvider)">
<summary>不支持此转换。如果尝试执行此转换，便会引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>无。未使用此成员的返回值。</returns>
<param name="provider">实现 <see cref="T:System.IFormatProvider"/> 接口的对象。（未使用此参数；指定 null。）</param>
<exception cref="T:System.InvalidCastException"><see cref="T:System.DBNull"/> 类型不支持此转换。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToChar(System.IFormatProvider)">
<summary>不支持此转换。如果尝试执行此转换，便会引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>无。未使用此成员的返回值。</returns>
<param name="provider">实现 <see cref="T:System.IFormatProvider"/> 接口的对象。（未使用此参数；指定 null。）</param>
<exception cref="T:System.InvalidCastException"><see cref="T:System.DBNull"/> 类型不支持此转换。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToDateTime(System.IFormatProvider)">
<summary>不支持此转换。如果尝试执行此转换，便会引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>无。未使用此成员的返回值。</returns>
<param name="provider">实现 <see cref="T:System.IFormatProvider"/> 接口的对象。（未使用此参数；指定 null。）</param>
<exception cref="T:System.InvalidCastException"><see cref="T:System.DBNull"/> 类型不支持此转换。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToDecimal(System.IFormatProvider)">
<summary>不支持此转换。如果尝试执行此转换，便会引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>无。未使用此成员的返回值。</returns>
<param name="provider">实现 <see cref="T:System.IFormatProvider"/> 接口的对象。（未使用此参数；指定 null。）</param>
<exception cref="T:System.InvalidCastException"><see cref="T:System.DBNull"/> 类型不支持此转换。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToDouble(System.IFormatProvider)">
<summary>不支持此转换。如果尝试执行此转换，便会引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>无。未使用此成员的返回值。</returns>
<param name="provider">实现 <see cref="T:System.IFormatProvider"/> 接口的对象。（未使用此参数；指定 null。）</param>
<exception cref="T:System.InvalidCastException"><see cref="T:System.DBNull"/> 类型不支持此转换。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToInt16(System.IFormatProvider)">
<summary>不支持此转换。如果尝试执行此转换，便会引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>无。未使用此成员的返回值。</returns>
<param name="provider">实现 <see cref="T:System.IFormatProvider"/> 接口的对象。（未使用此参数；指定 null。）</param>
<exception cref="T:System.InvalidCastException"><see cref="T:System.DBNull"/> 类型不支持此转换。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToInt32(System.IFormatProvider)">
<summary>不支持此转换。如果尝试执行此转换，便会引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>无。未使用此成员的返回值。</returns>
<param name="provider">实现 <see cref="T:System.IFormatProvider"/> 接口的对象。（未使用此参数；指定 null。）</param>
<exception cref="T:System.InvalidCastException"><see cref="T:System.DBNull"/> 类型不支持此转换。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToInt64(System.IFormatProvider)">
<summary>不支持此转换。如果尝试执行此转换，便会引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>无。未使用此成员的返回值。</returns>
<param name="provider">实现 <see cref="T:System.IFormatProvider"/> 接口的对象。（未使用此参数；指定 null。）</param>
<exception cref="T:System.InvalidCastException"><see cref="T:System.DBNull"/> 类型不支持此转换。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToSByte(System.IFormatProvider)">
<summary>不支持此转换。如果尝试执行此转换，便会引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>无。未使用此成员的返回值。</returns>
<param name="provider">实现 <see cref="T:System.IFormatProvider"/> 接口的对象。（未使用此参数；指定 null。）</param>
<exception cref="T:System.InvalidCastException"><see cref="T:System.DBNull"/> 类型不支持此转换。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToSingle(System.IFormatProvider)">
<summary>不支持此转换。如果尝试执行此转换，便会引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>无。未使用此成员的返回值。</returns>
<param name="provider">实现 <see cref="T:System.IFormatProvider"/> 接口的对象。（未使用此参数；指定 null。）</param>
<exception cref="T:System.InvalidCastException"><see cref="T:System.DBNull"/> 类型不支持此转换。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
<summary>将当前的 <see cref="T:System.DBNull"/> 对象转换为指定类型。</summary>
<returns>如果支持这种转换，则返回当前 <see cref="T:System.DBNull"/> 对象的等效装箱项；否则将引发异常，并且不返回任何值。 </returns>
<param name="type">当前的 <see cref="T:System.DBNull"/> 对象要转换到的类型。 </param>
<param name="provider">用于实现 <see cref="T:System.IFormatProvider"/> 接口和增强转换的对象。如果指定了 null，则从当前区域性获得格式信息。 </param>
<exception cref="T:System.InvalidCastException"><see cref="T:System.DBNull"/> 类型不支持此转换。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="type"/> 为 null。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToUInt16(System.IFormatProvider)">
<summary>不支持此转换。如果尝试执行此转换，便会引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>无。未使用此成员的返回值。</returns>
<param name="provider">实现 <see cref="T:System.IFormatProvider"/> 接口的对象。（未使用此参数；指定 null。）</param>
<exception cref="T:System.InvalidCastException"><see cref="T:System.DBNull"/> 类型不支持此转换。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToUInt32(System.IFormatProvider)">
<summary>不支持此转换。如果尝试执行此转换，便会引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>无。未使用此成员的返回值。</returns>
<param name="provider">实现 <see cref="T:System.IFormatProvider"/> 接口的对象。（未使用此参数；指定 null。）</param>
<exception cref="T:System.InvalidCastException"><see cref="T:System.DBNull"/> 类型不支持此转换。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToUInt64(System.IFormatProvider)">
<summary>不支持此转换。如果尝试执行此转换，便会引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>无。未使用此成员的返回值。</returns>
<param name="provider">实现 <see cref="T:System.IFormatProvider"/> 接口的对象。（未使用此参数；指定 null。）</param>
<exception cref="T:System.InvalidCastException"><see cref="T:System.DBNull"/> 类型不支持此转换。</exception>
    </member>
    <member name="M:System.DBNull.ToString">
<summary>返回空字符串 (<see cref="F:System.String.Empty"/>)。</summary>
<returns>空字符串 (<see cref="F:System.String.Empty"/>)。</returns>
    </member>
    <member name="M:System.DBNull.ToString(System.IFormatProvider)">
<summary>使用指定的 <see cref="T:System.IFormatProvider"/> 返回空字符串。</summary>
<returns>空字符串 (<see cref="F:System.String.Empty"/>)。</returns>
<param name="provider">要用于为返回值设置格式的 <see cref="T:System.IFormatProvider"/>。-或- 为 null，表示从操作系统的当前区域设置中获取数值格式信息。 </param>
    </member>
    <member name="F:System.DBNull.Value">
<summary>表示 <see cref="T:System.DBNull"/> 类的唯一实例。</summary>
    </member>
    <member name="T:System.Decimal">
<summary>表示十进制数。</summary>
    </member>
    <member name="M:System.Decimal.#ctor(System.Double)">
<summary>将 <see cref="T:System.Decimal"/> 的新实例初始化为指定的双精度浮点数的值。</summary>
<param name="value">要表示成 <see cref="T:System.Decimal"/> 的值。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.Decimal.MaxValue"/> 或小于 <see cref="F:System.Decimal.MinValue"/>。-或- <paramref name="value"/> 为 <see cref="F:System.Double.NaN"/>、<see cref="F:System.Double.PositiveInfinity"/> 或 <see cref="F:System.Double.NegativeInfinity"/>。 </exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32)">
<summary>将 <see cref="T:System.Decimal"/> 的新实例初始化为指定的 32 位带符号整数值。</summary>
<param name="value">要表示成 <see cref="T:System.Decimal"/> 的值。 </param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte)">
<summary>用指定实例构成部分的参数来初始化 <see cref="T:System.Decimal"/> 的新实例。</summary>
<param name="lo">96 位整数的低 32 位。 </param>
<param name="mid">96 位整数的中间 32 位。 </param>
<param name="hi">96 位整数的高 32 位。 </param>
<param name="isNegative">数字的符号；1 为负，0 为正。 </param>
<param name="scale">10 的指数（0 到 28 之间）。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="scale"/> 大于 28。 </exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32[])">
<summary>将 <see cref="T:System.Decimal"/> 的新实例初始化为以二进制表示的、包含在指定数组中的十进制值。</summary>
<param name="bits">包含十进制值表示形式的 32 位带符号整数的数组。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="bits"/> 为 null。 </exception>
<exception cref="T:System.ArgumentException"><paramref name="bits"/> 的长度不是 4。-或- <paramref name="bits"/> 中十进制值的表示形式无效。 </exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int64)">
<summary>将 <see cref="T:System.Decimal"/> 的新实例初始化为指定的 64 位带符号整数值。</summary>
<param name="value">要表示成 <see cref="T:System.Decimal"/> 的值。 </param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Single)">
<summary>将 <see cref="T:System.Decimal"/> 的新实例初始化为指定的单精度浮点数的值。</summary>
<param name="value">要表示成 <see cref="T:System.Decimal"/> 的值。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.Decimal.MaxValue"/> 或小于 <see cref="F:System.Decimal.MinValue"/>。-或- <paramref name="value"/> 为 <see cref="F:System.Single.NaN"/>、<see cref="F:System.Single.PositiveInfinity"/> 或 <see cref="F:System.Single.NegativeInfinity"/>。 </exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt32)">
<summary>将 <see cref="T:System.Decimal"/> 的新实例初始化为指定的 32 位无符号整数值。</summary>
<param name="value">要表示成 <see cref="T:System.Decimal"/> 的值。 </param>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt64)">
<summary>将 <see cref="T:System.Decimal"/> 的新实例初始化为指定的 64 位无符号整数值。</summary>
<param name="value">要表示成 <see cref="T:System.Decimal"/> 的值。 </param>
    </member>
    <member name="M:System.Decimal.Add(System.Decimal,System.Decimal)">
<summary>两个指定的 <see cref="T:System.Decimal"/> 值相加。</summary>
<returns><see cref="T:System.Decimal"/> 值，该值是 <paramref name="d1"/> 与 <paramref name="d2"/> 之和。</returns>
<param name="d1"><see cref="T:System.Decimal"/>。 </param>
<param name="d2"><see cref="T:System.Decimal"/>。 </param>
<exception cref="T:System.OverflowException"><paramref name="d1"/> 与 <paramref name="d2"/> 之和小于 <see cref="F:System.Decimal.MinValue"/> 或大于 <see cref="F:System.Decimal.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.Ceiling(System.Decimal)">
<summary>返回大于或等于指定的十进制数的最小整数值。 </summary>
<returns>大于或等于 <paramref name="d"/> 参数的最小整数值。请注意，该方法返回一个 <see cref="T:System.Decimal"/>，而不是整数类型。</returns>
<param name="d">一个小数。</param>
    </member>
    <member name="M:System.Decimal.Compare(System.Decimal,System.Decimal)">
<summary>对两个指定的 <see cref="T:System.Decimal"/> 值进行比较，并返回一个整数，该整数指示第一个值是大于、小于还是等于第二个值。</summary>
<returns>有符号数字，指示 <paramref name="d1"/> 和 <paramref name="d2"/> 之间的关系。返回值 含义 小于零 <paramref name="d1"/> 小于 <paramref name="d2"/>。零 <paramref name="d1"/> 与 <paramref name="d2"/> 相等。大于零 <paramref name="d1"/> 大于 <paramref name="d2"/>。 </returns>
<param name="d1"><see cref="T:System.Decimal"/>。 </param>
<param name="d2"><see cref="T:System.Decimal"/>。 </param>
    </member>
    <member name="M:System.Decimal.CompareTo(System.Decimal)">
<summary>将此实例与指定的 <see cref="T:System.Decimal"/> 对象进行比较，并返回一个整数，指示此实例的值是大于、小于还是等于指定的 <see cref="T:System.Decimal"/> 的值。</summary>
<returns>有符号数字，指示此实例和 <paramref name="value"/> 之间的关系。返回值 含义 小于零 此实例小于 <paramref name="value"/>。零 此实例等于 <paramref name="value"/>。大于零 此实例大于 <paramref name="value"/>。 </returns>
<param name="value">一个 <see cref="T:System.Decimal"/> 对象。</param>
    </member>
    <member name="M:System.Decimal.CompareTo(System.Object)">
<summary>将此实例与指定的 <see cref="T:System.Object"/> 进行比较，并返回一个整数，指示此实例的值是大于、小于还是等于指定的 <see cref="T:System.Object"/> 的值。</summary>
<returns>有符号数字，指示此实例和 <paramref name="value"/> 之间的关系。返回值 含义 小于零 此实例小于 <paramref name="value"/>。零 此实例等于 <paramref name="value"/>。大于零 此实例大于 <paramref name="value"/>。-或- <paramref name="value"/> 为 null。 </returns>
<param name="value">一个 <see cref="T:System.Object"/> 或 null。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="value"/> 不是 <see cref="T:System.Decimal"/>。 </exception>
    </member>
    <member name="M:System.Decimal.Divide(System.Decimal,System.Decimal)">
<summary>两个指定的 <see cref="T:System.Decimal"/> 值相除。</summary>
<returns><see cref="T:System.Decimal"/>，它是 <paramref name="d1"/> 除以 <paramref name="d2"/> 的结果。</returns>
<param name="d1"><see cref="T:System.Decimal"/>（被除数）。 </param>
<param name="d2"><see cref="T:System.Decimal"/>（除数）。 </param>
      <exception cref="T:System.DivideByZeroException">
<paramref name="d2"/> 是零。 </exception>
<exception cref="T:System.OverflowException">返回值（即商）小于 <see cref="F:System.Decimal.MinValue"/> 或大于 <see cref="F:System.Decimal.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.Equals(System.Decimal)">
<summary>返回一个值，该值指示此实例和指定的 <see cref="T:System.Decimal"/> 对象是否表示相同的值。</summary>
<returns>如果 <paramref name="value"/> 等于此实例，则为 true；否则为 false。</returns>
<param name="value">要与此实例进行比较的 <see cref="T:System.Decimal"/> 对象。</param>
    </member>
    <member name="M:System.Decimal.Equals(System.Decimal,System.Decimal)">
<summary>返回一个值，该值指示 <see cref="T:System.Decimal"/> 的两个指定实例是否表示同一个值。</summary>
<returns>如果 <paramref name="d1"/> 和 <paramref name="d2"/> 相等，则为 true；否则为 false。</returns>
<param name="d1"><see cref="T:System.Decimal"/>。 </param>
<param name="d2"><see cref="T:System.Decimal"/>。 </param>
    </member>
    <member name="M:System.Decimal.Equals(System.Object)">
<summary>返回一个值，该值指示此实例和指定的 <see cref="T:System.Object"/> 是否表示相同的类型和值。</summary>
<returns>如果 <paramref name="value"/> 是 <see cref="T:System.Decimal"/> 且与此实例相等，则为 true；否则为 false。</returns>
<param name="value">一个 <see cref="T:System.Object"/>。 </param>
    </member>
    <member name="M:System.Decimal.Floor(System.Decimal)">
<summary>将指定的 <see cref="T:System.Decimal"/> 数字向负无穷方向舍入为最接近的整数。</summary>
<returns>如果 <paramref name="d"/> 有小数部分，则为负无穷方向上小于 <paramref name="d"/> 的下一个整 <see cref="T:System.Decimal"/> 数字。-或- 如果 <paramref name="d"/> 没有小数部分，则 <paramref name="d"/> 原样返回。</returns>
<param name="d"><see cref="T:System.Decimal"/>。 </param>
    </member>
    <member name="M:System.Decimal.GetBits(System.Decimal)">
<summary>将 <see cref="T:System.Decimal"/> 的指定实例的值转换为其等效的二进制表示形式。</summary>
<returns>包含 <paramref name="d"/> 二进制表示形式、由四个元素组成的 32 位带符号整数数组。</returns>
<param name="d">一个 <see cref="T:System.Decimal"/> 值。 </param>
    </member>
    <member name="M:System.Decimal.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Decimal.GetTypeCode">
<summary>返回值类型 <see cref="T:System.Decimal"/> 的 <see cref="T:System.TypeCode"/>。</summary>
<returns>枚举常数 <see cref="F:System.TypeCode.Decimal"/>。</returns>
    </member>
    <member name="F:System.Decimal.MaxValue">
<summary>表示 <see cref="T:System.Decimal"/> 的最大可能值。该字段是常数且为只读。</summary>
    </member>
    <member name="F:System.Decimal.MinusOne">
<summary>表示数字负一 (-1)。</summary>
    </member>
    <member name="F:System.Decimal.MinValue">
<summary>表示 <see cref="T:System.Decimal"/> 的最小可能值。该字段是常数且为只读。</summary>
    </member>
    <member name="M:System.Decimal.Multiply(System.Decimal,System.Decimal)">
<summary>两个指定的 <see cref="T:System.Decimal"/> 值相乘。</summary>
<returns><see cref="T:System.Decimal"/>，它是 <paramref name="d1"/> 和 <paramref name="d2"/> 相乘的结果。</returns>
<param name="d1"><see cref="T:System.Decimal"/>（被乘数）。 </param>
<param name="d2"><see cref="T:System.Decimal"/>（乘数）。 </param>
<exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.Decimal.MinValue"/> 或大于 <see cref="F:System.Decimal.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.Negate(System.Decimal)">
<summary>返回指定的 <see cref="T:System.Decimal"/> 值乘以 -1 的结果。</summary>
<returns>值为 <paramref name="d"/> 的 <see cref="T:System.Decimal"/>，但符号相反。-或- 如果 <paramref name="d"/> 为零，则为零。</returns>
<param name="d"><see cref="T:System.Decimal"/>。 </param>
    </member>
    <member name="F:System.Decimal.One">
<summary>表示数字一 (1)。</summary>
    </member>
    <member name="M:System.Decimal.op_Addition(System.Decimal,System.Decimal)">
<summary>两个指定的 <see cref="T:System.Decimal"/> 值相加。</summary>
<returns><paramref name="d1"/> 与 <paramref name="d2"/> 相加的 <see cref="T:System.Decimal"/> 结果。</returns>
<param name="d1"><see cref="T:System.Decimal"/>。 </param>
<param name="d2"><see cref="T:System.Decimal"/>。 </param>
<exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.Decimal.MinValue"/> 或大于 <see cref="F:System.Decimal.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.op_Decrement(System.Decimal)">
<summary><see cref="T:System.Decimal"/> 操作数减 1。</summary>
<returns><paramref name="d"/> 减 1 所得的值。</returns>
<param name="d"><see cref="T:System.Decimal"/> 操作数。 </param>
<exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.Decimal.MinValue"/> 或大于 <see cref="F:System.Decimal.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.op_Division(System.Decimal,System.Decimal)">
<summary>两个指定的 <see cref="T:System.Decimal"/> 值相除。</summary>
<returns><paramref name="d1"/> 除以 <paramref name="d2"/> 的 <see cref="T:System.Decimal"/> 结果。</returns>
<param name="d1"><see cref="T:System.Decimal"/>（被除数）。 </param>
<param name="d2"><see cref="T:System.Decimal"/>（除数）。 </param>
      <exception cref="T:System.DivideByZeroException">
<paramref name="d2"/> 是零。 </exception>
<exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.Decimal.MinValue"/> 或大于 <see cref="F:System.Decimal.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.op_Equality(System.Decimal,System.Decimal)">
<summary>返回一个值，该值指示 <see cref="T:System.Decimal"/> 的两个实例是否相等。</summary>
<returns>如果 <paramref name="d1"/> 和 <paramref name="d2"/> 相等，则为 true；否则为 false。</returns>
<param name="d1"><see cref="T:System.Decimal"/>。 </param>
<param name="d2"><see cref="T:System.Decimal"/>。 </param>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt16">
<summary>将 <see cref="T:System.Decimal"/> 转换成 16 位无符号整数。</summary>
<returns>16 位无符号整数，它表示转换后的 <see cref="T:System.Decimal"/>。</returns>
<param name="value">要转换的 <see cref="T:System.Decimal"/>。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.UInt16.MaxValue"/> 或小于 <see cref="F:System.UInt16.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.SByte">
<summary>将 <see cref="T:System.Decimal"/> 转换成 8 位带符号整数。</summary>
<returns>8 位带符号整数，它表示转换后的 <see cref="T:System.Decimal"/>。</returns>
<param name="value">要转换的 <see cref="T:System.Decimal"/>。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于 <see cref="F:System.SByte.MinValue"/> 或大于 <see cref="F:System.SByte.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt32">
<summary>将 <see cref="T:System.Decimal"/> 转换成 32 位无符号整数。</summary>
<returns>32 位无符号整数，它表示转换后的 <see cref="T:System.Decimal"/>。</returns>
<param name="value">要转换的 <see cref="T:System.Decimal"/>。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 为负数或大于 <see cref="F:System.UInt32.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Char">
<summary>将 <see cref="T:System.Decimal"/> 转换为 Unicode 字符。</summary>
<returns>表示转换后的 <see cref="T:System.Decimal"/> 的 Unicode 字符。</returns>
<param name="value">要转换的 <see cref="T:System.Decimal"/>。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于 <see cref="F:System.Int16.MinValue"/> 或大于 <see cref="F:System.Int16.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Byte">
<summary>将 <see cref="T:System.Decimal"/> 转换成 8 位无符号整数。</summary>
<returns>8 位无符号整数，它表示转换后的 <see cref="T:System.Decimal"/>。</returns>
<param name="value">要转换的 <see cref="T:System.Decimal"/>。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于 <see cref="F:System.Byte.MinValue"/> 或大于 <see cref="F:System.Byte.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int64">
<summary>将 <see cref="T:System.Decimal"/> 转换成 64 位带符号整数。</summary>
<returns>64 位带符号整数，它表示转换后的 <see cref="T:System.Decimal"/>。</returns>
<param name="value">要转换的 <see cref="T:System.Decimal"/>。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于 <see cref="F:System.Int64.MinValue"/> 或大于 <see cref="F:System.Int64.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Double">
<summary>将 <see cref="T:System.Decimal"/> 转换为双精度浮点数。</summary>
<returns>双精度浮点数，它表示转换后的 <see cref="T:System.Decimal"/>。</returns>
<param name="value">要转换的 <see cref="T:System.Decimal"/>。 </param>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int16">
<summary>将 <see cref="T:System.Decimal"/> 转换成 16 位带符号整数。</summary>
<returns>16 位带符号整数，它表示转换后的 <see cref="T:System.Decimal"/>。</returns>
<param name="value">要转换的 <see cref="T:System.Decimal"/>。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于 <see cref="F:System.Int16.MinValue"/> 或大于 <see cref="F:System.Int16.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt64">
<summary>将 <see cref="T:System.Decimal"/> 转换成 64 位无符号整数。</summary>
<returns>64 位无符号整数，它表示转换后的 <see cref="T:System.Decimal"/>。</returns>
<param name="value">要转换的 <see cref="T:System.Decimal"/>。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 为负数或大于 <see cref="F:System.UInt64.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Single">
<summary>将 <see cref="T:System.Decimal"/> 转换为单精度浮点数字。</summary>
<returns>单精度浮点数字，它表示转换后的 <see cref="T:System.Decimal"/>。</returns>
<param name="value">要转换的 <see cref="T:System.Decimal"/>。 </param>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int32">
<summary>将 <see cref="T:System.Decimal"/> 转换成 32 位带符号整数。</summary>
<returns>32 位带符号整数，它表示转换后的 <see cref="T:System.Decimal"/>。</returns>
<param name="value">要转换的 <see cref="T:System.Decimal"/>。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于 <see cref="F:System.Int32.MinValue"/> 或大于 <see cref="F:System.Int32.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Double)~System.Decimal">
<summary>将双精度浮点数转换为 <see cref="T:System.Decimal"/>。</summary>
<returns>一个 <see cref="T:System.Decimal"/>，它表示转换后的双精度浮点数。</returns>
<param name="value">双精度浮点数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于 <see cref="F:System.Decimal.MinValue"/> 或大于 <see cref="F:System.Decimal.MaxValue"/>。-或- <paramref name="value"/> 为 <see cref="F:System.Double.NaN"/>、<see cref="F:System.Double.PositiveInfinity"/> 或 <see cref="F:System.Double.NegativeInfinity"/>。 </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Single)~System.Decimal">
<summary>将单精度浮点数字转换为 <see cref="T:System.Decimal"/>。</summary>
<returns>一个 <see cref="T:System.Decimal"/>，它表示已转换的单精度浮点数字。</returns>
<param name="value">单精度浮点数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于 <see cref="F:System.Decimal.MinValue"/> 或大于 <see cref="F:System.Decimal.MaxValue"/>。-或- <paramref name="value"/> 为 <see cref="F:System.Single.NaN"/>、<see cref="F:System.Single.PositiveInfinity"/> 或 <see cref="F:System.Single.NegativeInfinity"/>。 </exception>
    </member>
    <member name="M:System.Decimal.op_GreaterThan(System.Decimal,System.Decimal)">
<summary>返回一个值，该值指示指定的 <see cref="T:System.Decimal"/> 是否大于另一个指定的 <see cref="T:System.Decimal"/>。</summary>
<returns>如果 <paramref name="d1"/> 大于 <paramref name="d2"/>，则为 true；否则为 false。</returns>
<param name="d1"><see cref="T:System.Decimal"/>。 </param>
<param name="d2"><see cref="T:System.Decimal"/>。 </param>
    </member>
    <member name="M:System.Decimal.op_GreaterThanOrEqual(System.Decimal,System.Decimal)">
<summary>返回一个值，该值指示指定的 <see cref="T:System.Decimal"/> 是否大于或等于另一个指定的 <see cref="T:System.Decimal"/>。</summary>
<returns>如果 <paramref name="d1"/> 大于或等于 <paramref name="d2"/>，则为 true；否则为 false。</returns>
<param name="d1"><see cref="T:System.Decimal"/>。 </param>
<param name="d2"><see cref="T:System.Decimal"/>。 </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Byte)~System.Decimal">
<summary>将 8 位无符号整数转换成 <see cref="T:System.Decimal"/>。</summary>
<returns>表示转换后的 8 位无符号整数的 <see cref="T:System.Decimal"/>。</returns>
<param name="value">8 位的无符号整数。 </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Char)~System.Decimal">
<summary>将 Unicode 字符转换为 <see cref="T:System.Decimal"/>。</summary>
<returns>表示转换后的 Unicode 字符的 <see cref="T:System.Decimal"/>。</returns>
<param name="value">一个 Unicode 字符。 </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int16)~System.Decimal">
<summary>将 16 位带符号整数转换成 <see cref="T:System.Decimal"/>。</summary>
<returns>表示转换后的 16 位带符号整数的 <see cref="T:System.Decimal"/>。</returns>
<param name="value">16 位带符号整数。 </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int32)~System.Decimal">
<summary>将 32 位带符号整数转换成 <see cref="T:System.Decimal"/>。</summary>
<returns>表示转换后的 32 位带符号整数的 <see cref="T:System.Decimal"/>。</returns>
<param name="value">32 位带符号整数。 </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int64)~System.Decimal">
<summary>将 64 位带符号整数转换成 <see cref="T:System.Decimal"/>。</summary>
<returns>表示转换后的 64 位带符号整数的 <see cref="T:System.Decimal"/>。</returns>
<param name="value">64 位带符号整数。 </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.SByte)~System.Decimal">
<summary>将 8 位带符号整数转换成 <see cref="T:System.Decimal"/>。</summary>
<returns>表示转换后的 8 位带符号整数的 <see cref="T:System.Decimal"/>。</returns>
<param name="value">8 位的带符号整数。 </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt16)~System.Decimal">
<summary>将 16 位无符号整数转换成 <see cref="T:System.Decimal"/>。</summary>
<returns>表示转换后的 16 位无符号整数的 <see cref="T:System.Decimal"/>。</returns>
<param name="value">16 位无符号整数。 </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt32)~System.Decimal">
<summary>将 32 位无符号整数转换成 <see cref="T:System.Decimal"/>。</summary>
<returns>表示转换后的 32 位无符号整数的 <see cref="T:System.Decimal"/>。</returns>
<param name="value">32 位无符号整数。 </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt64)~System.Decimal">
<summary>将 64 位无符号整数转换成 <see cref="T:System.Decimal"/>。</summary>
<returns>表示转换后的 64 位无符号整数的 <see cref="T:System.Decimal"/>。</returns>
<param name="value">64 位无符号整数。 </param>
    </member>
    <member name="M:System.Decimal.op_Increment(System.Decimal)">
<summary>将 <see cref="T:System.Decimal"/> 操作数增加 1。</summary>
<returns><paramref name="d"/> 增加 1 后的值。</returns>
<param name="d"><see cref="T:System.Decimal"/> 操作数。 </param>
<exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.Decimal.MinValue"/> 或大于 <see cref="F:System.Decimal.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.op_Inequality(System.Decimal,System.Decimal)">
<summary>返回一个值，该值指示 <see cref="T:System.Decimal"/> 的两个实例是否不相等。</summary>
<returns>如果 <paramref name="d1"/> 和 <paramref name="d2"/> 不相等，则为 true；否则为 false。</returns>
<param name="d1"><see cref="T:System.Decimal"/>。 </param>
<param name="d2"><see cref="T:System.Decimal"/>。 </param>
    </member>
    <member name="M:System.Decimal.op_LessThan(System.Decimal,System.Decimal)">
<summary>返回一个值，该值指示指定的 <see cref="T:System.Decimal"/> 是否小于另一个指定的 <see cref="T:System.Decimal"/>。</summary>
<returns>如果 <paramref name="d1"/> 小于 <paramref name="d2"/>，则为 true；否则为 false。</returns>
<param name="d1"><see cref="T:System.Decimal"/>。 </param>
<param name="d2"><see cref="T:System.Decimal"/>。 </param>
    </member>
    <member name="M:System.Decimal.op_LessThanOrEqual(System.Decimal,System.Decimal)">
<summary>返回一个值，该值指示指定的 <see cref="T:System.Decimal"/> 是否小于或等于另一个指定的 <see cref="T:System.Decimal"/>。</summary>
<returns>如果 <paramref name="d1"/> 小于或等于 <paramref name="d2"/>，则为 true；否则为 false。</returns>
<param name="d1"><see cref="T:System.Decimal"/>。 </param>
<param name="d2"><see cref="T:System.Decimal"/>。 </param>
    </member>
    <member name="M:System.Decimal.op_Modulus(System.Decimal,System.Decimal)">
<summary>返回两个指定 <see cref="T:System.Decimal"/> 值相除所得的余数。</summary>
<returns><paramref name="d1"/> 除以 <paramref name="d2"/> 所得的 <see cref="T:System.Decimal"/> 余数。</returns>
<param name="d1"><see cref="T:System.Decimal"/>（被除数）。 </param>
<param name="d2"><see cref="T:System.Decimal"/>（除数）。 </param>
      <exception cref="T:System.DivideByZeroException">
<paramref name="d2"/> 是零。 </exception>
<exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.Decimal.MinValue"/> 或大于 <see cref="F:System.Decimal.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.op_Multiply(System.Decimal,System.Decimal)">
<summary>两个指定的 <see cref="T:System.Decimal"/> 值相乘。</summary>
<returns><paramref name="d1"/> 乘以 <paramref name="d2"/> 的 <see cref="T:System.Decimal"/> 结果。</returns>
<param name="d1"><see cref="T:System.Decimal"/>。 </param>
<param name="d2"><see cref="T:System.Decimal"/>。 </param>
<exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.Decimal.MinValue"/> 或大于 <see cref="F:System.Decimal.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.op_Subtraction(System.Decimal,System.Decimal)">
<summary>两个指定的 <see cref="T:System.Decimal"/> 值相减。</summary>
<returns><paramref name="d1"/> 减 <paramref name="d2"/> 所得的 <see cref="T:System.Decimal"/> 结果。</returns>
<param name="d1"><see cref="T:System.Decimal"/>。 </param>
<param name="d2"><see cref="T:System.Decimal"/>。 </param>
<exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.Decimal.MinValue"/> 或大于 <see cref="F:System.Decimal.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.op_UnaryNegation(System.Decimal)">
<summary>对指定 <see cref="T:System.Decimal"/> 操作数的值求反。</summary>
<returns><paramref name="d"/> 乘以负一 (-1) 的结果。</returns>
<param name="d"><see cref="T:System.Decimal"/> 操作数。 </param>
    </member>
    <member name="M:System.Decimal.op_UnaryPlus(System.Decimal)">
<summary>返回 <see cref="T:System.Decimal"/> 操作数的值（操作数符号不变）。</summary>
<returns>操作数 <paramref name="d"/> 的值。</returns>
<param name="d"><see cref="T:System.Decimal"/> 操作数。 </param>
    </member>
    <member name="M:System.Decimal.Parse(System.String)">
<summary>将数字的字符串表示形式转换为它的等效 <see cref="T:System.Decimal"/> 值。</summary>
<returns>与 <paramref name="s"/> 中包含的数字等效的 <see cref="T:System.Decimal"/> 数。</returns>
<param name="s">要转换的数字的字符串表示形式。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 的格式不正确。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.Decimal.MinValue"/> 或大于 <see cref="F:System.Decimal.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles)">
<summary>将指定样式的数字的字符串表示形式转换为它的等效 <see cref="T:System.Decimal"/>。</summary>
<returns><see cref="T:System.Decimal"/> 数字，它等效于 <paramref name="style"/> 所指定的 <paramref name="s"/> 包含的数字。</returns>
<param name="s">要转换的数字的字符串表示形式。 </param>
<param name="style"><see cref="T:System.Globalization.NumberStyles"/> 值的按位组合，指示可出现在 <paramref name="s"/> 中的样式元素。一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Number"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或- <paramref name="style"/> 为 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 值。</exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 的格式不正确。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.Decimal.MinValue"/> 或大于 <see cref="F:System.Decimal.MaxValue"/> 的数字</exception>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
<summary>使用指定的样式和区域性特定格式，将数字的字符串表示形式转换为它的等效 <see cref="T:System.Decimal"/> 值。</summary>
<returns><see cref="T:System.Decimal"/> 数，它与 <paramref name="style"/> 和 <paramref name="provider"/> 所指定的 <paramref name="s"/> 中包含的数字等效。</returns>
<param name="s">要转换的数字的字符串表示形式。 </param>
<param name="style"><see cref="T:System.Globalization.NumberStyles"/> 值的按位组合，指示可出现在 <paramref name="s"/> 中的样式元素。一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Number"/>。</param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 对象，提供有关 <paramref name="s"/> 的格式的区域性特定信息。 </param>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 的格式不正确。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.Decimal.MinValue"/> 或大于 <see cref="F:System.Decimal.MaxValue"/> 的数字。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或- <paramref name="style"/> 为 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 值。</exception>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.IFormatProvider)">
<summary>使用指定的区域性特定的格式信息，将数字的字符串表示形式转换为它的等效 <see cref="T:System.Decimal"/> 值。</summary>
<returns><see cref="T:System.Decimal"/> 数字，它等效于 <paramref name="provider"/> 所指定的 <paramref name="s"/> 包含的数字。</returns>
<param name="s">要转换的数字的字符串表示形式。 </param>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/>，它提供有关 <paramref name="s"/> 的区域性特定分析信息。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 的格式不正确。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.Decimal.MinValue"/> 或大于 <see cref="F:System.Decimal.MaxValue"/> 的数字</exception>
    </member>
    <member name="M:System.Decimal.Remainder(System.Decimal,System.Decimal)">
<summary>计算两个 <see cref="T:System.Decimal"/> 值相除后的余数。</summary>
<returns><see cref="T:System.Decimal"/>，它是 <paramref name="d1"/> 除以 <paramref name="d2"/> 所得的余数。</returns>
<param name="d1"><see cref="T:System.Decimal"/>（被除数）。 </param>
<param name="d2"><see cref="T:System.Decimal"/>（除数）。 </param>
      <exception cref="T:System.DivideByZeroException">
<paramref name="d2"/> 是零。 </exception>
<exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.Decimal.MinValue"/> 或大于 <see cref="F:System.Decimal.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.Round(System.Decimal,System.Int32)">
<summary>将 <see cref="T:System.Decimal"/> 值舍入到指定的小数位数。</summary>
<returns><see cref="T:System.Decimal"/> 数等于舍入到 <paramref name="d"/> 小数位数的 <paramref name="decimals"/>。</returns>
<param name="d">要舍入的 <see cref="T:System.Decimal"/> 值。 </param>
<param name="decimals">指定数字要舍入到的小数位数的值，该值范围是从 0 到 28。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="decimals"/> 不是 0 到 28 之间的值。 </exception>
    </member>
    <member name="M:System.Decimal.Subtract(System.Decimal,System.Decimal)">
<summary>从一个 <see cref="T:System.Decimal"/> 值中减去另一个指定的值。</summary>
<returns><paramref name="d1"/> 减 <paramref name="d2"/> 所得的 <see cref="T:System.Decimal"/> 结果。</returns>
<param name="d1"><see cref="T:System.Decimal"/>（被减数）。 </param>
<param name="d2"><see cref="T:System.Decimal"/>（减数）。 </param>
<exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.Decimal.MinValue"/> 或大于 <see cref="F:System.Decimal.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToBoolean(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)"/>。</summary>
<returns>如果当前实例的值不为零，则为 true；否则为 false。</returns>
<param name="provider">忽略此参数。 </param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToByte(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)"/>。</summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Byte"/>。</returns>
<param name="provider">忽略此参数。</param>
<exception cref="T:System.OverflowException">所得到的整数值小于 <see cref="F:System.Byte.MinValue"/> 或大于 <see cref="F:System.Byte.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToChar(System.IFormatProvider)">
<summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>不支持此转换。不返回任何值。</returns>
<param name="provider">忽略此参数。</param>
<exception cref="T:System.InvalidCastException">在所有情况下。 </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDateTime(System.IFormatProvider)">
<summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>不支持此转换。不返回任何值。</returns>
<param name="provider">忽略此参数。</param>
<exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDecimal(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)"/>。</summary>
<returns>当前实例的值，未更改。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDouble(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)"/>。</summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Double"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt16(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)"/>。</summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Int16"/>。</returns>
<param name="provider">忽略此参数。</param>
<exception cref="T:System.OverflowException">所得到的整数值小于 <see cref="F:System.Int16.MinValue"/> 或大于 <see cref="F:System.Int16.MaxValue"/>。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt32(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)"/>。</summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Int32"/>。</returns>
<param name="provider">忽略此参数。</param>
<exception cref="T:System.OverflowException">所得到的整数值小于 <see cref="F:System.Int32.MinValue"/> 或大于 <see cref="F:System.Int32.MaxValue"/>。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt64(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)"/>。</summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Int64"/>。</returns>
<param name="provider">忽略此参数。</param>
<exception cref="T:System.OverflowException">所得到的整数值小于 <see cref="F:System.Int64.MinValue"/> 或大于 <see cref="F:System.Int64.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToSByte(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)"/>。</summary>
<returns>当前实例的值，已转换为 <see cref="T:System.SByte"/>。</returns>
<param name="provider">忽略此参数。</param>
<exception cref="T:System.OverflowException">所得到的整数值小于 <see cref="F:System.SByte.MinValue"/> 或大于 <see cref="F:System.SByte.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToSingle(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)"/>。</summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Single"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)"/>。</summary>
<returns>当前实例的值，已转换为 <paramref name="type"/>。</returns>
<param name="type">要将此 <see cref="T:System.Decimal"/> 实例的值转换到的类型。 </param>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/> 实现，提供有关返回值格式的区域性特定信息。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="type"/> 为 null。 </exception>
<exception cref="T:System.InvalidCastException">不支持所请求的类型转换。 </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt16(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)"/>。</summary>
<returns>当前实例的值，已转换为 <see cref="T:System.UInt16"/>。</returns>
<param name="provider">忽略此参数。</param>
<exception cref="T:System.OverflowException">所得到的整数值小于 <see cref="F:System.UInt16.MinValue"/> 或大于 <see cref="F:System.UInt16.MaxValue"/>。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt32(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)"/>。</summary>
<returns>当前实例的值，已转换为 <see cref="T:System.UInt32"/>。</returns>
<param name="provider">忽略此参数。</param>
<exception cref="T:System.OverflowException">所得到的整数值小于 <see cref="F:System.UInt32.MinValue"/> 或大于 <see cref="F:System.UInt32.MaxValue"/>。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt64(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)"/>。</summary>
<returns>当前实例的值，已转换为 <see cref="T:System.UInt64"/>。</returns>
<param name="provider">忽略此参数。</param>
<exception cref="T:System.OverflowException">所得到的整数值小于 <see cref="F:System.UInt64.MinValue"/> 或大于 <see cref="F:System.UInt64.MaxValue"/>。</exception>
    </member>
    <member name="M:System.Decimal.ToByte(System.Decimal)">
<summary>将指定的 <see cref="T:System.Decimal"/> 的值转换为等效的 8 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的 8 位无符号整数。</returns>
<param name="value"><see cref="T:System.Decimal"/> 值。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于 <see cref="F:System.Byte.MinValue"/> 或大于 <see cref="F:System.Byte.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.ToDouble(System.Decimal)">
<summary>将指定的 <see cref="T:System.Decimal"/> 的值转换为等效的双精度浮点数。</summary>
<returns>等效于 <paramref name="d"/> 的双精度浮点数。</returns>
<param name="d">要转换的 <see cref="T:System.Decimal"/> 值。 </param>
    </member>
    <member name="M:System.Decimal.ToInt16(System.Decimal)">
<summary>将指定的 <see cref="T:System.Decimal"/> 值转换为等效的 16 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的 16 位带符号整数。</returns>
<param name="value">一个 <see cref="T:System.Decimal"/> 值。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于 <see cref="F:System.Int16.MinValue"/> 或大于 <see cref="F:System.Int16.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.ToInt32(System.Decimal)">
<summary>将指定的 <see cref="T:System.Decimal"/> 值转换为等效的 32 位带符号整数。</summary>
<returns>与 <paramref name="d"/> 的值等效的 32 位带符号整数。</returns>
<param name="d">要转换的 <see cref="T:System.Decimal"/> 值。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="d"/> 小于 <see cref="F:System.Int32.MinValue"/> 或大于 <see cref="F:System.Int32.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.ToInt64(System.Decimal)">
<summary>将指定的 <see cref="T:System.Decimal"/> 值转换为等效的 64 位带符号整数。</summary>
<returns>与 <paramref name="d"/> 的值等效的 64 位带符号整数。</returns>
<param name="d">要转换的 <see cref="T:System.Decimal"/> 值。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="d"/> 小于 <see cref="F:System.Int64.MinValue"/> 或大于 <see cref="F:System.Int64.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.ToSByte(System.Decimal)">
<summary>将指定的 <see cref="T:System.Decimal"/> 值转换为等效的 8 位带符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的 8 位带符号整数。</returns>
<param name="value">一个 <see cref="T:System.Decimal"/> 值。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于 <see cref="F:System.SByte.MinValue"/> 或大于 <see cref="F:System.SByte.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.ToSingle(System.Decimal)">
<summary>将指定的 <see cref="T:System.Decimal"/> 的值转换为等效的单精度浮点数字。</summary>
<returns>等效于 <paramref name="d"/> 的值的单精度浮点数字。</returns>
<param name="d">要转换的 <see cref="T:System.Decimal"/> 值。 </param>
    </member>
    <member name="M:System.Decimal.ToString">
<summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
<returns>表示此实例的值的字符串。</returns>
    </member>
    <member name="M:System.Decimal.ToString(System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由 <paramref name="provider"/> 指定。</returns>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/>，它提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.Decimal.ToString(System.String)">
<summary>使用指定的格式，将此实例的数值转换为它的等效字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由 <paramref name="format"/> 指定。</returns>
<param name="format">标准或自定义的数值格式字符串（请参阅“备注”）。</param>
      <exception cref="T:System.FormatException">
<paramref name="format"/> 无效。 </exception>
    </member>
    <member name="M:System.Decimal.ToString(System.String,System.IFormatProvider)">
<summary>使用指定的格式和区域性特定格式设置信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由 <paramref name="format"/> 和 <paramref name="provider"/> 指定。</returns>
<param name="format">标准或自定义的数值格式字符串（请参阅“备注”）。</param>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/> 实现，它提供区域性特定的格式设置信息。 </param>
      <exception cref="T:System.FormatException">
<paramref name="format"/> 无效。 </exception>
    </member>
    <member name="M:System.Decimal.ToUInt16(System.Decimal)">
<summary>将指定的 <see cref="T:System.Decimal"/> 的值转换为等效的 16 位无符号整数。</summary>
<returns>等效于 <paramref name="value"/> 的值的 16 位无符号整数。</returns>
<param name="value">要转换的 <see cref="T:System.Decimal"/> 值。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 大于 <see cref="F:System.UInt16.MaxValue"/> 或小于 <see cref="F:System.UInt16.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.ToUInt32(System.Decimal)">
<summary>将指定的 <see cref="T:System.Decimal"/> 的值转换为等效的 32 位无符号整数。</summary>
<returns>等效于 <paramref name="d"/> 的值的 32 位无符号整数。</returns>
<param name="d">要转换的 <see cref="T:System.Decimal"/> 值。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="d"/> 为负数或大于 <see cref="F:System.UInt32.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.ToUInt64(System.Decimal)">
<summary>将指定的 <see cref="T:System.Decimal"/> 的值转换为等效的 64 位无符号整数。</summary>
<returns>等效于 <paramref name="d"/> 的值的 64 位无符号整数。</returns>
<param name="d">要转换的 <see cref="T:System.Decimal"/> 值。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="d"/> 为负数或大于 <see cref="F:System.UInt64.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Decimal.Truncate(System.Decimal)">
<summary>返回指定的 <see cref="T:System.Decimal"/> 的整数位，所有小数位均被放弃。</summary>
<returns><paramref name="d"/> 向零舍入为最接近的整数后的 <see cref="T:System.Decimal"/> 结果。</returns>
<param name="d">要截断的 <see cref="T:System.Decimal"/>。 </param>
    </member>
    <member name="M:System.Decimal.TryParse(System.String,System.Decimal@)">
<summary>将数字的字符串表示形式转换为它的等效 <see cref="T:System.Decimal"/> 值。一个指示转换是否成功的返回值。</summary>
<returns>如果成功转换了 <paramref name="s"/>，则为 true；否则为 false。</returns>
<param name="s">要转换的数字的字符串表示形式。</param>
<param name="result">当此方法返回时，如果转换成功，则返回值包含与 <paramref name="s"/> 中包含的数值等效的 <see cref="T:System.Decimal"/> 数；如果转换失败，则返回值包含零。如果 <paramref name="s"/> 参数为 null，不是有效格式的数字或者表示的数字小于 <see cref="F:System.Decimal.MinValue"/> 或大于 <see cref="F:System.Decimal.MaxValue"/>，则转换将失败。该参数未经初始化即被传递。 </param>
    </member>
    <member name="M:System.Decimal.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)">
<summary>使用指定的样式和区域性特定格式，将数字的字符串表示形式转换为它的等效 <see cref="T:System.Decimal"/> 值。一个指示转换是否成功的返回值。</summary>
<returns>如果成功转换了 <paramref name="s"/>，则为 true；否则为 false。</returns>
<param name="s">要转换的数字的字符串表示形式。</param>
<param name="style"><see cref="T:System.Globalization.NumberStyles"/> 值的按位组合，指示 <paramref name="s"/> 允许使用的格式。一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Number"/>。</param>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/> 对象，它提供有关 <paramref name="s"/> 的区域性特定分析信息。 </param>
<param name="result">当此方法返回时，如果转换成功，则返回值包含与 <paramref name="s"/> 中包含的数值等效的 <see cref="T:System.Decimal"/> 数；如果转换失败，则返回值包含零。如果 <paramref name="s"/> 参数为 null，格式不符合 <paramref name="style"/>，或者表示的数字小于 <see cref="F:System.Decimal.MinValue"/> 或大于 <see cref="F:System.Decimal.MaxValue"/>，则转换会失败。该参数未经初始化即被传递。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或- <paramref name="style"/> 为 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 值。</exception>
    </member>
    <member name="F:System.Decimal.Zero">
<summary>表示数字零 (0)。</summary>
    </member>
    <member name="T:System.Delegate">
<summary>表示委托，委托是一种数据结构，它引用静态方法或引用类实例及该类的实例方法。</summary>
    </member>
    <member name="M:System.Delegate.#ctor(System.Object,System.String)">
<summary>初始化一个委托，该委托对指定的类实例调用指定的实例方法。</summary>
<param name="target">类实例，委托对其调用 <paramref name="method"/>。 </param>
<param name="method">委托表示的实例方法的名称。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="target"/> 为 null。-或- <paramref name="method"/> 为 null。 </exception>
<exception cref="T:System.ArgumentException">绑定到目标方法时出错。</exception>
<exception cref="T:System.MethodAccessException">应用程序代码尝试访问此成员后期绑定，例如，通过使用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])"/> 方法。 </exception>
    </member>
    <member name="M:System.Delegate.#ctor(System.Type,System.String)">
<summary>初始化一个委托，该委托从指定的类调用指定的静态方法。</summary>
<param name="target">定义 <paramref name="method"/> 的类。 </param>
<param name="method">委托表示的静态方法的名称。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="target"/> 为 null。-或- <paramref name="method"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="target"/> 不是 RuntimeType。请参阅“反射中的运行库类型”。-或- <paramref name="target"/> 表示开放式泛型类型。</exception>
<exception cref="T:System.MethodAccessException">应用程序代码尝试访问此成员后期绑定，例如，通过使用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])"/> 方法。 </exception>
    </member>
    <member name="M:System.Delegate.Combine(System.Delegate,System.Delegate)">
<summary>将两个委托的调用列表连接在一起。</summary>
<returns>新的委托，它的调用列表将 <paramref name="a"/> 和 <paramref name="b"/> 的调用列表按该顺序连接在一起。如果 <paramref name="b"/> 为 null，则返回 <paramref name="a"/>，如果 <paramref name="a"/> 为空引用，则返回 <paramref name="b"/>，如果 <paramref name="a"/> 和 <paramref name="b"/> 均为空引用，则返回空引用。</returns>
<param name="a">最先出现其调用列表的委托。 </param>
<param name="b">最后出现其调用列表的委托。 </param>
<exception cref="T:System.ArgumentException"><paramref name="a"/> 和 <paramref name="b"/> 均不是 null，且 <paramref name="a"/> 和 <paramref name="b"/> 不是同一委托类型的实例。 </exception>
<exception cref="T:System.MethodAccessException">应用程序代码尝试访问此成员后期绑定，例如，通过使用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])"/> 方法。 </exception>
    </member>
    <member name="M:System.Delegate.CombineImpl(System.Delegate)">
<summary>将指定的委托与当前委托的调用列表连接起来。</summary>
<returns>新的委托，其调用列表将当前委托的调用列表和 <paramref name="d"/> 的调用列表连接在一起；或者如果 <paramref name="d"/> 为 null，则返回当前委托。</returns>
<param name="d">委托，它的调用列表要与当前委托的调用列表合并。 </param>
<exception cref="T:System.MulticastNotSupportedException">在所有情况下。 </exception>
<exception cref="T:System.MethodAccessException">应用程序代码尝试访问此成员后期绑定，例如，通过使用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])"/> 方法。 </exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo)">
<summary>使用指定的第一个参数创建指定类型的委托，该委托表示指定的静态方法或实例方法。</summary>
<returns>指定类型的委托，表示指定的静态或实例方法。 </returns>
<param name="type">要创建的委托的类型。 </param>
<param name="firstArgument">委托要绑定到的对象，或为 null，后者表示将 <paramref name="method"/> 视为静态（在 Visual Basic 中为 Shared）。 </param>
<param name="method">委托要表示的静态或实例方法。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="type"/> 为 null。-或- <paramref name="method"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="type"/> 不继承 <see cref="T:System.MulticastDelegate"/>。-或- <paramref name="type"/> 不是 RuntimeType。请参阅“反射中的运行库类型”。-或- 无法绑定 <paramref name="method"/>。-或- <paramref name="method"/> 不是 RuntimeMethodInfo。请参阅“反射中的运行库类型”。</exception>
<exception cref="T:System.MissingMethodException">找不到 <paramref name="type"/> 的 Invoke 方法。 </exception>
<exception cref="T:System.MethodAccessException">调用方无权访问 <paramref name="method"/>。-或- 应用程序代码尝试访问此成员后期绑定，例如，通过使用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])"/> 方法。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)">
<summary>使用指定的第一个参数和针对绑定失败的指定行为，创建表示指定的静态方法或实例方法的指定类型的委托。</summary>
<returns>表示指定的静态方法或实例方法的指定类型的委托，如果 <paramref name="throwOnBindFailure"/> 为 false，并且委托无法绑定到 <paramref name="method"/>，则为 null。 </returns>
<param name="type">一个类型，表示要创建的委托的类型。 </param>
<param name="firstArgument">委托所表示的方法的第一个参数。对于实例方法，它必须与实例类型兼容。 </param>
<param name="method">委托要表示的静态或实例方法。</param>
<param name="throwOnBindFailure">如果为 true，则表示在找不到 <paramref name="method"/> 时引发异常；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="type"/> 为 null。-或- <paramref name="method"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="type"/> 不继承 <see cref="T:System.MulticastDelegate"/>。-或- <paramref name="type"/> 不是 RuntimeType。请参阅“反射中的运行库类型”。-或- 无法绑定 <paramref name="method"/> 并且 <paramref name="throwOnBindFailure"/> 为 true。-或- <paramref name="method"/> 不是 RuntimeMethodInf。请参阅“反射中的运行库类型”。</exception>
<exception cref="T:System.MissingMethodException">找不到 <paramref name="type"/> 的 Invoke 方法。 </exception>
<exception cref="T:System.MethodAccessException">调用方无权访问 <paramref name="method"/>。-或- 应用程序代码尝试访问此成员后期绑定，例如，通过使用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])"/> 方法。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String)">
<summary>创建指定类型的委托，该委托表示要对指定的类实例调用的指定实例方法。</summary>
<returns>指定的类型的委托，表示要对指定的类实例调用的指定的实例方法。</returns>
<param name="type">要创建的委托的类型。 </param>
<param name="target">类实例，对其调用 <paramref name="method"/>。 </param>
<param name="method">委托要表示的实例方法的名称。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="type"/> 为 null。-或-<paramref name="target"/> 为 null。-或-<paramref name="method"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="type"/> 不继承 <see cref="T:System.MulticastDelegate"/>。-或- <paramref name="type"/> 不是 RuntimeType。请参阅“反射中的运行库类型”。-或- <paramref name="method"/> 不是实例方法。-或- 无法绑定 <paramref name="method"/>，因为找不到它（举例来说）。</exception>
<exception cref="T:System.MissingMethodException">找不到 <paramref name="type"/> 的 Invoke 方法。 </exception>
<exception cref="T:System.MethodAccessException">调用方无权访问 <paramref name="method"/>。-或- 应用程序代码尝试访问此成员后期绑定，例如，通过使用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])"/> 方法。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean)">
<summary>创建指定类型的委托，该委托表示要按指定的大小写敏感度对指定类实例调用的指定实例方法。</summary>
<returns>指定的类型的委托，表示要对指定的类实例调用的指定的实例方法。</returns>
<param name="type">要创建的委托的类型。 </param>
<param name="target">类实例，对其调用 <paramref name="method"/>。 </param>
<param name="method">委托要表示的实例方法的名称。 </param>
<param name="ignoreCase">如果为 true，则在比较方法的名称时忽略大小写；否则为 false。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="type"/> 为 null。-或-<paramref name="target"/> 为 null。-或-<paramref name="method"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="type"/> 不继承 <see cref="T:System.MulticastDelegate"/>。-或- <paramref name="type"/> 不是 RuntimeType。请参阅“反射中的运行库类型”。-或- <paramref name="method"/> 不是实例方法。-或- 无法绑定 <paramref name="method"/>，因为找不到它（举例来说）。</exception>
<exception cref="T:System.MissingMethodException">找不到 <paramref name="type"/> 的 Invoke 方法。 </exception>
<exception cref="T:System.MethodAccessException">调用方无权访问 <paramref name="method"/>。-或- 应用程序代码尝试访问此成员后期绑定，例如，通过使用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])"/> 方法。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean,System.Boolean)">
<summary>使用用于指定是否区分大小写的值和针对绑定失败的指定行为，创建指定类型的委托，该委托表示要对指定类实例调用的指定实例方法。</summary>
<returns>指定的类型的委托，表示要对指定的类实例调用的指定的实例方法。</returns>
<param name="type">要创建的委托的类型。 </param>
<param name="target">类实例，对其调用 <paramref name="method"/>。 </param>
<param name="method">委托要表示的实例方法的名称。 </param>
<param name="ignoreCase">如果为 true，则在比较方法的名称时忽略大小写；否则为 false。 </param>
<param name="throwOnBindFailure">如果为 true，则表示在找不到 <paramref name="method"/> 时引发异常；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="type"/> 为 null。-或-<paramref name="target"/> 为 null。-或-<paramref name="method"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="type"/> 不继承 <see cref="T:System.MulticastDelegate"/>。-或- <paramref name="type"/> 不是 RuntimeType。请参阅“反射中的运行库类型”。-或- <paramref name="method"/> 不是实例方法。-或- 无法绑定 <paramref name="method"/>，因为找不到它（举例来说）并且 <paramref name="throwOnBindFailure"/> 为 true。</exception>
<exception cref="T:System.MissingMethodException">找不到 <paramref name="type"/> 的 Invoke 方法。 </exception>
<exception cref="T:System.MethodAccessException">调用方无权访问 <paramref name="method"/>。-或- 应用程序代码尝试访问此成员后期绑定，例如，通过使用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])"/> 方法。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo)">
<summary>创建指定类型的委托以表示指定的静态方法。</summary>
<returns>表示指定静态方法的指定类型的委托。</returns>
<param name="type">要创建的委托的类型。 </param>
<param name="method">委托要表示的静态或实例方法。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="type"/> 为 null。-或- <paramref name="method"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="type"/> 不继承 <see cref="T:System.MulticastDelegate"/>。-或- <paramref name="type"/> 不是 RuntimeType。请参阅“反射中的运行库类型”。-或- 无法绑定 <paramref name="method"/>。-或- <paramref name="method"/> 不是 RuntimeMethodInfo。请参阅“反射中的运行库类型”。</exception>
<exception cref="T:System.MissingMethodException">找不到 <paramref name="type"/> 的 Invoke 方法。 </exception>
<exception cref="T:System.MethodAccessException">调用方无权访问 <paramref name="method"/>。-或- 应用程序代码尝试访问此成员后期绑定，例如，通过使用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])"/> 方法。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo,System.Boolean)">
<summary>使用针对绑定失败的指定行为，创建用于表示指定静态方法的指定类型的委托。</summary>
<returns>表示指定静态方法的指定类型的委托。</returns>
<param name="type">要创建的委托的类型。 </param>
<param name="method">委托要表示的静态或实例方法。</param>
<param name="throwOnBindFailure">如果为 true，则表示在找不到 <paramref name="method"/> 时引发异常；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="type"/> 为 null。-或- <paramref name="method"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="type"/> 不继承 <see cref="T:System.MulticastDelegate"/>。-或- <paramref name="type"/> 不是 RuntimeType。请参阅“反射中的运行库类型”。-或- 无法绑定 <paramref name="method"/> 并且 <paramref name="throwOnBindFailure"/> 为 true。-或- <paramref name="method"/> 不是 RuntimeMethodInf。请参阅“反射中的运行库类型”。</exception>
<exception cref="T:System.MissingMethodException">找不到 <paramref name="type"/> 的 Invoke 方法。 </exception>
<exception cref="T:System.MethodAccessException">调用方无权访问 <paramref name="method"/>。-或- 应用程序代码尝试访问此成员后期绑定，例如，通过使用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])"/> 方法。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String)">
<summary>创建指定类型的委托，该委托表示指定类的指定静态方法。</summary>
<returns>指定类型的委托，该委托表示指定类的指定静态方法。</returns>
<param name="type">要创建的委托的类型。 </param>
<param name="target">实现 <paramref name="method"/> 的类。 </param>
<param name="method">委托要表示的静态方法的名称。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="type"/> 为 null。-或-<paramref name="target"/> 为 null。-或-<paramref name="method"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="type"/> 不继承 <see cref="T:System.MulticastDelegate"/>。-或- <paramref name="type"/> 不是 RuntimeType。请参阅“反射中的运行库类型”。-或- <paramref name="target"/> 不是 RuntimeType。-或- <paramref name="target"/> 为开放泛型类型。也就是说，其 <see cref="P:System.Type.ContainsGenericParameters"/> 属性必须为 true。-或- <paramref name="method"/> 不是静态方法（在 Visual Basic 中为 Shared 方法）。-或- 无法绑定 <paramref name="method"/>，因为找不到它（举例来说）并且 <paramref name="throwOnBindFailure"/> 为 true。</exception>
<exception cref="T:System.MissingMethodException">找不到 <paramref name="type"/> 的 Invoke 方法。 </exception>
<exception cref="T:System.MethodAccessException">调用方无权访问 <paramref name="method"/>。-或- 应用程序代码尝试访问此成员后期绑定，例如，通过使用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])"/> 方法。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean)">
<summary>使用用于指定是否区分大小写的值创建指定类型的委托，该委托表示指定类的指定静态方法。</summary>
<returns>指定类型的委托，该委托表示指定类的指定静态方法。</returns>
<param name="type">要创建的委托的类型。 </param>
<param name="target">实现 <paramref name="method"/> 的类。 </param>
<param name="method">委托要表示的静态方法的名称。 </param>
<param name="ignoreCase">如果为 true，则在比较方法的名称时忽略大小写；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="type"/> 为 null。-或-<paramref name="target"/> 为 null。-或-<paramref name="method"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="type"/> 不继承 <see cref="T:System.MulticastDelegate"/>。-或- <paramref name="type"/> 不是 RuntimeType。请参阅“反射中的运行库类型”。-或- <paramref name="target"/> 不是 RuntimeType。-或- <paramref name="target"/> 为开放泛型类型。也就是说，其 <see cref="P:System.Type.ContainsGenericParameters"/> 属性必须为 true。-或- <paramref name="method"/> 不是静态方法（在 Visual Basic 中为 Shared 方法）。-或- 无法绑定 <paramref name="method"/>，因为找不到它（举例来说）。</exception>
<exception cref="T:System.MissingMethodException">找不到 <paramref name="type"/> 的 Invoke 方法。 </exception>
<exception cref="T:System.MethodAccessException">调用方无权访问 <paramref name="method"/>。-或- 应用程序代码尝试访问此成员后期绑定，例如，通过使用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])"/> 方法。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean,System.Boolean)">
<summary>使用用于指定是否区分大小写的值和针对绑定失败的指定行为，创建指定类型的委托，该委托表示指定类的指定静态方法。</summary>
<returns>指定类型的委托，该委托表示指定类的指定静态方法。</returns>
<param name="type">要创建的委托的类型。 </param>
<param name="target">实现 <paramref name="method"/> 的类。 </param>
<param name="method">委托要表示的静态方法的名称。 </param>
<param name="ignoreCase">如果为 true，则在比较方法的名称时忽略大小写；否则为 false。</param>
<param name="throwOnBindFailure">如果为 true，则表示在找不到 <paramref name="method"/> 时引发异常；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="type"/> 为 null。-或-<paramref name="target"/> 为 null。-或-<paramref name="method"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="type"/> 不继承 <see cref="T:System.MulticastDelegate"/>。-或- <paramref name="type"/> 不是 RuntimeType。请参阅“反射中的运行库类型”。-或- <paramref name="target"/> 不是 RuntimeType。-或- <paramref name="target"/> 为开放泛型类型。也就是说，其 <see cref="P:System.Type.ContainsGenericParameters"/> 属性必须为 true。-或- <paramref name="method"/> 不是静态方法（在 Visual Basic 中为 Shared 方法）。-或- 无法绑定 <paramref name="method"/>，因为找不到它（举例来说）并且 <paramref name="throwOnBindFailure"/> 为 true。 </exception>
<exception cref="T:System.MissingMethodException">找不到 <paramref name="type"/> 的 Invoke 方法。 </exception>
<exception cref="T:System.MethodAccessException">调用方无权访问 <paramref name="method"/>。-或- 应用程序代码尝试访问此成员后期绑定，例如，通过使用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])"/> 方法。</exception>
    </member>
    <member name="M:System.Delegate.DynamicInvoke(System.Object[])">
<summary>动态调用（后期绑定）由当前委托所表示的方法。</summary>
<returns>委托所表示的方法返回的对象。</returns>
<param name="args">作为参数传递给当前委托所表示的方法的对象数组。-或- 如果当前委托所表示的方法不需要参数，则为空引用（在 Visual Basic 中为 Nothing）。 </param>
<exception cref="T:System.MemberAccessException">调用方不能访问委托所表示的方法（例如，当该方法为私有时）。-或- <paramref name="args"/> 中列出的参数的数目、顺序或类型无效。 </exception>
<exception cref="T:System.Reflection.TargetException">委托所表示的方法是实例方法，目标对象为 null。-或- 对对象或类调用委托所表示的方法不受该对象或类不支持。 </exception>
<exception cref="T:System.Reflection.TargetInvocationException">封装的方法之一引发异常。 </exception>
<exception cref="T:System.MethodAccessException">应用程序代码尝试访问此成员后期绑定，例如，通过使用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])"/> 方法。 </exception>
    </member>
    <member name="M:System.Delegate.Equals(System.Object)">
<summary>确定指定的对象和当前委托的类型是否相同，是否共享相同的目标、方法和调用列表。</summary>
<returns>如果 <paramref name="obj"/> 和当前委托有相同的目标、方法和调用列表，则为 true；否则为 false。</returns>
<param name="obj">要与当前委托进行比较的对象。 </param>
<exception cref="T:System.MemberAccessException">调用方不能访问委托所表示的方法（例如，当该方法为私有时）。 </exception>
<exception cref="T:System.MethodAccessException">应用程序代码尝试访问此成员后期绑定，例如，通过使用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])"/> 方法。 </exception>
    </member>
    <member name="M:System.Delegate.GetHashCode">
<summary>返回委托的哈希代码。</summary>
<returns>委托的哈希代码。</returns>
<exception cref="T:System.MethodAccessException">应用程序代码尝试访问此成员后期绑定，例如，通过使用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])"/> 方法。 </exception>
    </member>
    <member name="M:System.Delegate.GetInvocationList">
<summary>返回委托的调用列表。</summary>
<returns>委托构成的数组，表示当前委托的调用列表。</returns>
<exception cref="T:System.MethodAccessException">应用程序代码尝试访问此成员后期绑定，例如，通过使用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])"/> 方法。 </exception>
    </member>
    <member name="P:System.Delegate.Method">
<summary>获取委托所表示的方法。</summary>
<returns>描述委托所表示的方法的 <see cref="T:System.Reflection.MethodInfo"/>。</returns>
<exception cref="T:System.MemberAccessException">调用方不能访问委托所表示的方法（例如，当该方法为私有时）。 </exception>
<exception cref="T:System.MethodAccessException">应用程序代码尝试访问此成员后期绑定，例如，通过使用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])"/> 方法。 </exception>
    </member>
    <member name="M:System.Delegate.op_Equality(System.Delegate,System.Delegate)">
<summary>确定指定的委托是否相等。</summary>
<returns>如果 <paramref name="d1"/> 等于 <paramref name="d2"/>，则为 true；否则为 false。</returns>
<param name="d1">要比较的第一个委托。 </param>
<param name="d2">要比较的第二个委托。 </param>
<exception cref="T:System.MethodAccessException">应用程序代码尝试访问此成员后期绑定，例如，通过使用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])"/> 方法。 </exception>
    </member>
    <member name="M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)">
<summary>确定指定的委托是否相等。</summary>
<returns>如果 <paramref name="d1"/> 不等于 <paramref name="d2"/>，则为 true；否则为 false。</returns>
<param name="d1">要比较的第一个委托。 </param>
<param name="d2">要比较的第二个委托。 </param>
<exception cref="T:System.MethodAccessException">应用程序代码尝试访问此成员后期绑定，例如，通过使用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])"/> 方法。 </exception>
    </member>
    <member name="M:System.Delegate.Remove(System.Delegate,System.Delegate)">
<summary>从一个委托的调用列表中移除另一个委托的最后一个调用列表。</summary>
<returns>一个新委托，其调用列表的构成方法为：获取 <paramref name="source"/> 的调用列表，如果在 <paramref name="source"/> 的调用列表中找到了 <paramref name="value"/> 的调用列表，则从中移除 <paramref name="value"/> 的最后一个调用列表。如果 <paramref name="value"/> 为 null，或在 <paramref name="source"/> 的调用列表中没有找到 <paramref name="value"/> 的调用列表，则返回 <paramref name="source"/>。如果 <paramref name="value"/> 的调用列表等于 <paramref name="source"/> 的调用列表，或 <paramref name="source"/> 为空引用，则返回空引用。</returns>
<param name="source">要从中移除 <paramref name="value"/> 的调用列表的委托。 </param>
<param name="value">委托，它提供要从其中移除 <paramref name="source"/> 的调用列表的调用列表。 </param>
<exception cref="T:System.MemberAccessException">调用方不能访问委托所表示的方法（例如，当该方法为私有时）。 </exception>
<exception cref="T:System.ArgumentException">委托类型不匹配。</exception>
<exception cref="T:System.MethodAccessException">应用程序代码尝试访问此成员后期绑定，例如，通过使用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])"/> 方法。 </exception>
    </member>
    <member name="M:System.Delegate.RemoveImpl(System.Delegate)">
<summary>从一个委托的调用列表中移除另一个委托的调用列表。</summary>
<returns>一个新委托，其调用列表的构成方法为：获取当前委托的调用列表，如果在当前委托的调用列表中找到了 <paramref name="value"/> 的调用列表，则从中移除 <paramref name="value"/> 的调用列表。如果 <paramref name="value"/> 为 null，或者在当前委托的调用列表中没有找到 <paramref name="value"/> 的调用列表，则返回当前委托。如果 <paramref name="value"/> 的调用列表等于当前委托的调用列表，则返回 null。</returns>
<param name="d">委托，它提供要从当前委托的调用列表中移除的调用列表。 </param>
<exception cref="T:System.MemberAccessException">调用方不能访问委托所表示的方法（例如，当该方法为私有时）。 </exception>
<exception cref="T:System.MethodAccessException">应用程序代码尝试访问此成员后期绑定，例如，通过使用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])"/> 方法。 </exception>
    </member>
    <member name="P:System.Delegate.Target">
<summary>获取类实例，当前委托将对其调用实例方法。</summary>
<returns>如果委托表示实例方法，则为当前委托对其调用实例方法的对象；如果委托表示静态方法，则为 null。</returns>
<exception cref="T:System.MethodAccessException">应用程序代码尝试访问此成员后期绑定，例如，通过使用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])"/> 方法。 </exception>
    </member>
    <member name="T:System.DivideByZeroException">
<summary>试图用零除整数值或十进制数值时引发的异常。</summary>
    </member>
    <member name="M:System.DivideByZeroException.#ctor">
<summary>初始化 <see cref="T:System.DivideByZeroException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.DivideByZeroException"/> 类的新实例。</summary>
<param name="message">描述该错误的 <see cref="T:System.String"/>。 </param>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.DivideByZeroException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不是 null 引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。 </param>
    </member>
    <member name="T:System.DllNotFoundException">
<summary>当无法找到 DLL 导入中指定的 DLL 时引发的异常。</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor">
<summary>使用默认属性初始化 <see cref="T:System.DllNotFoundException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.DllNotFoundException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.DllNotFoundException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="inner">导致当前异常的异常。如果 <paramref name="inner"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="T:System.Double">
<summary>表示双精度浮点数。</summary>
    </member>
    <member name="M:System.Double.CompareTo(System.Double)">
<summary>将此实例与指定的双精度浮点数进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于指定双精度浮点数的值。</summary>
<returns>有符号数字，指示此实例和 <paramref name="value"/> 的相对值。返回值 描述 小于零 此实例小于 <paramref name="value"/>。-或- 此实例不是数字 (<see cref="F:System.Double.NaN"/>) 而 <paramref name="value"/> 是数字。零 此实例等于 <paramref name="value"/>。-或- 此实例和 <paramref name="value"/> 都不是数字 (<see cref="F:System.Double.NaN"/>)、<see cref="F:System.Double.PositiveInfinity"/> 或 <see cref="F:System.Double.NegativeInfinity"/>。大于零 此实例大于 <paramref name="value"/>。-或- 此实例是数字，而 <paramref name="value"/> 不是数字 (<see cref="F:System.Double.NaN"/>)。 </returns>
<param name="value">要比较的双精度浮点数。 </param>
    </member>
    <member name="M:System.Double.CompareTo(System.Object)">
<summary>将此实例与指定对象进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于指定对象的值。</summary>
<returns>有符号数字，指示此实例和 <paramref name="value"/> 的相对值。值 描述 负整数 此实例小于 <paramref name="value"/>。-或- 此实例不是数字 (<see cref="F:System.Double.NaN"/>) 而 <paramref name="value"/> 是数字。零 此实例等于 <paramref name="value"/>。-或- 此实例和 <paramref name="value"/> 都是 Double.NaN、<see cref="F:System.Double.PositiveInfinity"/> 或 <see cref="F:System.Double.NegativeInfinity"/> 正整数 此实例大于 <paramref name="value"/>。-或- 此实例是数字，而 <paramref name="value"/> 不是数字 (<see cref="F:System.Double.NaN"/>)。-或- <paramref name="value"/> 为 null。 </returns>
<param name="value">要比较的对象，或为 null。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="value"/> 不是 <see cref="T:System.Double"/>。 </exception>
    </member>
    <member name="F:System.Double.Epsilon">
<summary>表示大于零的最小正 <see cref="T:System.Double"/> 值。此字段为常量。</summary>
    </member>
    <member name="M:System.Double.Equals(System.Double)">
<summary>返回一个值，该值指示此实例和指定的 <see cref="T:System.Double"/> 对象是否表示相同的值。</summary>
<returns>如果 <paramref name="obj"/> 等于此实例，则为 true；否则为 false。</returns>
<param name="obj">要与此实例进行比较的 <see cref="T:System.Double"/> 对象。</param>
    </member>
    <member name="M:System.Double.Equals(System.Object)">
<summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
<returns>如果 <paramref name="obj"/> 是 <see cref="T:System.Double"/> 的实例并且等于此实例的值，则为 true；否则为 false。</returns>
<param name="obj">与此实例进行比较的对象。 </param>
    </member>
    <member name="M:System.Double.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Double.GetTypeCode">
<summary>返回值类型 <see cref="T:System.Double"/> 的 <see cref="T:System.TypeCode"/>。</summary>
<returns>枚举常数 <see cref="F:System.TypeCode.Double"/>。</returns>
    </member>
    <member name="M:System.Double.IsInfinity(System.Double)">
<summary>返回一个值，该值指示指定数字是计算为负无穷大还是正无穷大。 </summary>
<returns>如果 <paramref name="d"/> 的计算结果为 <see cref="F:System.Double.PositiveInfinity"/> 或 <see cref="F:System.Double.NegativeInfinity"/>，则为 true；否则为 false。</returns>
<param name="d">双精度浮点数。 </param>
    </member>
    <member name="M:System.Double.IsNaN(System.Double)">
<summary>返回一个值，该值指示指定数字的计算结果是否为不是数字 (<see cref="F:System.Double.NaN"/>) 的值。</summary>
<returns>如果 <paramref name="d"/> 的计算结果为 <see cref="F:System.Double.NaN"/>，则为 true；否则为 false。</returns>
<param name="d">双精度浮点数。 </param>
    </member>
    <member name="M:System.Double.IsNegativeInfinity(System.Double)">
<summary>返回一个值，该值指示指定数字是否计算为负无穷大。</summary>
<returns>如果 <paramref name="d"/> 的计算结果为 <see cref="F:System.Double.NegativeInfinity"/>，则为 true；否则为 false。</returns>
<param name="d">双精度浮点数。 </param>
    </member>
    <member name="M:System.Double.IsPositiveInfinity(System.Double)">
<summary>返回一个值，该值指示指定数字是否计算为正无穷大。</summary>
<returns>如果 <paramref name="d"/> 的计算结果为 <see cref="F:System.Double.PositiveInfinity"/>，则为 true；否则为 false。</returns>
<param name="d">双精度浮点数。 </param>
    </member>
    <member name="F:System.Double.MaxValue">
<summary>表示 <see cref="T:System.Double"/> 的最大可能值。此字段为常量。</summary>
    </member>
    <member name="F:System.Double.MinValue">
<summary>表示 <see cref="T:System.Double"/> 的最小可能值。此字段为常量。</summary>
    </member>
    <member name="F:System.Double.NaN">
<summary>表示不是数字 (NaN) 的值。此字段为常量。</summary>
    </member>
    <member name="F:System.Double.NegativeInfinity">
<summary>表示负无穷。此字段为常量。</summary>
    </member>
    <member name="M:System.Double.Parse(System.String)">
<summary>将数字的字符串表示形式转换为它的等效双精度浮点数。</summary>
<returns>与 <paramref name="s"/> 中指定的数值或符号等效的双精度浮点数。</returns>
<param name="s">包含要转换的数字的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 不表示一个有效格式的数字。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.Double.MinValue"/> 或大于 <see cref="F:System.Double.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
<summary>将指定样式的数字的字符串表示形式转换为它的等效双精度浮点数。</summary>
<returns>与 <paramref name="s"/> 中指定的数值或符号等效的双精度浮点数。</returns>
<param name="s">包含要转换的数字的字符串。 </param>
<param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s"/> 中的样式元素。一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Float"/> 和 <see cref="F:System.Globalization.NumberStyles.AllowThousands"/> 的组合。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 不表示一个有效格式的数字。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.Double.MinValue"/> 或大于 <see cref="F:System.Double.MaxValue"/> 的数字。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或- <paramref name="style"/> 包括 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 值。 </exception>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
<summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效双精度浮点数。</summary>
<returns>与 <paramref name="s"/> 中指定的数值或符号等效的双精度浮点数。</returns>
<param name="s">包含要转换的数字的字符串。 </param>
<param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s"/> 中的样式元素。一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Float"/> 与 <see cref="F:System.Globalization.NumberStyles.AllowThousands"/> 的组合。</param>
<param name="provider">一个提供有关 <paramref name="s"/> 的区域性特定的格式设置信息的对象。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 不代表数字值。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或- <paramref name="style"/> 为 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 值。</exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.Double.MinValue"/> 或大于 <see cref="F:System.Double.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Double.Parse(System.String,System.IFormatProvider)">
<summary>将指定的区域性特定格式的数字的字符串表示形式转换为它的等效双精度浮点数。</summary>
<returns>与 <paramref name="s"/> 中指定的数值或符号等效的双精度浮点数。</returns>
<param name="s">包含要转换的数字的字符串。 </param>
<param name="provider">一个提供有关 <paramref name="s"/> 的区域性特定的格式设置信息的对象。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 不表示一个有效格式的数字。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.Double.MinValue"/> 或大于 <see cref="F:System.Double.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="F:System.Double.PositiveInfinity">
<summary>表示正无穷。此字段为常量。</summary>
    </member>
    <member name="M:System.Double.System#IConvertible#ToBoolean(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)"/>。 </summary>
<returns>如果当前实例的值不为零，则为 true；否则为 false。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToByte(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Byte"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToChar(System.IFormatProvider)">
<summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException"/>。 </summary>
<returns>不支持此转换。不返回任何值。</returns>
<param name="provider">忽略此参数。</param>
<exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDateTime(System.IFormatProvider)">
<summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>不支持此转换。不返回任何值。</returns>
<param name="provider">忽略此参数。</param>
<exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDecimal(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Decimal"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDouble(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，未更改。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt16(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Int16"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt32(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Int32"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt64(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Int64"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToSByte(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.SByte"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToSingle(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Single"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <paramref name="type"/>。</returns>
<param name="type">要将此 <see cref="T:System.Double"/> 值转换为的类型。</param>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/> 实现，提供有关返回值格式的区域性特定信息。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt16(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.UInt16"/>。</returns>
<param name="provider">忽略此参数。 </param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt32(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.UInt32"/>。</returns>
<param name="provider">忽略此参数。   </param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt64(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.UInt64"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Double.ToString">
<summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
<returns>此实例的值的字符串表示。</returns>
    </member>
    <member name="M:System.Double.ToString(System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由 <paramref name="provider"/> 指定。</returns>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/>，它提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.Double.ToString(System.String)">
<summary>使用指定的格式，将此实例的数值转换为它的等效字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由 <paramref name="format"/> 指定。</returns>
<param name="format">标准或自定义的数值格式字符串（请参阅“备注”）。</param>
      <exception cref="T:System.FormatException">
<paramref name="format"/> 无效。 </exception>
    </member>
    <member name="M:System.Double.ToString(System.String,System.IFormatProvider)">
<summary>使用指定的格式和区域性特定格式设置信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由 <paramref name="format"/> 和 <paramref name="provider"/> 指定。</returns>
<param name="format">标准或自定义的数值格式字符串（请参阅“备注”）。</param>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/>，它提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Double@)">
<summary>将数字的字符串表示形式转换为它的等效双精度浮点数。一个指示转换是否成功的返回值。</summary>
<returns>如果成功转换了 <paramref name="s"/>，则为 true；否则为 false。</returns>
<param name="s">包含要转换的数字的字符串。 </param>
<param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s"/> 参数等效的双精度浮点数；如果转换失败，则包含零。如果 <paramref name="s"/> 参数为 null，不是有效格式的数字或者表示的数字小于 <see cref="F:System.Double.MinValue"/> 或大于 <see cref="F:System.Double.MaxValue"/>，则转换将失败。该参数未经初始化即被传递。 </param>
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
<summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效双精度浮点数。一个指示转换是否成功的返回值。</summary>
<returns>如果成功转换了 <paramref name="s"/>，则为 true；否则为 false。</returns>
<param name="s">包含要转换的数字的字符串。 </param>
<param name="style"><see cref="T:System.Globalization.NumberStyles"/> 值的按位组合，指示 <paramref name="s"/> 允许使用的格式。一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Float"/> 与 <see cref="F:System.Globalization.NumberStyles.AllowThousands"/> 的组合。</param>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/>，它提供有关 <paramref name="s"/> 的区域性特定格式设置信息。 </param>
<param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s"/> 中所包含的数值或符号等效的双精度浮点数；如果转换失败，则包含零。如果 <paramref name="s"/> 参数为 null，其格式不符合 <paramref name="style"/>，表示的数字小于 <see cref="F:System.SByte.MinValue"/> 或大于 <see cref="F:System.SByte.MaxValue"/>，或者 <paramref name="style"/> 不是 <see cref="T:System.Globalization.NumberStyles"/> 枚举的常数的有效组合，则转换失败。该参数未经初始化即被传递。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或- <paramref name="style"/> 包括 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 值。</exception>
    </member>
    <member name="T:System.EntryPointNotFoundException">
<summary>当加载类的尝试由于缺少入口方法而失败时引发的异常。</summary>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor">
<summary>初始化 <see cref="T:System.EntryPointNotFoundException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.EntryPointNotFoundException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.EntryPointNotFoundException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="inner">导致当前异常的异常。如果 <paramref name="inner"/> 参数不是 null 引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。 </param>
    </member>
    <member name="T:System.Enum">
<summary>为枚举提供基类。</summary>
    </member>
    <member name="M:System.Enum.#ctor">
<summary>初始化 <see cref="T:System.Enum"/> 类的新实例。 </summary>
    </member>
    <member name="M:System.Enum.CompareTo(System.Object)">
<summary>将此实例与指定对象进行比较并返回一个对二者的相对值的指示。</summary>
<returns>有符号数字，指示此实例与 <paramref name="target"/> 的关系。返回值 描述 小于零 此实例的值小于 <paramref name="target"/> 的值。零 此实例的值等于 <paramref name="target"/> 的值。大于零 此实例的值大于 <paramref name="target"/> 的值。-或- <paramref name="target"/> 为 null。 </returns>
<param name="target">要比较的对象，或为 null。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="target"/> 与此实例不是同一类型。 </exception>
<exception cref="T:System.InvalidOperationException">此实例不是 <see cref="T:System.SByte"/>、<see cref="T:System.Int16"/>、<see cref="T:System.Int32"/>、<see cref="T:System.Int64"/>、<see cref="T:System.Byte"/>、<see cref="T:System.UInt16"/>、<see cref="T:System.UInt32"/> 或 <see cref="T:System.UInt64"/> 类型。 </exception>
<exception cref="T:System.NullReferenceException">此实例为 null。</exception>
    </member>
    <member name="M:System.Enum.Equals(System.Object)">
<summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
<returns>如果 <paramref name="obj"/> 是具有与此实例相同的基础类型和值的 <see cref="T:System.Enum"/>，则为 true；否则为 false。</returns>
<param name="obj">要与此实例比较的对象，或 null。 </param>
    </member>
    <member name="M:System.Enum.GetHashCode">
<summary>返回此实例的值的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Enum.GetName(System.Type,System.Object)">
<summary>在指定枚举中检索具有指定值的常数的名称。</summary>
<returns>一个字符串，该字符串包含 <paramref name="enumType"/> 的枚举常量的名称，该常量的值为 <paramref name="value"/>；如果没有找到这样的常量，则为 null。</returns>
<param name="enumType">枚举类型。</param>
<param name="value">特定枚举常量的基础类型的值。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="enumType"/> 或 <paramref name="value"/> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="enumType"/> 不是 <see cref="T:System.Enum"/>。-或-<paramref name="value"/> 既不是 <paramref name="enumType"/> 类型，也没有与 <paramref name="enumType"/> 相同的基础类型。</exception>
    </member>
    <member name="M:System.Enum.GetTypeCode">
<summary>返回此实例的基础 <see cref="T:System.TypeCode"/>。</summary>
<returns>此实例的 <see cref="T:System.TypeCode"/>。</returns>
<exception cref="T:System.InvalidOperationException">枚举类型未知。</exception>
    </member>
    <member name="M:System.Enum.GetUnderlyingType(System.Type)">
<summary>返回指定枚举的基础类型。</summary>
<returns><paramref name="enumType"/> 的基础 <see cref="T:System.Type"/>。</returns>
<param name="enumType">枚举类型。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="enumType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="enumType"/> 不是 <see cref="T:System.Enum"/>。 </exception>
    </member>
    <member name="M:System.Enum.HasFlag(System.Enum)">
<summary>确定当前实例中是否设置了一个或多个位域。</summary>
<returns>如果在 <paramref name="flag"/> 中设置的位域也在当前实例中进行了设置，则为 true；否则为 false。</returns>
<param name="flag">一个枚举值。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="flag"/> 具有与当前实例不同的类型。</exception>
    </member>
    <member name="M:System.Enum.IsDefined(System.Type,System.Object)">
<summary>返回指定枚举中是否存在具有指定值的常数的指示。</summary>
<returns>如果 <paramref name="enumType"/> 的某个常数具有等于 <paramref name="value"/> 的值，则为 true；否则为 false。</returns>
<param name="enumType">枚举类型。 </param>
<param name="value"><paramref name="enumType"/> 的常数的值或名称。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="enumType"/> 或 <paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="enumType"/> 不是 Enum。-或- <paramref name="value"/> 的类型不是 <paramref name="enumType"/>。-或- <paramref name="value"/> 的类型不是 <paramref name="enumType"/> 的基础类型。 </exception>
      <exception cref="T:System.InvalidOperationException">
<paramref name="value"/> 不是 <see cref="T:System.SByte"/>、<see cref="T:System.Int16"/>、<see cref="T:System.Int32"/>、<see cref="T:System.Int64"/>、<see cref="T:System.Byte"/>、<see cref="T:System.UInt16"/>、<see cref="T:System.UInt32"/>、<see cref="T:System.UInt64"/> 或 <see cref="T:System.String"/> 类型。 </exception>
    </member>
    <member name="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
<summary>将一个或多个枚举常数的名称或数值的字符串表示形式转换成等效的枚举对象。参数指定该操作是否区分大小写。</summary>
<returns><paramref name="enumType"/> 类型的对象，其值由 <paramref name="value"/> 表示。</returns>
<param name="enumType">枚举的 <see cref="T:System.Type"/>。 </param>
<param name="value">包含要转换的值或名称的字符串。 </param>
<param name="ignoreCase">如果为 true，则忽略大小写；否则考虑大小写。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="enumType"/> 或 <paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="enumType"/> 不是 <see cref="T:System.Enum"/>。-或- <paramref name="value"/> 是空字符串 ("") 或只包含空白。-或- <paramref name="value"/> 是一个名称，但不是为该枚举定义的命名常量之一。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 超出 <paramref name="enumType"/> 基础类型的范围。</exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)">
<summary>根据基础类型将当前值转换为布尔值。</summary>
<returns>此成员总是引发异常。</returns>
<param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
<exception cref="T:System.InvalidCastException">在所有情况下。 </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)">
<summary>根据基础类型将当前值转换为 8 位无符号整数。</summary>
<returns>转换后的值。</returns>
<param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)">
<summary>根据基础类型将当前值转换为 Unicode 字符。</summary>
<returns>此成员总是引发异常。</returns>
<param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
<exception cref="T:System.InvalidCastException">在所有情况下。 </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)">
<summary>根据基础类型将当前值转换为 <see cref="T:System.DateTime"/>。</summary>
<returns>此成员总是引发异常。</returns>
<param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
<exception cref="T:System.InvalidCastException">在所有情况下。 </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)">
<summary>根据基础类型将当前值转换为 <see cref="T:System.Decimal"/>。</summary>
<returns>此成员总是引发异常。</returns>
<param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
<exception cref="T:System.InvalidCastException">在所有情况下。 </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)">
<summary>根据基础类型将当前值转换为双精度浮点数。</summary>
<returns>此成员总是引发异常。</returns>
<param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
<exception cref="T:System.InvalidCastException">在所有情况下。 </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)">
<summary>根据基础类型将当前值转换为 16 位带符号整数。</summary>
<returns>转换后的值。</returns>
<param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)">
<summary>根据基础类型将当前值转换为 32 位带符号整数。</summary>
<returns>转换后的值。</returns>
<param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)">
<summary>根据基础类型将当前值转换为 64 位带符号整数。</summary>
<returns>转换后的值。</returns>
<param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)">
<summary>根据基础类型将当前值转换为 8 位带符号整数。</summary>
<returns>转换后的值。</returns>
<param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)">
<summary>根据基础类型将当前值转换为单精度浮点数。</summary>
<returns>此成员总是引发异常。</returns>
<param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
<exception cref="T:System.InvalidCastException">在所有情况下。 </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
<summary>根据基础类型将当前值转换为指定类型。</summary>
<returns>转换后的值。</returns>
<param name="type">要转换到的类型。 </param>
<param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)">
<summary>根据基础类型将当前值转换为 16 位无符号整数。</summary>
<returns>转换后的值。</returns>
<param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)">
<summary>根据基础类型将当前值转换为 32 位无符号整数。</summary>
<returns>转换后的值。</returns>
<param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)">
<summary>根据基础类型将当前值转换为 64 位无符号整数。</summary>
<returns>转换后的值。</returns>
<param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Object)">
<summary>返回设置为指定值的、指定枚举的实例。</summary>
<returns>值为 <paramref name="value"/> 的枚举对象。</returns>
<param name="enumType">一个枚举。 </param>
<param name="value">值。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="enumType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="enumType"/> 不是 <see cref="T:System.Enum"/>。-或- <paramref name="value"/> 不是类型 <see cref="T:System.SByte"/>、<see cref="T:System.Int16"/>、<see cref="T:System.Int32"/>、<see cref="T:System.Int64"/>、<see cref="T:System.Byte"/>、<see cref="T:System.UInt16"/>、<see cref="T:System.UInt32"/> 或 <see cref="T:System.UInt64"/>。 </exception>
    </member>
    <member name="M:System.Enum.ToString">
<summary>将此实例的值转换为其等效的字符串表示形式。</summary>
<returns>此实例的值的字符串表示。</returns>
    </member>
    <member name="M:System.Enum.ToString(System.IFormatProvider)">
<summary>此方法重载已过时；请使用 <see cref="M:System.Enum.ToString"/>。</summary>
<returns>此实例的值的字符串表示。</returns>
<param name="provider">（已过时） </param>
    </member>
    <member name="M:System.Enum.ToString(System.String)">
<summary>使用指定格式将此实例的值转换成其等效的字符串表示。</summary>
<returns>此实例的值的字符串表示形式，由 <paramref name="format"/> 指定。</returns>
<param name="format">格式字符串。 </param>
      <exception cref="T:System.FormatException">
<paramref name="format"/> 包含无效规范。 </exception>
    </member>
    <member name="M:System.Enum.ToString(System.String,System.IFormatProvider)">
<summary>此方法重载已过时；请使用 <see cref="M:System.Enum.ToString(System.String)"/>。</summary>
<returns>此实例的值的字符串表示形式，由 <paramref name="format"/> 指定。</returns>
<param name="format">格式规范。 </param>
<param name="provider">（已过时）</param>
      <exception cref="T:System.FormatException">
<paramref name="format"/> 未包含有效的格式规范。 </exception>
    </member>
    <member name="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
<summary>将一个或多个枚举常数的名称或数值的字符串表示形式转换成等效的枚举对象。参数指定该操作是否区分大小写。用于指示转换是否成功的返回值。</summary>
<returns>如果 <paramref name="value"/> 参数成功转换，则为 true；否则为 false。</returns>
<param name="value">要转换的枚举名称或基础值的字符串表示形式。</param>
<param name="ignoreCase">如果为 true，则忽略大小写；如果为 false，则考虑大小写。</param>
<param name="result">此方法在返回时包含一个类型为 <paramref name="TEnum"/> 的对象，其值由 <paramref name="value"/> 表示。该参数未经初始化即被传递。</param>
<typeparam name="TEnum">要将 <paramref name="value"/> 转换为的枚举类型。</typeparam>
      <exception cref="T:System.ArgumentException">
<paramref name="TEnum"/> 不是枚举类型。</exception>
    </member>
    <member name="M:System.Enum.TryParse``1(System.String,``0@)">
<summary>将一个或多个枚举常数的名称或数值的字符串表示形式转换成等效的枚举对象。用于指示转换是否成功的返回值。</summary>
<returns>如果 <paramref name="value"/> 参数成功转换，则为 true；否则为 false。</returns>
<param name="value">要转换的枚举名称或基础值的字符串表示形式。</param>
<param name="result">此方法在返回时包含一个类型为 <paramref name="TEnum"/> 的对象，其值由 <paramref name="value"/> 表示。该参数未经初始化即被传递。</param>
<typeparam name="TEnum">要将 <paramref name="value"/> 转换为的枚举类型。</typeparam>
      <exception cref="T:System.ArgumentException">
<paramref name="TEnum"/> 不是枚举类型。</exception>
    </member>
    <member name="T:System.Environment">
<summary>提供有关当前环境和平台的信息以及操作它们的方法。无法继承此类。</summary>
    </member>
    <member name="P:System.Environment.CurrentDirectory">
<summary>在由受信任的应用程序调用时，获取当前工作目录的完全限定路径。</summary>
<returns>包含目录路径的字符串。 </returns>
<exception cref="T:System.IO.IOException">发生了 I/O 错误。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有适当的权限。 </exception>
    </member>
    <member name="P:System.Environment.ExitCode">
<summary>获取或设置进程的退出代码。</summary>
<returns>包含退出代码的 32 位带符号整数。默认值为 0。</returns>
    </member>
    <member name="M:System.Environment.FailFast(System.String)">
<summary>[SECURITY CRITICAL] 向 Windows 的应用程序事件日志写入消息后立即终止进程，然后在发往 Microsoft 的错误报告中加入该消息。 </summary>
<param name="message">解释进程终止原因的消息，如果未提供解释则返回 null。 </param>
    </member>
    <member name="M:System.Environment.FailFast(System.String,System.Exception)">
<summary>[SECURITY CRITICAL] 向 Windows 的应用程序事件日志写入消息后立即终止进程，然后在发往 Microsoft 的错误报告中加入该消息和异常信息。</summary>
<param name="message">解释进程终止原因的消息，如果未提供解释则返回 null。</param>
<param name="exception">一个异常，表示导致终止的错误。通常这是 catch 块中的异常。</param>
    </member>
    <member name="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">
<summary>获取指向由指定枚举标识的系统特殊文件夹的路径。</summary>
<returns>如果指定系统的特殊文件夹实际存在于您的计算机上，则为到该文件夹的路径；否则为空字符串 ("")。如果操作系统未创建文件夹、已删除现有文件夹，或者文件夹是不对应物理路径的虚拟目录（例如“我的电脑”），则该文件夹不会实际存在。</returns>
<param name="folder">标识系统特殊文件夹的枚举常数。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="folder"/> 不是 <see cref="T:System.Environment.SpecialFolder"/> 的成员。 </exception>
<exception cref="T:System.PlatformNotSupportedException">当前平台不受支持。</exception>
    </member>
    <member name="P:System.Environment.HasShutdownStarted">
<summary>获取一个值，该值指示是否公共语言运行时正在关闭或者当前的应用程序域正在卸载。</summary>
<returns>如果公共语言运行时正在关闭或者当前的 <see cref="T:System.AppDomain"/> 正在卸载，则为 true；否则为 false。当前的应用程序域为包含正在调用 <see cref="P:System.Environment.HasShutdownStarted"/> 的对象的 <see cref="T:System.AppDomain"/>。</returns>
    </member>
    <member name="P:System.Environment.NewLine">
<summary>获取为此环境定义的换行字符串。</summary>
<returns>对于非 Unix 平台为包含“\r\n”的字符串，对于 Unix 平台为包含“\n”的字符串。</returns>
    </member>
    <member name="P:System.Environment.OSVersion">
<summary>获取包含当前平台标识符和版本号的 <see cref="T:System.OperatingSystem"/> 对象。</summary>
<returns>一个 <see cref="T:System.OperatingSystem"/> 对象。</returns>
<exception cref="T:System.InvalidOperationException">该属性无法获得系统版本。-或- 获得的平台标识符不是 <see cref="T:System.PlatformID"/> 的成员。 </exception>
    </member>
    <member name="P:System.Environment.ProcessorCount">
<summary>获取当前计算机上的处理器数。</summary>
<returns>指定当前计算机上处理器个数的 32 位带符号整数。没有默认值。</returns>
    </member>
    <member name="P:System.Environment.TickCount">
<summary>获取系统启动后经过的毫秒数。</summary>
<returns>一个 32 位带符号整数，它包含自上次启动计算机以来所经过的时间（以毫秒为单位）。</returns>
    </member>
    <member name="P:System.Environment.Version">
<summary>获取一个 <see cref="T:System.Version"/> 对象，该对象描述公共语言运行时的主版本、次版本、内部版本和修订号。</summary>
<returns>一个 <see cref="T:System.Version"/> 对象。</returns>
    </member>
    <member name="T:System.Environment.SpecialFolder">
<summary>在由受信任的应用程序调用时，指定用于检索系统特殊文件夹的目录路径的枚举常数。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ApplicationData">
<summary>目录，它用作当前漫游用户的应用程序特定数据的公共储存库。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonApplicationData">
<summary>目录，它用作所有用户使用的应用程序特定数据的公共储存库。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.LocalApplicationData">
<summary>目录，它用作当前非漫游用户使用的应用程序特定数据的公共储存库。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Cookies">
<summary>用作 Internet Cookie 的公共储存库的目录。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Desktop">
<summary>逻辑桌面，而不是物理文件系统位置。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Favorites">
<summary>用作用户收藏夹项的公共储存库的目录。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.History">
<summary>用作 Internet 历史记录项的公共储存库的目录。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.InternetCache">
<summary>用作 Internet 临时文件的公共储存库的目录。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Programs">
<summary>包含用户程序组的目录。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyComputer">
<summary>“我的电脑”文件夹。 </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyMusic">
<summary>“My Music”文件夹。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyPictures">
<summary>“My Pictures”文件夹。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyVideos">
<summary>“My Videos”文件夹。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Recent">
<summary>包含用户最近使用过的文档的目录。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.SendTo">
<summary>包含“发送”菜单项的目录。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.StartMenu">
<summary>包含“开始”菜单项的目录。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Startup">
<summary>对应于用户的“启动”程序组的目录。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.System">
<summary>“System”目录。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Templates">
<summary>用作文档模板的公共储存库的目录。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.DesktopDirectory">
<summary>用于物理上存储桌面上的文件对象的目录。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Personal">
<summary>用作文档的公共储存库的目录。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyDocuments">
<summary>“我的电脑”文件夹。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ProgramFiles">
<summary>“Program files”目录。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonProgramFiles">
<summary>用于应用程序间共享的组件的目录。</summary>
    </member>
    <member name="T:System.EventArgs">
      <summary>
<see cref="T:System.EventArgs"/> 是包含事件数据的类的基类。 </summary>
    </member>
    <member name="M:System.EventArgs.#ctor">
<summary>初始化 <see cref="T:System.EventArgs"/> 类的新实例。</summary>
    </member>
    <member name="F:System.EventArgs.Empty">
<summary>表示没有事件数据的事件。</summary>
    </member>
    <member name="T:System.EventHandler">
<summary>表示将处理不包含事件数据的事件的方法。</summary>
<param name="sender">事件的源。 </param>
<param name="e">不包含任何事件数据的 <see cref="T:System.EventArgs"/>。 </param>
    </member>
    <member name="T:System.EventHandler`1">
<summary>表示将处理事件的方法。 </summary>
<param name="sender">事件的源。</param>
<param name="e">包含事件数据的 <see cref="T:System.EventArgs"/>。 </param>
<typeparam name="TEventArgs">由该事件生成的事件数据的类型。</typeparam>
    </member>
    <member name="T:System.Exception">
<summary>表示在应用程序执行过程中发生的错误。</summary>
    </member>
    <member name="M:System.Exception.#ctor">
<summary>初始化 <see cref="T:System.Exception"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Exception.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.Exception"/> 类的新实例。</summary>
<param name="message">描述错误的消息。 </param>
    </member>
    <member name="M:System.Exception.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Exception"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个空引用（在 Visual Basic 中为 Nothing）。 </param>
    </member>
    <member name="P:System.Exception.Data">
<summary>获取一个提供用户定义的其他异常信息的键/值对的集合。</summary>
<returns>一个对象，它实现 <see cref="T:System.Collections.IDictionary"/> 接口并包含用户定义的键/值对的集合。默认值为空集合。</returns>
    </member>
    <member name="M:System.Exception.GetBaseException">
<summary>当在派生类中重写时，返回 <see cref="T:System.Exception"/>，它是一个或多个并发异常的根源。</summary>
<returns>异常链中第一个被引发的异常。如果当前异常的 <see cref="P:System.Exception.InnerException"/> 属性是 null 引用（Visual Basic 中为 Nothing），则此属性返回当前异常。</returns>
    </member>
    <member name="M:System.Exception.GetType">
<summary>获取当前实例的运行时类型。</summary>
<returns>一个 <see cref="T:System.Type"/> 对象，表示当前实例的确切运行时类型。</returns>
    </member>
    <member name="P:System.Exception.HResult">
<summary>获取或设置 HRESULT（一个分配给特定异常的编码数字值）。</summary>
<returns>HRESULT 值。</returns>
    </member>
    <member name="P:System.Exception.InnerException">
<summary>获取导致当前异常的 <see cref="T:System.Exception"/> 实例。</summary>
<returns>一个 Exception 实例，描述导致当前异常的错误。InnerException 属性返回与传递给构造函数的值相同的值，或者，如果没有向构造函数提供内部异常值，则返回 null 引用（Visual Basic 中为 Nothing）。此属性为只读。</returns>
    </member>
    <member name="P:System.Exception.Message">
<summary>获取描述当前异常的消息。</summary>
<returns>解释异常原因的错误消息或空字符串 ("")。</returns>
    </member>
    <member name="P:System.Exception.StackTrace">
<summary>获取在引发当前异常时调用堆栈上帧的字符串表示形式。</summary>
<returns>一个字符串，它描述调用堆栈的内容，其中首先显示最近的方法调用。</returns>
    </member>
    <member name="M:System.Exception.ToString">
<summary>创建并返回当前异常的字符串表示形式。</summary>
<returns>当前异常的字符串表示形式。</returns>
    </member>
    <member name="T:System.ExecutionEngineException">
<summary>当公共语言运行时的执行引擎中存在内部错误时引发的异常。无法继承此类。  </summary>
    </member>
    <member name="T:System.FieldAccessException">
<summary>当试图非法访问类中的私有字段或受保护字段时引发的异常。</summary>
    </member>
    <member name="T:System.FlagsAttribute">
<summary>指示可以将枚举作为位域（即一组标志）处理。</summary>
    </member>
    <member name="M:System.FlagsAttribute.#ctor">
<summary>初始化 <see cref="T:System.FlagsAttribute"/> 类的新实例。</summary>
    </member>
    <member name="T:System.FormatException">
<summary>当参数格式不符合调用的方法的参数规范时引发的异常。</summary>
    </member>
    <member name="M:System.FormatException.#ctor">
<summary>初始化 <see cref="T:System.FormatException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.FormatException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.FormatException"/> 类的新实例。</summary>
<param name="message">描述错误的消息。 </param>
    </member>
    <member name="M:System.FormatException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.FormatException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不是 null 引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。 </param>
    </member>
    <member name="T:System.Func`1">
<summary>封装一个不具有参数但却返回 <paramref name="TResult"/> 参数所指定的类型值的方法。</summary>
<returns>此委托封装的方法的返回值。</returns>
<typeparam name="TResult">此委托封装的方法的返回值类型。该类型参数是协变的。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
    </member>
    <member name="T:System.Func`2">
<summary>封装一个具有一个参数并返回 <paramref name="TResult"/> 参数所指定的类型值的方法。</summary>
<returns>此委托封装的方法的返回值。</returns>
<param name="arg">此委托封装的方法的参数。</param>
<typeparam name="T">此委托封装的方法的参数类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
<typeparam name="TResult">此委托封装的方法的返回值类型。该类型参数是协变的。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
    </member>
    <member name="T:System.Func`3">
<summary>封装一个具有两个参数但却返回 <paramref name="TResult"/> 参数所指定的类型值的方法。</summary>
<returns>此委托封装的方法的返回值。</returns>
<param name="arg1">此委托封装的方法的第一个参数。</param>
<param name="arg2">此委托封装的方法的第二个参数。</param>
<typeparam name="T1">此委托封装的方法的第一个参数的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
<typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
<typeparam name="TResult">此委托封装的方法的返回值类型。该类型参数是协变的。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
    </member>
    <member name="T:System.Func`4">
<summary>封装一个具有三个参数但却返回 <paramref name="TResult"/> 参数所指定的类型值的方法。</summary>
<returns>此委托封装的方法的返回值。</returns>
<param name="arg1">此委托封装的方法的第一个参数。</param>
<param name="arg2">此委托封装的方法的第二个参数。</param>
<param name="arg3">此委托封装的方法的第三个参数。</param>
<typeparam name="T1">此委托封装的方法的第一个参数的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
<typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
<typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
<typeparam name="TResult">此委托封装的方法的返回值类型。该类型参数是协变的。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
    </member>
    <member name="T:System.Func`5">
<summary>封装一个具有四个参数但却返回 <paramref name="TResult"/> 参数所指定的类型值的方法。</summary>
<returns>此委托封装的方法的返回值。</returns>
<param name="arg1">此委托封装的方法的第一个参数。</param>
<param name="arg2">此委托封装的方法的第二个参数。</param>
<param name="arg3">此委托封装的方法的第三个参数。</param>
<param name="arg4">此委托封装的方法的第四个参数。</param>
<typeparam name="T1">此委托封装的方法的第一个参数的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
<typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
<typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
<typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
<typeparam name="TResult">此委托封装的方法的返回值类型。该类型参数是协变的。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
    </member>
    <member name="T:System.Func`6">
<summary>封装一个具有五个参数但却返回 <paramref name="TResult"/> 参数所指定的类型值的方法。</summary>
<returns>此委托封装的方法的返回值。</returns>
<param name="arg1">此委托封装的方法的第一个参数。</param>
<param name="arg2">此委托封装的方法的第二个参数。</param>
<param name="arg3">此委托封装的方法的第三个参数。</param>
<param name="arg4">此委托封装的方法的第四个参数。</param>
<param name="arg5">此委托封装的方法的第五个参数。</param>
<typeparam name="T1">此委托封装的方法的第一个参数的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
<typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
<typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
<typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
<typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
<typeparam name="TResult">此委托封装的方法的返回值类型。该类型参数是协变的。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
    </member>
    <member name="T:System.Func`7">
<summary>封装一个具有六个参数但却返回 <paramref name="TResult"/> 参数所指定的类型值的方法。</summary>
<returns>此委托封装的方法的返回值。</returns>
<param name="arg1">此委托封装的方法的第一个参数。</param>
<param name="arg2">此委托封装的方法的第二个参数。</param>
<param name="arg3">此委托封装的方法的第三个参数。</param>
<param name="arg4">此委托封装的方法的第四个参数。</param>
<param name="arg5">此委托封装的方法的第五个参数。</param>
<param name="arg6">此委托封装的方法的第六个参数。</param>
<typeparam name="T1">此委托封装的方法的第一个参数的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
<typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
<typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
<typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
<typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
<typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
<typeparam name="TResult">此委托封装的方法的返回值类型。该类型参数是协变的。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
    </member>
    <member name="T:System.Func`8">
<summary>封装一个具有七个参数但却返回 <paramref name="TResult"/> 参数所指定的类型值的方法。</summary>
<returns>此委托封装的方法的返回值。</returns>
<param name="arg1">此委托封装的方法的第一个参数。</param>
<param name="arg2">此委托封装的方法的第二个参数。</param>
<param name="arg3">此委托封装的方法的第三个参数。</param>
<param name="arg4">此委托封装的方法的第四个参数。</param>
<param name="arg5">此委托封装的方法的第五个参数。</param>
<param name="arg6">此委托封装的方法的第六个参数。</param>
<param name="arg7">此委托封装的方法的第七个参数。</param>
<typeparam name="T1">此委托封装的方法的第一个参数的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
<typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
<typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
<typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
<typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
<typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
<typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
<typeparam name="TResult">此委托封装的方法的返回值类型。该类型参数是协变的。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
    </member>
    <member name="T:System.Func`9">
<summary>封装一个具有八个参数但却返回 <paramref name="TResult"/> 参数所指定的类型值的方法。</summary>
<returns>此委托封装的方法的返回值。</returns>
<param name="arg1">此委托封装的方法的第一个参数。</param>
<param name="arg2">此委托封装的方法的第二个参数。</param>
<param name="arg3">此委托封装的方法的第三个参数。</param>
<param name="arg4">此委托封装的方法的第四个参数。</param>
<param name="arg5">此委托封装的方法的第五个参数。</param>
<param name="arg6">此委托封装的方法的第六个参数。</param>
<param name="arg7">此委托封装的方法的第七个参数。</param>
<param name="arg8">此委托封装的方法的第八个参数。</param>
<typeparam name="T1">此委托封装的方法的第一个参数的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
<typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
<typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
<typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
<typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
<typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
<typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
<typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
<typeparam name="TResult">此委托封装的方法的返回值类型。该类型参数是协变的。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
    </member>
    <member name="T:System.GC">
<summary>控制系统垃圾回收器（一种自动回收未使用内存的服务）。</summary>
    </member>
    <member name="M:System.GC.Collect">
<summary>引发对所有代的即时垃圾回收。 </summary>
    </member>
    <member name="M:System.GC.GetTotalMemory(System.Boolean)">
<summary>检索当前认为要分配的字节数。一个参数，指示此方法是否可以等待较短间隔再返回，以便允许系统回收垃圾和终结对象。</summary>
<returns>一个数字，它是托管内存中当前所分配字节数的可用的最佳近似值。</returns>
<param name="forceFullCollection">如果此方法可以在返回之前等待垃圾回收发生，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.GC.KeepAlive(System.Object)">
<summary>引用指定对象，使其从当前例程开始到调用此方法的那一刻为止均不符合进行垃圾回收的条件。</summary>
<param name="obj">要引用的对象。 </param>
    </member>
    <member name="P:System.GC.MaxGeneration">
<summary>获取系统当前支持的最大代数。</summary>
<returns>从零到所支持的最大代数间的一个值。</returns>
    </member>
    <member name="M:System.GC.ReRegisterForFinalize(System.Object)">
<summary>请求系统调用指定对象的终结器，此前已为该对象调用 <see cref="M:System.GC.SuppressFinalize(System.Object)"/>。</summary>
<param name="obj">必须为其调用终结器的对象。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="obj"/> 为 null。 </exception>
    </member>
    <member name="M:System.GC.SuppressFinalize(System.Object)">
<summary>请求系统不要调用指定对象的终结器。</summary>
<param name="obj">不得为其调用终结器的对象。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="obj"/> 为 null。 </exception>
    </member>
    <member name="M:System.GC.WaitForPendingFinalizers">
<summary>挂起当前线程，直到处理终结器队列的线程清空该队列为止。</summary>
    </member>
    <member name="T:System.Guid">
<summary>表示全局唯一标识符 (GUID)。</summary>
    </member>
    <member name="M:System.Guid.#ctor(System.Byte[])">
<summary>使用指定的字节数组初始化 <see cref="T:System.Guid"/> 类的新实例。</summary>
<param name="b">包含初始化 GUID 的值的 16 元素字节数组。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="b"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="b"/> 的长度不是 16 个字节。 </exception>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
<summary>使用指定的整数和字节初始化 <see cref="T:System.Guid"/> 类的新实例。</summary>
<param name="a">GUID 的前 4 个字节。 </param>
<param name="b">GUID 的下两个字节。 </param>
<param name="c">GUID 的下两个字节。 </param>
<param name="d">GUID 的下一个字节。 </param>
<param name="e">GUID 的下一个字节。 </param>
<param name="f">GUID 的下一个字节。 </param>
<param name="g">GUID 的下一个字节。 </param>
<param name="h">GUID 的下一个字节。 </param>
<param name="i">GUID 的下一个字节。 </param>
<param name="j">GUID 的下一个字节。 </param>
<param name="k">GUID 的下一个字节。 </param>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])">
<summary>使用指定的整数和字节数组初始化 <see cref="T:System.Guid"/> 类的新实例。</summary>
<param name="a">GUID 的前 4 个字节。 </param>
<param name="b">GUID 的下两个字节。 </param>
<param name="c">GUID 的下两个字节。 </param>
<param name="d">GUID 的其余 8 个字节。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="d"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="d"/> 的长度不是 8 个字节。 </exception>
    </member>
    <member name="M:System.Guid.#ctor(System.String)">
<summary>使用指定字符串所表示的值初始化 <see cref="T:System.Guid"/> 类的新实例。</summary>
<param name="g">包含下面任一格式的 GUID 的 <see cref="T:System.String"/>（“d”表示忽略大小写的十六进制数字）：32 个连续的数字：dddddddddddddddddddddddddddddddd -或- 按 8、4、4、4 和 12 个数字分组，各组之间使用连字符。也可以用一对大括号或者圆括号将整个 GUID 括起来：dddddddd-dddd-dddd-dddd-dddddddddddd -或- {dddddddd-dddd-dddd-dddd-dddddddddddd} -或- (dddddddd-dddd-dddd-dddd-dddddddddddd) -或- 按 8、4 和 4 个数字分组，再加上一个 8 组 2 位数字的子集，每组都带有前缀“0x”或“0X”，以逗号分隔。整个 GUID 和子集用大括号括起来：{0xdddddddd, 0xdddd, 0xdddd,{0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd}} 所有大括号、逗号和“0x”前缀都是必需的。所有内置的空格都将被忽略。组中的前导零也将被忽略。组中显示的数字为可在该组中显示的有意义数字的最大数目。您可以指定从 1 到为组显示的位数。指定的位数被认为是该组低序位的位数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="g"/> 为 null。 </exception>
<exception cref="T:System.FormatException"><paramref name="g"/> 的格式无效。 </exception>
<exception cref="T:System.OverflowException"><paramref name="g"/> 的格式无效。 </exception>
<exception cref="T:System.Exception">出现了内部类型转换错误。 </exception>
    </member>
    <member name="M:System.Guid.CompareTo(System.Guid)">
<summary>将此实例与指定 <see cref="T:System.Guid"/> 对象进行比较并返回对其相对值的指示。</summary>
<returns>有符号数字，指示此实例和 <paramref name="value"/> 的相对值。值 描述 负整数 此实例小于 <paramref name="value"/>。零 此实例等于 <paramref name="value"/>。正整数 此实例大于 <paramref name="value"/>。 </returns>
<param name="value">要与此实例进行比较的 <see cref="T:System.Guid"/> 对象。</param>
    </member>
    <member name="M:System.Guid.CompareTo(System.Object)">
<summary>将此实例与指定对象进行比较并返回一个对二者的相对值的指示。</summary>
<returns>有符号数字，指示此实例和 <paramref name="value"/> 的相对值。值 描述 负整数 此实例小于 <paramref name="value"/>。零 此实例等于 <paramref name="value"/>。正整数 此实例大于 <paramref name="value"/>。-或- <paramref name="value"/> 为 null。 </returns>
<param name="value">要比较的对象，或为 null。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="value"/> 不是 <see cref="T:System.Guid"/>。 </exception>
    </member>
    <member name="F:System.Guid.Empty">
<summary><see cref="T:System.Guid"/> 类的只读实例，其值保证均为零。</summary>
    </member>
    <member name="M:System.Guid.Equals(System.Guid)">
<summary>返回一个值，该值指示此实例和指定的 <see cref="T:System.Guid"/> 对象是否表示相同的值。</summary>
<returns>如果 <paramref name="g"/> 等于此实例，则为 true；否则为 false。</returns>
<param name="g">要与此实例进行比较的 <see cref="T:System.Guid"/> 对象。</param>
    </member>
    <member name="M:System.Guid.Equals(System.Object)">
<summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
<returns>如果 <paramref name="o"/> 为与此实例的值相等的 <see cref="T:System.Guid"/>，则为 true；否则为 false。</returns>
<param name="o">与此实例进行比较的对象。 </param>
    </member>
    <member name="M:System.Guid.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>此实例的哈希代码。</returns>
    </member>
    <member name="M:System.Guid.NewGuid">
<summary>初始化 <see cref="T:System.Guid"/> 类的新实例。</summary>
<returns>一个新的 <see cref="T:System.Guid"/> 对象。</returns>
    </member>
    <member name="M:System.Guid.op_Equality(System.Guid,System.Guid)">
<summary>返回有关两个指定 <see cref="T:System.Guid"/> 对象的值是否相等的指示。</summary>
<returns>如果 <paramref name="a"/> 和 <paramref name="b"/> 相等，则为 true；否则为 false。</returns>
<param name="a"><see cref="T:System.Guid"/> 对象。 </param>
<param name="b"><see cref="T:System.Guid"/> 对象。 </param>
    </member>
    <member name="M:System.Guid.op_Inequality(System.Guid,System.Guid)">
<summary>返回有关两个指定 <see cref="T:System.Guid"/> 对象的值是否不相等的指示。</summary>
<returns>如果 <paramref name="a"/> 和 <paramref name="b"/> 不相等，则为 true；否则为 false。</returns>
<param name="a"><see cref="T:System.Guid"/> 对象。 </param>
<param name="b"><see cref="T:System.Guid"/> 对象。 </param>
    </member>
    <member name="M:System.Guid.Parse(System.String)">
<summary>将 GUID 的字符串表示形式转换为等效的 <see cref="T:System.Guid"/> 值。</summary>
<returns>一个包含已分析的 GUID 的值。</returns>
<param name="input">要转换的 GUID。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。</exception>
      <exception cref="T:System.FormatException">
<paramref name="input"/> 的格式无法识别。</exception>
    </member>
    <member name="M:System.Guid.ParseExact(System.String,System.String)">
<summary>将 GUID 的字符串表示形式转换为等效的 <see cref="T:System.Guid"/> 值，前提是该字符串采用的是指定格式。</summary>
<returns>一个包含已分析的 GUID 的值。</returns>
<param name="input">要转换的 GUID。</param>
<param name="format">下列说明符之一，指示当解释 <paramref name="input"/> 时要使用的确切格式：“N”、“D”、“B”、“P”或“X”。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 或 <paramref name="format"/> 为 null。</exception>
      <exception cref="T:System.FormatException">
<paramref name="input"/> 的格式无法识别。</exception>
    </member>
    <member name="M:System.Guid.ToByteArray">
<summary>返回包含此实例的值的 16 元素字节数组。</summary>
<returns>16 元素字节数组。</returns>
    </member>
    <member name="M:System.Guid.ToString">
<summary>以注册表格式返回此实例值的 <see cref="T:System.String"/> 表示形式。</summary>
<returns>按如下模式设置格式的字符串：xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx 其中 GUID 的值表示为一系列小写的十六进制位，这些十六进制位分别以 8 个、4 个、4 个、4 个和 12 个位为一组并由连字符分隔开。例如，返回值可以是“382c74c3-721d-4f34-80e5-57657b6cbc27”。</returns>
    </member>
    <member name="M:System.Guid.ToString(System.String)">
<summary>根据所提供的格式说明符，返回此 <see cref="T:System.Guid"/> 实例值的 <see cref="T:System.String"/> 表示形式。</summary>
<returns>此 <see cref="T:System.Guid"/> 的值，用一系列指定格式的小写十六进制位表示。 </returns>
<param name="format">一个单格式说明符，它指示如何格式化此 <see cref="T:System.Guid"/> 的值。<paramref name="format"/> 参数可以是“N”、“D”、“B”或“P”。如果 <paramref name="format"/> 为 null 或空字符串 ("")，则使用“D”。 </param>
<exception cref="T:System.FormatException"><paramref name="format"/> 的值不为 null、空字符串 ("")、“N”、“D”、“B”或“P”。 </exception>
    </member>
    <member name="M:System.Guid.ToString(System.String,System.IFormatProvider)">
<summary>根据所提供的格式说明符和区域性特定的格式信息，返回 <see cref="T:System.Guid"/> 类的此实例值的 <see cref="T:System.String"/> 表示形式。</summary>
<returns>此 <see cref="T:System.Guid"/> 的值，用一系列指定格式的小写十六进制位表示。 </returns>
<param name="format">一个单格式说明符，它指示如何格式化此 <see cref="T:System.Guid"/> 的值。<paramref name="format"/> 参数可以是“N”、“D”、“B”或“P”。如果 <paramref name="format"/> 为 null 或空字符串 ("")，则使用“D”。 </param>
<param name="provider">（保留）提供区域性特定格式化服务的 IFormatProvider 引用。 </param>
<exception cref="T:System.FormatException"><paramref name="format"/> 的值不为 null、空字符串 ("")、“N”、“D”、“B”或“P”。 </exception>
    </member>
    <member name="M:System.Guid.TryParse(System.String,System.Guid@)">
<summary>将 GUID 的字符串表示形式转换为等效的 <see cref="T:System.Guid"/> 值。 </summary>
<returns>如果分析操作成功，则为 true；否则为 false。</returns>
<param name="input">要转换的 GUID。</param>
<param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input"/> 中所包含的 GUID 等效的值；如果转换失败，则包含 <see cref="F:System.Guid.Empty"/>。 .</param>
    </member>
    <member name="M:System.Guid.TryParseExact(System.String,System.String,System.Guid@)">
<summary>将 GUID 的字符串表示形式转换为等效的 <see cref="T:System.Guid"/> 值，前提是该字符串采用的是指定格式。</summary>
<returns>如果分析操作成功，则为 true；否则为 false。</returns>
<param name="input">要转换的 GUID。</param>
<param name="format">下列说明符之一，指示当解释 <paramref name="input"/> 时要使用的确切格式：“N”、“D”、“B”、“P”或“X”。</param>
<param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input"/> 中所包含的 GUID 等效的值；如果转换失败，则包含 <see cref="F:System.Guid.Empty"/>。</param>
    </member>
    <member name="T:System.IAsyncResult">
<summary>表示异步操作的状态。 </summary>
    </member>
    <member name="P:System.IAsyncResult.AsyncState">
<summary>获取用户定义的对象，它限定或包含关于异步操作的信息。</summary>
<returns>用户定义的对象，它限定或包含关于异步操作的信息。</returns>
    </member>
    <member name="P:System.IAsyncResult.AsyncWaitHandle">
<summary>获取用于等待异步操作完成的 <see cref="T:System.Threading.WaitHandle"/>。</summary>
<returns>用于等待异步操作完成的等待句柄。</returns>
    </member>
    <member name="P:System.IAsyncResult.CompletedSynchronously">
<summary>获取一个值，该值指示异步操作是否同步完成。</summary>
<returns>如果异步操作同步完成，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IAsyncResult.IsCompleted">
<summary>获取一个值，该值指示异步操作是否已完成。</summary>
<returns>如果该操作已完成，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.IComparable">
<summary>定义一种特定于类型的通用比较方法，值类型或类通过实现此方法对其实例进行排序。</summary>
    </member>
    <member name="M:System.IComparable.CompareTo(System.Object)">
<summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
<returns>一个 32 位带符号整数，指示要比较的对象的相对顺序。返回值的含义如下：值 含义 小于零 此实例在排序顺序中位于 <paramref name="obj"/> 之前。零 此实例在排序顺序中的位置与 <paramref name="obj"/> 相同。大于零 此实例在排序顺序中位于 <paramref name="obj"/> 之后。</returns>
<param name="obj">与此实例进行比较的对象。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="obj"/> 不具有与此实例相同的类型。 </exception>
    </member>
    <member name="T:System.IComparable`1">
<summary>定义由值类型或类实现的通用的比较方法，以为排序实例创建类型特定的比较方法。</summary>
<typeparam name="T">要比较的对象的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
    </member>
    <member name="M:System.IComparable`1.CompareTo(`0)">
<summary>比较当前对象和同一类型的另一对象。</summary>
<returns>一个 32 位带符号整数，指示要比较的对象的相对顺序。返回值的含义如下：值 含义 小于零 此对象小于 <paramref name="other"/> 参数。零 此对象等于 <paramref name="other"/>。大于零 此对象大于 <paramref name="other"/>。 </returns>
<param name="other">与此对象进行比较的对象。</param>
    </member>
    <member name="T:System.IConvertible">
<summary>定义特定的方法，这些方法将实现引用或值类型的值转换为具有等效值的公共语言运行时类型。</summary>
    </member>
    <member name="M:System.IConvertible.GetTypeCode">
<summary>返回此实例的 <see cref="T:System.TypeCode"/>。</summary>
<returns>枚举常数，它是实现该接口的类或值类型的 <see cref="T:System.TypeCode"/>。</returns>
    </member>
    <member name="M:System.IConvertible.ToBoolean(System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 Boolean 值。</summary>
<returns>与此实例的值等效的 Boolean 值。</returns>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.IConvertible.ToByte(System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 8 位无符号整数。</summary>
<returns>与此实例的值等效的 8 位无符号整数。</returns>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.IConvertible.ToChar(System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 Unicode 字符。</summary>
<returns>与此实例的值等效的 Unicode 字符。</returns>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.IConvertible.ToDateTime(System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 <see cref="T:System.DateTime"/>。</summary>
<returns>与此实例的值等效的 <see cref="T:System.DateTime"/> 实例。</returns>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.IConvertible.ToDecimal(System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 <see cref="T:System.Decimal"/> 数字。</summary>
<returns>与此实例的值等效的 <see cref="T:System.Decimal"/> 数字。</returns>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.IConvertible.ToDouble(System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的双精度浮点数字。</summary>
<returns>与此实例的值等效的双精度浮点数字。</returns>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.IConvertible.ToInt16(System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 16 位带符号整数。</summary>
<returns>与此实例的值等效的 16 位带符号整数。</returns>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.IConvertible.ToInt32(System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 32 位带符号整数。</summary>
<returns>与此实例的值等效的 32 位带符号整数。</returns>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.IConvertible.ToInt64(System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 64 位带符号整数。</summary>
<returns>与此实例的值等效的 64 位带符号整数。</returns>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.IConvertible.ToSByte(System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 8 位带符号整数。</summary>
<returns>与此实例的值等效的 8 位带符号整数。</returns>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.IConvertible.ToSingle(System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的单精度浮点数字。</summary>
<returns>与此实例的值等效的单精度浮点数字。</returns>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.IConvertible.ToString(System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 <see cref="T:System.String"/>。</summary>
<returns>与此实例的值等效的 <see cref="T:System.String"/> 实例。</returns>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息将此实例的值转换为具有等效值的指定 <see cref="T:System.Type"/> 的 <see cref="T:System.Object"/>。</summary>
<returns>其值与此实例值等效的 <paramref name="conversionType"/> 类型的 <see cref="T:System.Object"/> 实例。</returns>
<param name="conversionType">要将此实例的值转换到的 <see cref="T:System.Type"/>。 </param>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.IConvertible.ToUInt16(System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 16 位无符号整数。</summary>
<returns>与此实例的值等效的 16 位无符号整数。</returns>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.IConvertible.ToUInt32(System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 32 位无符号整数。</summary>
<returns>与此实例的值等效的 32 位无符号整数。</returns>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.IConvertible.ToUInt64(System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 64 位无符号整数。</summary>
<returns>与此实例的值等效的 64 位无符号整数。</returns>
<param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="T:System.ICustomFormatter">
<summary>定义一种方法，它支持对象值的自定义（用户定义）格式设置。</summary>
    </member>
    <member name="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
<summary>使用指定的格式和区域性特定格式设置信息将指定对象的值转换为等效的字符串表示形式。</summary>
<returns><paramref name="arg"/> 的值的字符串表示形式，按照 <paramref name="format"/> 和 <paramref name="formatProvider"/> 的指定来进行格式设置。</returns>
<param name="format">包含格式规范的格式字符串。 </param>
<param name="arg">要设置格式的对象。 </param>
<param name="formatProvider">一个 <see cref="T:System.IFormatProvider"/> 对象，提供有关当前实例的格式信息。 </param>
    </member>
    <member name="T:System.IDisposable">
<summary>定义一种释放分配的资源的方法。</summary>
    </member>
    <member name="M:System.IDisposable.Dispose">
<summary>执行与释放或重置非托管资源相关的应用程序定义的任务。</summary>
    </member>
    <member name="T:System.IEquatable`1">
<summary>定义一个通用的方法，由值类型或类实现以创建类型特定的方法，用于确定实例间的相等性。</summary>
<typeparam name="T">要比较的对象的类型。</typeparam>
    </member>
    <member name="M:System.IEquatable`1.Equals(`0)">
<summary>指示当前对象是否等于同一类型的另一个对象。</summary>
<returns>如果当前对象等于 <paramref name="other"/> 参数，则为 true；否则为 false。</returns>
<param name="other">与此对象进行比较的对象。</param>
    </member>
    <member name="T:System.IFormatProvider">
<summary>提供用于检索控制格式化的对象的机制。</summary>
    </member>
    <member name="M:System.IFormatProvider.GetFormat(System.Type)">
<summary>返回一个对象，该对象为指定类型提供格式设置服务。</summary>
<returns>如果 <see cref="T:System.IFormatProvider"/> 实现能够提供该类型的对象，则为 <paramref name="formatType"/> 所指定对象的实例；否则为 null。</returns>
<param name="formatType">一个对象，指定要返回的格式对象的类型。 </param>
    </member>
    <member name="T:System.IFormattable">
<summary>提供将对象的值格式化为字符串表示形式的功能。</summary>
    </member>
    <member name="M:System.IFormattable.ToString(System.String,System.IFormatProvider)">
<summary>使用指定的格式格式化当前实例的值。</summary>
<returns>一个 <see cref="T:System.String"/>，包含具有指定格式的当前实例的值。</returns>
<param name="format">指定要使用格式的 <see cref="T:System.String"/>。-或- 若为 null，则表示使用为 <see cref="T:System.IFormattable"/> 实现的类型定义的默认格式。 </param>
<param name="formatProvider">要用于为值设置格式的 <see cref="T:System.IFormatProvider"/>。-或- 若为 null，则表示从操作系统的当前区域设置中获取数值格式信息。 </param>
    </member>
    <member name="T:System.IndexOutOfRangeException">
<summary>试图访问索引超出数组界限的数组元素时引发的异常。无法继承此类。</summary>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor">
<summary>初始化 <see cref="T:System.IndexOutOfRangeException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.IndexOutOfRangeException"/> 类的新实例。</summary>
<param name="message">描述错误的消息。 </param>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IndexOutOfRangeException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不是 null 引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。 </param>
    </member>
    <member name="T:System.Int16">
<summary>表示 16 位有符号的整数。</summary>
    </member>
    <member name="M:System.Int16.CompareTo(System.Int16)">
<summary>将此实例与指定的 16 位带符号整数进行比较，并返回一个整数，该整数指示此实例是小于、等于还是大于指定的 16 位带符号整数值。</summary>
<returns>有符号数字，指示此实例和 <paramref name="value"/> 的相对值。返回值 描述 小于零 此实例小于 <paramref name="value"/>。零 此实例等于 <paramref name="value"/>。大于零 此实例大于 <paramref name="value"/>。 </returns>
<param name="value">要比较的整数。 </param>
    </member>
    <member name="M:System.Int16.CompareTo(System.Object)">
<summary>将此实例与指定对象进行比较，并返回一个整数，该整数指示此实例是小于、等于还是大于指定对象。</summary>
<returns>有符号数字，指示此实例和 <paramref name="value"/> 的相对值。返回值 描述 小于零 此实例小于 <paramref name="value"/>。零 此实例等于 <paramref name="value"/>。大于零 此实例大于 <paramref name="value"/>。-或- <paramref name="value"/> 为 null。 </returns>
<param name="value">要比较的对象，或为 null。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="value"/> 不是 <see cref="T:System.Int16"/>。 </exception>
    </member>
    <member name="M:System.Int16.Equals(System.Int16)">
<summary>返回一个值，该值指示此实例是否与指定的 <see cref="T:System.Int16"/> 值相等。</summary>
<returns>如果 <paramref name="obj"/> 的值与此实例相同，则为 true；否则为 false。</returns>
<param name="obj">要与此实例进行比较的 <see cref="T:System.Int16"/> 值。</param>
    </member>
    <member name="M:System.Int16.Equals(System.Object)">
<summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
<returns>如果 <paramref name="obj"/> 是 <see cref="T:System.Int16"/> 的实例并且等于此实例的值，则为 true；否则为 false。</returns>
<param name="obj">要与此实例进行比较的对象。 </param>
    </member>
    <member name="M:System.Int16.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Int16.GetTypeCode">
<summary>返回值类型 <see cref="T:System.Int16"/> 的 <see cref="T:System.TypeCode"/>。</summary>
<returns>枚举常数 <see cref="F:System.TypeCode.Int16"/>。</returns>
    </member>
    <member name="F:System.Int16.MaxValue">
<summary>表示 <see cref="T:System.Int16"/> 的最大可能值。此字段为常量。</summary>
    </member>
    <member name="F:System.Int16.MinValue">
<summary>表示 <see cref="T:System.Int16"/> 的最小可能值。此字段为常量。</summary>
    </member>
    <member name="M:System.Int16.Parse(System.String)">
<summary>将数字的字符串表示形式转换为它的等效 16 位带符号整数。</summary>
<returns>与 <paramref name="s"/> 中包含的数字等效的 16 位带符号整数。</returns>
<param name="s">包含要转换的数字的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 的格式不正确。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.Int16.MinValue"/> 或大于 <see cref="F:System.Int16.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles)">
<summary>将指定样式的数字的字符串表示形式转换为它的等效 16 位带符号整数。</summary>
<returns>与 <paramref name="s"/> 中指定的数字等效的 16 位带符号整数。</returns>
<param name="s">包含要转换的数字的字符串。 </param>
<param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s"/> 中的样式元素。一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或-<paramref name="style"/> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber"/> 值的组合。</exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 的格式不符合 <paramref name="style"/>。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.Int16.MinValue"/> 或大于 <see cref="F:System.Int16.MaxValue"/> 的数字。-或-<paramref name="s"/> 包含非零的小数位。</exception>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
<summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 16 位带符号整数。</summary>
<returns>与 <paramref name="s"/> 中指定的数字等效的 16 位带符号整数。</returns>
<param name="s">包含要转换的数字的字符串。 </param>
<param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s"/> 中的样式元素。一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer"/>。</param>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/>，它提供有关 <paramref name="s"/> 的区域性特定格式设置信息。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或-<paramref name="style"/> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber"/> 值的组合。</exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 的格式不符合 <paramref name="style"/>。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.Int16.MinValue"/> 或大于 <see cref="F:System.Int16.MaxValue"/> 的数字。-或-<paramref name="s"/> 包含非零的小数位。</exception>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.IFormatProvider)">
<summary>将指定的区域性特定格式的数字的字符串表示形式转换为它的等效 16 位带符号整数。</summary>
<returns>与 <paramref name="s"/> 中指定的数字等效的 16 位带符号整数。</returns>
<param name="s">包含要转换的数字的字符串。 </param>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/>，它提供有关 <paramref name="s"/> 的区域性特定格式设置信息。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 的格式不正确。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.Int16.MinValue"/> 或大于 <see cref="F:System.Int16.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToBoolean(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)"/>。 </summary>
<returns>如果当前实例的值不为零，则为 true；否则为 false。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToByte(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Byte"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToChar(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Char"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDateTime(System.IFormatProvider)">
<summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>不支持此转换。不返回任何值。</returns>
<param name="provider">忽略此参数。</param>
<exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDecimal(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Decimal"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDouble(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Double"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt16(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，未更改。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt32(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Int32"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt64(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Int64"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToSByte(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.SByte"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToSingle(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Single"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <paramref name="type"/>。</returns>
<param name="type">要将此 <see cref="T:System.Int16"/> 值转换为的类型。</param>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/> 实现，提供有关返回值格式的信息。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt16(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，未更改。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt32(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.UInt32"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt64(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.UInt64"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int16.ToString">
<summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由减号（如果值为负）和没有前导零的从 0 到 9 的数字序列组成。</returns>
    </member>
    <member name="M:System.Int16.ToString(System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由 <paramref name="provider"/> 指定。</returns>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/>，它提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.Int16.ToString(System.String)">
<summary>使用指定的格式，将此实例的数值转换为它的等效字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由 <paramref name="format"/> 指定。</returns>
<param name="format">标准或自定义的数值格式字符串（请参阅“备注”）。</param>
    </member>
    <member name="M:System.Int16.ToString(System.String,System.IFormatProvider)">
<summary>使用指定的格式和区域性特定格式设置信息，将此实例的数值转换为其等效字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由 <paramref name="format"/> 和 <paramref name="provider"/> 指定。</returns>
<param name="format">标准或自定义的数值格式字符串（请参阅“备注”）。</param>
<param name="provider">一个提供区域性特定的格式设置信息的对象。 </param>
    </member>
    <member name="M:System.Int16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int16@)">
<summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 16 位带符号整数。一个指示转换是否成功的返回值。</summary>
<returns>如果成功转换了 <paramref name="s"/>，则为 true；否则为 false。</returns>
<param name="s">包含要转换的数字的字符串。该字符串使用由 <paramref name="style"/> 指定的样式来进行解释。</param>
<param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s"/> 中的样式元素。一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer"/>。</param>
<param name="provider">一个提供有关 <paramref name="s"/> 的区域性特定的格式设置信息的对象。 </param>
<param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s"/> 中包含的数字等效的 16 位带符号整数值；如果转换失败，则包含零。如果 <paramref name="s"/> 参数为 null，格式不符合 <paramref name="style"/>，或者表示的数字小于 <see cref="F:System.Int16.MinValue"/> 或大于 <see cref="F:System.Int16.MaxValue"/>，则转换会失败。该参数未经初始化即被传递。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或-<paramref name="style"/> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber"/> 值的组合。</exception>
    </member>
    <member name="M:System.Int16.TryParse(System.String,System.Int16@)">
<summary>将数字的字符串表示形式转换为它的等效 16 位带符号整数。一个指示转换是否成功的返回值。</summary>
<returns>如果成功转换了 <paramref name="s"/>，则为 true；否则为 false。</returns>
<param name="s">包含要转换的数字的字符串。 </param>
<param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s"/> 中包含的数字等效的 16 位带符号整数值；如果转换失败，则包含零。如果 <paramref name="s"/> 参数为 null，格式不正确，或者表示的数字小于 <see cref="F:System.Int16.MinValue"/> 或大于 <see cref="F:System.Int16.MaxValue"/>，则转换会失败。该参数未经初始化即被传递。 </param>
    </member>
    <member name="T:System.Int32">
<summary>表示 32 位有符号的整数。</summary>
    </member>
    <member name="M:System.Int32.CompareTo(System.Int32)">
<summary>将此实例与指定的 32 位带符号整数进行比较，并返回一个整数，该整数指示此实例的值是大于、小于还是等于指定的 32 位带符号整数的值。</summary>
<returns>有符号数字，指示此实例和 <paramref name="value"/> 的相对值。返回值 描述 小于零 此实例小于 <paramref name="value"/>。零 此实例等于 <paramref name="value"/>。大于零 此实例大于 <paramref name="value"/>。 </returns>
<param name="value">要比较的整数。 </param>
    </member>
    <member name="M:System.Int32.CompareTo(System.Object)">
<summary>将此实例与指定对象进行比较，并返回一个整数，该整数指示此实例的值是大于、小于还是等于指定对象的值。</summary>
<returns>有符号数字，指示此实例和 <paramref name="value"/> 的相对值。返回值 描述 小于零 此实例小于 <paramref name="value"/>。零 此实例等于 <paramref name="value"/>。大于零 此实例大于 <paramref name="value"/>。-或- <paramref name="value"/> 为 null。 </returns>
<param name="value">要比较的对象，或为 null。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="value"/> 不是 <see cref="T:System.Int32"/>。 </exception>
    </member>
    <member name="M:System.Int32.Equals(System.Int32)">
<summary>返回一个值，该值指示此实例是否与指定的 <see cref="T:System.Int32"/> 值相等。 </summary>
<returns>如果 <paramref name="obj"/> 的值与此实例相同，则为 true；否则为 false。</returns>
<param name="obj">要与此实例进行比较的 <see cref="T:System.Int32"/> 值。</param>
    </member>
    <member name="M:System.Int32.Equals(System.Object)">
<summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
<returns>如果 <paramref name="obj"/> 是 <see cref="T:System.Int32"/> 的实例并且等于此实例的值，则为 true；否则为 false。</returns>
<param name="obj">与此实例进行比较的对象。 </param>
    </member>
    <member name="M:System.Int32.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Int32.GetTypeCode">
<summary>返回值类型 <see cref="T:System.Int32"/> 的 <see cref="T:System.TypeCode"/>。</summary>
<returns>枚举常数 <see cref="F:System.TypeCode.Int32"/>。</returns>
    </member>
    <member name="F:System.Int32.MaxValue">
<summary>表示 <see cref="T:System.Int32"/> 的最大可能值。此字段为常量。</summary>
    </member>
    <member name="F:System.Int32.MinValue">
<summary>表示 <see cref="T:System.Int32"/> 的最小可能值。此字段为常量。</summary>
    </member>
    <member name="M:System.Int32.Parse(System.String)">
<summary>将数字的字符串表示形式转换为它的等效 32 位带符号整数。</summary>
<returns>与 <paramref name="s"/> 中包含的数字等效的 32 位带符号整数。</returns>
<param name="s">包含要转换的数字的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 的格式不正确。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.Int32.MinValue"/> 或大于 <see cref="F:System.Int32.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles)">
<summary>将指定样式的数字的字符串表示形式转换为它的等效 32 位带符号整数。</summary>
<returns>与 <paramref name="s"/> 中指定的数字等效的 32 位带符号整数。</returns>
<param name="s">包含要转换的数字的字符串。 </param>
<param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s"/> 中的样式元素。一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或-<paramref name="style"/> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber"/> 值的组合。</exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 的格式不符合 <paramref name="style"/>。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.Int32.MinValue"/> 或大于 <see cref="F:System.Int32.MaxValue"/> 的数字。-或- <paramref name="s"/> 包含非零的小数位。</exception>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
<summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 32 位带符号整数。</summary>
<returns>与 <paramref name="s"/> 中指定的数字等效的 32 位带符号整数。</returns>
<param name="s">包含要转换的数字的字符串。 </param>
<param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s"/> 中的样式元素。一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer"/>。</param>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/>，提供有关 <paramref name="s"/> 的格式的区域性特定信息。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或-<paramref name="style"/> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber"/> 值的组合。</exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 的格式不符合 <paramref name="style"/>。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.Int32.MinValue"/> 或大于 <see cref="F:System.Int32.MaxValue"/> 的数字。-或-<paramref name="s"/> 包含非零的小数位。</exception>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.IFormatProvider)">
<summary>将指定的区域性特定格式的数字的字符串表示形式转换为它的等效 32 位带符号整数。</summary>
<returns>与 <paramref name="s"/> 中指定的数字等效的 32 位带符号整数。</returns>
<param name="s">包含要转换的数字的字符串。 </param>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/>，它提供有关 <paramref name="s"/> 的区域性特定格式设置信息。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 的格式不正确。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.Int32.MinValue"/> 或大于 <see cref="F:System.Int32.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToBoolean(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)"/>。 </summary>
<returns>如果当前实例的值不为零，则为 true；否则为 false。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToByte(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Byte"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToChar(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Char"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDateTime(System.IFormatProvider)">
<summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>不支持此转换。不返回任何值。</returns>
<param name="provider">忽略此参数。</param>
<exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDecimal(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)"/>。</summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Decimal"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDouble(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Double"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt16(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Int16"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt32(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，未更改。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt64(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Int64"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToSByte(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.SByte"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToSingle(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Single"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <paramref name="type"/>。</returns>
<param name="type">要将此 <see cref="T:System.Int32"/> 值转换为的类型。</param>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/> 实现，提供有关返回值格式的信息。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt16(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.UInt16"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt32(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.UInt32"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt64(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.UInt64"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int32.ToString">
<summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由减号（如果值为负）和没有前导零的从 0 到 9 的数字序列组成。</returns>
    </member>
    <member name="M:System.Int32.ToString(System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由 <paramref name="provider"/> 指定。</returns>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/>，它提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.Int32.ToString(System.String)">
<summary>使用指定的格式，将此实例的数值转换为它的等效字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由 <paramref name="format"/> 指定。</returns>
<param name="format">标准或自定义的数值格式字符串（请参阅“备注”）。</param>
      <exception cref="T:System.FormatException">
<paramref name="format"/> 无效或不受支持。</exception>
    </member>
    <member name="M:System.Int32.ToString(System.String,System.IFormatProvider)">
<summary>使用指定的格式和区域性特定格式设置信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由 <paramref name="format"/> 和 <paramref name="provider"/> 指定。</returns>
<param name="format">标准或自定义的数值格式字符串（请参阅“备注”）。</param>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/>，它提供区域性特定的格式设置信息。 </param>
      <exception cref="T:System.FormatException">
<paramref name="format"/> 无效或不受支持。</exception>
    </member>
    <member name="M:System.Int32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)">
<summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 32 位带符号整数。一个指示转换是否成功的返回值。</summary>
<returns>如果成功转换了 <paramref name="s"/>，则为 true；否则为 false。</returns>
<param name="s">包含要转换的数字的字符串。该字符串使用由 <paramref name="style"/> 指定的样式来进行解释。</param>
<param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s"/> 中的样式元素。一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer"/>。</param>
<param name="provider">一个提供有关 <paramref name="s"/> 的区域性特定的格式设置信息的对象。 </param>
<param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s"/> 中包含的数字等效的 32 位带符号整数值；如果转换失败，则包含零。如果 <paramref name="s"/> 参数为 null，格式不符合 <paramref name="style"/>，或者表示的数字小于 <see cref="F:System.Int32.MinValue"/> 或大于 <see cref="F:System.Int32.MaxValue"/>，则转换会失败。该参数未经初始化即被传递。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或-<paramref name="style"/> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber"/> 值的组合。</exception>
    </member>
    <member name="M:System.Int32.TryParse(System.String,System.Int32@)">
<summary>将数字的字符串表示形式转换为它的等效 32 位带符号整数。一个指示转换是否成功的返回值。</summary>
<returns>如果成功转换了 <paramref name="s"/>，则为 true；否则为 false。</returns>
<param name="s">包含要转换的数字的字符串。 </param>
<param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s"/> 中包含的数字等效的 32 位带符号整数值；如果转换失败，则包含零。如果 <paramref name="s"/> 参数为 null，格式不正确，或者表示的数字小于 <see cref="F:System.Int32.MinValue"/> 或大于 <see cref="F:System.Int32.MaxValue"/>，则转换会失败。该参数未经初始化即被传递。 </param>
    </member>
    <member name="T:System.Int64">
<summary>表示 64 位有符号的整数。</summary>
    </member>
    <member name="M:System.Int64.CompareTo(System.Int64)">
<summary>将此实例与指定的 64 位带符号整数进行比较并返回对其相对值的指示。</summary>
<returns>有符号数字，指示此实例和 <paramref name="value"/> 的相对值。返回值 描述 小于零 此实例小于 <paramref name="value"/>。零 此实例等于 <paramref name="value"/>。大于零 此实例大于 <paramref name="value"/>。 </returns>
<param name="value">要比较的整数。 </param>
    </member>
    <member name="M:System.Int64.CompareTo(System.Object)">
<summary>将此实例与指定对象进行比较并返回一个对二者的相对值的指示。</summary>
<returns>有符号数字，指示此实例和 <paramref name="value"/> 的相对值。返回值 描述 小于零 此实例小于 <paramref name="value"/>。零 此实例等于 <paramref name="value"/>。大于零 此实例大于 <paramref name="value"/>。-或- <paramref name="value"/> 为 null。 </returns>
<param name="value">要比较的对象，或为 null。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="value"/> 不是 <see cref="T:System.Int64"/>。 </exception>
    </member>
    <member name="M:System.Int64.Equals(System.Int64)">
<summary>返回一个值，该值指示此实例是否与指定的 <see cref="T:System.Int64"/> 值相等。</summary>
<returns>如果 <paramref name="obj"/> 的值与此实例相同，则为 true；否则为 false。</returns>
<param name="obj">要与此实例进行比较的 <see cref="T:System.Int64"/> 值。</param>
    </member>
    <member name="M:System.Int64.Equals(System.Object)">
<summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
<returns>如果 <paramref name="obj"/> 是 <see cref="T:System.Int64"/> 的实例并且等于此实例的值，则为 true；否则为 false。</returns>
<param name="obj">与此实例进行比较的对象。 </param>
    </member>
    <member name="M:System.Int64.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Int64.GetTypeCode">
<summary>返回值类型 <see cref="T:System.Int64"/> 的 <see cref="T:System.TypeCode"/>。</summary>
<returns>枚举常数 <see cref="F:System.TypeCode.Int64"/>。</returns>
    </member>
    <member name="F:System.Int64.MaxValue">
<summary>表示 Int64 的最大可能值。此字段为常量。</summary>
    </member>
    <member name="F:System.Int64.MinValue">
<summary>表示 Int64 的最小可能值。此字段为常量。</summary>
    </member>
    <member name="M:System.Int64.Parse(System.String)">
<summary>将数字的字符串表示形式转换为它的等效 64 位带符号整数。</summary>
<returns>与 <paramref name="s"/> 中包含的数字等效的 64 位带符号整数。</returns>
<param name="s">包含要转换的数字的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 的格式不正确。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.Int64.MinValue"/> 或大于 <see cref="F:System.Int64.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles)">
<summary>将指定样式的数字的字符串表示形式转换为它的等效 64 位带符号整数。</summary>
<returns>与 <paramref name="s"/> 中指定的数字等效的 64 位带符号整数。</returns>
<param name="s">包含要转换的数字的字符串。 </param>
<param name="style"><see cref="T:System.Globalization.NumberStyles"/> 值的按位组合，指示 <paramref name="s"/> 允许使用的格式。一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或-<paramref name="style"/> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber"/> 值的组合。</exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 的格式不符合 <paramref name="style"/>。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.Int64.MinValue"/> 或大于 <see cref="F:System.Int64.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
<summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 64 位带符号整数。</summary>
<returns>与 <paramref name="s"/> 中指定的数字等效的 64 位带符号整数。</returns>
<param name="s">包含要转换的数字的字符串。 </param>
<param name="style"><see cref="T:System.Globalization.NumberStyles"/> 值的按位组合，指示 <paramref name="s"/> 允许使用的格式。一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer"/>。</param>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/>，它提供有关 <paramref name="s"/> 的区域性特定格式设置信息。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或-<paramref name="style"/> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber"/> 值的组合。</exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 的格式不符合 <paramref name="style"/>。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.Int64.MinValue"/> 或大于 <see cref="F:System.Int64.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.IFormatProvider)">
<summary>将指定的区域性特定格式的数字的字符串表示形式转换为它的等效 64 位带符号整数。</summary>
<returns>与 <paramref name="s"/> 中指定的数字等效的 64 位带符号整数。</returns>
<param name="s">包含要转换的数字的字符串。 </param>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/>，它提供有关 <paramref name="s"/> 的区域性特定格式设置信息。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 的格式不正确。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.Int64.MinValue"/> 或大于 <see cref="F:System.Int64.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToBoolean(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)"/>。 </summary>
<returns>如果当前实例的值不为零，则为 true；否则为 false。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToByte(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Byte"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToChar(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Char"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDateTime(System.IFormatProvider)">
<summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException"/>。 </summary>
<returns>不支持此转换。不返回任何值。</returns>
<param name="provider">忽略此参数。</param>
<exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDecimal(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Decimal"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDouble(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Double"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt16(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Int16"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt32(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Int32"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt64(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，未更改。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToSByte(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.SByte"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToSingle(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Single"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <paramref name="type"/>。</returns>
<param name="type">要将此 <see cref="T:System.Int64"/> 值转换为的类型。</param>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/> 实现，提供有关返回值格式的信息。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt16(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.UInt16"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt32(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.UInt32"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt64(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.UInt64"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int64.ToString">
<summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由减号（如果值为负）和没有前导零的从 0 到 9 的数字序列组成。</returns>
    </member>
    <member name="M:System.Int64.ToString(System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由 <paramref name="provider"/> 指定。</returns>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/>，它提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.Int64.ToString(System.String)">
<summary>使用指定的格式，将此实例的数值转换为它的等效字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由 <paramref name="format"/> 指定。</returns>
<param name="format">标准或自定义的数值格式字符串（请参阅“备注”）。</param>
    </member>
    <member name="M:System.Int64.ToString(System.String,System.IFormatProvider)">
<summary>使用指定的格式和区域性特定格式设置信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由 <paramref name="format"/> 和 <paramref name="provider"/> 指定。</returns>
<param name="format">标准或自定义的数值格式字符串（请参阅“备注”）。</param>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/>，它提供有关此实例的区域性特定格式设置信息。 </param>
    </member>
    <member name="M:System.Int64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int64@)">
<summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 64 位带符号整数。一个指示转换是否成功的返回值。</summary>
<returns>如果成功转换了 <paramref name="s"/>，则为 true；否则为 false。</returns>
<param name="s">包含要转换的数字的字符串。 </param>
<param name="style"><see cref="T:System.Globalization.NumberStyles"/> 值的按位组合，指示 <paramref name="s"/> 允许使用的格式。一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer"/>。</param>
<param name="provider">一个提供有关 <paramref name="s"/> 的区域性特定的格式设置信息的 <see cref="T:System.IFormatProvider"/> 对象。 </param>
<param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s"/> 中包含的数字等效的 64 位带符号整数值；如果转换失败，则包含零。如果 <paramref name="s"/> 参数为 null，格式不符合 <paramref name="style"/>，或者表示的数字小于 <see cref="F:System.Int64.MinValue"/> 或大于 <see cref="F:System.Int64.MaxValue"/>，则转换会失败。该参数未经初始化即被传递。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或-<paramref name="style"/> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber"/> 值的组合。</exception>
    </member>
    <member name="M:System.Int64.TryParse(System.String,System.Int64@)">
<summary>将数字的字符串表示形式转换为它的等效 64 位带符号整数。一个指示转换是否成功的返回值。</summary>
<returns>如果成功转换了 <paramref name="s"/>，则为 true；否则为 false。</returns>
<param name="s">包含要转换的数字的字符串。 </param>
<param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s"/> 中包含的数字等效的 64 位带符号整数值；如果转换失败，则包含零。如果 <paramref name="s"/> 参数为 null，格式不正确，或者表示的数字小于 <see cref="F:System.Int64.MinValue"/> 或大于 <see cref="F:System.Int64.MaxValue"/>，则转换会失败。该参数未经初始化即被传递。 </param>
    </member>
    <member name="T:System.IntPtr">
<summary>用于表示指针或句柄的平台特定的类型。</summary>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int32)">
<summary>使用指定的 32 位指针或句柄初始化 <see cref="T:System.IntPtr"/> 的新实例。</summary>
<param name="value">32 位带符号整数中包含的指针或句柄。 </param>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int64)">
<summary>使用指定的 64 位指针初始化 <see cref="T:System.IntPtr"/> 的新实例。</summary>
<param name="value">64 位有符号的整数中包含的指针或句柄。 </param>
<exception cref="T:System.OverflowException">在 32 位的平台上，<paramref name="value"/> 太大或太小，无法表示为 <see cref="T:System.IntPtr"/>。 </exception>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Void*)">
<summary>使用指定的指向未指定类型的指针来初始化 <see cref="T:System.IntPtr"/> 的新实例。</summary>
<param name="value">指向未指定类型的指针。 </param>
    </member>
    <member name="M:System.IntPtr.Equals(System.Object)">
<summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
<returns>如果 <paramref name="obj"/> 是 <see cref="T:System.IntPtr"/> 的实例并且等于此实例的值，则为 true；否则为 false。</returns>
<param name="obj">要与此实例比较的对象或 null。 </param>
    </member>
    <member name="M:System.IntPtr.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="M:System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)">
<summary>确定 <see cref="T:System.IntPtr"/> 的两个指定的实例是否相等。</summary>
<returns>如果 <paramref name="value1"/> 等于 <paramref name="value2"/>，则为 true；否则为 false。</returns>
<param name="value1"><see cref="T:System.IntPtr"/>。 </param>
<param name="value2"><see cref="T:System.IntPtr"/>。 </param>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int32)~System.IntPtr">
<summary>将 32 位有符号的整数值转换成 <see cref="T:System.IntPtr"/>。</summary>
<returns>初始化为 <paramref name="value"/> 的 <see cref="T:System.IntPtr"/> 新实例。</returns>
<param name="value">32 位带符号整数。 </param>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int64)~System.IntPtr">
<summary>将 64 位有符号的整数值转换成 <see cref="T:System.IntPtr"/>。</summary>
<returns>初始化为 <paramref name="value"/> 的 <see cref="T:System.IntPtr"/> 新实例。</returns>
<param name="value">64 位带符号整数。 </param>
<exception cref="T:System.OverflowException">在 32 位的平台上，<paramref name="value"/> 太大，无法表示为一个 <see cref="T:System.IntPtr"/>。 </exception>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Void*">
<summary>将指定的 <see cref="T:System.IntPtr"/> 的值转换为指向未指定类型的指针。</summary>
<returns><paramref name="value"/> 的内容。</returns>
<param name="value"><see cref="T:System.IntPtr"/>。 </param>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int64">
<summary>将指定 <see cref="T:System.IntPtr"/> 的值转换为 64 位带符号整数。</summary>
<returns><paramref name="value"/> 的内容。</returns>
<param name="value"><see cref="T:System.IntPtr"/>。 </param>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int32">
<summary>将指定 <see cref="T:System.IntPtr"/> 的值转换为 32 位带符号整数。</summary>
<returns><paramref name="value"/> 的内容。</returns>
<param name="value"><see cref="T:System.IntPtr"/>。 </param>
<exception cref="T:System.OverflowException">在 64 位平台上，<paramref name="value"/> 的值太大，无法表示为一个 32 位带符号整数。 </exception>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr">
<summary>将指向未指定类型的指定指针转换为 <see cref="T:System.IntPtr"/>。</summary>
<returns>初始化为 <paramref name="value"/> 的 <see cref="T:System.IntPtr"/> 新实例。</returns>
<param name="value">指向未指定类型的指针。 </param>
    </member>
    <member name="M:System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)">
<summary>确定 <see cref="T:System.IntPtr"/> 的两个指定的实例是否不相等。</summary>
<returns>如果 <paramref name="value1"/> 不等于 <paramref name="value2"/>，则为 true；否则为 false。</returns>
<param name="value1"><see cref="T:System.IntPtr"/>。 </param>
<param name="value2"><see cref="T:System.IntPtr"/>。 </param>
    </member>
    <member name="P:System.IntPtr.Size">
<summary>获得此实例的大小。</summary>
<returns>此平台上的指针或句柄的大小，按字节计。此属性的值在 32 位平台上为 4，在 64 位平台上为 8。</returns>
    </member>
    <member name="M:System.IntPtr.ToInt32">
<summary>将此实例的值转换为 32 位有符号的整数。</summary>
<returns>与此实例的值相等的 32 位带符号整数。</returns>
<exception cref="T:System.OverflowException">在 64 位平台上，此实例的值太大或太小，无法表示为一个 32 位有符号的整数。 </exception>
    </member>
    <member name="M:System.IntPtr.ToInt64">
<summary>将此实例的值转换为 64 位有符号的整数。</summary>
<returns>与此实例的值相等的 64 位带符号整数。</returns>
    </member>
    <member name="M:System.IntPtr.ToPointer">
<summary>将此实例的值转换为指向未指定的类型的指针。</summary>
<returns>指向 <see cref="T:System.Void"/> 的指针，即是说，该指针所指向的内存包含有未指定的类型的数据。</returns>
    </member>
    <member name="M:System.IntPtr.ToString">
<summary>将当前 <see cref="T:System.IntPtr"/> 对象的数值转换为其等效的字符串表示形式。</summary>
<returns>此实例的值的字符串表示。</returns>
    </member>
    <member name="F:System.IntPtr.Zero">
<summary>一个只读字段，代表已初始化为零的指针或句柄。</summary>
    </member>
    <member name="T:System.InvalidCastException">
<summary>因无效类型转换或显式转换引发的异常。</summary>
    </member>
    <member name="M:System.InvalidCastException.#ctor">
<summary>初始化 <see cref="T:System.InvalidCastException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.InvalidCastException"/> 类的新实例。</summary>
<param name="message">描述错误的消息。 </param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.InvalidCastException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不是 null 引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。 </param>
    </member>
    <member name="T:System.InvalidOperationException">
<summary>当方法调用对于对象的当前状态无效时引发的异常。</summary>
    </member>
    <member name="M:System.InvalidOperationException.#ctor">
<summary>初始化 <see cref="T:System.InvalidOperationException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.InvalidOperationException"/> 类的新实例。</summary>
<param name="message">描述错误的消息。 </param>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.InvalidOperationException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不是 null 引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。 </param>
    </member>
    <member name="T:System.InvalidProgramException">
<summary>当程序包含无效的 Microsoft 中间语言 (MSIL) 或元数据时引发的异常。这通常表示生成程序的编译器中有 bug。</summary>
    </member>
    <member name="M:System.InvalidProgramException.#ctor">
<summary>使用默认属性初始化 <see cref="T:System.InvalidProgramException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.InvalidProgramException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.InvalidProgramException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
    </member>
    <member name="M:System.InvalidProgramException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.InvalidProgramException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="inner">导致当前异常的异常。如果 <paramref name="inner"/> 参数不是 null 引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。 </param>
    </member>
    <member name="T:System.InvalidTimeZoneException">
<summary>时区信息无效时引发的异常。</summary>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor">
<summary>使用系统提供的消息初始化 <see cref="T:System.InvalidTimeZoneException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor(System.String)">
<summary>使用指定的消息字符串初始化 <see cref="T:System.InvalidTimeZoneException"/> 类的新实例。</summary>
<param name="message">描述异常的字符串。</param>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.InvalidTimeZoneException"/> 类的新实例。</summary>
<param name="message">描述异常的消息。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。 </param>
<param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="T:System.IServiceProvider">
<summary>定义一种检索服务对象的机制，服务对象是为其他对象提供自定义支持的对象。</summary>
    </member>
    <member name="M:System.IServiceProvider.GetService(System.Type)">
<summary>获取指定类型的服务对象。</summary>
<returns><paramref name="serviceType"/> 类型的服务对象。-或- 如果没有 <paramref name="serviceType"/> 类型的服务对象，则为 null。</returns>
<param name="serviceType">一个对象，指定要获取的服务对象的类型。 </param>
    </member>
    <member name="T:System.LoaderOptimization">
<summary>一个用于为可执行文件指定加载程序优化的枚举。</summary>
    </member>
    <member name="F:System.LoaderOptimization.NotSpecified">
<summary>指示未指定共享内部资源的优化。如果默认域或宿主接口指定了优化，则加载程序将使用该优化；否则，加载程序将使用 <see cref="F:System.LoaderOptimization.SingleDomain"/>。</summary>
    </member>
    <member name="F:System.LoaderOptimization.SingleDomain">
<summary>指示应用程序可能有一个域，加载程序不得在应用程序域之间共享内部资源。 </summary>
    </member>
    <member name="F:System.LoaderOptimization.MultiDomain">
<summary>指示应用程序可能有许多域使用相同的代码，加载程序必须在应用程序域之间最大限度地共享内部资源。 </summary>
    </member>
    <member name="F:System.LoaderOptimization.MultiDomainHost">
<summary>指示应用程序将可能在多个域中承载唯一代码，而且加载程序必须在应用程序域之间仅共享已添加至全局程序集缓存中的全局可用（具有强名称）的程序集资源。 </summary>
    </member>
    <member name="T:System.Math">
<summary>为三角函数、对数函数和其他通用数学函数提供常数和静态方法。</summary>
    </member>
    <member name="M:System.Math.Abs(System.Decimal)">
<summary>返回 <see cref="T:System.Decimal"/> 数字的绝对值。</summary>
<returns><see cref="T:System.Decimal"/> 值 x，满足 0 ≤ x ≤<see cref="F:System.Decimal.MaxValue"/>。</returns>
<param name="value">一个大于或等于 <see cref="F:System.Decimal.MinValue"/> 但小于或等于 <see cref="F:System.Decimal.MaxValue"/> 的数字。 </param>
    </member>
    <member name="M:System.Math.Abs(System.Double)">
<summary>返回双精度浮点数字的绝对值。</summary>
<returns>一个双精度浮点数 x，满足 0 ≤ x ≤<see cref="F:System.Double.MaxValue"/>。</returns>
<param name="value">一个大于或等于 <see cref="F:System.Double.MinValue"/> 但小于或等于 <see cref="F:System.Double.MaxValue"/> 的数字。</param>
    </member>
    <member name="M:System.Math.Abs(System.Int16)">
<summary>返回 16 位带符号整数的绝对值。</summary>
<returns>16 位带符号整数 x，满足 0 ≤ x ≤<see cref="F:System.Int16.MaxValue"/>。</returns>
<param name="value">一个大于 <see cref="F:System.Int16.MinValue"/> 但小于或等于 <see cref="F:System.Int16.MaxValue"/> 的数字。</param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 等于 <see cref="F:System.Int16.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Math.Abs(System.Int32)">
<summary>返回 32 位带符号整数的绝对值。</summary>
<returns>32 位带符号整数 x，满足 0 ≤ x ≤<see cref="F:System.Int32.MaxValue"/>。</returns>
<param name="value">一个大于 <see cref="F:System.Int32.MinValue"/> 但小于或等于 <see cref="F:System.Int32.MaxValue"/> 的数字。</param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 等于 <see cref="F:System.Int32.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Math.Abs(System.Int64)">
<summary>返回 64 位带符号整数的绝对值。</summary>
<returns>64 位带符号整数 x，满足 0 ≤ x ≤<see cref="F:System.Int64.MaxValue"/>。</returns>
<param name="value">一个大于 <see cref="F:System.Int64.MinValue"/> 但小于或等于 <see cref="F:System.Int64.MaxValue"/> 的数字。</param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 等于 <see cref="F:System.Int64.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Math.Abs(System.SByte)">
<summary>返回 8 位带符号整数的绝对值。</summary>
<returns>8 位带符号整数 x，满足 0 ≤ x ≤<see cref="F:System.SByte.MaxValue"/>。</returns>
<param name="value">一个大于 <see cref="F:System.SByte.MinValue"/> 但小于或等于 <see cref="F:System.SByte.MaxValue"/> 的数字。</param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 等于 <see cref="F:System.SByte.MinValue"/>。 </exception>
    </member>
    <member name="M:System.Math.Abs(System.Single)">
<summary>返回单精度浮点数字的绝对值。</summary>
<returns>一个单精度浮点数 x，满足 0 ≤ x ≤<see cref="F:System.Single.MaxValue"/>。</returns>
<param name="value">一个大于或等于 <see cref="F:System.Single.MinValue"/> 但小于或等于 <see cref="F:System.Single.MaxValue"/> 的数字。</param>
    </member>
    <member name="M:System.Math.Acos(System.Double)">
<summary>返回余弦值为指定数字的角度。</summary>
<returns>角度 θ，以弧度为单位，满足 0 ≤θ≤π -或- 如果 <paramref name="d"/> &lt; -1 或 <paramref name="d"/> &gt; 1 或 <paramref name="d"/> 等于 <see cref="F:System.Double.NaN"/>，则为 <see cref="F:System.Double.NaN"/>。</returns>
<param name="d">一个表示余弦值的数字，其中 <paramref name="d"/> 必须大于或等于 -1，但小于或等于 1。 </param>
    </member>
    <member name="M:System.Math.Asin(System.Double)">
<summary>返回正弦值为指定数字的角度。</summary>
<returns>角度 θ，以弧度为单位，满足 -π/2 ≤θ≤π/2 -或- 如果 <paramref name="d"/> &lt; -1 或 <paramref name="d"/> &gt; 1 或 <paramref name="d"/> 等于 <see cref="F:System.Double.NaN"/>，则为 <see cref="F:System.Double.NaN"/>。</returns>
<param name="d">一个表示正弦值的数字，其中 <paramref name="d"/> 必须大于或等于 -1，但小于或等于 1。 </param>
    </member>
    <member name="M:System.Math.Atan(System.Double)">
<summary>返回正切值为指定数字的角度。</summary>
<returns>角度 θ，以弧度为单位，满足 -π/2 ≤θ≤π/2。-或- 如果 <paramref name="d"/> 等于 <see cref="F:System.Double.NaN"/>，则为 <see cref="F:System.Double.NaN"/>；如果 <paramref name="d"/> 等于 <see cref="F:System.Double.NegativeInfinity"/>，则为舍入为双精度值 (-1.5707963267949) 的 -π/2；如果 <paramref name="d"/> 等于 <see cref="F:System.Double.PositiveInfinity"/>，则为舍入为双精度值 (1.5707963267949) 的 π/2。</returns>
<param name="d">表示正切值的数字。 </param>
    </member>
    <member name="M:System.Math.Atan2(System.Double,System.Double)">
<summary>返回正切值为两个指定数字的商的角度。</summary>
<returns>角度 θ，以弧度为单位，满足 -π≤θ≤π，且 tan(θ) = <paramref name="y"/> / <paramref name="x"/>，其中 (<paramref name="x"/>, <paramref name="y"/>) 是笛卡尔平面中的点。请看下面：如果 (<paramref name="x"/>, <paramref name="y"/>) 在第 1 象限，则 0 &lt; θ &lt; π/2。如果 (<paramref name="x"/>, <paramref name="y"/>) 在第 2 象限，则 π/2 &lt; θ≤π。如果 (<paramref name="x"/>, <paramref name="y"/>) 在第 3 象限，则 -π &lt; θ &lt; -π/2。如果 (<paramref name="x"/>, <paramref name="y"/>) 在第 4 象限，则 -π/2 &lt; θ &lt; 0。如果点在象限的边界上，则返回值如下：如果 y 为 0 且 <paramref name="x"/> 非负，则 θ = 0。如果 y 为 0 且 <paramref name="x"/> 为负，则 θ = π。如果 y 为负且 <paramref name="x"/> 为 0，则 θ = π/2。如果 y 为负且 x 为 0，则 θ = -π/2。如果 <paramref name="x"/> 或 <paramref name="y"/> 为 <see cref="F:System.Double.NaN"/> 或者如果 <paramref name="x"/> 和 <paramref name="y"/> 为 <see cref="F:System.Double.PositiveInfinity"/> 或 <see cref="F:System.Double.NegativeInfinity"/>，则此方法返回 <see cref="F:System.Double.NaN"/>。</returns>
<param name="y">点的 y 坐标。 </param>
<param name="x">点的 x 坐标。 </param>
    </member>
    <member name="M:System.Math.Ceiling(System.Double)">
<summary>返回大于或等于指定的双精度浮点数的最小整数值。</summary>
<returns>大于或等于 <paramref name="a"/> 的最小整数值。如果 <paramref name="a"/> 等于 <see cref="F:System.Double.NaN"/>、<see cref="F:System.Double.NegativeInfinity"/> 或 <see cref="F:System.Double.PositiveInfinity"/>，则返回该值。请注意，该方法返回一个 <see cref="T:System.Double"/>，而不是整数类型。</returns>
<param name="a">双精度浮点数。 </param>
    </member>
    <member name="M:System.Math.Cos(System.Double)">
<summary>返回指定角度的余弦值。</summary>
<returns><paramref name="d"/> 的余弦值。如果 <paramref name="d"/> 等于 <see cref="F:System.Double.NaN"/>、<see cref="F:System.Double.NegativeInfinity"/> 或 <see cref="F:System.Double.PositiveInfinity"/>，此方法将返回 <see cref="F:System.Double.NaN"/>。</returns>
<param name="d">以弧度计量的角度。 </param>
    </member>
    <member name="M:System.Math.Cosh(System.Double)">
<summary>返回指定角度的双曲余弦值。</summary>
<returns><paramref name="value"/> 的双曲余弦值。如果 <paramref name="value"/> 等于 <see cref="F:System.Double.NegativeInfinity"/> 或 <see cref="F:System.Double.PositiveInfinity"/>，则返回 <see cref="F:System.Double.PositiveInfinity"/>。如果 <paramref name="value"/> 等于 <see cref="F:System.Double.NaN"/>，则返回 <see cref="F:System.Double.NaN"/>。</returns>
<param name="value">以弧度计量的角度。 </param>
    </member>
    <member name="F:System.Math.E">
<summary>表示自然对数的底，它由常数 e 指定。</summary>
    </member>
    <member name="M:System.Math.Exp(System.Double)">
<summary>返回 e 的指定次幂。</summary>
<returns>数字 e 的 <paramref name="d"/> 次幂。如果 <paramref name="d"/> 等于 <see cref="F:System.Double.NaN"/> 或 <see cref="F:System.Double.PositiveInfinity"/>，则返回该值。如果 <paramref name="d"/> 等于 <see cref="F:System.Double.NegativeInfinity"/>，则返回 0。</returns>
<param name="d">指定幂的数字。 </param>
    </member>
    <member name="M:System.Math.Floor(System.Double)">
<summary>返回小于或等于指定双精度浮点数的最大整数。</summary>
<returns>小于或等于 <paramref name="d"/> 的最大整数。如果 <paramref name="d"/> 等于 <see cref="F:System.Double.NaN"/>、<see cref="F:System.Double.NegativeInfinity"/> 或 <see cref="F:System.Double.PositiveInfinity"/>，则返回该值。</returns>
<param name="d">双精度浮点数。 </param>
    </member>
    <member name="M:System.Math.IEEERemainder(System.Double,System.Double)">
<summary>返回一指定数字被另一指定数字相除的余数。</summary>
<returns>该数等于 <paramref name="x"/> - (<paramref name="y"/> Q)，其中 Q 是 <paramref name="x"/> / <paramref name="y"/> 的商的最接近整数（如果 <paramref name="x"/> / <paramref name="y"/> 在两个整数中间，则返回偶数）。如果 <paramref name="x"/> - (<paramref name="y"/> Q) 为零，则在 <paramref name="x"/> 为正时返回值 +0，而在 <paramref name="x"/> 为负时返回 -0。如果 <paramref name="y"/> = 0，则返回 <see cref="F:System.Double.NaN"/>（非数字）。</returns>
<param name="x">被除数。 </param>
<param name="y">除数。 </param>
    </member>
    <member name="M:System.Math.Log(System.Double)">
<summary>返回指定数字的自然对数（底为 e）。</summary>
<returns>下表中的值之一。<paramref name="d"/> 的符号 返回正数 <paramref name="d"/> 的自然对数，即 ln <paramref name="d"/> 或 log e<paramref name="d"/>零 <see cref="F:System.Double.NegativeInfinity"/>负数 <see cref="F:System.Double.NaN"/>等于 <see cref="F:System.Double.NaN"/><see cref="F:System.Double.NaN"/>等于 <see cref="F:System.Double.PositiveInfinity"/><see cref="F:System.Double.PositiveInfinity"/></returns>
<param name="d">要查找其对数的数字。 </param>
    </member>
    <member name="M:System.Math.Log(System.Double,System.Double)">
<summary>返回指定数字在使用指定底时的对数。</summary>
<returns>下表中的值之一。（+Infinity 表示 <see cref="F:System.Double.PositiveInfinity"/>，-Infinity 表示 <see cref="F:System.Double.NegativeInfinity"/>，NaN 表示 <see cref="F:System.Double.NaN"/>。）<paramref name="a"/><paramref name="newBase"/>返回值<paramref name="a"/>&gt; 0(0 &lt;<paramref name="newBase"/>&lt; 1) -或-(<paramref name="newBase"/>&gt; 1)lognewBase(a)<paramref name="a"/>&lt; 0(any value)NaN(any value)<paramref name="newBase"/>&lt; 0NaN<paramref name="a"/> != 1<paramref name="newBase"/> = 0NaN<paramref name="a"/> != 1<paramref name="newBase"/> = +InfinityNaN<paramref name="a"/> = NaN(any value)NaN(any value)<paramref name="newBase"/> = NaNNaN(any value)<paramref name="newBase"/> = 1NaN<paramref name="a"/> = 00 &lt;<paramref name="newBase"/>&lt; 1 +Infinity<paramref name="a"/> = 0<paramref name="newBase"/>&gt; 1-Infinity<paramref name="a"/> =  +Infinity0 &lt;<paramref name="newBase"/>&lt; 1-Infinity<paramref name="a"/> =  +Infinity<paramref name="newBase"/>&gt; 1+Infinity<paramref name="a"/> = 1<paramref name="newBase"/> = 00<paramref name="a"/> = 1<paramref name="newBase"/> = +Infinity0</returns>
<param name="a">要查找其对数的数字。 </param>
<param name="newBase">对数的底。 </param>
    </member>
    <member name="M:System.Math.Log10(System.Double)">
<summary>返回指定数字以 10 为底的对数。</summary>
<returns>下表中的值之一。<paramref name="d"/> 的符号 返回正数 <paramref name="d"/> 的以 10 为底的对数，即 log 10<paramref name="d"/>。零 <see cref="F:System.Double.NegativeInfinity"/>负数 <see cref="F:System.Double.NaN"/>等于 <see cref="F:System.Double.NaN"/><see cref="F:System.Double.NaN"/>等于 <see cref="F:System.Double.PositiveInfinity"/><see cref="F:System.Double.PositiveInfinity"/></returns>
<param name="d">要查找其对数的数字。 </param>
    </member>
    <member name="M:System.Math.Max(System.Byte,System.Byte)">
<summary>返回两个 8 位无符号整数中较大的一个。</summary>
<returns><paramref name="val1"/> 或 <paramref name="val2"/> 参数中较大的一个。</returns>
<param name="val1">要比较的两个 8 位无符号整数中的第一个。 </param>
<param name="val2">要比较的两个 8 位无符号整数中的第二个。 </param>
    </member>
    <member name="M:System.Math.Max(System.Decimal,System.Decimal)">
<summary>返回两个十进制数中较大的一个。</summary>
<returns><paramref name="val1"/> 或 <paramref name="val2"/> 参数中较大的一个。</returns>
<param name="val1">要比较的两个 <see cref="T:System.Decimal"/> 数字中的第一个。 </param>
<param name="val2">要比较的两个 <see cref="T:System.Decimal"/> 数字中的第二个。 </param>
    </member>
    <member name="M:System.Math.Max(System.Double,System.Double)">
<summary>返回两个双精度浮点数字中较大的一个。</summary>
<returns><paramref name="val1"/> 或 <paramref name="val2"/> 参数中较大的一个。如果 <paramref name="val1"/> 或 <paramref name="val2"/> 或者 <paramref name="val1"/> 和 <paramref name="val2"/> 都等于 <see cref="F:System.Double.NaN"/>，则返回 <see cref="F:System.Double.NaN"/>。</returns>
<param name="val1">要比较的两个双精度浮点数中的第一个。 </param>
<param name="val2">要比较的两个双精度浮点数中的第二个。 </param>
    </member>
    <member name="M:System.Math.Max(System.Int16,System.Int16)">
<summary>返回两个 16 位有符号的整数中较大的一个。</summary>
<returns><paramref name="val1"/> 或 <paramref name="val2"/> 参数中较大的一个。</returns>
<param name="val1">要比较的两个 16 位有符号的整数中的第一个。 </param>
<param name="val2">要比较的两个 16 位有符号的整数中的第二个。 </param>
    </member>
    <member name="M:System.Math.Max(System.Int32,System.Int32)">
<summary>返回两个 32 位有符号的整数中较大的一个。</summary>
<returns><paramref name="val1"/> 或 <paramref name="val2"/> 参数中较大的一个。</returns>
<param name="val1">要比较的两个 32 位有符号的整数中的第一个。 </param>
<param name="val2">要比较的两个 32 位有符号的整数中的第二个。 </param>
    </member>
    <member name="M:System.Math.Max(System.Int64,System.Int64)">
<summary>返回两个 64 位有符号的整数中较大的一个。</summary>
<returns><paramref name="val1"/> 或 <paramref name="val2"/> 参数中较大的一个。</returns>
<param name="val1">要比较的两个 64 位有符号的整数中的第一个。 </param>
<param name="val2">要比较的两个 64 位有符号的整数中的第二个。 </param>
    </member>
    <member name="M:System.Math.Max(System.SByte,System.SByte)">
<summary>返回两个 8 位有符号的整数中较大的一个。</summary>
<returns><paramref name="val1"/> 或 <paramref name="val2"/> 参数中较大的一个。</returns>
<param name="val1">要比较的两个 8 位有符号的整数中的第一个。 </param>
<param name="val2">要比较的两个 8 位有符号的整数中的第二个。 </param>
    </member>
    <member name="M:System.Math.Max(System.Single,System.Single)">
<summary>返回两个单精度浮点数字中较大的一个。</summary>
<returns><paramref name="val1"/> 或 <paramref name="val2"/> 参数中较大的一个。如果 <paramref name="val1"/>、<paramref name="val2"/> 或者 <paramref name="val1"/> 和 <paramref name="val2"/> 都等于 <see cref="F:System.Single.NaN"/>，则返回 <see cref="F:System.Single.NaN"/>。</returns>
<param name="val1">要比较的两个单精度浮点数中的第一个。 </param>
<param name="val2">要比较的两个单精度浮点数中的第二个。 </param>
    </member>
    <member name="M:System.Math.Max(System.UInt16,System.UInt16)">
<summary>返回两个 16 位无符号整数中较大的一个。</summary>
<returns><paramref name="val1"/> 或 <paramref name="val2"/> 参数中较大的一个。</returns>
<param name="val1">要比较的两个 16 位无符号整数中的第一个。 </param>
<param name="val2">要比较的两个 16 位无符号整数中的第二个。 </param>
    </member>
    <member name="M:System.Math.Max(System.UInt32,System.UInt32)">
<summary>返回两个 32 位无符号整数中较大的一个。</summary>
<returns><paramref name="val1"/> 或 <paramref name="val2"/> 参数中较大的一个。</returns>
<param name="val1">要比较的两个 32 位无符号整数中的第一个。 </param>
<param name="val2">要比较的两个 32 位无符号整数中的第二个。 </param>
    </member>
    <member name="M:System.Math.Max(System.UInt64,System.UInt64)">
<summary>返回两个 64 位无符号整数中较大的一个。</summary>
<returns><paramref name="val1"/> 或 <paramref name="val2"/> 参数中较大的一个。</returns>
<param name="val1">要比较的两个 64 位无符号整数中的第一个。 </param>
<param name="val2">要比较的两个 64 位无符号整数中的第二个。 </param>
    </member>
    <member name="M:System.Math.Min(System.Byte,System.Byte)">
<summary>返回两个 8 位无符号整数中较小的一个。</summary>
<returns><paramref name="val1"/> 或 <paramref name="val2"/> 参数中较小的一个。</returns>
<param name="val1">要比较的两个 8 位无符号整数中的第一个。 </param>
<param name="val2">要比较的两个 8 位无符号整数中的第二个。 </param>
    </member>
    <member name="M:System.Math.Min(System.Decimal,System.Decimal)">
<summary>返回两个十进制数中较小的一个。</summary>
<returns><paramref name="val1"/> 或 <paramref name="val2"/> 参数中较小的一个。</returns>
<param name="val1">要比较的两个 <see cref="T:System.Decimal"/> 数字中的第一个。 </param>
<param name="val2">要比较的两个 <see cref="T:System.Decimal"/> 数字中的第二个。 </param>
    </member>
    <member name="M:System.Math.Min(System.Double,System.Double)">
<summary>返回两个双精度浮点数字中较小的一个。</summary>
<returns><paramref name="val1"/> 或 <paramref name="val2"/> 参数中较小的一个。如果 <paramref name="val1"/> 或 <paramref name="val2"/> 或者 <paramref name="val1"/> 和 <paramref name="val2"/> 都等于 <see cref="F:System.Double.NaN"/>，则返回 <see cref="F:System.Double.NaN"/>。</returns>
<param name="val1">要比较的两个双精度浮点数中的第一个。 </param>
<param name="val2">要比较的两个双精度浮点数中的第二个。 </param>
    </member>
    <member name="M:System.Math.Min(System.Int16,System.Int16)">
<summary>返回两个 16 位带符号整数中较小的一个。</summary>
<returns><paramref name="val1"/> 或 <paramref name="val2"/> 参数中较小的一个。</returns>
<param name="val1">要比较的两个 16 位有符号的整数中的第一个。 </param>
<param name="val2">要比较的两个 16 位有符号的整数中的第二个。 </param>
    </member>
    <member name="M:System.Math.Min(System.Int32,System.Int32)">
<summary>返回两个 32 位带符号整数中较小的一个。</summary>
<returns><paramref name="val1"/> 或 <paramref name="val2"/> 参数中较小的一个。</returns>
<param name="val1">要比较的两个 32 位有符号的整数中的第一个。 </param>
<param name="val2">要比较的两个 32 位有符号的整数中的第二个。 </param>
    </member>
    <member name="M:System.Math.Min(System.Int64,System.Int64)">
<summary>返回两个 64 位带符号整数中较小的一个。</summary>
<returns><paramref name="val1"/> 或 <paramref name="val2"/> 参数中较小的一个。</returns>
<param name="val1">要比较的两个 64 位有符号的整数中的第一个。 </param>
<param name="val2">要比较的两个 64 位有符号的整数中的第二个。 </param>
    </member>
    <member name="M:System.Math.Min(System.SByte,System.SByte)">
<summary>返回两个 8 位带符号整数中较小的一个。</summary>
<returns><paramref name="val1"/> 或 <paramref name="val2"/> 参数中较小的一个。</returns>
<param name="val1">要比较的两个 8 位有符号的整数中的第一个。 </param>
<param name="val2">要比较的两个 8 位有符号的整数中的第二个。 </param>
    </member>
    <member name="M:System.Math.Min(System.Single,System.Single)">
<summary>返回两个单精度浮点数字中较小的一个。</summary>
<returns><paramref name="val1"/> 或 <paramref name="val2"/> 参数中较小的一个。如果 <paramref name="val1"/> 或 <paramref name="val2"/> 或者 <paramref name="val1"/> 和 <paramref name="val2"/> 都等于 <see cref="F:System.Single.NaN"/>，则返回 <see cref="F:System.Single.NaN"/>。</returns>
<param name="val1">要比较的两个单精度浮点数中的第一个。 </param>
<param name="val2">要比较的两个单精度浮点数中的第二个。 </param>
    </member>
    <member name="M:System.Math.Min(System.UInt16,System.UInt16)">
<summary>返回两个 16 位无符号整数中较小的一个。</summary>
<returns><paramref name="val1"/> 或 <paramref name="val2"/> 参数中较小的一个。</returns>
<param name="val1">要比较的两个 16 位无符号整数中的第一个。 </param>
<param name="val2">要比较的两个 16 位无符号整数中的第二个。 </param>
    </member>
    <member name="M:System.Math.Min(System.UInt32,System.UInt32)">
<summary>返回两个 32 位无符号整数中较小的一个。</summary>
<returns><paramref name="val1"/> 或 <paramref name="val2"/> 参数中较小的一个。</returns>
<param name="val1">要比较的两个 32 位无符号整数中的第一个。 </param>
<param name="val2">要比较的两个 32 位无符号整数中的第二个。 </param>
    </member>
    <member name="M:System.Math.Min(System.UInt64,System.UInt64)">
<summary>返回两个 64 位无符号整数中较小的一个。</summary>
<returns><paramref name="val1"/> 或 <paramref name="val2"/> 参数中较小的一个。</returns>
<param name="val1">要比较的两个 64 位无符号整数中的第一个。 </param>
<param name="val2">要比较的两个 64 位无符号整数中的第二个。 </param>
    </member>
    <member name="F:System.Math.PI">
<summary>表示圆的周长与其直径的比值，由常数 π 指定。</summary>
    </member>
    <member name="M:System.Math.Pow(System.Double,System.Double)">
<summary>返回指定数字的指定次幂。</summary>
<returns>数字 <paramref name="x"/> 的 <paramref name="y"/> 次幂。</returns>
<param name="x">要乘幂的双精度浮点数。 </param>
<param name="y">指定幂的双精度浮点数。 </param>
    </member>
    <member name="M:System.Math.Round(System.Decimal)">
<summary>将小数值舍入到最接近的整数值。</summary>
<returns>最接近参数 <paramref name="d"/> 的整数。如果 <paramref name="d"/> 的小数部分正好处于两个整数中间，其中一个整数为偶数，另一个整数为奇数，则返回偶数。请注意，该方法返回 <see cref="T:System.Decimal"/> 类型，而不是整数类型。</returns>
<param name="d">要舍入的小数。 </param>
<exception cref="T:System.OverflowException">结果超出了 <see cref="T:System.Decimal"/> 的范围。</exception>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.Int32)">
<summary>将小数值按指定的小数位数舍入。</summary>
<returns>小数数字等于 <paramref name="decimals"/>，且最接近于 <paramref name="d"/> 的数字。 </returns>
<param name="d">要舍入的小数。 </param>
<param name="decimals">返回值中的小数位数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="decimals"/> 小于 0 或大于 28。 </exception>
<exception cref="T:System.OverflowException">结果超出了 <see cref="T:System.Decimal"/> 的范围。</exception>
    </member>
    <member name="M:System.Math.Round(System.Double)">
<summary>将双精度浮点值舍入为最接近的整数值。</summary>
<returns>最接近 <paramref name="a"/> 的整数。如果 <paramref name="a"/> 的小数部分正好处于两个整数中间，其中一个整数为偶数，另一个整数为奇数，则返回偶数。请注意，该方法返回 <see cref="T:System.Double"/> 类型，而不是整数类型。</returns>
<param name="a">要舍入的双精度浮点数。 </param>
    </member>
    <member name="M:System.Math.Round(System.Double,System.Int32)">
<summary>将双精度浮点值按指定的小数位数舍入。</summary>
<returns>小数数字等于 <paramref name="digits"/>，且最接近于 <paramref name="value"/> 的数字。</returns>
<param name="value">要舍入的双精度浮点数。 </param>
<param name="digits">返回值中的小数位数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="digits"/> 小于 0 或大于 15。 </exception>
    </member>
    <member name="M:System.Math.Sign(System.Decimal)">
<summary>返回表示数字符号的值。</summary>
<returns>一个指示 <paramref name="value"/> 的符号的数字。数字 描述 -1 <paramref name="value"/> 小于零。0 <paramref name="value"/> 等于零。1 <paramref name="value"/> 大于零。 </returns>
<param name="value">有符号的 <see cref="T:System.Decimal"/> 数字。 </param>
    </member>
    <member name="M:System.Math.Sign(System.Double)">
<summary>返回表示双精度浮点数字的符号的值。</summary>
<returns>一个指示 <paramref name="value"/> 的符号的数字。数字 描述 -1 <paramref name="value"/> 小于零。0 <paramref name="value"/> 等于零。1 <paramref name="value"/> 大于零。 </returns>
<param name="value">有符号的数字。 </param>
      <exception cref="T:System.ArithmeticException">
<paramref name="value"/> 等于 <see cref="F:System.Double.NaN"/>。 </exception>
    </member>
    <member name="M:System.Math.Sign(System.Int16)">
<summary>返回表示 16 位带符号整数的符号的值。</summary>
<returns>一个指示 <paramref name="value"/> 的符号的数字。数字 描述 -1 <paramref name="value"/> 小于零。0 <paramref name="value"/> 等于零。1 <paramref name="value"/> 大于零。 </returns>
<param name="value">有符号的数字。 </param>
    </member>
    <member name="M:System.Math.Sign(System.Int32)">
<summary>返回表示 32 位带符号整数的符号的值。</summary>
<returns>一个指示 <paramref name="value"/> 的符号的数字。数字 描述 -1 <paramref name="value"/> 小于零。0 <paramref name="value"/> 等于零。1 <paramref name="value"/> 大于零。 </returns>
<param name="value">有符号的数字。 </param>
    </member>
    <member name="M:System.Math.Sign(System.Int64)">
<summary>返回表示 64 位带符号整数的符号的值。</summary>
<returns>一个指示 <paramref name="value"/> 的符号的数字。数字 描述 -1 <paramref name="value"/> 小于零。0 <paramref name="value"/> 等于零。1 <paramref name="value"/> 大于零。 </returns>
<param name="value">有符号的数字。 </param>
    </member>
    <member name="M:System.Math.Sign(System.SByte)">
<summary>返回表示 8 位带符号整数的符号的值。</summary>
<returns>一个指示 <paramref name="value"/> 的符号的数字。数字 描述 -1 <paramref name="value"/> 小于零。0 <paramref name="value"/> 等于零。1 <paramref name="value"/> 大于零。 </returns>
<param name="value">有符号的数字。 </param>
    </member>
    <member name="M:System.Math.Sign(System.Single)">
<summary>返回表示单精度浮点数字的符号的值。</summary>
<returns>一个指示 <paramref name="value"/> 的符号的数字。数字 描述 -1 <paramref name="value"/> 小于零。0 <paramref name="value"/> 等于零。1 <paramref name="value"/> 大于零。 </returns>
<param name="value">有符号的数字。 </param>
      <exception cref="T:System.ArithmeticException">
<paramref name="value"/> 等于 <see cref="F:System.Single.NaN"/>。 </exception>
    </member>
    <member name="M:System.Math.Sin(System.Double)">
<summary>返回指定角度的正弦值。</summary>
<returns><paramref name="a"/> 的正弦值。如果 <paramref name="a"/> 等于 <see cref="F:System.Double.NaN"/>、<see cref="F:System.Double.NegativeInfinity"/> 或 <see cref="F:System.Double.PositiveInfinity"/>，此方法将返回 <see cref="F:System.Double.NaN"/>。</returns>
<param name="a">以弧度计量的角度。 </param>
    </member>
    <member name="M:System.Math.Sinh(System.Double)">
<summary>返回指定角度的双曲正弦值。</summary>
<returns><paramref name="value"/> 的双曲正弦值。如果 <paramref name="value"/> 等于 <see cref="F:System.Double.NegativeInfinity"/>、<see cref="F:System.Double.PositiveInfinity"/> 或 <see cref="F:System.Double.NaN"/>，则此方法返回等于 <paramref name="value"/> 的 <see cref="T:System.Double"/>。</returns>
<param name="value">以弧度计量的角度。 </param>
    </member>
    <member name="M:System.Math.Sqrt(System.Double)">
<summary>返回指定数字的平方根。</summary>
<returns><paramref name="d"/> 的值 返回零或正数 <paramref name="d"/> 的正平方根。负数 <see cref="F:System.Double.NaN"/> 如果 <paramref name="d"/> 等于 <see cref="F:System.Double.NaN"/> 或 <see cref="F:System.Double.PositiveInfinity"/>，则返回该值。</returns>
<param name="d">一个数字。 </param>
    </member>
    <member name="M:System.Math.Tan(System.Double)">
<summary>返回指定角度的正切值。</summary>
<returns><paramref name="a"/> 的正切值。如果 <paramref name="a"/> 等于 <see cref="F:System.Double.NaN"/>、<see cref="F:System.Double.NegativeInfinity"/> 或 <see cref="F:System.Double.PositiveInfinity"/>，此方法将返回 <see cref="F:System.Double.NaN"/>。</returns>
<param name="a">以弧度计量的角度。 </param>
    </member>
    <member name="M:System.Math.Tanh(System.Double)">
<summary>返回指定角度的双曲正切值。</summary>
<returns><paramref name="value"/> 的双曲正切值。如果 <paramref name="value"/> 等于 <see cref="F:System.Double.NegativeInfinity"/>，则该方法返回 -1。如果值等于 <see cref="F:System.Double.PositiveInfinity"/>，则该方法返回 1。如果 <paramref name="value"/> 等于 <see cref="F:System.Double.NaN"/>，则该方法返回 <see cref="F:System.Double.NaN"/>。</returns>
<param name="value">以弧度计量的角度。 </param>
    </member>
    <member name="T:System.MemberAccessException">
<summary>访问类成员的尝试失败时引发的异常。</summary>
    </member>
    <member name="M:System.MemberAccessException.#ctor">
<summary>初始化 <see cref="T:System.MemberAccessException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.MemberAccessException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.MemberAccessException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="inner">导致当前异常的异常。如果 <paramref name="inner"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="T:System.MethodAccessException">
<summary>非法尝试访问类中的私有方法或受保护的方法时引发的异常。</summary>
    </member>
    <member name="M:System.MethodAccessException.#ctor">
<summary>初始化 <see cref="T:System.MethodAccessException"/> 类的新实例，将新实例的 <see cref="P:System.Exception.Message"/> 属性设置为系统提供的描述错误的消息，如“试图访问该方法时失败”。此消息将考虑当前系统区域性。</summary>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.MethodAccessException"/> 类的新实例。</summary>
<param name="message">描述该错误的 <see cref="T:System.String"/>。 </param>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.MethodAccessException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="inner">导致当前异常的异常。如果 <paramref name="inner"/> 参数不是 null 引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。 </param>
    </member>
    <member name="T:System.MissingFieldException">
<summary>试图动态访问不存在的字段时引发的异常。</summary>
    </member>
    <member name="M:System.MissingFieldException.#ctor">
<summary>初始化 <see cref="T:System.MissingFieldException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.MissingFieldException"/> 类的新实例。</summary>
<param name="message">描述该错误的 <see cref="T:System.String"/>。 </param>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.MissingFieldException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="inner">导致当前异常的异常。如果 <paramref name="inner"/> 参数不是 null 引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。 </param>
    </member>
    <member name="P:System.MissingFieldException.Message">
<summary>获取一个文本字符串，其中显示缺少字段的签名、类名和字段名。此属性为只读。</summary>
<returns>错误消息字符串。</returns>
    </member>
    <member name="T:System.MissingMemberException">
<summary>试图动态访问不存在的类成员时引发的异常。</summary>
    </member>
    <member name="M:System.MissingMemberException.#ctor">
<summary>初始化 <see cref="T:System.MissingMemberException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.MissingMemberException"/> 类的新实例。</summary>
<param name="message">描述错误的消息。 </param>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常根本原因的内部异常的引用来初始化 <see cref="T:System.MissingMemberException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="inner">导致当前 Exception 的 <see cref="T:System.Exception"/> 的实例。如果 <paramref name="inner"/> 不是空引用（在 Visual Basic 中为 Nothing），则在处理 <paramref name="inner"/> 的 catch 块中引发当前的 Exception。 </param>
    </member>
    <member name="P:System.MissingMemberException.Message">
<summary>获取显示类名、成员名和缺少成员签名的文本字符串。</summary>
<returns>错误消息字符串。</returns>
    </member>
    <member name="T:System.MissingMethodException">
<summary>试图动态访问不存在的方法时引发的异常。</summary>
    </member>
    <member name="M:System.MissingMethodException.#ctor">
<summary>初始化 <see cref="T:System.MissingMethodException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.MissingMethodException"/> 类的新实例。</summary>
<param name="message">描述该错误的 <see cref="T:System.String"/>。 </param>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.MissingMethodException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="inner">导致当前异常的异常。如果 <paramref name="inner"/> 参数不是 null 引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。 </param>
    </member>
    <member name="P:System.MissingMethodException.Message">
<summary>获取一个文本字符串，其中显示类名、方法名称和缺少方法的签名。此属性为只读。</summary>
<returns>错误消息字符串。</returns>
    </member>
    <member name="T:System.MulticastDelegate">
<summary>表示多路广播委托；即，其调用列表中可以拥有多个元素的委托。</summary>
    </member>
    <member name="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
<summary>初始化 <see cref="T:System.MulticastDelegate"/> 类的新实例。</summary>
<param name="target">在其上定义 <paramref name="method"/> 的对象。 </param>
<param name="method">为其创建委托的方法的名称。 </param>
<exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者用后期绑定机制调用了该成员。 </exception>
    </member>
    <member name="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
<summary>将此 <see cref="T:System.Delegate"/> 与指定的 <see cref="T:System.Delegate"/> 合并，以形成一个新委托。</summary>
<returns>一个 <see cref="T:System.Delegate"/>，它是 <see cref="T:System.MulticastDelegate"/> 调用列表的新根。</returns>
<param name="follow">将与此委托进行合并的委托。 </param>
<exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者用后期绑定机制调用了该成员。 </exception>
<exception cref="T:System.ArgumentException"><paramref name="a"/> 和 <paramref name="b"/> 均不是 null，且 <paramref name="a"/> 和 <paramref name="b"/> 不是同一委托类型的实例。 </exception>
    </member>
    <member name="M:System.MulticastDelegate.Equals(System.Object)">
<summary>确定此多路广播委托和指定的对象是否相等。</summary>
<returns>如果 <paramref name="obj"/> 和此实例具有相同的调用列表，则为 true；否则为 false。</returns>
<param name="obj">与此实例进行比较的对象。 </param>
<exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者用后期绑定机制调用了该成员。 </exception>
    </member>
    <member name="M:System.MulticastDelegate.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
<exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者用后期绑定机制调用了该成员。 </exception>
    </member>
    <member name="M:System.MulticastDelegate.GetInvocationList">
<summary>按照调用顺序返回此多路广播委托的调用列表。</summary>
<returns>一个委托数组，这些委托的调用列表合起来与此实例的调用列表一致。</returns>
<exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者用后期绑定机制调用了该成员。 </exception>
    </member>
    <member name="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
<summary>确定两个 <see cref="T:System.MulticastDelegate"/> 对象是否相等。</summary>
<returns>如果 <paramref name="d1"/> 和 <paramref name="d2"/> 具有相同的调用列表，则为 true；否则为 false。</returns>
<param name="d1">左操作数。 </param>
<param name="d2">右操作数。 </param>
<exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者用后期绑定机制调用了该成员。 </exception>
    </member>
    <member name="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
<summary>确定两个 <see cref="T:System.MulticastDelegate"/> 对象是否不相等。</summary>
<returns>如果 <paramref name="d1"/> 和 <paramref name="d2"/> 没有相同的调用列表，则为 true；否则为 false。</returns>
<param name="d1">左操作数。 </param>
<param name="d2">右操作数。 </param>
<exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者用后期绑定机制调用了该成员。 </exception>
    </member>
    <member name="M:System.MulticastDelegate.RemoveImpl(System.Delegate)">
<summary>从此 <see cref="T:System.MulticastDelegate"/> 的调用列表中移除与指定委托相等的元素。</summary>
<returns>如果在此实例的调用列表中找到 <paramref name="value"/>，则为其调用列表中没有 <paramref name="value"/> 的新 <see cref="T:System.Delegate"/>；否则为此实例（带有其原始调用列表）。</returns>
<param name="value">要在调用列表中搜索的委托。 </param>
<exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者用后期绑定机制调用了该成员。 </exception>
    </member>
    <member name="T:System.MulticastNotSupportedException">
<summary>尝试组合两个基于 <see cref="T:System.Delegate"/> 类型而非 <see cref="T:System.MulticastDelegate"/> 类型的委托时引发的异常。无法继承此类。 </summary>
    </member>
    <member name="M:System.MulticastNotSupportedException.#ctor">
<summary>初始化 <see cref="T:System.MulticastNotSupportedException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.MulticastNotSupportedException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.MulticastNotSupportedException"/> 类的新实例。</summary>
<param name="message">描述错误的消息。 </param>
    </member>
    <member name="M:System.MulticastNotSupportedException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.MulticastNotSupportedException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="inner">导致当前异常的异常。如果 <paramref name="inner"/> 参数不是 null 引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。 </param>
    </member>
    <member name="T:System.NotFiniteNumberException">
<summary>当浮点值为正无穷大、负无穷大或非数字 (NaN) 时引发的异常。</summary>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor">
<summary>初始化 <see cref="T:System.NotFiniteNumberException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.NotFiniteNumberException"/> 类的新实例。</summary>
<param name="message">描述错误的消息。 </param>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常根本原因的内部异常的引用来初始化 <see cref="T:System.NotFiniteNumberException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不是 null 引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。 </param>
    </member>
    <member name="T:System.NotImplementedException">
<summary>当请求的方法或操作未实现时引发的异常。</summary>
    </member>
    <member name="M:System.NotImplementedException.#ctor">
<summary>使用默认属性初始化 <see cref="T:System.NotImplementedException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.NotImplementedException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.NotImplementedException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="inner">导致当前异常的异常。如果 <paramref name="inner"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="T:System.NotSupportedException">
<summary>当调用的方法不受支持，或试图读取、查找或写入不支持调用功能的流时引发的异常。</summary>
    </member>
    <member name="M:System.NotSupportedException.#ctor">
<summary>初始化 <see cref="T:System.NotSupportedException"/> 类的新实例，将新实例的 <see cref="P:System.Exception.Message"/> 属性设置为系统提供的描述错误的消息。此消息将考虑当前系统区域性。</summary>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.NotSupportedException"/> 类的新实例。</summary>
<param name="message">描述该错误的 <see cref="T:System.String"/>。<paramref name="message"/> 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。 </param>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.NotSupportedException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不为 null 引用，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="T:System.Nullable">
<summary>支持可为其分配 null 的值类型，如引用类型。无法继承此类。</summary>
    </member>
    <member name="M:System.Nullable.Compare``1(System.Nullable{``0},System.Nullable{``0})">
<summary>比较两个 <see cref="T:System.Nullable`1"/> 对象的相对值。</summary>
<returns>一个整数，指示 <paramref name="n1"/> 和 <paramref name="n2"/> 参数的相对值。返回值 描述 小于零 <paramref name="n1"/> 的 <see cref="P:System.Nullable`1.HasValue"/> 属性为 false，并且 <paramref name="n2"/> 的 <see cref="P:System.Nullable`1.HasValue"/> 属性为 true。-或- <paramref name="n1"/> 和 <paramref name="n2"/> 的 <see cref="P:System.Nullable`1.HasValue"/> 属性都为 true 并且 <paramref name="n1"/> 的 <see cref="P:System.Nullable`1.Value"/> 属性的值小于 <paramref name="n2"/> 的 <see cref="P:System.Nullable`1.Value"/> 属性的值。零 <paramref name="n1"/> 和 <paramref name="n2"/> 的 <see cref="P:System.Nullable`1.HasValue"/> 属性都为 false。-或- <paramref name="n1"/> 和 <paramref name="n2"/> 的 <see cref="P:System.Nullable`1.HasValue"/> 属性都为 true 并且 <paramref name="n1"/> 的 <see cref="P:System.Nullable`1.Value"/> 属性的值等于 <paramref name="n2"/> 的 <see cref="P:System.Nullable`1.Value"/> 属性的值。大于零 <paramref name="n1"/> 的 <see cref="P:System.Nullable`1.HasValue"/> 属性为 true 并且 <paramref name="n2"/> 的 <see cref="P:System.Nullable`1.HasValue"/> 属性为 false。-或- <paramref name="n1"/> 和 <paramref name="n2"/> 的 <see cref="P:System.Nullable`1.HasValue"/> 属性都为 true 并且 <paramref name="n1"/> 的 <see cref="P:System.Nullable`1.Value"/> 属性的值大于 <paramref name="n2"/> 的 <see cref="P:System.Nullable`1.Value"/> 属性的值。</returns>
<param name="n1"><see cref="T:System.Nullable`1"/> 对象。</param>
<param name="n2"><see cref="T:System.Nullable`1"/> 对象。</param>
<typeparam name="T"><paramref name="n1"/> 和 <paramref name="n2"/> 参数的基础值类型。</typeparam>
    </member>
    <member name="M:System.Nullable.Equals``1(System.Nullable{``0},System.Nullable{``0})">
<summary>指示两个指定的 <see cref="T:System.Nullable`1"/> 对象是否相等。</summary>
<returns>如果 <paramref name="n1"/> 参数等于 <paramref name="n2"/> 参数，则为 true；否则为 false。返回值取决于进行比较的两个参数的 <see cref="P:System.Nullable`1.HasValue"/> 和 <see cref="P:System.Nullable`1.Value"/> 属性。返回值 描述 true <paramref name="n1"/> 和 <paramref name="n2"/> 的 <see cref="P:System.Nullable`1.HasValue"/> 属性都为 false。-或- <paramref name="n1"/> 和 <paramref name="n2"/> 的 <see cref="P:System.Nullable`1.HasValue"/> 属性都为 true 并且两个参数的 <see cref="P:System.Nullable`1.Value"/> 属性相等。false 一个参数的 <see cref="P:System.Nullable`1.HasValue"/> 属性为 true 另一个参数的 <see cref="P:System.Nullable`1.HasValue"/> 属性为 false。-或- <paramref name="n1"/> 和 <paramref name="n2"/> 的 <see cref="P:System.Nullable`1.HasValue"/> 属性都为 true 并且两个参数的 <see cref="P:System.Nullable`1.Value"/> 属性不相等。</returns>
<param name="n1"><see cref="T:System.Nullable`1"/> 对象。</param>
<param name="n2"><see cref="T:System.Nullable`1"/> 对象。</param>
<typeparam name="T"><paramref name="n1"/> 和 <paramref name="n2"/> 参数的基础值类型。</typeparam>
    </member>
    <member name="M:System.Nullable.GetUnderlyingType(System.Type)">
<summary>返回指定可以为 null 的类型的基础类型参数。</summary>
<returns>如果 <paramref name="nullableType"/> 参数是可以为 null 的封闭式泛型类型，则为 <paramref name="nullableType"/> 参数的类型变量；否则为 null。 </returns>
<param name="nullableType">一个 <see cref="T:System.Type"/> 对象，该对象描述可以为 null 的封闭式泛型类型。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="nullableType"/> 为 null。</exception>
    </member>
    <member name="T:System.Nullable`1">
<summary>表示基础类型为值类型的对象，值类型与引用类型一样也可以分配 null。</summary>
<typeparam name="T"><see cref="T:System.Nullable`1"/> 泛型类型的基础值类型。</typeparam>
    </member>
    <member name="M:System.Nullable`1.#ctor(`0)">
<summary>将 <see cref="T:System.Nullable`1"/> 结构的新实例初始化为指定的值。 </summary>
<param name="value">一个值类型。</param>
    </member>
    <member name="M:System.Nullable`1.Equals(System.Object)">
<summary>指示当前 <see cref="T:System.Nullable`1"/> 对象是否等于指定的对象。</summary>
<returns>如果 <paramref name="other"/> 参数等于当前的 <see cref="T:System.Nullable`1"/> 对象，则为 true；否则为 false。此表描述如何定义所比较值的相等性：返回值 描述 true <see cref="P:System.Nullable`1.HasValue"/> 属性为 false 并且 <paramref name="other"/> 参数为 null。即，根据定义，两个 null 值相等。-或- <see cref="P:System.Nullable`1.HasValue"/> 属性为 true 并且 <see cref="P:System.Nullable`1.Value"/> 属性的返回值等于 <paramref name="other"/> 参数。false 当前 <see cref="T:System.Nullable`1"/> 结构的 <see cref="P:System.Nullable`1.HasValue"/> 属性为 true 并且 <paramref name="other"/> 参数为 null。-或- 当前 <see cref="T:System.Nullable`1"/> 结构的 <see cref="P:System.Nullable`1.HasValue"/> 属性为 false 并且 <paramref name="other"/> 参数不为 null。-或- 当前 <see cref="T:System.Nullable`1"/> 结构的 <see cref="P:System.Nullable`1.HasValue"/> 属性为 true 并且 <see cref="P:System.Nullable`1.Value"/> 属性的返回值不等于 <paramref name="other"/> 参数。</returns>
<param name="other">一个对象。</param>
    </member>
    <member name="M:System.Nullable`1.GetHashCode">
<summary>检索由 <see cref="P:System.Nullable`1.Value"/> 属性返回的对象的哈希代码。</summary>
<returns>如果 <see cref="P:System.Nullable`1.HasValue"/> 属性为 true，则为 <see cref="P:System.Nullable`1.Value"/> 属性返回的对象的哈希代码；如果 <see cref="P:System.Nullable`1.HasValue"/> 属性为 false，则为零。 </returns>
    </member>
    <member name="M:System.Nullable`1.GetValueOrDefault">
<summary>检索当前 <see cref="T:System.Nullable`1"/> 对象的值，或该对象的默认值。</summary>
<returns>如果 <see cref="P:System.Nullable`1.HasValue"/> 属性为 true，则为 <see cref="P:System.Nullable`1.Value"/> 属性的值；否则为当前 <see cref="T:System.Nullable`1"/> 对象的默认值。默认值的类型为当前 <see cref="T:System.Nullable`1"/> 对象的类型参数，而默认值的值中只包含二进制零。</returns>
    </member>
    <member name="M:System.Nullable`1.GetValueOrDefault(`0)">
<summary>检索当前 <see cref="T:System.Nullable`1"/> 对象的值或指定的默认值。</summary>
<returns>如果 <see cref="P:System.Nullable`1.HasValue"/> 属性为 true，则为 <see cref="P:System.Nullable`1.Value"/> 属性的值；否则为 <paramref name="defaultValue"/> 参数。</returns>
<param name="defaultValue">如果 <see cref="P:System.Nullable`1.HasValue"/> 属性为 false，则为一个返回值。</param>
    </member>
    <member name="P:System.Nullable`1.HasValue">
<summary>获取一个值，指示当前的 <see cref="T:System.Nullable`1"/> 对象是否有值。</summary>
<returns>如果当前 <see cref="T:System.Nullable`1"/> 对象具有值，则为 true；如果当前 <see cref="T:System.Nullable`1"/> 对象没有值，则为 false。</returns>
    </member>
    <member name="M:System.Nullable`1.op_Explicit(System.Nullable{`0})~`0">
<summary>返回指定的 <see cref="T:System.Nullable`1"/> 的值。</summary>
<returns><paramref name="value"/> 参数的 <see cref="P:System.Nullable`1.Value"/> 属性的值。</returns>
<param name="value">一个 <see cref="T:System.Nullable`1"/> 值。</param>
    </member>
    <member name="M:System.Nullable`1.op_Implicit(`0)~System.Nullable{`0}">
<summary>创建一个新的 <see cref="T:System.Nullable`1"/> 对象，并将其初始化为指定的值。 </summary>
<returns>一个 <see cref="T:System.Nullable`1"/> 对象，其 <see cref="P:System.Nullable`1.Value"/> 属性使用 <paramref name="value"/> 参数进行初始化。</returns>
<param name="value">一个值类型。</param>
    </member>
    <member name="M:System.Nullable`1.ToString">
<summary>返回当前 <see cref="T:System.Nullable`1"/> 对象的值的文本表示形式。</summary>
<returns>如果 <see cref="P:System.Nullable`1.HasValue"/> 属性为 true，则是当前 <see cref="T:System.Nullable`1"/> 对象的值的文本表示形式；如果 <see cref="P:System.Nullable`1.HasValue"/> 属性为 false，则是一个空字符串 ("")。</returns>
    </member>
    <member name="P:System.Nullable`1.Value">
<summary>获取当前的 <see cref="T:System.Nullable`1"/> 值。</summary>
<returns>如果 <see cref="P:System.Nullable`1.HasValue"/> 属性为 true，则为当前 <see cref="T:System.Nullable`1"/> 对象的值。如果 <see cref="P:System.Nullable`1.HasValue"/> 属性为 false，则将引发异常。</returns>
<exception cref="T:System.InvalidOperationException"><see cref="P:System.Nullable`1.HasValue"/> 属性为 false。</exception>
    </member>
    <member name="T:System.NullReferenceException">
<summary>尝试取消引用空对象引用时引发的异常。</summary>
    </member>
    <member name="M:System.NullReferenceException.#ctor">
<summary>初始化 <see cref="T:System.NullReferenceException"/> 类的新实例，将新实例的 <see cref="P:System.Exception.Message"/> 属性设置为系统提供的描述错误的消息，如“在需要对象实例的地方找到了值‘null’。”。此消息将考虑当前系统区域性。</summary>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.NullReferenceException"/> 类的新实例。</summary>
<param name="message">描述该错误的 <see cref="T:System.String"/>。<paramref name="message"/> 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。 </param>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.NullReferenceException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="T:System.Object">
<summary>支持 .NET Framework 类层次结构中的所有类，并为派生类提供低级别服务。这是 .NET Framework 中所有类的最终基类；它是类型层次结构的根。</summary>
    </member>
    <member name="M:System.Object.#ctor">
<summary>初始化 <see cref="T:System.Object"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Object.Equals(System.Object)">
<summary>确定指定的 <see cref="T:System.Object"/> 是否等于当前的 <see cref="T:System.Object"/>。</summary>
<returns>如果指定的 <see cref="T:System.Object"/> 等于当前的 <see cref="T:System.Object"/>，则为 true；否则为 false。</returns>
<param name="obj">要与当前 <see cref="T:System.Object"/> 进行比较的 <see cref="T:System.Object"/>。 </param>
    </member>
    <member name="M:System.Object.Equals(System.Object,System.Object)">
<summary>确定指定的 <see cref="T:System.Object"/> 实例是否被视为相等。</summary>
<returns>如果 <paramref name="objA"/> 是与 <paramref name="objB"/> 相同的实例、二者都为空引用或者 objA.Equals(objB) 返回 true，则为 true；否则为 false。</returns>
<param name="objA">要比较的第一个 <see cref="T:System.Object"/>。 </param>
<param name="objB">要比较的第二个 <see cref="T:System.Object"/>。 </param>
    </member>
    <member name="M:System.Object.Finalize">
<summary>允许 <see cref="T:System.Object"/> 在垃圾回收器回收该对象之前尝试释放资源并执行其他清理操作。</summary>
    </member>
    <member name="M:System.Object.GetHashCode">
<summary>用作特定类型的哈希函数。 </summary>
<returns>当前 <see cref="T:System.Object"/> 的哈希代码。</returns>
    </member>
    <member name="M:System.Object.GetType">
<summary>获取当前实例的 <see cref="T:System.Type"/>。</summary>
<returns><see cref="T:System.Type"/> 实例，表示当前实例的确切运行时类型。</returns>
    </member>
    <member name="M:System.Object.MemberwiseClone">
<summary>创建当前 <see cref="T:System.Object"/> 的一个浅表副本。</summary>
<returns>当前 <see cref="T:System.Object"/> 的浅表副本。</returns>
    </member>
    <member name="M:System.Object.ReferenceEquals(System.Object,System.Object)">
<summary>确定指定的对象实例是否为相同的实例。</summary>
<returns>如果 <paramref name="objA"/> 是与 <paramref name="objB"/> 相同的实例，或者如果二者都为 null，则为 true；否则为 false。</returns>
<param name="objA">要比较的第一个对象。 </param>
<param name="objB">要比较的第二个对象。 </param>
    </member>
    <member name="M:System.Object.ToString">
<summary>返回一个字符串，它表示当前的对象。</summary>
<returns>表示当前对象的字符串。</returns>
    </member>
    <member name="T:System.ObjectDisposedException">
<summary>对已释放的对象执行操作时所引发的异常。</summary>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String)">
<summary>使用包含已释放对象名称的字符串初始化 <see cref="T:System.ObjectDisposedException"/> 类的新实例。</summary>
<param name="objectName">包含已释放对象的名称的字符串。 </param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.ObjectDisposedException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。</param>
<param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 不为 null，则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String,System.String)">
<summary>使用指定的对象名称和消息初始化 <see cref="T:System.ObjectDisposedException"/> 类的新实例。</summary>
<param name="objectName">已释放的对象名。 </param>
<param name="message">解释异常原因的错误消息。 </param>
    </member>
    <member name="P:System.ObjectDisposedException.Message">
<summary>获取描述错误的消息。</summary>
<returns>描述错误的字符串。</returns>
    </member>
    <member name="P:System.ObjectDisposedException.ObjectName">
<summary>获取已释放对象的名称。</summary>
<returns>包含已释放对象的名称的字符串。</returns>
    </member>
    <member name="T:System.ObsoleteAttribute">
<summary>标记不再使用的程序元素。无法继承此类。</summary>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor">
<summary>使用默认属性初始化 <see cref="T:System.ObsoleteAttribute"/> 类的新实例。</summary>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String)">
<summary>使用指定的变通方法信息初始化 <see cref="T:System.ObsoleteAttribute"/> 类的新实例。</summary>
<param name="message">描述可选的变通方法的文本字符串。 </param>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String,System.Boolean)">
<summary>使用变通方法消息和布尔值初始化 <see cref="T:System.ObsoleteAttribute"/> 类的新实例，该布尔值指示是否将使用已过时的元素视为错误。</summary>
<param name="message">描述可选的变通方法的文本字符串。 </param>
<param name="error">指示是否将使用已过时的元素视为错误的布尔值。 </param>
    </member>
    <member name="P:System.ObsoleteAttribute.IsError">
<summary>获取指示编译器是否将使用已过时的程序元素视为错误的布尔值。</summary>
<returns>如果将使用已过时的元素视为错误，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.ObsoleteAttribute.Message">
<summary>获取变通方法消息，包括对可选程序元素的说明。</summary>
<returns>变通方法文本字符串。</returns>
    </member>
    <member name="T:System.OperatingSystem">
<summary>表示有关操作系统的信息，如版本和平台标识符。无法继承此类。</summary>
    </member>
    <member name="M:System.OperatingSystem.#ctor(System.PlatformID,System.Version)">
<summary>使用指定的平台标识符值和版本对象来初始化 <see cref="T:System.OperatingSystem"/> 类的新实例。</summary>
<param name="platform"><see cref="T:System.PlatformID"/> 值之一，指示操作系统平台。 </param>
<param name="version">一个 <see cref="T:System.Version"/> 对象，指示操作系统的版本。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="version"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="platform"/> 不是一个 <see cref="T:System.PlatformID"/> 枚举值。</exception>
    </member>
    <member name="M:System.OperatingSystem.Clone">
<summary>创建与此实例相同的 <see cref="T:System.OperatingSystem"/> 对象。</summary>
<returns><see cref="T:System.OperatingSystem"/> 对象，是此实例的副本。</returns>
    </member>
    <member name="P:System.OperatingSystem.Platform">
<summary>获取标识操作系统平台的 <see cref="T:System.PlatformID"/> 枚举值。</summary>
<returns><see cref="T:System.PlatformID"/> 值之一。</returns>
    </member>
    <member name="M:System.OperatingSystem.ToString">
<summary>将此 <see cref="T:System.OperatingSystem"/> 对象的值转换为其等效的字符串表示形式。</summary>
<returns><see cref="P:System.OperatingSystem.Platform"/> 和 <see cref="P:System.OperatingSystem.Version"/> 返回的值的字符串表示形式。</returns>
    </member>
    <member name="P:System.OperatingSystem.Version">
<summary>获取标识操作系统的 <see cref="T:System.Version"/> 对象。</summary>
<returns><see cref="T:System.Version"/> 对象，描述操作系统的主版本号、次版本号、内部版本号和修订版本号。</returns>
    </member>
    <member name="T:System.OutOfMemoryException">
<summary>没有足够的内存继续执行程序时引发的异常。</summary>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor">
<summary>初始化 <see cref="T:System.OutOfMemoryException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.OutOfMemoryException"/> 类的新实例。</summary>
<param name="message">描述错误的消息。 </param>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.OutOfMemoryException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不是 null 引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。 </param>
    </member>
    <member name="T:System.OverflowException">
<summary>在选中的上下文中所进行的算术运算、类型转换或转换操作导致溢出时引发的异常。</summary>
    </member>
    <member name="M:System.OverflowException.#ctor">
<summary>初始化 <see cref="T:System.OverflowException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.OverflowException"/> 类的新实例。</summary>
<param name="message">描述错误的消息。 </param>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.OverflowException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不是 null 引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。 </param>
    </member>
    <member name="T:System.ParamArrayAttribute">
<summary>指示方法在调用中将允许参数的数目可变。无法继承此类。</summary>
    </member>
    <member name="M:System.ParamArrayAttribute.#ctor">
<summary>使用默认属性初始化 <see cref="T:System.ParamArrayAttribute"/> 类的新实例。</summary>
    </member>
    <member name="T:System.PlatformID">
<summary>标识程序集所支持的操作系统或开发平台。</summary>
    </member>
    <member name="F:System.PlatformID.Win32S">
<summary>操作系统为 Win32s（Win32 子集）类型。Win32s 是运行于 Windows 16 位版本上的层，它提供对 32 位应用程序的访问。</summary>
    </member>
    <member name="F:System.PlatformID.Win32Windows">
<summary>操作系统为 Windows 95 或较新的版本。</summary>
    </member>
    <member name="F:System.PlatformID.Win32NT">
<summary>操作系统为 Windows NT 或较新的版本。</summary>
    </member>
    <member name="F:System.PlatformID.WinCE">
<summary>操作系统为 Windows CE。</summary>
    </member>
    <member name="F:System.PlatformID.Unix">
<summary>操作系统为 Unix。</summary>
    </member>
    <member name="F:System.PlatformID.Xbox">
<summary>开发平台为 Xbox 360。</summary>
    </member>
    <member name="F:System.PlatformID.MacOSX">
<summary>操作系统是 Macintosh。</summary>
    </member>
    <member name="F:System.PlatformID.NokiaS60">
<summary>操作系统是 Nokia S60。</summary>
    </member>
    <member name="T:System.PlatformNotSupportedException">
<summary>当功能未在特定平台上运行时所引发的异常。</summary>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor">
<summary>使用默认属性初始化 <see cref="T:System.PlatformNotSupportedException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.PlatformNotSupportedException"/> 类的新实例。</summary>
<param name="message">解释异常原因的文本消息。 </param>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.PlatformNotSupportedException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="inner">导致当前异常的异常。如果 <paramref name="inner"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="T:System.Predicate`1">
<summary>表示定义一组条件并确定指定对象是否符合这些条件的方法。</summary>
<returns>如果 <paramref name="obj"/> 符合由此委托表示的方法中定义的条件，则为 true；否则为 false。</returns>
<param name="obj">要针对条件进行比较的对象。 </param>
<typeparam name="T">要比较的对象的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
    </member>
    <member name="T:System.Random">
<summary>表示伪随机数生成器，一种能够产生满足某些随机性统计要求的数字序列的设备。</summary>
    </member>
    <member name="M:System.Random.#ctor">
<summary>使用与时间相关的默认种子值，初始化 <see cref="T:System.Random"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Random.#ctor(System.Int32)">
<summary>使用指定的种子值初始化 <see cref="T:System.Random"/> 类的新实例。</summary>
<param name="Seed">用来计算伪随机数序列起始值的数字。如果指定的是负数，则使用其绝对值。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="Seed"/> 为 <see cref="F:System.Int32.MinValue"/>，在计算其绝对值时会导致溢出。 </exception>
    </member>
    <member name="M:System.Random.Next">
<summary>返回非负随机数。</summary>
<returns>大于等于零且小于 <see cref="F:System.Int32.MaxValue"/> 的 32 位带符号整数。</returns>
    </member>
    <member name="M:System.Random.Next(System.Int32)">
<summary>返回一个小于所指定最大值的非负随机数。</summary>
<returns>大于等于零且小于 <paramref name="maxValue"/> 的 32 位带符号整数，即：返回值的范围通常包括零但不包括 <paramref name="maxValue"/>。不过，如果 <paramref name="maxValue"/> 等于零，则返回 <paramref name="maxValue"/>。</returns>
<param name="maxValue">要生成的随机数的上界（随机数不能取该上界值）。<paramref name="maxValue"/> 必须大于等于零。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="maxValue"/> 小于零。 </exception>
    </member>
    <member name="M:System.Random.Next(System.Int32,System.Int32)">
<summary>返回一个指定范围内的随机数。</summary>
<returns>一个大于等于 <paramref name="minValue"/> 且小于 <paramref name="maxValue"/> 的 32 位带符号整数，即：返回的值范围包括 <paramref name="minValue"/> 但不包括 <paramref name="maxValue"/>。如果 <paramref name="minValue"/> 等于 <paramref name="maxValue"/>，则返回 <paramref name="minValue"/>。</returns>
<param name="minValue">返回的随机数的下界（随机数可取该下界值）。 </param>
<param name="maxValue">返回的随机数的上界（随机数不能取该上界值）。<paramref name="maxValue"/> 必须大于等于 <paramref name="minValue"/>。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="minValue"/> 大于 <paramref name="maxValue"/>。 </exception>
    </member>
    <member name="M:System.Random.NextBytes(System.Byte[])">
<summary>用随机数填充指定字节数组的元素。</summary>
<param name="buffer">包含随机数的字节数组。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="buffer"/> 为 null。 </exception>
    </member>
    <member name="M:System.Random.NextDouble">
<summary>返回一个介于 0.0 和 1.0 之间的随机数。</summary>
<returns>大于等于 0.0 并且小于 1.0 的双精度浮点数。</returns>
    </member>
    <member name="M:System.Random.Sample">
<summary>返回一个介于 0.0 和 1.0 之间的随机数。</summary>
<returns>大于等于 0.0 并且小于 1.0 的双精度浮点数。</returns>
    </member>
    <member name="T:System.RankException">
<summary>将维数错误的数组传递给方法时引发的异常。</summary>
    </member>
    <member name="M:System.RankException.#ctor">
<summary>初始化 <see cref="T:System.RankException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.RankException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.RankException"/> 类的新实例。</summary>
<param name="message">描述该错误的 <see cref="T:System.String"/>。 </param>
    </member>
    <member name="M:System.RankException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.RankException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不是 null 引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。 </param>
    </member>
    <member name="T:System.ResolveEventArgs">
<summary>为 <see cref="E:System.AppDomain.AssemblyResolve"/> 事件提供数据。</summary>
    </member>
    <member name="M:System.ResolveEventArgs.#ctor(System.String)">
<summary>初始化 <see cref="T:System.ResolveEventArgs"/> 类的新实例。</summary>
<param name="name">要解析的项的名称。 </param>
    </member>
    <member name="P:System.ResolveEventArgs.Name">
<summary>获取要解析的项的名称。</summary>
<returns>要解析的项的名称。</returns>
    </member>
    <member name="T:System.ResolveEventHandler">
<summary>[SECURITY CRITICAL] 表示处理 <see cref="E:System.AppDomain.AssemblyResolve"/> 事件的方法。</summary>
<returns>解析的程序集；如果无法解析程序集，则为 null。</returns>
<param name="sender">事件的源。 </param>
<param name="args">事件数据。 </param>
    </member>
    <member name="T:System.RuntimeArgumentHandle">
<summary>引用变长参数列表。</summary>
    </member>
    <member name="T:System.RuntimeFieldHandle">
<summary>使用内部元数据标记表示一个字段。</summary>
    </member>
    <member name="M:System.RuntimeFieldHandle.Equals(System.Object)">
<summary>指示当前实例是否等于指定的对象。</summary>
<returns>如果 <paramref name="obj"/> 为 <see cref="T:System.RuntimeFieldHandle"/> 且与当前实例的值相等，则为 true；否则为 false。</returns>
<param name="obj">要与当前实例进行比较的对象。</param>
    </member>
    <member name="M:System.RuntimeFieldHandle.Equals(System.RuntimeFieldHandle)">
<summary>指示当前实例是否等于指定的 <see cref="T:System.RuntimeFieldHandle"/>。</summary>
<returns>如果 <paramref name="handle"/> 的值等于当前实例的值，则为 true；否则为 false。</returns>
<param name="handle">要与当前实例进行比较的 <see cref="T:System.RuntimeFieldHandle"/>。</param>
    </member>
    <member name="M:System.RuntimeFieldHandle.GetHashCode"></member>
    <member name="P:System.RuntimeFieldHandle.Value">
<summary>[SECURITY CRITICAL] 获取当前实例所表示的字段的句柄。</summary>
<returns><see cref="T:System.IntPtr"/>，包含当前实例所表示的字段的句柄。</returns>
    </member>
    <member name="T:System.RuntimeMethodHandle">
      <summary>
<see cref="T:System.RuntimeMethodHandle"/> 是方法的内部元数据表示形式的句柄。</summary>
    </member>
    <member name="M:System.RuntimeMethodHandle.Equals(System.Object)">
<summary>指示此实例是否与指定对象相等。</summary>
<returns>如果 <paramref name="obj"/> 为 <see cref="T:System.RuntimeMethodHandle"/> 且与此实例的值相等，则为 true；否则为 false。</returns>
<param name="obj">要与此实例进行比较的 <see cref="T:System.Object"/>。</param>
    </member>
    <member name="M:System.RuntimeMethodHandle.Equals(System.RuntimeMethodHandle)">
<summary>指示此实例是否与指定的 <see cref="T:System.RuntimeMethodHandle"/> 相等。</summary>
<returns>如果 <paramref name="handle"/> 等于此实例的值，则为 true；否则为 false。</returns>
<param name="handle">要与此实例进行比较的 <see cref="T:System.RuntimeMethodHandle"/>。</param>
    </member>
    <member name="M:System.RuntimeMethodHandle.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="M:System.RuntimeMethodHandle.op_Equality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)">
<summary>指示两个 <see cref="T:System.RuntimeMethodHandle"/> 实例是否相等。</summary>
<returns>如果 <paramref name="left"/> 的值等于 <paramref name="right"/> 的值，则为 true；否则为 false。</returns>
<param name="left">要与 <paramref name="right"/> 进行比较的 <see cref="T:System.RuntimeMethodHandle"/>。</param>
<param name="right">要与 <paramref name="left"/> 进行比较的 <see cref="T:System.RuntimeMethodHandle"/>。</param>
    </member>
    <member name="M:System.RuntimeMethodHandle.op_Inequality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)">
<summary>指示两个 <see cref="T:System.RuntimeMethodHandle"/> 实例是否不相等。</summary>
<returns>如果 <paramref name="left"/> 的值不等于 <paramref name="right"/> 的值，则为 true；否则为 false。</returns>
<param name="left">要与 <paramref name="right"/> 进行比较的 <see cref="T:System.RuntimeMethodHandle"/>。</param>
<param name="right">要与 <paramref name="left"/> 进行比较的 <see cref="T:System.RuntimeMethodHandle"/>。</param>
    </member>
    <member name="P:System.RuntimeMethodHandle.Value">
<summary>[SECURITY CRITICAL] 获得此实例的值。</summary>
<returns>方法的内部元数据表示形式的句柄。</returns>
    </member>
    <member name="T:System.RuntimeTypeHandle">
<summary>表示使用内部元数据标记的类型。</summary>
    </member>
    <member name="M:System.RuntimeTypeHandle.Equals(System.Object)">
<summary>指示指定的对象是否等于当前的 <see cref="T:System.RuntimeTypeHandle"/> 结构。</summary>
<returns>如果 <paramref name="obj"/> 是 <see cref="T:System.RuntimeTypeHandle"/> 结构并且与此实例的值相等，则为 true；否则为 false。</returns>
<param name="obj">要与当前实例进行比较的对象。</param>
    </member>
    <member name="M:System.RuntimeTypeHandle.Equals(System.RuntimeTypeHandle)">
<summary>指示指定的 <see cref="T:System.RuntimeTypeHandle"/> 结构是否等于当前的 <see cref="T:System.RuntimeTypeHandle"/> 结构。</summary>
<returns>如果 <paramref name="handle"/> 的值等于此实例的值，则为 true；否则为 false。</returns>
<param name="handle">要与当前实例进行比较的 <see cref="T:System.RuntimeTypeHandle"/> 结构。</param>
    </member>
    <member name="M:System.RuntimeTypeHandle.GetHashCode">
<summary>返回当前实例的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Equality(System.RuntimeTypeHandle,System.Object)">
<summary>指示 <see cref="T:System.RuntimeTypeHandle"/> 结构与某个对象是否相等。</summary>
<returns>如果 <paramref name="right"/> 是 <see cref="T:System.RuntimeTypeHandle"/> 并且与 <paramref name="left"/> 相等，则为 true；否则为 false。</returns>
<param name="left">要与 <paramref name="right"/> 进行比较的 <see cref="T:System.RuntimeTypeHandle"/> 结构。</param>
<param name="right">要与 <paramref name="left"/> 比较的对象。</param>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Inequality(System.RuntimeTypeHandle,System.Object)">
<summary>指示 <see cref="T:System.RuntimeTypeHandle"/> 结构与某个对象是否不相等。</summary>
<returns>如果 <paramref name="right"/> 是 <see cref="T:System.RuntimeTypeHandle"/> 结构并且它与 <paramref name="left"/> 不相等，则为 true；否则为 false。</returns>
<param name="left">要与 <paramref name="right"/> 进行比较的 <see cref="T:System.RuntimeTypeHandle"/> 结构。</param>
<param name="right">要与 <paramref name="left"/> 比较的对象。</param>
    </member>
    <member name="T:System.SByte">
<summary>表示 8 位的带符号整数。</summary>
    </member>
    <member name="M:System.SByte.CompareTo(System.Object)">
<summary>将此实例与指定对象进行比较并返回一个对二者的相对值的指示。</summary>
<returns>有符号数字，指示此实例和 <paramref name="obj"/> 的相对值。返回值 描述 小于零 此实例小于 <paramref name="obj"/>。零 此实例等于 <paramref name="obj"/>。大于零 此实例大于 <paramref name="obj"/>。-或- <paramref name="obj"/> 为 null。 </returns>
<param name="obj">要比较的对象，或为 null。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="obj"/> 不是 <see cref="T:System.SByte"/>。 </exception>
    </member>
    <member name="M:System.SByte.CompareTo(System.SByte)">
<summary>将此实例与指定的 8 位带符号整数进行比较并返回对其相对值的指示。</summary>
<returns>带符号整数，指示此实例和 <paramref name="value"/> 的相对顺序。返回值 描述 小于零 此实例小于 <paramref name="value"/>。零 此实例等于 <paramref name="value"/>。大于零 此实例大于 <paramref name="value"/>。 </returns>
<param name="value">要比较的 8 位带符号整数。 </param>
    </member>
    <member name="M:System.SByte.Equals(System.Object)">
<summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
<returns>如果 <paramref name="obj"/> 是 <see cref="T:System.SByte"/> 的实例并且等于此实例的值，则为 true；否则为 false。</returns>
<param name="obj">与此实例进行比较的对象。 </param>
    </member>
    <member name="M:System.SByte.Equals(System.SByte)">
<summary>返回一个值，该值指示此实例是否与指定的 <see cref="T:System.SByte"/> 值相等。</summary>
<returns>如果 <paramref name="obj"/> 的值与此实例相同，则为 true；否则为 false。</returns>
<param name="obj">要与此实例进行比较的 <see cref="T:System.SByte"/> 值。</param>
    </member>
    <member name="M:System.SByte.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="M:System.SByte.GetTypeCode">
<summary>返回值类型 <see cref="T:System.SByte"/> 的 <see cref="T:System.TypeCode"/>。</summary>
<returns>枚举常数 <see cref="F:System.TypeCode.SByte"/>。</returns>
    </member>
    <member name="F:System.SByte.MaxValue">
<summary>表示 <see cref="T:System.SByte"/> 的最大可能值。此字段为常量。</summary>
    </member>
    <member name="F:System.SByte.MinValue">
<summary>表示 <see cref="T:System.SByte"/> 的最小可能值。此字段为常量。</summary>
    </member>
    <member name="M:System.SByte.Parse(System.String)">
<summary>将数字的字符串表示形式转换为它的等效 8 位带符号整数。</summary>
<returns>与 <paramref name="s"/> 参数中包含的数字等效的 8 位带符号整数。</returns>
<param name="s">表示要转换的数字的字符串。该字符串使用 <see cref="F:System.Globalization.NumberStyles.Integer"/> 样式来进行解释。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 不是由一个可选符号后跟数字序列（0 到 9）组成的。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.SByte.MinValue"/> 或大于 <see cref="F:System.SByte.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles)">
<summary>将指定样式的数字的字符串表示形式转换为它的等效 8 位带符号整数。</summary>
<returns>与 <paramref name="s"/> 中指定的数字等效的 8 位带符号整数。</returns>
<param name="s">包含要转换的数字的字符串。该字符串使用由 <paramref name="style"/> 指定的样式来进行解释。</param>
<param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s"/> 中的样式元素。一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 的格式不符合 <paramref name="style"/>。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.SByte.MinValue"/> 或大于 <see cref="F:System.SByte.MaxValue"/> 的数字。-或- <paramref name="s"/> 包含非零的小数位。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或-<paramref name="style"/> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber"/> 值的组合。</exception>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
<summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 8 位有符号数值。</summary>
<returns>与 <paramref name="s"/> 参数中指定的数字等效的 8 位有符号字节值。</returns>
<param name="s">包含要转换的数字的字符串。该字符串使用由 <paramref name="style"/> 指定的样式来进行解释。</param>
<param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s"/> 中的样式元素。一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer"/>。</param>
<param name="provider">一个提供有关 <paramref name="s"/> 的区域性特定的格式设置信息的对象。如果 <paramref name="provider"/> 为 null，则使用当前的线程区域性。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是 <see cref="T:System.Globalization.NumberStyles"/> 值。-或-<paramref name="style"/> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber"/> 的组合。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。</exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 的格式不符合 <paramref name="style"/>。</exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.SByte.MinValue"/> 或大于 <see cref="F:System.SByte.MaxValue"/> 的数字。-或- <paramref name="s"/> 包含非零的小数位。</exception>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.IFormatProvider)">
<summary>将指定的区域性特定格式的数字的字符串表示形式转换为它的等效 8 位带符号整数。</summary>
<returns>与 <paramref name="s"/> 中指定的数字等效的 8 位带符号整数。</returns>
<param name="s">表示要转换的数字的字符串。该字符串使用 <see cref="F:System.Globalization.NumberStyles.Integer"/> 样式来进行解释。</param>
<param name="provider">一个提供有关 <paramref name="s"/> 的区域性特定的格式设置信息的对象。如果 <paramref name="provider"/> 为 null，则使用当前的线程区域性。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.SByte.MinValue"/> 或大于 <see cref="F:System.SByte.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToBoolean(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)"/>。 </summary>
<returns>如果当前实例的值不为零，则为 true；否则为 false。</returns>
<param name="provider">未使用此参数。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToByte(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Byte"/>。</returns>
<param name="provider">未使用此参数。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToChar(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Char"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDateTime(System.IFormatProvider)">
<summary>不支持此转换。尝试这样做会引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>不支持此转换。不返回任何值。</returns>
<param name="provider">忽略此参数。</param>
<exception cref="T:System.InvalidCastException">在所有情况下。 </exception>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDecimal(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Decimal"/>。</returns>
<param name="provider">未使用此参数。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDouble(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Double"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt16(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Int16"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt32(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Int32"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt64(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Int64"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToSByte(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，未更改。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToSingle(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Single"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)"/>。 </summary>
<returns>转换为 <paramref name="type"/> 类型对象的当前实例的值。</returns>
<param name="type">要将此 <see cref="T:System.SByte"/> 值转换到的 <see cref="T:System.Type"/>。</param>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/> 实现，提供有关返回值格式的信息。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt16(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.UInt16"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt32(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.UInt32"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt64(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.UInt64"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.SByte.ToString">
<summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由减号（如果值为负）和没有前导零的从 0 到 9 的数字序列组成。</returns>
    </member>
    <member name="M:System.SByte.ToString(System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由 <paramref name="provider"/> 指定。</returns>
<param name="provider">一个提供区域性特定的格式设置信息的对象。 </param>
    </member>
    <member name="M:System.SByte.ToString(System.String)">
<summary>使用指定的格式，将此实例的数值转换为它的等效字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由 <paramref name="format"/> 指定。</returns>
<param name="format">标准或自定义的数值格式字符串。</param>
      <exception cref="T:System.FormatException">
<paramref name="format"/> 无效。 </exception>
    </member>
    <member name="M:System.SByte.ToString(System.String,System.IFormatProvider)">
<summary>使用指定的格式和区域性特定格式设置信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由 <paramref name="format"/> 和 <paramref name="provider"/> 指定。</returns>
<param name="format">标准或自定义的数值格式字符串。</param>
<param name="provider">一个提供区域性特定的格式设置信息的对象。 </param>
      <exception cref="T:System.FormatException">
<paramref name="format"/> 无效。 </exception>
    </member>
    <member name="M:System.SByte.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.SByte@)">
<summary>尝试将指定样式和区域性特定格式的数字的字符串表示形式转换为其 <see cref="T:System.SByte"/> 等效项，并返回一个指示转换是否成功的值。</summary>
<returns>如果成功转换了 <paramref name="s"/>，则为 true；否则为 false。</returns>
<param name="s">表示要转换的数字的字符串。 </param>
<param name="style">枚举值的一个按位组合，指示 <paramref name="s"/> 所允许的格式。一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer"/>。</param>
<param name="provider">一个提供有关 <paramref name="s"/> 的区域性特定的格式设置信息的对象。 </param>
<param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s"/> 中包含的数字等效的 8 位带符号整数值；如果转换失败，则包含零。如果 <paramref name="s"/> 参数为 null，格式不符合 <paramref name="style"/>，或者表示的数字小于 <see cref="F:System.SByte.MinValue"/> 或大于 <see cref="F:System.SByte.MaxValue"/>，则转换会失败。该参数未经初始化即被传递。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或-<paramref name="style"/> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber"/> 值的组合。</exception>
    </member>
    <member name="M:System.SByte.TryParse(System.String,System.SByte@)">
<summary>尝试将数字的字符串表示形式转换为它的等效 <see cref="T:System.SByte"/>，并返回一个指示转换是否成功的值。</summary>
<returns>如果成功转换了 <paramref name="s"/>，则为 true；否则为 false。</returns>
<param name="s">包含要转换的数字的字符串。</param>
<param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s"/> 中包含的数字等效的 8 位带符号整数值；如果转换失败，则包含零。如果 <paramref name="s"/> 参数为 null、格式不正确或者表示的数字小于 <see cref="F:System.SByte.MinValue"/> 或大于 <see cref="F:System.SByte.MaxValue"/>，则转换会失败。该参数未经初始化即被传递。</param>
    </member>
    <member name="T:System.Single">
<summary>表示单精度浮点数。</summary>
    </member>
    <member name="M:System.Single.CompareTo(System.Object)">
<summary>将此实例与指定对象进行比较，并返回一个整数，该整数指示此实例的值是大于、小于还是等于指定对象的值。</summary>
<returns>有符号数字，指示此实例和 <paramref name="value"/> 的相对值。返回值 描述 小于零 此实例小于 <paramref name="value"/>。-或- 此实例不是数字 (<see cref="F:System.Single.NaN"/>) 而 <paramref name="value"/> 是数字。零 此实例等于 <paramref name="value"/>。-或- 此实例和值都不是数字 (<see cref="F:System.Single.NaN"/>)、<see cref="F:System.Single.PositiveInfinity"/> 或 <see cref="F:System.Single.NegativeInfinity"/>。大于零 此实例大于 <paramref name="value"/>。-或- 此实例是数字，而 <paramref name="value"/> 不是数字 (<see cref="F:System.Single.NaN"/>)。-或- <paramref name="value"/> 为 null。 </returns>
<param name="value">要比较的对象，或为 null。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="value"/> 不是 <see cref="T:System.Single"/>。 </exception>
    </member>
    <member name="M:System.Single.CompareTo(System.Single)">
<summary>将此实例与指定的单精度浮点数进行比较，并返回一个整数，该整数指示此实例的值是大于、小于还是等于指定的单精度浮点数的值。</summary>
<returns>有符号数字，指示此实例和 <paramref name="value"/> 的相对值。返回值 描述 小于零 此实例小于 <paramref name="value"/>。-或- 此实例不是数字 (<see cref="F:System.Single.NaN"/>) 而 <paramref name="value"/> 是数字。零 此实例等于 <paramref name="value"/>。-或- 此实例和 <paramref name="value"/> 都不是数字 (<see cref="F:System.Single.NaN"/>)、<see cref="F:System.Single.PositiveInfinity"/> 或 <see cref="F:System.Single.NegativeInfinity"/>。大于零 此实例大于 <paramref name="value"/>。-或- 此实例是数字，而 <paramref name="value"/> 不是数字 (<see cref="F:System.Single.NaN"/>)。 </returns>
<param name="value">要比较的单精度浮点数字。 </param>
    </member>
    <member name="F:System.Single.Epsilon">
<summary>表示大于零的最小正 <see cref="T:System.Single"/> 值。此字段为常量。</summary>
    </member>
    <member name="M:System.Single.Equals(System.Object)">
<summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
<returns>如果 <paramref name="obj"/> 是 <see cref="T:System.Single"/> 的实例并且等于此实例的值，则为 true；否则为 false。</returns>
<param name="obj">与此实例进行比较的对象。 </param>
    </member>
    <member name="M:System.Single.Equals(System.Single)">
<summary>返回一个值，该值指示此实例和指定的 <see cref="T:System.Single"/> 对象是否表示相同的值。</summary>
<returns>如果 <paramref name="obj"/> 等于此实例，则为 true；否则为 false。</returns>
<param name="obj">要与此实例进行比较的 <see cref="T:System.Single"/> 对象。</param>
    </member>
    <member name="M:System.Single.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Single.GetTypeCode">
<summary>返回值类型 <see cref="T:System.Single"/> 的 <see cref="T:System.TypeCode"/>。</summary>
<returns>枚举常数 <see cref="F:System.TypeCode.Single"/>。</returns>
    </member>
    <member name="M:System.Single.IsInfinity(System.Single)">
<summary>返回一个值，该值指示指定数字是计算为负无穷大还是正无穷大。</summary>
<returns>如果 <paramref name="f"/> 的计算结果为 <see cref="F:System.Single.PositiveInfinity"/> 或 <see cref="F:System.Single.NegativeInfinity"/>，则为 true；否则为 false。</returns>
<param name="f">单精度浮点数。 </param>
    </member>
    <member name="M:System.Single.IsNaN(System.Single)">
<summary>返回一个值，该值指示指定数字是否计算为非数字 (<see cref="F:System.Single.NaN"/>)。</summary>
<returns>如果 <paramref name="f"/> 计算的结果不是数字 (<see cref="F:System.Single.NaN"/>)，则为 true；否则为 false。</returns>
<param name="f">单精度浮点数。 </param>
    </member>
    <member name="M:System.Single.IsNegativeInfinity(System.Single)">
<summary>返回一个值，该值指示指定数字是否计算为负无穷大。</summary>
<returns>如果 <paramref name="f"/> 的计算结果为 <see cref="F:System.Single.NegativeInfinity"/>，则为 true；否则为 false。</returns>
<param name="f">单精度浮点数。 </param>
    </member>
    <member name="M:System.Single.IsPositiveInfinity(System.Single)">
<summary>返回一个值，该值指示指定数字是否计算为正无穷大。</summary>
<returns>如果 <paramref name="f"/> 的计算结果为 <see cref="F:System.Single.PositiveInfinity"/>，则为 true；否则为 false。</returns>
<param name="f">单精度浮点数。 </param>
    </member>
    <member name="F:System.Single.MaxValue">
<summary>表示 <see cref="T:System.Single"/> 的最大可能值。此字段为常量。</summary>
    </member>
    <member name="F:System.Single.MinValue">
<summary>表示 <see cref="T:System.Single"/> 的最小可能值。此字段为常量。</summary>
    </member>
    <member name="F:System.Single.NaN">
<summary>表示非数字 (NaN)。此字段为常量。</summary>
    </member>
    <member name="F:System.Single.NegativeInfinity">
<summary>表示负无穷。此字段为常量。</summary>
    </member>
    <member name="M:System.Single.Parse(System.String)">
<summary>将数字的字符串表示形式转换为它的等效单精度浮点数字。</summary>
<returns>与 <paramref name="s"/> 中指定的数值或符号等效的单精度浮点数字。</returns>
<param name="s">表示要转换的数字的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 不是一个有效格式的数字。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.Single.MinValue"/> 或大于 <see cref="F:System.Single.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles)">
<summary>将具有指定样式的数字的字符串表示形式转换为它的等效单精度浮点数字。</summary>
<returns>与在 <paramref name="s"/> 中指定的数值或符号等效的单精度浮点数字。</returns>
<param name="s">表示要转换的数字的字符串。 </param>
<param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s"/> 中的样式元素。一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Float"/> 与 <see cref="F:System.Globalization.NumberStyles.AllowThousands"/> 的组合。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 不是一个有效格式的数字。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.Single.MinValue"/> 或大于 <see cref="F:System.Single.MaxValue"/> 的数字。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或- <paramref name="style"/> 为 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 值。</exception>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
<summary>将具有指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效单精度浮点数字。</summary>
<returns>与在 <paramref name="s"/> 中指定的数值或符号等效的单精度浮点数字。</returns>
<param name="s">包含要转换的数字的字符串。 </param>
<param name="style">枚举值的一个按位组合，指示 <paramref name="s"/> 所允许的格式。一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Float"/> 与 <see cref="F:System.Globalization.NumberStyles.AllowThousands"/> 的组合。</param>
<param name="provider">一个提供有关 <paramref name="s"/> 的区域性特定的格式设置信息的对象。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 不代表数字值。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或- <paramref name="style"/> 为 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 值。</exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.Single.MinValue"/> 或大于 <see cref="F:System.Single.MaxValue"/> 的数字。</exception>
    </member>
    <member name="M:System.Single.Parse(System.String,System.IFormatProvider)">
<summary>将具有指定区域性特定格式的数字的字符串表示形式转换为它的等效单精度浮点数字。</summary>
<returns>与 <paramref name="s"/> 中指定的数值或符号等效的单精度浮点数字。</returns>
<param name="s">包含要转换的数字的字符串。 </param>
<param name="provider">一个提供有关 <paramref name="s"/> 的区域性特定的格式设置信息的对象。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 不是一个有效格式的数字。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.Single.MinValue"/> 或大于 <see cref="F:System.Single.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="F:System.Single.PositiveInfinity">
<summary>表示正无穷。此字段为常量。</summary>
    </member>
    <member name="M:System.Single.System#IConvertible#ToBoolean(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)"/>。 </summary>
<returns>如果当前实例的值不为零，则为 true；否则为 false。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToByte(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Byte"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToChar(System.IFormatProvider)">
<summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException"/>。 </summary>
<returns>不支持此转换。不返回任何值。</returns>
<param name="provider">忽略此参数。</param>
<exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDateTime(System.IFormatProvider)">
<summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>不支持此转换。不返回任何值。</returns>
<param name="provider">忽略此参数。</param>
<exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDecimal(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Decimal"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDouble(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Double"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt16(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Int16"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt32(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Int32"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt64(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Int64"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToSByte(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.SByte"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToSingle(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，未更改。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <paramref name="type"/>。</returns>
<param name="type">要将此 <see cref="T:System.Single"/> 值转换为的类型。</param>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/> 实现，提供有关返回值格式的信息。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt16(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)"/>。</summary>
<returns>当前实例的值，已转换为 <see cref="T:System.UInt16"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt32(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.UInt32"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt64(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.UInt64"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Single.ToString">
<summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
<returns>此实例的值的字符串表示。</returns>
    </member>
    <member name="M:System.Single.ToString(System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由 <paramref name="provider"/> 指定。</returns>
<param name="provider">一个提供区域性特定的格式设置信息的对象。 </param>
    </member>
    <member name="M:System.Single.ToString(System.String)">
<summary>使用指定的格式，将此实例的数值转换为它的等效字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由 <paramref name="format"/> 指定。</returns>
<param name="format">一个数值格式字符串。</param>
      <exception cref="T:System.FormatException">
<paramref name="format"/> 无效。 </exception>
    </member>
    <member name="M:System.Single.ToString(System.String,System.IFormatProvider)">
<summary>使用指定的格式和区域性特定格式设置信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由 <paramref name="format"/> 和 <paramref name="provider"/> 指定。</returns>
<param name="format">一个数值格式字符串。</param>
<param name="provider">一个提供区域性特定的格式设置信息的对象。 </param>
    </member>
    <member name="M:System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)">
<summary>将具有指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效单精度浮点数字。一个指示转换是否成功的返回代码。</summary>
<returns>如果成功转换了 <paramref name="s"/>，则为 true；否则为 false。</returns>
<param name="s">表示要转换的数字的字符串。 </param>
<param name="style">枚举值的一个按位组合，指示 <paramref name="s"/> 所允许的格式。一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Float"/> 与 <see cref="F:System.Globalization.NumberStyles.AllowThousands"/> 的组合。</param>
<param name="provider">一个提供有关 <paramref name="s"/> 的区域性特定的格式设置信息的对象。 </param>
<param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s"/> 中包含的数值或符号等效的单精度浮点数字；如果转换失败，则包含零。如果 <paramref name="s"/> 参数为 null，其格式不符合 <paramref name="style"/>，表示的数字小于 <see cref="F:System.Single.MinValue"/> 或大于 <see cref="F:System.Single.MaxValue"/>，或者 <paramref name="style"/> 不是 <see cref="T:System.Globalization.NumberStyles"/> 枚举的常数的有效组合，则转换失败。该参数未经初始化即被传递。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或- <paramref name="style"/> 为 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 值。</exception>
    </member>
    <member name="M:System.Single.TryParse(System.String,System.Single@)">
<summary>将数字的字符串表示形式转换为它的等效单精度浮点数字。一个指示转换是否成功的返回代码。</summary>
<returns>如果成功转换了 <paramref name="s"/>，则为 true；否则为 false。</returns>
<param name="s">表示要转换的数字的字符串。 </param>
<param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s"/> 所包含的数值或符号等效的单精度浮点数字；如果转换失败，则包含零。如果 <paramref name="s"/> 参数为 null，不是有效格式的数字或者表示的数字小于 <see cref="F:System.Single.MinValue"/> 或大于 <see cref="F:System.Single.MaxValue"/>，则转换将失败。该参数未经初始化即被传递。 </param>
    </member>
    <member name="T:System.StackOverflowException">
<summary>因包含的嵌套方法调用过多而导致执行堆栈溢出时引发的异常。无法继承此类。</summary>
    </member>
    <member name="M:System.StackOverflowException.#ctor">
<summary>初始化 <see cref="T:System.StackOverflowException"/> 类的新实例，将新实例的 <see cref="P:System.Exception.Message"/> 属性设置为系统提供的描述错误的消息，如“所请求的操作导致堆栈溢出”。此消息将考虑当前系统区域性。</summary>
    </member>
    <member name="M:System.StackOverflowException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.StackOverflowException"/> 类的新实例。</summary>
<param name="message">描述该错误的 <see cref="T:System.String"/>。message 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。 </param>
    </member>
    <member name="M:System.StackOverflowException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.StackOverflowException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不是 null 引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。 </param>
    </member>
    <member name="T:System.STAThreadAttribute">
<summary>指示应用程序的 COM 线程模型是单线程单元 (STA)。 </summary>
    </member>
    <member name="M:System.STAThreadAttribute.#ctor">
<summary>初始化 <see cref="T:System.STAThreadAttribute"/> 类的新实例。</summary>
    </member>
    <member name="T:System.String">
<summary>表示文本，即一系列 Unicode 字符。</summary>
    </member>
    <member name="M:System.String.#ctor(System.Char*)">
<summary>[SECURITY CRITICAL] 将 <see cref="T:System.String"/> 类的新实例初始化为由指向 Unicode 字符数组的指定指针所指示的值。</summary>
<param name="value">指向 Unicode 字符的 null 终止数组的指针。 </param>
    </member>
    <member name="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)">
<summary>[SECURITY CRITICAL] 将 <see cref="T:System.String"/> 类的新实例初始化为由指向 Unicode 字符数组的指定指针、该数组内的起始字符位置和一个长度所指示的值。</summary>
<param name="value">指向 Unicode 字符数组的指针。 </param>
<param name="startIndex"><paramref name="value"/> 内的起始位置。 </param>
<param name="length">要使用的 <paramref name="value"/> 内的字符数。 </param>
    </member>
    <member name="M:System.String.#ctor(System.Char,System.Int32)">
<summary>将 <see cref="T:System.String"/> 类的新实例初始化为由重复指定次数的指定 Unicode 字符指示的值。</summary>
<param name="c">一个 Unicode 字符。 </param>
<param name="count"><paramref name="c"/> 出现的次数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="count"/> 小于零。 </exception>
    </member>
    <member name="M:System.String.#ctor(System.Char[])">
<summary>将 <see cref="T:System.String"/> 类的新实例初始化为由 Unicode 字符数组指示的值。</summary>
<param name="value">Unicode 字符的数组。 </param>
    </member>
    <member name="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)">
<summary>将 <see cref="T:System.String"/> 类的新实例初始化为由 Unicode 字符数组、该数组内的起始字符位置和一个长度指示的值。</summary>
<param name="value">Unicode 字符的数组。 </param>
<param name="startIndex"><paramref name="value"/> 内的起始位置。 </param>
<param name="length">要使用的 <paramref name="value"/> 内的字符数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 或 <paramref name="length"/> 小于零。-或- <paramref name="startIndex"/> 和 <paramref name="length"/> 的和大于 <paramref name="value"/> 中的元素数。 </exception>
    </member>
    <member name="M:System.String.#ctor(System.SByte*)">
<summary>[SECURITY CRITICAL] 将 <see cref="T:System.String"/> 类的新实例初始化为由指向 8 位带符号整数数组的指针所指示的值。</summary>
<param name="value">指向 8 位带符号整数的 null 终止数组的指针。 </param>
    </member>
    <member name="P:System.String.Chars(System.Int32)">
<summary>获取当前字符串中位于指定字符位置的字符。</summary>
<returns><paramref name="index"/> 位置处的 Unicode 字符。</returns>
<param name="index">当前字符串中的字符位置。 </param>
      <exception cref="T:System.IndexOutOfRangeException">
<paramref name="index"/> 大于等于该对象的长度或小于零。 </exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
<summary>对从两个指定的 <see cref="T:System.String"/> 对象中提取的子字符串执行区分区域性的比较，并返回一个指示二者在排序顺序中的相互关系的整数。</summary>
<returns>一个 32 位带符号整数，指示两个比较数之间的词法关系。值 条件 小于零 <paramref name="strA"/> 中的子字符串小于 <paramref name="strB"/> 中的子字符串。零 子字符串相等，或者 <paramref name="length"/> 为零。大于零 <paramref name="strA"/> 中的子字符串大于 <paramref name="strB"/> 中的子字符串。 </returns>
<param name="strA">要在比较中使用的第一个字符串。 </param>
<param name="indexA"><paramref name="strA"/> 中子字符串的位置。 </param>
<param name="strB">要在比较中使用的第二个字符串。 </param>
<param name="indexB"><paramref name="strB"/> 中子字符串的位置。 </param>
<param name="length">要比较的子字符串中字符的最大数量。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="indexA"/> 大于 <paramref name="strA"/>.<see cref="P:System.String.Length"/>。-或- <paramref name="indexB"/> 大于 <paramref name="strB"/>.<see cref="P:System.String.Length"/>。-或- <paramref name="indexA"/>、<paramref name="indexB"/> 或 <paramref name="length"/> 为负。-或- <paramref name="indexA"/> 或 <paramref name="indexB"/> 为 null 并且 <paramref name="length"/> 大于零。</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
<summary>使用指定的比较选项和影响比较的区域性特定信息来比较两个指定的 <see cref="T:System.String"/> 对象的子字符串，并返回一个整数，该整数指示这两个子字符串在排序顺序中的相互关系。 </summary>
<returns>一个整数，指示两个子字符串之间的词法关系。值 条件 小于零 <paramref name="strA"/> 中的子字符串小于 <paramref name="strB"/> 中的子字符串。零 子字符串相等或 <paramref name="length"/> 为零。大于零 <paramref name="strA"/> 中的子字符串大于 <paramref name="strB"/> 中的子字符串。</returns>
<param name="strA">第一个字符串。   </param>
<param name="indexA"><paramref name="strA"/> 中子字符串的起始位置。</param>
<param name="strB">第二个字符串。</param>
<param name="indexB"><paramref name="strB"/> 中子字符串的起始位置。</param>
<param name="length">要比较的子字符串中字符的最大数量。</param>
<param name="culture">提供区域性特定的比较信息的区域性。</param>
<param name="options">要在执行比较时使用的选项，如忽略大小写或符号。  </param>
      <exception cref="T:System.ArgumentException">
<paramref name="options"/> 不是一个 <see cref="T:System.Globalization.CompareOptions"/> 值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="indexA"/> 大于 strA.Length。-或-<paramref name="indexB"/> 大于 strB.Length。-或-<paramref name="indexA"/>、<paramref name="indexB"/> 或 <paramref name="length"/> 为负。-或- <paramref name="strA"/> 或 <paramref name="strB"/> 为 null 并且 <paramref name="length"/> 大于零。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="culture"/> 为 null。</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
<summary>使用指定的字符串比较选项对两个指定的 <see cref="T:System.String"/> 对象的子字符串进行比较，并返回一个指示二者在排序顺序中的相互关系的整数。</summary>
<returns>一个 32 位带符号整数，指示两个比较数之间的词法关系。值 条件 小于零 <paramref name="strA"/> 参数中的子字符串小于 <paramref name="strB"/> 参数中的子字符串。零 子字符串相等或 <paramref name="length"/> 参数为零。大于零 <paramref name="strA"/> 中的子字符串大于 <paramref name="strB"/> 中的子字符串。 </returns>
<param name="strA">要在比较中使用的第一个字符串。 </param>
<param name="indexA"><paramref name="strA"/> 中子字符串的位置。 </param>
<param name="strB">要在比较中使用的第二个字符串。</param>
<param name="indexB"><paramref name="strB"/> 中子字符串的位置。 </param>
<param name="length">要比较的子字符串中字符的最大数量。 </param>
<param name="comparisonType">一个枚举值，用于指定比较中要使用的规则。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="indexA"/> 大于 <paramref name="strA"/>.<see cref="P:System.String.Length"/>。-或- <paramref name="indexB"/> 大于 <paramref name="strB"/>.<see cref="P:System.String.Length"/>。-或- <paramref name="indexA"/>、<paramref name="indexB"/> 或 <paramref name="length"/> 为负。-或- <paramref name="indexA"/> 或 <paramref name="indexB"/> 为 null 并且 <paramref name="length"/> 大于零。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="comparisonType"/> 不是一个 <see cref="T:System.StringComparison"/> 值。 </exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.String)">
<summary>对两个指定的 <see cref="T:System.String"/> 对象执行区分区域性的比较，并返回一个指示二者在排序顺序中的相互关系的整数。</summary>
<returns>一个 32 位带符号整数，指示两个比较数之间的词法关系。值 条件 小于零 <paramref name="strA"/> 小于 <paramref name="strB"/>。零 <paramref name="strA"/> 等于 <paramref name="strB"/>。大于零 <paramref name="strA"/> 大于 <paramref name="strB"/>。 </returns>
<param name="strA">要比较的第一个字符串。 </param>
<param name="strB">要比较的第二个字符串。 </param>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
<summary>使用指定的比较选项和影响比较的区域性特定信息来比较两个指定的 <see cref="T:System.String"/> 对象，并返回一个整数，该整数指示这两个字符串在排序顺序中的相互关系。</summary>
<returns>一个 32 位带符号整数，指示 <paramref name="strA"/> 和 <paramref name="strB"/> 之间的词法关系。值 条件 小于零 <paramref name="strA"/> 小于 <paramref name="strB"/>。零 <paramref name="strA"/> 等于 <paramref name="strB"/>。大于零 <paramref name="strA"/> 大于 <paramref name="strB"/>。</returns>
<param name="strA">第一个字符串。  </param>
<param name="strB">第二个字符串。</param>
<param name="culture">提供区域性特定的比较信息的区域性。</param>
<param name="options">要在执行比较时使用的选项，如忽略大小写或符号。  </param>
      <exception cref="T:System.ArgumentException">
<paramref name="options"/> 不是一个 <see cref="T:System.Globalization.CompareOptions"/> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="culture"/> 为 null。</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.StringComparison)">
<summary>使用指定的字符串比较选项对两个指定的 <see cref="T:System.String"/> 对象进行比较，并返回一个指示二者在排序顺序中的相互关系的整数。</summary>
<returns>一个 32 位带符号整数，指示两个比较数之间的词法关系。值 条件 小于零 <paramref name="strA"/> 小于 <paramref name="strB"/>。零 <paramref name="strA"/> 等于 <paramref name="strB"/>。大于零 <paramref name="strA"/> 大于 <paramref name="strB"/>。 </returns>
<param name="strA">要比较的第一个字符串。</param>
<param name="strB">要比较的第二个字符串。 </param>
<param name="comparisonType">一个枚举值，用于指定比较中要使用的规则。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="comparisonType"/> 不是一个 <see cref="T:System.StringComparison"/> 值。 </exception>
      <exception cref="T:System.NotSupportedException">
<see cref="T:System.StringComparison"/> 不受支持。</exception>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
<summary>通过计算两个指定的 <see cref="T:System.String"/> 对象的每个子字符串中相应 <see cref="T:System.Char"/> 对象的数值比较子字符串。 </summary>
<returns>一个 32 位带符号整数，指示两个比较数之间的词法关系。值 条件 小于零 <paramref name="strA"/> 中的子字符串小于 <paramref name="strB"/> 中的子字符串。零 子字符串相等，或者 <paramref name="length"/> 为零。大于零 <paramref name="strA"/> 中的子字符串大于 <paramref name="strB"/> 中的子字符串。 </returns>
<param name="strA">要在比较中使用的第一个字符串。 </param>
<param name="indexA"><paramref name="strA"/> 中子字符串的起始索引。 </param>
<param name="strB">要在比较中使用的第二个字符串。 </param>
<param name="indexB"><paramref name="strB"/> 中子字符串的起始索引。 </param>
<param name="length">要比较的子字符串中字符的最大数量。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="indexA"/> 大于 <paramref name="strA"/>。<see cref="P:System.String.Length"/>。-或- <paramref name="indexB"/> 大于 <paramref name="strB"/>。<see cref="P:System.String.Length"/>。-或- <paramref name="indexA"/>、<paramref name="indexB"/> 或 <paramref name="length"/> 为负。 </exception>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.String)">
<summary>通过计算每个字符串中相应 <see cref="T:System.Char"/> 对象的数值来比较两个指定的 <see cref="T:System.String"/> 对象，并返回一个指示二者在排序顺序中的相对位置的整数。</summary>
<returns>一个整数，指示两个比较数之间的词法关系。值 条件 小于零 <paramref name="strA"/> 小于 <paramref name="strB"/>。零 <paramref name="strA"/> 与 <paramref name="strB"/> 相等。大于零 <paramref name="strA"/> 大于 <paramref name="strB"/>。 </returns>
<param name="strA">要比较的第一个字符串。 </param>
<param name="strB">要比较的第二个字符串。 </param>
    </member>
    <member name="M:System.String.CompareTo(System.Object)">
<summary>将此实例与指定的 <see cref="T:System.Object"/> 进行比较，并指示此实例在排序顺序中是位于指定的 <see cref="T:System.Object"/> 之前、之后还是与其出现在同一位置。</summary>
<returns>一个 32 位带符号整数，该整数指示此实例在排序顺序中是位于 <paramref name="value"/> 参数之前、之后还是与其出现在同一位置。值 条件 小于零 此实例位于 <paramref name="value"/> 之前。零 此实例在排序顺序中的位置与 <paramref name="value"/> 相同。大于零 此实例位于 <paramref name="value"/> 之后。-或- <paramref name="value"/> 为 null。 </returns>
<param name="value">一个对象，其计算结果为 String。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="value"/> 不是 <see cref="T:System.String"/>。 </exception>
    </member>
    <member name="M:System.String.CompareTo(System.String)">
<summary>将此实例与指定的 <see cref="T:System.String"/> 对象进行比较，并指示此实例在排序顺序中是位于指定的 <see cref="T:System.String"/> 之前、之后还是与其出现在同一位置。</summary>
<returns>一个 32 位带符号整数，该整数指示此实例在排序顺序中是位于 <paramref name="value"/> 参数之前、之后还是与其出现在同一位置。值 条件 小于零 此实例位于 <paramref name="strB"/> 之前。零 此实例在排序顺序中的位置与 <paramref name="strB"/> 相同。大于零 此实例位于 <paramref name="strB"/> 之后。-或- <paramref name="strB"/> 为 null。 </returns>
<param name="strB">要与此实例进行比较的字符串。 </param>
    </member>
    <member name="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})">
<summary>连接类型为 <see cref="T:System.String"/> 的 <see cref="T:System.Collections.Generic.IEnumerable`1"/> 构造集合的成员。</summary>
<returns><paramref name="values"/> 中的连接字符串。</returns>
<param name="values">一个集合对象，该对象实现 <see cref="T:System.Collections.Generic.IEnumerable`1"/>，且其泛型类型参数为 <see cref="T:System.String"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="values"/> 为 null。 </exception>
    </member>
    <member name="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})">
<summary>连接 <see cref="T:System.Collections.Generic.IEnumerable`1"/> 实现的成员。</summary>
<returns><paramref name="values"/> 中的连接成员。</returns>
<param name="values">一个实现 <see cref="T:System.Collections.Generic.IEnumerable`1"/> 接口的集合对象。</param>
<typeparam name="T"><paramref name="values"/> 成员的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
<paramref name="values"/> 为 null。 </exception>
    </member>
    <member name="M:System.String.Concat(System.Object)">
<summary>创建指定对象的 <see cref="T:System.String"/> 表示形式。</summary>
<returns><paramref name="arg0"/> 的值的字符串表示形式；如果 <paramref name="arg0"/> 为 null，则为 <see cref="F:System.String.Empty"/>。</returns>
<param name="arg0">要表示的对象，或 null。 </param>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object)">
<summary>连接两个指定对象的字符串表示形式。</summary>
<returns><paramref name="arg0"/> 和 <paramref name="arg1"/> 的值经过连接的字符串表示形式。</returns>
<param name="arg0">要连接的第一个对象。 </param>
<param name="arg1">要连接的第二个对象。 </param>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object,System.Object)">
<summary>连接三个指定对象的 <see cref="T:System.String"/> 表示形式。</summary>
<returns><paramref name="arg0"/>、<paramref name="arg1"/> 和 <paramref name="arg2"/> 的值经过连接的字符串表示形式。</returns>
<param name="arg0">要连接的第一个对象。 </param>
<param name="arg1">要连接的第二个对象。 </param>
<param name="arg2">要连接的第三个对象。 </param>
    </member>
    <member name="M:System.String.Concat(System.Object[])">
<summary>连接指定 <see cref="T:System.Object"/> 数组中的元素的字符串表示形式。</summary>
<returns><paramref name="args"/> 中元素的值经过连接的字符串表示形式。</returns>
<param name="args">一个对象数组，其中包含要连接的元素。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="args"/> 为 null。 </exception>
<exception cref="T:System.OutOfMemoryException">内存不足。</exception>
    </member>
    <member name="M:System.String.Concat(System.String,System.String)">
<summary>连接 <see cref="T:System.String"/> 的两个指定实例。</summary>
<returns><paramref name="str0"/> 和 <paramref name="str1"/> 的连接。</returns>
<param name="str0">要连接的第一个字符串。 </param>
<param name="str1">要连接的第二个字符串。 </param>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String)">
<summary>连接 <see cref="T:System.String"/> 的三个指定实例。</summary>
<returns><paramref name="str0"/>、<paramref name="str1"/> 和 <paramref name="str2"/> 的连接。</returns>
<param name="str0">要连接的第一个字符串。 </param>
<param name="str1">要连接的第二个字符串。 </param>
<param name="str2">要连接的第三个字符串。 </param>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String,System.String)">
<summary>连接 <see cref="T:System.String"/> 的四个指定实例。</summary>
<returns><paramref name="str0"/>、<paramref name="str1"/>、<paramref name="str2"/> 和 <paramref name="str3"/> 的连接。</returns>
<param name="str0">要连接的第一个字符串。 </param>
<param name="str1">要连接的第二个字符串。 </param>
<param name="str2">要连接的第三个字符串。 </param>
<param name="str3">要连接的第四个字符串。 </param>
    </member>
    <member name="M:System.String.Concat(System.String[])">
<summary>连接指定的 <see cref="T:System.String"/> 数组的元素。</summary>
<returns><paramref name="values"/> 的连接元素。</returns>
<param name="values">字符串实例的数组。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="values"/> 为 null。 </exception>
<exception cref="T:System.OutOfMemoryException">内存不足。</exception>
    </member>
    <member name="M:System.String.Contains(System.String)">
<summary>返回一个值，该值指示指定的 <see cref="T:System.String"/> 对象是否出现在此字符串中。</summary>
<returns>如果 <paramref name="value"/> 参数出现在此字符串中，或者 <paramref name="value"/> 为空字符串 ("")，则为 true；否则为 false。</returns>
<param name="value">要查找的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
    </member>
    <member name="M:System.String.Copy(System.String)">
<summary>创建一个与指定的 <see cref="T:System.String"/> 具有相同值的 <see cref="T:System.String"/> 的新实例。</summary>
<returns>值与 <paramref name="str"/> 相同的新字符串。</returns>
<param name="str">要复制的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="str"/> 为 null。 </exception>
    </member>
    <member name="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
<summary>将指定数目的字符从此实例中的指定位置复制到 Unicode 字符数组中的指定位置。</summary>
<param name="sourceIndex">此实例中要复制的第一个字符的索引。 </param>
<param name="destination">此实例中的字符所复制到的 Unicode 字符数组。 </param>
<param name="destinationIndex"><paramref name="destination"/> 中的索引，在此处开始复制操作。 </param>
<param name="count">此实例中要复制到 <paramref name="destination"/> 的字符数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="destination"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="sourceIndex"/>、<paramref name="destinationIndex"/> 或 <paramref name="count"/> 为负 -或- <paramref name="count"/> 大于从 <paramref name="startIndex"/> 到此实例结尾的子字符串长度 -或- <paramref name="count"/> 大于从 <paramref name="destinationIndex"/> 到 <paramref name="destination"/> 结尾的子数组长度</exception>
    </member>
    <member name="F:System.String.Empty">
<summary>表示空字符串。此字段为只读。</summary>
    </member>
    <member name="M:System.String.EndsWith(System.String)">
<summary>确定此实例的末尾是否与指定的字符串匹配。</summary>
<returns>如果 <paramref name="value"/> 与此实例的末尾匹配，则为 true；否则为 false。</returns>
<param name="value">要匹配的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
    </member>
    <member name="M:System.String.EndsWith(System.String,System.StringComparison)">
<summary>使用指定的比较选项进行比较时，确定此字符串的末尾是否与指定的字符串匹配。</summary>
<returns>如果此字符串的末尾与 <paramref name="value"/> 参数匹配，则为 true；否则为 false。</returns>
<param name="value">要匹配的字符串。 </param>
<param name="comparisonType">枚举值之一，用于确定如何比较此字符串与 <paramref name="value"/>。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="comparisonType"/> 不是一个 <see cref="T:System.StringComparison"/> 值。</exception>
    </member>
    <member name="M:System.String.Equals(System.Object)">
<summary>确定此 <see cref="T:System.String"/> 实例是否与指定的对象（也必须是 <see cref="T:System.String"/>）具有相同的值。</summary>
<returns>如果 <paramref name="obj"/> 为 <see cref="T:System.String"/> 并且它的值与此实例相同，则为 true；否则为 false。</returns>
<param name="obj">要与此实例进行比较的字符串。 </param>
    </member>
    <member name="M:System.String.Equals(System.String)">
<summary>确定此实例是否与另一个指定的 <see cref="T:System.String"/> 对象具有相同的值。</summary>
<returns>如果 <paramref name="value"/> 参数的值与此实例相同，则为 true；否则为 false。</returns>
<param name="value">要与此实例进行比较的字符串。 </param>
    </member>
    <member name="M:System.String.Equals(System.String,System.String)">
<summary>确定两个指定的 <see cref="T:System.String"/> 对象是否具有相同的值。</summary>
<returns>如果 <paramref name="a"/> 的值与 <paramref name="b"/> 的值相同，则为 true；否则为 false。</returns>
<param name="a">要比较的第一个字符串，或 null。 </param>
<param name="b">要比较的第二个字符串，或 null。 </param>
    </member>
    <member name="M:System.String.Equals(System.String,System.String,System.StringComparison)">
<summary>确定两个指定的 <see cref="T:System.String"/> 对象是否具有相同的值。参数指定区域性、大小写以及比较所用的排序规则。</summary>
<returns>如果 <paramref name="a"/> 参数的值等于 <paramref name="b"/> 参数的值，则为 true；否则为 false。</returns>
<param name="a">要比较的第一个字符串，或 null。 </param>
<param name="b">要比较的第二个字符串，或 null。 </param>
<param name="comparisonType">枚举值之一，用于指定比较规则。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="comparisonType"/> 不是一个 <see cref="T:System.StringComparison"/> 值。 </exception>
    </member>
    <member name="M:System.String.Equals(System.String,System.StringComparison)">
<summary>确定此字符串是否与指定的 <see cref="T:System.String"/> 对象具有相同的值。参数指定区域性、大小写以及比较所用的排序规则。</summary>
<returns>如果 <paramref name="value"/> 参数的值与此字符串相同，则为 true；否则为 false。</returns>
<param name="value">要与此实例进行比较的字符串。</param>
<param name="comparisonType">枚举值之一，用于指定比较规则。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="comparisonType"/> 不是一个 <see cref="T:System.StringComparison"/> 值。 </exception>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
<summary>将指定字符串中的格式项替换为指定数组中相应对象的值的文本等效项。指定的参数提供区域性特定的格式设置信息。</summary>
<returns><paramref name="format"/> 的一个副本，其中格式项已替换为 <paramref name="args"/> 中相应对象的字符串表示形式。</returns>
<param name="provider">一个提供区域性特定的格式设置信息的对象。 </param>
<param name="format">复合格式字符串（请参阅“备注”）。 </param>
<param name="args">一个对象数组，其中包含零个或多个要设置格式的对象。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="format"/> 或 <paramref name="args"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="format"/> 无效。-或- 格式项的索引小于零或大于等于 <paramref name="args"/> 数组的长度。 </exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object)">
<summary>将指定字符串中的一个或多个格式项替换为指定对象的字符串表示形式。</summary>
<returns><paramref name="format"/> 的一个副本，其中的第一个格式项已替换为 <paramref name="arg0"/> 的字符串表示形式。</returns>
<param name="format">复合格式字符串（请参阅“备注”）。 </param>
<param name="arg0">要设置格式的对象。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="format"/> 为 null。 </exception>
<exception cref="T:System.FormatException"><paramref name="format"/> 中的格式项无效。-或- 格式项的索引不为零。 </exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object,System.Object)">
<summary>将指定字符串中的格式项替换为两个指定对象的字符串表示形式。</summary>
<returns><paramref name="format"/> 的一个副本，其中格式项已替换为 <paramref name="arg0"/> 和 <paramref name="arg1"/> 的字符串表示形式。</returns>
<param name="format">复合格式字符串（请参阅“备注”）。 </param>
<param name="arg0">要设置格式的第一个对象。 </param>
<param name="arg1">要设置格式的第二个对象。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="format"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="format"/> 无效。-或- 格式项的索引为不为零或 1。</exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
<summary>将指定字符串中的格式项替换为三个指定对象的字符串表示形式。</summary>
<returns><paramref name="format"/> 的一个副本，其中的第一个、第二个和第三个格式项已替换为 <paramref name="arg0"/>、<paramref name="arg1"/> 和 <paramref name="arg2"/> 的字符串表示形式。</returns>
<param name="format">复合格式字符串（请参阅“备注”）。 </param>
<param name="arg0">要设置格式的第一个对象。 </param>
<param name="arg1">要设置格式的第二个对象。 </param>
<param name="arg2">要设置格式的第三个对象。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="format"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="format"/> 无效。-或- 格式项的索引小于零或大于 2。 </exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object[])">
<summary>将指定字符串中的格式项替换为指定数组中相应对象的字符串表示形式。</summary>
<returns><paramref name="format"/> 的一个副本，其中格式项已替换为 <paramref name="args"/> 中相应对象的字符串表示形式。</returns>
<param name="format">复合格式字符串（请参阅“备注”）。 </param>
<param name="args">一个对象数组，其中包含零个或多个要设置格式的对象。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="format"/> 或 <paramref name="args"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="format"/> 无效。-或- 格式项的索引小于零或大于等于 <paramref name="args"/> 数组的长度。 </exception>
    </member>
    <member name="M:System.String.GetHashCode">
<summary>返回该字符串的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="M:System.String.GetTypeCode">
<summary>返回类 <see cref="T:System.String"/> 的 <see cref="T:System.TypeCode"/>。</summary>
<returns>枚举常数 <see cref="F:System.TypeCode.String"/>。</returns>
    </member>
    <member name="M:System.String.IndexOf(System.Char)">
<summary>报告指定 Unicode 字符在此字符串中的第一个匹配项的索引。</summary>
<returns>如果找到该字符，则为 <paramref name="value"/> 的从零开始的索引位置；如果未找到，则为 -1。</returns>
<param name="value">要查找的 Unicode 字符。 </param>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32)">
<summary>报告指定 Unicode 字符在此字符串中的第一个匹配项的索引。该搜索从指定字符位置开始。</summary>
<returns>如果找到该字符，则为 <paramref name="value"/> 的从零开始的索引位置；如果未找到，则为 -1。</returns>
<param name="value">要查找的 Unicode 字符。 </param>
<param name="startIndex">搜索起始位置。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 小于零，或在此实例的末尾之外指定一个位置。 </exception>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
<summary>报告指定字符在此实例中的第一个匹配项的索引。搜索从指定字符位置开始，并检查指定数量的字符位置。</summary>
<returns>如果找到该字符，则为 <paramref name="value"/> 的从零开始的索引位置；如果未找到，则为 -1。</returns>
<param name="value">要查找的 Unicode 字符。 </param>
<param name="startIndex">搜索起始位置。 </param>
<param name="count">要检查的字符位置数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="count"/> 或 <paramref name="startIndex"/> 为负。-或- <paramref name="count"/> + <paramref name="startIndex"/> 在此实例的末尾之外指定一个位置。 </exception>
    </member>
    <member name="M:System.String.IndexOf(System.String)">
<summary>报告指定字符串在此实例中的第一个匹配项的索引。</summary>
<returns>如果找到该字符串，则为 <paramref name="value"/> 的从零开始的索引位置；如果未找到该字符串，则为 -1。如果 <paramref name="value"/> 为 <see cref="F:System.String.Empty"/>，则返回值为 0。</returns>
<param name="value">要查找的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32)">
<summary>报告指定字符串在此实例中的第一个匹配项的索引。该搜索从指定字符位置开始。</summary>
<returns>如果找到该字符串，则为 <paramref name="value"/> 的从零开始的索引位置；如果未找到该字符串，则为 -1。如果 <paramref name="value"/> 为 <see cref="F:System.String.Empty"/>，则返回值为 <paramref name="startIndex"/>。</returns>
<param name="value">要查找的字符串。 </param>
<param name="startIndex">搜索起始位置。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 为负。-或- <paramref name="startIndex"/> 指定不在此实例内的位置。 </exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
<summary>报告指定字符串在此实例中的第一个匹配项的索引。搜索从指定字符位置开始，并检查指定数量的字符位置。</summary>
<returns>如果找到该字符串，则为 <paramref name="value"/> 的从零开始的索引位置；如果未找到该字符串，则为 -1。如果 <paramref name="value"/> 为 <see cref="F:System.String.Empty"/>，则返回值为 <paramref name="startIndex"/>。</returns>
<param name="value">要查找的字符串。 </param>
<param name="startIndex">搜索起始位置。 </param>
<param name="count">要检查的字符位置数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="count"/> 或 <paramref name="startIndex"/> 为负。-或- <paramref name="count"/> 加上 <paramref name="startIndex"/> 指定不在此实例内的位置。 </exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
<summary>报告指定的字符串在当前 <see cref="T:System.String"/> 对象中的第一个匹配项的索引。参数指定当前字符串中的起始搜索位置、要搜索的当前字符串中的字符数量，以及要用于指定字符串的搜索类型。</summary>
<returns>如果找到该字符串，则为 <paramref name="value"/> 参数的从零开始的索引位置；如果未找到该字符串，则为 -1。如果 <paramref name="value"/> 为 <see cref="F:System.String.Empty"/>，则返回值为 <paramref name="startIndex"/>。</returns>
<param name="value">要查找的字符串。 </param>
<param name="startIndex">搜索起始位置。 </param>
<param name="count">要检查的字符位置数。 </param>
<param name="comparisonType">指定搜索规则的枚举值之一。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="count"/> 或 <paramref name="startIndex"/> 为负。-或- <paramref name="count"/> 加上 <paramref name="startIndex"/> 指定不在此实例内的位置。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="comparisonType"/> 不是有效的 <see cref="T:System.StringComparison"/> 值。</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
<summary>报告指定的字符串在当前 <see cref="T:System.String"/> 对象中的第一个匹配项的索引。参数指定当前字符串中的起始搜索位置以及要用于指定字符串的搜索类型。</summary>
<returns>如果找到该字符串，则为 <paramref name="value"/> 参数的从零开始的索引位置；如果未找到该字符串，则为 -1。如果 <paramref name="value"/> 为 <see cref="F:System.String.Empty"/>，则返回值为 <paramref name="startIndex"/>。</returns>
<param name="value">要查找的字符串。 </param>
<param name="startIndex">搜索起始位置。 </param>
<param name="comparisonType">指定搜索规则的枚举值之一。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 为负，或者指定一个不在此实例中的位置。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="comparisonType"/> 不是有效的 <see cref="T:System.StringComparison"/> 值。</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.StringComparison)">
<summary>报告指定的字符串在当前 <see cref="T:System.String"/> 对象中的第一个匹配项的索引。一个参数指定要用于指定字符串的搜索类型。</summary>
<returns>如果找到该字符串，则为 <paramref name="value"/> 参数的从零开始的索引位置；如果未找到该字符串，则为 -1。如果 <paramref name="value"/> 为 <see cref="F:System.String.Empty"/>，则返回值为 0。</returns>
<param name="value">要查找的字符串。 </param>
<param name="comparisonType">指定搜索规则的枚举值之一。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="comparisonType"/> 不是有效的 <see cref="T:System.StringComparison"/> 值。</exception>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[])">
<summary>报告指定 Unicode 字符数组中的任意字符在此实例中第一个匹配项的索引。</summary>
<returns>此实例中第一个匹配项的从零开始的索引位置，在此处找到了 <paramref name="anyOf"/> 中的任意字符；否则，如果未找到 <paramref name="anyOf"/> 中的字符，则为 -1。</returns>
<param name="anyOf">Unicode 字符数组，包含一个或多个要查找的字符。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="anyOf"/> 为 null。 </exception>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32)">
<summary>报告指定 Unicode 字符数组中的任意字符在此实例中第一个匹配项的索引。该搜索从指定字符位置开始。</summary>
<returns>此实例中第一个匹配项的从零开始的索引位置，在此处找到了 <paramref name="anyOf"/> 中的任意字符；否则，如果未找到 <paramref name="anyOf"/> 中的字符，则为 -1。</returns>
<param name="anyOf">Unicode 字符数组，包含一个或多个要查找的字符。 </param>
<param name="startIndex">搜索起始位置。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="anyOf"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 为负。-或- <paramref name="startIndex"/> 大于此实例中的字符数。 </exception>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
<summary>报告指定 Unicode 字符数组中的任意字符在此实例中第一个匹配项的索引。搜索从指定字符位置开始，并检查指定数量的字符位置。</summary>
<returns>此实例中第一个匹配项的从零开始的索引位置，在此处找到了 <paramref name="anyOf"/> 中的任意字符；否则，如果未找到 <paramref name="anyOf"/> 中的字符，则为 -1。</returns>
<param name="anyOf">Unicode 字符数组，包含一个或多个要查找的字符。 </param>
<param name="startIndex">搜索起始位置。 </param>
<param name="count">要检查的字符位置数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="anyOf"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="count"/> 或 <paramref name="startIndex"/> 为负。-或- <paramref name="count"/> + <paramref name="startIndex"/> 大于此实例中的字符数。 </exception>
    </member>
    <member name="M:System.String.Insert(System.Int32,System.String)">
<summary>在此实例中的指定索引位置插入一个指定的 <see cref="T:System.String"/> 实例。</summary>
<returns>与此实例等效的一个新字符串，但在该字符串的 <paramref name="startIndex"/> 位置处插入了 <paramref name="value"/>。</returns>
<param name="startIndex">此插入的索引位置。 </param>
<param name="value">要插入的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 为负，或大于此实例的长度。 </exception>
    </member>
    <member name="M:System.String.Intern(System.String)">
<summary>检索系统对指定 <see cref="T:System.String"/> 的引用。</summary>
<returns>如果暂存了 <paramref name="str"/>，则返回系统对其的引用；否则返回对值为 <paramref name="str"/> 的字符串的新引用。</returns>
<param name="str">要在暂存池中搜索的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="str"/> 为 null。 </exception>
    </member>
    <member name="M:System.String.IsInterned(System.String)">
<summary>检索对指定 <see cref="T:System.String"/> 的引用。</summary>
<returns>如果 <paramref name="str"/> 在公共语言运行时的暂存池中，则返回对它的引用；否则返回 null。</returns>
<param name="str">要在暂存池中搜索的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="str"/> 为 null。 </exception>
    </member>
    <member name="M:System.String.IsNullOrEmpty(System.String)">
<summary>指示指定的字符串是 null 还是 <see cref="F:System.String.Empty"/> 字符串。</summary>
<returns>如果 <paramref name="value"/> 参数为 null 或空字符串 ("")，则为 true；否则为 false。</returns>
<param name="value">要测试的字符串。 </param>
    </member>
    <member name="M:System.String.IsNullOrWhiteSpace(System.String)">
<summary>指示指定的字符串是 null、空还是仅由空白字符组成。</summary>
<returns>如果 <paramref name="value"/> 参数为 null 或 <see cref="F:System.String.Empty"/>，或者如果 <paramref name="value"/> 仅由空白字符组成，则为 true。 </returns>
<param name="value">要测试的字符串。</param>
    </member>
    <member name="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>连接类型为 <see cref="T:System.String"/> 的 <see cref="T:System.Collections.Generic.IEnumerable`1"/> 构造集合的成员，在每个成员之间使用指定的分隔符。</summary>
<returns>一个由 <paramref name="values"/> 的成员组成的字符串，这些成员以 <paramref name="separator"/> 字符串分隔。</returns>
<param name="separator">要用作分隔符的字符串。</param>
<param name="values">一个包含要连接的字符串的集合。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="values"/> 为 null。 </exception>
    </member>
    <member name="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
<summary>连接字符串集合的成员，其中在每个成员之间使用指定的分隔符。</summary>
<returns>一个由 <paramref name="values"/> 的成员组成的字符串，这些成员以 <paramref name="separator"/> 字符串分隔。</returns>
<param name="separator">要用作分隔符的字符串。</param>
<param name="values">一个包含要连接的对象的集合。</param>
<typeparam name="T"><paramref name="values"/> 成员的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
<paramref name="values"/> 为 null。 </exception>
    </member>
    <member name="M:System.String.Join(System.String,System.Object[])">
<summary>连接对象数组的各个元素，其中在每个元素之间使用指定的分隔符。</summary>
<returns>一个由 <paramref name="values"/> 的元素组成的字符串，这些元素以 <paramref name="separator"/> 字符串分隔。</returns>
<param name="separator">要用作分隔符的字符串。</param>
<param name="values">一个数组，其中包含要连接的元素。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="values"/> 为 null。 </exception>
    </member>
    <member name="M:System.String.Join(System.String,System.String[])">
<summary>在指定 <see cref="T:System.String"/> 数组的每个元素之间连接指定的分隔符 <see cref="T:System.String"/>，从而产生单个连接的字符串。</summary>
<returns>一个由 <paramref name="value"/> 中的元素组成的字符串，这些元素以 <paramref name="separator"/> 字符串分隔。</returns>
<param name="separator">要用作分隔符的字符串。 </param>
<param name="value">一个数组，其中包含要连接的元素。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
    </member>
    <member name="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
<summary>在指定 <see cref="T:System.String"/> 数组的每个元素之间连接指定的分隔符 <see cref="T:System.String"/>，从而产生单个连接的字符串。参数指定要使用的第一个数组元素和元素数。</summary>
<returns>由 <paramref name="value"/> 中的字符串组成的字符串，这些字符串以 <paramref name="separator"/> 字符串分隔。-或- 如果 <paramref name="count"/> 为零，<paramref name="value"/> 没有元素，或 <paramref name="separator"/> 以及 <paramref name="value"/> 的全部元素均为 <see cref="F:System.String.Empty"/>，则为 <see cref="F:System.String.Empty"/>。</returns>
<param name="separator">要用作分隔符的字符串。 </param>
<param name="value">一个数组，其中包含要连接的元素。 </param>
<param name="startIndex"><paramref name="value"/> 中要使用的第一个元素。 </param>
<param name="count"><paramref name="value"/> 中要使用的元素数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 或 <paramref name="count"/> 小于 0。-或- <paramref name="startIndex"/> 加上 <paramref name="count"/> 大于 <paramref name="value"/> 中的元素数。 </exception>
<exception cref="T:System.OutOfMemoryException">内存不足。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char)">
<summary>报告指定 Unicode 字符在此实例中的最后一个匹配项的索引位置。</summary>
<returns>如果找到该字符，则为 <paramref name="value"/> 的从零开始的索引位置；如果未找到，则为 -1。</returns>
<param name="value">要查找的 Unicode 字符。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32)">
<summary>报告指定 Unicode 字符在此实例中的最后一个匹配项的索引位置。该搜索从指定字符位置开始。</summary>
<returns>如果找到该字符，则为 <paramref name="value"/> 的从零开始的索引位置；如果未找到或当前实例等于 <see cref="F:System.String.Empty"/>，则为 -1。</returns>
<param name="value">要查找的 Unicode 字符。 </param>
<param name="startIndex">此实例内子字符串的起始位置。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
<exception cref="T:System.ArgumentOutOfRangeException">当前实例不等于 <see cref="F:System.String.Empty"/> 并且 <paramref name="startIndex"/> 小于零或大于此实例的长度。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
<summary>报告指定的 Unicode 字符在此实例内子字符串中的最后一个匹配项的索引位置。搜索从指定字符位置开始，并检查指定数量的字符位置。</summary>
<returns>如果找到该字符，则为 <paramref name="value"/> 的从零开始的索引位置；如果未找到或当前实例等于 <see cref="F:System.String.Empty"/>，则为 -1。</returns>
<param name="value">要查找的 Unicode 字符。 </param>
<param name="startIndex">此实例内子字符串的起始位置。 </param>
<param name="count">要检查的字符位置数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
<exception cref="T:System.ArgumentOutOfRangeException">当前实例不等于 <see cref="F:System.String.Empty"/> 并且 <paramref name="startIndex"/> 小于零或大于等于此实例的长度。-或- <paramref name="startIndex"/> + 1 - <paramref name="count"/> 小于零。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String)">
<summary>报告指定字符串在此实例中的最后一个匹配项的索引位置。</summary>
<returns>如果找到该字符串，则为 <paramref name="value"/> 的从零开始的索引位置；如果未找到该字符串，则为 -1。如果 <paramref name="value"/> 为 <see cref="F:System.String.Empty"/>，则返回值为此实例中的最后一个索引位置。</returns>
<param name="value">要查找的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32)">
<summary>报告指定字符串在此实例中的最后一个匹配项的索引位置。该搜索从指定字符位置开始。</summary>
<returns>如果找到该字符串，则为 <paramref name="value"/> 的从零开始的索引位置；如果未找到或当前实例等于 <see cref="F:System.String.Empty"/>，则为 -1。如果 <paramref name="value"/> 为 <see cref="F:System.String.Empty"/>，则返回值为 <paramref name="startIndex"/>。</returns>
<param name="value">要查找的字符串。 </param>
<param name="startIndex">搜索起始位置。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
<exception cref="T:System.ArgumentOutOfRangeException">当前实例不等于 <see cref="F:System.String.Empty"/> 并且 <paramref name="startIndex"/> 小于零或指定一个不在此实例中的位置。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
<summary>报告指定字符串在此实例中的最后一个匹配项的索引位置。搜索从指定字符位置开始，并检查指定数量的字符位置。</summary>
<returns>如果找到该字符串，则为 <paramref name="value"/> 的从零开始的索引位置；如果未找到或当前实例等于 <see cref="F:System.String.Empty"/>，则为 -1。如果 <paramref name="value"/> 为 <see cref="F:System.String.Empty"/>，则返回值为 <paramref name="startIndex"/>。</returns>
<param name="value">要查找的字符串。 </param>
<param name="startIndex">搜索起始位置。 </param>
<param name="count">要检查的字符位置数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
<exception cref="T:System.ArgumentOutOfRangeException">当前实例不等于 <see cref="F:System.String.Empty"/> 并且 <paramref name="count"/> 或 <paramref name="startIndex"/> 为负。-或- 当前实例不等于 <see cref="F:System.String.Empty"/> 并且 <paramref name="startIndex"/> 大于此实例的长度。-或- 当前实例不等于 <see cref="F:System.String.Empty"/> 并且 <paramref name="startIndex"/> + 1 - <paramref name="count"/> 指定一个不在此实例中的位置。 </exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
<summary>报告指定字符串在此实例中的最后一个匹配项的索引位置。参数指定当前字符串中的起始搜索位置、要搜索的当前字符串中的字符数量，以及要用于指定字符串的搜索类型。</summary>
<returns>如果找到该字符串，则为 <paramref name="value"/> 参数的从零开始的索引位置；如果未找到或当前实例等于 <see cref="F:System.String.Empty"/>，则为 -1。如果 <paramref name="value"/> 为 <see cref="F:System.String.Empty"/>，则返回值为 <paramref name="startIndex"/>。</returns>
<param name="value">要查找的字符串。 </param>
<param name="startIndex">搜索起始位置。 </param>
<param name="count">要检查的字符位置数。 </param>
<param name="comparisonType">指定搜索规则的枚举值之一。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
<exception cref="T:System.ArgumentOutOfRangeException">当前实例不等于 <see cref="F:System.String.Empty"/> 并且 <paramref name="count"/> 或 <paramref name="startIndex"/> 为负。-或- 当前实例不等于 <see cref="F:System.String.Empty"/> 并且 <paramref name="startIndex"/> 大于此实例的长度。-或- 当前实例不等于 <see cref="F:System.String.Empty"/> 并且 <paramref name="startIndex"/> + 1 - <paramref name="count"/> 指定一个不在此实例中的位置。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="comparisonType"/> 不是有效的 <see cref="T:System.StringComparison"/> 值。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
<summary>报告指定字符串在当前 <see cref="T:System.String"/> 对象中最后一个匹配项的索引。参数指定当前字符串中的起始搜索位置以及要用于指定字符串的搜索类型。</summary>
<returns>如果找到该字符串，则为 <paramref name="value"/> 参数的从零开始的索引位置；如果未找到或当前实例等于 <see cref="F:System.String.Empty"/>，则为 -1。如果 <paramref name="value"/> 为 <see cref="F:System.String.Empty"/>，则返回值为 <paramref name="startIndex"/>。</returns>
<param name="value">要查找的字符串。 </param>
<param name="startIndex">搜索起始位置。 </param>
<param name="comparisonType">指定搜索规则的枚举值之一。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
<exception cref="T:System.ArgumentOutOfRangeException">当前实例不等于 <see cref="F:System.String.Empty"/> 并且 <paramref name="startIndex"/> 小于零或指定一个不在此实例中的位置。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="comparisonType"/> 不是有效的 <see cref="T:System.StringComparison"/> 值。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.StringComparison)">
<summary>报告指定字符串在当前 <see cref="T:System.String"/> 对象中最后一个匹配项的索引。一个参数指定要用于指定字符串的搜索类型。</summary>
<returns>如果找到该字符串，则为 <paramref name="value"/> 参数的从零开始的索引位置；如果未找到该字符串，则为 -1。如果 <paramref name="value"/> 为 <see cref="F:System.String.Empty"/>，则返回值为此实例中的最后一个索引位置。</returns>
<param name="value">要查找的字符串。 </param>
<param name="comparisonType">指定搜索规则的枚举值之一。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="comparisonType"/> 不是有效的 <see cref="T:System.StringComparison"/> 值。</exception>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[])">
<summary>报告在 Unicode 数组中指定的一个或多个字符在此实例中的最后一个匹配项的索引位置。</summary>
<returns>此实例中最后一个匹配项的索引位置，在此位置找到 <paramref name="anyOf"/> 中的任意字符；否则，如果未找到 <paramref name="anyOf"/> 中的字符，则为 -1。</returns>
<param name="anyOf">Unicode 字符数组，包含一个或多个要查找的字符。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="anyOf"/> 为 null。 </exception>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
<summary>报告在 Unicode 数组中指定的一个或多个字符在此实例中的最后一个匹配项的索引位置。该搜索从指定字符位置开始。</summary>
<returns>此实例中最后一个匹配项的索引位置，在此位置找到 <paramref name="anyOf"/> 中的任意字符；否则，如果未找到 <paramref name="anyOf"/> 中的字符或当前实例等于 <see cref="F:System.String.Empty"/>，则为 -1。</returns>
<param name="anyOf">Unicode 字符数组，包含一个或多个要查找的字符。 </param>
<param name="startIndex">搜索起始位置。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="anyOf"/> 为 null。 </exception>
<exception cref="T:System.ArgumentOutOfRangeException">当前实例不等于 <see cref="F:System.String.Empty"/> 并且 <paramref name="startIndex"/> 指定一个不在此实例中的位置。 </exception>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
<summary>报告在 Unicode 数组中指定的一个或多个字符在此实例中的最后一个匹配项的索引位置。搜索从指定字符位置开始，并检查指定数量的字符位置。</summary>
<returns>此实例中最后一个匹配项的索引位置，在此位置找到 <paramref name="anyOf"/> 中的任意字符；否则，如果未找到 <paramref name="anyOf"/> 中的字符或当前实例等于 <see cref="F:System.String.Empty"/>，则为 -1。</returns>
<param name="anyOf">Unicode 字符数组，包含一个或多个要查找的字符。 </param>
<param name="startIndex">搜索起始位置。 </param>
<param name="count">要检查的字符位置数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="anyOf"/> 为 null。 </exception>
<exception cref="T:System.ArgumentOutOfRangeException">当前实例不等于 <see cref="F:System.String.Empty"/> 并且 <paramref name="count"/> 或 <paramref name="startIndex"/> 为负。-或- 当前实例不等于 <see cref="F:System.String.Empty"/> 并且 <paramref name="startIndex"/> 减去 <paramref name="count"/> 指定一个不在此实例中的位置。 </exception>
    </member>
    <member name="P:System.String.Length">
<summary>获取当前字符串中的字符数。</summary>
<returns>当前字符串中字符的数量。</returns>
    </member>
    <member name="M:System.String.op_Equality(System.String,System.String)">
<summary>确定两个指定的 <see cref="T:System.String"/> 对象是否具有相同的值。</summary>
<returns>如果 <paramref name="a"/> 的值与 <paramref name="b"/> 的值相同，则为 true；否则为 false。</returns>
<param name="a">要比较的第一个字符串，或 null。 </param>
<param name="b">要比较的第二个字符串，或 null。 </param>
    </member>
    <member name="M:System.String.op_Inequality(System.String,System.String)">
<summary>确定两个指定的 <see cref="T:System.String"/> 对象是否具有不同的值。</summary>
<returns>如果 <paramref name="a"/> 的值不同于 <paramref name="b"/> 的值，则为 true；否则为 false。</returns>
<param name="a">要比较的第一个字符串，或 null。 </param>
<param name="b">要比较的第二个字符串，或 null。 </param>
    </member>
    <member name="M:System.String.PadLeft(System.Int32)">
<summary>右对齐此实例中的字符，在左边用空格填充以达到指定的总长度。</summary>
<returns>与此实例等效的一个新字符串，但该字符串为右对齐，因此，在左侧填充所需数量的空格，使长度达到 <paramref name="totalWidth"/>。如果 <paramref name="totalWidth"/> 小于此实例的长度，则为与此实例相同的新 <see cref="T:System.String"/> 对象。</returns>
<param name="totalWidth">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="totalWidth"/> 小于零。 </exception>
    </member>
    <member name="M:System.String.PadLeft(System.Int32,System.Char)">
<summary>右对齐此实例中的字符，在左边用指定的 Unicode 字符填充以达到指定的总长度。</summary>
<returns>与此实例等效的一个新字符串，但该字符串为右对齐，因此，在左侧填充所需任意数量的 <paramref name="paddingChar"/> 字符，使长度达到 <paramref name="totalWidth"/>。如果 <paramref name="totalWidth"/> 小于此实例的长度，则为与此实例相同的新 <see cref="T:System.String"/>。</returns>
<param name="totalWidth">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。 </param>
<param name="paddingChar">Unicode 填充字符。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="totalWidth"/> 小于零。 </exception>
    </member>
    <member name="M:System.String.PadRight(System.Int32)">
<summary>返回指定长度的新字符串，其中字符串的结尾用空格或指定的 Unicode 字符填充。</summary>
<returns>与此实例等效的一个新字符串，但该字符串为左对齐，因此，在右侧填充所需任意数量的空格，使长度达到 <paramref name="totalWidth"/>。如果 <paramref name="totalWidth"/> 小于此实例的长度，则为与此实例相同的新 <see cref="T:System.String"/>。</returns>
<param name="totalWidth">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="totalWidth"/> 小于零。 </exception>
    </member>
    <member name="M:System.String.PadRight(System.Int32,System.Char)">
<summary>左对齐此字符串中的字符，在右边用指定的 Unicode 字符填充以达到指定的总长度。</summary>
<returns>与此实例等效的一个新字符串，但该字符串为左对齐，因此，在右侧填充所需任意数量的 <paramref name="paddingChar"/> 字符，使长度达到 <paramref name="totalWidth"/>。如果 <paramref name="totalWidth"/> 小于此实例的长度，则为与此实例相同的新 <see cref="T:System.String"/>。</returns>
<param name="totalWidth">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。 </param>
<param name="paddingChar">Unicode 填充字符。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="totalWidth"/> 小于零。 </exception>
    </member>
    <member name="M:System.String.Remove(System.Int32)">
<summary>删除此字符串中从指定位置到最后位置的所有字符。</summary>
<returns>一个新的字符串，它等于此字符串剔除已移除字符后的字符串。</returns>
<param name="startIndex">开始删除字符的从零开始的位置。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 小于零。-或- <paramref name="startIndex"/> 指定一个不在此字符串内的位置。 </exception>
    </member>
    <member name="M:System.String.Remove(System.Int32,System.Int32)">
<summary>从此实例中的指定位置开始删除指定数目的字符。</summary>
<returns>一个新字符串，它等于此实例减去 <paramref name="count"/> 数目的字符。</returns>
<param name="startIndex">开始删除字符的从零开始的位置。 </param>
<param name="count">要删除的字符数。 </param>
<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> 或 <paramref name="count"/> 小于零。-或- <paramref name="startIndex"/> 加上 <paramref name="count"/> 指定一个此实例外的位置。 </exception>
    </member>
    <member name="M:System.String.Replace(System.Char,System.Char)">
<summary>返回一个新字符串，其中已将当前字符串中的指定 Unicode 字符的所有匹配项替换为其他指定的 Unicode 字符。</summary>
<returns>等效于此实例（除了 <paramref name="oldChar"/> 的所有实例都已替换为 <paramref name="newChar"/> 外）的字符串。</returns>
<param name="oldChar">要替换的 Unicode 字符。 </param>
<param name="newChar">要替换 <paramref name="oldChar"/> 的所有匹配项的 Unicode 字符。 </param>
    </member>
    <member name="M:System.String.Replace(System.String,System.String)">
<summary>返回一个新字符串，其中已将当前字符串中指定字符串的所有匹配项替换为其他指定的字符串。</summary>
<returns>等效于当前字符串（除了 <paramref name="oldValue"/> 的所有实例都已替换为 <paramref name="newValue"/> 外）的字符串。</returns>
<param name="oldValue">要替换的字符串。 </param>
<param name="newValue">要替换 <paramref name="oldValue"/> 的所有匹配项的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="oldValue"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="oldValue"/> 是空字符串 ("")。 </exception>
    </member>
    <member name="M:System.String.Split(System.Char[])">
<summary>返回的字符串数组包含此实例中的子字符串（由指定 Unicode 字符数组的元素分隔）。</summary>
<returns>一个数组，其元素包含此实例中的子字符串，这些子字符串由 <paramref name="separator"/> 中的一个或多个字符分隔。有关更多信息，请参阅“备注”一节。</returns>
<param name="separator">分隔此实例中子字符串的 Unicode 字符数组、不包含分隔符的空数组或 null。 </param>
    </member>
    <member name="M:System.String.Split(System.Char[],System.StringSplitOptions)">
<summary>返回的字符串数组包含此字符串中的子字符串（由指定 Unicode 字符数组的元素分隔）。参数指定是否返回空数组元素。</summary>
<returns>一个数组，其元素包含此字符串中的子字符串，这些子字符串由 <paramref name="separator"/> 中的一个或多个字符分隔。有关更多信息，请参阅“备注”一节。</returns>
<param name="separator">分隔此字符串中子字符串的 Unicode 字符数组、不包含分隔符的空数组或 null。</param>
<param name="options">一个标志，指示是否在返回的数组中包括空元素。指定 <see cref="F:System.StringSplitOptions.RemoveEmptyEntries"/> 将从返回的数组中省略空元素。指定 <see cref="F:System.StringSplitOptions.None"/> 将在返回的数组中包括空元素。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="options"/> 不是 <see cref="T:System.StringSplitOptions"/> 枚举的成员。</exception>
    </member>
    <member name="M:System.String.Split(System.String[],System.StringSplitOptions)">
<summary>返回的字符串数组包含此字符串中的子字符串（由指定字符串数组的元素分隔）。参数指定是否返回空数组元素。</summary>
<returns>一个数组，其元素包含此字符串中的子字符串，这些子字符串由 <paramref name="separator"/> 中的一个或多个字符串分隔。有关更多信息，请参阅“备注”一节。</returns>
<param name="separator">分隔此字符串中的子字符串的字符串数组、不包含分隔符的空数组或 null。 </param>
<param name="options">一个标志，指示是否在返回的数组中包括空元素。指定 <see cref="F:System.StringSplitOptions.RemoveEmptyEntries"/> 将从返回的数组中省略空数组元素。指定 <see cref="F:System.StringSplitOptions.None"/> 将在返回的数组中包括空数组元素。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="options"/> 不是 <see cref="T:System.StringSplitOptions"/> 枚举的成员。</exception>
    </member>
    <member name="M:System.String.StartsWith(System.String)">
<summary>确定此实例的开头是否与指定的字符串匹配。</summary>
<returns>如果 <paramref name="value"/> 与此字符串的开头匹配，则为 true；否则为 false。</returns>
<param name="value">要比较的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
    </member>
    <member name="M:System.String.StartsWith(System.String,System.StringComparison)">
<summary>当使用指定的比较选项进行比较时，确定此字符串实例的开头是否与指定的字符串匹配。</summary>
<returns>如果此字符串的开头与 <paramref name="value"/> 参数匹配，则为 true；否则为 false。</returns>
<param name="value">要比较的字符串。 </param>
<param name="comparisonType">枚举值之一，用于确定如何比较此字符串与 <paramref name="value"/>。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="comparisonType"/> 不是一个 <see cref="T:System.StringComparison"/> 值。</exception>
    </member>
    <member name="M:System.String.Substring(System.Int32)">
<summary>从此实例检索子字符串。子字符串从指定的字符位置开始。</summary>
<returns>与此实例中在 <paramref name="startIndex"/> 处开头的子字符串等效的一个字符串；如果 <paramref name="startIndex"/> 等于此实例的长度，则为 <see cref="F:System.String.Empty"/>。</returns>
<param name="startIndex">此实例中子字符串的起始字符位置（从零开始）。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 小于零或大于此实例的长度。 </exception>
    </member>
    <member name="M:System.String.Substring(System.Int32,System.Int32)">
<summary>从此实例检索子字符串。子字符串从指定的字符位置开始且具有指定的长度。</summary>
<returns>与此实例中在 <paramref name="startIndex"/> 处开头、长度为 <paramref name="length"/> 的子字符串等效的一个字符串，如果 <paramref name="startIndex"/> 等于此实例的长度且 <paramref name="length"/> 为零，则为 <see cref="F:System.String.Empty"/>。</returns>
<param name="startIndex">此实例中子字符串的起始字符位置（从零开始）。 </param>
<param name="length">子字符串中的字符数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 加上 <paramref name="length"/> 指示一个不在此实例内的位置。-或- <paramref name="startIndex"/> 或 <paramref name="length"/> 小于零。 </exception>
    </member>
    <member name="M:System.String.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
<summary>返回循环访问当前 <see cref="T:System.String"/> 对象的枚举器。 </summary>
<returns>类型 <see cref="T:System.Char"/> 的 <see cref="T:System.Collections.Generic.IEnumerator`1"/>，可用于循环访问当前的 <see cref="T:System.String"/> 对象。</returns>
    </member>
    <member name="M:System.String.System#Collections#IEnumerable#GetEnumerator">
<summary>返回循环访问当前 <see cref="T:System.String"/> 对象的枚举器。 </summary>
<returns>可用于循环访问当前 <see cref="T:System.String"/> 对象的对象。</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToBoolean(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)"/>。</summary>
<returns>如果当前 <see cref="T:System.String"/> 对象的值为 <see cref="F:System.Boolean.TrueString"/>，则为 true；如果当前 <see cref="T:System.String"/> 对象的值为 <see cref="F:System.Boolean.FalseString"/>，则为 false。</returns>
<param name="provider">忽略此参数。</param>
<exception cref="T:System.FormatException">当前 <see cref="T:System.String"/> 对象的值既不是 <see cref="F:System.Boolean.TrueString"/> 也不是 <see cref="F:System.Boolean.FalseString"/>。</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToByte(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)"/>。</summary>
<returns>当前 <see cref="T:System.String"/> 对象的转换值。</returns>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/> 对象，提供区域性特定的格式设置信息。 </param>
<exception cref="T:System.FormatException">无法分析当前 <see cref="T:System.String"/> 对象的值。 </exception>
<exception cref="T:System.OverflowException">当前 <see cref="T:System.String"/> 对象的值是大于 <see cref="F:System.Byte.MaxValue"/> 或小于 <see cref="F:System.Byte.MinValue"/> 的数。 </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToChar(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)"/>。</summary>
<returns>当前 <see cref="T:System.String"/> 对象中索引 0 处的字符。</returns>
<param name="provider">一个对象，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.String.System#IConvertible#ToDateTime(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDateTime(System.IFormatProvider)"/>。</summary>
<returns>当前 <see cref="T:System.String"/> 对象的转换值。</returns>
<param name="provider">一个对象，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.String.System#IConvertible#ToDecimal(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)"/>。</summary>
<returns>当前 <see cref="T:System.String"/> 对象的转换值。</returns>
<param name="provider">一个对象，提供区域性特定的格式设置信息。 </param>
<exception cref="T:System.FormatException">无法分析当前 <see cref="T:System.String"/> 对象的值。 </exception>
<exception cref="T:System.OverflowException">当前 <see cref="T:System.String"/> 对象的值是小于 <see cref="F:System.Decimal.MinValue"/> 或大于 <see cref="F:System.Decimal.MaxValue"/> 的数。 </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToDouble(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)"/>。</summary>
<returns>当前 <see cref="T:System.String"/> 对象的转换值。</returns>
<param name="provider">一个对象，提供区域性特定的格式设置信息。 </param>
<exception cref="T:System.FormatException">无法分析当前 <see cref="T:System.String"/> 对象的值。 </exception>
<exception cref="T:System.OverflowException">当前 <see cref="T:System.String"/> 对象的值是小于 <see cref="F:System.Double.MinValue"/> 或大于 <see cref="F:System.Double.MaxValue"/> 的数。 </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt16(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)"/>。</summary>
<returns>当前 <see cref="T:System.String"/> 对象的转换值。</returns>
<param name="provider">一个对象，提供区域性特定的格式设置信息。 </param>
<exception cref="T:System.FormatException">无法分析当前 <see cref="T:System.String"/> 对象的值。 </exception>
<exception cref="T:System.OverflowException">当前 <see cref="T:System.String"/> 对象的值是大于 <see cref="F:System.Int16.MaxValue"/> 或小于 <see cref="F:System.Int16.MinValue"/> 的数。</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt32(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)"/>。</summary>
<returns>当前 <see cref="T:System.String"/> 对象的转换值。</returns>
<param name="provider">一个对象，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt64(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)"/>。</summary>
<returns>当前 <see cref="T:System.String"/> 对象的转换值。</returns>
<param name="provider">一个对象，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.String.System#IConvertible#ToSByte(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)"/>。</summary>
<returns>当前 <see cref="T:System.String"/> 对象的转换值。</returns>
<param name="provider">一个对象，提供区域性特定的格式设置信息。 </param>
<exception cref="T:System.FormatException">无法分析当前 <see cref="T:System.String"/> 对象的值。 </exception>
<exception cref="T:System.OverflowException">当前 <see cref="T:System.String"/> 对象的值是大于 <see cref="F:System.SByte.MaxValue"/> 或小于 <see cref="F:System.SByte.MinValue"/> 的数。 </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToSingle(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)"/>。</summary>
<returns>当前 <see cref="T:System.String"/> 对象的转换值。</returns>
<param name="provider">一个对象，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)"/>。</summary>
<returns>当前 <see cref="T:System.String"/> 对象的转换值。</returns>
<param name="type">返回对象的类型。 </param>
<param name="provider">一个对象，提供区域性特定的格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="type"/> 为 null。</exception>
<exception cref="T:System.InvalidCastException">无法将当前 <see cref="T:System.String"/> 对象的值转换为 <paramref name="type"/> 参数指定的类型。 </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt16(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)"/>。</summary>
<returns>当前 <see cref="T:System.String"/> 对象的转换值。</returns>
<param name="provider">一个对象，提供区域性特定的格式设置信息。 </param>
<exception cref="T:System.FormatException">无法分析当前 <see cref="T:System.String"/> 对象的值。 </exception>
<exception cref="T:System.OverflowException">当前 <see cref="T:System.String"/> 对象的值是大于 <see cref="F:System.UInt16.MaxValue"/> 或小于 <see cref="F:System.UInt16.MinValue"/> 的数。</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt32(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)"/>。</summary>
<returns>当前 <see cref="T:System.String"/> 对象的转换值。</returns>
<param name="provider">一个对象，提供区域性特定的格式设置信息。</param>
<exception cref="T:System.FormatException">无法分析当前 <see cref="T:System.String"/> 对象的值。 </exception>
<exception cref="T:System.OverflowException">当前 <see cref="T:System.String"/> 对象的值是大于 <see cref="F:System.UInt32.MaxValue"/> 或小于 <see cref="F:System.UInt32.MinValue"/> 的数</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt64(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)"/>。</summary>
<returns>当前 <see cref="T:System.String"/> 对象的转换值。</returns>
<param name="provider">一个对象，提供区域性特定的格式设置信息。</param>
    </member>
    <member name="M:System.String.ToCharArray">
<summary>将此实例中的字符复制到 Unicode 字符数组。</summary>
<returns>元素为此实例的各字符的 Unicode 字符数组。如果此实例是空字符串，则返回的数组为空且长度为零。</returns>
    </member>
    <member name="M:System.String.ToLower">
<summary>根据当前区域性的大小写规则返回此字符串转换为小写形式的副本。</summary>
<returns>当前字符串的等效小写形式。</returns>
    </member>
    <member name="M:System.String.ToLower(System.Globalization.CultureInfo)">
<summary>根据指定区域性的大小写规则返回此字符串转换为小写形式的副本。</summary>
<returns>当前字符串的等效小写形式。</returns>
<param name="culture">一个对象，用于提供区域性特定的大小写规则。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="culture"/> 为 null。 </exception>
    </member>
    <member name="M:System.String.ToLowerInvariant">
<summary>返回此字符串的转换为小写形式的副本，返回时使用固定区域性的大小写规则。</summary>
<returns>当前字符串的等效小写形式。</returns>
    </member>
    <member name="M:System.String.ToString">
<summary>返回字符串的此实例；不执行实际转换。</summary>
<returns>当前的字符串。</returns>
    </member>
    <member name="M:System.String.ToString(System.IFormatProvider)">
<summary>返回字符串的此实例；不执行实际转换。</summary>
<returns>当前的字符串。</returns>
<param name="provider">（保留）一个对象，提供区域性特定的格式设置信息。 </param>
    </member>
    <member name="M:System.String.ToUpper">
<summary>根据当前区域性的大小写规则返回此字符串转换为大写形式的副本。</summary>
<returns>当前字符串的大写形式。</returns>
    </member>
    <member name="M:System.String.ToUpper(System.Globalization.CultureInfo)">
<summary>根据指定区域性的大小写规则返回此字符串转换为大写形式的副本。</summary>
<returns>当前字符串的大写形式。</returns>
<param name="culture">一个对象，用于提供区域性特定的大小写规则。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="culture"/> 为 null。 </exception>
    </member>
    <member name="M:System.String.ToUpperInvariant">
<summary>使用固定区域性的大小写规则返回此字符串的转换为大写形式的副本。</summary>
<returns>当前字符串的大写形式。</returns>
    </member>
    <member name="M:System.String.Trim">
<summary>从当前字符串移除所有前导空白字符和尾部空白字符。</summary>
<returns>从当前字符串的开头和结尾移除所有空白字符后剩余的字符串。</returns>
    </member>
    <member name="M:System.String.Trim(System.Char[])">
<summary>从当前字符串移除数组中指定的一组字符的所有前导匹配项和尾部匹配项。</summary>
<returns>从当前字符串的开头和结尾移除所出现的所有 <paramref name="trimChars"/> 参数中的字符后剩余的字符串。如果 <paramref name="trimChars"/> 为 null 或空数组，则改为移除空白字符。</returns>
<param name="trimChars">要移除的 Unicode 字符数组或 null。 </param>
    </member>
    <member name="M:System.String.TrimEnd(System.Char[])">
<summary>从当前字符串移除数组中指定的一组字符的所有尾部匹配项。</summary>
<returns>从当前字符串的结尾移除所出现的所有 <paramref name="trimChars"/> 参数中的字符后剩余的字符串。如果 <paramref name="trimChars"/> 为 null 或空数组，则改为移除空白字符。</returns>
<param name="trimChars">要移除的 Unicode 字符数组或 null。 </param>
    </member>
    <member name="M:System.String.TrimStart(System.Char[])">
<summary>从当前字符串移除数组中指定的一组字符的所有前导匹配项。</summary>
<returns>从当前字符串的开头移除所出现的所有 <paramref name="trimChars"/> 参数中的字符后剩余的字符串。如果 <paramref name="trimChars"/> 为 null 或空数组，则改为移除空白字符。</returns>
<param name="trimChars">要移除的 Unicode 字符数组或 null。 </param>
    </member>
    <member name="T:System.StringComparer">
<summary>表示一种字符串比较操作，该操作使用特定的大小写以及基于区域性的比较规则或序号比较规则。</summary>
    </member>
    <member name="M:System.StringComparer.#ctor">
<summary>初始化 <see cref="T:System.StringComparer"/> 类的新实例。 </summary>
    </member>
    <member name="M:System.StringComparer.Compare(System.Object,System.Object)">
<summary>当在派生类中重写时，将比较两个对象并返回其相对排序顺序的指示。</summary>
<returns>值 含义 小于零 <paramref name="x"/> 小于 <paramref name="y"/>。-或- <paramref name="x"/> 为 null。零 <paramref name="x"/> 等于 <paramref name="y"/>。大于零 <paramref name="x"/> 大于 <paramref name="y"/>。-或-<paramref name="y"/> 为 null。</returns>
<param name="x">要与 <paramref name="y"/> 比较的对象。</param>
<param name="y">要与 <paramref name="x"/> 比较的对象。</param>
<exception cref="T:System.ArgumentException"><paramref name="x"/> 或 <paramref name="y"/> 都不是 <see cref="T:System.String"/> 对象，并且 <paramref name="x"/> 或 <paramref name="y"/> 都不实现 <see cref="T:System.IComparable"/> 接口。</exception>
    </member>
    <member name="M:System.StringComparer.Compare(System.String,System.String)">
<summary>当在派生类中重写时，将比较两个字符串并返回其相对排序顺序的指示。</summary>
<returns>值 含义 小于零 <paramref name="x"/> 小于 <paramref name="y"/>。-或- <paramref name="x"/> 为 null。零 <paramref name="x"/> 等于 <paramref name="y"/>。大于零 <paramref name="x"/> 大于 <paramref name="y"/>。-或- <paramref name="y"/> 为 null。</returns>
<param name="x">要与 <paramref name="y"/> 比较的字符串。</param>
<param name="y">要与 <paramref name="x"/> 比较的字符串。</param>
    </member>
    <member name="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
<summary>创建 <see cref="T:System.StringComparer"/> 对象，该对象根据指定区域性的规则对字符串进行比较。</summary>
<returns>一个新 <see cref="T:System.StringComparer"/> 对象，该对象根据 <paramref name="culture"/> 参数使用的比较规则以及 <paramref name="ignoreCase"/> 参数指定的大小写规则执行字符串比较。</returns>
<param name="culture">一个区域性，其语言规则用于执行字符串比较。</param>
<param name="ignoreCase">如果为 true，则指定比较操作不区分大小写；如果为 false，则指定比较操作区分大小写。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="culture"/> 为 null。</exception>
    </member>
    <member name="P:System.StringComparer.CurrentCulture">
<summary>获取一个 <see cref="T:System.StringComparer"/> 对象，该对象使用当前区域性的单词比较规则执行区分大小写的字符串比较。</summary>
<returns>一个新的 <see cref="T:System.StringComparer"/> 对象。</returns>
    </member>
    <member name="P:System.StringComparer.CurrentCultureIgnoreCase">
<summary>获取一个 <see cref="T:System.StringComparer"/> 对象，该对象使用当前区域性的单词比较规则执行不区分大小写的字符串比较。</summary>
<returns>一个新的 <see cref="T:System.StringComparer"/> 对象。</returns>
    </member>
    <member name="M:System.StringComparer.Equals(System.Object,System.Object)">
<summary>当在派生类中重写时，指示两个对象是否相等。</summary>
<returns>如果 <paramref name="x"/> 和 <paramref name="y"/> 引用同一对象或者 <paramref name="x"/> 和 <paramref name="y"/> 是相同的对象类型且这些对象相等，则为 true；否则为 false。</returns>
<param name="x">要与 <paramref name="y"/> 比较的对象。</param>
<param name="y">要与 <paramref name="x"/> 比较的对象。</param>
    </member>
    <member name="M:System.StringComparer.Equals(System.String,System.String)">
<summary>当在派生类中重写时，指示两个字符串是否相等。</summary>
<returns>如果 <paramref name="x"/> 和 <paramref name="y"/> 引用同一对象，或者 <paramref name="x"/> 和 <paramref name="y"/> 相等，则为 true；否则为 false。</returns>
<param name="x">要与 <paramref name="y"/> 比较的字符串。</param>
<param name="y">要与 <paramref name="x"/> 比较的字符串。</param>
    </member>
    <member name="M:System.StringComparer.GetHashCode(System.Object)">
<summary>当在派生类中重写时，将获取指定对象的哈希代码。</summary>
<returns>根据 <paramref name="obj"/> 参数的值计算出的 32 位有符号哈希代码。</returns>
<param name="obj">一个对象。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="obj"/> 为 null。</exception>
    </member>
    <member name="M:System.StringComparer.GetHashCode(System.String)">
<summary>当在派生类中重写时，将获取指定字符串的哈希代码。</summary>
<returns>根据 <paramref name="obj"/> 参数的值计算出的 32 位有符号哈希代码。</returns>
<param name="obj">一个字符串。</param>
<exception cref="T:System.ArgumentException">没有足够的内存，因为无法分配计算哈希代码所需的缓冲区。</exception>
    </member>
    <member name="P:System.StringComparer.InvariantCulture">
<summary>获取一个 <see cref="T:System.StringComparer"/> 对象，该对象使用固定区域性的单词比较规则执行区分大小写的字符串比较。</summary>
<returns>一个新的 <see cref="T:System.StringComparer"/> 对象。</returns>
    </member>
    <member name="P:System.StringComparer.InvariantCultureIgnoreCase">
<summary>获取一个 <see cref="T:System.StringComparer"/> 对象，该对象使用固定区域性的单词比较规则执行不区分大小写的字符串比较。</summary>
<returns>一个新的 <see cref="T:System.StringComparer"/> 对象。</returns>
    </member>
    <member name="P:System.StringComparer.Ordinal">
<summary>获取一个 <see cref="T:System.StringComparer"/> 对象，该对象执行区分大小写的序号字符串比较。</summary>
<returns><see cref="T:System.StringComparer"/> 对象。</returns>
    </member>
    <member name="P:System.StringComparer.OrdinalIgnoreCase">
<summary>获取一个 <see cref="T:System.StringComparer"/> 对象，该对象执行不区分大小写的序号字符串比较。</summary>
<returns><see cref="T:System.StringComparer"/> 对象。</returns>
    </member>
    <member name="T:System.StringComparison">
<summary>指定 <see cref="M:System.String.Compare(System.String,System.String)"/> 和 <see cref="M:System.String.Equals(System.Object)"/> 方法的某些重载要使用的区域、大小写和排序规则。</summary>
    </member>
    <member name="F:System.StringComparison.CurrentCulture">
<summary>使用区域敏感排序规则和当前区域比较字符串。</summary>
    </member>
    <member name="F:System.StringComparison.CurrentCultureIgnoreCase">
<summary>使用区域敏感排序规则、当前区域来比较字符串，同时忽略被比较字符串的大小写。</summary>
    </member>
    <member name="F:System.StringComparison.InvariantCulture">
<summary>使用区域敏感排序规则和固定区域比较字符串。</summary>
    </member>
    <member name="F:System.StringComparison.InvariantCultureIgnoreCase">
<summary>使用区域敏感排序规则、固定区域来比较字符串，同时忽略被比较字符串的大小写。</summary>
    </member>
    <member name="F:System.StringComparison.Ordinal">
<summary>使用序号排序规则比较字符串。</summary>
    </member>
    <member name="F:System.StringComparison.OrdinalIgnoreCase">
<summary>使用序号排序规则并忽略被比较字符串的大小写，对字符串进行比较。</summary>
    </member>
    <member name="T:System.StringSplitOptions">
<summary>指定拆分分隔子字符串的方法是包含还是省略返回数组中的空子字符串。</summary>
    </member>
    <member name="F:System.StringSplitOptions.None">
<summary>返回值包括含有空字符串的数组元素</summary>
    </member>
    <member name="F:System.StringSplitOptions.RemoveEmptyEntries">
<summary>返回值不包括含有空字符串的数组元素</summary>
    </member>
    <member name="T:System.SystemException">
<summary>为 <see cref="N:System"/> 命令空间中的预定义异常定义基类。</summary>
    </member>
    <member name="M:System.SystemException.#ctor">
<summary>初始化 <see cref="T:System.SystemException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.SystemException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.SystemException"/> 类的新实例。</summary>
<param name="message">描述错误的消息。 </param>
    </member>
    <member name="M:System.SystemException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.SystemException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不是 null 引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。 </param>
    </member>
    <member name="T:System.ThreadStaticAttribute">
<summary>指示静态字段的值对于每个线程都是唯一的。</summary>
    </member>
    <member name="M:System.ThreadStaticAttribute.#ctor">
<summary>初始化 <see cref="T:System.ThreadStaticAttribute"/> 类的新实例。</summary>
    </member>
    <member name="T:System.TimeoutException">
<summary>当为进程或操作分配的时间已过期时引发的异常。</summary>
    </member>
    <member name="M:System.TimeoutException.#ctor">
<summary>初始化 <see cref="T:System.TimeoutException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.TimeoutException"/> 类的新实例。</summary>
<param name="message">描述错误的消息。 </param>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.String,System.Exception)">
<summary>使用指定的错误消息和内部异常初始化 <see cref="T:System.TimeoutException"/> 类的新实例。</summary>
<param name="message">描述错误的消息。 </param>
<param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="T:System.TimeSpan">
<summary>表示时间间隔。</summary>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32)">
<summary>将新的 <see cref="T:System.TimeSpan"/> 初始化为指定的小时数、分钟数和秒数。</summary>
<param name="hours">小时数。 </param>
<param name="minutes">分钟数。 </param>
<param name="seconds">秒数。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">该参数指定一个小于 <see cref="F:System.TimeSpan.MinValue"/> 或大于 <see cref="F:System.TimeSpan.MaxValue"/> 的 <see cref="T:System.TimeSpan"/> 值。 </exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>将新的 <see cref="T:System.TimeSpan"/> 初始化为指定的天数、小时数、分钟数和秒数。</summary>
<param name="days">天数。 </param>
<param name="hours">小时数。 </param>
<param name="minutes">分钟数。 </param>
<param name="seconds">秒数。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">该参数指定一个小于 <see cref="F:System.TimeSpan.MinValue"/> 或大于 <see cref="F:System.TimeSpan.MaxValue"/> 的 <see cref="T:System.TimeSpan"/> 值。 </exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>将新的 <see cref="T:System.TimeSpan"/> 初始化为指定的天数、小时数、分钟数、秒数和毫秒数。</summary>
<param name="days">天数。 </param>
<param name="hours">小时数。 </param>
<param name="minutes">分钟数。 </param>
<param name="seconds">秒数。 </param>
<param name="milliseconds">毫秒数。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">该参数指定一个小于 <see cref="F:System.TimeSpan.MinValue"/> 或大于 <see cref="F:System.TimeSpan.MaxValue"/> 的 <see cref="T:System.TimeSpan"/> 值。 </exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int64)">
<summary>将新的 <see cref="T:System.TimeSpan"/> 初始化为指定的刻度数。</summary>
<param name="ticks">以 100 毫微秒为单位表示的时间段。 </param>
    </member>
    <member name="M:System.TimeSpan.Add(System.TimeSpan)">
<summary>返回一个新的 <see cref="T:System.TimeSpan"/> 对象，其值为指定的 <see cref="T:System.TimeSpan"/> 对象与此实例之和。</summary>
<returns>一个新对象，表示此实例的值加 <paramref name="ts"/> 的值。</returns>
<param name="ts">待添加的时间间隔。 </param>
<exception cref="T:System.OverflowException">所生成的 <see cref="T:System.TimeSpan"/> 小于 <see cref="F:System.TimeSpan.MinValue"/> 或大于 <see cref="F:System.TimeSpan.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)">
<summary>比较两个 <see cref="T:System.TimeSpan"/> 值，并返回一个整数，该整数指示第一个时间间隔是大于、等于还是小于第二个时间间隔。</summary>
<returns>下表中的值之一。值 描述 -1 <paramref name="t1"/> 短于 <paramref name="t2"/>0 <paramref name="t1"/> 等于 <paramref name="t2"/>1 <paramref name="t1"/> 长于 <paramref name="t2"/></returns>
<param name="t1">要比较的第一个时间间隔。</param>
<param name="t2">要比较的第二个时间间隔。</param>
    </member>
    <member name="M:System.TimeSpan.CompareTo(System.Object)">
<summary>将此实例与指定的对象进行比较，并返回一个整数，该整数指示此实例表示的时间间隔是大于、等于还是小于指定对象表示的时间间隔。</summary>
<returns>下表中的值之一。值 描述 -1 此实例的值短于 <paramref name="value"/> 的值。0 此实例的值等于 <paramref name="value"/> 的值。1 此实例的值长于 <paramref name="value"/> 的值。-或- <paramref name="value"/> 为 null。 </returns>
<param name="value">要比较的对象，或为 null。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="value"/> 不是 <see cref="T:System.TimeSpan"/>。 </exception>
    </member>
    <member name="M:System.TimeSpan.CompareTo(System.TimeSpan)">
<summary>将此实例与指定的 <see cref="T:System.TimeSpan"/> 对象进行比较，并返回一个整数，该整数指示此实例表示的时间间隔是大于、等于还是小于该指定的 <see cref="T:System.TimeSpan"/> 对象表示的时间间隔。</summary>
<returns>有符号数字，指示此实例和 <paramref name="value"/> 的相对值。值 描述 负整数 此实例短于 <paramref name="value"/>。零 此实例等于 <paramref name="value"/>。正整数 此实例长于 <paramref name="value"/>。 </returns>
<param name="value">要与此实例进行比较的对象。</param>
    </member>
    <member name="P:System.TimeSpan.Days">
<summary>获取当前 <see cref="T:System.TimeSpan"/> 结构所表示的时间间隔的天数部分。</summary>
<returns>此实例的天数部分。返回值可以是正数也可以是负数。</returns>
    </member>
    <member name="M:System.TimeSpan.Duration">
<summary>返回新的 <see cref="T:System.TimeSpan"/> 对象，其值是当前 <see cref="T:System.TimeSpan"/> 对象的绝对值。</summary>
<returns>一个新对象，其值是当前 <see cref="T:System.TimeSpan"/> 对象的绝对值。</returns>
<exception cref="T:System.OverflowException">此实例的值为 <see cref="F:System.TimeSpan.MinValue"/>。 </exception>
    </member>
    <member name="M:System.TimeSpan.Equals(System.Object)">
<summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
<returns>如果 <paramref name="value"/> 是表示与当前 <see cref="T:System.TimeSpan"/> 结构具有相同时间间隔的 <see cref="T:System.TimeSpan"/> 对象，则为 true；否则为 false。</returns>
<param name="value">与此实例进行比较的对象。 </param>
    </member>
    <member name="M:System.TimeSpan.Equals(System.TimeSpan)">
<summary>返回一个值，该值指示此实例是否与指定的 <see cref="T:System.TimeSpan"/> 对象相等。</summary>
<returns>如果 <paramref name="obj"/> 表示的时间间隔与此实例相同，则为 true；否则为 false。</returns>
<param name="obj">与此实例进行比较的对象。 </param>
    </member>
    <member name="M:System.TimeSpan.Equals(System.TimeSpan,System.TimeSpan)">
<summary>返回一个值，该值指示 <see cref="T:System.TimeSpan"/> 的两个指定实例是否相等。</summary>
<returns>如果 <paramref name="t1"/> 和 <paramref name="t2"/> 的值相等，则为 true；否则为 false。</returns>
<param name="t1">要比较的第一个时间间隔。</param>
<param name="t2">要比较的第二个时间间隔。</param>
    </member>
    <member name="M:System.TimeSpan.FromDays(System.Double)">
<summary>返回表示指定天数的 <see cref="T:System.TimeSpan"/>，其中对天数的指定精确到最接近的毫秒。</summary>
<returns>表示 <paramref name="value"/> 的对象。</returns>
<param name="value">天数，精确到最接近的毫秒。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于 <see cref="F:System.TimeSpan.MinValue"/> 或大于 <see cref="F:System.TimeSpan.MaxValue"/>。-或- <paramref name="value"/> 为 <see cref="F:System.Double.PositiveInfinity"/>。-或- <paramref name="value"/> 为 <see cref="F:System.Double.NegativeInfinity"/>。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="value"/> 等于 <see cref="F:System.Double.NaN"/>。 </exception>
    </member>
    <member name="M:System.TimeSpan.FromHours(System.Double)">
<summary>返回表示指定小时数的 <see cref="T:System.TimeSpan"/>，其中对天数的指定精确到最接近的毫秒。</summary>
<returns>表示 <paramref name="value"/> 的对象。</returns>
<param name="value">精确到最接近的毫秒的小时数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于 <see cref="F:System.TimeSpan.MinValue"/> 或大于 <see cref="F:System.TimeSpan.MaxValue"/>。-或- <paramref name="value"/> 为 <see cref="F:System.Double.PositiveInfinity"/>。-或- <paramref name="value"/> 为 <see cref="F:System.Double.NegativeInfinity"/>。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="value"/> 等于 <see cref="F:System.Double.NaN"/>。 </exception>
    </member>
    <member name="M:System.TimeSpan.FromMilliseconds(System.Double)">
<summary>返回表示指定毫秒数的 <see cref="T:System.TimeSpan"/>。</summary>
<returns>表示 <paramref name="value"/> 的对象。</returns>
<param name="value">毫秒数。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于 <see cref="F:System.TimeSpan.MinValue"/> 或大于 <see cref="F:System.TimeSpan.MaxValue"/>。-或- <paramref name="value"/> 为 <see cref="F:System.Double.PositiveInfinity"/>。-或- <paramref name="value"/> 为 <see cref="F:System.Double.NegativeInfinity"/>。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="value"/> 等于 <see cref="F:System.Double.NaN"/>。 </exception>
    </member>
    <member name="M:System.TimeSpan.FromMinutes(System.Double)">
<summary>返回表示指定分钟数的 <see cref="T:System.TimeSpan"/>，其中对天数的指定精确到最接近的毫秒。</summary>
<returns>表示 <paramref name="value"/> 的对象。</returns>
<param name="value">分钟数，精确到最接近的毫秒。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于 <see cref="F:System.TimeSpan.MinValue"/> 或大于 <see cref="F:System.TimeSpan.MaxValue"/>。-或- <paramref name="value"/> 为 <see cref="F:System.Double.PositiveInfinity"/>。-或- <paramref name="value"/> 为 <see cref="F:System.Double.NegativeInfinity"/>。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="value"/> 等于 <see cref="F:System.Double.NaN"/>。 </exception>
    </member>
    <member name="M:System.TimeSpan.FromSeconds(System.Double)">
<summary>返回表示指定秒数的 <see cref="T:System.TimeSpan"/>，其中对天数的指定精确到最接近的毫秒。</summary>
<returns>表示 <paramref name="value"/> 的对象。</returns>
<param name="value">秒数，精确到最接近的毫秒。 </param>
      <exception cref="T:System.OverflowException">
<paramref name="value"/> 小于 <see cref="F:System.TimeSpan.MinValue"/> 或大于 <see cref="F:System.TimeSpan.MaxValue"/>。-或- <paramref name="value"/> 为 <see cref="F:System.Double.PositiveInfinity"/>。-或- <paramref name="value"/> 为 <see cref="F:System.Double.NegativeInfinity"/>。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="value"/> 等于 <see cref="F:System.Double.NaN"/>。 </exception>
    </member>
    <member name="M:System.TimeSpan.FromTicks(System.Int64)">
<summary>返回表示指定时间的 <see cref="T:System.TimeSpan"/>，其中对时间的指定以刻度为单位。</summary>
<returns>表示 <paramref name="value"/> 的对象。</returns>
<param name="value">表示时间的刻度数。 </param>
    </member>
    <member name="M:System.TimeSpan.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="P:System.TimeSpan.Hours">
<summary>获取当前 <see cref="T:System.TimeSpan"/> 结构所表示的时间间隔的小时数部分。</summary>
<returns>当前 <see cref="T:System.TimeSpan"/> 结构的小时分量。返回值的范围为 -23 到 23。</returns>
    </member>
    <member name="F:System.TimeSpan.MaxValue">
<summary>表示最大的 <see cref="T:System.TimeSpan"/> 值。此字段为只读。</summary>
    </member>
    <member name="P:System.TimeSpan.Milliseconds">
<summary>获取当前 <see cref="T:System.TimeSpan"/> 结构所表示的时间间隔的毫秒数部分。</summary>
<returns>当前 <see cref="T:System.TimeSpan"/> 结构的毫秒分量。返回值的范围为 -999 到 999。</returns>
    </member>
    <member name="P:System.TimeSpan.Minutes">
<summary>获取当前 <see cref="T:System.TimeSpan"/> 结构所表示的时间间隔的分钟数部分。</summary>
<returns>当前 <see cref="T:System.TimeSpan"/> 结构的分钟分量。返回值的范围为 -59 到 59。</returns>
    </member>
    <member name="F:System.TimeSpan.MinValue">
<summary>表示最小的 <see cref="T:System.TimeSpan"/> 值。此字段为只读。</summary>
    </member>
    <member name="M:System.TimeSpan.Negate">
<summary>返回其值为此实例的相反值的新 <see cref="T:System.TimeSpan"/>。</summary>
<returns>与此实例的数值相同，但符号相反的新对象。 </returns>
<exception cref="T:System.OverflowException">此实例的求反值不能用 <see cref="T:System.TimeSpan"/> 表示，即此实例的值为 <see cref="F:System.TimeSpan.MinValue"/>。 </exception>
    </member>
    <member name="M:System.TimeSpan.op_Addition(System.TimeSpan,System.TimeSpan)">
<summary>两个指定的 <see cref="T:System.TimeSpan"/> 实例相加。</summary>
<returns>一个对象，其值为 <paramref name="t1"/> 与 <paramref name="t2"/> 的值之和。</returns>
<param name="t1">待添加的第一个时间间隔。 </param>
<param name="t2">待添加的第二个时间间隔。 </param>
<exception cref="T:System.OverflowException">所生成的 <see cref="T:System.TimeSpan"/> 小于 <see cref="F:System.TimeSpan.MinValue"/> 或大于 <see cref="F:System.TimeSpan.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.TimeSpan.op_Equality(System.TimeSpan,System.TimeSpan)">
<summary>指示两个 <see cref="T:System.TimeSpan"/> 实例是否相等。</summary>
<returns>如果 <paramref name="t1"/> 和 <paramref name="t2"/> 的值相等，则为 true；否则为 false。</returns>
<param name="t1">要比较的第一个时间间隔。 </param>
<param name="t2">要比较的第二个时间间隔。 </param>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThan(System.TimeSpan,System.TimeSpan)">
<summary>指示指定的 <see cref="T:System.TimeSpan"/> 是否大于另一个指定的 <see cref="T:System.TimeSpan"/>。</summary>
<returns>如果 <paramref name="t1"/> 的值大于 <paramref name="t2"/> 的值，则为 true；否则为 false。</returns>
<param name="t1">要比较的第一个时间间隔。</param>
<param name="t2">要比较的第二个时间间隔。</param>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThanOrEqual(System.TimeSpan,System.TimeSpan)">
<summary>指示指定的 <see cref="T:System.TimeSpan"/> 是否大于或等于另一个指定的 <see cref="T:System.TimeSpan"/>。</summary>
<returns>如果 <paramref name="t1"/> 的值大于或等于 <paramref name="t2"/> 的值，则为 true；否则为 false。</returns>
<param name="t1">要比较的第一个时间间隔。</param>
<param name="t2">要比较的第二个时间间隔。</param>
    </member>
    <member name="M:System.TimeSpan.op_Inequality(System.TimeSpan,System.TimeSpan)">
<summary>指示两个 <see cref="T:System.TimeSpan"/> 实例是否不相等。</summary>
<returns>如果 <paramref name="t1"/> 和 <paramref name="t2"/> 的值不相等，则为 true；否则为 false。</returns>
<param name="t1">要比较的第一个时间间隔。</param>
<param name="t2">要比较的第二个时间间隔。</param>
    </member>
    <member name="M:System.TimeSpan.op_LessThan(System.TimeSpan,System.TimeSpan)">
<summary>指示指定的 <see cref="T:System.TimeSpan"/> 是否小于另一个指定的 <see cref="T:System.TimeSpan"/>。</summary>
<returns>如果 <paramref name="t1"/> 的值小于 <paramref name="t2"/> 的值，则为 true；否则为 false。</returns>
<param name="t1">要比较的第一个时间间隔。</param>
<param name="t2">要比较的第二个时间间隔。</param>
    </member>
    <member name="M:System.TimeSpan.op_LessThanOrEqual(System.TimeSpan,System.TimeSpan)">
<summary>指示指定的 <see cref="T:System.TimeSpan"/> 是否小于或等于另一个指定的 <see cref="T:System.TimeSpan"/>。</summary>
<returns>如果 <paramref name="t1"/> 的值小于或等于 <paramref name="t2"/> 的值，则为 true；否则为 false。</returns>
<param name="t1">要比较的第一个时间间隔。</param>
<param name="t2">要比较的第二个时间间隔。</param>
    </member>
    <member name="M:System.TimeSpan.op_Subtraction(System.TimeSpan,System.TimeSpan)">
<summary>从另一个指定的 <see cref="T:System.TimeSpan"/> 中减去指定的 <see cref="T:System.TimeSpan"/>。</summary>
<returns>一个对象，其值是 <paramref name="t1"/> 的值减去 <paramref name="t2"/> 的值后所得的结果。</returns>
<param name="t1">要从中减去的时间间隔（被减数）。 </param>
<param name="t2">待减去的时间间隔（减数）。 </param>
<exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.TimeSpan.MinValue"/> 或大于 <see cref="F:System.TimeSpan.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.TimeSpan.op_UnaryNegation(System.TimeSpan)">
<summary>返回其值为指定实例的相反值的 <see cref="T:System.TimeSpan"/>。</summary>
<returns>与此实例的数值相同，但符号相反的对象。</returns>
<param name="t">要求反的时间间隔。 </param>
<exception cref="T:System.OverflowException">此实例的求反值不能用 <see cref="T:System.TimeSpan"/> 表示，即此实例的值为 <see cref="F:System.TimeSpan.MinValue"/>。 </exception>
    </member>
    <member name="M:System.TimeSpan.op_UnaryPlus(System.TimeSpan)">
<summary>返回指定的 <see cref="T:System.TimeSpan"/> 实例。</summary>
<returns><paramref name="t"/> 所指定的时间间隔。</returns>
<param name="t">要返回的时间间隔。 </param>
    </member>
    <member name="M:System.TimeSpan.Parse(System.String)">
<summary>将时间间隔的字符串表示形式转换为等效的 <see cref="T:System.TimeSpan"/>。 </summary>
<returns>与 <paramref name="s"/> 对应的时间间隔。</returns>
<param name="s">一个指定进行转换的时间间隔的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 具有无效的格式。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.TimeSpan.MinValue"/> 或大于 <see cref="F:System.TimeSpan.MaxValue"/> 的数字。-或- 天、小时、分钟或秒中至少有一个分量超出其有效范围。 </exception>
    </member>
    <member name="M:System.TimeSpan.Parse(System.String,System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan"/>。</summary>
<returns>与 <paramref name="input"/> 对应的时间间隔，由 <paramref name="formatProvider"/> 指定。</returns>
<param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
<param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="input"/> 具有无效的格式。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="input"/> 表示小于 <see cref="F:System.TimeSpan.MinValue"/> 或大于 <see cref="F:System.TimeSpan.MaxValue"/> 的数字。-或- <paramref name="input"/> 中的天、小时、分钟或秒中至少有一个分量超出其有效范围。 </exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider)">
<summary>使用指定的格式和区域性特定格式设置信息，将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan"/>。字符串表示形式的格式必须与指定的格式完全匹配。</summary>
<returns>与 <paramref name="input"/> 对应的时间间隔，由 <paramref name="format"/> 和 <paramref name="formatProvider"/> 指定。</returns>
<param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
<param name="format">用于定义所需的 <paramref name="input"/> 格式的标准或自定义格式字符串。</param>
<param name="formatProvider">一个对象，提供区域性特定的格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="input"/> 具有无效的格式。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="input"/> 表示小于 <see cref="F:System.TimeSpan.MinValue"/> 或大于 <see cref="F:System.TimeSpan.MaxValue"/> 的数字。-或- <paramref name="input"/> 中的天、小时、分钟或秒中至少有一个分量超出其有效范围。 </exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles)">
<summary>使用指定的格式、区域性特定格式设置信息和样式，将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan"/>。字符串表示形式的格式必须与指定的格式完全匹配。</summary>
<returns>与 <paramref name="input"/> 对应的时间间隔，由 <paramref name="format"/>、<paramref name="formatProvider"/> 和 <paramref name="styles"/> 指定。</returns>
<param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
<param name="format">用于定义所需的 <paramref name="input"/> 格式的标准或自定义格式字符串。</param>
<param name="formatProvider">一个对象，提供区域性特定的格式设置信息。</param>
<param name="styles">枚举值的按位组合，用于定义可出现在 <paramref name="input"/> 中的样式元素。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="styles"/>是无效的 <see cref="T:System.Globalization.TimeSpanStyles"/> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="input"/> 具有无效的格式。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="input"/> 表示小于 <see cref="F:System.TimeSpan.MinValue"/> 或大于 <see cref="F:System.TimeSpan.MaxValue"/> 的数字。-或- <paramref name="input"/> 中的天、小时、分钟或秒中至少有一个分量超出其有效范围。 </exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider)">
<summary>使用指定的格式字符串数组和区域性特定格式设置信息，将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan"/>。字符串表示形式的格式必须与一种指定的格式完全匹配。</summary>
<returns>与 <paramref name="input"/> 对应的时间间隔，由 <paramref name="formats"/> 和 <paramref name="formatProvider"/> 指定。</returns>
<param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
<param name="formats">用于定义所需的 <paramref name="input"/> 格式的标准或自定义格式字符串的数组。</param>
<param name="formatProvider">一个对象，提供区域性特定的格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="input"/> 具有无效的格式。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="input"/> 表示小于 <see cref="F:System.TimeSpan.MinValue"/> 或大于 <see cref="F:System.TimeSpan.MaxValue"/> 的数字。-或- <paramref name="input"/> 中的天、小时、分钟或秒中至少有一个分量超出其有效范围。 </exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles)">
<summary>使用指定的格式、区域性特定格式设置信息和样式，将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan"/>。字符串表示形式的格式必须与一种指定的格式完全匹配。 </summary>
<returns>与 <paramref name="input"/> 对应的时间间隔，由 <paramref name="formats"/>、<paramref name="formatProvider"/> 和 <paramref name="styles"/> 指定。</returns>
<param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
<param name="formats">用于定义所需的 <paramref name="input"/> 格式的标准或自定义格式字符串的数组。</param>
<param name="formatProvider">一个对象，提供区域性特定的格式设置信息。</param>
<param name="styles">枚举值的按位组合，用于定义可出现在 input 中的样式元素。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="styles"/>是无效的 <see cref="T:System.Globalization.TimeSpanStyles"/> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="input"/> 具有无效的格式。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="input"/> 表示小于 <see cref="F:System.TimeSpan.MinValue"/> 或大于 <see cref="F:System.TimeSpan.MaxValue"/> 的数字。-或- <paramref name="input"/> 中的天、小时、分钟或秒中至少有一个分量超出其有效范围。 </exception>
    </member>
    <member name="P:System.TimeSpan.Seconds">
<summary>获取当前 <see cref="T:System.TimeSpan"/> 结构所表示的时间间隔的秒数部分。</summary>
<returns>当前 <see cref="T:System.TimeSpan"/> 结构的秒分量。返回值的范围为 -59 到 59。</returns>
    </member>
    <member name="M:System.TimeSpan.Subtract(System.TimeSpan)">
<summary>返回一个新的 <see cref="T:System.TimeSpan"/> 对象，其值为指定的 <see cref="T:System.TimeSpan"/> 对象与此实例之差。</summary>
<returns>一个新的时间间隔，其值为此实例的值减去 <paramref name="ts"/> 的值后所得的结果。</returns>
<param name="ts">要减去的时间间隔。 </param>
<exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.TimeSpan.MinValue"/> 或大于 <see cref="F:System.TimeSpan.MaxValue"/>。 </exception>
    </member>
    <member name="P:System.TimeSpan.Ticks">
<summary>获取表示当前 <see cref="T:System.TimeSpan"/> 结构的值的计时周期数。</summary>
<returns>此实例包含的刻度数。</returns>
    </member>
    <member name="F:System.TimeSpan.TicksPerDay">
<summary>表示一天中的刻度数。此字段为常量。</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerHour">
<summary>表示 1 小时的刻度数。此字段为常量。</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerMillisecond">
<summary>表示 1 毫秒的刻度数。此字段为常量。</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerMinute">
<summary>表示 1 分钟的刻度数。此字段为常量。</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerSecond">
<summary>表示 1 秒的刻度数。</summary>
    </member>
    <member name="M:System.TimeSpan.ToString">
<summary>将当前 <see cref="T:System.TimeSpan"/> 对象的值转换为其等效的字符串表示形式。</summary>
<returns>当前 <see cref="T:System.TimeSpan"/> 值的字符串表示形式。</returns>
    </member>
    <member name="M:System.TimeSpan.ToString(System.String)">
<summary>使用指定的格式将当前 <see cref="T:System.TimeSpan"/> 对象的值转换为它的等效字符串表示形式。</summary>
<returns>当前 <see cref="T:System.TimeSpan"/> 值的字符串表示形式，该值使用 <paramref name="format"/> 参数指定的格式。</returns>
<param name="format">标准或自定义的 <see cref="T:System.TimeSpan"/> 格式字符串。</param>
<exception cref="T:System.FormatException">无法识别或不支持 <paramref name="format"/> 参数。</exception>
    </member>
    <member name="M:System.TimeSpan.ToString(System.String,System.IFormatProvider)">
<summary>使用指定的格式和区域性特定的格式设置信息将当前 <see cref="T:System.TimeSpan"/> 对象的值转换为它的等效字符串表示形式。</summary>
<returns>当前 <see cref="T:System.TimeSpan"/> 值的字符串表示形式，格式由 <paramref name="format"/> 和 <paramref name="formatProvider"/> 指定。</returns>
<param name="format">标准或自定义的 <see cref="T:System.TimeSpan"/> 格式字符串。</param>
<param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
<exception cref="T:System.FormatException">无法识别或不支持 <paramref name="format"/> 参数。</exception>
    </member>
    <member name="P:System.TimeSpan.TotalDays">
<summary>获取以整天数和天的小数部分表示的当前 <see cref="T:System.TimeSpan"/> 结构的值。</summary>
<returns>此实例表示的总天数。</returns>
    </member>
    <member name="P:System.TimeSpan.TotalHours">
<summary>获取以整小时数和小时的小数部分表示的当前 <see cref="T:System.TimeSpan"/> 结构的值。</summary>
<returns>此实例表示的总小时数。</returns>
    </member>
    <member name="P:System.TimeSpan.TotalMilliseconds">
<summary>获取以整毫秒数和毫秒的小数部分表示的当前 <see cref="T:System.TimeSpan"/> 结构的值。</summary>
<returns>此实例表示的总毫秒数。</returns>
    </member>
    <member name="P:System.TimeSpan.TotalMinutes">
<summary>获取以整分钟数和分钟的小数部分表示的当前 <see cref="T:System.TimeSpan"/> 结构的值。</summary>
<returns>此实例表示的总分钟数。</returns>
    </member>
    <member name="P:System.TimeSpan.TotalSeconds">
<summary>获取以整秒数和秒的小数部分表示的当前 <see cref="T:System.TimeSpan"/> 结构的值。</summary>
<returns>此实例表示的总秒数。</returns>
    </member>
    <member name="M:System.TimeSpan.TryParse(System.String,System.IFormatProvider,System.TimeSpan@)">
<summary>使用指定的区域性特定格式设置信息，将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan"/>，并返回一个指示转换是否成功的值。</summary>
<returns>如果成功转换了 <paramref name="input"/>，则为 true；否则为 false。如果 <paramref name="input"/> 参数为 null 或 <see cref="F:System.String.Empty"/> 格式无效，表示的时间间隔小于 <see cref="F:System.TimeSpan.MinValue"/> 或大于 <see cref="F:System.TimeSpan.MaxValue"/>，或者天、小时、分钟或秒分量中至少有一个超出其有效范围，则此运算返回 false。</returns>
<param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
<param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
<param name="result">此方法返回时，包含表示由 <paramref name="input"/> 指定的时间间隔的对象；或者如果转换失败，则包含 <see cref="F:System.TimeSpan.Zero"/>。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.TimeSpan.TryParse(System.String,System.TimeSpan@)">
<summary>将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan"/>，并返回一个指示转换是否成功的值。</summary>
<returns>如果成功转换了 <paramref name="s"/>，则为 true；否则为 false。如果 <paramref name="s"/> 参数为 null 或 <see cref="F:System.String.Empty"/> 格式无效，表示的时间间隔小于 <see cref="F:System.TimeSpan.MinValue"/> 或大于 <see cref="F:System.TimeSpan.MaxValue"/>，或者天、小时、分钟或秒分量中至少有一个超出其有效范围，则此运算返回 false。</returns>
<param name="s">一个字符串，用于指定进行转换的时间间隔。</param>
<param name="result">此方法返回时，包含表示由 <paramref name="s"/> 指定的时间间隔的对象；或者如果转换失败，则包含 <see cref="F:System.TimeSpan.Zero"/>。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
<summary>使用指定的格式、区域性特定格式设置信息和样式，将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan"/>，并返回一个指示转换是否成功的值。字符串表示形式的格式必须与指定的格式完全匹配。 </summary>
<returns>如果成功转换了 <paramref name="input"/>，则为 true；否则为 false。</returns>
<param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
<param name="format">用于定义所需的 <paramref name="input"/> 格式的标准或自定义格式字符串。</param>
<param name="formatProvider">一个对象，提供区域性特定的格式设置信息。</param>
<param name="styles">用于指示 <paramref name="input"/> 的样式的一个或多个枚举值。</param>
<param name="result">此方法返回时，包含表示由 <paramref name="input"/> 指定的时间间隔的对象；或者如果转换失败，则包含 <see cref="F:System.TimeSpan.Zero"/>。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.TimeSpan@)">
<summary>使用指定的格式和区域性特定格式设置信息，将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan"/>，并返回一个指示转换是否成功的值。字符串表示形式的格式必须与指定的格式完全匹配。 </summary>
<returns>如果成功转换了 <paramref name="input"/>，则为 true；否则为 false。</returns>
<param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
<param name="format">用于定义所需的 <paramref name="input"/> 格式的标准或自定义格式字符串。</param>
<param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
<param name="result">此方法返回时，包含表示由 <paramref name="input"/> 指定的时间间隔的对象；或者如果转换失败，则包含 <see cref="F:System.TimeSpan.Zero"/>。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
<summary>使用指定的格式、区域性特定格式设置信息和样式，将时间间隔的指定字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan"/>，并返回一个指示转换是否成功的值。字符串表示形式的格式必须与一种指定的格式完全匹配。 </summary>
<returns>如果成功转换了 <paramref name="input"/>，则为 true；否则为 false。</returns>
<param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
<param name="formats">用于定义所接受的 <paramref name="input"/> 格式的标准或自定义格式字符串的数组。</param>
<param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
<param name="styles">用于指示 <paramref name="input"/> 的样式的一个或多个枚举值。</param>
<param name="result">此方法返回时，包含表示由 <paramref name="input"/> 指定的时间间隔的对象；或者如果转换失败，则包含 <see cref="F:System.TimeSpan.Zero"/>。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.TimeSpan@)">
<summary>使用指定的格式和区域性特定格式设置信息，将时间间隔的指定字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan"/>，并返回一个指示转换是否成功的值。字符串表示形式的格式必须与一种指定的格式完全匹配。 </summary>
<returns>如果成功转换了 <paramref name="input"/>，则为 true；否则为 false。</returns>
<param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
<param name="formats">用于定义所接受的 <paramref name="input"/> 格式的标准或自定义格式字符串的数组。</param>
<param name="formatProvider">一个对象，提供区域性特定的格式设置信息。</param>
<param name="result">此方法返回时，包含表示由 <paramref name="input"/> 指定的时间间隔的对象；或者如果转换失败，则包含 <see cref="F:System.TimeSpan.Zero"/>。该参数未经初始化即被传递。</param>
    </member>
    <member name="F:System.TimeSpan.Zero">
<summary>表示等于零的 <see cref="T:System.TimeSpan"/> 值。此字段为只读。</summary>
    </member>
    <member name="T:System.TimeZoneInfo">
<summary>表示时区。</summary>
    </member>
    <member name="P:System.TimeZoneInfo.BaseUtcOffset">
<summary>获取当前时区的标准时间与协调世界时 (UTC) 之间的时差。</summary>
<returns>一个 <see cref="T:System.TimeSpan"/> 对象，指示当前时区的标准时间与协调世界时 (UTC) 之间的时差。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)">
<summary>将时间转换为特定时区的时间。</summary>
<returns>一个 <see cref="T:System.DateTime"/> 值，表示目标时区中的日期和时间。</returns>
<param name="dateTime">要转换的日期和时间。   </param>
<param name="destinationTimeZone">要将 <paramref name="dateTime"/> 转换到的时区。它必须是 <see cref="P:System.TimeZoneInfo.Local"/> 或 <see cref="P:System.TimeZoneInfo.Utc"/>。</param>
<exception cref="T:System.ArgumentException"><paramref name="dateTime"/> 参数值表示无效时间。</exception>
<exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZone"/> 参数的值为 null。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)">
<summary>将时间转换为特定时区的时间。</summary>
<returns>一个 <see cref="T:System.DateTimeOffset"/> 值，表示目标时区中的日期和时间。</returns>
<param name="dateTimeOffset">要转换的日期和时间。   </param>
<param name="destinationTimeZone">要将 <paramref name="dateTime"/> 转换到的时区。它必须是 <see cref="P:System.TimeZoneInfo.Local"/> 或 <see cref="P:System.TimeZoneInfo.Utc"/>。</param>
<exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZone"/> 参数的值为 null。</exception>
    </member>
    <member name="P:System.TimeZoneInfo.DaylightName">
<summary>获取当前时区的夏时制的本地化显示名称。</summary>
<returns>时区的本地化夏时制的显示名称。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.DisplayName">
<summary>获取表示时区的本地化一般显示名称。</summary>
<returns>时区的本地化一般显示名称。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)">
<summary>确定当前的 <see cref="T:System.TimeZoneInfo"/> 对象和另一个 <see cref="T:System.TimeZoneInfo"/> 对象是否相等。</summary>
<returns>如果两个 <see cref="T:System.TimeZoneInfo"/> 对象相等，则为 true；否则为 false。</returns>
<param name="other">要与当前的 <see cref="T:System.TimeZoneInfo"/> 对象进行比较的另一个 <see cref="T:System.TimeZoneInfo"/> 对象。  </param>
    </member>
    <member name="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)">
<summary>返回不明确的日期和时间可能映射到的日期和时间的相关信息。</summary>
<returns>一个 <see cref="T:System.TimeSpan"/> 对象的数组，表示特定日期和时间可能映射到的协调世界时 (UTC) 偏移量。</returns>
<param name="dateTime">日期和时间。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="dateTime"/> 是明确的时间。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)">
<summary>返回不明确的日期和时间可能映射到的日期和时间的相关信息。</summary>
<returns>一个 <see cref="T:System.TimeSpan"/> 对象的数组，表示特定日期和时间可能映射到的协调世界时 (UTC) 偏移量。</returns>
<param name="dateTimeOffset">日期和时间。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="dateTime"/> 是明确的时间。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.GetHashCode">
<summary>用作哈希算法的哈希函数和数据结构（如哈希表）。</summary>
<returns>一个 32 位带符号整数，用作此 <see cref="T:System.TimeZoneInfo"/> 对象的哈希代码。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)">
<summary>计算此时区中的时间与协调世界时 (UTC) 之间针对特定日期和时间的偏移量或差值。</summary>
<returns>一个 <see cref="T:System.TimeSpan"/> 对象，该对象指示两个时区之间的时差。</returns>
<param name="dateTime">要为其确定偏移量的日期和时间。   </param>
    </member>
    <member name="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)">
<summary>计算此时区中的时间与协调世界时 (UTC) 之间针对特定日期和时间的偏移量或差值。</summary>
<returns>一个 <see cref="T:System.TimeSpan"/> 对象，指示协调世界时 (UTC) 与当前时区之间的时差。</returns>
<param name="dateTimeOffset">要为其确定偏移量的日期和时间。</param>
    </member>
    <member name="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)">
<summary>确定特定时区中的特定日期和时间是否不明确以及是否可以映射至两个或多个协调世界时 (UTC) 时间。</summary>
<returns>如果 <paramref name="dateTime"/> 参数不明确，则为 true；否则为 false。</returns>
<param name="dateTime">日期和时间值。   </param>
<exception cref="T:System.ArgumentException"><paramref name="dateTime"/> 值的 <see cref="P:System.DateTime.Kind"/> 属性为 <see cref="F:System.DateTimeKind.Local"/>，并且 <paramref name="dateTime"/> 为无效时间。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)">
<summary>确定特定时区中的特定日期和时间是否不明确以及是否可以映射至两个或多个协调世界时 (UTC) 时间。</summary>
<returns>如果 <paramref name="dateTimeOffset"/> 参数在当前时区中不明确，则为 true；否则为 false。</returns>
<param name="dateTimeOffset">日期和时间。</param>
    </member>
    <member name="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)">
<summary>指示指定日期和时间是否处于当前 <see cref="T:System.TimeZoneInfo"/> 对象时区的夏时制范围内。</summary>
<returns>如果 <paramref name="dateTime"/> 参数为夏时制，则为 true；否则为 false。</returns>
<param name="dateTime">日期和时间值。   </param>
<exception cref="T:System.ArgumentException"><paramref name="dateTime"/> 值的 <see cref="P:System.DateTime.Kind"/> 属性为 <see cref="F:System.DateTimeKind.Local"/>，并且 <paramref name="dateTime"/> 为无效时间。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)">
<summary>指示指定日期和时间是否处于当前 <see cref="T:System.TimeZoneInfo"/> 对象时区的夏时制范围内。</summary>
<returns>如果 <paramref name="dateTimeOffset"/> 参数为夏时制，则为 true；否则为 false。</returns>
<param name="dateTimeOffset">日期和时间值。</param>
    </member>
    <member name="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)">
<summary>指示特定日期和时间是否无效。</summary>
<returns>如果 <paramref name="dateTime"/> 无效，则为 true；否则为 false。</returns>
<param name="dateTime">日期和时间值。   </param>
    </member>
    <member name="P:System.TimeZoneInfo.Local">
<summary>获取表示本地时区的 <see cref="T:System.TimeZoneInfo"/> 对象。</summary>
<returns>一个表示本地时区的 <see cref="T:System.TimeZoneInfo"/> 对象。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.StandardName">
<summary>获取时区标准时间的本地化显示名称。</summary>
<returns>时区标准时间的本地化显示名称。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.SupportsDaylightSavingTime">
<summary>获取一个值，该值指示时区是否具有任何夏时制规则。</summary>
<returns>如果时区支持夏时制，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.ToString">
<summary>返回当前 <see cref="T:System.TimeZoneInfo"/> 对象的显示名称。</summary>
<returns>当前 <see cref="T:System.TimeZoneInfo"/> 对象的 <see cref="P:System.TimeZoneInfo.DisplayName"/> 属性值。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.Utc">
<summary>获取表示协调世界时 (UTC) 时区的 <see cref="T:System.TimeZoneInfo"/> 对象。</summary>
<returns>一个 <see cref="T:System.TimeZoneInfo"/> 对象，表示协调世界时 (UTC) 时区。</returns>
    </member>
    <member name="T:System.Tuple">
<summary>提供用于创建元组对象的静态方法。</summary>
    </member>
    <member name="M:System.Tuple.Create``1(``0)">
<summary>创建新的 1 元组，即单一实例。</summary>
<returns>值为 (<paramref name="item1"/>) 的元组。</returns>
<param name="item1">元组仅有的分量的值。</param>
<typeparam name="T1">元组的唯一一个分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``2(``0,``1)">
<summary>创建新的 2 元组，即二元组。</summary>
<returns>值为 (<paramref name="item1"/>, <paramref name="item2"/>) 的 2 元组。</returns>
<param name="item1">此元组的第一个分量的值。</param>
<param name="item2">此元组的第二个分量的值。</param>
<typeparam name="T1">此元组的第一个分量的类型。</typeparam>
<typeparam name="T2">此元组的第二个分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``3(``0,``1,``2)">
<summary>创建新的 3 元组，即三元组。</summary>
<returns>值为 (<paramref name="item1"/>, <paramref name="item2"/>, <paramref name="item3"/>) 的 3 元组。</returns>
<param name="item1">此元组的第一个分量的值。</param>
<param name="item2">此元组的第二个分量的值。</param>
<param name="item3">此元组的第三个分量的值。</param>
<typeparam name="T1">此元组的第一个分量的类型。</typeparam>
<typeparam name="T2">此元组的第二个分量的类型。</typeparam>
<typeparam name="T3">此元组的第三个分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``4(``0,``1,``2,``3)">
<summary>创建新的 4 元组，即四元组。</summary>
<returns>值为 (<paramref name="item1"/>, <paramref name="item2"/>, <paramref name="item3"/>, <paramref name="item4"/>) 的 4 元组。</returns>
<param name="item1">此元组的第一个分量的值。</param>
<param name="item2">此元组的第二个分量的值。</param>
<param name="item3">此元组的第三个分量的值。</param>
<param name="item4">此元组的第四个分量的值。</param>
<typeparam name="T1">此元组的第一个分量的类型。</typeparam>
<typeparam name="T2">此元组的第二个分量的类型。</typeparam>
<typeparam name="T3">此元组的第三个分量的类型。</typeparam>
<typeparam name="T4">此元组的第四个分量的类型。  </typeparam>
    </member>
    <member name="M:System.Tuple.Create``5(``0,``1,``2,``3,``4)">
<summary>创建新的 5 元组，即五元组。</summary>
<returns>值为 (<paramref name="item1"/>, <paramref name="item2"/>, <paramref name="item3"/>, <paramref name="item4"/>, <paramref name="item5"/>) 的 5 元组。</returns>
<param name="item1">此元组的第一个分量的值。</param>
<param name="item2">此元组的第二个分量的值。</param>
<param name="item3">此元组的第三个分量的值。</param>
<param name="item4">此元组的第四个分量的值。</param>
<param name="item5">此元组的第五个分量的值。</param>
<typeparam name="T1">此元组的第一个分量的类型。</typeparam>
<typeparam name="T2">此元组的第二个分量的类型。</typeparam>
<typeparam name="T3">此元组的第三个分量的类型。</typeparam>
<typeparam name="T4">此元组的第四个分量的类型。</typeparam>
<typeparam name="T5">此元组的第五个分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
<summary>创建新的 6 元组，即六元组。</summary>
<returns>值为 (<paramref name="item1"/>, <paramref name="item2"/>, <paramref name="item3"/>, <paramref name="item4"/>, <paramref name="item5"/>, <paramref name="item6"/>) 的 6 元组。</returns>
<param name="item1">此元组的第一个分量的值。</param>
<param name="item2">此元组的第二个分量的值。</param>
<param name="item3">此元组的第三个分量的值。</param>
<param name="item4">此元组的第四个分量的值。</param>
<param name="item5">此元组的第五个分量的值。</param>
<param name="item6">此元组的第六个分量的值。</param>
<typeparam name="T1">此元组的第一个分量的类型。</typeparam>
<typeparam name="T2">此元组的第二个分量的类型。</typeparam>
<typeparam name="T3">此元组的第三个分量的类型。</typeparam>
<typeparam name="T4">此元组的第四个分量的类型。</typeparam>
<typeparam name="T5">此元组的第五个分量的类型。</typeparam>
<typeparam name="T6">此元组的第六个分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
<summary>创建新的 7 元组，即七元组。</summary>
<returns>值为 (<paramref name="item1"/>, <paramref name="item2"/>, <paramref name="item3"/>, <paramref name="item4"/>, <paramref name="item5"/>, <paramref name="item6"/>, <paramref name="item7"/>) 的 7 元组。</returns>
<param name="item1">此元组的第一个分量的值。</param>
<param name="item2">此元组的第二个分量的值。</param>
<param name="item3">此元组的第三个分量的值。</param>
<param name="item4">此元组的第四个分量的值。</param>
<param name="item5">此元组的第五个分量的值。</param>
<param name="item6">此元组的第六个分量的值。</param>
<param name="item7">此元组的第七个分量的值。</param>
<typeparam name="T1">此元组的第一个分量的类型。</typeparam>
<typeparam name="T2">此元组的第二个分量的类型。</typeparam>
<typeparam name="T3">此元组的第三个分量的类型。</typeparam>
<typeparam name="T4">此元组的第四个分量的类型。</typeparam>
<typeparam name="T5">此元组的第五个分量的类型。</typeparam>
<typeparam name="T6">此元组的第六个分量的类型。</typeparam>
<typeparam name="T7">此元组的第七个分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
<summary>创建新的 8 元组，即八元组。</summary>
<returns>值为 (<paramref name="item1"/>, <paramref name="item2"/>, <paramref name="item3"/>, <paramref name="item4"/>, <paramref name="item5"/>, <paramref name="item6"/>, <paramref name="item7"/>, <paramref name="item8"/>) 的 8 元祖（八元组）。 </returns>
<param name="item1">此元组的第一个分量的值。</param>
<param name="item2">此元组的第二个分量的值。</param>
<param name="item3">此元组的第三个分量的值。</param>
<param name="item4">此元组的第四个分量的值。</param>
<param name="item5">此元组的第五个分量的值。</param>
<param name="item6">此元组的第六个分量的值。</param>
<param name="item7">此元组的第七个分量的值。</param>
<param name="item8">此元组的第八个分量的值。</param>
<typeparam name="T1">此元组的第一个分量的类型。</typeparam>
<typeparam name="T2">此元组的第二个分量的类型。</typeparam>
<typeparam name="T3">此元组的第三个分量的类型。</typeparam>
<typeparam name="T4">此元组的第四个分量的类型。</typeparam>
<typeparam name="T5">此元组的第五个分量的类型。</typeparam>
<typeparam name="T6">此元组的第六个分量的类型。</typeparam>
<typeparam name="T7">此元组的第七个分量的类型。</typeparam>
<typeparam name="T8">此元组的第八个分量的类型。</typeparam>
    </member>
    <member name="T:System.Tuple`1">
<summary>表示 1 元组，即单一实例。</summary>
<typeparam name="T1">此元组的唯一一个分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple`1.#ctor(`0)">
<summary>初始化 <see cref="T:System.Tuple`1"/> 类的新实例。</summary>
<param name="item1">此元组的唯一一个分量的值。</param>
    </member>
    <member name="M:System.Tuple`1.Equals(System.Object)">
<summary>返回一个值，该值指示当前的 <see cref="T:System.Tuple`1"/> 对象是否与指定对象相等。</summary>
<returns>如果当前实例等于指定的对象，则为 true；否则为 false。</returns>
<param name="obj">与此实例进行比较的对象。</param>
    </member>
    <member name="M:System.Tuple`1.GetHashCode">
<summary>返回当前 <see cref="T:System.Tuple`1"/> 对象的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`1.Item1">
<summary>获取 <see cref="T:System.Tuple`1"/> 对象的单一分量的值。 </summary>
<returns>当前 <see cref="T:System.Tuple`1"/> 对象的单一分量的值。</returns>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
<summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`1"/> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
<returns>带符号整数，指示此实例与 <paramref name="other"/> 在排序顺序中的相对位置，如下表所示。值 描述 负整数 此实例位于 <paramref name="other"/> 之前。零 此实例与 <paramref name="other"/> 在排序顺序中的位置相同。正整数 此实例位于 <paramref name="other"/> 之后。</returns>
<param name="other">与当前实例进行比较的对象。</param>
<param name="comparer">一个对象，提供自定义比较规则。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="other"/> 不是 <see cref="T:System.Tuple`1"/> 对象。</exception>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
<summary>返回一个值，该值根据指定的比较方法指示当前的 <see cref="T:System.Tuple`1"/> 对象是否与指定对象相等。</summary>
<returns>如果当前实例等于指定的对象，则为 true；否则为 false。</returns>
<param name="other">与此实例进行比较的对象。</param>
<param name="comparer">一个对象，定义用于评估两个对象是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
<summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`1"/> 对象的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
<param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)"/> 方法计算当前 <see cref="T:System.Tuple`1"/> 对象的哈希代码。</param>
    </member>
    <member name="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
<summary>将当前 <see cref="T:System.Tuple`1"/> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是位于指定对象之前、之后还是与其位置相同。</summary>
<returns>带符号整数，指示此实例与 <paramref name="obj"/> 在排序顺序中的相对位置，如下表所示。值 描述 负整数 此实例位于 <paramref name="obj"/> 之前。零 此实例与 <paramref name="obj"/> 在排序顺序中的位置相同。正整数 此实例位于 <paramref name="obj"/> 之后。</returns>
<param name="obj">与当前实例进行比较的对象。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="obj"/> 不是 <see cref="T:System.Tuple`1"/> 对象。</exception>
    </member>
    <member name="M:System.Tuple`1.ToString">
<summary>返回一个字符串，该字符串表示此 <see cref="T:System.Tuple`1"/> 实例的值。</summary>
<returns>此 <see cref="T:System.Tuple`1"/> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Tuple`2">
<summary>表示 2 元组，即二元组。</summary>
<typeparam name="T1">此元组的第一个分量的类型。</typeparam>
<typeparam name="T2">此元组的第二个分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple`2.#ctor(`0,`1)">
<summary>初始化 <see cref="T:System.Tuple`2"/> 类的新实例。</summary>
<param name="item1">此元组的第一个分量的值。</param>
<param name="item2">此元组的第二个分量的值。</param>
    </member>
    <member name="M:System.Tuple`2.Equals(System.Object)">
<summary>返回一个值，该值指示当前的 <see cref="T:System.Tuple`2"/> 对象是否与指定对象相等。</summary>
<returns>如果当前实例等于指定的对象，则为 true；否则为 false。</returns>
<param name="obj">与此实例进行比较的对象。</param>
    </member>
    <member name="M:System.Tuple`2.GetHashCode">
<summary>返回当前 <see cref="T:System.Tuple`2"/> 对象的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`2.Item1">
<summary>获取当前 <see cref="T:System.Tuple`2"/> 对象的第一个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`2"/> 对象的第一个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`2.Item2">
<summary>获取当前 <see cref="T:System.Tuple`2"/> 对象的第二个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`2"/> 对象的第二个分量的值。</returns>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
<summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`2"/> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
<returns>带符号整数，指示此实例与 <paramref name="other"/> 在排序顺序中的相对位置，如下表所示。值 描述 负整数 此实例位于 <paramref name="other"/> 之前。零 此实例与 <paramref name="other"/> 在排序顺序中的位置相同。正整数 此实例位于 <paramref name="other"/> 之后。</returns>
<param name="other">与当前实例进行比较的对象。</param>
<param name="comparer">一个对象，提供自定义比较规则。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="other"/> 不是 <see cref="T:System.Tuple`2"/> 对象。</exception>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
<summary>返回一个值，该值根据指定的比较方法指示当前的 <see cref="T:System.Tuple`2"/> 对象是否与指定对象相等。</summary>
<returns>如果当前实例等于指定的对象，则为 true；否则为 false。</returns>
<param name="other">与此实例进行比较的对象。</param>
<param name="comparer">一个对象，定义用于评估两个对象是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
<summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`2"/> 对象的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
<param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)"/> 方法计算当前 <see cref="T:System.Tuple`2"/> 对象的哈希代码。</param>
    </member>
    <member name="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
<summary>将当前 <see cref="T:System.Tuple`2"/> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是位于指定对象之前、之后还是与其位置相同。</summary>
<returns>带符号整数，指示此实例与 <paramref name="obj"/> 在排序顺序中的相对位置，如下表所示。值 描述 负整数 此实例位于 <paramref name="obj"/> 之前。零 此实例与 <paramref name="obj"/> 在排序顺序中的位置相同。正整数 此实例位于 <paramref name="obj"/> 之后。</returns>
<param name="obj">与当前实例进行比较的对象。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="obj"/> 不是 <see cref="T:System.Tuple`2"/> 对象。</exception>
    </member>
    <member name="M:System.Tuple`2.ToString">
<summary>返回一个字符串，该字符串表示此 <see cref="T:System.Tuple`2"/> 实例的值。</summary>
<returns>此 <see cref="T:System.Tuple`2"/> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Tuple`3">
<summary>表示 3 元组，即三元组。</summary>
<typeparam name="T1">此元组的第一个分量的类型。</typeparam>
<typeparam name="T2">此元组的第二个分量的类型。</typeparam>
<typeparam name="T3">此元组的第三个分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple`3.#ctor(`0,`1,`2)">
<summary>初始化 <see cref="T:System.Tuple`3"/> 类的新实例。</summary>
<param name="item1">此元组的第一个分量的值。</param>
<param name="item2">此元组的第二个分量的值。</param>
<param name="item3">此元组的第三个分量的值。</param>
    </member>
    <member name="M:System.Tuple`3.Equals(System.Object)">
<summary>返回一个值，该值指示当前的 <see cref="T:System.Tuple`3"/> 对象是否与指定对象相等。</summary>
<returns>如果当前实例等于指定的对象，则为 true；否则为 false。</returns>
<param name="obj">与此实例进行比较的对象。</param>
    </member>
    <member name="M:System.Tuple`3.GetHashCode">
<summary>返回当前 <see cref="T:System.Tuple`3"/> 对象的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`3.Item1">
<summary>获取当前 <see cref="T:System.Tuple`3"/> 对象的第一个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`3"/> 对象的第一个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`3.Item2">
<summary>获取当前 <see cref="T:System.Tuple`3"/> 对象的第二个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`3"/> 对象的第二个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`3.Item3">
<summary>获取当前 <see cref="T:System.Tuple`3"/> 对象的第三个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`3"/> 对象的第三个分量的值。</returns>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
<summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`3"/> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
<returns>带符号整数，指示此实例与 <paramref name="other"/> 在排序顺序中的相对位置，如下表所示。值 描述 负整数 此实例位于 <paramref name="other"/> 之前。零 此实例与 <paramref name="other"/> 在排序顺序中的位置相同。正整数 此实例位于 <paramref name="other"/> 之后。</returns>
<param name="other">与当前实例进行比较的对象。</param>
<param name="comparer">一个对象，提供自定义比较规则。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="other"/> 不是 <see cref="T:System.Tuple`3"/> 对象。</exception>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
<summary>返回一个值，该值根据指定的比较方法指示当前的 <see cref="T:System.Tuple`3"/> 对象是否与指定对象相等。</summary>
<returns>如果当前实例等于指定的对象，则为 true；否则为 false。</returns>
<param name="other">与此实例进行比较的对象。</param>
<param name="comparer">一个对象，定义用于评估两个对象是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
<summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`3"/> 对象的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
<param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)"/> 方法计算当前 <see cref="T:System.Tuple`3"/> 对象的哈希代码。</param>
    </member>
    <member name="M:System.Tuple`3.System#IComparable#CompareTo(System.Object)">
<summary>将当前 <see cref="T:System.Tuple`3"/> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是位于指定对象之前、之后还是与其位置相同。</summary>
<returns>带符号整数，指示此实例与 <paramref name="obj"/> 在排序顺序中的相对位置，如下表所示。值 描述 负整数 此实例位于 <paramref name="obj"/> 之前。零 此实例与 <paramref name="obj"/> 在排序顺序中的位置相同。正整数 此实例位于 <paramref name="obj"/> 之后。</returns>
<param name="obj">与当前实例进行比较的对象。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="obj"/> 不是 <see cref="T:System.Tuple`3"/> 对象。</exception>
    </member>
    <member name="M:System.Tuple`3.ToString">
<summary>返回一个字符串，该字符串表示此 <see cref="T:System.Tuple`3"/> 实例的值。</summary>
<returns>此 <see cref="T:System.Tuple`3"/> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Tuple`4">
<summary>表示 4 元组，即四元组。</summary>
<typeparam name="T1">此元组的第一个分量的类型。</typeparam>
<typeparam name="T2">此元组的第二个分量的类型。</typeparam>
<typeparam name="T3">此元组的第三个分量的类型。</typeparam>
<typeparam name="T4">此元组的第四个分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple`4.#ctor(`0,`1,`2,`3)">
<summary>初始化 <see cref="T:System.Tuple`4"/> 类的新实例。</summary>
<param name="item1">此元组的第一个分量的值。</param>
<param name="item2">此元组的第二个分量的值。</param>
<param name="item3">此元组的第三个分量的值。</param>
<param name="item4">此元组的第四个分量的值</param>
    </member>
    <member name="M:System.Tuple`4.Equals(System.Object)">
<summary>返回一个值，该值指示当前的 <see cref="T:System.Tuple`4"/> 对象是否与指定对象相等。</summary>
<returns>如果当前实例等于指定的对象，则为 true；否则为 false。</returns>
<param name="obj">与此实例进行比较的对象。</param>
    </member>
    <member name="M:System.Tuple`4.GetHashCode">
<summary>返回当前 <see cref="T:System.Tuple`4"/> 对象的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`4.Item1">
<summary>获取当前 <see cref="T:System.Tuple`4"/> 对象的第一个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`4"/> 对象的第一个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`4.Item2">
<summary>获取当前 <see cref="T:System.Tuple`4"/> 对象的第二个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`4"/> 对象的第二个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`4.Item3">
<summary>获取当前 <see cref="T:System.Tuple`4"/> 对象的第三个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`4"/> 对象的第三个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`4.Item4">
<summary>获取当前 <see cref="T:System.Tuple`4"/> 对象的第四个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`4"/> 对象的第四个分量的值。</returns>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
<summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`4"/> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
<returns>带符号整数，指示此实例与 <paramref name="other"/> 在排序顺序中的相对位置，如下表所示。值 描述 负整数 此实例位于 <paramref name="other"/> 之前。零 此实例与 <paramref name="other"/> 在排序顺序中的位置相同。正整数 此实例位于 <paramref name="other"/> 之后。</returns>
<param name="other">与当前实例进行比较的对象。</param>
<param name="comparer">一个对象，提供自定义比较规则。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="other"/> 不是 <see cref="T:System.Tuple`4"/> 对象。</exception>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
<summary>返回一个值，该值根据指定的比较方法指示当前的 <see cref="T:System.Tuple`4"/> 对象是否与指定对象相等。</summary>
<returns>如果当前实例等于指定的对象，则为 true；否则为 false。</returns>
<param name="other">与此实例进行比较的对象。</param>
<param name="comparer">一个对象，定义用于评估两个对象是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
<summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`4"/> 对象的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
<param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)"/> 方法计算当前 <see cref="T:System.Tuple`4"/> 对象的哈希代码。</param>
    </member>
    <member name="M:System.Tuple`4.System#IComparable#CompareTo(System.Object)">
<summary>将当前 <see cref="T:System.Tuple`4"/> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是位于指定对象之前、之后还是与其位置相同。</summary>
<returns>带符号整数，指示此实例与 <paramref name="obj"/> 在排序顺序中的相对位置，如下表所示。值 描述 负整数 此实例位于 <paramref name="obj"/> 之前。零 此实例与 <paramref name="obj"/> 在排序顺序中的位置相同。正整数 此实例位于 <paramref name="obj"/> 之后。</returns>
<param name="obj">与当前实例进行比较的对象。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="obj"/> 不是 <see cref="T:System.Tuple`4"/> 对象。</exception>
    </member>
    <member name="M:System.Tuple`4.ToString">
<summary>返回一个字符串，该字符串表示此 <see cref="T:System.Tuple`4"/> 实例的值。</summary>
<returns>此 <see cref="T:System.Tuple`4"/> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Tuple`5">
<summary>表示 5 元组，即五元组。</summary>
<typeparam name="T1">此元组的第一个分量的类型。</typeparam>
<typeparam name="T2">此元组的第二个分量的类型。</typeparam>
<typeparam name="T3">此元组的第三个分量的类型。</typeparam>
<typeparam name="T4">此元组的第四个分量的类型。</typeparam>
<typeparam name="T5">此元组的第五个分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple`5.#ctor(`0,`1,`2,`3,`4)">
<summary>初始化 <see cref="T:System.Tuple`5"/> 类的新实例。</summary>
<param name="item1">此元组的第一个分量的值。</param>
<param name="item2">此元组的第二个分量的值。</param>
<param name="item3">此元组的第三个分量的值。</param>
<param name="item4">此元组的第四个分量的值</param>
<param name="item5">此元组的第五个分量的值。</param>
    </member>
    <member name="M:System.Tuple`5.Equals(System.Object)">
<summary>返回一个值，该值指示当前的 <see cref="T:System.Tuple`5"/> 对象是否与指定对象相等。</summary>
<returns>如果当前实例等于指定的对象，则为 true；否则为 false。</returns>
<param name="obj">与此实例进行比较的对象。</param>
    </member>
    <member name="M:System.Tuple`5.GetHashCode">
<summary>返回当前 <see cref="T:System.Tuple`5"/> 对象的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`5.Item1">
<summary>获取当前 <see cref="T:System.Tuple`5"/> 对象的第一个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`5"/> 对象的第一个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`5.Item2">
<summary>获取当前 <see cref="T:System.Tuple`5"/> 对象的第二个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`5"/> 对象的第二个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`5.Item3">
<summary>获取当前 <see cref="T:System.Tuple`5"/> 对象的第三个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`5"/> 对象的第三个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`5.Item4">
<summary>获取当前 <see cref="T:System.Tuple`5"/> 对象的第四个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`5"/> 对象的第四个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`5.Item5">
<summary>获取当前 <see cref="T:System.Tuple`5"/> 对象的第五个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`5"/> 对象的第五个分量的值。</returns>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
<summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`5"/> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
<returns>带符号整数，指示此实例与 <paramref name="other"/> 在排序顺序中的相对位置，如下表所示。值 描述 负整数 此实例位于 <paramref name="other"/> 之前。零 此实例与 <paramref name="other"/> 在排序顺序中的位置相同。正整数 此实例位于 <paramref name="other"/> 之后。</returns>
<param name="other">与当前实例进行比较的对象。</param>
<param name="comparer">一个对象，提供自定义比较规则。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="other"/> 不是 <see cref="T:System.Tuple`5"/> 对象。</exception>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
<summary>返回一个值，该值根据指定的比较方法指示当前的 <see cref="T:System.Tuple`5"/> 对象是否与指定对象相等。</summary>
<returns>如果当前实例等于指定的对象，则为 true；否则为 false。</returns>
<param name="other">与此实例进行比较的对象。</param>
<param name="comparer">一个对象，定义用于评估两个对象是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
<summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`5"/> 对象的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
<param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)"/> 方法计算当前 <see cref="T:System.Tuple`5"/> 对象的哈希代码。</param>
    </member>
    <member name="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
<summary>将当前 <see cref="T:System.Tuple`5"/> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是位于指定对象之前、之后还是与其位置相同。</summary>
<returns>带符号整数，指示此实例与 <paramref name="obj"/> 在排序顺序中的相对位置，如下表所示。值 描述 负整数 此实例位于 <paramref name="obj"/> 之前。零 此实例与 <paramref name="obj"/> 在排序顺序中的位置相同。正整数 此实例位于 <paramref name="obj"/> 之后。</returns>
<param name="obj">与当前实例进行比较的对象。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="obj"/> 不是 <see cref="T:System.Tuple`5"/> 对象。</exception>
    </member>
    <member name="M:System.Tuple`5.ToString">
<summary>返回一个字符串，该字符串表示此 <see cref="T:System.Tuple`5"/> 实例的值。</summary>
<returns>此 <see cref="T:System.Tuple`5"/> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Tuple`6">
<summary>表示 6 元组，即六元组。</summary>
<typeparam name="T1">此元组的第一个分量的类型。</typeparam>
<typeparam name="T2">此元组的第二个分量的类型。</typeparam>
<typeparam name="T3">此元组的第三个分量的类型。</typeparam>
<typeparam name="T4">此元组的第四个分量的类型。</typeparam>
<typeparam name="T5">此元组的第五个分量的类型。</typeparam>
<typeparam name="T6">此元组的第六个分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
<summary>初始化 <see cref="T:System.Tuple`6"/> 类的新实例。</summary>
<param name="item1">此元组的第一个分量的值。</param>
<param name="item2">此元组的第二个分量的值。</param>
<param name="item3">此元组的第三个分量的值。</param>
<param name="item4">此元组的第四个分量的值</param>
<param name="item5">此元组的第五个分量的值。</param>
<param name="item6">此元组的第六个分量的值。</param>
    </member>
    <member name="M:System.Tuple`6.Equals(System.Object)">
<summary>返回一个值，该值指示当前的 <see cref="T:System.Tuple`6"/> 对象是否与指定对象相等。</summary>
<returns>如果当前实例等于指定的对象，则为 true；否则为 false。</returns>
<param name="obj">与此实例进行比较的对象。</param>
    </member>
    <member name="M:System.Tuple`6.GetHashCode">
<summary>返回当前 <see cref="T:System.Tuple`6"/> 对象的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`6.Item1">
<summary>获取当前 <see cref="T:System.Tuple`6"/> 对象的第一个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`6"/> 对象的第一个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item2">
<summary>获取当前 <see cref="T:System.Tuple`6"/> 对象的第二个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`6"/> 对象的第二个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item3">
<summary>获取当前 <see cref="T:System.Tuple`6"/> 对象的第三个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`6"/> 对象的第三个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item4">
<summary>获取当前 <see cref="T:System.Tuple`6"/> 对象的第四个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`6"/> 对象的第四个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item5">
<summary>获取当前 <see cref="T:System.Tuple`6"/> 对象的第五个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`6"/> 对象的第五个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item6">
<summary>获取当前 <see cref="T:System.Tuple`6"/> 对象的第六个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`6"/> 对象的第六个分量的值。</returns>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
<summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`6"/> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
<returns>带符号整数，指示此实例与 <paramref name="other"/> 在排序顺序中的相对位置，如下表所示。值 描述 负整数 此实例位于 <paramref name="other"/> 之前。零 此实例与 <paramref name="other"/> 在排序顺序中的位置相同。正整数 此实例位于 <paramref name="other"/> 之后。</returns>
<param name="other">与当前实例进行比较的对象。</param>
<param name="comparer">一个对象，提供自定义比较规则。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="other"/> 不是 <see cref="T:System.Tuple`6"/> 对象。</exception>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
<summary>返回一个值，该值根据指定的比较方法指示当前的 <see cref="T:System.Tuple`6"/> 对象是否与指定对象相等。</summary>
<returns>如果当前实例等于指定的对象，则为 true；否则为 false。</returns>
<param name="other">与此实例进行比较的对象。</param>
<param name="comparer">一个对象，定义用于评估两个对象是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
<summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`6"/> 对象的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
<param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)"/> 方法计算当前 <see cref="T:System.Tuple`6"/> 对象的哈希代码。</param>
    </member>
    <member name="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
<summary>将当前 <see cref="T:System.Tuple`6"/> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是位于指定对象之前、之后还是与其位置相同。</summary>
<returns>带符号整数，指示此实例与 <paramref name="obj"/> 在排序顺序中的相对位置，如下表所示。值 描述 负整数 此实例位于 <paramref name="obj"/> 之前。零 此实例与 <paramref name="obj"/> 在排序顺序中的位置相同。正整数 此实例位于 <paramref name="obj"/> 之后。</returns>
<param name="obj">与当前实例进行比较的对象。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="obj"/> 不是 <see cref="T:System.Tuple`6"/> 对象。</exception>
    </member>
    <member name="M:System.Tuple`6.ToString">
<summary>返回一个字符串，该字符串表示此 <see cref="T:System.Tuple`6"/> 实例的值。</summary>
<returns>此 <see cref="T:System.Tuple`6"/> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Tuple`7">
<summary>表示 7 元组，即七元组。</summary>
<typeparam name="T1">此元组的第一个分量的类型。</typeparam>
<typeparam name="T2">此元组的第二个分量的类型。</typeparam>
<typeparam name="T3">此元组的第三个分量的类型。</typeparam>
<typeparam name="T4">此元组的第四个分量的类型。</typeparam>
<typeparam name="T5">此元组的第五个分量的类型。</typeparam>
<typeparam name="T6">此元组的第六个分量的类型。</typeparam>
<typeparam name="T7">此元组的第七个分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
<summary>初始化 <see cref="T:System.Tuple`7"/> 类的新实例。</summary>
<param name="item1">此元组的第一个分量的值。</param>
<param name="item2">此元组的第二个分量的值。</param>
<param name="item3">此元组的第三个分量的值。</param>
<param name="item4">此元组的第四个分量的值</param>
<param name="item5">此元组的第五个分量的值。</param>
<param name="item6">此元组的第六个分量的值。</param>
<param name="item7">此元组的第七个分量的值。</param>
    </member>
    <member name="M:System.Tuple`7.Equals(System.Object)">
<summary>返回一个值，该值指示当前的 <see cref="T:System.Tuple`7"/> 对象是否与指定对象相等。</summary>
<returns>如果当前实例等于指定的对象，则为 true；否则为 false。</returns>
<param name="obj">与此实例进行比较的对象。</param>
    </member>
    <member name="M:System.Tuple`7.GetHashCode">
<summary>返回当前 <see cref="T:System.Tuple`7"/> 对象的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`7.Item1">
<summary>获取当前 <see cref="T:System.Tuple`7"/> 对象的第一个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`7"/> 对象的第一个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item2">
<summary>获取当前 <see cref="T:System.Tuple`7"/> 对象的第二个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`7"/> 对象的第二个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item3">
<summary>获取当前 <see cref="T:System.Tuple`7"/> 对象的第三个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`7"/> 对象的第三个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item4">
<summary>获取当前 <see cref="T:System.Tuple`7"/> 对象的第四个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`7"/> 对象的第四个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item5">
<summary>获取当前 <see cref="T:System.Tuple`7"/> 对象的第五个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`7"/> 对象的第五个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item6">
<summary>获取当前 <see cref="T:System.Tuple`7"/> 对象的第六个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`7"/> 对象的第六个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item7">
<summary>获取当前 <see cref="T:System.Tuple`7"/> 对象的第七个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`7"/> 对象的第七个分量的值。</returns>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
<summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`7"/> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
<returns>带符号整数，指示此实例与 <paramref name="other"/> 在排序顺序中的相对位置，如下表所示。值 描述 负整数 此实例位于 <paramref name="other"/> 之前。零 此实例与 <paramref name="other"/> 在排序顺序中的位置相同。正整数 此实例位于 <paramref name="other"/> 之后。</returns>
<param name="other">与当前实例进行比较的对象。</param>
<param name="comparer">一个对象，提供自定义比较规则。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="other"/> 不是 <see cref="T:System.Tuple`7"/> 对象。</exception>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
<summary>返回一个值，该值根据指定的比较方法指示当前的 <see cref="T:System.Tuple`7"/> 对象是否与指定对象相等。</summary>
<returns>如果当前实例等于指定的对象，则为 true；否则为 false。</returns>
<param name="other">与此实例进行比较的对象。</param>
<param name="comparer">一个对象，定义用于评估两个对象是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
<summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`7"/> 对象的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
<param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)"/> 方法计算当前 <see cref="T:System.Tuple`7"/> 对象的哈希代码。</param>
    </member>
    <member name="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
<summary>将当前 <see cref="T:System.Tuple`7"/> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是位于指定对象之前、之后还是与其位置相同。</summary>
<returns>带符号整数，指示此实例与 <paramref name="obj"/> 在排序顺序中的相对位置，如下表所示。值 描述 负整数 此实例位于 <paramref name="obj"/> 之前。零 此实例与 <paramref name="obj"/> 在排序顺序中的位置相同。正整数 此实例位于 <paramref name="obj"/> 之后。</returns>
<param name="obj">与当前实例进行比较的对象。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="obj"/> 不是 <see cref="T:System.Tuple`7"/> 对象。</exception>
    </member>
    <member name="M:System.Tuple`7.ToString">
<summary>返回一个字符串，该字符串表示此 <see cref="T:System.Tuple`7"/> 实例的值。</summary>
<returns>此 <see cref="T:System.Tuple`7"/> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Tuple`8">
<summary>表示 n 元组，其中 n 为 8 或更大。 </summary>
<typeparam name="T1">此元组的第一个分量的类型。</typeparam>
<typeparam name="T2">此元组的第二个分量的类型。</typeparam>
<typeparam name="T3">此元组的第三个分量的类型。</typeparam>
<typeparam name="T4">此元组的第四个分量的类型。</typeparam>
<typeparam name="T5">此元组的第五个分量的类型。</typeparam>
<typeparam name="T6">此元组的第六个分量的类型。</typeparam>
<typeparam name="T7">此元组的第七个分量的类型。</typeparam>
<typeparam name="TRest">任何常规 Tuple 对象，用于定义元组的剩余分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
<summary>初始化 <see cref="T:System.Tuple`8"/> 类的新实例。</summary>
<param name="item1">此元组的第一个分量的值。</param>
<param name="item2">此元组的第二个分量的值。</param>
<param name="item3">此元组的第三个分量的值。</param>
<param name="item4">此元组的第四个分量的值</param>
<param name="item5">此元组的第五个分量的值。</param>
<param name="item6">此元组的第六个分量的值。</param>
<param name="item7">此元组的第七个分量的值。</param>
<param name="rest">任何常规 Tuple 对象，其中包含元组的剩余分量的值。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="rest"/> 不是泛型 Tuple 对象。</exception>
    </member>
    <member name="M:System.Tuple`8.Equals(System.Object)">
<summary>返回一个值，该值指示当前的 <see cref="T:System.Tuple`8"/> 对象是否与指定对象相等。</summary>
<returns>如果当前实例等于指定的对象，则为 true；否则为 false。</returns>
<param name="obj">与此实例进行比较的对象。</param>
    </member>
    <member name="M:System.Tuple`8.GetHashCode">
<summary>计算当前 <see cref="T:System.Tuple`8"/> 对象的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`8.Item1">
<summary>获取当前 <see cref="T:System.Tuple`8"/> 对象的第一个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`8"/> 对象的第一个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item2">
<summary>获取当前 <see cref="T:System.Tuple`8"/> 对象的第二个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`8"/> 对象的第二个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item3">
<summary>获取当前 <see cref="T:System.Tuple`8"/> 对象的第三个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`8"/> 对象的第三个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item4">
<summary>获取当前 <see cref="T:System.Tuple`8"/> 对象的第四个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`8"/> 对象的第四个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item5">
<summary>获取当前 <see cref="T:System.Tuple`8"/> 对象的第五个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`8"/> 对象的第五个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item6">
<summary>获取当前 <see cref="T:System.Tuple`8"/> 对象的第六个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`8"/> 对象的第六个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item7">
<summary>获取当前 <see cref="T:System.Tuple`8"/> 对象的第七个分量的值。</summary>
<returns>当前 <see cref="T:System.Tuple`8"/> 对象的第七个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Rest">
<summary>获取当前 <see cref="T:System.Tuple`8"/> 对象的剩余分量。</summary>
<returns>当前 <see cref="T:System.Tuple`8"/> 对象的剩余分量的值。</returns>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
<summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`8"/> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
<returns>带符号整数，指示此实例与 <paramref name="other"/> 在排序顺序中的相对位置，如下表所示。值 描述 负整数 此实例位于 <paramref name="other"/> 之前。零 此实例与 <paramref name="other"/> 在排序顺序中的位置相同。正整数 此实例位于 <paramref name="other"/> 之后。</returns>
<param name="other">与当前实例进行比较的对象。</param>
<param name="comparer">一个对象，提供自定义比较规则。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="other"/> 不是 <see cref="T:System.Tuple`8"/> 对象。</exception>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
<summary>返回一个值，该值根据指定的比较方法指示当前的 <see cref="T:System.Tuple`8"/> 对象是否与指定对象相等。</summary>
<returns>如果当前实例等于指定的对象，则为 true；否则为 false。</returns>
<param name="other">与此实例进行比较的对象。</param>
<param name="comparer">一个对象，定义用于评估两个对象是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
<summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`8"/> 对象的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
<param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)"/> 方法计算当前 <see cref="T:System.Tuple`8"/> 对象的哈希代码。</param>
    </member>
    <member name="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
<summary>将当前 <see cref="T:System.Tuple`8"/> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是位于指定对象之前、之后还是与其位置相同。</summary>
<returns>带符号整数，指示此实例与 <paramref name="obj"/> 在排序顺序中的相对位置，如下表所示。值 描述 负整数 此实例位于 <paramref name="obj"/> 之前。零 此实例与 <paramref name="obj"/> 在排序顺序中的位置相同。正整数 此实例位于 <paramref name="obj"/> 之后。</returns>
<param name="obj">与当前实例进行比较的对象。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="obj"/> 不是 <see cref="T:System.Tuple`8"/> 对象。</exception>
    </member>
    <member name="M:System.Tuple`8.ToString">
<summary>返回一个字符串，该字符串表示此 <see cref="T:System.Tuple`8"/> 实例的值。</summary>
<returns>此 <see cref="T:System.Tuple`8"/> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Type">
<summary>表示类型声明：类类型、接口类型、数组类型、值类型、枚举类型、类型参数、泛型类型定义，以及开放式或封闭式构造的泛型类型。</summary>
    </member>
    <member name="M:System.Type.#ctor">
<summary>初始化 <see cref="T:System.Type"/> 类的新实例。</summary>
    </member>
    <member name="P:System.Type.Assembly">
<summary>获取在其中声明该类型的 <see cref="T:System.Reflection.Assembly"/>。对于泛型类型，则获取在其中定义该泛型类型的 <see cref="T:System.Reflection.Assembly"/>。</summary>
<returns>描述包含当前类型的程序集的 <see cref="T:System.Reflection.Assembly"/> 实例。对于泛型类型，该实例描述包含泛型类型定义的程序集，而不是创建和使用特定构造类型的程序集。</returns>
    </member>
    <member name="P:System.Type.AssemblyQualifiedName">
<summary>获取 <see cref="T:System.Type"/> 的程序集限定名，其中包括从中加载 <see cref="T:System.Type"/> 的程序集的名称。</summary>
<returns><see cref="T:System.Type"/> 的程序集限定名，其中包括从中加载 <see cref="T:System.Type"/> 的程序集的名称；或者如果当前实例表示泛型类型参数，则为 null。</returns>
    </member>
    <member name="P:System.Type.Attributes">
<summary>获取与 <see cref="T:System.Type"/> 关联的属性。</summary>
<returns>表示 <see cref="T:System.Type"/> 的属性集的 <see cref="T:System.Reflection.TypeAttributes"/> 对象，除非 <see cref="T:System.Type"/> 表示泛型类型参数，在此情况下该值未指定。 </returns>
    </member>
    <member name="P:System.Type.BaseType">
<summary>获取当前 <see cref="T:System.Type"/> 直接从中继承的类型。</summary>
<returns>当前的 <see cref="T:System.Type"/> 直接从中继承的 <see cref="T:System.Type"/>；或者如果当前的 Type 表示 <see cref="T:System.Object"/> 类或一个接口，则为 null。</returns>
    </member>
    <member name="P:System.Type.ContainsGenericParameters">
<summary>获取一个值，该值指示当前 <see cref="T:System.Type"/> 对象是否具有尚未被特定类型替代的类型参数。</summary>
<returns>如果 <see cref="T:System.Type"/> 对象本身是泛型类型参数或者具有尚未提供特定类型的类型参数，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.DeclaringMethod">
<summary>如果当前 <see cref="T:System.Type"/> 表示泛型方法的一个类型参数，获取一个表示声明方法的 <see cref="T:System.Reflection.MethodBase"/>。</summary>
<returns>如果当前 <see cref="T:System.Type"/> 表示泛型方法的一个类型参数，则为一个表示声明方法的 <see cref="T:System.Reflection.MethodBase"/>；否则为 null。</returns>
    </member>
    <member name="P:System.Type.DeclaringType">
<summary>获取用来声明当前的嵌套类型或泛型类型参数的类型。</summary>
<returns>如果当前的类型是嵌套类型，则为表示封闭类型的 <see cref="T:System.Type"/> 对象；如果当前的类型是泛型类型的类型参数，则为泛型类型的定义；如果当前的类型是泛型方法的类型参数，则为用来声明泛型方法的类型；否则为 null。</returns>
    </member>
    <member name="P:System.Type.DefaultBinder">
<summary>获取默认联编程序的引用，该程序实现的内部规则用于选择由 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 调用的合适成员。</summary>
<returns>系统使用的默认联编程序的引用。</returns>
    </member>
    <member name="F:System.Type.Delimiter">
<summary>分隔 <see cref="T:System.Type"/> 的命名空间中的名称。此字段为只读。</summary>
    </member>
    <member name="F:System.Type.EmptyTypes">
<summary>表示 <see cref="T:System.Type"/> 类型的空数组。此字段为只读。</summary>
    </member>
    <member name="M:System.Type.Equals(System.Object)">
<summary>确定当前 <see cref="T:System.Type"/> 的基础系统类型是否与指定 <see cref="T:System.Object"/> 的基础系统类型相同。</summary>
<returns>如果 <paramref name="o"/> 的基础系统类型与当前 <see cref="T:System.Type"/> 的基础系统类型相同，则为 true；否则为 false。如果 <paramref name="o"/> 参数指定的对象不是 Type，此方法也会返回 false。</returns>
<param name="o"><see cref="T:System.Object"/>，其基础系统类型将与当前 <see cref="T:System.Type"/> 的基础系统类型相比较。 </param>
    </member>
    <member name="M:System.Type.Equals(System.Type)">
<summary>确定当前 <see cref="T:System.Type"/> 的基础系统类型是否与指定 <see cref="T:System.Type"/> 的基础系统类型相同。</summary>
<returns>如果 <paramref name="o"/> 的基础系统类型与当前 <see cref="T:System.Type"/> 的基础系统类型相同，则为 true；否则为 false。</returns>
<param name="o"><see cref="T:System.Type"/>，其基础系统类型将与当前 <see cref="T:System.Type"/> 的基础系统类型相比较。 </param>
    </member>
    <member name="F:System.Type.FilterNameIgnoreCase">
<summary>表示用于名称的不区分大小写的成员筛选器。此字段为只读。</summary>
    </member>
    <member name="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)">
<summary>返回指定成员类型的 <see cref="T:System.Reflection.MemberInfo"/> 对象的筛选数组。</summary>
<returns>指定成员类型的 <see cref="T:System.Reflection.MemberInfo"/> 对象的筛选数组。-或- 如果当前 <see cref="T:System.Type"/> 没有与筛选器条件匹配的 <paramref name="memberType"/> 类型成员，则为 <see cref="T:System.Reflection.MemberInfo"/> 类型的空数组。</returns>
<param name="memberType">指示要搜索的成员类型的 MemberTypes 对象。 </param>
<param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags"/> 组成。-或- 如果为零，则返回 null。 </param>
<param name="filter">执行比较的委托，如果当前正检查的成员与 <paramref name="filterCriteria"/> 匹配，则返回 true；否则返回 false。可以使用该类提供的 FilterAttribute、FilterName 和 FilterNameIgnoreCase 委托。第一个委托使用 FieldAttributes、MethodAttributes 和 MethodImplAttributes 的字段作为搜索条件，另两个委托使用 String 对象作为搜索条件。 </param>
<param name="filterCriteria">确定成员是否在 MemberInfo 对象数组中返回的搜索条件。FieldAttributes、MethodAttributes 和 MethodImplAttributes 的字段可以与该类提供的 FilterAttribute 委托结合使用。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="filter"/> 为 null。 </exception>
    </member>
    <member name="P:System.Type.FullName">
<summary>获取 <see cref="T:System.Type"/> 的完全限定名，包括 <see cref="T:System.Type"/> 的命名空间，但不包括程序集。</summary>
<returns><see cref="T:System.Type"/> 的完全限定名，包括 <see cref="T:System.Type"/> 的命名空间，但不包括程序集；如果当前实例表示泛型类型参数、数组类型、指针类型或基于类型参数的 byref 类型，或表示不属于泛型类型定义但包含无法解析的类型参数的泛型类型，则返回 null。</returns>
    </member>
    <member name="P:System.Type.GenericParameterAttributes">
<summary>获取描述当前泛型类型参数的协变和特殊约束的 <see cref="T:System.Reflection.GenericParameterAttributes"/> 标志。 </summary>
<returns><see cref="T:System.Reflection.GenericParameterAttributes"/> 值的按位组合，用于描述当前泛型类型参数的协变和特殊约束。</returns>
<exception cref="T:System.InvalidOperationException">当前的 <see cref="T:System.Type"/> 对象不是泛型类型参数。即，<see cref="P:System.Type.IsGenericParameter"/> 属性返回 false。</exception>
<exception cref="T:System.NotSupportedException">基类不支持所调用的方法。</exception>
    </member>
    <member name="P:System.Type.GenericParameterPosition">
<summary>当 <see cref="T:System.Type"/> 对象表示泛型类型或泛型方法的类型参数时，获取类型参数在声明它的泛型类型或方法的类型参数列表中的位置。</summary>
<returns>类型参数在定义它的泛型类型或方法的类型参数列表中的位置。位置编号从 0 开始。</returns>
<exception cref="T:System.InvalidOperationException">当前类型不表示类型参数。即 <see cref="P:System.Type.IsGenericParameter"/> 返回 false。 </exception>
    </member>
    <member name="M:System.Type.GetArrayRank">
<summary>获取 <see cref="T:System.Array"/> 中的维数。</summary>
<returns>包含当前 Type 中维数的 <see cref="T:System.Int32"/>。</returns>
<exception cref="T:System.NotSupportedException">此方法的功能在基类中不受支持，而必须在派生类中实现。 </exception>
<exception cref="T:System.ArgumentException">当前 Type 不是数组。 </exception>
    </member>
    <member name="M:System.Type.GetAttributeFlagsImpl">
<summary>当在派生类中重写时，实现 <see cref="P:System.Type.Attributes"/> 属性，并获取一个指示与 <see cref="T:System.Type"/> 关联的特性的位屏蔽。</summary>
<returns>表示 <see cref="T:System.Type"/> 的属性集的 <see cref="T:System.Reflection.TypeAttributes"/> 对象。</returns>
    </member>
    <member name="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
<summary>使用指定绑定约束搜索其参数与指定参数类型和修饰符匹配的构造函数。</summary>
<returns>表示符合指定要求的构造函数的 <see cref="T:System.Reflection.ConstructorInfo"/> 对象（如果找到的话）；否则为 null。</returns>
<param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags"/> 组成。-或- 如果为零，则返回 null。 </param>
<param name="binder">一个 <see cref="T:System.Reflection.Binder"/> 对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载成员、强制参数类型和通过反射调用成员。-或- 如果为空引用（在 Visual Basic 中为 Nothing），则使用 <see cref="P:System.Type.DefaultBinder"/>。 </param>
<param name="types">一个 <see cref="T:System.Type"/> 对象数组，表示构造函数要获取的参数的个数、顺序和类型。-或- <see cref="T:System.Type"/> 类型的空数组（即 Type[] types = new Type[0]），用于获取不带参数的构造函数。-或- <see cref="F:System.Type.EmptyTypes"/>。 </param>
<param name="modifiers"><see cref="T:System.Reflection.ParameterModifier"/> 对象数组，表示与参数类型数组中的相应元素关联的属性。默认的联编程序不处理此参数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="types"/> 为 null。-或- <paramref name="types"/> 中的一个元素为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="types"/> 是多维的。-或- <paramref name="modifiers"/> 是多维的。-或- <paramref name="types"/> 和 <paramref name="modifiers"/> 的长度不同。 </exception>
    </member>
    <member name="M:System.Type.GetConstructor(System.Type[])">
<summary>搜索其参数与指定数组中的类型匹配的公共实例构造函数。</summary>
<returns>表示某个公共实例构造函数（该构造函数的参数与参数类型数组中的类型匹配）的 <see cref="T:System.Reflection.ConstructorInfo"/> 对象（如果找到的话）；否则为 null。</returns>
<param name="types">表示需要的构造函数的参数个数、顺序和类型的 <see cref="T:System.Type"/> 对象的数组。-或- <see cref="T:System.Type"/> 对象的空数组，用于获取不带参数的构造函数。这样的空数组由 static 字段 <see cref="F:System.Type.EmptyTypes"/> 提供。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="types"/> 为 null。-或- <paramref name="types"/> 中的一个元素为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="types"/> 是多维的。 </exception>
    </member>
    <member name="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
<summary>当在派生类中重写时，使用指定的绑定约束和指定的调用约定搜索其参数与指定的参数类型和修饰符匹配的构造函数。</summary>
<returns>表示符合指定要求的构造函数的 <see cref="T:System.Reflection.ConstructorInfo"/> 对象（如果找到的话）；否则为 null。</returns>
<param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags"/> 组成。-或- 如果为零，则返回 null。 </param>
<param name="binder">一个 <see cref="T:System.Reflection.Binder"/> 对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载成员、强制参数类型和通过反射调用成员。-或- 如果为空引用（在 Visual Basic 中为 Nothing），则使用 <see cref="P:System.Type.DefaultBinder"/>。 </param>
<param name="callConvention"><see cref="T:System.Reflection.CallingConventions"/> 对象，用于指定要使用的一套规则，这些规则涉及参数的顺序和布局、返回值的传递方式、用于参数的寄存器以及堆栈的清理方式。 </param>
<param name="types">一个 <see cref="T:System.Type"/> 对象数组，表示构造函数要获取的参数的个数、顺序和类型。-或- <see cref="T:System.Type"/> 类型的空数组（即 Type[] types = new Type[0]），用于获取不带参数的构造函数。 </param>
<param name="modifiers"><see cref="T:System.Reflection.ParameterModifier"/> 对象数组，表示与 <paramref name="types"/> 数组中的相应元素关联的属性。默认的联编程序不处理此参数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="types"/> 为 null。-或- <paramref name="types"/> 中的一个元素为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="types"/> 是多维的。-或- <paramref name="modifiers"/> 是多维的。-或- <paramref name="types"/> 和 <paramref name="modifiers"/> 的长度不同。 </exception>
<exception cref="T:System.NotSupportedException">当前类型是 <see cref="T:System.Reflection.Emit.TypeBuilder"/> 或 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder"/>。</exception>
    </member>
    <member name="M:System.Type.GetConstructors">
<summary>返回为当前 <see cref="T:System.Type"/> 定义的所有公共构造函数。</summary>
<returns><see cref="T:System.Reflection.ConstructorInfo"/> 对象数组，表示当前 <see cref="T:System.Type"/> 定义的所有公共实例构造函数，但不包括类型初始值设定项（静态构造函数）。如果没有为当前 <see cref="T:System.Type"/> 定义公共实例构造函数，或者当前 <see cref="T:System.Type"/> 表示泛型类型或泛型方法的定义中的类型参数，则返回 <see cref="T:System.Reflection.ConstructorInfo"/> 类型的空数组。</returns>
    </member>
    <member name="M:System.Type.GetConstructors(System.Reflection.BindingFlags)">
<summary>当在派生类中重写时，使用指定 BindingFlags 搜索为当前 <see cref="T:System.Type"/> 定义的构造函数。</summary>
<returns>表示为当前 <see cref="T:System.Type"/> 定义的匹配指定绑定约束的所有构造函数的 <see cref="T:System.Reflection.ConstructorInfo"/> 对象数组，包括类型初始值设定项（如果定义的话）。在以下情况下返回 <see cref="T:System.Reflection.ConstructorInfo"/> 类型的空数组：没有为当前 <see cref="T:System.Type"/> 定义构造函数，没有与绑定约束匹配的已定义构造函数，或者当前 <see cref="T:System.Type"/> 表示泛型类型或泛型方法的定义中的类型参数。</returns>
<param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags"/> 组成。-或- 如果为零，则返回 null。 </param>
    </member>
    <member name="M:System.Type.GetDefaultMembers">
<summary>搜索为设置了 <see cref="T:System.Reflection.DefaultMemberAttribute"/> 的当前 <see cref="T:System.Type"/> 定义的成员。</summary>
<returns>表示当前 <see cref="T:System.Type"/> 的所有默认成员的 <see cref="T:System.Reflection.MemberInfo"/> 对象数组。-或- 如果当前 <see cref="T:System.Type"/> 没有默认成员，则为 <see cref="T:System.Reflection.MemberInfo"/> 类型的空数组。</returns>
    </member>
    <member name="M:System.Type.GetElementType">
<summary>当在派生类中重写时，返回当前数组、指针或引用类型包含的或引用的对象的 <see cref="T:System.Type"/>。</summary>
<returns>当前数组、指针或引用类型包含或引用的对象的 <see cref="T:System.Type"/>；如果当前 <see cref="T:System.Type"/> 不是数组或指针，不是通过引用传递，或者表示泛型类型或泛型方法的定义中的泛型类型或类型参数，则为 null。</returns>
    </member>
    <member name="M:System.Type.GetEvent(System.String)">
<summary>返回表示指定的公共事件的 <see cref="T:System.Reflection.EventInfo"/> 对象。</summary>
<returns>表示由当前 <see cref="T:System.Type"/> 声明或继承的指定公共事件的 <see cref="T:System.Reflection.EventInfo"/> 对象（如果找到的话）；否则为 null。</returns>
<param name="name"><see cref="T:System.String"/>，包含由当前的 <see cref="T:System.Type"/> 声明或继承的事件的名称。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
    </member>
    <member name="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)">
<summary>当在派生类中重写时，使用指定的绑定约束，返回表示指定事件的 <see cref="T:System.Reflection.EventInfo"/> 对象。</summary>
<returns>表示由当前 <see cref="T:System.Type"/> 声明或继承的指定事件的 <see cref="T:System.Reflection.EventInfo"/> 对象（如果找到的话）；否则为 null。</returns>
<param name="name"><see cref="T:System.String"/>，包含由当前的 <see cref="T:System.Type"/> 声明或继承的事件的名称。 </param>
<param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags"/> 组成。-或- 如果为零，则返回 null。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
    </member>
    <member name="M:System.Type.GetEvents">
<summary>返回由当前 <see cref="T:System.Type"/> 声明或继承的所有公共事件。</summary>
<returns>表示由当前 <see cref="T:System.Type"/> 声明或继承的所有公共事件的 <see cref="T:System.Reflection.EventInfo"/> 对象数组。-或- 如果当前 <see cref="T:System.Type"/> 没有公共事件，则为 <see cref="T:System.Reflection.EventInfo"/> 类型的空数组。</returns>
    </member>
    <member name="M:System.Type.GetEvents(System.Reflection.BindingFlags)">
<summary>当在派生类中重写时，使用指定的绑定约束，搜索由当前 <see cref="T:System.Type"/> 声明或继承的事件。</summary>
<returns>表示由当前 <see cref="T:System.Type"/> 声明或继承的匹配指定绑定约束的所有事件的 <see cref="T:System.Reflection.EventInfo"/> 对象数组。-或- 如果当前 <see cref="T:System.Type"/> 没有事件，或者如果没有一个事件匹配绑定约束，则为 <see cref="T:System.Reflection.EventInfo"/> 类型的空数组。</returns>
<param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags"/> 组成。-或- 如果为零，则返回 null。 </param>
    </member>
    <member name="M:System.Type.GetField(System.String)">
<summary>搜索具有指定名称的公共字段。</summary>
<returns>表示具有指定名称的公共字段的 <see cref="T:System.Reflection.FieldInfo"/> 对象（如果找到的话）；否则为 null。</returns>
<param name="name">包含要获取的数据字段的名称的 <see cref="T:System.String"/>。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
<exception cref="T:System.NotSupportedException">该 <see cref="T:System.Type"/> 对象为 <see cref="T:System.Reflection.Emit.TypeBuilder"/>，其 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/> 方法尚未被调用。 </exception>
    </member>
    <member name="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)">
<summary>使用指定绑定约束搜索指定字段。</summary>
<returns>表示符合指定要求的字段的 <see cref="T:System.Reflection.FieldInfo"/> 对象（如果找到的话）；否则为 null。</returns>
<param name="name">包含要获取的数据字段的名称的 <see cref="T:System.String"/>。 </param>
<param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags"/> 组成。-或- 如果为零，则返回 null。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
    </member>
    <member name="M:System.Type.GetFields">
<summary>返回当前 <see cref="T:System.Type"/> 的所有公共字段。</summary>
<returns>表示为当前 <see cref="T:System.Type"/> 定义的所有公共字段的 <see cref="T:System.Reflection.FieldInfo"/> 对象数组。-或- 如果没有为当前 <see cref="T:System.Type"/> 定义的公共字段，则为 <see cref="T:System.Reflection.FieldInfo"/> 类型的空数组。</returns>
    </member>
    <member name="M:System.Type.GetFields(System.Reflection.BindingFlags)">
<summary>当在派生类中重写时，使用指定的绑定约束，搜索为当前 <see cref="T:System.Type"/> 定义的字段。</summary>
<returns>表示为当前 <see cref="T:System.Type"/> 定义的匹配指定绑定约束的所有字段的 <see cref="T:System.Reflection.FieldInfo"/> 对象数组。-或- 如果没有为当前 <see cref="T:System.Type"/> 定义的字段，或者如果所定义的任何字段都与绑定约束不匹配，则为 <see cref="T:System.Reflection.FieldInfo"/> 类型的空数组。</returns>
<param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags"/> 组成。-或- 如果为零，则返回 null。 </param>
    </member>
    <member name="M:System.Type.GetGenericArguments">
<summary>返回表示泛型类型的类型实际参数或泛型类型定义的类型形式参数的 <see cref="T:System.Type"/> 对象的数组。</summary>
<returns>表示泛型类型的类型参数的 <see cref="T:System.Type"/> 对象的数组。如果当前类型不是泛型类型，则返回一个空数组。</returns>
<exception cref="T:System.NotSupportedException">基类不支持所调用的方法。派生类必须提供实现。</exception>
    </member>
    <member name="M:System.Type.GetGenericParameterConstraints">
<summary>返回表示当前泛型类型参数约束的 <see cref="T:System.Type"/> 对象的数组。 </summary>
<returns>表示当前泛型类型参数上的约束的 <see cref="T:System.Type"/> 对象的数组。</returns>
<exception cref="T:System.InvalidOperationException">当前的 <see cref="T:System.Type"/> 对象不是泛型类型参数。即，<see cref="P:System.Type.IsGenericParameter"/> 属性返回 false。</exception>
    </member>
    <member name="M:System.Type.GetGenericTypeDefinition">
<summary>返回表示可用于构造当前泛型类型的泛型类型定义的 <see cref="T:System.Type"/> 对象。</summary>
<returns>表示可用于构造当前类型的泛型类型的 <see cref="T:System.Type"/> 对象。</returns>
<exception cref="T:System.InvalidOperationException">当前对象不是泛型类型。即 <see cref="P:System.Type.IsGenericType"/> 返回 false。 </exception>
<exception cref="T:System.NotSupportedException">基类不支持所调用的方法。派生类必须提供实现。</exception>
    </member>
    <member name="M:System.Type.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>包含此实例的哈希代码的 <see cref="T:System.Int32"/>。</returns>
    </member>
    <member name="M:System.Type.GetInterface(System.String,System.Boolean)">
<summary>当在派生类中重写时，搜索指定的接口，指定是否要对接口名称执行不区分大小写的搜索。</summary>
<returns>表示具有指定名称且由当前的 <see cref="T:System.Type"/> 实现或继承的接口的 <see cref="T:System.Type"/> 对象（如果找到的话）；否则为 null。</returns>
<param name="name">包含要获取的接口名称的 <see cref="T:System.String"/>。对于泛型接口，这是重整名称。</param>
<param name="ignoreCase">如果为 true，则表示对于 <paramref name="name"/>（用来指定简单接口名称）中指定命名空间大小写必须正确的部分，忽略其大小写。-或- 如果为 false，则表示对 <paramref name="name"/> 的所有部分执行区分大小写的搜索。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
<exception cref="T:System.Reflection.AmbiguousMatchException">当前 <see cref="T:System.Type"/> 表示使用不同类型参数实现同一泛型接口的类型。 </exception>
    </member>
    <member name="M:System.Type.GetInterfaceMap(System.Type)">
<summary>返回指定接口类型的接口映射。</summary>
<returns>表示 <paramref name="interfaceType"/> 的接口映射的 <see cref="T:System.Reflection.InterfaceMapping"/> 对象。</returns>
<param name="interfaceType">要检索其映射的接口的 <see cref="T:System.Type"/>。 </param>
<exception cref="T:System.ArgumentException"><paramref name="interfaceType"/> 参数不引用接口。-或- <paramref name="interfaceType"/> 是泛型接口，当前类型是数组类型。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="interfaceType"/> 为 null。 </exception>
<exception cref="T:System.InvalidOperationException">当前的 <see cref="T:System.Type"/> 表示泛型类型参数；即 <see cref="P:System.Type.IsGenericParameter"/> 为 true。</exception>
<exception cref="T:System.NotSupportedException">基类不支持所调用的方法。派生类必须提供实现。</exception>
    </member>
    <member name="M:System.Type.GetInterfaces">
<summary>当在派生类中重写时，获取由当前 <see cref="T:System.Type"/> 实现或继承的所有接口。</summary>
<returns>表示由当前 <see cref="T:System.Type"/> 实现或继承的所有接口的 <see cref="T:System.Type"/> 对象数组。-或- 如果没有由当前 <see cref="T:System.Type"/> 实现或继承的接口，则为 <see cref="T:System.Type"/> 类型的空数组。</returns>
<exception cref="T:System.Reflection.TargetInvocationException">调用静态初始值设定项并引发异常。 </exception>
    </member>
    <member name="M:System.Type.GetMember(System.String)">
<summary>搜索具有指定名称的公共成员。</summary>
<returns>一个表示具有指定名称的公共成员的 <see cref="T:System.Reflection.MemberInfo"/> 对象数组（如果找到的话）；否则为空数组。</returns>
<param name="name">包含要获取的公共成员名称的 <see cref="T:System.String"/>。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
    </member>
    <member name="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)">
<summary>使用指定绑定约束搜索指定成员。</summary>
<returns>一个表示具有指定名称的公共成员的 <see cref="T:System.Reflection.MemberInfo"/> 对象数组（如果找到的话）；否则为空数组。</returns>
<param name="name">包含要获取的成员的名称的 <see cref="T:System.String"/>。 </param>
<param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags"/> 组成。-或- 如果为零，则返回空数组。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
    </member>
    <member name="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
<summary>使用指定绑定约束搜索指定成员类型的指定成员。</summary>
<returns>一个表示具有指定名称的公共成员的 <see cref="T:System.Reflection.MemberInfo"/> 对象数组（如果找到的话）；否则为空数组。</returns>
<param name="name">包含要获取的成员的名称的 <see cref="T:System.String"/>。 </param>
<param name="type">要搜索的 <see cref="T:System.Reflection.MemberTypes"/> 值。 </param>
<param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags"/> 组成。-或- 如果为零，则返回空数组。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
<exception cref="T:System.NotSupportedException">派生类必须提供实现。 </exception>
    </member>
    <member name="M:System.Type.GetMembers">
<summary>返回当前 <see cref="T:System.Type"/> 的所有公共成员。</summary>
<returns>表示当前 <see cref="T:System.Type"/> 的所有公共成员的 <see cref="T:System.Reflection.MemberInfo"/> 对象数组。-或- 如果当前 <see cref="T:System.Type"/> 没有公共成员，则为 <see cref="T:System.Reflection.MemberInfo"/> 类型的空数组。</returns>
    </member>
    <member name="M:System.Type.GetMembers(System.Reflection.BindingFlags)">
<summary>当在派生类中重写时，使用指定的绑定约束，搜索为当前 <see cref="T:System.Type"/> 定义的成员。</summary>
<returns>表示为当前 <see cref="T:System.Type"/> 定义的匹配指定绑定约束的所有成员的 <see cref="T:System.Reflection.MemberInfo"/> 对象数组。-或- 如果没有为当前 <see cref="T:System.Type"/> 定义的成员，或者如果所定义的任何成员都与绑定约束不匹配，则为 <see cref="T:System.Reflection.MemberInfo"/> 类型的空数组。</returns>
<param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags"/> 组成。-或- 如果为零，则返回 null。 </param>
    </member>
    <member name="M:System.Type.GetMethod(System.String)">
<summary>搜索具有指定名称的公共方法。</summary>
<returns>表示具有指定名称的公共方法的 <see cref="T:System.Reflection.MethodInfo"/> 对象（如果找到的话）；否则为 null。</returns>
<param name="name">包含要获取的公共方法名称的 <see cref="T:System.String"/>。 </param>
<exception cref="T:System.Reflection.AmbiguousMatchException">找到不止一个具有指定名称的方法。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)">
<summary>使用指定绑定约束搜索指定方法。</summary>
<returns>表示符合指定要求的方法的 <see cref="T:System.Reflection.MethodInfo"/> 对象（如果找到的话）；否则为 null。</returns>
<param name="name">包含要获取的方法名称的 <see cref="T:System.String"/>。 </param>
<param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags"/> 组成。-或- 如果为零，则返回 null。 </param>
<exception cref="T:System.Reflection.AmbiguousMatchException">找到多个有指定名称且与指定绑定约束匹配的方法。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
<summary>用指定的绑定约束和指定的调用约定，搜索参数与指定的参数类型及修饰符相匹配的指定方法。</summary>
<returns>表示符合指定要求的方法的 <see cref="T:System.Reflection.MethodInfo"/> 对象（如果找到的话）；否则为 null。</returns>
<param name="name">包含要获取的方法名称的 <see cref="T:System.String"/>。 </param>
<param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags"/> 组成。-或- 如果为零，则返回 null。 </param>
<param name="binder">一个 <see cref="T:System.Reflection.Binder"/> 对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载成员、强制参数类型和通过反射调用成员。-或- 如果为空引用（在 Visual Basic 中为 Nothing），则使用 <see cref="P:System.Type.DefaultBinder"/>。 </param>
<param name="callConvention"><see cref="T:System.Reflection.CallingConventions"/> 对象，用于指定要使用的一套规则，这些规则涉及参数的顺序和布局、返回值的传递方式、用于参数的寄存器以及堆栈的清理方式。 </param>
<param name="types">表示要获取的方法的参数个数、顺序和类型的 <see cref="T:System.Type"/> 对象的数组。-或- <see cref="T:System.Type"/> 对象的空数组（由 <see cref="F:System.Type.EmptyTypes"/> 字段提供），用于获取不带参数的方法。 </param>
<param name="modifiers"><see cref="T:System.Reflection.ParameterModifier"/> 对象数组，表示与 <paramref name="types"/> 数组中的相应元素关联的属性。仅当通过 COM 互操作进行调用时才使用，而且仅处理通过引用传递的参数。默认的联编程序不处理此参数。 </param>
<exception cref="T:System.Reflection.AmbiguousMatchException">找到多个有指定名称且与指定绑定约束匹配的方法。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。-或- <paramref name="types"/> 为 null。-或- <paramref name="types"/> 中的一个元素为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="types"/> 是多维的。-或- <paramref name="modifiers"/> 是多维的。 </exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
<summary>使用指定绑定约束，搜索其参数与指定参数类型及修饰符匹配的指定方法。</summary>
<returns>表示符合指定要求的方法的 <see cref="T:System.Reflection.MethodInfo"/> 对象（如果找到的话）；否则为 null。</returns>
<param name="name">包含要获取的方法名称的 <see cref="T:System.String"/>。 </param>
<param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags"/> 组成。-或- 如果为零，则返回 null。 </param>
<param name="binder">一个 <see cref="T:System.Reflection.Binder"/> 对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载成员、强制参数类型和通过反射调用成员。-或- 如果为空引用（在 Visual Basic 中为 Nothing），则使用 <see cref="P:System.Type.DefaultBinder"/>。 </param>
<param name="types">表示要获取的方法的参数个数、顺序和类型的 <see cref="T:System.Type"/> 对象的数组。-或- <see cref="T:System.Type"/> 对象的空数组（由 <see cref="F:System.Type.EmptyTypes"/> 字段提供），用于获取不带参数的方法。 </param>
<param name="modifiers"><see cref="T:System.Reflection.ParameterModifier"/> 对象数组，表示与 <paramref name="types"/> 数组中的相应元素关联的属性。仅当通过 COM 互操作进行调用时才使用，而且仅处理通过引用传递的参数。默认的联编程序不处理此参数。</param>
<exception cref="T:System.Reflection.AmbiguousMatchException">找到多个有指定名称且与指定绑定约束匹配的方法。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。-或- <paramref name="types"/> 为 null。-或- <paramref name="types"/> 中的一个元素为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="types"/> 是多维的。-或- <paramref name="modifiers"/> 是多维的。 </exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Type[])">
<summary>搜索其参数与指定参数类型匹配的指定公共方法。</summary>
<returns>表示其形式参数与指定的实际参数类型匹配的公共方法的 <see cref="T:System.Reflection.MethodInfo"/> 对象（如果找到的话）；否则为 null。</returns>
<param name="name">包含要获取的公共方法名称的 <see cref="T:System.String"/>。 </param>
<param name="types">表示要获取的方法的参数个数、顺序和类型的 <see cref="T:System.Type"/> 对象的数组。-或- <see cref="T:System.Type"/> 对象的空数组（由 <see cref="F:System.Type.EmptyTypes"/> 字段提供），用于获取不带参数的方法。 </param>
<exception cref="T:System.Reflection.AmbiguousMatchException">找到不止一个具有指定名称和指定参数的方法。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。-或- <paramref name="types"/> 为 null。-或- <paramref name="types"/> 中的一个元素为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="types"/> 是多维的。 </exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])">
<summary>搜索其参数与指定参数类型及修饰符匹配的指定公共方法。</summary>
<returns>表示符合指定要求的公共方法的 <see cref="T:System.Reflection.MethodInfo"/> 对象（如果找到的话）；否则为 null。</returns>
<param name="name">包含要获取的公共方法名称的 <see cref="T:System.String"/>。 </param>
<param name="types">表示要获取的方法的参数个数、顺序和类型的 <see cref="T:System.Type"/> 对象的数组。-或- <see cref="T:System.Type"/> 对象的空数组（由 <see cref="F:System.Type.EmptyTypes"/> 字段提供），用于获取不带参数的方法。 </param>
<param name="modifiers"><see cref="T:System.Reflection.ParameterModifier"/> 对象数组，表示与 <paramref name="types"/> 数组中的相应元素关联的属性。仅当通过 COM 互操作进行调用时才使用，而且仅处理通过引用传递的参数。默认的联编程序不处理此参数。  </param>
<exception cref="T:System.Reflection.AmbiguousMatchException">找到不止一个具有指定名称和指定参数的方法。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。-或- <paramref name="types"/> 为 null。-或- <paramref name="types"/> 中的一个元素为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="types"/> 是多维的。-或- <paramref name="modifiers"/> 是多维的。 </exception>
    </member>
    <member name="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
<summary>当在派生类中重写时，使用指定的绑定约束和指定的调用约定搜索其参数与指定的参数类型和修饰符匹配的指定方法。</summary>
<returns>表示符合指定要求的方法的 <see cref="T:System.Reflection.MethodInfo"/> 对象（如果找到的话）；否则为 null。</returns>
<param name="name">包含要获取的方法名称的 <see cref="T:System.String"/>。 </param>
<param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags"/> 组成。-或- 如果为零，则返回 null。 </param>
<param name="binder">一个 <see cref="T:System.Reflection.Binder"/> 对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载成员、强制参数类型和通过反射调用成员。-或- 如果为空引用（在 Visual Basic 中为 Nothing），则使用 <see cref="P:System.Type.DefaultBinder"/>。 </param>
<param name="callConvention"><see cref="T:System.Reflection.CallingConventions"/> 对象，用于指定要使用的一套规则，这些规则涉及参数的顺序和布局、返回值的传递方式、用于参数的寄存器以及哪个进程清理堆栈。 </param>
<param name="types">一个 <see cref="T:System.Type"/> 对象数组，表示方法要获取的参数的个数、顺序和类型。-或- <see cref="T:System.Type"/> 类型的空数组（即 Type[] types = new Type[0]），用于获取不带参数的方法。-或- 空引用（在 Visual Basic 中为 Nothing）。如果 <paramref name="types"/> 为 null，则参数不匹配。 </param>
<param name="modifiers"><see cref="T:System.Reflection.ParameterModifier"/> 对象数组，表示与 <paramref name="types"/> 数组中的相应元素关联的属性。默认的联编程序不处理此参数。 </param>
<exception cref="T:System.Reflection.AmbiguousMatchException">找到多个有指定名称且与指定绑定约束匹配的方法。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="types"/> 是多维的。-或- <paramref name="modifiers"/> 是多维的。-或- <paramref name="types"/> 和 <paramref name="modifiers"/> 的长度不同。 </exception>
<exception cref="T:System.NotSupportedException">当前类型是 <see cref="T:System.Reflection.Emit.TypeBuilder"/> 或 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder"/>。</exception>
    </member>
    <member name="M:System.Type.GetMethods">
<summary>返回当前 <see cref="T:System.Type"/> 的所有公共方法。</summary>
<returns>表示为当前 <see cref="T:System.Type"/> 定义的所有公共方法的 <see cref="T:System.Reflection.MethodInfo"/> 对象数组。-或- 如果没有为当前 <see cref="T:System.Type"/> 定义的公共方法，则为 <see cref="T:System.Reflection.MethodInfo"/> 类型的空数组。</returns>
    </member>
    <member name="M:System.Type.GetMethods(System.Reflection.BindingFlags)">
<summary>当在派生类中重写时，使用指定的绑定约束，搜索为当前 <see cref="T:System.Type"/> 定义的方法。</summary>
<returns>表示为当前 <see cref="T:System.Type"/> 定义的匹配指定绑定约束的所有方法的 <see cref="T:System.Reflection.MethodInfo"/> 对象数组。-或- 如果没有为当前 <see cref="T:System.Type"/> 定义的方法，或者如果所定义的任何方法都与绑定约束不匹配，则为 <see cref="T:System.Reflection.MethodInfo"/> 类型的空数组。</returns>
<param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags"/> 组成。-或- 如果为零，则返回 null。 </param>
    </member>
    <member name="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)">
<summary>当在派生类中重写时，使用指定绑定约束搜索指定嵌套类型。</summary>
<returns>表示符合指定要求的嵌套类型的 <see cref="T:System.Type"/> 对象（如果找到的话）；否则为 null。</returns>
<param name="name">包含要获取的嵌套类型的名称的字符串。 </param>
<param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags"/> 组成。-或- 如果为零，则返回 null。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
    </member>
    <member name="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)">
<summary>当在派生类中重写时，使用指定的绑定约束，搜索嵌套在当前 <see cref="T:System.Type"/> 中的类型。</summary>
<returns><see cref="T:System.Type"/> 对象数组，这些对象表示嵌套在当前 <see cref="T:System.Type"/> 中的所有与指定的绑定约束匹配的类型（搜索是非递归的）；如果没有找到与绑定约束匹配的嵌套类型，则为 <see cref="T:System.Type"/> 类型的空数组。</returns>
<param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags"/> 组成。-或- 如果为零，则返回 null。 </param>
    </member>
    <member name="M:System.Type.GetProperties">
<summary>返回当前 <see cref="T:System.Type"/> 的所有公共属性。</summary>
<returns>表示当前 <see cref="T:System.Type"/> 的所有公共属性的 <see cref="T:System.Reflection.PropertyInfo"/> 对象数组。-或- 如果当前 <see cref="T:System.Type"/> 没有公共属性，则为 <see cref="T:System.Reflection.PropertyInfo"/> 类型的空数组。</returns>
    </member>
    <member name="M:System.Type.GetProperties(System.Reflection.BindingFlags)">
<summary>当在派生类中重写时，使用指定的绑定约束，搜索当前 <see cref="T:System.Type"/> 的属性。</summary>
<returns>表示当前 <see cref="T:System.Type"/> 的匹配指定绑定约束的所有属性的 <see cref="T:System.Reflection.PropertyInfo"/> 对象数组。-或- 如果当前 <see cref="T:System.Type"/> 没有属性，或者如果没有一个属性匹配绑定约束，则为 <see cref="T:System.Reflection.PropertyInfo"/> 类型的空数组。</returns>
<param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags"/> 组成。-或- 如果为零，则返回 null。 </param>
    </member>
    <member name="M:System.Type.GetProperty(System.String)">
<summary>搜索具有指定名称的公共属性。</summary>
<returns>表示具有指定名称的公共属性的 <see cref="T:System.Reflection.PropertyInfo"/> 对象（如果找到的话）；否则为 null。</returns>
<param name="name">包含要获取的公共属性名称的 <see cref="T:System.String"/>。 </param>
<exception cref="T:System.Reflection.AmbiguousMatchException">找到不止一个具有指定名称的属性。请参阅“备注”。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)">
<summary>使用指定的绑定约束搜索指定属性。</summary>
<returns>表示符合指定要求的属性的 <see cref="T:System.Reflection.PropertyInfo"/> 对象（如果找到的话）；否则为 null。</returns>
<param name="name">包含要获取的属性名的 <see cref="T:System.String"/>。 </param>
<param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags"/> 组成。-或- 如果为零，则返回 null。 </param>
<exception cref="T:System.Reflection.AmbiguousMatchException">找到多个有指定名称且与指定绑定约束匹配的属性。请参阅“备注”。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
<summary>使用指定的绑定约束，搜索参数与指定的参数类型及修饰符匹配的指定属性。</summary>
<returns>表示符合指定要求的属性的 <see cref="T:System.Reflection.PropertyInfo"/> 对象（如果找到的话）；否则为 null。</returns>
<param name="name">包含要获取的属性名的 <see cref="T:System.String"/>。 </param>
<param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags"/> 组成。-或- 如果为零，则返回 null。 </param>
<param name="binder">一个 <see cref="T:System.Reflection.Binder"/> 对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载成员、强制参数类型和通过反射调用成员。-或- 如果为空引用（在 Visual Basic 中为 Nothing），则使用 <see cref="P:System.Type.DefaultBinder"/>。 </param>
<param name="returnType">属性的返回类型。 </param>
<param name="types">一个 <see cref="T:System.Type"/> 对象数组，表示索引属性要获取的参数的个数、顺序和类型。-或- <see cref="T:System.Type"/> 类型的空数组（即 Type[] types = new Type[0]），用于获取不进行索引的属性。 </param>
<param name="modifiers"><see cref="T:System.Reflection.ParameterModifier"/> 对象数组，表示与 <paramref name="types"/> 数组中的相应元素关联的属性。默认的联编程序不处理此参数。 </param>
<exception cref="T:System.Reflection.AmbiguousMatchException">找到多个有指定名称且与指定绑定约束匹配的属性。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。-或- <paramref name="types"/> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="types"/> 是多维的。-或- <paramref name="modifiers"/> 是多维的。-或- <paramref name="types"/> 和 <paramref name="modifiers"/> 的长度不同。 </exception>
<exception cref="T:System.NullReferenceException"><paramref name="types"/> 的一个元素为 null。</exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type)">
<summary>搜索具有指定名称和返回类型的公共属性。</summary>
<returns>表示具有指定名称的公共属性的 <see cref="T:System.Reflection.PropertyInfo"/> 对象（如果找到的话）；否则为 null。</returns>
<param name="name">包含要获取的公共属性名称的 <see cref="T:System.String"/>。 </param>
<param name="returnType">属性的返回类型。 </param>
<exception cref="T:System.Reflection.AmbiguousMatchException">找到不止一个具有指定名称的属性。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null 或 <paramref name="returnType"/> 为 null。 </exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type,System.Type[])">
<summary>搜索其参数与指定参数类型匹配的指定公共属性。</summary>
<returns>表示其形式参数与指定的实际参数类型匹配的公共属性的 <see cref="T:System.Reflection.PropertyInfo"/> 对象（如果找到的话）；否则为 null。</returns>
<param name="name">包含要获取的公共属性名称的 <see cref="T:System.String"/>。 </param>
<param name="returnType">属性的返回类型。 </param>
<param name="types">一个 <see cref="T:System.Type"/> 对象数组，表示索引属性要获取的参数的个数、顺序和类型。-或- <see cref="T:System.Type"/> 类型的空数组（即 Type[] types = new Type[0]），用于获取不进行索引的属性。 </param>
<exception cref="T:System.Reflection.AmbiguousMatchException">找到不止一个具有指定名称并与指定参数类型匹配的属性。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。-或- <paramref name="types"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="types"/> 是多维的。 </exception>
<exception cref="T:System.NullReferenceException"><paramref name="types"/> 的一个元素为 null。</exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
<summary>搜索其参数与指定参数类型及修饰符匹配的指定公共属性。</summary>
<returns>表示符合指定要求的公共属性的 <see cref="T:System.Reflection.PropertyInfo"/> 对象（如果找到的话）；否则为 null。</returns>
<param name="name">包含要获取的公共属性名称的 <see cref="T:System.String"/>。 </param>
<param name="returnType">属性的返回类型。 </param>
<param name="types">一个 <see cref="T:System.Type"/> 对象数组，表示索引属性要获取的参数的个数、顺序和类型。-或- <see cref="T:System.Type"/> 类型的空数组（即 Type[] types = new Type[0]），用于获取不进行索引的属性。 </param>
<param name="modifiers"><see cref="T:System.Reflection.ParameterModifier"/> 对象数组，表示与 <paramref name="types"/> 数组中的相应元素关联的属性。默认的联编程序不处理此参数。 </param>
<exception cref="T:System.Reflection.AmbiguousMatchException">找到不止一个具有指定名称并与指定参数类型及修饰符匹配的属性。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。-或- <paramref name="types"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="types"/> 是多维的。-或- <paramref name="modifiers"/> 是多维的。-或- <paramref name="types"/> 和 <paramref name="modifiers"/> 的长度不同。 </exception>
<exception cref="T:System.NullReferenceException"><paramref name="types"/> 的一个元素为 null。</exception>
    </member>
    <member name="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
<summary>当在派生类中重写时，使用指定的绑定约束搜索其参数与指定的参数类型和修饰符匹配的指定属性。</summary>
<returns>表示符合指定要求的属性的 <see cref="T:System.Reflection.PropertyInfo"/> 对象（如果找到的话）；否则为 null。</returns>
<param name="name">包含要获取的属性名的 <see cref="T:System.String"/>。 </param>
<param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags"/> 组成。-或- 如果为零，则返回 null。 </param>
<param name="binder">一个 <see cref="T:System.Reflection.Binder"/> 对象，该对象定义一组属性并启用绑定，而绑定可能涉及到选择重载成员、强制参数类型和通过反射调用成员。-或- 如果为空引用（在 Visual Basic 中为 Nothing），则使用 <see cref="P:System.Type.DefaultBinder"/>。 </param>
<param name="returnType">属性的返回类型。 </param>
<param name="types">一个 <see cref="T:System.Type"/> 对象数组，表示索引属性要获取的参数的个数、顺序和类型。-或- <see cref="T:System.Type"/> 类型的空数组（即 Type[] types = new Type[0]），用于获取不进行索引的属性。 </param>
<param name="modifiers"><see cref="T:System.Reflection.ParameterModifier"/> 对象数组，表示与 <paramref name="types"/> 数组中的相应元素关联的属性。默认的联编程序不处理此参数。 </param>
<exception cref="T:System.Reflection.AmbiguousMatchException">找到多个有指定名称且与指定绑定约束匹配的属性。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。-或- <paramref name="types"/> 为 null。-或- <paramref name="types"/> 中的一个元素为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="types"/> 是多维的。-或- <paramref name="modifiers"/> 是多维的。-或- <paramref name="types"/> 和 <paramref name="modifiers"/> 的长度不同。 </exception>
<exception cref="T:System.NotSupportedException">当前类型是 <see cref="T:System.Reflection.Emit.TypeBuilder"/>、<see cref="T:System.Reflection.Emit.EnumBuilder"/> 或 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder"/>。</exception>
    </member>
    <member name="M:System.Type.GetType">
<summary>获取当前 <see cref="T:System.Type"/>。</summary>
<returns>当前 <see cref="T:System.Type"/>。</returns>
<exception cref="T:System.Reflection.TargetInvocationException">调用类初始值设定项并引发异常。 </exception>
    </member>
    <member name="M:System.Type.GetType(System.String)">
<summary>获取具有指定名称的 <see cref="T:System.Type"/>，执行区分大小写的搜索。</summary>
<returns>具有指定名称的 <see cref="T:System.Type"/>（如果找到的话）；否则为 null。</returns>
<param name="typeName">要获取的类型的程序集限定名称。请参阅 <see cref="P:System.Type.AssemblyQualifiedName"/>。如果该类型位于当前正在执行的程序集中或者 Mscorlib.dll 中，则提供由命名空间限定的类型名称就足够了。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="typeName"/> 为 null。 </exception>
<exception cref="T:System.Reflection.TargetInvocationException">调用类初始值设定项并引发异常。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="typeName"/> 表示具有指针类型、ByRef 类型或 <see cref="T:System.Void"/> 作为其类型参数之一的泛型类型。-或-<paramref name="typeName"/> 表示具有不正确数量的类型参数的泛型类型。-或- <paramref name="typeName"/> 表示泛型类型，其类型参数之一不满足对应类型参数的约束</exception>
      <exception cref="T:System.TypeLoadException">
<paramref name="typeName"/> 表示 <see cref="T:System.TypedReference"/> 的数组。 </exception>
<exception cref="T:System.IO.FileNotFoundException">未找到该程序集或它的某个依赖项。 </exception>
<exception cref="T:System.IO.FileLoadException">找到了该程序集或它的某个依赖项，但是无法加载它们。 </exception>
<exception cref="T:System.BadImageFormatException">该程序集或它的某个依赖项无效。-或- 使用 .NET Framework 的更高版本对该程序集进行了编译。</exception>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Boolean)">
<summary>获取具有指定名称的 <see cref="T:System.Type"/>，同时执行区分大小写的搜索，并指定是否要在没有找到该类型时引发异常。</summary>
<returns>具有指定名称的类型。如果找不到该类型，则 <paramref name="throwOnError"/> 参数指定是返回 null 还是引发异常。在某些情况下，将引发异常，而不考虑 <paramref name="throwOnError"/> 的值。请参阅“异常”部分。 </returns>
<param name="typeName">要获取的类型的程序集限定名称。请参阅 <see cref="P:System.Type.AssemblyQualifiedName"/>。如果该类型位于当前正在执行的程序集中或者 Mscorlib.dll 中，则提供由命名空间限定的类型名称就足够了。</param>
<param name="throwOnError">如果为 true，则在找不到该类型时引发异常；如果为 false，则返回 null。指定 false 还会取消某些其他异常条件，但并不取消所有条件。请参阅“异常”部分。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="typeName"/> 为 null。 </exception>
<exception cref="T:System.Reflection.TargetInvocationException">调用类初始值设定项并引发异常。 </exception>
      <exception cref="T:System.TypeLoadException">
<paramref name="throwOnError"/> 为 true，未找到该类型。-或- <paramref name="throwOnError"/> 为 true 并且 <paramref name="typeName"/> 包含无效的字符，如内嵌选项卡。-或- <paramref name="throwOnError"/> 为 true 并且 <paramref name="typeName"/> 为空字符串。-或- <paramref name="throwOnError"/> 为 true 并且 <paramref name="typeName"/> 表示具有无效大小的数组类型。-或- <paramref name="typeName"/> 表示 <see cref="T:System.TypedReference"/> 的数组。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="throwOnError"/> 为 true 且 <paramref name="typeName"/> 包含无效的语法。例如，“MyType[,*,]”。-或- <paramref name="typeName"/> 表示具有指针类型、ByRef 类型或 <see cref="T:System.Void"/> 作为其类型参数之一的泛型类型。-或- <paramref name="typeName"/> 表示具有不正确数量的类型参数的泛型类型。-或- <paramref name="typeName"/> 表示泛型类型，其类型参数之一不满足对应类型参数的约束。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
<paramref name="throwOnError"/> 为 true，并且未找到该程序集或其依赖项之一。</exception>
<exception cref="T:System.IO.FileLoadException">找到了该程序集或它的某个依赖项，但是无法加载它们。 </exception>
<exception cref="T:System.BadImageFormatException">该程序集或它的某个依赖项无效。-或- 使用 .NET Framework 的更高版本对该程序集进行了编译。</exception>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Boolean,System.Boolean)">
<summary>获取具有指定名称的 <see cref="T:System.Type"/>，指定是否执行区分大小写的搜索，以及在找不到类型时是否引发异常。</summary>
<returns>具有指定名称的类型。如果找不到该类型，则 <paramref name="throwOnError"/> 参数指定是返回 null 还是引发异常。在某些情况下，将引发异常，而不考虑 <paramref name="throwOnError"/> 的值。请参阅“异常”部分。 </returns>
<param name="typeName">要获取的类型的程序集限定名称。请参阅 <see cref="P:System.Type.AssemblyQualifiedName"/>。如果该类型位于当前正在执行的程序集中或者 Mscorlib.dll 中，则提供由命名空间限定的类型名称就足够了。</param>
<param name="throwOnError">如果为 true，则在找不到该类型时引发异常；如果为 false，则返回 null。指定 false 还会取消某些其他异常条件，但并不取消所有条件。请参阅“异常”部分。</param>
<param name="ignoreCase">如果为 true，则表示对 <paramref name="typeName"/> 执行不区分大小写的搜索；如果为 false，则表示对 <paramref name="typeName"/> 执行区分大小写的搜索。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="typeName"/> 为 null。 </exception>
<exception cref="T:System.Reflection.TargetInvocationException">调用类初始值设定项并引发异常。 </exception>
      <exception cref="T:System.TypeLoadException">
<paramref name="throwOnError"/> 为 true，未找到该类型。-或- <paramref name="throwOnError"/> 为 true 并且 <paramref name="typeName"/> 包含无效的字符，如内嵌选项卡。-或- <paramref name="throwOnError"/> 为 true 并且 <paramref name="typeName"/> 为空字符串。-或- <paramref name="throwOnError"/> 为 true 并且 <paramref name="typeName"/> 表示具有无效大小的数组类型。-或- <paramref name="typeName"/> 表示 <see cref="T:System.TypedReference"/> 的数组。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="throwOnError"/> 为 true 且 <paramref name="typeName"/> 包含无效的语法。例如，“MyType[,*,]”。-或- <paramref name="typeName"/> 表示具有指针类型、ByRef 类型或 <see cref="T:System.Void"/> 作为其类型参数之一的泛型类型。-或- <paramref name="typeName"/> 表示具有不正确数量的类型参数的泛型类型。-或- <paramref name="typeName"/> 表示泛型类型，其类型参数之一不满足对应类型参数的约束。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
<paramref name="throwOnError"/> 为 true，并且未找到该程序集或其依赖项之一。 </exception>
<exception cref="T:System.IO.FileLoadException">找到了该程序集或它的某个依赖项，但是无法加载它们。 </exception>
<exception cref="T:System.BadImageFormatException">该程序集或它的某个依赖项无效。-或- 使用 .NET Framework 的更高版本对该程序集进行了编译。</exception>
    </member>
    <member name="M:System.Type.GetTypeCode(System.Type)">
<summary>获取指定 <see cref="T:System.Type"/> 的基础类型代码。</summary>
<returns>基础类型的 <see cref="T:System.TypeCode"/> 值。</returns>
<param name="type">要获取其基础类型代码的 <see cref="T:System.Type"/>。 </param>
    </member>
    <member name="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)">
<summary>获取由指定类型句柄引用的类型。</summary>
<returns>指定的 <see cref="T:System.RuntimeTypeHandle"/> 所引用的类型；如果句柄的值为 null，则为 null。</returns>
<param name="handle">引用类型的 <see cref="T:System.RuntimeTypeHandle"/> 对象。 </param>
<exception cref="T:System.Reflection.TargetInvocationException">调用类初始值设定项并引发异常。 </exception>
    </member>
    <member name="M:System.Type.GetTypeHandle(System.Object)">
<summary>获取指定对象的 <see cref="T:System.Type"/> 的句柄。</summary>
<returns>指定 <see cref="T:System.Object"/> 的 <see cref="T:System.Type"/> 的句柄。</returns>
<param name="o">要获取 Type 句柄的 <see cref="T:System.Object"/>。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="o"/> 为 null。</exception>
    </member>
    <member name="P:System.Type.GUID">
<summary>获取与 <see cref="T:System.Type"/> 关联的 GUID。</summary>
<returns>与 <see cref="T:System.Type"/> 关联的 GUID。</returns>
    </member>
    <member name="P:System.Type.HasElementType">
<summary>获取一个值，该值指示当前 <see cref="T:System.Type"/> 是否包含另一类型或对其引用，即当前 <see cref="T:System.Type"/> 是否为数组、指针或通过引用传递。</summary>
<returns>如果 <see cref="T:System.Type"/> 为数组、指针或通过引用传递，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Type.HasElementTypeImpl">
<summary>当在派生类中重写时，实现 <see cref="P:System.Type.HasElementType"/> 属性，确定当前 <see cref="T:System.Type"/> 是否包含另一类型或对其引用；即，当前 <see cref="T:System.Type"/> 是否为数组、指针或通过引用传递。</summary>
<returns>如果 <see cref="T:System.Type"/> 为数组、指针或通过引用传递，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])">
<summary>使用指定的绑定约束并匹配指定的参数列表，调用指定成员。</summary>
<returns>表示被调用成员的返回值的 <see cref="T:System.Object"/>。</returns>
<param name="name"><see cref="T:System.String"/>，它包含要调用的构造函数、方法、属性或字段成员的名称。-或- 空字符串 ("")，表示调用默认成员。 </param>
<param name="invokeAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags"/> 组成。访问可以是 BindingFlags 之一，如 Public、NonPublic、Private、InvokeMethod 和 GetField 等。查找类型无需指定。如果省略查找类型，则将使用 BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static。 </param>
<param name="binder">一个 <see cref="T:System.Reflection.Binder"/> 对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载成员、强制参数类型和通过反射调用成员。-或- 如果为空引用（在 Visual Basic 中为 Nothing），则使用 <see cref="P:System.Type.DefaultBinder"/>。请注意，为了成功地使用变量参数来调用方法重载，可能必须显式定义 <see cref="T:System.Reflection.Binder"/> 对象。</param>
<param name="target">要在其上调用指定成员的 <see cref="T:System.Object"/>。 </param>
<param name="args">包含传递给要调用的成员的参数的数组。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="invokeAttr"/> 包含 CreateInstance，并且 <paramref name="typeName"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="args"/> 是多维的。-或- <paramref name="invokeAttr"/> 不是有效的 <see cref="T:System.Reflection.BindingFlags"/> 属性。-或- <paramref name="invokeAttr"/> 不包含下列绑定标志之一：InvokeMethod、CreateInstance、GetField、SetField、GetProperty 或 SetProperty。-或- <paramref name="invokeAttr"/> 包含组合有 InvokeMethod、GetField、SetField、GetProperty 或 SetProperty 的 CreateInstance。-或- <paramref name="invokeAttr"/> 包含 GetField 和 SetField。-或- <paramref name="invokeAttr"/> 包含 GetProperty 和 SetProperty。-或- <paramref name="invokeAttr"/> 包含组合有 SetField 或 SetProperty 的 InvokeMethod。-或- <paramref name="invokeAttr"/> 包含 SetField 并且 <paramref name="args"/> 具有多个元素。-或- 对 COM 对象调用此方法，且未传入下列绑定标志之一：BindingFlags.InvokeMethod、BindingFlags.GetProperty、BindingFlags.SetProperty、BindingFlags.PutDispProperty 或 BindingFlags.PutRefDispProperty。-或- 某个命名参数数组包含一个为 null 的字符串。 </exception>
<exception cref="T:System.MethodAccessException">指定的成员是类初始值设定项。 </exception>
<exception cref="T:System.MissingFieldException">找不到该字段或属性。 </exception>
<exception cref="T:System.MissingMethodException">找不到此方法。-或- 当前 <see cref="T:System.Type"/> 对象表示包含开放类型参数的类型，即 <see cref="P:System.Type.ContainsGenericParameters"/> 返回 true。 </exception>
<exception cref="T:System.Reflection.TargetException">在 <paramref name="target"/> 上无法调用指定的成员。 </exception>
<exception cref="T:System.Reflection.AmbiguousMatchException">多个方法匹配绑定条件。 </exception>
<exception cref="T:System.NotSupportedException">.NET Compact Framework 当前不支持此方法。</exception>
<exception cref="T:System.InvalidOperationException">由 <paramref name="name"/> 表示的方法具有一个或多个未指定的泛型类型参数。即，该方法的 <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters"/> 属性返回 true。</exception>
    </member>
    <member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
<summary>当在派生类中重写时，使用指定的绑定约束并匹配指定的参数列表、修饰符和区域性，调用指定成员。</summary>
<returns>表示被调用成员的返回值的 <see cref="T:System.Object"/>。</returns>
<param name="name"><see cref="T:System.String"/>，它包含要调用的构造函数、方法、属性或字段成员的名称。-或- 空字符串 ("")，表示调用默认成员。-或- 对于 IDispatch 成员，则为一个表示 DispID 的字符串，例如，“[DispID=3]”。</param>
<param name="invokeAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags"/> 组成。访问可以是 BindingFlags 之一，如 Public、NonPublic、Private、InvokeMethod 和 GetField 等。查找类型无需指定。如果省略查找类型，则将使用 BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static。 </param>
<param name="binder">一个 <see cref="T:System.Reflection.Binder"/> 对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载成员、强制参数类型和通过反射调用成员。-或- 如果为空引用（在 Visual Basic 中为 Nothing），则使用 <see cref="P:System.Type.DefaultBinder"/>。请注意，为了成功地使用变量参数来调用方法重载，可能必须显式定义 <see cref="T:System.Reflection.Binder"/> 对象。</param>
<param name="target">要在其上调用指定成员的 <see cref="T:System.Object"/>。 </param>
<param name="args">包含传递给要调用的成员的参数的数组。 </param>
<param name="modifiers"><see cref="T:System.Reflection.ParameterModifier"/> 对象数组，表示与 <paramref name="args"/> 数组中的相应元素关联的属性。参数的关联的属性存储在成员的签名中。只有在调用 COM 组件时，默认联编程序才处理此参数。 </param>
<param name="culture">表示要使用的全球化区域设置的 <see cref="T:System.Globalization.CultureInfo"/> 对象，它对区域设置特定的转换可能是必需的，比如将数值 String 转换为 Double。-或- 如果为空引用（在 Visual Basic 中为 Nothing），则使用当前线程的 <see cref="T:System.Globalization.CultureInfo"/>。 </param>
<param name="namedParameters">包含参数名称的数组，<paramref name="args"/> 数组中的值被传递给这些参数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="invokeAttr"/> 包含 CreateInstance，并且 <paramref name="typeName"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="args"/> 是多维的。-或- <paramref name="modifiers"/> 是多维的。-或- <paramref name="args"/> 和 <paramref name="modifiers"/> 的长度不同。-或- <paramref name="invokeAttr"/> 不是有效的 <see cref="T:System.Reflection.BindingFlags"/> 属性。-或- <paramref name="invokeAttr"/> 不包含下列绑定标志之一：InvokeMethod、CreateInstance、GetField、SetField、GetProperty 或 SetProperty。-或- <paramref name="invokeAttr"/> 包含组合有 InvokeMethod、GetField、SetField、GetProperty 或 SetProperty 的 CreateInstance。-或- <paramref name="invokeAttr"/> 包含 GetField 和 SetField。-或- <paramref name="invokeAttr"/> 包含 GetProperty 和 SetProperty。-或- <paramref name="invokeAttr"/> 包含组合有 SetField 或 SetProperty 的 InvokeMethod。-或- <paramref name="invokeAttr"/> 包含 SetField 并且 <paramref name="args"/> 具有多个元素。-或- 命名形式参数数组大于此实际参数数组。-或- 对 COM 对象调用此方法，且未传入下列绑定标志之一：BindingFlags.InvokeMethod、BindingFlags.GetProperty、BindingFlags.SetProperty、BindingFlags.PutDispProperty 或 BindingFlags.PutRefDispProperty。-或- 某个命名参数数组包含一个为 null 的字符串。 </exception>
<exception cref="T:System.MethodAccessException">指定的成员是类初始值设定项。 </exception>
<exception cref="T:System.MissingFieldException">找不到该字段或属性。 </exception>
<exception cref="T:System.MissingMethodException">找不到此方法。-或- 当前 <see cref="T:System.Type"/> 对象表示包含开放类型参数的类型，即 <see cref="P:System.Type.ContainsGenericParameters"/> 返回 true。 </exception>
<exception cref="T:System.Reflection.TargetException">在 <paramref name="target"/> 上无法调用指定的成员。 </exception>
<exception cref="T:System.Reflection.AmbiguousMatchException">多个方法匹配绑定条件。 </exception>
<exception cref="T:System.InvalidOperationException">由 <paramref name="name"/> 表示的方法具有一个或多个未指定的泛型类型参数。即，该方法的 <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters"/> 属性返回 true。</exception>
    </member>
    <member name="P:System.Type.IsAbstract">
<summary>获取一个值，该值指示 <see cref="T:System.Type"/> 是否为抽象的并且必须被重写。</summary>
<returns>如果 <see cref="T:System.Type"/> 为抽象的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsAnsiClass">
<summary>获取一个值，该值指示是否为 <see cref="T:System.Type"/> 选择了字符串格式属性 AnsiClass。</summary>
<returns>如果为 <see cref="T:System.Type"/> 选择了字符串格式属性 AnsiClass，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsArray">
<summary>获取一个值，该值指示 <see cref="T:System.Type"/> 是否为数组。</summary>
<returns>如果 <see cref="T:System.Type"/> 为数组，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Type.IsArrayImpl">
<summary>当在派生类中重写时，实现 <see cref="P:System.Type.IsArray"/> 属性并确定 <see cref="T:System.Type"/> 是否为数组。</summary>
<returns>如果 <see cref="T:System.Type"/> 为数组，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Type.IsAssignableFrom(System.Type)">
<summary>确定当前的 <see cref="T:System.Type"/> 的实例是否可以从指定 Type 的实例分配。</summary>
<returns>如果 <paramref name="c"/> 和当前 Type 表示同一类型，当前 Type 在 <paramref name="c"/> 的继承层次结构中，当前 Type 是 <paramref name="c"/> 实现的接口，或者 <paramref name="c"/> 是泛型类型参数且当前 Type 表示 <paramref name="c"/> 的约束之一，则为 true。如果上述情况都不符合，或者 <paramref name="c"/> 为 null，则为 false。</returns>
<param name="c">要与当前 Type 进行比较的 Type。 </param>
    </member>
    <member name="P:System.Type.IsAutoClass">
<summary>获取一个值，该值指示是否为 <see cref="T:System.Type"/> 选择了字符串格式属性 AutoClass。</summary>
<returns>如果为 <see cref="T:System.Type"/> 选择了字符串格式属性 AutoClass，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsAutoLayout">
<summary>获取一个指示是否为 <see cref="T:System.Type"/> 选择了类布局属性 AutoLayout 的值。</summary>
<returns>如果为 <see cref="T:System.Type"/> 选择了类布局属性 AutoLayout，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsByRef">
<summary>获取一个值，该值指示 <see cref="T:System.Type"/> 是否通过引用传递。</summary>
<returns>如果 <see cref="T:System.Type"/> 通过引用传递，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Type.IsByRefImpl">
<summary>当在派生类中重写时，实现 <see cref="P:System.Type.IsByRef"/> 属性并确定 <see cref="T:System.Type"/> 是否通过引用传递。</summary>
<returns>如果 <see cref="T:System.Type"/> 通过引用传递，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsClass">
<summary>获取一个值，该值指示 <see cref="T:System.Type"/> 是否为一个类；即，不是值类型或接口。</summary>
<returns>如果 <see cref="T:System.Type"/> 是一个类，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsCOMObject">
<summary>获取一个值，该值指示 <see cref="T:System.Type"/> 是否为 COM 对象。</summary>
<returns>如果 <see cref="T:System.Type"/> 是一个 COM 对象，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Type.IsCOMObjectImpl">
<summary>当在派生类中重写时，实现 <see cref="P:System.Type.IsCOMObject"/> 属性并确定 <see cref="T:System.Type"/> 是否为 COM 对象。</summary>
<returns>如果 <see cref="T:System.Type"/> 是一个 COM 对象，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsEnum">
<summary>获取一个值，该值指示当前的 <see cref="T:System.Type"/> 是否表示枚举。</summary>
<returns>如果当前的 <see cref="T:System.Type"/> 表示枚举，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsGenericParameter">
<summary>获取一个值，该值指示当前 <see cref="T:System.Type"/> 是否表示泛型类型或方法的定义中的类型参数。</summary>
<returns>如果 <see cref="T:System.Type"/> 对象表示泛型类型定义或泛型方法定义的类型参数，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsGenericType">
<summary>获取一个值，该值指示当前类型是否为泛型类型。</summary>
<returns>如果当前类型是泛型类型，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsGenericTypeDefinition">
<summary>获取一个值，该值指示当前 <see cref="T:System.Type"/> 是否表示可以用来构造其他泛型类型的泛型类型定义。</summary>
<returns>如果此 <see cref="T:System.Type"/> 对象表示泛型类型定义，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsImport">
<summary>获取一个值，该值指示 <see cref="T:System.Type"/> 是否应用了 <see cref="T:System.Runtime.InteropServices.ComImportAttribute"/> 属性，如果应用了该属性，则表示它是从 COM 类型库导入的。</summary>
<returns>如果 <see cref="T:System.Type"/> 具有 <see cref="T:System.Runtime.InteropServices.ComImportAttribute"/>，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Type.IsInstanceOfType(System.Object)">
<summary>确定指定的对象是否为当前 <see cref="T:System.Type"/> 的实例。</summary>
<returns>如果当前 Type 在 <paramref name="o"/> 所表示对象的继承层次结构中，或者如果当前 Type 是 <paramref name="o"/> 支持的接口，则为 true。如果不属于这其中任一种情况，或者如果 <paramref name="o"/> 为 null，或者如果当前 Type 为开放泛型类型（即 <see cref="P:System.Type.ContainsGenericParameters"/> 返回 true），则为 false。</returns>
<param name="o">要与当前 Type 进行比较的对象。 </param>
    </member>
    <member name="P:System.Type.IsInterface">
<summary>获取一个值，该值指示 <see cref="T:System.Type"/> 是否为一个接口；即，不是值类或值类型。</summary>
<returns>如果 <see cref="T:System.Type"/> 为接口，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsNested">
<summary>获取一个值，该值指示当前 <see cref="T:System.Type"/> 对象是否表示其定义嵌套在另一个类型的定义之内的类型。</summary>
<returns>如果 <see cref="T:System.Type"/> 嵌套在另一个类型内，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsNestedAssembly">
<summary>获取一个值，该值指示 <see cref="T:System.Type"/> 是否为嵌套的并且只能在它自己的程序集内可见。</summary>
<returns>如果 <see cref="T:System.Type"/> 是嵌套的并且仅在它自己的程序集中可见，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsNestedFamANDAssem">
<summary>获取一个值，该值指示 <see cref="T:System.Type"/> 是否为嵌套的并且只对同时属于自己家族和自己程序集的类可见。</summary>
<returns>如果 <see cref="T:System.Type"/> 是嵌套的并且只对同时属于它自己的家族和它自己的程序集的类可见，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsNestedFamily">
<summary>获取一个值，该值指示 <see cref="T:System.Type"/> 是否为嵌套的并且只能在它自己的家族中可见。</summary>
<returns>如果 <see cref="T:System.Type"/> 是嵌套的并且仅在它自己的家族中可见，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsNestedFamORAssem">
<summary>获取一个值，该值指示 <see cref="T:System.Type"/> 是否为嵌套的并且只对属于它自己的家族或它自己的程序集的类可见。</summary>
<returns>如果 <see cref="T:System.Type"/> 是嵌套的并且只对属于它自己的家族或属于它自己的程序集的类可见，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsNestedPrivate">
<summary>获取一个值，该值指示 <see cref="T:System.Type"/> 是否为嵌套的并声明为私有。</summary>
<returns>如果 <see cref="T:System.Type"/> 是嵌套的并声明为私有的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsNestedPublic">
<summary>获取一个值，该值指示类是否为嵌套的并且声明为公共的。</summary>
<returns>如果该类是嵌套的并声明为公有的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsNotPublic">
<summary>获取一个值，该值指示 <see cref="T:System.Type"/> 是否声明为公共类型。</summary>
<returns>如果 <see cref="T:System.Type"/> 未声明为公共类型且不是嵌套类型，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsPointer">
<summary>获取一个值，该值指示 <see cref="T:System.Type"/> 是否为指针。</summary>
<returns>如果 <see cref="T:System.Type"/> 是指针，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Type.IsPointerImpl">
<summary>当在派生类中重写时，实现 <see cref="P:System.Type.IsPointer"/> 属性并确定 <see cref="T:System.Type"/> 是否为指针。</summary>
<returns>如果 <see cref="T:System.Type"/> 是指针，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsPrimitive">
<summary>获取一个值，该值指示 <see cref="T:System.Type"/> 是否为基元类型之一。</summary>
<returns>如果 <see cref="T:System.Type"/> 为基元类型之一，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Type.IsPrimitiveImpl">
<summary>当在派生类中重写时，实现 <see cref="P:System.Type.IsPrimitive"/> 属性并确定 <see cref="T:System.Type"/> 是否为基元类型之一。</summary>
<returns>如果 <see cref="T:System.Type"/> 为基元类型之一，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsPublic">
<summary>获取一个值，该值指示 <see cref="T:System.Type"/> 是否声明为公共类型。</summary>
<returns>如果 <see cref="T:System.Type"/> 声明为公共类型且不是嵌套类型，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsSealed">
<summary>获取一个值，该值指示 <see cref="T:System.Type"/> 是否声明为密封的。</summary>
<returns>如果 <see cref="T:System.Type"/> 声明为密封的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsSpecialName">
<summary>获取一个值，该值指示 <see cref="T:System.Type"/> 是否具有需要特殊处理的名称。</summary>
<returns>如果 <see cref="T:System.Type"/> 具有需要特殊处理的名称，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Type.IsSubclassOf(System.Type)">
<summary>确定当前 <see cref="T:System.Type"/> 表示的类是否从指定的 <see cref="T:System.Type"/> 所表示的类派生的。</summary>
<returns>如果 Type 由 <paramref name="c"/> 参数表示而且当前的 Type 表示类，并且当前的 Type 所表示的类是从 <paramref name="c"/> 所表示的类派生的，则为 true；否则为 false。如果 <paramref name="c"/> 和当前 Type 表示同一类，则此方法也会返回 false。</returns>
<param name="c">要与当前 Type 进行比较的 Type。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="c"/> 参数为 null。 </exception>
    </member>
    <member name="P:System.Type.IsUnicodeClass">
<summary>获取一个值，该值指示是否为 <see cref="T:System.Type"/> 选择了字符串格式属性 UnicodeClass。</summary>
<returns>如果为 <see cref="T:System.Type"/> 选择了字符串格式属性 UnicodeClass，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsValueType">
<summary>获取一个值，该值指示 <see cref="T:System.Type"/> 是否为值类型。</summary>
<returns>如果 <see cref="T:System.Type"/> 是值类型，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Type.IsValueTypeImpl">
<summary>实现 <see cref="P:System.Type.IsValueType"/> 属性并确定 <see cref="T:System.Type"/> 是否为值类型；即，它不是类或接口。</summary>
<returns>如果 <see cref="T:System.Type"/> 是值类型，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsVisible">
<summary>获取一个指示 <see cref="T:System.Type"/> 是否可由程序集之外的代码访问的值。</summary>
<returns>如果当前 <see cref="T:System.Type"/> 是公共类型或公共嵌套类型从而使所有封闭类型都是公共类型，则为 true；否则为 false.</returns>
    </member>
    <member name="M:System.Type.MakeArrayType">
<summary>返回一个表示当前类型的一维数组（下限为零）的 <see cref="T:System.Type"/> 对象。</summary>
<returns>返回一个表示当前类型的一维数组（下限为零）的 <see cref="T:System.Type"/> 对象。</returns>
<exception cref="T:System.NotSupportedException">基类不支持所调用的方法。派生类必须提供实现。</exception>
<exception cref="T:System.TypeLoadException">当前类型为 <see cref="T:System.TypedReference"/>。-或- 当前类型为 ByRef 类型。即 <see cref="P:System.Type.IsByRef"/> 返回 true。 </exception>
    </member>
    <member name="M:System.Type.MakeArrayType(System.Int32)">
<summary>返回表示当前类型的指定维数的数组的 <see cref="T:System.Type"/> 对象。</summary>
<returns>表示当前类型的指定维数的数组的 <see cref="T:System.Type"/> 对象。</returns>
<param name="rank">数组的维数。此数量必须小于等于 32。</param>
      <exception cref="T:System.IndexOutOfRangeException">
<paramref name="rank"/> 无效。例如，0 或负数。</exception>
<exception cref="T:System.NotSupportedException">基类不支持所调用的方法。</exception>
<exception cref="T:System.TypeLoadException">当前类型为 <see cref="T:System.TypedReference"/>。-或- 当前类型为 ByRef 类型。即 <see cref="P:System.Type.IsByRef"/> 返回 true。-或- <paramref name="rank"/> 大于 32。</exception>
    </member>
    <member name="M:System.Type.MakeByRefType">
<summary>返回表示作为 ref 参数（在 Visual Basic 中为 ByRef 参数）传递时的当前类型的 <see cref="T:System.Type"/> 对象。</summary>
<returns>表示作为 ref 参数（在 Visual Basic 中为 ByRef 参数）传递时的当前类型的 <see cref="T:System.Type"/> 对象。</returns>
<exception cref="T:System.NotSupportedException">基类不支持所调用的方法。</exception>
<exception cref="T:System.TypeLoadException">当前类型为 <see cref="T:System.TypedReference"/>。-或- 当前类型为 ByRef 类型。即 <see cref="P:System.Type.IsByRef"/> 返回 true。 </exception>
    </member>
    <member name="M:System.Type.MakeGenericType(System.Type[])">
<summary>替代由当前泛型类型定义的类型参数组成的类型数组的元素，并返回表示结果构造类型的 <see cref="T:System.Type"/> 对象。</summary>
<returns><see cref="T:System.Type"/> 表示的构造类型通过以下方式形成：用 <paramref name="typeArguments"/> 的元素取代当前泛型类型的类型参数。</returns>
<param name="typeArguments">将代替当前泛型类型的类型参数的类型数组。</param>
<exception cref="T:System.InvalidOperationException">当前类型不表示泛型类型定义。即 <see cref="P:System.Type.IsGenericTypeDefinition"/> 返回 false。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="typeArguments"/> 为 null。-或- <paramref name="typeArguments"/> 的任何元素都为 null。 </exception>
<exception cref="T:System.ArgumentException"><paramref name="typeArguments"/> 中元素的数目与当前泛型类型定义的类型参数的数目不同。-或- <paramref name="typeArguments"/> 的任何元素都不满足为当前泛型类型的相应类型参数指定的约束。-或- <paramref name="typeArguments"/> 包含指针类型（<see cref="P:System.Type.IsPointer"/> 返回 true）、ByRef 类型（<see cref="P:System.Type.IsByRef"/> 返回 true）或 <see cref="T:System.Void"/> 的元素。</exception>
<exception cref="T:System.NotSupportedException">基类不支持所调用的方法。派生类必须提供实现。</exception>
    </member>
    <member name="M:System.Type.MakePointerType">
<summary>返回表示指向当前类型的指针的 <see cref="T:System.Type"/> 对象。</summary>
<returns>表示指向当前类型的指针的 <see cref="T:System.Type"/> 对象。</returns>
<exception cref="T:System.NotSupportedException">基类不支持所调用的方法。</exception>
<exception cref="T:System.TypeLoadException">当前类型为 <see cref="T:System.TypedReference"/>。-或- 当前类型为 ByRef 类型。即 <see cref="P:System.Type.IsByRef"/> 返回 true。 </exception>
    </member>
    <member name="P:System.Type.MemberType">
<summary>获取一个指示此成员是类型还是嵌套类型的 <see cref="T:System.Reflection.MemberTypes"/> 值。</summary>
<returns>一个 <see cref="T:System.Reflection.MemberTypes"/> 值，指示此成员是类型还是嵌套类型。</returns>
    </member>
    <member name="F:System.Type.Missing">
<summary>表示 <see cref="T:System.Type"/> 信息中的缺少值。此字段为只读。</summary>
    </member>
    <member name="P:System.Type.Module">
<summary>获取在其中定义当前 <see cref="T:System.Type"/> 的模块 (DLL)。</summary>
<returns>在其中定义当前 <see cref="T:System.Type"/> 的模块。</returns>
    </member>
    <member name="P:System.Type.Namespace">
<summary>获取 <see cref="T:System.Type"/> 的命名空间。</summary>
<returns><see cref="T:System.Type"/> 的命名空间；如果当前实例没有命名空间或表示泛型参数，则为 null。</returns>
    </member>
    <member name="P:System.Type.ReflectedType">
<summary>获取用于获取该成员的类对象。 </summary>
<returns>Type 对象，通过它获取了该 <see cref="T:System.Type"/> 对象。 </returns>
    </member>
    <member name="M:System.Type.ToString">
<summary>返回表示当前 Type 的名称的 String。</summary>
<returns>表示当前 <see cref="T:System.Type"/> 的名称的 <see cref="T:System.String"/>。</returns>
    </member>
    <member name="P:System.Type.TypeHandle">
<summary>获取当前 <see cref="T:System.Type"/> 的句柄。</summary>
<returns>当前 <see cref="T:System.Type"/> 的句柄。</returns>
<exception cref="T:System.NotSupportedException">.NET Compact Framework 当前不支持此属性。</exception>
    </member>
    <member name="P:System.Type.UnderlyingSystemType">
<summary>指示表示该类型的公共语言运行时提供的类型。</summary>
<returns><see cref="T:System.Type"/> 的基础系统类型。</returns>
    </member>
    <member name="T:System.TypeAccessException">
<summary>当方法试图使用它无权访问的类型时引发的异常。</summary>
    </member>
    <member name="M:System.TypeAccessException.#ctor">
<summary>使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.TypeAccessException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.TypeAccessException.#ctor(System.String)">
<summary>使用描述错误的指定消息初始化 <see cref="T:System.TypeAccessException"/> 类的新实例。</summary>
<param name="message">描述异常的消息。此构造函数的调用方必须确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.TypeAccessException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.TypeAccessException"/> 类的新实例。</summary>
<param name="message">描述异常的消息。此构造函数的调用方必须确保此字符串已针对当前系统区域性进行了本地化。 </param>
<param name="inner">导致当前异常的异常。如果 <paramref name="inner"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="T:System.TypeCode">
<summary>指定对象的类型。</summary>
    </member>
    <member name="F:System.TypeCode.Empty">
<summary>空引用。</summary>
    </member>
    <member name="F:System.TypeCode.Object">
<summary>常规类型，表示不会由另一个 TypeCode 显式表示的任何引用或值类型。</summary>
    </member>
    <member name="F:System.TypeCode.DBNull">
<summary>数据库空（列）值。</summary>
    </member>
    <member name="F:System.TypeCode.Boolean">
<summary>简单类型，表示 true 或 false 的布尔值。</summary>
    </member>
    <member name="F:System.TypeCode.Char">
<summary>整型，表示值介于 0 到 65535 之间的无符号 16 位整数。<see cref="F:System.TypeCode.Char"/> 类型的可能值集与 Unicode 字符集相对应。</summary>
    </member>
    <member name="F:System.TypeCode.SByte">
<summary>整型，表示值介于 -128 到 127 之间的有符号 8 位整数。</summary>
    </member>
    <member name="F:System.TypeCode.Byte">
<summary>整型，表示值介于 0 到 255 之间的无符号 8 位整数。</summary>
    </member>
    <member name="F:System.TypeCode.Int16">
<summary>整型，表示值介于 -32768 到 32767 之间的有符号 16 位整数。</summary>
    </member>
    <member name="F:System.TypeCode.UInt16">
<summary>整型，表示值介于 0 到 65535 之间的无符号 16 位整数。</summary>
    </member>
    <member name="F:System.TypeCode.Int32">
<summary>整型，表示值介于 -2147483648 到 2147483647 之间的有符号 32 位整数。</summary>
    </member>
    <member name="F:System.TypeCode.UInt32">
<summary>整型，表示值介于 0 到 4294967295 之间的无符号 32 位整数。</summary>
    </member>
    <member name="F:System.TypeCode.Int64">
<summary>整型，表示值介于 -9223372036854775808 到 9223372036854775807 之间的有符号 64 位整数。</summary>
    </member>
    <member name="F:System.TypeCode.UInt64">
<summary>整型，表示值介于 0 到 18446744073709551615 之间的无符号 64 位整数。</summary>
    </member>
    <member name="F:System.TypeCode.Single">
<summary>浮点型，表示从大约 1.5 x 10 -45 到 3.4 x 10 38 且精度为 7 位的值。</summary>
    </member>
    <member name="F:System.TypeCode.Double">
<summary>浮点型，表示从大约 5.0 x 10 -324 到 1.7 x 10 308 且精度为 15 到 16 位的值。</summary>
    </member>
    <member name="F:System.TypeCode.Decimal">
<summary>简单类型，表示从 1.0 x 10 -28 到大约 7.9 x 10 28 且有效位数为 28 到 29 位的值。</summary>
    </member>
    <member name="F:System.TypeCode.DateTime">
<summary>表示一个日期和时间值的类型。</summary>
    </member>
    <member name="F:System.TypeCode.String">
<summary>密封类类型，表示 Unicode 字符串。</summary>
    </member>
    <member name="T:System.TypedReference">
<summary>描述既包含指向某位置的托管指针，也包含该位置可能存储的类型的运行时表示形式的对象。</summary>
    </member>
    <member name="M:System.TypedReference.Equals(System.Object)">
<summary>检查该对象是否等于指定对象。</summary>
<returns>如果该对象等于指定对象，则为 true；否则为 false。</returns>
<param name="o">用于和当前对象进行比较的对象。 </param>
<exception cref="T:System.NotSupportedException">此方法未实现。 </exception>
    </member>
    <member name="M:System.TypedReference.GetHashCode">
<summary>返回此对象的哈希代码。</summary>
<returns>此对象的哈希代码。</returns>
    </member>
    <member name="T:System.TypeInitializationException">
<summary>作为类初始值设定项所引发异常的包装而引发的异常。无法继承此类。</summary>
    </member>
    <member name="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
<summary>用默认错误消息、指定的类型名称和对内部异常（为该异常的根源）的引用来初始化 <see cref="T:System.TypeInitializationException"/> 类的新实例。</summary>
<param name="fullTypeName">未能初始化类型的完全限定名。 </param>
<param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不是 null 引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。 </param>
    </member>
    <member name="P:System.TypeInitializationException.TypeName">
<summary>获取未能初始化类型的完全限定名。</summary>
<returns>未能初始化类型的完全限定名。</returns>
    </member>
    <member name="T:System.TypeLoadException">
<summary>类型加载失败发生时引发的异常。</summary>
    </member>
    <member name="M:System.TypeLoadException.#ctor">
<summary>初始化 <see cref="T:System.TypeLoadException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.TypeLoadException"/> 类的新实例。</summary>
<param name="message">描述错误的消息。 </param>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.TypeLoadException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="inner">导致当前异常的异常。如果 <paramref name="inner"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="P:System.TypeLoadException.Message">
<summary>获取此异常的错误消息。</summary>
<returns>错误消息字符串。</returns>
    </member>
    <member name="T:System.UInt16">
<summary>表示 16 位无符号整数。</summary>
    </member>
    <member name="M:System.UInt16.CompareTo(System.Object)">
<summary>将此实例与指定对象进行比较，并返回一个整数，该整数指示此实例的值是大于、等于还是小于指定对象的值。</summary>
<returns>有符号数字，指示此实例和 <paramref name="value"/> 的相对值。返回值 描述 小于零 此实例小于 <paramref name="value"/>。零 此实例等于 <paramref name="value"/>。大于零 此实例大于 <paramref name="value"/>。-或- <paramref name="value"/> 为 null。 </returns>
<param name="value">要比较的对象，或为 null。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="value"/> 不是 <see cref="T:System.UInt16"/>。 </exception>
    </member>
    <member name="M:System.UInt16.CompareTo(System.UInt16)">
<summary>将此实例与指定的 16 位无符号整数进行比较，并返回一个整数，该整数指示此实例的值是大于、等于还是小于指定的 16 位无符号整数的值。</summary>
<returns>有符号数字，指示此实例和 <paramref name="value"/> 的相对值。返回值 描述 小于零 此实例小于 <paramref name="value"/>。零 此实例等于 <paramref name="value"/>。大于零 此实例大于 <paramref name="value"/>。 </returns>
<param name="value">要比较的无符号整数。 </param>
    </member>
    <member name="M:System.UInt16.Equals(System.Object)">
<summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
<returns>如果 <paramref name="obj"/> 是 <see cref="T:System.UInt16"/> 的实例并且等于此实例的值，则为 true；否则为 false。</returns>
<param name="obj">要与此实例进行比较的对象。 </param>
    </member>
    <member name="M:System.UInt16.Equals(System.UInt16)">
<summary>返回一个值，该值指示此实例是否与指定的 <see cref="T:System.UInt16"/> 值相等。</summary>
<returns>如果 <paramref name="obj"/> 的值与此实例相同，则为 true；否则为 false。</returns>
<param name="obj">要与此实例进行比较的 <see cref="T:System.UInt16"/> 值。</param>
    </member>
    <member name="M:System.UInt16.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="M:System.UInt16.GetTypeCode">
<summary>返回值类型 <see cref="T:System.UInt16"/> 的 <see cref="T:System.TypeCode"/>。</summary>
<returns>枚举常数 <see cref="F:System.TypeCode.UInt16"/>。</returns>
    </member>
    <member name="F:System.UInt16.MaxValue">
<summary>表示 <see cref="T:System.UInt16"/> 的最大可能值。此字段为常量。</summary>
    </member>
    <member name="F:System.UInt16.MinValue">
<summary>表示 <see cref="T:System.UInt16"/> 的最小可能值。此字段为常量。</summary>
    </member>
    <member name="M:System.UInt16.Parse(System.String)">
<summary>将数字的字符串表示形式转换为它的等效 16 位无符号整数。</summary>
<returns>与 <paramref name="s"/> 中包含的数字等效的 16 位无符号整数。</returns>
<param name="s">表示要转换的数字的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 的格式不正确。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.UInt16.MinValue"/> 或大于 <see cref="F:System.UInt16.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles)">
<summary>将指定样式的数字的字符串表示形式转换为它的等效 16 位无符号整数。</summary>
<returns>与 <paramref name="s"/> 中指定的数字等效的 16 位无符号整数。</returns>
<param name="s">表示要转换的数字的字符串。该字符串使用由 <paramref name="style"/> 参数指定的样式来进行解释。</param>
<param name="style">枚举值的按位组合，这些枚举值指定 <paramref name="s"/> 所允许的格式。一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或-<paramref name="style"/> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber"/> 值的组合。</exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 的格式不符合 <paramref name="style"/>。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.UInt16.MinValue"/> 或大于 <see cref="F:System.UInt16.MaxValue"/> 的数字。-或- <paramref name="s"/> 包含非零的小数位。 </exception>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
<summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 16 位无符号整数。</summary>
<returns>与 <paramref name="s"/> 中指定的数字等效的 16 位无符号整数。</returns>
<param name="s">表示要转换的数字的字符串。该字符串使用由 <paramref name="style"/> 参数指定的样式来进行解释。</param>
<param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s"/> 中的样式元素。一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer"/>。</param>
<param name="provider">一个提供有关 <paramref name="s"/> 的区域性特定的格式设置信息的对象。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或-<paramref name="style"/> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber"/> 值的组合。</exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 的格式不符合 <paramref name="style"/>。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.UInt16.MinValue"/> 或大于 <see cref="F:System.UInt16.MaxValue"/> 的数字。-或- <paramref name="s"/> 包含非零的小数位。</exception>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.IFormatProvider)">
<summary>将指定区域性特定格式的数字的字符串表示形式转换为它的等效 16 位无符号整数。</summary>
<returns>与 <paramref name="s"/> 中指定的数字等效的 16 位无符号整数。</returns>
<param name="s">表示要转换的数字的字符串。</param>
<param name="provider">一个提供有关 <paramref name="s"/> 的区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.UInt16.MinValue"/> 或大于 <see cref="F:System.UInt16.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToBoolean(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)"/>。 </summary>
<returns>如果当前实例的值不为零，则为 true；否则为 false。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToByte(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Byte"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToChar(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Char"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDateTime(System.IFormatProvider)">
<summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>不支持此转换。不返回任何值。</returns>
<param name="provider">忽略此参数。</param>
<exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDecimal(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)"/>。 </summary>
<returns>转换为 <see cref="T:System.Decimal"/> 的该实例的当前值。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDouble(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)"/>。 </summary>
<returns>转换为 <see cref="T:System.Double"/> 的该实例的当前值。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt16(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)"/>。 </summary>
<returns>转换为 <see cref="T:System.Int16"/> 的该实例的当前值。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt32(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)"/>。 </summary>
<returns>转换为 <see cref="T:System.Int32"/> 的该实例的值。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt64(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)"/>。 </summary>
<returns>转换为 <see cref="T:System.Int64"/> 的该实例的当前值。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToSByte(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)"/>。 </summary>
<returns>转换为 <see cref="T:System.SByte"/> 的该实例的当前值。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToSingle(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)"/>。 </summary>
<returns>转换为 <see cref="T:System.Single"/> 的该实例的当前值。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)"/>。 </summary>
<returns>转换为 <paramref name="type"/> 的该实例的当前值。</returns>
<param name="type">要将此 <see cref="T:System.UInt16"/> 值转换为的类型。</param>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/> 实现，提供有关返回值格式的信息。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt16(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)"/>。 </summary>
<returns>该实例的当前值（未更改）。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt32(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)"/>。 </summary>
<returns>转换为 <see cref="T:System.UInt32"/> 的该实例的当前值。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt64(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)"/>。 </summary>
<returns>转换为 <see cref="T:System.UInt64"/> 的该实例的当前值。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt16.ToString">
<summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由一系列从 0 到 9 之间的数字组成，不包含符号或前导零。</returns>
    </member>
    <member name="M:System.UInt16.ToString(System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由一系列 0 到 9 之间的数字组成，不包含符号或前导零。</returns>
<param name="provider">一个提供区域性特定的格式设置信息的对象。 </param>
    </member>
    <member name="M:System.UInt16.ToString(System.String)">
<summary>使用指定的格式将此实例的数值转换为它的等效字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由 <paramref name="format"/> 指定。</returns>
<param name="format">一个数值格式字符串。</param>
<exception cref="T:System.FormatException"><paramref name="format"/> 参数无效。 </exception>
    </member>
    <member name="M:System.UInt16.ToString(System.String,System.IFormatProvider)">
<summary>使用指定的格式和区域性特定格式设置信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由 <paramref name="format"/> 和 <paramref name="provider"/> 指定。</returns>
<param name="format">一个数值格式字符串。</param>
<param name="provider">一个提供区域性特定的格式设置信息的对象。 </param>
      <exception cref="T:System.FormatException">
<paramref name="format"/> 无效。 </exception>
    </member>
    <member name="M:System.UInt16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt16@)">
<summary>尝试将数字的指定样式和区域性特定格式的字符串表示形式转换为其等效的 16 位无符号整数。一个指示转换是否成功的返回值。</summary>
<returns>如果成功转换了 <paramref name="s"/>，则为 true；否则为 false。</returns>
<param name="s">表示要转换的数字的字符串。该字符串使用由 <paramref name="style"/> 参数指定的样式来进行解释。</param>
<param name="style">枚举值的一个按位组合，指示 <paramref name="s"/> 所允许的格式。一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer"/>。</param>
<param name="provider">一个提供有关 <paramref name="s"/> 的区域性特定的格式设置信息的对象。 </param>
<param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s"/> 中包含的数字等效的 16 位无符号整数值；如果转换失败，则包含零。如果 <paramref name="s"/> 参数为 null，格式不符合 <paramref name="style"/>，或者表示的数字小于 <see cref="F:System.UInt16.MinValue"/> 或大于 <see cref="F:System.UInt16.MaxValue"/>，则转换会失败。该参数未经初始化即被传递。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或-<paramref name="style"/> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber"/> 值的组合。</exception>
    </member>
    <member name="M:System.UInt16.TryParse(System.String,System.UInt16@)">
<summary>尝试将数字的字符串表示形式转换为等效的 16 位无符号整数。一个指示转换是否成功的返回值。</summary>
<returns>如果成功转换了 <paramref name="s"/>，则为 true；否则为 false。</returns>
<param name="s">一个字符串，表示要转换的数字。 </param>
<param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s"/> 中所包含的数字等效的 16 位无符号整数值；如果转换失败，则包含零。如果 <paramref name="s"/> 参数为 null、格式不正确或者表示的数字小于 <see cref="F:System.UInt16.MinValue"/> 或大于 <see cref="F:System.UInt16.MaxValue"/>，则转换会失败。该参数未经初始化即被传递。 </param>
    </member>
    <member name="T:System.UInt32">
<summary>表示 32 位无符号整数。</summary>
    </member>
    <member name="M:System.UInt32.CompareTo(System.Object)">
<summary>将此实例与指定对象进行比较，并返回一个整数，该整数指示此实例的值是大于、等于还是小于指定对象的值。</summary>
<returns>有符号数字，指示此实例和 <paramref name="value"/> 的相对值。返回值 描述 小于零 此实例小于 <paramref name="value"/>。零 此实例等于 <paramref name="value"/>。大于零 此实例大于 <paramref name="value"/>。-或- <paramref name="value"/> 为 null。 </returns>
<param name="value">要比较的对象，或为 null。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="value"/> 不是 <see cref="T:System.UInt32"/>。 </exception>
    </member>
    <member name="M:System.UInt32.CompareTo(System.UInt32)">
<summary>将此实例与指定的 32 位无符号整数进行比较，并返回一个整数，该整数指示此实例的值是大于、等于还是小于指定的 32 位无符号整数的值。</summary>
<returns>有符号数字，指示此实例和 <paramref name="value"/> 的相对值。返回值 描述 小于零 此实例小于 <paramref name="value"/>。零 此实例等于 <paramref name="value"/>。大于零 此实例大于 <paramref name="value"/>。 </returns>
<param name="value">要比较的无符号整数。 </param>
    </member>
    <member name="M:System.UInt32.Equals(System.Object)">
<summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
<returns>如果 <paramref name="obj"/> 是 <see cref="T:System.UInt32"/> 的实例并且等于此实例的值，则为 true；否则为 false。</returns>
<param name="obj">与此实例进行比较的对象。 </param>
    </member>
    <member name="M:System.UInt32.Equals(System.UInt32)">
<summary>返回一个值，该值指示此实例是否与指定的 <see cref="T:System.UInt32"/> 相等。</summary>
<returns>如果 <paramref name="obj"/> 的值与此实例相同，则为 true；否则为 false。</returns>
<param name="obj">要与此实例进行比较的 <see cref="T:System.UInt32"/> 值。</param>
    </member>
    <member name="M:System.UInt32.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="M:System.UInt32.GetTypeCode">
<summary>返回值类型 <see cref="T:System.UInt32"/> 的 <see cref="T:System.TypeCode"/>。</summary>
<returns>枚举常数 <see cref="F:System.TypeCode.UInt32"/>。</returns>
    </member>
    <member name="F:System.UInt32.MaxValue">
<summary>表示 <see cref="T:System.UInt32"/> 的最大可能值。此字段为常量。</summary>
    </member>
    <member name="F:System.UInt32.MinValue">
<summary>表示 <see cref="T:System.UInt32"/> 的最小可能值。此字段为常量。</summary>
    </member>
    <member name="M:System.UInt32.Parse(System.String)">
<summary>将数字的字符串表示形式转换为它的等效 32 位无符号整数。</summary>
<returns>与 <paramref name="s"/> 中包含的数字等效的 32 位无符号整数。</returns>
<param name="s">表示要转换的数字的字符串。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="s"/> 参数为 null。 </exception>
<exception cref="T:System.FormatException"><paramref name="s"/> 参数的格式不正确。 </exception>
<exception cref="T:System.OverflowException"><paramref name="s"/> 参数表示小于 <see cref="F:System.UInt32.MinValue"/> 或大于 <see cref="F:System.UInt32.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles)">
<summary>将指定样式的数字的字符串表示形式转换为它的等效 32 位无符号整数。</summary>
<returns>与 <paramref name="s"/> 中指定的数字等效的 32 位无符号整数。</returns>
<param name="s">表示要转换的数字的字符串。该字符串使用由 <paramref name="style"/> 参数指定的样式来进行解释。</param>
<param name="style">枚举值的按位组合，这些枚举值指定 <paramref name="s"/> 所允许的格式。一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或-<paramref name="style"/> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber"/> 值的组合。</exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 的格式不符合 <paramref name="style"/>。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.UInt32.MinValue"/> 或大于 <see cref="F:System.UInt32.MaxValue"/> 的数字。-或- <paramref name="s"/> 包含非零的小数位。</exception>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
<summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 32 位无符号整数。</summary>
<returns>与 <paramref name="s"/> 中指定的数字等效的 32 位无符号整数。</returns>
<param name="s">表示要转换的数字的字符串。该字符串使用由 <paramref name="style"/> 参数指定的样式来进行解释。</param>
<param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s"/> 中的样式元素。一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer"/>。</param>
<param name="provider">一个提供有关 <paramref name="s"/> 的区域性特定的格式设置信息的对象。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或-<paramref name="style"/> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber"/> 值的组合。</exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 的格式不符合 <paramref name="style"/>。 </exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.UInt32.MinValue"/> 或大于 <see cref="F:System.UInt32.MaxValue"/> 的数字。-或- <paramref name="s"/> 包含非零的小数位。</exception>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.IFormatProvider)">
<summary>将指定区域性特定格式的数字的字符串表示形式转换为它的等效 32 位无符号整数。</summary>
<returns>与 <paramref name="s"/> 中指定的数字等效的 32 位无符号整数。</returns>
<param name="s">表示要转换的数字的字符串。 </param>
<param name="provider">一个提供有关 <paramref name="s"/> 的区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。</exception>
      <exception cref="T:System.FormatException">
<paramref name="s"/> 采用的样式不正确。</exception>
      <exception cref="T:System.OverflowException">
<paramref name="s"/> 表示小于 <see cref="F:System.UInt32.MinValue"/> 或大于 <see cref="F:System.UInt32.MaxValue"/> 的数字。</exception>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToBoolean(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)"/>。 </summary>
<returns>如果当前实例的值不为零，则为 true；否则为 false。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToByte(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Byte"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToChar(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Char"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDateTime(System.IFormatProvider)">
<summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>不支持此转换。不返回任何值。</returns>
<param name="provider">忽略此参数。</param>
<exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDecimal(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Decimal"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDouble(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Double"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt16(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Int16"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt32(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Int32"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt64(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Int64"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToSByte(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.SByte"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToSingle(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Single"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <paramref name="type"/>。</returns>
<param name="type">要将此 <see cref="T:System.UInt32"/> 值转换为的类型。</param>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/> 实现，提供有关返回值格式的区域性特定信息。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt16(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.UInt16"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt32(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，未更改。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt64(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.UInt64"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt32.ToString">
<summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由一系列从 0 到 9 之间的数字组成，不包含符号或前导零。</returns>
    </member>
    <member name="M:System.UInt32.ToString(System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由一系列 0 到 9 之间的数字组成，不包含符号或前导零。</returns>
<param name="provider">一个提供区域性特定的格式设置信息的对象。 </param>
    </member>
    <member name="M:System.UInt32.ToString(System.String)">
<summary>使用指定的格式将此实例的数值转换为它的等效字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由 <paramref name="format"/> 指定。</returns>
<param name="format">标准或自定义的数值格式字符串（请参阅“备注”）。</param>
<exception cref="T:System.FormatException"><paramref name="format"/> 参数无效。 </exception>
    </member>
    <member name="M:System.UInt32.ToString(System.String,System.IFormatProvider)">
<summary>使用指定的格式和区域性特定格式设置信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由 <paramref name="format"/> 和 <paramref name="provider"/> 指定。</returns>
<param name="format">标准或自定义的数值格式字符串（请参阅“备注”）。</param>
<param name="provider">一个对象，它提供有关此实例的区域性特定格式设置信息。 </param>
<exception cref="T:System.FormatException"><paramref name="format"/> 参数无效。 </exception>
    </member>
    <member name="M:System.UInt32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32@)">
<summary>尝试将数字的指定样式和区域性特定格式的字符串表示形式转换为其等效的 32 位无符号整数。一个指示转换是否成功的返回值。</summary>
<returns>如果成功转换了 <paramref name="s"/>，则为 true；否则为 false。</returns>
<param name="s">表示要转换的数字的字符串。该字符串使用由 <paramref name="style"/> 参数指定的样式来进行解释。</param>
<param name="style">枚举值的一个按位组合，指示 <paramref name="s"/> 所允许的格式。一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer"/>。</param>
<param name="provider">一个提供有关 <paramref name="s"/> 的区域性特定的格式设置信息的对象。 </param>
<param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s"/> 中包含的数字等效的 32 位无符号整数值；如果转换失败，则包含零。如果 <paramref name="s"/> 参数为 null，格式不符合 <paramref name="style"/>，或者表示的数字小于 <see cref="F:System.UInt32.MinValue"/> 或大于 <see cref="F:System.UInt32.MaxValue"/>，则转换会失败。该参数未经初始化即被传递。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或-<paramref name="style"/> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber"/> 值的组合。</exception>
    </member>
    <member name="M:System.UInt32.TryParse(System.String,System.UInt32@)">
<summary>将数字的字符串表示形式转换为它的等效 32 位无符号整数。一个指示转换是否成功的返回值。</summary>
<returns>如果成功转换了 <paramref name="s"/>，则为 true；否则为 false。</returns>
<param name="s">表示要转换的数字的字符串。 </param>
<param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s"/> 中所包含的数字等效的 32 位无符号整数值；如果转换失败，则包含零。如果 <paramref name="s"/> 参数为 null，格式不正确，或者表示的数字小于 <see cref="F:System.UInt32.MinValue"/> 或大于 <see cref="F:System.UInt32.MaxValue"/>，则转换会失败。该参数未经初始化即被传递。 </param>
    </member>
    <member name="T:System.UInt64">
<summary>表示 64 位无符号整数。</summary>
    </member>
    <member name="M:System.UInt64.CompareTo(System.Object)">
<summary>将此实例与指定对象进行比较，并返回一个整数，该整数指示此实例的值是大于、等于还是小于指定对象的值。</summary>
<returns>有符号数字，指示此实例和 <paramref name="value"/> 的相对值。返回值 描述 小于零 此实例小于 <paramref name="value"/>。零 此实例等于 <paramref name="value"/>。大于零 此实例大于 <paramref name="value"/>。-或- <paramref name="value"/> 为 null。 </returns>
<param name="value">要比较的对象，或为 null。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="value"/> 不是 <see cref="T:System.UInt64"/>。 </exception>
    </member>
    <member name="M:System.UInt64.CompareTo(System.UInt64)">
<summary>将此实例与指定的 64 位无符号整数进行比较，并返回一个整数，该整数指示此实例的值是大于、等于还是小于指定的 64 位无符号整数的值。</summary>
<returns>有符号数字，指示此实例和 <paramref name="value"/> 的相对值。返回值 描述 小于零 此实例小于 <paramref name="value"/>。零 此实例等于 <paramref name="value"/>。大于零 此实例大于 <paramref name="value"/>。 </returns>
<param name="value">要比较的无符号整数。 </param>
    </member>
    <member name="M:System.UInt64.Equals(System.Object)">
<summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
<returns>如果 <paramref name="obj"/> 是 <see cref="T:System.UInt64"/> 的实例并且等于此实例的值，则为 true；否则为 false。</returns>
<param name="obj">要与此实例进行比较的对象。 </param>
    </member>
    <member name="M:System.UInt64.Equals(System.UInt64)">
<summary>返回一个值，该值指示此实例是否与指定的 <see cref="T:System.UInt64"/> 值相等。</summary>
<returns>如果 <paramref name="obj"/> 的值与此实例相同，则为 true；否则为 false。</returns>
<param name="obj">要与此实例进行比较的 <see cref="T:System.UInt64"/> 值。</param>
    </member>
    <member name="M:System.UInt64.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="M:System.UInt64.GetTypeCode">
<summary>返回值类型 <see cref="T:System.UInt64"/> 的 <see cref="T:System.TypeCode"/>。</summary>
<returns>枚举常数 <see cref="F:System.TypeCode.UInt64"/>。</returns>
    </member>
    <member name="F:System.UInt64.MaxValue">
<summary>表示 <see cref="T:System.UInt64"/> 的最大可能值。此字段为常量。</summary>
    </member>
    <member name="F:System.UInt64.MinValue">
<summary>表示 <see cref="T:System.UInt64"/> 的最小可能值。此字段为常量。</summary>
    </member>
    <member name="M:System.UInt64.Parse(System.String)">
<summary>将数字的字符串表示形式转换为它的等效 64 位无符号整数。</summary>
<returns>与 <paramref name="s"/> 中包含的数字等效的 64 位无符号整数。</returns>
<param name="s">表示要转换的数字的字符串。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="s"/> 参数为 null。 </exception>
<exception cref="T:System.FormatException"><paramref name="s"/> 参数的格式不正确。 </exception>
<exception cref="T:System.OverflowException"><paramref name="s"/> 参数表示小于 <see cref="F:System.UInt64.MinValue"/> 或大于 <see cref="F:System.UInt64.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles)">
<summary>将指定样式的数字的字符串表示形式转换为它的等效 64 位无符号整数。</summary>
<returns>与 <paramref name="s"/> 中指定的数字等效的 64 位无符号整数。</returns>
<param name="s">一个字符串，表示要转换的数字。 </param>
<param name="style">枚举值的按位组合，这些枚举值指定 <paramref name="s"/> 所允许的格式。一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer"/>。</param>
<exception cref="T:System.ArgumentNullException"><paramref name="s"/> 参数为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或-<paramref name="style"/> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber"/> 值的组合。</exception>
<exception cref="T:System.FormatException"><paramref name="s"/> 参数的格式不符合 <paramref name="style"/>。 </exception>
<exception cref="T:System.OverflowException"><paramref name="s"/> 参数表示小于 <see cref="F:System.UInt64.MinValue"/> 或大于 <see cref="F:System.UInt64.MaxValue"/> 的数字。-或- <paramref name="s"/> 包含非零的小数位。</exception>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
<summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 64 位无符号整数。</summary>
<returns>与 <paramref name="s"/> 中指定的数字等效的 64 位无符号整数。</returns>
<param name="s">表示要转换的数字的字符串。该字符串使用由 <paramref name="style"/> 参数指定的样式来进行解释。</param>
<param name="style">枚举值的一个按位组合，指示 <paramref name="s"/> 所允许的格式。一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer"/>。</param>
<param name="provider">一个提供有关 <paramref name="s"/> 的区域性特定的格式设置信息的对象。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="s"/> 参数为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或-<paramref name="style"/> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber"/> 值的组合。</exception>
<exception cref="T:System.FormatException"><paramref name="s"/> 参数的格式不符合 <paramref name="style"/>。 </exception>
<exception cref="T:System.OverflowException"><paramref name="s"/> 参数表示小于 <see cref="F:System.UInt64.MinValue"/> 或大于 <see cref="F:System.UInt64.MaxValue"/> 的数字。-或- <paramref name="s"/> 包含非零的小数位。</exception>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.IFormatProvider)">
<summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 64 位无符号整数。</summary>
<returns>与 <paramref name="s"/> 中指定的数字等效的 64 位无符号整数。</returns>
<param name="s">一个字符串，表示要转换的数字。 </param>
<param name="provider">一个提供有关 <paramref name="s"/> 的区域性特定的格式设置信息的对象。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="s"/> 参数为 null。 </exception>
<exception cref="T:System.FormatException"><paramref name="s"/> 参数的格式不正确。</exception>
<exception cref="T:System.OverflowException"><paramref name="s"/> 参数表示小于 <see cref="F:System.UInt64.MinValue"/> 或大于 <see cref="F:System.UInt64.MaxValue"/> 的数字。 </exception>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToBoolean(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)"/>。 </summary>
<returns>如果当前实例的值不为零，则为 true；否则为 false。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToByte(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Byte"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToChar(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Char"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDateTime(System.IFormatProvider)">
<summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException"/>。</summary>
<returns>不支持此转换。不返回任何值。</returns>
<param name="provider">忽略此参数。</param>
<exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDecimal(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Decimal"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDouble(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Double"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt16(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Int16"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt32(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Int32"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt64(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Int64"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToSByte(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.SByte"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToSingle(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.Single"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <paramref name="type"/>。</returns>
<param name="type">要将此 <see cref="T:System.UInt64"/> 值转换为的类型。</param>
<param name="provider">一个 <see cref="T:System.IFormatProvider"/> 实现，提供有关返回值格式的信息。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt16(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.UInt16"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt32(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，已转换为 <see cref="T:System.UInt32"/>。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt64(System.IFormatProvider)">
<summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)"/>。 </summary>
<returns>当前实例的值，未更改。</returns>
<param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt64.ToString">
<summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由一系列从 0 到 9 之间的数字组成，不包含符号或前导零。</returns>
    </member>
    <member name="M:System.UInt64.ToString(System.IFormatProvider)">
<summary>使用指定的区域性特定格式设置信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由 <paramref name="provider"/> 指定。</returns>
<param name="provider">一个提供区域性特定的格式设置信息的对象。 </param>
    </member>
    <member name="M:System.UInt64.ToString(System.String)">
<summary>使用指定的格式将此实例的数值转换为它的等效字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由 <paramref name="format"/> 指定。</returns>
<param name="format">一个数值格式字符串。</param>
<exception cref="T:System.FormatException"><paramref name="format"/> 参数无效。 </exception>
    </member>
    <member name="M:System.UInt64.ToString(System.String,System.IFormatProvider)">
<summary>使用指定的格式和区域性特定格式设置信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
<returns>此实例的值的字符串表示形式，由 <paramref name="format"/> 和 <paramref name="provider"/> 指定。</returns>
<param name="format">一个数值格式字符串。</param>
<param name="provider">一个对象，它提供有关此实例的区域性特定格式设置信息。 </param>
<exception cref="T:System.FormatException"><paramref name="format"/> 参数无效。 </exception>
    </member>
    <member name="M:System.UInt64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt64@)">
<summary>尝试将数字的指定样式和区域性特定格式的字符串表示形式转换为其等效的 64 位无符号整数。一个指示转换是否成功的返回值。</summary>
<returns>如果成功转换了 <paramref name="s"/>，则为 true；否则为 false。</returns>
<param name="s">表示要转换的数字的字符串。该字符串使用由 <paramref name="style"/> 参数指定的样式来进行解释。</param>
<param name="style">枚举值的一个按位组合，指示 <paramref name="s"/> 所允许的格式。一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer"/>。</param>
<param name="provider">一个提供有关 <paramref name="s"/> 的区域性特定的格式设置信息的对象。 </param>
<param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s"/> 中包含的数字等效的 64 位无符号整数值；如果转换失败，则包含零。如果 <paramref name="s"/> 参数为 null，格式不符合 <paramref name="style"/>，或者表示的数字小于 <see cref="F:System.UInt64.MinValue"/> 或大于 <see cref="F:System.UInt64.MaxValue"/>，则转换会失败。该参数未经初始化即被传递。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="style"/> 不是一个 <see cref="T:System.Globalization.NumberStyles"/> 值。-或-<paramref name="style"/> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber"/> 值的组合。</exception>
    </member>
    <member name="M:System.UInt64.TryParse(System.String,System.UInt64@)">
<summary>尝试将数字的字符串表示形式转换为等效的 64 位无符号整数。一个指示转换是否成功的返回值。</summary>
<returns>如果成功转换了 <paramref name="s"/>，则为 true；否则为 false。</returns>
<param name="s">表示要转换的数字的字符串。 </param>
<param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s"/> 中所包含的数字等效的 64 位无符号整数值；如果转换失败，则包含零。如果 <paramref name="s"/> 参数为 null，格式不正确，或者表示的数字小于 <see cref="F:System.UInt64.MinValue"/> 或大于 <see cref="F:System.UInt64.MaxValue"/>，则转换会失败。该参数未经初始化即被传递。 </param>
    </member>
    <member name="T:System.UIntPtr">
<summary>用于表示指针或句柄的平台特定的类型。</summary>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt32)">
<summary>使用指定的 32 位指针或句柄初始化 <see cref="T:System.UIntPtr"/> 的新实例。</summary>
<param name="value">32 位无符号整数中包含的指针或句柄。 </param>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt64)">
<summary>使用指定的 64 位指针或句柄初始化 <see cref="T:System.UIntPtr"/> 的新实例。</summary>
<param name="value">包含于 64 位无符号整数中的指针或句柄。 </param>
<exception cref="T:System.OverflowException">在 32 位的平台上，<paramref name="value"/> 太大，无法表示为一个 <see cref="T:System.UIntPtr"/>。 </exception>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.Void*)">
<summary>使用指定的指向未指定类型的指针来初始化 <see cref="T:System.UIntPtr"/> 的新实例。</summary>
<param name="value">指向未指定类型的指针。 </param>
    </member>
    <member name="M:System.UIntPtr.Equals(System.Object)">
<summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
<returns>如果 <paramref name="obj"/> 是 <see cref="T:System.UIntPtr"/> 的实例并且等于此实例的值，则为 true；否则为 false。</returns>
<param name="obj">要与此实例比较的对象或 null。 </param>
    </member>
    <member name="M:System.UIntPtr.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="M:System.UIntPtr.op_Equality(System.UIntPtr,System.UIntPtr)">
<summary>确定 <see cref="T:System.UIntPtr"/> 的两个指定的实例是否相等。</summary>
<returns>如果 <paramref name="value1"/> 等于 <paramref name="value2"/>，则为 true；否则为 false。</returns>
<param name="value1"><see cref="T:System.UIntPtr"/>。 </param>
<param name="value2"><see cref="T:System.UIntPtr"/>。 </param>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt32)~System.UIntPtr">
<summary>将 32 位无符号的整数值转换成 <see cref="T:System.UIntPtr"/>。</summary>
<returns>初始化为 <paramref name="value"/> 的 <see cref="T:System.UIntPtr"/> 新实例。</returns>
<param name="value">32 位无符号整数。 </param>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt64)~System.UIntPtr">
<summary>将 64 位无符号的整数值转换成 <see cref="T:System.UIntPtr"/>。</summary>
<returns>初始化为 <paramref name="value"/> 的 <see cref="T:System.UIntPtr"/> 新实例。</returns>
<param name="value">64 位无符号整数。 </param>
<exception cref="T:System.OverflowException">在 32 位的平台上，<paramref name="value"/> 太大，无法表示为一个 <see cref="T:System.UIntPtr"/>。 </exception>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt32">
<summary>将指定 <see cref="T:System.UIntPtr"/> 的值转换为 32 位无符号整数。</summary>
<returns><paramref name="value"/> 的内容。</returns>
<param name="value"><see cref="T:System.UIntPtr"/>。 </param>
<exception cref="T:System.OverflowException">在 64 位平台上，<paramref name="value"/> 的值太大，无法表示为 32 位无符号整数。 </exception>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt64">
<summary>将指定 <see cref="T:System.UIntPtr"/> 的值转换为 64 位无符号整数。</summary>
<returns><paramref name="value"/> 的内容。</returns>
<param name="value"><see cref="T:System.UIntPtr"/>。 </param>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.Void*">
<summary>将指定的 <see cref="T:System.UIntPtr"/> 的值转换为指向未指定的类型的指针。</summary>
<returns><paramref name="value"/> 的内容。</returns>
<param name="value"><see cref="T:System.UIntPtr"/>。 </param>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.Void*)~System.UIntPtr">
<summary>将指向未指定类型的指定指针转换为 <see cref="T:System.UIntPtr"/>。</summary>
<returns>初始化为 <paramref name="value"/> 的 <see cref="T:System.UIntPtr"/> 新实例。</returns>
<param name="value">指向未指定类型的指针。 </param>
    </member>
    <member name="M:System.UIntPtr.op_Inequality(System.UIntPtr,System.UIntPtr)">
<summary>确定 <see cref="T:System.UIntPtr"/> 的两个指定的实例是否不相等。</summary>
<returns>如果 <paramref name="value1"/> 不等于 <paramref name="value2"/>，则为 true；否则为 false。</returns>
<param name="value1"><see cref="T:System.UIntPtr"/>。 </param>
<param name="value2"><see cref="T:System.UIntPtr"/>。 </param>
    </member>
    <member name="P:System.UIntPtr.Size">
<summary>获得此实例的大小。</summary>
<returns>此平台上的指针或句柄的大小，按字节计。此属性的值在 32 位平台上为 4，在 64 位平台上为 8。</returns>
    </member>
    <member name="M:System.UIntPtr.ToPointer">
<summary>将此实例的值转换为指向未指定的类型的指针。</summary>
<returns>指向 <see cref="T:System.Void"/> 的指针，即是说，该指针所指向的内存包含有未指定的类型的数据。</returns>
    </member>
    <member name="M:System.UIntPtr.ToString">
<summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
<returns>此实例的值的字符串表示。</returns>
    </member>
    <member name="M:System.UIntPtr.ToUInt32">
<summary>将此实例的值转换成 32 位无符号整数。</summary>
<returns>等于此实例的值的 32 位无符号整数。</returns>
<exception cref="T:System.OverflowException">在 64 位平台上，此实例的值太大，无法表示为 32 位无符号整数。 </exception>
    </member>
    <member name="M:System.UIntPtr.ToUInt64">
<summary>将此实例的值转换成 64 位无符号整数。</summary>
<returns>等于此实例的值的 64 位无符号整数。</returns>
    </member>
    <member name="F:System.UIntPtr.Zero">
<summary>一个只读字段，代表已初始化为零的指针或句柄。</summary>
    </member>
    <member name="T:System.UnauthorizedAccessException">
<summary>当操作系统因 I/O 错误或特定类型的安全错误而拒绝访问时所引发的异常。 </summary>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor">
<summary>初始化 <see cref="T:System.UnauthorizedAccessException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.UnauthorizedAccessException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String,System.Exception)">
<summary>使用指定的错误消息和对导致此异常的内部异常的引用来初始化 <see cref="T:System.UnauthorizedAccessException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="inner">引发当前异常的异常。如果 <paramref name="inner"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="T:System.UnhandledExceptionEventArgs">
<summary>为以下情况下引发的事件提供数据：存在一个不是在任何应用程序域中处理的异常。</summary>
    </member>
    <member name="M:System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)">
<summary>使用异常对象和公共语言运行时终止标志初始化 <see cref="T:System.UnhandledExceptionEventArgs"/> 类的新实例。</summary>
<param name="exception">未处理的异常。 </param>
<param name="isTerminating">如果运行库即将终止，则为 true；否则为 false。 </param>
    </member>
    <member name="P:System.UnhandledExceptionEventArgs.ExceptionObject">
<summary>获取未处理的异常对象。</summary>
<returns>未处理的异常对象。</returns>
    </member>
    <member name="P:System.UnhandledExceptionEventArgs.IsTerminating">
<summary>指示公共语言运行时是否即将终止。</summary>
<returns>如果运行库即将终止，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.UnhandledExceptionEventHandler">
<summary>[SECURITY CRITICAL] 表示将处理事件的方法，该事件由应用程序域不处理的异常引发。</summary>
<param name="sender">未处理的异常事件的源。 </param>
<param name="e">事件数据。 </param>
    </member>
    <member name="T:System.ValueType">
<summary>提供值类型的基类。</summary>
    </member>
    <member name="M:System.ValueType.#ctor">
<summary>初始化 <see cref="T:System.ValueType"/> 类的新实例。 </summary>
    </member>
    <member name="M:System.ValueType.Equals(System.Object)">
<summary>指示此实例与指定对象是否相等。</summary>
<returns>如果 <paramref name="obj"/> 和该实例具有相同的类型并表示相同的值，则为 true；否则为 false。</returns>
<param name="obj">要比较的另一个对象。 </param>
    </member>
    <member name="M:System.ValueType.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>一个 32 位带符号整数，它是该实例的哈希代码。</returns>
    </member>
    <member name="M:System.ValueType.ToString">
<summary>返回该实例的完全限定类型名。</summary>
<returns>包含完全限定类型名的 <see cref="T:System.String"/>。</returns>
    </member>
    <member name="T:System.Version">
<summary>表示程序集、操作系统或公共语言运行时的版本号。无法继承此类。</summary>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32)">
<summary>使用指定的主要版本号值和次要版本号值初始化 <see cref="T:System.Version"/> 类的新实例。</summary>
<param name="major">主版本号。 </param>
<param name="minor">次版本号。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="major"/> 或 <paramref name="minor"/> 小于零。 </exception>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32)">
<summary>使用指定的主要版本号、次要版本号、内部版本号的值初始化 <see cref="T:System.Version"/> 类的新实例。</summary>
<param name="major">主版本号。 </param>
<param name="minor">次版本号。 </param>
<param name="build">内部版本号。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="major"/>、<paramref name="minor"/> 或 <paramref name="build"/> 小于零。 </exception>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>使用指定的主版本号、次版本号、内部版本号和修订号初始化 <see cref="T:System.Version"/> 类的新实例。</summary>
<param name="major">主版本号。 </param>
<param name="minor">次版本号。 </param>
<param name="build">内部版本号。 </param>
<param name="revision">修订号。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="major"/>、<paramref name="minor"/>、<paramref name="build"/> 或 <paramref name="revision"/> 小于零。 </exception>
    </member>
    <member name="M:System.Version.#ctor(System.String)">
<summary>使用指定的字符串初始化 <see cref="T:System.Version"/> 类的新实例。</summary>
<param name="version">一个包含主要版本号、次要版本号、内部版本号和修订号的字符串，其中的各个号之间以句点字符（“.”）分隔。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="version"/> 少于两个部分或多于四个部分。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="version"/> 为 null。 </exception>
<exception cref="T:System.ArgumentOutOfRangeException">主要版本号、次要版本号、内部版本号或修订号部分小于零。 </exception>
<exception cref="T:System.FormatException"><paramref name="version"/> 的至少一个部分未分析为整数。 </exception>
<exception cref="T:System.OverflowException"><paramref name="version"/> 至少有一个部分表示大于 <see cref="F:System.Int32.MaxValue"/> 的数。</exception>
    </member>
    <member name="P:System.Version.Build">
<summary>获取当前 <see cref="T:System.Version"/> 对象版本号的内部版本号部分的值。</summary>
<returns>内部版本号或为 -1（如果未定义内部版本号）。</returns>
    </member>
    <member name="M:System.Version.Clone">
<summary>返回一个新的 <see cref="T:System.Version"/> 对象，该对象的值与当前的 <see cref="T:System.Version"/> 对象相同。</summary>
<returns>一个新的 <see cref="T:System.Object"/>，其值为当前 <see cref="T:System.Version"/> 对象的副本。</returns>
    </member>
    <member name="M:System.Version.CompareTo(System.Object)">
<summary>将当前 <see cref="T:System.Version"/> 对象与指定的对象进行比较，并返回二者相对值的一个指示。</summary>
<returns>返回值 描述 小于零 当前 <see cref="T:System.Version"/> 对象是 <paramref name="version"/> 之前的一个版本。零 当前 <see cref="T:System.Version"/> 对象是与 <paramref name="version"/> 相同的版本。大于零 当前 <see cref="T:System.Version"/> 对象是 <paramref name="version"/> 之后的一个版本。-或- <paramref name="version"/> 为 null。 </returns>
<param name="version">要比较的对象，或为 null。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="version"/> 并不属于类型 <see cref="T:System.Version"/>。 </exception>
    </member>
    <member name="M:System.Version.CompareTo(System.Version)">
<summary>将当前 <see cref="T:System.Version"/> 对象与指定的 <see cref="T:System.Version"/> 对象进行比较，并返回二者相对值的一个指示。</summary>
<returns>返回值 描述 小于零 当前 <see cref="T:System.Version"/> 对象是 <paramref name="value"/> 之前的一个版本。零 当前 <see cref="T:System.Version"/> 对象是与 <paramref name="value"/> 相同的版本。大于零 当前 <see cref="T:System.Version"/> 对象是 <paramref name="value"/> 之后的一个版本。-或- <paramref name="value"/> 为 null。</returns>
<param name="value">要与当前的 <see cref="T:System.Version"/> 对象进行比较的 <see cref="T:System.Version"/> 对象，或者为 null。</param>
    </member>
    <member name="M:System.Version.Equals(System.Object)">
<summary>返回一个值，该值指示当前 <see cref="T:System.Version"/> 对象是否等于指定的对象。</summary>
<returns>如果当前 <see cref="T:System.Version"/> 对象和 <paramref name="obj"/> 都为 <see cref="T:System.Version"/> 对象，并且当前 <see cref="T:System.Version"/> 对象的每个部分都与 <paramref name="obj"/> 的相应部分匹配，则为 true；否则为 false。</returns>
<param name="obj">要与当前 <see cref="T:System.Version"/> 对象进行比较的对象，或者为 null。 </param>
    </member>
    <member name="M:System.Version.Equals(System.Version)">
<summary>返回一个值，该值指示当前 <see cref="T:System.Version"/> 对象和指定的 <see cref="T:System.Version"/> 对象是否表示同一个值。</summary>
<returns>如果当前 <see cref="T:System.Version"/> 对象的每个部分都与 <paramref name="obj"/> 参数的相应部分匹配，则为 true；否则为 false。</returns>
<param name="obj">要与当前的 <see cref="T:System.Version"/> 对象进行比较的 <see cref="T:System.Version"/> 对象，或者为 null。</param>
    </member>
    <member name="M:System.Version.GetHashCode">
<summary>返回当前 <see cref="T:System.Version"/> 对象的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Version.Major">
<summary>获取当前 <see cref="T:System.Version"/> 对象版本号的主要版本号部分的值。</summary>
<returns>主版本号。</returns>
    </member>
    <member name="P:System.Version.Minor">
<summary>获取当前 <see cref="T:System.Version"/> 对象版本号的次要版本号部分的值。</summary>
<returns>次版本号。</returns>
    </member>
    <member name="M:System.Version.op_Equality(System.Version,System.Version)">
<summary>确定两个指定的 <see cref="T:System.Version"/> 对象是否相等。</summary>
<returns>如果 <paramref name="v1"/> 等于 <paramref name="v2"/>，则为 true；否则为 false。</returns>
<param name="v1">第一个 <see cref="T:System.Version"/> 对象。 </param>
<param name="v2">第二个 <see cref="T:System.Version"/> 对象。 </param>
    </member>
    <member name="M:System.Version.op_GreaterThan(System.Version,System.Version)">
<summary>确定指定的第一个 <see cref="T:System.Version"/> 对象是否大于指定的第二个 <see cref="T:System.Version"/> 对象。</summary>
<returns>如果 <paramref name="v1"/> 大于 <paramref name="v2"/>，则为 true；否则为 false。</returns>
<param name="v1">第一个 <see cref="T:System.Version"/> 对象。 </param>
<param name="v2">第二个 <see cref="T:System.Version"/> 对象。 </param>
    </member>
    <member name="M:System.Version.op_GreaterThanOrEqual(System.Version,System.Version)">
<summary>确定指定的第一个 <see cref="T:System.Version"/> 对象是否大于等于指定的第二个 <see cref="T:System.Version"/> 对象。</summary>
<returns>如果 <paramref name="v1"/> 大于或等于 <paramref name="v2"/>，则为 true；否则为 false。</returns>
<param name="v1">第一个 <see cref="T:System.Version"/> 对象。 </param>
<param name="v2">第二个 <see cref="T:System.Version"/> 对象。 </param>
    </member>
    <member name="M:System.Version.op_Inequality(System.Version,System.Version)">
<summary>确定两个指定的 <see cref="T:System.Version"/> 对象是否不相等。</summary>
<returns>如果 <paramref name="v1"/> 不等于 <paramref name="v2"/>，则为 true；否则为 false。</returns>
<param name="v1">第一个 <see cref="T:System.Version"/> 对象。 </param>
<param name="v2">第二个 <see cref="T:System.Version"/> 对象。 </param>
    </member>
    <member name="M:System.Version.op_LessThan(System.Version,System.Version)">
<summary>确定指定的第一个 <see cref="T:System.Version"/> 对象是否小于指定的第二个 <see cref="T:System.Version"/> 对象。</summary>
<returns>如果 <paramref name="v1"/> 小于 <paramref name="v2"/>，则为 true；否则为 false。</returns>
<param name="v1">第一个 <see cref="T:System.Version"/> 对象。 </param>
<param name="v2">第二个 <see cref="T:System.Version"/> 对象。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="v1"/> 为 null。 </exception>
    </member>
    <member name="M:System.Version.op_LessThanOrEqual(System.Version,System.Version)">
<summary>确定指定的第一个 <see cref="T:System.Version"/> 对象是否小于或等于第二个 <see cref="T:System.Version"/> 对象。</summary>
<returns>如果 <paramref name="v1"/> 小于或等于 <paramref name="v2"/>，则为 true；否则为 false。</returns>
<param name="v1">第一个 <see cref="T:System.Version"/> 对象。 </param>
<param name="v2">第二个 <see cref="T:System.Version"/> 对象。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="v1"/> 为 null。 </exception>
    </member>
    <member name="M:System.Version.Parse(System.String)">
<summary>将版本号的字符串表示形式转换为等效的 <see cref="T:System.Version"/> 对象。</summary>
<returns>一个等效于 <paramref name="input"/> 参数中指定的版本号的对象。</returns>
<param name="input">包含要转换的版本号的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="input"/> 少于两个组件或多于四个版本组件。</exception>
<exception cref="T:System.ArgumentOutOfRangeException">在 <paramref name="input"/> 中至少有一个组件小于零。</exception>
<exception cref="T:System.FormatException">在 <paramref name="input"/> 中至少有一个组件不是整数。</exception>
<exception cref="T:System.OverflowException"><paramref name="input"/> 中至少有一个组件表示大于 <see cref="F:System.Int32.MaxValue"/> 的数。</exception>
    </member>
    <member name="P:System.Version.Revision">
<summary>获取当前 <see cref="T:System.Version"/> 对象版本号的修订号部分的值。</summary>
<returns>修订号或为 -1（如果未定义修订号）。</returns>
    </member>
    <member name="M:System.Version.ToString">
<summary>将当前 <see cref="T:System.Version"/> 的值转换为它的等效 <see cref="T:System.String"/> 表示形式。</summary>
<returns>当前 <see cref="T:System.Version"/> 对象的主要版本号、次要版本号、内部版本号和修订号部分的值的 <see cref="T:System.String"/> 表示形式（遵循下面所示格式）。各部分之间由句点字符（“.”）分隔。方括号（“[”和“]”）指示在返回值中不会出现的部分（如果未定义该部分）：major.minor[.build[.revision]] 例如，如果使用构造函数 Version(1,1) 创建 <see cref="T:System.Version"/> 对象，则返回的字符串为“1.1”。如果使用构造函数 Version(1,3,4,2) 创建 <see cref="T:System.Version"/> 对象，则返回的字符串为“1.3.4.2”。</returns>
    </member>
    <member name="M:System.Version.ToString(System.Int32)">
<summary>将当前 <see cref="T:System.Version"/> 的值转换为它的等效 <see cref="T:System.String"/> 表示形式。指定的计数指示要返回的部分数。</summary>
<returns>当前 <see cref="T:System.Version"/> 对象的主要版本号、次要版本号、内部版本号和修订号部分的值的 <see cref="T:System.String"/> 表示形式，各部分之间用句点字符（“.”）分隔。<paramref name="fieldCount"/> 参数确定返回多少个部分。fieldCount 返回值 0 空字符串 ("")。1 major 2 major.minor 3 major.minor.build 4 major.minor.build.revision 例如，如果使用构造函数 Version(1,3,5) 创建 <see cref="T:System.Version"/> 对象，则 ToString(2) 返回“1.3” 且 ToString(4) 引发异常。</returns>
<param name="fieldCount">要返回的部分数。<paramref name="fieldCount"/> 的范围是从 0 到 4。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="fieldCount"/> 小于 0 或大于 4。-或- <paramref name="fieldCount"/> 多于在当前 <see cref="T:System.Version"/> 对象中定义的部分的数量。 </exception>
    </member>
    <member name="M:System.Version.TryParse(System.String,System.Version@)">
<summary>尝试将版本号的字符串表示形式转换为等效的 <see cref="T:System.Version"/> 对象，并返回一个指示转换是否成功的值。</summary>
<returns>如果 <paramref name="input"/> 参数成功转换，则为 true；否则为 false。</returns>
<param name="input">包含要转换的版本号的字符串。</param>
<param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input"/> 中所含编号等效的 <see cref="T:System.Version"/>；如果转换失败，则包含主版本号和次版本号都为 0 的 <see cref="T:System.Version"/> 对象。</param>
    </member>
    <member name="T:System.Void">
<summary>为不返回值的方法指定返回值类型。</summary>
    </member>
    <member name="T:System.WeakReference">
<summary>表示弱引用，即在引用对象的同时仍然允许垃圾回收来回收该对象。</summary>
    </member>
    <member name="M:System.WeakReference.#ctor">
<summary>初始化 <see cref="T:System.WeakReference"/> 类的新实例。此构造函数重载不能在基于 Silverlight 的应用程序中实现。</summary>
<exception cref="T:System.NotImplementedException">此构造函数未实现。</exception>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object)">
<summary>引用指定的对象初始化 <see cref="T:System.WeakReference"/> 类的新实例。</summary>
<param name="target">要跟踪的对象，或 null。 </param>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
<summary>初始化 <see cref="T:System.WeakReference"/> 类的新实例，引用指定的对象并使用指定的复活跟踪。</summary>
<param name="target">要跟踪的对象。 </param>
<param name="trackResurrection">指示何时停止跟踪对象。如果为 true，则在终结后跟踪对象；如果为 false，则仅在终结前跟踪对象。 </param>
    </member>
    <member name="M:System.WeakReference.Finalize">
<summary>丢弃对当前 <see cref="T:System.WeakReference"/> 对象表示的目标的引用。</summary>
    </member>
    <member name="P:System.WeakReference.IsAlive">
<summary>获取当前 <see cref="T:System.WeakReference"/> 对象引用的对象是否已被垃圾回收的指示。</summary>
<returns>如果当前 <see cref="T:System.WeakReference"/> 对象引用的对象尚未被垃圾回收且仍然可访问，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.WeakReference.Target">
<summary>获取或设置当前 <see cref="T:System.WeakReference"/> 对象引用的对象（目标）。</summary>
<returns>如果当前 <see cref="T:System.WeakReference"/> 对象引用的对象已被垃圾回收，则为 null；否则为对该对象（当前 <see cref="T:System.WeakReference"/> 对象引用的对象）的引用。</returns>
<exception cref="T:System.InvalidOperationException">对目标对象的引用无效。如果值为 null 引用或者已经在设置操作过程中完成对象，则设置该属性时可能引发此异常。</exception>
    </member>
    <member name="P:System.WeakReference.TrackResurrection">
<summary>获取当前 <see cref="T:System.WeakReference"/> 对象引用的对象在终止后是否会被跟踪的指示。</summary>
<returns>如果当前 <see cref="T:System.WeakReference"/> 对象引用的对象在终止后会被跟踪，则为 true；否则，如果该对象仅在终止前被跟踪，则为 false。</returns>
    </member>
    <member name="T:System.WeakReference`1">
<summary>表示类型化弱引用，即在引用对象的同时仍然允许垃圾回收来回收该对象。</summary>
<typeparam name="T">所引用的对象的类型。</typeparam>
    </member>
    <member name="M:System.WeakReference`1.#ctor(`0)">
<summary>引用指定的对象初始化 <see cref="T:System.WeakReference`1"/> 类的新实例。</summary>
<param name="target">要引用的对象或 null。</param>
    </member>
    <member name="M:System.WeakReference`1.#ctor(`0,System.Boolean)">
<summary>初始化 <see cref="T:System.WeakReference`1"/> 类的新实例，引用指定的对象并使用指定的复活跟踪。</summary>
<param name="target">要引用的对象或 null。</param>
<param name="trackResurrection">如果为 true，则在终结后跟踪对象；如果为 false，则仅在终结前跟踪对象。</param>
    </member>
    <member name="M:System.WeakReference`1.Finalize">
<summary>丢弃对当前 <see cref="T:System.WeakReference`1"/> 对象所表示目标的引用。</summary>
    </member>
    <member name="P:System.WeakReference`1.TrackResurrection">
<summary>获取一个值，该值指示当前 <see cref="T:System.WeakReference`1"/> 对象引用的对象在终止后是否会被跟踪。</summary>
<returns>如果当前 <see cref="T:System.WeakReference`1"/> 对象所引用的对象在终止后会被跟踪，则为 true；否则，如果该对象仅在终止前被跟踪，则为 false。</returns>
    </member>
    <member name="M:System.WeakReference`1.TryGetTarget(`0@)">
<summary>尝试检索由当前 <see cref="T:System.WeakReference`1"/> 对象引用的目标对象。</summary>
<returns>如果检索到目标，则为 true；否则为 false。</returns>
<param name="target">当此方法返回时，包含目标对象（如果可用）。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.AppDomain.GetAssemblies">
<summary>获取已加载到此应用程序域的执行上下文中的程序集。</summary>
<returns>此应用程序域中的程序集数组。</returns>
<exception cref="T:System.AppDomainUnloadedException">尝试对已卸载的应用程序域进行操作。 </exception>
    </member>
    <member name="M:System.Delegate.Finalize">
<summary>释放由当前实例控制的资源。</summary>
    </member>
    <member name="M:System.GC.Collect(System.Int32)">
<summary>[SECURITY CRITICAL] 引发对指定生成的即时垃圾回收。</summary>
<param name="generation">要收集的生成。</param>
    </member>
    <member name="M:System.GC.GetGeneration(System.Object)">
<summary>[SECURITY CRITICAL] 检索指定对象的生成。</summary>
<returns>指定对象的生成编号。</returns>
<param name="obj">要检查的对象。</param>
    </member>
    <member name="T:System.Collections.BitArray">
<summary>管理位值的精简数组，这些值表示为布尔值，其中 true 表示位是打开的 (1)，false 表示位是关闭的 (0)。</summary>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Boolean[])">
<summary>初始化 <see cref="T:System.Collections.BitArray"/> 类的新实例，该实例包含从指定的布尔值数组复制的位值。</summary>
<param name="values">要复制的布尔值的数组。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="values"/> 为 null。 </exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Byte[])">
<summary>初始化 <see cref="T:System.Collections.BitArray"/> 类的新实例，该实例包含从指定的类型数组复制的位值。</summary>
<param name="bytes">包含要复制的值的字节数组，其中每个字节表示 8 个连续位。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="bytes"/> 为 null。 </exception>
<exception cref="T:System.ArgumentException"><paramref name="bytes"/> 的长度大于 <see cref="F:System.Int32.MaxValue"/>。</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Collections.BitArray)">
<summary>初始化 <see cref="T:System.Collections.BitArray"/> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.BitArray"/> 复制的位值。</summary>
<param name="bits">要复制的 <see cref="T:System.Collections.BitArray"/>。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="bits"/> 为 null。 </exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32)">
<summary>初始化 <see cref="T:System.Collections.BitArray"/> 类的新实例，该实例可拥有指定数目的位值，位值最初设置为 false。</summary>
<param name="length">新 <see cref="T:System.Collections.BitArray"/> 中位值的数目。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="length"/> 小于零。 </exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)">
<summary>初始化 <see cref="T:System.Collections.BitArray"/> 类的新实例，该实例可拥有指定数目的位值，位值最初设置为指定值。</summary>
<param name="length">新 <see cref="T:System.Collections.BitArray"/> 中位值的数目。 </param>
<param name="defaultValue">要分配给每个位的布尔值。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="length"/> 小于零。 </exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32[])">
<summary>初始化 <see cref="T:System.Collections.BitArray"/> 类的新实例，该实例包括从指定的 32 位整数数组复制的位值。</summary>
<param name="values">包含要复制的值的整数数组，其中每个整数表示 32 个连续位。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="values"/> 为 null。 </exception>
<exception cref="T:System.ArgumentException"><paramref name="values"/> 的长度大于 <see cref="F:System.Int32.MaxValue"/>。</exception>
    </member>
    <member name="M:System.Collections.BitArray.And(System.Collections.BitArray)">
<summary>对当前 <see cref="T:System.Collections.BitArray"/> 中的元素和指定 <see cref="T:System.Collections.BitArray"/> 中的相应元素执行按位 AND 运算。</summary>
<returns><see cref="T:System.Collections.BitArray"/>，包含对当前 <see cref="T:System.Collections.BitArray"/> 中的元素和指定的 <see cref="T:System.Collections.BitArray"/> 中的相应元素进行按位 AND 运算的结果。</returns>
<param name="value">要对其执行按位“和”运算的 <see cref="T:System.Collections.BitArray"/>。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="value"/> 和当前 <see cref="T:System.Collections.BitArray"/> 的元素数不同。 </exception>
    </member>
    <member name="M:System.Collections.BitArray.Clone">
<summary>创建一个 <see cref="T:System.Collections.BitArray"/> 的浅表副本。</summary>
<returns><see cref="T:System.Collections.BitArray"/> 的浅表副本。</returns>
    </member>
    <member name="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
<summary>从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.BitArray"/> 复制到兼容的一维 <see cref="T:System.Array"/>。</summary>
<param name="array">作为从 <see cref="T:System.Collections.BitArray"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。 </param>
<param name="index"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="array"/> 是多维的。-或- 源 <see cref="T:System.Collections.BitArray"/> 中的元素数大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 结尾处之间的可用空间。 </exception>
<exception cref="T:System.InvalidCastException">无法自动将源 <see cref="T:System.Collections.BitArray"/> 的类型强制转换为目标 <paramref name="array"/> 的类型。 </exception>
    </member>
    <member name="P:System.Collections.BitArray.Count">
<summary>获取 <see cref="T:System.Collections.BitArray"/> 中包含的元素数量。</summary>
<returns><see cref="T:System.Collections.BitArray"/> 中包含的元素个数。</returns>
    </member>
    <member name="M:System.Collections.BitArray.Get(System.Int32)">
<summary>获取 <see cref="T:System.Collections.BitArray"/> 中特定位置处的位的值。</summary>
<returns>在 <paramref name="index"/> 位置处的位的值。</returns>
<param name="index">要获取的值的从零开始的索引。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零。-或- <paramref name="index"/> 大于等于 <see cref="T:System.Collections.BitArray"/> 中的元素数量。</exception>
    </member>
    <member name="M:System.Collections.BitArray.GetEnumerator">
<summary>返回一个循环访问 <see cref="T:System.Collections.BitArray"/> 的枚举器。</summary>
<returns>用于整个 <see cref="T:System.Collections.BitArray"/> 的 <see cref="T:System.Collections.IEnumerator"/>。</returns>
    </member>
    <member name="P:System.Collections.BitArray.IsReadOnly">
<summary>获取一个值，该值指示 <see cref="T:System.Collections.BitArray"/> 是否为只读。</summary>
<returns>此属性恒为 false。</returns>
    </member>
    <member name="P:System.Collections.BitArray.IsSynchronized">
<summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.BitArray"/> 的访问（线程安全）。</summary>
<returns>此属性恒为 false。</returns>
    </member>
    <member name="P:System.Collections.BitArray.Item(System.Int32)">
<summary>获取或设置 <see cref="T:System.Collections.BitArray"/> 中特定位置的位的值。</summary>
<returns>在 <paramref name="index"/> 位置处的位的值。</returns>
<param name="index">要获取或设置的值的从零开始的索引。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零。-或- <paramref name="index"/> 等于或大于 <see cref="P:System.Collections.BitArray.Count"/>。 </exception>
    </member>
    <member name="P:System.Collections.BitArray.Length">
<summary>获取或设置 <see cref="T:System.Collections.BitArray"/> 中元素的数目。</summary>
<returns><see cref="T:System.Collections.BitArray"/> 中元素的数目。</returns>
<exception cref="T:System.ArgumentOutOfRangeException">属性设置为一个小于零的值。 </exception>
    </member>
    <member name="M:System.Collections.BitArray.Not">
<summary>反转当前 <see cref="T:System.Collections.BitArray"/> 中的所有位值，以便将设置为 true 的元素更改为 false；将设置为 false 的元素更改为 true。</summary>
<returns>具有已反转的位值的当前实例。</returns>
    </member>
    <member name="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
<summary>对当前 <see cref="T:System.Collections.BitArray"/> 中的元素和指定的 <see cref="T:System.Collections.BitArray"/> 中的相应元素执行按位“或”运算。</summary>
<returns><see cref="T:System.Collections.BitArray"/>，包含对当前 <see cref="T:System.Collections.BitArray"/> 中的元素和指定的 <see cref="T:System.Collections.BitArray"/> 中的相应元素执行按位“或”运算的结果。</returns>
<param name="value">要对其执行按位“或”运算的 <see cref="T:System.Collections.BitArray"/>。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="value"/> 和当前 <see cref="T:System.Collections.BitArray"/> 的元素数不同。 </exception>
    </member>
    <member name="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
<summary>将 <see cref="T:System.Collections.BitArray"/> 中特定位置处的位设置为指定值。</summary>
<param name="index">要设置的位的从零开始的索引。 </param>
<param name="value">要分配给位的布尔值。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零。-或- <paramref name="index"/> 大于等于 <see cref="T:System.Collections.BitArray"/> 中的元素数量。 </exception>
    </member>
    <member name="M:System.Collections.BitArray.SetAll(System.Boolean)">
<summary>将 <see cref="T:System.Collections.BitArray"/> 中的所有位设置为指定值。</summary>
<param name="value">要分配给所有位的布尔值。 </param>
    </member>
    <member name="P:System.Collections.BitArray.SyncRoot">
<summary>获取一个对象，该对象可以用于同步对 <see cref="T:System.Collections.BitArray"/> 的访问。</summary>
<returns>可用于同步对 <see cref="T:System.Collections.BitArray"/> 的访问的对象。</returns>
    </member>
    <member name="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
<summary>对当前 <see cref="T:System.Collections.BitArray"/> 中的元素和指定 <see cref="T:System.Collections.BitArray"/> 中的相应元素执行按位“异或”运算。</summary>
<returns><see cref="T:System.Collections.BitArray"/>，包含对当前 <see cref="T:System.Collections.BitArray"/> 中的元素和指定的 <see cref="T:System.Collections.BitArray"/> 中的相应元素执行按位“异或”运算的结果。</returns>
<param name="value">要对其执行按位“异或”运算的 <see cref="T:System.Collections.BitArray"/>。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="value"/> 和当前 <see cref="T:System.Collections.BitArray"/> 的元素数不同。 </exception>
    </member>
    <member name="T:System.Collections.DictionaryEntry">
<summary>定义可设置或检索的字典键/值对。</summary>
    </member>
    <member name="M:System.Collections.DictionaryEntry.#ctor(System.Object,System.Object)">
<summary>使用指定的键和值初始化 <see cref="T:System.Collections.DictionaryEntry"/> 类型的实例。</summary>
<param name="key">每个键/值对中定义的对象。 </param>
<param name="value">与 <paramref name="key"/> 相关联的定义。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="key"/> 为 null，并且 .NET Framework 版本为 1.0 或 1.1。 </exception>
    </member>
    <member name="P:System.Collections.DictionaryEntry.Key">
<summary>获取或设置键/值对中的键。</summary>
<returns>键/值对中的键。</returns>
    </member>
    <member name="P:System.Collections.DictionaryEntry.Value">
<summary>获取或设置键/值对中的值。</summary>
<returns>键/值对中的值。</returns>
    </member>
    <member name="T:System.Collections.ICollection">
<summary>定义所有非泛型集合的大小、枚举器和同步方法。</summary>
    </member>
    <member name="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
<summary>从特定的 <see cref="T:System.Array"/> 索引处开始，将 <see cref="T:System.Collections.ICollection"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。</summary>
<param name="array">作为从 <see cref="T:System.Collections.ICollection"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。 </param>
<param name="index"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="array"/> 是多维的。-或- 源 <see cref="T:System.Collections.ICollection"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。-或-源 <see cref="T:System.Collections.ICollection"/> 的类型无法自动转换为目标 <paramref name="array"/><paramref name="."/> 的类型。</exception>
    </member>
    <member name="P:System.Collections.ICollection.Count">
<summary>获取 <see cref="T:System.Collections.ICollection"/> 中包含的元素数量。</summary>
<returns><see cref="T:System.Collections.ICollection"/> 中包含的元素个数。</returns>
    </member>
    <member name="P:System.Collections.ICollection.IsSynchronized">
<summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全）。</summary>
<returns>如果同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全），则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Collections.ICollection.SyncRoot">
<summary>获取一个对象，该对象可以用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问。</summary>
<returns>可用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问的对象。</returns>
    </member>
    <member name="T:System.Collections.IComparer">
<summary>公开一种比较两个对象的方法。</summary>
    </member>
    <member name="M:System.Collections.IComparer.Compare(System.Object,System.Object)">
<summary>比较两个对象并返回一个值，指示一个对象是小于、等于还是大于另一个对象。</summary>
<returns>带符号整数，指示 <paramref name="x"/> 和 <paramref name="y"/> 的相对值，如下表所示。值 条件 小于零 <paramref name="x"/> 小于 <paramref name="y"/>。零 <paramref name="x"/> 等于 <paramref name="y"/>。大于零 <paramref name="x"/> 大于 <paramref name="y"/>。 </returns>
<param name="x">要比较的第一个对象。 </param>
<param name="y">要比较的第二个对象。 </param>
<exception cref="T:System.ArgumentException"><paramref name="x"/> 或 <paramref name="y"/> 都不实现 <see cref="T:System.IComparable"/> 接口。-或- <paramref name="x"/> 和 <paramref name="y"/> 的类型不同，它们都无法处理与另一个进行的比较。 </exception>
    </member>
    <member name="T:System.Collections.IDictionary">
<summary>表示键/值对的非通用集合。</summary>
    </member>
    <member name="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
<summary>在 <see cref="T:System.Collections.IDictionary"/> 对象中添加一个带有所提供的键和值的元素。</summary>
<param name="key">用作要添加的元素的键的 <see cref="T:System.Object"/>。 </param>
<param name="value">用作要添加的元素的值的 <see cref="T:System.Object"/>。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="key"/> 为 null。 </exception>
<exception cref="T:System.ArgumentException"><see cref="T:System.Collections.IDictionary"/> 对象中已存在具有相同键的元素。 </exception>
<exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.IDictionary"/> 为只读。-或- <see cref="T:System.Collections.IDictionary"/> 具有固定大小。 </exception>
    </member>
    <member name="M:System.Collections.IDictionary.Clear">
<summary>从 <see cref="T:System.Collections.IDictionary"/> 对象中移除所有元素。</summary>
<exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.IDictionary"/> 对象是只读的。 </exception>
    </member>
    <member name="M:System.Collections.IDictionary.Contains(System.Object)">
<summary>确定 <see cref="T:System.Collections.IDictionary"/> 对象是否包含具有指定键的元素。</summary>
<returns>如果 <see cref="T:System.Collections.IDictionary"/> 包含具有键的元素，则为 true；否则为 false。</returns>
<param name="key">要在 <see cref="T:System.Collections.IDictionary"/> 对象中查找的键。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="key"/> 为 null。 </exception>
    </member>
    <member name="M:System.Collections.IDictionary.GetEnumerator">
<summary>返回用于 <see cref="T:System.Collections.IDictionary"/> 对象的 <see cref="T:System.Collections.IDictionaryEnumerator"/> 对象。</summary>
<returns>一个用于 <see cref="T:System.Collections.IDictionary"/> 对象的 <see cref="T:System.Collections.IDictionaryEnumerator"/> 对象。</returns>
    </member>
    <member name="P:System.Collections.IDictionary.IsFixedSize">
<summary>获取一个值，该值指示 <see cref="T:System.Collections.IDictionary"/> 对象是否具有固定大小。</summary>
<returns>如果 <see cref="T:System.Collections.IDictionary"/> 对象具有固定大小，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Collections.IDictionary.IsReadOnly">
<summary>获取一个值，该值指示 <see cref="T:System.Collections.IDictionary"/> 对象是否为只读。</summary>
<returns>如果 <see cref="T:System.Collections.IDictionary"/> 对象为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Collections.IDictionary.Item(System.Object)">
<summary>获取或设置具有指定键的元素。</summary>
<returns>带有指定键的元素。</returns>
<param name="key">要获取或设置的元素的键。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="key"/> 为 null。 </exception>
<exception cref="T:System.NotSupportedException">设置了该属性，并且 <see cref="T:System.Collections.IDictionary"/> 对象是只读的。-或- 设置了该属性，集合中不存在 <paramref name="key"/> 并且 <see cref="T:System.Collections.IDictionary"/> 具有固定大小。 </exception>
    </member>
    <member name="P:System.Collections.IDictionary.Keys">
<summary>获取 <see cref="T:System.Collections.ICollection"/> 对象，它包含 <see cref="T:System.Collections.IDictionary"/> 对象的键。</summary>
<returns><see cref="T:System.Collections.ICollection"/> 对象，它包含 <see cref="T:System.Collections.IDictionary"/> 对象的键。</returns>
    </member>
    <member name="M:System.Collections.IDictionary.Remove(System.Object)">
<summary>从 <see cref="T:System.Collections.IDictionary"/> 对象中移除带有指定键的元素。</summary>
<param name="key">要移除的元素的键。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="key"/> 为 null。 </exception>
<exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.IDictionary"/> 对象为只读。-或- <see cref="T:System.Collections.IDictionary"/> 具有固定大小。 </exception>
    </member>
    <member name="P:System.Collections.IDictionary.Values">
<summary>获取 <see cref="T:System.Collections.ICollection"/> 对象，它包含 <see cref="T:System.Collections.IDictionary"/> 对象中的值。</summary>
<returns><see cref="T:System.Collections.ICollection"/> 对象，它包含 <see cref="T:System.Collections.IDictionary"/> 对象中的值。</returns>
    </member>
    <member name="T:System.Collections.IDictionaryEnumerator">
<summary>枚举非泛型字典的元素。</summary>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Entry">
<summary>同时获取当前字典项的键和值。</summary>
<returns>同时包含当前字典项的键和值的 <see cref="T:System.Collections.DictionaryEntry"/>。</returns>
<exception cref="T:System.InvalidOperationException">将 <see cref="T:System.Collections.IDictionaryEnumerator"/> 定位于字典的第一项之前或最后一项之后。 </exception>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Key">
<summary>获取当前字典项的键。</summary>
<returns>当前枚举元素的键。</returns>
<exception cref="T:System.InvalidOperationException">将 <see cref="T:System.Collections.IDictionaryEnumerator"/> 定位于字典的第一项之前或最后一项之后。 </exception>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Value">
<summary>获取当前字典项的值。</summary>
<returns>当前枚举元素的值。</returns>
<exception cref="T:System.InvalidOperationException">将 <see cref="T:System.Collections.IDictionaryEnumerator"/> 定位于字典的第一项之前或最后一项之后。 </exception>
    </member>
    <member name="T:System.Collections.IEnumerable">
<summary>公开枚举器，该枚举器支持在非泛型集合上进行简单迭代。</summary>
    </member>
    <member name="M:System.Collections.IEnumerable.GetEnumerator">
<summary>返回一个循环访问集合的枚举器。</summary>
<returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/> 对象。</returns>
    </member>
    <member name="T:System.Collections.IEnumerator">
<summary>支持对非泛型集合的简单迭代。</summary>
    </member>
    <member name="P:System.Collections.IEnumerator.Current">
<summary>获取集合中的当前元素。</summary>
<returns>集合中的当前元素。</returns>
<exception cref="T:System.InvalidOperationException">枚举器定位在该集合的第一个元素之前或最后一个元素之后。-或- 在创建了枚举器后集合被修改了。</exception>
    </member>
    <member name="M:System.Collections.IEnumerator.MoveNext">
<summary>将枚举器推进到集合的下一个元素。</summary>
<returns>如果枚举器成功地推进到下一个元素，则为 true；如果枚举器越过集合的结尾，则为 false。</returns>
<exception cref="T:System.InvalidOperationException">在创建了枚举器后集合被修改了。 </exception>
    </member>
    <member name="M:System.Collections.IEnumerator.Reset">
<summary>将枚举器设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
<exception cref="T:System.InvalidOperationException">在创建了枚举器后集合被修改了。 </exception>
    </member>
    <member name="T:System.Collections.IEqualityComparer">
<summary>定义方法以支持对象的相等比较。</summary>
    </member>
    <member name="M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)">
<summary>确定指定的对象是否相等。</summary>
<returns>如果指定的对象相等，则为 true；否则为 false。</returns>
<param name="x">要比较的第一个对象。</param>
<param name="y">要比较的第二个对象。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="x"/> 和 <paramref name="y"/> 的类型不同，它们都无法处理与另一个进行的比较。</exception>
    </member>
    <member name="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)">
<summary>返回指定对象的哈希代码。</summary>
<returns>指定对象的哈希代码。</returns>
<param name="obj"><see cref="T:System.Object"/>，将为其返回哈希代码。</param>
<exception cref="T:System.ArgumentNullException"><paramref name="obj"/> 的类型为引用类型，<paramref name="obj"/> 为 null。</exception>
    </member>
    <member name="T:System.Collections.IList">
<summary>表示可按照索引单独访问的对象的非泛型集合。</summary>
    </member>
    <member name="M:System.Collections.IList.Add(System.Object)">
<summary>向 <see cref="T:System.Collections.IList"/> 对象添加项。</summary>
<returns>新元素的插入位置。</returns>
<param name="value">要添加到此 <see cref="T:System.Collections.IList"/> 的 <see cref="T:System.Object"/>。 </param>
<exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.IList"/> 为只读。-或- <see cref="T:System.Collections.IList"/> 具有固定大小。 </exception>
    </member>
    <member name="M:System.Collections.IList.Clear">
<summary>从 <see cref="T:System.Collections.IList"/> 中移除所有项。</summary>
<exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.IList"/> 为只读。 </exception>
    </member>
    <member name="M:System.Collections.IList.Contains(System.Object)">
<summary>确定 <see cref="T:System.Collections.IList"/> 是否包含特定值。</summary>
<returns>如果 <see cref="T:System.Object"/> 在 <see cref="T:System.Collections.IList"/> 中，则为 true；否则为 false。</returns>
<param name="value">要在 <see cref="T:System.Collections.IList"/> 中查找的 <see cref="T:System.Object"/>。 </param>
    </member>
    <member name="M:System.Collections.IList.IndexOf(System.Object)">
<summary>确定 <see cref="T:System.Collections.IList"/> 中特定项的索引。</summary>
<returns>如果在列表中找到，则为 <paramref name="value"/> 的索引；否则为 -1。</returns>
<param name="value">要在 <see cref="T:System.Collections.IList"/> 中查找的 <see cref="T:System.Object"/>。 </param>
    </member>
    <member name="M:System.Collections.IList.Insert(System.Int32,System.Object)">
<summary>将一个项插入指定索引处的 <see cref="T:System.Collections.IList"/>。</summary>
<param name="index">应插入 <paramref name="value"/> 的位置的零始索引。 </param>
<param name="value">要插入到 <see cref="T:System.Collections.IList"/> 中的 <see cref="T:System.Object"/>。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 不是 <see cref="T:System.Collections.IList"/> 中的有效索引。 </exception>
<exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.IList"/> 为只读。-或- <see cref="T:System.Collections.IList"/> 具有固定大小。 </exception>
      <exception cref="T:System.NullReferenceException">
<paramref name="value"/> 在 <see cref="T:System.Collections.IList"/> 中是 null 引用。</exception>
    </member>
    <member name="P:System.Collections.IList.IsFixedSize">
<summary>获取一个值，该值指示 <see cref="T:System.Collections.IList"/> 是否具有固定大小。</summary>
<returns>如果 <see cref="T:System.Collections.IList"/> 具有固定大小，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Collections.IList.IsReadOnly">
<summary>获取一个值，该值指示 <see cref="T:System.Collections.IList"/> 是否为只读。</summary>
<returns>如果 <see cref="T:System.Collections.IList"/> 为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Collections.IList.Item(System.Int32)">
<summary>获取或设置位于指定索引处的元素。</summary>
<returns>位于指定索引处的元素。</returns>
<param name="index">要获取或设置的元素从零开始的索引。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 不是 <see cref="T:System.Collections.IList"/> 中的有效索引。 </exception>
<exception cref="T:System.NotSupportedException">设置该属性，而且 <see cref="T:System.Collections.IList"/> 为只读。 </exception>
    </member>
    <member name="M:System.Collections.IList.Remove(System.Object)">
<summary>从 <see cref="T:System.Collections.IList"/> 中移除第一次出现的特定对象。</summary>
<param name="value">要从 <see cref="T:System.Collections.IList"/> 中移除的 <see cref="T:System.Object"/>。 </param>
<exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.IList"/> 为只读。-或- <see cref="T:System.Collections.IList"/> 具有固定大小。 </exception>
    </member>
    <member name="M:System.Collections.IList.RemoveAt(System.Int32)">
<summary>移除指定索引处的 <see cref="T:System.Collections.IList"/> 项。</summary>
<param name="index">要移除的项的从零开始的索引。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 不是 <see cref="T:System.Collections.IList"/> 中的有效索引。 </exception>
<exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.IList"/> 为只读。-或- <see cref="T:System.Collections.IList"/> 具有固定大小。 </exception>
    </member>
    <member name="T:System.Collections.IStructuralComparable">
<summary>支持集合对象的结构比较。</summary>
    </member>
    <member name="M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)">
<summary>确定当前集合对象在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
<returns>一个指示当前集合对象与 <paramref name="other"/> 的关系的整数，如下表所示。返回 值 描述 -1 当前实例位于 <paramref name="other"/> 之前。0 当前实例和 <paramref name="other"/> 相等。1 当前实例在 <paramref name="other"/> 之后。</returns>
<param name="other">要与当前实例进行比较的对象。</param>
<param name="comparer">一个将当前集合对象的成员与 <paramref name="other"/> 的对应成员进行比较的对象。</param>
<exception cref="T:System.ArgumentException">此实例与 <paramref name="other"/> 不是同一类型。</exception>
    </member>
    <member name="T:System.Collections.IStructuralEquatable">
<summary>定义方法以支持对象的结构相等性比较。</summary>
    </member>
    <member name="M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)">
<summary>确定某个对象与当前实例在结构上是否相等。</summary>
<returns>如果两个对象相等，则为 true；否则为 false。</returns>
<param name="other">要与当前实例进行比较的对象。</param>
<param name="comparer">一个可确定当前实例与 <paramref name="other"/> 是否相等的对象。 </param>
    </member>
    <member name="M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)">
<summary>返回当前实例的哈希代码。</summary>
<returns>当前实例的哈希代码。</returns>
<param name="comparer">一个计算当前对象的哈希代码的对象。</param>
    </member>
    <member name="T:System.Collections.Generic.Comparer`1">
<summary>为 <see cref="T:System.Collections.Generic.IComparer`1"/> 泛型接口的实现提供基类。</summary>
<typeparam name="T">要比较的对象的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.#ctor">
<summary>初始化 <see cref="T:System.Collections.Generic.Comparer`1"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)">
<summary>在派生类中重写时，对同一类型的两个对象执行比较并返回一个值，指示一个对象是小于、等于还是大于另一个对象。</summary>
<returns>带符号整数，指示 x 与 y 的相对值，如下表所示。值 条件 小于 0 <paramref name="x"/> 小于 <paramref name="y"/>。0 <paramref name="x"/> 等于 <paramref name="y"/>。大于 0 <paramref name="x"/> 大于 <paramref name="y"/>。</returns>
<param name="x">要比较的第一个对象。</param>
<param name="y">要比较的第二个对象。</param>
<exception cref="T:System.ArgumentException">类型 <paramref name="T"/> 没有实现 <see cref="T:System.IComparable`1"/> 泛型接口或 <see cref="T:System.IComparable"/> 接口。</exception>
    </member>
    <member name="P:System.Collections.Generic.Comparer`1.Default">
<summary>返回由泛型参数指定的类型的默认排序顺序比较器。</summary>
<returns>继承 <see cref="T:System.Collections.Generic.Comparer`1"/> 并作为 <paramref name="T"/> 类型的排序顺序比较器的对象。</returns>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)">
<summary>比较两个对象并返回一个值，指示一个对象是小于、等于还是大于另一个对象。</summary>
<returns>带符号整数，指示 x 与 y 的相对值，如下表所示。值 条件 小于 0 <paramref name="x"/> 小于 <paramref name="y"/>。0 <paramref name="x"/> 等于 <paramref name="y"/>。大于 0 <paramref name="x"/> 大于 <paramref name="y"/>。</returns>
<param name="x">要比较的第一个对象。</param>
<param name="y">要比较的第二个对象。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="x"/> 或 <paramref name="y"/> 所属的类型无法被强制转换为类型 <paramref name="T"/>。-或-<paramref name="x"/> 和 <paramref name="y"/> 不实现 <see cref="T:System.IComparable`1"/> 泛型接口或 <see cref="T:System.IComparable"/> 接口。</exception>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2">
<summary>表示键和值的集合。</summary>
<typeparam name="TKey">字典中的键的类型。</typeparam>
<typeparam name="TValue">字典中的值的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor">
<summary>初始化 <see cref="T:System.Collections.Generic.Dictionary`2"/> 类的新实例，该实例为空且具有默认的初始容量，并使用键类型的默认相等比较器。</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
<summary>初始化 <see cref="T:System.Collections.Generic.Dictionary`2"/> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.Generic.IDictionary`2"/> 中复制的元素，并使用键类型的默认相等比较器。</summary>
<param name="dictionary"><see cref="T:System.Collections.Generic.IDictionary`2"/>，其元素被复制到新的 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="dictionary"/> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="dictionary"/> 包含一个或多个重复键。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
<summary>初始化 <see cref="T:System.Collections.Generic.Dictionary`2"/> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.Generic.IDictionary`2"/> 中复制的元素并使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>。</summary>
<param name="dictionary"><see cref="T:System.Collections.Generic.IDictionary`2"/>，其元素被复制到新的 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中。</param>
<param name="comparer">比较键时要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> 实现，或者为 null，以便为键类型使用默认的 <see cref="T:System.Collections.Generic.EqualityComparer`1"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="dictionary"/> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="dictionary"/> 包含一个或多个重复键。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
<summary>初始化 <see cref="T:System.Collections.Generic.Dictionary`2"/> 类的新实例，该实例为空且具有默认的初始容量，并使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>。</summary>
<param name="comparer">比较键时要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> 实现，或者为 null，以便为键类型使用默认的 <see cref="T:System.Collections.Generic.EqualityComparer`1"/>。</param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)">
<summary>初始化 <see cref="T:System.Collections.Generic.Dictionary`2"/> 类的新实例，该实例为空且具有指定的初始容量，并使用键类型的默认相等比较器。</summary>
<param name="capacity"><see cref="T:System.Collections.Generic.Dictionary`2"/> 可以包含的初始元素数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="capacity"/> 小于 0。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
<summary>初始化 <see cref="T:System.Collections.Generic.Dictionary`2"/> 类的新实例，该实例为空且具有指定的初始容量，并使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>。</summary>
<param name="capacity"><see cref="T:System.Collections.Generic.Dictionary`2"/> 可以包含的初始元素数。</param>
<param name="comparer">比较键时要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> 实现，或者为 null，以便为键类型使用默认的 <see cref="T:System.Collections.Generic.EqualityComparer`1"/>。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="capacity"/> 小于 0。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
<summary>将指定的键和值添加到字典中。</summary>
<param name="key">要添加的元素的键。</param>
<param name="value">要添加的元素的值。对于引用类型，该值可以为 null。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="key"/> 为 null。</exception>
<exception cref="T:System.ArgumentException"><see cref="T:System.Collections.Generic.Dictionary`2"/> 中已存在具有相同键的元素。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Clear">
<summary>从 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中移除所有的键和值。</summary>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Comparer">
<summary>获取用于确定字典中的键是否相等的 <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>。 </summary>
<returns>用于确定当前 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中的键是否相等并为键提供哈希值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> 泛型接口实现。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)">
<summary>确定 <see cref="T:System.Collections.Generic.Dictionary`2"/> 是否包含指定的键。</summary>
<returns>如果 <see cref="T:System.Collections.Generic.Dictionary`2"/> 包含具有指定键的元素，则为 true；否则为 false。</returns>
<param name="key">要在 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中查找的键。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="key"/> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)">
<summary>确定 <see cref="T:System.Collections.Generic.Dictionary`2"/> 是否包含特定值。</summary>
<returns>如果 <see cref="T:System.Collections.Generic.Dictionary`2"/> 包含具有指定值的元素，则为 true；否则为 false。</returns>
<param name="value">要在 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中查找的值。对于引用类型，该值可以为 null。</param>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Count">
<summary>获取 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中包含的键/值对的数目。</summary>
<returns>包含在 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中的键/值对的数目。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
<summary>返回一个循环访问 <see cref="T:System.Collections.Generic.Dictionary`2"/> 的枚举器。</summary>
<returns>用于 <see cref="T:System.Collections.Generic.Dictionary`2"/> 的 <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator"/> 结构。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Item(`0)">
<summary>获取或设置与指定的键相关联的值。</summary>
<returns>与指定的键相关联的值。如果找不到指定的键，get 操作便会引发 <see cref="T:System.Collections.Generic.KeyNotFoundException"/>，而 set 操作会创建一个具有指定键的新元素。</returns>
<param name="key">要获取或设置的值的键。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="key"/> 为 null。</exception>
<exception cref="T:System.Collections.Generic.KeyNotFoundException">已检索该属性，并且集合中不存在 <paramref name="key"/>。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Keys">
<summary>获取包含 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中的键的集合。</summary>
<returns>包含 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中的键的 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/>。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Remove(`0)">
<summary>从 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中移除所指定的键的值。</summary>
<returns>如果成功找到并移除该元素，则为 true；否则为 false。如果在 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中没有找到 <paramref name="key"/>，此方法则返回 false。</returns>
<param name="key">要移除的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="key"/> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
<summary>将指定值添加到具有指定键的 <see cref="T:System.Collections.Generic.ICollection`1"/> 中。</summary>
<param name="keyValuePair">表示要添加到 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中的键和值的 <see cref="T:System.Collections.Generic.KeyValuePair`2"/> 结构。</param>
<exception cref="T:System.ArgumentNullException"><paramref name="keyValuePair"/> 的键为 null。</exception>
<exception cref="T:System.ArgumentException"><see cref="T:System.Collections.Generic.Dictionary`2"/> 中已存在具有相同键的元素。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
<summary>确定 <see cref="T:System.Collections.Generic.ICollection`1"/> 是否包含特定的键和值。</summary>
<returns>如果 <paramref name="keyValuePair"/> 在 <see cref="T:System.Collections.Generic.ICollection`1"/> 中，则为 true；否则为 false。</returns>
<param name="keyValuePair">要在 <see cref="T:System.Collections.Generic.ICollection`1"/> 中查找的 <see cref="T:System.Collections.Generic.KeyValuePair`2"/> 结构。</param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
<summary>从指定的数组索引开始，将 <see cref="T:System.Collections.Generic.ICollection`1"/> 的元素复制到类型 <see cref="T:System.Collections.Generic.KeyValuePair`2"/> 的数组中。</summary>
<param name="array">类型 <see cref="T:System.Collections.Generic.KeyValuePair`2"/> 的一维数组，是从 <see cref="T:System.Collections.Generic.ICollection`1"/> 复制的 <see cref="T:System.Collections.Generic.KeyValuePair`2"/> 元素的目标数组。该数组的索引必须从零开始。</param>
<param name="index"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。-或- 源 <see cref="T:System.Collections.Generic.ICollection`1"/> 中的元素数大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾的可用空间。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{T}#IsReadOnly">
<summary>获取一个值，该值指示字典是否为只读。</summary>
<returns>如果 <see cref="T:System.Collections.Generic.ICollection`1"/> 为只读，则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.Dictionary`2"/> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
<summary>从字典中移除键和值。</summary>
<returns>如果成功找到并移除 <paramref name="keyValuePair"/> 所表示的键和值，则为 true；否则为 false。如果在 <see cref="T:System.Collections.Generic.ICollection`1"/> 中没有找到 <paramref name="keyValuePair"/>，此方法则返回 false。</returns>
<param name="keyValuePair">表示从 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中移除的键和值的 <see cref="T:System.Collections.Generic.KeyValuePair`2"/> 结构。</param>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
<summary>获取包含 <see cref="T:System.Collections.Generic.IDictionary`2"/> 的键的 <see cref="T:System.Collections.Generic.ICollection`1"/>。</summary>
<returns>包含 <see cref="T:System.Collections.Generic.IDictionary`2"/> 的键的类型 <paramref name="TKey"/> 的 <see cref="T:System.Collections.Generic.ICollection`1"/>。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
<summary>获取包含 <see cref="T:System.Collections.Generic.IDictionary`2"/> 中值的 <see cref="T:System.Collections.Generic.ICollection`1"/>。</summary>
<returns>包含 <see cref="T:System.Collections.Generic.IDictionary`2"/> 中的值的类型 <paramref name="TValue"/> 的 <see cref="T:System.Collections.Generic.ICollection`1"/>。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
<summary>返回一个循环访问集合的枚举器。</summary>
<returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/>。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
<summary>从指定的数组索引开始，将 <see cref="T:System.Collections.Generic.ICollection`1"/> 中的元素复制到一个数组中。</summary>
<param name="array">作为从 <see cref="T:System.Collections.Generic.ICollection`1"/> 复制的元素的目标数组的一维数组。该数组的索引必须从零开始。</param>
<param name="index"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。-或- <paramref name="index"/> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="array"/> 是多维的。-或-<paramref name="array"/> 没有从零开始的索引。-或-源 <see cref="T:System.Collections.Generic.ICollection`1"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。-或-源 <see cref="T:System.Collections.Generic.ICollection`1"/> 的类型无法自动转换为目标 <paramref name="array"/> 的类型。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized">
<summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全）。</summary>
<returns>如果同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全），则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.Dictionary`2"/> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot">
<summary>获取一个对象，该对象可以用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问。</summary>
<returns>可用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问的对象。 </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
<summary>将指定的键和值添加到字典中。</summary>
<param name="key">要用作键的对象。</param>
<param name="value">要用作值的对象。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="key"/> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="key"/> 属于不能分配给 <see cref="T:System.Collections.Generic.Dictionary`2"/> 的键类型 <paramref name="TKey"/> 的类型。-或-<paramref name="value"/> 属于不能分配给 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中的值类型 <paramref name="TValue"/> 的类型。-或-<see cref="T:System.Collections.Generic.Dictionary`2"/> 中已存在相同键的值。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)">
<summary>确定 <see cref="T:System.Collections.IDictionary"/> 是否包含具有指定键的元素。</summary>
<returns>如果 <see cref="T:System.Collections.IDictionary"/> 包含具有指定键的元素，则为 true；否则为 false。</returns>
<param name="key">要在 <see cref="T:System.Collections.IDictionary"/> 中查找的键。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="key"/> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
<summary>返回 <see cref="T:System.Collections.IDictionaryEnumerator"/> 的 <see cref="T:System.Collections.IDictionary"/>。</summary>
<returns>用于 <see cref="T:System.Collections.IDictionary"/> 的 <see cref="T:System.Collections.IDictionaryEnumerator"/>。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize">
<summary>获取一个值，该值指示 <see cref="T:System.Collections.IDictionary"/> 是否具有固定大小。</summary>
<returns>如果 <see cref="T:System.Collections.IDictionary"/> 具有固定大小，则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.Dictionary`2"/> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly">
<summary>获取一个值，该值指示 <see cref="T:System.Collections.IDictionary"/> 是否为只读。</summary>
<returns>如果 <see cref="T:System.Collections.IDictionary"/> 为只读，则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.Dictionary`2"/> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
<summary>获取或设置具有指定键的值。</summary>
<returns>与指定键关联的值，如果 <paramref name="key"/> 不在字典中或者 <paramref name="key"/> 属于不能分配给 <see cref="T:System.Collections.Generic.Dictionary`2"/> 的键类型 <paramref name="TKey"/> 的类型，则为 null。</returns>
<param name="key">要获取的值的键。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="key"/> 为 null。</exception>
<exception cref="T:System.ArgumentException">正在分配值，并且 <paramref name="key"/> 属于不能分配给 <see cref="T:System.Collections.Generic.Dictionary`2"/> 的键类型 <paramref name="TKey"/> 的类型。-或- 正在分配值，并且 <paramref name="value"/> 属于不能分配给 <see cref="T:System.Collections.Generic.Dictionary`2"/> 的键类型 <paramref name="TValue"/> 的类型。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys">
<summary>获取包含 <see cref="T:System.Collections.IDictionary"/> 的键的 <see cref="T:System.Collections.ICollection"/>。</summary>
<returns>一个 <see cref="T:System.Collections.ICollection"/>，它包含 <see cref="T:System.Collections.IDictionary"/> 的键。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)">
<summary>从 <see cref="T:System.Collections.IDictionary"/> 中移除所指定的键的元素。</summary>
<param name="key">要移除的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="key"/> 为 null。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values">
<summary>获取包含 <see cref="T:System.Collections.IDictionary"/> 中值的 <see cref="T:System.Collections.ICollection"/>。</summary>
<returns>一个 <see cref="T:System.Collections.ICollection"/>，它包含 <see cref="T:System.Collections.IDictionary"/> 中的值。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
<summary>返回一个循环访问集合的枚举器。</summary>
<returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/>。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)">
<summary>获取与指定的键相关联的值。</summary>
<returns>如果 <see cref="T:System.Collections.Generic.Dictionary`2"/> 包含具有指定键的元素，则为 true；否则为 false。</returns>
<param name="key">要获取的值的键。</param>
<param name="value">当此方法返回时，如果找到该键，便会包含与指定的键相关联的值；否则，包含 <paramref name="value"/> 参数的类型默认值。该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="key"/> 为 null。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Values">
<summary>获取包含 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中的值的集合。</summary>
<returns>包含 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中的值的 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/>。</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.Enumerator">
<summary>枚举 <see cref="T:System.Collections.Generic.Dictionary`2"/> 的元素。</summary>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.Current">
<summary>获取枚举器当前位置的元素。</summary>
<returns><see cref="T:System.Collections.Generic.Dictionary`2"/> 中位于该枚举器当前位置的元素。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.Dispose">
<summary>释放由 <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator"/> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.MoveNext">
<summary>使枚举器前进到 <see cref="T:System.Collections.Generic.Dictionary`2"/> 的下一个元素。</summary>
<returns>如果枚举器成功地推进到下一个元素，则为 true；如果枚举器越过集合的结尾，则为 false。</returns>
<exception cref="T:System.InvalidOperationException">在创建了枚举器后集合被修改了。 </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
<summary>获取枚举器当前位置的元素。</summary>
<returns>字典中位于枚举器当前位置的元素，如 <see cref="T:System.Collections.DictionaryEntry"/>。</returns>
<exception cref="T:System.InvalidOperationException">枚举器定位在该集合的第一个元素之前或最后一个元素之后。 </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
<summary>获取位于枚举器当前位置的元素的键。</summary>
<returns>字典中位于枚举器当前位置的元素的键。</returns>
<exception cref="T:System.InvalidOperationException">枚举器定位在该集合的第一个元素之前或最后一个元素之后。 </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
<summary>获取位于枚举器当前位置的元素的值。</summary>
<returns>字典中位于枚举器当前位置的元素的值。</returns>
<exception cref="T:System.InvalidOperationException">枚举器定位在该集合的第一个元素之前或最后一个元素之后。 </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Current">
<summary>获取枚举器当前位置的元素。</summary>
<returns>集合中位于枚举器当前位置的元素，如 <see cref="T:System.Object"/>。</returns>
<exception cref="T:System.InvalidOperationException">枚举器定位在该集合的第一个元素之前或最后一个元素之后。 </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
<summary>将枚举器设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
<exception cref="T:System.InvalidOperationException">在创建了枚举器后集合被修改了。 </exception>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.KeyCollection">
<summary>表示 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中键的集合。无法继承此类。</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
<summary>初始化 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> 类的新实例，该实例反映指定 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中的键。</summary>
<param name="dictionary"><see cref="T:System.Collections.Generic.Dictionary`2"/>，其键反映在新的 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> 中。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="dictionary"/> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
<summary>从指定数组索引开始，将 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> 元素复制到现有一维 <see cref="T:System.Array"/> 中。</summary>
<param name="array">作为从 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
<param name="index"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零。</exception>
<exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Count">
<summary>获取 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> 中包含的元素数量。</summary>
<returns><see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> 中包含的元素数。检索此属性的值的运算复杂度为 O(1)。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.GetEnumerator">
<summary>返回一个循环访问 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> 的枚举器。</summary>
<returns>用于 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> 的 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator"/>。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Add(`0)">
<summary>向 <see cref="T:System.Collections.Generic.ICollection`1"/> 对象添加项。此实现总是引发 <see cref="T:System.NotSupportedException"/>。</summary>
<param name="item">要添加到 <see cref="T:System.Collections.Generic.ICollection`1"/> 的对象。</param>
<exception cref="T:System.NotSupportedException">总是引发。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Clear">
<summary>从 <see cref="T:System.Collections.Generic.ICollection`1"/> 中移除所有项。此实现总是引发 <see cref="T:System.NotSupportedException"/>。</summary>
<exception cref="T:System.NotSupportedException">总是引发。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Contains(`0)">
<summary>确定 <see cref="T:System.Collections.Generic.ICollection`1"/> 是否包含特定值。</summary>
<returns>如果 <paramref name="item"/> 在 <see cref="T:System.Collections.Generic.ICollection`1"/> 中，则为 true；否则为 false。</returns>
<param name="item">要在 <see cref="T:System.Collections.Generic.ICollection`1"/> 中查找的对象。</param>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
<summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1"/> 是否为只读。</summary>
<returns>如果 <see cref="T:System.Collections.Generic.ICollection`1"/> 为只读，则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> 的默认实现中，此属性始终返回 true。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Remove(`0)">
<summary>从 <see cref="T:System.Collections.Generic.ICollection`1"/> 中移除第一次出现的特定对象。此实现总是引发 <see cref="T:System.NotSupportedException"/>。</summary>
<returns>如果从 <see cref="T:System.Collections.Generic.ICollection`1"/> 中成功移除了 <paramref name="item"/>，则为 true；否则为 false。如果在原始 <see cref="T:System.Collections.Generic.ICollection`1"/> 中没有找到 <paramref name="item"/>，此方法也会返回 false。</returns>
<param name="item">要从 <see cref="T:System.Collections.Generic.ICollection`1"/> 中移除的对象。</param>
<exception cref="T:System.NotSupportedException">总是引发。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
<summary>返回一个循环访问集合的枚举器。</summary>
<returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1"/>。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
<summary>从特定的 <see cref="T:System.Array"/> 索引处开始，将 <see cref="T:System.Collections.ICollection"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。</summary>
<param name="array">作为从 <see cref="T:System.Collections.ICollection"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
<param name="index"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="array"/> 是多维的。-或-<paramref name="array"/> 没有从零开始的索引。-或-源 <see cref="T:System.Collections.ICollection"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。-或-源 <see cref="T:System.Collections.ICollection"/> 的类型无法自动转换为目标 <paramref name="array"/> 的类型。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
<summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全）。</summary>
<returns>如果同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全），则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
<summary>获取一个对象，该对象可以用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问。</summary>
<returns>可用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问的对象。在 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> 的默认实现中，此属性始终返回当前实例。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
<summary>返回一个循环访问集合的枚举器。</summary>
<returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/>。</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator">
<summary>枚举 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> 的元素。</summary>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current">
<summary>获取枚举器当前位置的元素。</summary>
<returns><see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> 中位于该枚举器当前位置的元素。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Dispose">
<summary>释放由 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator"/> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext">
<summary>使枚举器前进到 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> 的下一个元素。</summary>
<returns>如果枚举器成功地推进到下一个元素，则为 true；如果枚举器越过集合的结尾，则为 false。</returns>
<exception cref="T:System.InvalidOperationException">在创建了枚举器后集合被修改了。 </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
<summary>获取枚举器当前位置的元素。</summary>
<returns>集合中位于枚举器当前位置的元素。</returns>
<exception cref="T:System.InvalidOperationException">枚举器定位在该集合的第一个元素之前或最后一个元素之后。 </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
<summary>将枚举器设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
<exception cref="T:System.InvalidOperationException">在创建了枚举器后集合被修改了。 </exception>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.ValueCollection">
<summary>表示 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中值的集合。无法继承此类。</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
<summary>初始化 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/> 类的新实例，该实例反映指定的 <see cref="T:System.Collections.Generic.Dictionary`2"/> 中的值。</summary>
<param name="dictionary"><see cref="T:System.Collections.Generic.Dictionary`2"/>，其值反映在新的 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/> 中。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="dictionary"/> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
<summary>从指定数组索引开始，将 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/> 元素复制到现有一维 <see cref="T:System.Array"/> 中。</summary>
<param name="array">作为从 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
<param name="index"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零。</exception>
<exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Count">
<summary>获取 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/> 中包含的元素数量。</summary>
<returns><see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/> 中包含的元素个数。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.GetEnumerator">
<summary>返回一个循环访问 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/> 的枚举器。</summary>
<returns>用于 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/> 的 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator"/>。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Add(`1)">
<summary>向 <see cref="T:System.Collections.Generic.ICollection`1"/> 对象添加项。此实现总是引发 <see cref="T:System.NotSupportedException"/>。</summary>
<param name="item">要添加到 <see cref="T:System.Collections.Generic.ICollection`1"/> 的对象。</param>
<exception cref="T:System.NotSupportedException">总是引发。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Clear">
<summary>从 <see cref="T:System.Collections.Generic.ICollection`1"/> 中移除所有项。此实现总是引发 <see cref="T:System.NotSupportedException"/>。</summary>
<exception cref="T:System.NotSupportedException">总是引发。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Contains(`1)">
<summary>确定 <see cref="T:System.Collections.Generic.ICollection`1"/> 是否包含特定值。</summary>
<returns>如果 <paramref name="item"/> 在 <see cref="T:System.Collections.Generic.ICollection`1"/> 中，则为 true；否则为 false。</returns>
<param name="item">要在 <see cref="T:System.Collections.Generic.ICollection`1"/> 中查找的对象。</param>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
<summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1"/> 是否为只读。</summary>
<returns>如果 <see cref="T:System.Collections.Generic.ICollection`1"/> 为只读，则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/> 的默认实现中，此属性始终返回 true。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Remove(`1)">
<summary>从 <see cref="T:System.Collections.Generic.ICollection`1"/> 中移除第一次出现的特定对象。此实现总是引发 <see cref="T:System.NotSupportedException"/>。</summary>
<returns>如果从 <see cref="T:System.Collections.Generic.ICollection`1"/> 中成功移除了 <paramref name="item"/>，则为 true；否则为 false。如果在原始 <see cref="T:System.Collections.Generic.ICollection`1"/> 中没有找到 <paramref name="item"/>，此方法也会返回 false。</returns>
<param name="item">要从 <see cref="T:System.Collections.Generic.ICollection`1"/> 中移除的对象。</param>
<exception cref="T:System.NotSupportedException">总是引发。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
<summary>返回一个循环访问集合的枚举器。</summary>
<returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1"/>。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
<summary>从特定的 <see cref="T:System.Array"/> 索引处开始，将 <see cref="T:System.Collections.ICollection"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。</summary>
<param name="array">作为从 <see cref="T:System.Collections.ICollection"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
<param name="index"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="array"/> 是多维的。-或-<paramref name="array"/> 没有从零开始的索引。-或-源 <see cref="T:System.Collections.ICollection"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。-或-源 <see cref="T:System.Collections.ICollection"/> 的类型无法自动转换为目标 <paramref name="array"/> 的类型。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
<summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全）。</summary>
<returns>如果同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全），则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
<summary>获取一个对象，该对象可以用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问。</summary>
<returns>可用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问的对象。在 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/> 的默认实现中，此属性始终返回当前实例。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
<summary>返回一个循环访问集合的枚举器。 </summary>
<returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/>。</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator">
<summary>枚举 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/> 的元素。</summary>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Current">
<summary>获取枚举器当前位置的元素。</summary>
<returns><see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/> 中位于该枚举器当前位置的元素。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Dispose">
<summary>释放由 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator"/> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.MoveNext">
<summary>使枚举器前进到 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/> 的下一个元素。</summary>
<returns>如果枚举器成功地推进到下一个元素，则为 true；如果枚举器越过集合的结尾，则为 false。</returns>
<exception cref="T:System.InvalidOperationException">在创建了枚举器后集合被修改了。 </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
<summary>获取枚举器当前位置的元素。</summary>
<returns>集合中位于枚举器当前位置的元素。</returns>
<exception cref="T:System.InvalidOperationException">枚举器定位在该集合的第一个元素之前或最后一个元素之后。 </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
<summary>将枚举器设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
<exception cref="T:System.InvalidOperationException">在创建了枚举器后集合被修改了。 </exception>
    </member>
    <member name="T:System.Collections.Generic.EqualityComparer`1">
<summary>为 <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> 泛型接口的实现提供基类。</summary>
<typeparam name="T">要比较的对象的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.#ctor">
<summary>初始化 <see cref="T:System.Collections.Generic.EqualityComparer`1"/> 类的新实例。</summary>
    </member>
    <member name="P:System.Collections.Generic.EqualityComparer`1.Default">
<summary>返回一个默认的相等比较器，用于比较此泛型参数指定的类型。</summary>
<returns><see cref="T:System.Collections.Generic.EqualityComparer`1"/> 类的类型为 <paramref name="T"/> 的默认实例。</returns>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)">
<summary>当在派生类中被重写时，确定两个类型为 <paramref name="T"/> 的对象是否相等。</summary>
<returns>如果指定的对象相等，则为 true；否则为 false。</returns>
<param name="x">要比较的第一个对象。</param>
<param name="y">要比较的第二个对象。</param>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.GetHashCode(`0)">
<summary>当在派生类中被重写时，用作指定对象的哈希算法和数据结构（如哈希表）的哈希函数。</summary>
<returns>指定对象的哈希代码。</returns>
<param name="obj">要为其获取哈希代码的对象。</param>
<exception cref="T:System.ArgumentNullException"><paramref name="obj"/> 的类型为引用类型，<paramref name="obj"/> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
<summary>确定指定的对象是否相等。</summary>
<returns>如果指定的对象相等，则为 true；否则为 false。</returns>
<param name="x">要比较的第一个对象。</param>
<param name="y">要比较的第二个对象。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="x"/> 或 <paramref name="y"/> 所属的类型无法被强制转换为类型 <paramref name="T"/>。</exception>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
<summary>返回指定对象的哈希代码。</summary>
<returns>指定对象的哈希代码。</returns>
<param name="obj"><see cref="T:System.Object"/>，将为其返回哈希代码。</param>
<exception cref="T:System.ArgumentNullException"><paramref name="obj"/> 的类型为引用类型并且 <paramref name="obj"/> 为 null。-或- <paramref name="obj"/> 所属的类型无法被强制转换为类型 <paramref name="T"/>。</exception>
    </member>
    <member name="T:System.Collections.Generic.ICollection`1">
<summary>定义操作泛型集合的方法。</summary>
<typeparam name="T">集合中元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Add(`0)">
<summary>向 <see cref="T:System.Collections.Generic.ICollection`1"/> 对象添加项。</summary>
<param name="item">要添加到 <see cref="T:System.Collections.Generic.ICollection`1"/> 的对象。</param>
<exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.Generic.ICollection`1"/> 为只读。</exception>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Clear">
<summary>从 <see cref="T:System.Collections.Generic.ICollection`1"/> 中移除所有项。</summary>
<exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.Generic.ICollection`1"/> 为只读。 </exception>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Contains(`0)">
<summary>确定 <see cref="T:System.Collections.Generic.ICollection`1"/> 是否包含特定值。</summary>
<returns>如果 <paramref name="item"/> 在 <see cref="T:System.Collections.Generic.ICollection`1"/> 中，则为 true；否则为 false。</returns>
<param name="item">要在 <see cref="T:System.Collections.Generic.ICollection`1"/> 中查找的对象。</param>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)">
<summary>从特定的 <see cref="T:System.Array"/> 索引处开始，将 <see cref="T:System.Collections.Generic.ICollection`1"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。</summary>
<param name="array">作为从 <see cref="T:System.Collections.Generic.ICollection`1"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
<param name="arrayIndex"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="arrayIndex"/> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="array"/> 是多维的。-或- 源 <see cref="T:System.Collections.Generic.ICollection`1"/> 中的元素数目大于从 <paramref name="arrayIndex"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。-或- 无法自动将类型 <paramref name="T"/> 强制转换为目标 <paramref name="array"/> 的类型。</exception>
    </member>
    <member name="P:System.Collections.Generic.ICollection`1.Count">
<summary>获取 <see cref="T:System.Collections.Generic.ICollection`1"/> 中包含的元素数量。</summary>
<returns><see cref="T:System.Collections.Generic.ICollection`1"/> 中包含的元素个数。</returns>
    </member>
    <member name="P:System.Collections.Generic.ICollection`1.IsReadOnly">
<summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1"/> 是否为只读。</summary>
<returns>如果 <see cref="T:System.Collections.Generic.ICollection`1"/> 为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Remove(`0)">
<summary>从 <see cref="T:System.Collections.Generic.ICollection`1"/> 中移除第一次出现的特定对象。</summary>
<returns>如果从 <see cref="T:System.Collections.Generic.ICollection`1"/> 中成功移除了 <paramref name="item"/>，则为 true；否则为 false。如果在原始 <see cref="T:System.Collections.Generic.ICollection`1"/> 中没有找到 <paramref name="item"/>，该方法也会返回 false。</returns>
<param name="item">要从 <see cref="T:System.Collections.Generic.ICollection`1"/> 中移除的对象。</param>
<exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.Generic.ICollection`1"/> 为只读。</exception>
    </member>
    <member name="T:System.Collections.Generic.IComparer`1">
<summary>定义类型为比较两个对象而实现的方法。</summary>
<typeparam name="T">要比较的对象的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)">
<summary>比较两个对象并返回一个值，指示一个对象是小于、等于还是大于另一个对象。</summary>
<returns>带符号整数，指示 <paramref name="x"/> 与 <paramref name="y"/> 的相对值，如下表所示。值 条件 小于 0 <paramref name="x"/> 小于 <paramref name="y"/>。0 <paramref name="x"/> 等于 <paramref name="y"/>。大于 0 <paramref name="x"/> 大于 <paramref name="y"/>。</returns>
<param name="x">要比较的第一个对象。</param>
<param name="y">要比较的第二个对象。</param>
    </member>
    <member name="T:System.Collections.Generic.IDictionary`2">
<summary>表示键/值对的泛型集合。</summary>
<typeparam name="TKey">字典中键的类型。</typeparam>
<typeparam name="TValue">字典中值的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
<summary>在 <see cref="T:System.Collections.Generic.IDictionary`2"/> 中添加一个带有所提供的键和值的元素。</summary>
<param name="key">用作要添加的元素的键的对象。</param>
<param name="value">作为要添加的元素的值的对象。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="key"/> 为 null。</exception>
<exception cref="T:System.ArgumentException"><see cref="T:System.Collections.Generic.IDictionary`2"/> 中已存在具有相同键的元素。</exception>
<exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.Generic.IDictionary`2"/> 为只读。</exception>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
<summary>确定 <see cref="T:System.Collections.Generic.IDictionary`2"/> 是否包含具有指定键的元素。</summary>
<returns>如果 <see cref="T:System.Collections.Generic.IDictionary`2"/> 包含具有键的元素，则为 true；否则为 false。</returns>
<param name="key">要在 <see cref="T:System.Collections.Generic.IDictionary`2"/> 中查找的键。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="key"/> 为 null。</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Item(`0)">
<summary>获取或设置具有指定键的元素。</summary>
<returns>带有指定键的元素。</returns>
<param name="key">要获取或设置的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="key"/> 为 null。</exception>
<exception cref="T:System.Collections.Generic.KeyNotFoundException">检索了属性但没有找到 <paramref name="key"/>。</exception>
<exception cref="T:System.NotSupportedException">设置该属性，而且 <see cref="T:System.Collections.Generic.IDictionary`2"/> 为只读。</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Keys">
<summary>获取包含 <see cref="T:System.Collections.Generic.IDictionary`2"/> 的键的 <see cref="T:System.Collections.Generic.ICollection`1"/>。</summary>
<returns>一个 <see cref="T:System.Collections.Generic.ICollection`1"/>，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2"/> 的对象的键。</returns>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
<summary>从 <see cref="T:System.Collections.Generic.IDictionary`2"/> 中移除所指定的键的元素。</summary>
<returns>如果成功移除此元素，则为 true；否则为 false。如果在原始 <see cref="T:System.Collections.Generic.IDictionary`2"/> 中没有找到 <paramref name="key"/>，此方法也会返回 false。</returns>
<param name="key">要移除的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="key"/> 为 null。</exception>
<exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.Generic.IDictionary`2"/> 为只读。</exception>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
<summary>获取与指定的键相关联的值。</summary>
<returns>如果实现 <see cref="T:System.Collections.Generic.IDictionary`2"/> 的对象包含具有指定键的元素，则为 true；否则为 false。</returns>
<param name="key">要获取其值的键。</param>
<param name="value">当此方法返回时，如果找到该键，便会返回与指定的键相关联的值；否则，会返回 <paramref name="value"/> 参数的类型默认值。该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="key"/> 为 null。</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Values">
<summary>获取包含 <see cref="T:System.Collections.Generic.IDictionary`2"/> 中值的 <see cref="T:System.Collections.Generic.ICollection`1"/>。</summary>
<returns>一个 <see cref="T:System.Collections.Generic.ICollection`1"/>，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2"/> 的对象中的值。</returns>
    </member>
    <member name="T:System.Collections.Generic.IEnumerable`1">
<summary>公开枚举器，该枚举器支持在指定类型的集合上进行简单迭代。</summary>
<typeparam name="T">要枚举的对象的类型。该类型参数是协变的。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
<summary>返回一个循环访问集合的枚举器。</summary>
<returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1"/>。</returns>
    </member>
    <member name="T:System.Collections.Generic.IEnumerator`1">
<summary>支持在泛型集合上进行简单迭代。</summary>
<typeparam name="T">要枚举的对象的类型。该类型参数是协变的。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IEnumerator`1.Current">
<summary>获取集合中位于枚举器当前位置的元素。</summary>
<returns>集合中位于枚举器当前位置的元素。</returns>
    </member>
    <member name="T:System.Collections.Generic.IEqualityComparer`1">
<summary>定义方法以支持对象的相等比较。</summary>
<typeparam name="T">要比较的对象的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的更多信息，请参阅 2678dc63-c7f9-4590-9ddc-0a4df684d42e。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)">
<summary>确定指定的对象是否相等。</summary>
<returns>如果指定的对象相等，则为 true；否则为 false。</returns>
<param name="x">要比较的第一个类型为 <paramref name="T"/> 的对象。</param>
<param name="y">要比较的第二个类型为 <paramref name="T"/> 的对象。</param>
    </member>
    <member name="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)">
<summary>返回指定对象的哈希代码。</summary>
<returns>指定对象的哈希代码。</returns>
<param name="obj"><see cref="T:System.Object"/>，将为其返回哈希代码。</param>
<exception cref="T:System.ArgumentNullException"><paramref name="obj"/> 的类型为引用类型，<paramref name="obj"/> 为 null。</exception>
    </member>
    <member name="T:System.Collections.Generic.IList`1">
<summary>表示可按照索引单独访问的一组对象。</summary>
<typeparam name="T">列表中元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IList`1.IndexOf(`0)">
<summary>确定 <see cref="T:System.Collections.Generic.IList`1"/> 中特定项的索引。</summary>
<returns>如果在列表中找到，则为 <paramref name="item"/> 的索引；否则为 -1。</returns>
<param name="item">要在 <see cref="T:System.Collections.Generic.IList`1"/> 中查找的对象。</param>
    </member>
    <member name="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)">
<summary>将一个项插入指定索引处的 <see cref="T:System.Collections.Generic.IList`1"/>。</summary>
<param name="index">应插入 <paramref name="item"/> 的位置的零始索引。</param>
<param name="item">要插入到 <see cref="T:System.Collections.Generic.IList`1"/> 中的对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 不是 <see cref="T:System.Collections.Generic.IList`1"/> 中的有效索引。</exception>
<exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.Generic.IList`1"/> 为只读。</exception>
    </member>
    <member name="P:System.Collections.Generic.IList`1.Item(System.Int32)">
<summary>获取或设置位于指定索引处的元素。</summary>
<returns>位于指定索引处的元素。</returns>
<param name="index">要获取或设置的元素从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 不是 <see cref="T:System.Collections.Generic.IList`1"/> 中的有效索引。</exception>
<exception cref="T:System.NotSupportedException">设置该属性，而且 <see cref="T:System.Collections.Generic.IList`1"/> 为只读。</exception>
    </member>
    <member name="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)">
<summary>移除指定索引处的 <see cref="T:System.Collections.Generic.IList`1"/> 项。</summary>
<param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 不是 <see cref="T:System.Collections.Generic.IList`1"/> 中的有效索引。</exception>
<exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.Generic.IList`1"/> 为只读。</exception>
    </member>
    <member name="T:System.Collections.Generic.KeyNotFoundException">
<summary>指定用于访问集合中元素的键与集合中的任何键都不匹配时所引发的异常。</summary>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor">
<summary>使用默认属性值初始化 <see cref="T:System.Collections.Generic.KeyNotFoundException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.Collections.Generic.KeyNotFoundException"/> 类的新实例。</summary>
<param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Collections.Generic.KeyNotFoundException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。</param>
<param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Collections.Generic.KeyValuePair`2">
<summary>定义可设置或检索的键/值对。</summary>
<typeparam name="TKey">键的类型。</typeparam>
<typeparam name="TValue">值的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.#ctor(`0,`1)">
<summary>用指定的键和值初始化 <see cref="T:System.Collections.Generic.KeyValuePair`2"/> 结构的新实例。</summary>
<param name="key">每个键/值对中定义的对象。</param>
<param name="value">与 <paramref name="key"/> 相关联的定义。</param>
    </member>
    <member name="P:System.Collections.Generic.KeyValuePair`2.Key">
<summary>获取键/值对中的键。</summary>
<returns>一个 <paramref name="TKey"/>，它是 <see cref="T:System.Collections.Generic.KeyValuePair`2"/> 的键。 </returns>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.ToString">
<summary>使用键和值的字符串表示形式返回 <see cref="T:System.Collections.Generic.KeyValuePair`2"/> 的字符串表示形式。</summary>
<returns><see cref="T:System.Collections.Generic.KeyValuePair`2"/> 的字符串表示形式，它包括键和值的字符串表示形式。</returns>
    </member>
    <member name="P:System.Collections.Generic.KeyValuePair`2.Value">
<summary>获取键/值对中的值。</summary>
<returns>一个 <paramref name="TValue"/>，它是 <see cref="T:System.Collections.Generic.KeyValuePair`2"/> 的值。 </returns>
    </member>
    <member name="T:System.Collections.Generic.List`1">
<summary>表示可通过索引访问的对象的强类型列表。提供用于对列表进行搜索、排序和操作的方法。</summary>
<typeparam name="T">列表中元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor">
<summary>初始化 <see cref="T:System.Collections.Generic.List`1"/> 类的新实例，该实例为空并且具有默认初始容量。</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
<summary>初始化 <see cref="T:System.Collections.Generic.List`1"/> 类的新实例，该实例包含从指定的集合中复制的元素并且其容量足以容纳所复制的元素数。</summary>
<param name="collection">一个集合，其元素被复制到新列表中。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="collection"/> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
<summary>初始化 <see cref="T:System.Collections.Generic.List`1"/> 类的新实例，该实例为空并且具有指定的初始容量。</summary>
<param name="capacity">新列表最初可以存储的元素数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="capacity"/> 小于 0。 </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Add(`0)">
<summary>将对象添加到 <see cref="T:System.Collections.Generic.List`1"/> 的结尾处。</summary>
<param name="item">要添加到 <see cref="T:System.Collections.Generic.List`1"/> 的末尾处的对象。对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
<summary>将指定集合的元素添加到 <see cref="T:System.Collections.Generic.List`1"/> 的末尾。</summary>
<param name="collection">一个集合，应将其元素添加到 <see cref="T:System.Collections.Generic.List`1"/> 的末尾。集合自身不能为 null，但它可以包含为 null 的元素（如果类型 <paramref name="T"/> 为引用类型）。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="collection"/> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.AsReadOnly">
<summary>返回当前集合的只读 <see cref="T:System.Collections.Generic.IList`1"/> 包装。</summary>
<returns>作为当前 <see cref="T:System.Collections.Generic.List`1"/> 周围的只读包装的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
<summary>使用指定的比较器在已排序 <see cref="T:System.Collections.Generic.List`1"/> 的某个元素范围中搜索元素，并返回该元素从零开始的索引。</summary>
<returns>如果找到 <paramref name="item"/>，则为已排序的 <see cref="T:System.Collections.Generic.List`1"/> 中 <paramref name="item"/> 的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="item"/> 的第一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.Collections.Generic.List`1.Count"/> 的按位求补。</returns>
<param name="index">要搜索的范围从零开始的起始索引。</param>
<param name="count">要搜索的范围的长度。</param>
<param name="item">要查找的对象。对于引用类型，该值可以为 null。</param>
<param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.Generic.IComparer`1"/> 实现，或者为 null，表示使用默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default"/>。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于 0。-或- <paramref name="count"/> 大于 0。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="index"/> 和 <paramref name="count"/> 不表示 <see cref="T:System.Collections.Generic.List`1"/> 中的有效范围。</exception>
      <exception cref="T:System.InvalidOperationException">
<paramref name="comparer"/> 为 null，且默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default"/> 找不到 <paramref name="T"/> 类型的 <see cref="T:System.IComparable`1"/> 泛型接口或 <see cref="T:System.IComparable"/> 接口的实现。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(`0)">
<summary>使用默认的比较器在整个已排序的 <see cref="T:System.Collections.Generic.List`1"/> 中搜索元素，并返回该元素从零开始的索引。</summary>
<returns>如果找到 <paramref name="item"/>，则为已排序的 <see cref="T:System.Collections.Generic.List`1"/> 中 <paramref name="item"/> 的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="item"/> 的第一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.Collections.Generic.List`1.Count"/> 的按位求补。</returns>
<param name="item">要查找的对象。对于引用类型，该值可以为 null。</param>
<exception cref="T:System.InvalidOperationException">默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default"/> 找不到 <paramref name="T"/> 类型的 <see cref="T:System.IComparable`1"/> 泛型接口或 <see cref="T:System.IComparable"/> 接口的实现。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
<summary>使用指定的比较器在整个已排序的 <see cref="T:System.Collections.Generic.List`1"/> 中搜索元素，并返回该元素从零开始的索引。</summary>
<returns>如果找到 <paramref name="item"/>，则为已排序的 <see cref="T:System.Collections.Generic.List`1"/> 中 <paramref name="item"/> 的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="item"/> 的第一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.Collections.Generic.List`1.Count"/> 的按位求补。</returns>
<param name="item">要查找的对象。对于引用类型，该值可以为 null。</param>
<param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.Generic.IComparer`1"/> 实现。-或- 为 null，表示使用默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default"/>。</param>
      <exception cref="T:System.InvalidOperationException">
<paramref name="comparer"/> 为 null，且默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default"/> 找不到 <paramref name="T"/> 类型的 <see cref="T:System.IComparable`1"/> 泛型接口或 <see cref="T:System.IComparable"/> 接口的实现。</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Capacity">
<summary>获取或设置该内部数据结构在不调整大小的情况下能够容纳的元素总数。</summary>
<returns>在需要调整大小之前 <see cref="T:System.Collections.Generic.List`1"/> 能够容纳的元素的数目。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
<see cref="P:System.Collections.Generic.List`1.Capacity"/> 设置为小于 <see cref="P:System.Collections.Generic.List`1.Count"/> 的值。 </exception>
<exception cref="T:System.OutOfMemoryException">系统中没有足够的可用内存。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Clear">
<summary>从 <see cref="T:System.Collections.Generic.List`1"/> 中移除所有元素。</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Contains(`0)">
<summary>确定某元素是否在 <see cref="T:System.Collections.Generic.List`1"/> 中。</summary>
<returns>如果 <paramref name="item"/> 在 <see cref="T:System.Collections.Generic.List`1"/> 中，则为 true；否则为 false。</returns>
<param name="item">要在 <see cref="T:System.Collections.Generic.List`1"/> 中查找的对象。对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
<summary>将一定范围的元素从 <see cref="T:System.Collections.Generic.List`1"/> 复制到兼容的一维数组中，从目标数组的指定索引位置开始放置。</summary>
<param name="index">源 <see cref="T:System.Collections.Generic.List`1"/> 中复制开始位置的从零开始的索引。</param>
<param name="array">作为从 <see cref="T:System.Collections.Generic.List`1"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
<param name="arrayIndex"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。</param>
<param name="count">要复制的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于 0。-或- <paramref name="arrayIndex"/> 大于 0。-或- <paramref name="count"/> 小于 0。 </exception>
<exception cref="T:System.ArgumentException">从 <paramref name="index"/> 到源 <see cref="T:System.Collections.Generic.List`1"/> 的末尾的元素数大于从 <paramref name="arrayIndex"/> 到目标 <paramref name="array"/> 的末尾的可用空间。 </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(`0[])">
<summary>将整个 <see cref="T:System.Collections.Generic.List`1"/> 复制到兼容的一维数组中，从目标数组的开头开始放置。</summary>
<param name="array">作为从 <see cref="T:System.Collections.Generic.List`1"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
<exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.Generic.List`1"/> 中的元素数大于目标 <paramref name="array"/> 可包含的元素数。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
<summary>将整个 <see cref="T:System.Collections.Generic.List`1"/> 复制到兼容的一维数组中，从目标数组的指定索引位置开始放置。</summary>
<param name="array">作为从 <see cref="T:System.Collections.Generic.List`1"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
<param name="arrayIndex"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="arrayIndex"/> 小于 0。</exception>
<exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.Generic.List`1"/> 中的元素数目大于从 <paramref name="arrayIndex"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Count">
<summary>获取 <see cref="T:System.Collections.Generic.List`1"/> 中实际包含的元素数。</summary>
<returns><see cref="T:System.Collections.Generic.List`1"/> 中实际包含的元素数。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
<summary>对 <see cref="T:System.Collections.Generic.List`1"/> 的每个元素执行指定的操作。</summary>
<param name="action">要对 <see cref="T:System.Collections.Generic.List`1"/> 的每个元素执行的 <see cref="T:System.Action`1"/> 委托。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="action"/> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.GetEnumerator">
<summary>返回一个循环访问 <see cref="T:System.Collections.Generic.List`1"/> 的枚举器。</summary>
<returns>用于 <see cref="T:System.Collections.Generic.List`1"/> 的 <see cref="T:System.Collections.Generic.List`1.Enumerator"/>。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
<summary>创建源 <see cref="T:System.Collections.Generic.List`1"/> 中的元素范围的浅表副本。</summary>
<returns>源 <see cref="T:System.Collections.Generic.List`1"/> 中的元素范围的浅表副本。</returns>
<param name="index">范围开始处的从零开始的 <see cref="T:System.Collections.Generic.List`1"/> 索引。</param>
<param name="count">范围中的元素数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于 0。-或- <paramref name="count"/> 大于 0。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="index"/> 和 <paramref name="count"/> 不表示 <see cref="T:System.Collections.Generic.List`1"/> 中元素的有效范围。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0)">
<summary>搜索指定的对象，并返回整个 <see cref="T:System.Collections.Generic.List`1"/> 中第一个匹配项的从零开始的索引。</summary>
<returns>如果在整个 <see cref="T:System.Collections.Generic.List`1"/> 中找到 <paramref name="item"/> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
<param name="item">要在 <see cref="T:System.Collections.Generic.List`1"/> 中查找的对象。对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
<summary>搜索指定的对象，并返回 <see cref="T:System.Collections.Generic.List`1"/> 中从指定索引到最后一个元素的元素范围内第一个匹配项的从零开始的索引。</summary>
<returns>如果在 <see cref="T:System.Collections.Generic.List`1"/> 中从 <paramref name="index"/> 到最后一个元素的元素范围内找到 <paramref name="item"/> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
<param name="item">要在 <see cref="T:System.Collections.Generic.List`1"/> 中查找的对象。对于引用类型，该值可以为 null。</param>
<param name="index">搜索的从零开始的起始索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 不在 <see cref="T:System.Collections.Generic.List`1"/> 的有效索引范围内。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
<summary>搜索指定的对象，并返回 <see cref="T:System.Collections.Generic.List`1"/> 中从指定索引开始包含指定个元素的这部分元素中第一个匹配项的从零开始的索引。</summary>
<returns>如果在 <see cref="T:System.Collections.Generic.List`1"/> 中从 <paramref name="index"/> 开始并包含 <paramref name="count"/> 个元素的元素范围内找到 <paramref name="item"/> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
<param name="item">要在 <see cref="T:System.Collections.Generic.List`1"/> 中查找的对象。对于引用类型，该值可以为 null。</param>
<param name="index">搜索的从零开始的起始索引。</param>
<param name="count">要搜索的部分中的元素数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 超出了 <see cref="T:System.Collections.Generic.List`1"/> 的有效索引范围。-或- <paramref name="count"/> 小于 0。-或-<paramref name="index"/> 和 <paramref name="count"/> 未指定 <see cref="T:System.Collections.Generic.List`1"/> 中的有效部分。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
<summary>将元素插入 <see cref="T:System.Collections.Generic.List`1"/> 的指定索引处。</summary>
<param name="index">应插入 <paramref name="item"/> 的位置的零始索引。</param>
<param name="item">要插入的对象。对于引用类型，该值可以为 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于 0。-或- <paramref name="index"/> 大于 <see cref="P:System.Collections.Generic.List`1.Count"/>。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
<summary>将集合中的某个元素插入 <see cref="T:System.Collections.Generic.List`1"/> 的指定索引处。</summary>
<param name="index">应在此处插入新元素的从零开始的索引。</param>
<param name="collection">一个集合，应将其元素插入到 <see cref="T:System.Collections.Generic.List`1"/> 中。集合自身不能为 null，但它可以包含为 null 的元素（如果类型 <paramref name="T"/> 为引用类型）。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="collection"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于 0。-或- <paramref name="index"/> 大于 <see cref="P:System.Collections.Generic.List`1.Count"/>。</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Item(System.Int32)">
<summary>获取或设置位于指定索引处的元素。</summary>
<returns>位于指定索引处的元素。</returns>
<param name="index">要获取或设置的元素从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于 0。-或- <paramref name="index"/> 等于或大于 <see cref="P:System.Collections.Generic.List`1.Count"/>。 </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
<summary>搜索指定的对象，并返回整个 <see cref="T:System.Collections.Generic.List`1"/> 中最后一个匹配项的从零开始的索引。</summary>
<returns>如果在整个 <see cref="T:System.Collections.Generic.List`1"/> 中找到 <paramref name="item"/> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
<param name="item">要在 <see cref="T:System.Collections.Generic.List`1"/> 中查找的对象。对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
<summary>搜索指定的对象，并返回 <see cref="T:System.Collections.Generic.List`1"/> 中从第一个元素到指定索引的元素范围内最后一个匹配项的从零开始的索引。</summary>
<returns>如果在 <see cref="T:System.Collections.Generic.List`1"/> 中从第一个元素到 <paramref name="index"/> 的元素范围内找到 <paramref name="item"/> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
<param name="item">要在 <see cref="T:System.Collections.Generic.List`1"/> 中查找的对象。对于引用类型，该值可以为 null。</param>
<param name="index">向后搜索的从零开始的起始索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 不在 <see cref="T:System.Collections.Generic.List`1"/> 的有效索引范围内。 </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
<summary>搜索指定的对象，并返回 <see cref="T:System.Collections.Generic.List`1"/> 中到指定索引为止包含指定个元素的这部分元素中最后一个匹配项的从零开始的索引。</summary>
<returns>如果在 <see cref="T:System.Collections.Generic.List`1"/> 中包含 <paramref name="count"/> 个元素、在 <paramref name="index"/> 处结尾的元素范围内找到 <paramref name="item"/> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
<param name="item">要在 <see cref="T:System.Collections.Generic.List`1"/> 中查找的对象。对于引用类型，该值可以为 null。</param>
<param name="index">向后搜索的从零开始的起始索引。</param>
<param name="count">要搜索的部分中的元素数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 超出了 <see cref="T:System.Collections.Generic.List`1"/> 的有效索引范围。-或- <paramref name="count"/> 小于 0。-或-<paramref name="index"/> 和 <paramref name="count"/> 未指定 <see cref="T:System.Collections.Generic.List`1"/> 中的有效部分。 </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Remove(`0)">
<summary>从 <see cref="T:System.Collections.Generic.List`1"/> 中移除第一次出现的特定对象。</summary>
<returns>如果 <paramref name="item"/> 成功移除，则为 true；否则为 false。如果在 <see cref="T:System.Collections.Generic.List`1"/> 中没有找到 <paramref name="item"/>，该方法也会返回 false。</returns>
<param name="item">要从 <see cref="T:System.Collections.Generic.List`1"/> 中移除的对象。对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
<summary>移除 <see cref="T:System.Collections.Generic.List`1"/> 的指定索引处的元素。</summary>
<param name="index">要移除的元素的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于 0。-或- <paramref name="index"/> 等于或大于 <see cref="P:System.Collections.Generic.List`1.Count"/>。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
<summary>从 <see cref="T:System.Collections.Generic.List`1"/> 中移除一定范围的元素。</summary>
<param name="index">要移除的元素的范围从零开始的起始索引。</param>
<param name="count">要移除的元素数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于 0。-或- <paramref name="count"/> 大于 0。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="index"/> 和 <paramref name="count"/> 不表示 <see cref="T:System.Collections.Generic.List`1"/> 中元素的有效范围。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Reverse">
<summary>将整个 <see cref="T:System.Collections.Generic.List`1"/> 中元素的顺序反转。</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
<summary>将指定范围中元素的顺序反转。</summary>
<param name="index">要反转的范围的从零开始的起始索引。</param>
<param name="count">要反转的范围内的元素数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于 0。-或- <paramref name="count"/> 大于 0。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="index"/> 和 <paramref name="count"/> 不表示 <see cref="T:System.Collections.Generic.List`1"/> 中元素的有效范围。 </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort">
<summary>使用默认比较器对整个 <see cref="T:System.Collections.Generic.List`1"/> 中的元素进行排序。</summary>
<exception cref="T:System.InvalidOperationException">默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default"/> 找不到 <paramref name="T"/> 类型的 <see cref="T:System.IComparable`1"/> 泛型接口或 <see cref="T:System.IComparable"/> 接口的实现。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
<summary>使用指定比较器对整个 <see cref="T:System.Collections.Generic.List`1"/> 中的元素进行排序。</summary>
<param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.Generic.IComparer`1"/> 实现，或者为 null，表示使用默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default"/>。</param>
      <exception cref="T:System.InvalidOperationException">
<paramref name="comparer"/> 为 null，且默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default"/> 找不到 <paramref name="T"/> 类型的 <see cref="T:System.IComparable`1"/> 泛型接口或 <see cref="T:System.IComparable"/> 接口的实现。</exception>
<exception cref="T:System.ArgumentException"><paramref name="comparer"/> 的实现导致排序时出现错误。例如，将某个项与其自身进行比较时，<paramref name="comparer"/> 可能不返回 0。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
<summary>使用指定 <see cref="T:System.Comparison`1"/> 对整个 <see cref="T:System.Collections.Generic.List`1"/> 中的元素进行排序。</summary>
<param name="comparison">比较元素时要使用的 <see cref="T:System.Comparison`1"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="comparison"/> 为 null。</exception>
<exception cref="T:System.ArgumentException"><paramref name="comparison"/> 的实现导致排序时出现错误。例如，将某个项与其自身进行比较时，<paramref name="comparison"/> 可能不返回 0。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
<summary>使用指定的比较器对 <see cref="T:System.Collections.Generic.List`1"/> 中某个范围内的元素进行排序。</summary>
<param name="index">要排序的范围的从零开始的起始索引。</param>
<param name="count">要排序的范围的长度。</param>
<param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.Generic.IComparer`1"/> 实现，或者为 null，表示使用默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default"/>。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于 0。-或- <paramref name="count"/> 大于 0。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="index"/> 和 <paramref name="count"/> 未指定 <see cref="T:System.Collections.Generic.List`1"/> 中的有效范围。-或- <paramref name="comparer"/> 的实现导致排序时出现错误。例如，将某个项与其自身进行比较时，<paramref name="comparer"/> 可能不返回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
<paramref name="comparer"/> 为 null，且默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default"/> 找不到 <paramref name="T"/> 类型的 <see cref="T:System.IComparable`1"/> 泛型接口或 <see cref="T:System.IComparable"/> 接口的实现。</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
<summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1"/> 是否为只读。</summary>
<returns>如果 <see cref="T:System.Collections.Generic.ICollection`1"/> 为只读，则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.List`1"/> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
<summary>返回一个循环访问集合的枚举器。</summary>
<returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1"/>。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
<summary>从特定的 <see cref="T:System.Array"/> 索引处开始，将 <see cref="T:System.Collections.ICollection"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。</summary>
<param name="array">作为从 <see cref="T:System.Collections.ICollection"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
<param name="arrayIndex"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="arrayIndex"/> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="array"/> 是多维的。-或-<paramref name="array"/> 没有从零开始的索引。-或-源 <see cref="T:System.Collections.ICollection"/> 中的元素数目大于从 <paramref name="arrayIndex"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。-或-源 <see cref="T:System.Collections.ICollection"/> 的类型无法自动转换为目标 <paramref name="array"/> 的类型。</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
<summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全）。</summary>
<returns>如果同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全），则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.List`1"/> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
<summary>获取一个对象，该对象可以用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问。</summary>
<returns>可用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问的对象。在 <see cref="T:System.Collections.Generic.List`1"/> 的默认实现中，此属性始终返回当前实例。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
<summary>返回一个循环访问集合的枚举器。</summary>
<returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/>。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
<summary>向 <see cref="T:System.Collections.IList"/> 对象添加项。</summary>
<returns>新元素的插入位置。</returns>
<param name="item">要添加到此 <see cref="T:System.Collections.IList"/> 的 <see cref="T:System.Object"/>。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="item"/> 属于不能分配给 <see cref="T:System.Collections.IList"/> 的类型。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)">
<summary>确定 <see cref="T:System.Collections.IList"/> 是否包含特定值。</summary>
<returns>如果 <paramref name="item"/> 在 <see cref="T:System.Collections.IList"/> 中，则为 true；否则为 false。</returns>
<param name="item">要在 <see cref="T:System.Collections.IList"/> 中查找的 <see cref="T:System.Object"/>。</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
<summary>确定 <see cref="T:System.Collections.IList"/> 中特定项的索引。</summary>
<returns>如果在列表中找到，则为 <paramref name="item"/> 的索引；否则为 -1。</returns>
<param name="item">要在 <see cref="T:System.Collections.IList"/> 中查找的对象。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="item"/> 属于不能分配给 <see cref="T:System.Collections.IList"/> 的类型。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
<summary>将一个项插入指定索引处的 <see cref="T:System.Collections.IList"/>。</summary>
<param name="index">应插入 <paramref name="item"/> 的位置的零始索引。</param>
<param name="item">要插入到 <see cref="T:System.Collections.IList"/> 中的对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 不是 <see cref="T:System.Collections.IList"/> 中的有效索引。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="item"/> 属于不能分配给 <see cref="T:System.Collections.IList"/> 的类型。</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
<summary>获取一个值，该值指示 <see cref="T:System.Collections.IList"/> 是否具有固定大小。</summary>
<returns>如果 <see cref="T:System.Collections.IList"/> 具有固定大小，则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.List`1"/> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
<summary>获取一个值，该值指示 <see cref="T:System.Collections.IList"/> 是否为只读。</summary>
<returns>如果 <see cref="T:System.Collections.IList"/> 为只读，则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.List`1"/> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
<summary>获取或设置位于指定索引处的元素。</summary>
<returns>位于指定索引处的元素。</returns>
<param name="index">要获取或设置的元素从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 不是 <see cref="T:System.Collections.IList"/> 中的有效索引。</exception>
<exception cref="T:System.ArgumentException">已设置属性，且 <paramref name="value"/> 属于不能对 <see cref="T:System.Collections.IList"/> 赋值的类型。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)">
<summary>从 <see cref="T:System.Collections.IList"/> 中移除第一次出现的特定对象。</summary>
<param name="item">要从 <see cref="T:System.Collections.IList"/> 中移除的对象。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="item"/> 属于不能分配给 <see cref="T:System.Collections.IList"/> 的类型。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.ToArray">
<summary>将 <see cref="T:System.Collections.Generic.List`1"/> 的元素复制到新数组中。</summary>
<returns>一个数组，它包含 <see cref="T:System.Collections.Generic.List`1"/> 的元素的副本。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.TrimExcess">
<summary>将容量设置为 <see cref="T:System.Collections.Generic.List`1"/> 中的实际元素数目（如果该数目小于阈值）。</summary>
    </member>
    <member name="T:System.Collections.Generic.List`1.Enumerator">
<summary>枚举 <see cref="T:System.Collections.Generic.List`1"/> 的元素。</summary>
    </member>
    <member name="P:System.Collections.Generic.List`1.Enumerator.Current">
<summary>获取枚举器当前位置的元素。</summary>
<returns><see cref="T:System.Collections.Generic.List`1"/> 中位于该枚举器当前位置的元素。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.Dispose">
<summary>释放由 <see cref="T:System.Collections.Generic.List`1.Enumerator"/> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.MoveNext">
<summary>使枚举器前进到 <see cref="T:System.Collections.Generic.List`1"/> 的下一个元素。</summary>
<returns>如果枚举器成功地推进到下一个元素，则为 true；如果枚举器越过集合的结尾，则为 false。</returns>
<exception cref="T:System.InvalidOperationException">在创建了枚举器后集合被修改了。 </exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Current">
<summary>获取枚举器当前位置的元素。</summary>
<returns><see cref="T:System.Collections.Generic.List`1"/> 中位于该枚举器当前位置的元素。</returns>
<exception cref="T:System.InvalidOperationException">枚举器定位在该集合的第一个元素之前或最后一个元素之后。 </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Reset">
<summary>将枚举器设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
<exception cref="T:System.InvalidOperationException">在创建了枚举器后集合被修改了。 </exception>
    </member>
    <member name="T:System.Collections.ObjectModel.Collection`1">
<summary>为泛型集合提供基类。</summary>
<typeparam name="T">集合中的元素类型。</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.#ctor">
<summary>初始化为空的 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.#ctor(System.Collections.Generic.IList{`0})">
<summary>将 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 类的新实例初始化为指定列表的包装。</summary>
<param name="list">由新的集合包装的列表。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="list"/> 为 null。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Add(`0)">
<summary>将对象添加到 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的末尾处。 </summary>
<param name="item">要添加到 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的末尾处的对象。对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Clear">
<summary>从 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中移除所有元素。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.ClearItems">
<summary>从 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中移除所有元素。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Contains(`0)">
<summary>确定某元素是否在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中。</summary>
<returns>如果 <paramref name="item"/> 在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中，则为 true；否则为 false。</returns>
<param name="item">要在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中查找的对象。对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)">
<summary>从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 复制到兼容的一维 <see cref="T:System.Array"/>。</summary>
<param name="array">作为从 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
<param name="index"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。-或-<paramref name="index"/> 小于零。</exception>
<exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Count">
<summary>获取 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中实际包含的元素数。</summary>
<returns><see cref="T:System.Collections.ObjectModel.Collection`1"/> 中实际包含的元素数。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
<summary>返回一个循环访问 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的枚举器。</summary>
<returns>用于 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的 <see cref="T:System.Collections.Generic.IEnumerator`1"/>。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)">
<summary>搜索指定的对象，并返回整个 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中第一个匹配项的从零开始的索引。</summary>
<returns>如果在整个 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中找到 <paramref name="item"/> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
<param name="item">要在 <see cref="T:System.Collections.Generic.List`1"/> 中查找的对象。对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)">
<summary>将元素插入 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的指定索引处。</summary>
<param name="index">应插入 <paramref name="item"/> 的位置的零始索引。</param>
<param name="item">要插入的对象。对于引用类型，该值可以为 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零。-或- <paramref name="index"/> 大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)">
<summary>将元素插入 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的指定索引处。</summary>
<param name="index">应插入 <paramref name="item"/> 的位置的零始索引。</param>
<param name="item">要插入的对象。对于引用类型，该值可以为 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零。-或- <paramref name="index"/> 大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)">
<summary>获取或设置位于指定索引处的元素。</summary>
<returns>位于指定索引处的元素。</returns>
<param name="index">要获取或设置的元素从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零。-或- <paramref name="index"/> 等于或大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Items">
<summary>获取 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 周围的 <see cref="T:System.Collections.Generic.IList`1"/> 包装。</summary>
<returns><see cref="T:System.Collections.ObjectModel.Collection`1"/> 周围的 <see cref="T:System.Collections.Generic.IList`1"/> 包装。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Remove(`0)">
<summary>从 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中移除第一次出现的特定对象。</summary>
<returns>如果 <paramref name="item"/> 成功移除，则为 true；否则为 false。如果在原始 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中没有找到 <paramref name="item"/>，此方法也会返回 false。</returns>
<param name="item">要从 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中移除的对象。对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)">
<summary>移除 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的指定索引处的元素。</summary>
<param name="index">要移除的元素的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零。-或- <paramref name="index"/> 等于或大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)">
<summary>移除 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的指定索引处的元素。</summary>
<param name="index">要移除的元素的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零。-或- <paramref name="index"/> 等于或大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)">
<summary>替换指定索引处的元素。</summary>
<param name="index">待替换元素的从零开始的索引。</param>
<param name="item">位于指定索引处的元素的新值。对于引用类型，该值可以为 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零。-或- <paramref name="index"/> 大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
<summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1"/> 是否为只读。</summary>
<returns>如果 <see cref="T:System.Collections.Generic.ICollection`1"/> 为只读，则为 true；否则为 false。在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
<summary>从特定的 <see cref="T:System.Array"/> 索引处开始，将 <see cref="T:System.Collections.ICollection"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。</summary>
<param name="array">作为从 <see cref="T:System.Collections.ICollection"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
<param name="index"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="array"/> 是多维的。-或-<paramref name="array"/> 没有从零开始的索引。-或-源 <see cref="T:System.Collections.ICollection"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。-或-源 <see cref="T:System.Collections.ICollection"/> 的类型无法自动转换为目标 <paramref name="array"/> 的类型。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized">
<summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全）。</summary>
<returns>如果同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全），则为 true；否则为 false。在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot">
<summary>获取一个对象，该对象可以用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问。</summary>
<returns>可用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问的对象。在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的默认实现中，此属性始终返回当前实例。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
<summary>返回一个循环访问集合的枚举器。</summary>
<returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/>。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)">
<summary>向 <see cref="T:System.Collections.IList"/> 对象添加项。</summary>
<returns>新元素的插入位置。</returns>
<param name="value">要添加到此 <see cref="T:System.Collections.IList"/> 的 <see cref="T:System.Object"/>。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="value"/> 属于不能分配给 <see cref="T:System.Collections.IList"/> 的类型。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)">
<summary>确定 <see cref="T:System.Collections.IList"/> 是否包含特定值。</summary>
<returns>如果 <see cref="T:System.Object"/> 在 <see cref="T:System.Collections.IList"/> 中，则为 true；否则为 false。</returns>
<param name="value">要在 <see cref="T:System.Collections.IList"/> 中查找的 <see cref="T:System.Object"/>。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="value"/> 属于不能分配给 <see cref="T:System.Collections.IList"/> 的类型。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)">
<summary>确定 <see cref="T:System.Collections.IList"/> 中特定项的索引。</summary>
<returns>如果在列表中找到，则为 <paramref name="value"/> 的索引；否则为 -1。 </returns>
<param name="value">要在 <see cref="T:System.Collections.IList"/> 中查找的 <see cref="T:System.Object"/>。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="value"/> 属于不能分配给 <see cref="T:System.Collections.IList"/> 的类型。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
<summary>将项插入 <see cref="T:System.Collections.IList"/> 的指定索引处。</summary>
<param name="index">应插入 <paramref name="value"/> 的位置的零始索引。</param>
<param name="value">要插入到 <see cref="T:System.Collections.IList"/> 中的 <see cref="T:System.Object"/>。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 不是 <see cref="T:System.Collections.IList"/> 中的有效索引。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="value"/> 属于不能分配给 <see cref="T:System.Collections.IList"/> 的类型。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize">
<summary>获取一个值，该值指示 <see cref="T:System.Collections.IList"/> 是否具有固定大小。</summary>
<returns>如果 <see cref="T:System.Collections.IList"/> 具有固定大小，则为 true；否则为 false。在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly">
<summary>获取一个值，该值指示 <see cref="T:System.Collections.IList"/> 是否为只读。</summary>
<returns>如果 <see cref="T:System.Collections.IList"/> 为只读，则为 true；否则为 false。在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)">
<summary>获取或设置位于指定索引处的元素。</summary>
<returns>位于指定索引处的元素。</returns>
<param name="index">要获取或设置的元素从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 不是 <see cref="T:System.Collections.IList"/> 中的有效索引。</exception>
<exception cref="T:System.ArgumentException">已设置属性，且 <paramref name="value"/> 属于不能对 <see cref="T:System.Collections.IList"/> 赋值的类型。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)">
<summary>从 <see cref="T:System.Collections.IList"/> 中移除第一次出现的特定对象。</summary>
<param name="value">要从 <see cref="T:System.Collections.IList"/> 中移除的 <see cref="T:System.Object"/>。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="value"/> 属于不能分配给 <see cref="T:System.Collections.IList"/> 的类型。</exception>
    </member>
    <member name="T:System.Collections.ObjectModel.KeyedCollection`2">
<summary>提供集合键嵌入在值中的集合的抽象基类。</summary>
<typeparam name="TKey">集合中的键的类型。</typeparam>
<typeparam name="TItem">集合中的项的类型。</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
<summary>初始化使用默认相等比较器的 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
<summary>初始化使用指定相等比较器的 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2"/> 类的新实例。</summary>
<param name="comparer">比较键时要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> 泛型接口的实现，如果为 null，则使用从 <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> 获取的该类型的键的默认相等比较器。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
<summary>初始化 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2"/> 类的新实例，该实例使用指定的相等比较器并在超过指定阈值时创建一个查找字典。</summary>
<param name="comparer">比较键时要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> 泛型接口的实现，如果为 null，则使用从 <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> 获取的该类型的键的默认相等比较器。</param>
<param name="dictionaryCreationThreshold">在不创建查找字典的情况下集合可容纳的元素的数目（0 表示添加第一项时创建查找字典）；或者为 -1，表示指定永远不会创建查找字典。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="dictionaryCreationThreshold"/> 小于 -1。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
<summary>更改与查找字典中指定元素相关联的键。</summary>
<param name="item">要更改其键的元素。</param>
<param name="newKey"><paramref name="item"/> 的新键。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="item"/> 为 null。-或- <paramref name="key"/> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="item"/> 未找到。-或-<paramref name="key"/> 已存在于 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2"/> 中。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
<summary>从 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2"/> 中移除所有元素。</summary>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer">
<summary>获取用于确定集合中的键是否相等的泛型相等比较器。</summary>
<returns>用于确定集合中的键是否相等的 <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> 泛型接口的实现。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
<summary>确定集合是否包含具有指定键的元素。</summary>
<returns>如果 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2"/> 包含具有指定键的元素，则为 true；否则为 false。</returns>
<param name="key">要在 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2"/> 中查找的键。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="key"/> 为 null。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
<summary>获取 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2"/> 的查找字典。</summary>
<returns><see cref="T:System.Collections.ObjectModel.KeyedCollection`2"/> 的查找字典（如果存在），否则为 null。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
<summary>在派生类中实现时，将从指定元素提取键。</summary>
<returns>指定元素的键。</returns>
<param name="item">从中提取键的元素。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
<summary>将元素插入 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2"/> 的指定索引处。</summary>
<param name="index">应插入 <paramref name="item"/> 的位置的零始索引。</param>
<param name="item">要插入的对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于 0。-或- <paramref name="index"/> 大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
<summary>获取具有指定键的元素。 </summary>
<returns>带有指定键的元素。如果未找到具有指定键的元素，则引发异常。</returns>
<param name="key">要获取的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="key"/> 为 null。</exception>
<exception cref="T:System.Collections.Generic.KeyNotFoundException">集合中不存在具有指定键的元素。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
<summary>从 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2"/> 中移除所指定的键的元素。</summary>
<returns>如果成功移除此元素，则为 true；否则为 false。如果在 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2"/> 中没有找到 <paramref name="key"/>，该方法也会返回 false。</returns>
<param name="key">要移除的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="key"/> 为 null。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
<summary>移除 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2"/> 的指定索引处的元素。</summary>
<param name="index">要移除的元素的索引。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
<summary>使用指定项替换指定索引处的项。</summary>
<param name="index">要替换的项的从零开始的索引。</param>
<param name="item">新项。</param>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyCollection`1">
<summary>为泛型只读集合提供基类。</summary>
<typeparam name="T">集合中的元素类型。</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IList{`0})">
<summary>初始化 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> 类的新实例，该实例是指定列表周围的只读包装。</summary>
<param name="list">要包装的列表。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="list"/> 为 null。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)">
<summary>确定某元素是否在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> 中。</summary>
<returns>如果 <paramref name="value"/> 在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> 中，则为 true；否则为 false。</returns>
<param name="value">要在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> 中查找的对象。对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
<summary>从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> 复制到兼容的一维 <see cref="T:System.Array"/>。</summary>
<param name="array">作为从 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
<param name="index"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零。</exception>
<exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Count">
<summary>获取 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> 实例中包含的元素数量。</summary>
<returns>包含在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> 实例中的元素数。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator">
<summary>返回一个循环访问 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> 的枚举器。</summary>
<returns>用于 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> 的 <see cref="T:System.Collections.Generic.IEnumerator`1"/>。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)">
<summary>搜索指定的对象，并返回整个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> 中第一个匹配项的从零开始的索引。</summary>
<returns>如果在整个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> 中找到 <paramref name="item"/> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
<param name="value">要在 <see cref="T:System.Collections.Generic.List`1"/> 中查找的对象。对于引用类型，该值可以为 null。</param>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Item(System.Int32)">
<summary>获取指定索引处的元素。</summary>
<returns>位于指定索引处的元素。</returns>
<param name="index">要获取的元素的索引（索引从零开始）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零。-或- <paramref name="index"/> 等于或大于 <see cref="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Count"/>。 </exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Items">
<summary>返回 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> 包装的 <see cref="T:System.Collections.Generic.IList`1"/>。</summary>
<returns><see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> 包装的 <see cref="T:System.Collections.Generic.IList`1"/>。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)">
<summary>向 <see cref="T:System.Collections.Generic.ICollection`1"/> 对象添加项。此实现总是引发 <see cref="T:System.NotSupportedException"/>。</summary>
<param name="value">要添加到 <see cref="T:System.Collections.Generic.ICollection`1"/> 的对象。</param>
<exception cref="T:System.NotSupportedException">总是引发。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear">
<summary>从 <see cref="T:System.Collections.Generic.ICollection`1"/> 中移除所有项。此实现总是引发 <see cref="T:System.NotSupportedException"/>。</summary>
<exception cref="T:System.NotSupportedException">总是引发。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
<summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1"/> 是否为只读。</summary>
<returns>如果 <see cref="T:System.Collections.Generic.ICollection`1"/> 为只读，则为 true；否则为 false。在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> 的默认实现中，此属性始终返回 true。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
<summary>从 <see cref="T:System.Collections.Generic.ICollection`1"/> 中移除第一次出现的特定对象。此实现总是引发 <see cref="T:System.NotSupportedException"/>。</summary>
<returns>如果从 <see cref="T:System.Collections.Generic.ICollection`1"/> 中成功移除了 <paramref name="value"/>，则为 true；否则为 false。</returns>
<param name="value">要从 <see cref="T:System.Collections.Generic.ICollection`1"/> 中移除的对象。</param>
<exception cref="T:System.NotSupportedException">总是引发。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
<summary>将一个项插入指定索引处的 <see cref="T:System.Collections.Generic.IList`1"/>。此实现总是引发 <see cref="T:System.NotSupportedException"/>。</summary>
<param name="index">应插入 <paramref name="value"/> 的位置的零始索引。</param>
<param name="value">要插入到 <see cref="T:System.Collections.Generic.IList`1"/> 中的对象。</param>
<exception cref="T:System.NotSupportedException">总是引发。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
<summary>获取或设置位于指定索引处的元素。</summary>
<returns>位于指定索引处的元素。</returns>
<param name="index">要获取或设置的元素从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 不是 <see cref="T:System.Collections.Generic.IList`1"/> 中的有效索引。</exception>
<exception cref="T:System.NotSupportedException">如果设置了该属性，则总是引发此异常。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
<summary>移除指定索引处的 <see cref="T:System.Collections.Generic.IList`1"/> 项。此实现总是引发 <see cref="T:System.NotSupportedException"/>。</summary>
<param name="index">要移除的项的从零开始的索引。</param>
<exception cref="T:System.NotSupportedException">总是引发。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
<summary>从特定的 <see cref="T:System.Array"/> 索引处开始，将 <see cref="T:System.Collections.ICollection"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。</summary>
<param name="array">作为从 <see cref="T:System.Collections.ICollection"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
<param name="index"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="array"/> 是多维的。-或-<paramref name="array"/> 没有从零开始的索引。-或-源 <see cref="T:System.Collections.ICollection"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。-或-源 <see cref="T:System.Collections.ICollection"/> 的类型无法自动转换为目标 <paramref name="array"/> 的类型。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized">
<summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全）。</summary>
<returns>如果同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全），则为 true；否则为 false。在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#SyncRoot">
<summary>获取一个对象，该对象可以用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问。</summary>
<returns>可用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问的对象。在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> 的默认实现中，此属性始终返回当前实例。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
<summary>返回一个循环访问集合的枚举器。</summary>
<returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/>。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add(System.Object)">
<summary>向 <see cref="T:System.Collections.IList"/> 对象添加项。此实现总是引发 <see cref="T:System.NotSupportedException"/>。</summary>
<returns>新元素的插入位置。</returns>
<param name="value">要添加到此 <see cref="T:System.Collections.IList"/> 的 <see cref="T:System.Object"/>。</param>
<exception cref="T:System.NotSupportedException">总是引发。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear">
<summary>从 <see cref="T:System.Collections.IList"/> 中移除所有项。此实现总是引发 <see cref="T:System.NotSupportedException"/>。</summary>
<exception cref="T:System.NotSupportedException">总是引发。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)">
<summary>确定 <see cref="T:System.Collections.IList"/> 是否包含特定值。</summary>
<returns>如果 <see cref="T:System.Object"/> 在 <see cref="T:System.Collections.IList"/> 中，则为 true；否则为 false。</returns>
<param name="value">要在 <see cref="T:System.Collections.IList"/> 中查找的 <see cref="T:System.Object"/>。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="value"/> 所属的类型不是泛型类型参数 <paramref name="T"/> 的指定类型。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)">
<summary>确定 <see cref="T:System.Collections.IList"/> 中特定项的索引。</summary>
<returns>如果在列表中找到，则为 <paramref name="value"/> 的索引；否则为 -1。</returns>
<param name="value">要在 <see cref="T:System.Collections.IList"/> 中查找的 <see cref="T:System.Object"/>。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="value"/> 所属的类型不是泛型类型参数 <paramref name="T"/> 的指定类型。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
<summary>将一个项插入指定索引处的 <see cref="T:System.Collections.IList"/>。此实现总是引发 <see cref="T:System.NotSupportedException"/>。</summary>
<param name="index">应插入 <paramref name="value"/> 的位置的零始索引。</param>
<param name="value">要插入到 <see cref="T:System.Collections.IList"/> 中的 <see cref="T:System.Object"/>。</param>
<exception cref="T:System.NotSupportedException">总是引发。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsFixedSize">
<summary>获取一个值，该值指示 <see cref="T:System.Collections.IList"/> 是否具有固定大小。</summary>
<returns>如果 <see cref="T:System.Collections.IList"/> 具有固定大小，则为 true；否则为 false。在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> 的默认实现中，此属性始终返回 true。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsReadOnly">
<summary>获取一个值，该值指示 <see cref="T:System.Collections.IList"/> 是否为只读。</summary>
<returns>如果 <see cref="T:System.Collections.IList"/> 为只读，则为 true；否则为 false。在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> 的默认实现中，此属性始终返回 true。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)">
<summary>获取或设置位于指定索引处的元素。</summary>
<returns>位于指定索引处的元素。</returns>
<param name="index">要获取的元素的索引（索引从零开始）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 不是 <see cref="T:System.Collections.IList"/> 中的有效索引。 </exception>
<exception cref="T:System.NotSupportedException">如果设置了该属性，则总是引发此异常。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)">
<summary>从 <see cref="T:System.Collections.IList"/> 中移除第一次出现的特定对象。此实现总是引发 <see cref="T:System.NotSupportedException"/>。</summary>
<param name="value">要从 <see cref="T:System.Collections.IList"/> 中移除的 <see cref="T:System.Object"/>。</param>
<exception cref="T:System.NotSupportedException">总是引发。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)">
<summary>移除指定索引处的 <see cref="T:System.Collections.IList"/> 项。此实现总是引发 <see cref="T:System.NotSupportedException"/>。 </summary>
<param name="index">要移除的项的从零开始的索引。</param>
<exception cref="T:System.NotSupportedException">总是引发。</exception>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyDictionary`2">
<summary>表示键/值对的只读泛型集合。</summary>
<typeparam name="TKey">字典中键的类型。</typeparam>
<typeparam name="TValue">字典中值的类型。</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
<summary>初始化 <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2"/> 类的新实例，该实例是指定字典周围的包装。</summary>
<param name="dictionary">要包装的字典。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ContainsKey(`0)">
<summary>确定字典是否包含具有指定键的元素。</summary>
<returns>如果字典包含具有指定键的元素，则为 true；否则为 false。</returns>
<param name="key">要在字典中定位的键。</param>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Count">
<summary>获取字典中项的数目。</summary>
<returns>字典中项的数目。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Dictionary">
<summary>获取此 <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2"/> 对象包装的字典。</summary>
<returns>此对象包装的字典。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.GetEnumerator">
<summary>返回一个循环访问集合的枚举器。</summary>
<returns>一个可用于循环访问集合的枚举器。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Item(`0)">
<summary>获取具有指定键的元素。</summary>
<returns>带有指定键的元素。</returns>
<param name="key">要获取或设置的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="key"/> 为 null。</exception>
<exception cref="T:System.Collections.Generic.KeyNotFoundException">检索了属性但没有找到 <paramref name="key"/>。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Keys">
<summary>获取包含字典的键的键集合。</summary>
<returns>包含字典的键的键集合。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
<summary>在任何情况下，引发一个 <see cref="T:System.NotSupportedException"/> 异常。</summary>
<param name="item">要添加到字典的对象。</param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{T}#Clear">
<summary>在任何情况下，引发一个 <see cref="T:System.NotSupportedException"/> 异常。</summary>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
<summary>确定字典是否包含特定值。</summary>
<returns>如果在字典中找到了 <paramref name="item"/>，则为 true；否则为 false。</returns>
<param name="item">要在字典中定位的对象。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
<summary>从特定数组索引开始，将字典的元素复制到某个数组。</summary>
<param name="array">作为从字典复制的元素的目标的一维数组。该数组的索引必须从零开始。</param>
<param name="arrayIndex"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="arrayIndex"/> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="array"/> 是多维的。-或- 源字典中的元素数目大于从 <paramref name="arrayIndex"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。-或- 无法自动将类型 <paramref name="T"/> 强制转换为目标 <paramref name="array"/> 的类型。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{T}#IsReadOnly">
<summary>获取一个值，该值指示字典是否为只读。</summary>
<returns>在任何情况下均为 true。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
<summary>在任何情况下，引发一个 <see cref="T:System.NotSupportedException"/> 异常。</summary>
<returns>如果从字典中成功移除了 <paramref name="item"/>，则为 true；否则为 false。如果在原始字典中没有找到 <paramref name="item"/>，该方法也会返回 false。</returns>
<param name="item">要从字典中移除的对象。</param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
<summary>在任何情况下，引发一个 <see cref="T:System.NotSupportedException"/> 异常。</summary>
<param name="key">用作要添加的元素的键的对象。</param>
<param name="value">作为要添加的元素的值的对象。</param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
<summary>获取具有指定键的元素。</summary>
<returns>带有指定键的元素。</returns>
<param name="key">要获取或设置的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="key"/> 为 null。</exception>
<exception cref="T:System.Collections.Generic.KeyNotFoundException">检索了属性但没有找到 <paramref name="key"/>。</exception>
<exception cref="T:System.NotSupportedException">已设置该属性。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
<summary>获取包含字典的键的集合。</summary>
<returns>一个集合，其中包含实现 <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2"/> 的对象的键。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
<summary>在任何情况下，引发一个 <see cref="T:System.NotSupportedException"/> 异常。</summary>
<returns>如果成功移除此元素，则为 true；否则为 false。如果在原始字典中没有找到 <paramref name="key"/>，此方法也会返回 false。</returns>
<param name="key">要移除的元素的键。</param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
<summary>获取包含字典中的值的集合。</summary>
<returns>一个集合，其中包含实现 <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2"/> 的对象中的值。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
<summary>从特定数组索引开始，将字典的元素复制到某个数组。</summary>
<param name="array">作为从字典复制的元素的目标的一维数组。该数组的索引必须从零开始。 </param>
<param name="index"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="array"/> 是多维的。-或- 源字典中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。-或- 源字典的类型无法自动转换为目标 <paramref name="array"/><paramref name="."/> 的类型</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#ICollection#IsSynchronized">
<summary>获取一个值，该值指示对字典的访问是否同步（线程安全）。</summary>
<returns>如果对字典的访问是同步（线程安全）的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#ICollection#SyncRoot">
<summary>获取可用于同步对字典的访问的对象。</summary>
<returns>可用于同步对字典的访问的对象。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
<summary>在任何情况下，引发一个 <see cref="T:System.NotSupportedException"/> 异常。</summary>
<param name="key">要添加的元素的键。 </param>
<param name="value">要添加的元素的值。 </param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Clear">
<summary>在任何情况下，引发一个 <see cref="T:System.NotSupportedException"/> 异常。</summary>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
<summary>确定字典是否包含具有指定键的元素。</summary>
<returns>如果字典包含具有指定键的元素，则为 true；否则为 false。</returns>
<param name="key">要在字典中定位的键。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="key"/> 为 null。 </exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#GetEnumerator">
<summary>返回字典的一个枚举器。</summary>
<returns>字典的一个枚举器。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#IsFixedSize">
<summary>获取一个值，该值指示字典是否具有固定大小。</summary>
<returns>如果字典具有固定大小，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#IsReadOnly">
<summary>获取一个值，该值指示字典是否为只读。</summary>
<returns>在任何情况下均为 true。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Item(System.Object)">
<summary>获取具有指定键的元素。</summary>
<returns>带有指定键的元素。</returns>
<param name="key">要获取或设置的元素的键。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="key"/> 为 null。 </exception>
<exception cref="T:System.NotSupportedException">已设置该属性。-或- 设置了该属性，集合中不存在 <paramref name="key"/> 并且字典具有固定大小。 </exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Keys">
<summary>获取包含字典的键的集合。</summary>
<returns>包含字典的键的集合。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
<summary>在任何情况下，引发一个 <see cref="T:System.NotSupportedException"/> 异常。</summary>
<param name="key">要移除的元素的键。 </param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Values">
<summary>获取包含字典中的值的集合。</summary>
<returns>包含字典中的值的集合。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
<summary>返回一个循环访问集合的枚举器。</summary>
<returns>一个可用于循环访问集合的枚举器。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
<summary>检索与指定的键相关联的值。</summary>
<returns>如果实现 <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2"/> 的对象包含具有指定键的元素，则为 true；否则为 false。</returns>
<param name="key">将检索其值的键。</param>
<param name="value">当此方法返回时，如果找到该键，便会返回与指定的键相关联的值；否则，会返回 <paramref name="value"/> 参数的类型默认值。该参数未经初始化即被传递。</param>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Values">
<summary>获取包含字典中的值的集合。</summary>
<returns>一个集合，其中包含实现 <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2"/> 的对象中的值。</returns>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection">
<summary>表示 <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2"/> 对象的键的只读集合。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
<summary>从特定数组索引开始，将集合的元素复制到某个数组。</summary>
<param name="array">作为集合中元素的复制目标位置的一维数组。该数组的索引必须从零开始。</param>
<param name="arrayIndex"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="arrayIndex"/> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="array"/> 是多维的。-或- 源集合中的元素数目大于从 <paramref name="arrayIndex"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。-或- 无法自动将类型 <paramref name="T"/> 强制转换为目标 <paramref name="array"/> 的类型。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.Count">
<summary>获取集合中元素的数目。</summary>
<returns>集合中元素的数目。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.GetEnumerator">
<summary>返回一个循环访问集合的枚举器。</summary>
<returns>一个可用于循环访问集合的枚举器。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Add(`0)">
<summary>在任何情况下，引发一个 <see cref="T:System.NotSupportedException"/> 异常。</summary>
<param name="item">要添加到集合中的对象。</param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Clear">
<summary>在任何情况下，引发一个 <see cref="T:System.NotSupportedException"/> 异常。</summary>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Contains(`0)">
<summary>确定集合是否包含特定值。</summary>
<returns>如果在集合中找到了 <paramref name="item"/>，则为 true；否则为 false。</returns>
<param name="item">要在集合中查找的对象。</param>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
<summary>获取一个值，该值指示集合是否为只读。</summary>
<returns>在任何情况下均为 true。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Remove(`0)">
<summary>在任何情况下，引发一个 <see cref="T:System.NotSupportedException"/> 异常。</summary>
<returns>如果从集合中成功移除了 <paramref name="item"/>，则为 true；否则为 false。如果在原始集合中找不到 <paramref name="item"/>，此方法也会返回 false。</returns>
<param name="item">要从集合中移除的对象。</param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
<summary>从特定数组索引开始，将集合的元素复制到某个数组。</summary>
<param name="array">作为集合中元素的复制目标位置的一维数组。该数组的索引必须从零开始。</param>
<param name="index"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="arrayIndex"/> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="array"/> 是多维的。-或- 源集合中的元素数大于从 <paramref name="arrayIndex"/> 到目标 <paramref name="array"/> 结尾处之间的可用空间。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
<summary>获取一个值，指示对集合的访问是否同步（线程安全）。</summary>
<returns>如果对集合的访问是同步（线程安全）的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
<summary>获取可用于同步对集合的访问的对象。</summary>
<returns>可用于同步对集合的访问的对象。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
<summary>返回一个循环访问集合的枚举器。</summary>
<returns>一个可用于循环访问集合的枚举器。</returns>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection">
<summary>表示 <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2"/> 对象的值的只读集合。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
<summary>从特定数组索引开始，将集合的元素复制到某个数组。</summary>
<param name="array">作为集合中元素的复制目标位置的一维数组。该数组的索引必须从零开始。</param>
<param name="arrayIndex"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="arrayIndex"/> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="array"/> 是多维的。-或- 源集合中的元素数目大于从 <paramref name="arrayIndex"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。-或- 无法自动将类型 <paramref name="T"/> 强制转换为目标 <paramref name="array"/> 的类型。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.Count">
<summary>获取集合中元素的数目。</summary>
<returns>集合中元素的数目。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.GetEnumerator">
<summary>返回一个循环访问集合的枚举器。</summary>
<returns>一个可用于循环访问集合的枚举器。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Add(`1)">
<summary>在任何情况下，引发一个 <see cref="T:System.NotSupportedException"/> 异常。</summary>
<param name="item">要添加到集合中的对象。</param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Clear">
<summary>在任何情况下，引发一个 <see cref="T:System.NotSupportedException"/> 异常。</summary>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Contains(`1)">
<summary>确定集合是否包含特定值。</summary>
<returns>如果在集合中找到了 <paramref name="item"/>，则为 true；否则为 false。</returns>
<param name="item">要在集合中查找的对象。</param>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
<summary>获取一个值，该值指示集合是否为只读。</summary>
<returns>在任何情况下均为 true。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Remove(`1)">
<summary>在任何情况下，引发一个 <see cref="T:System.NotSupportedException"/> 异常。</summary>
<returns>如果从集合中成功移除了 <paramref name="item"/>，则为 true；否则为 false。如果在原始集合中找不到 <paramref name="item"/>，此方法也会返回 false。</returns>
<param name="item">要从集合中移除的对象。</param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
<summary>从特定数组索引开始，将集合的元素复制到某个数组。</summary>
<param name="array">作为集合中元素的复制目标位置的一维数组。该数组的索引必须从零开始。</param>
<param name="index"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="arrayIndex"/> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="array"/> 是多维的。-或- 源集合中的元素数大于从 <paramref name="arrayIndex"/> 到目标 <paramref name="array"/> 结尾处之间的可用空间。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
<summary>获取一个值，指示对集合的访问是否同步（线程安全）。</summary>
<returns>如果对集合的访问是同步（线程安全）的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
<summary>获取可用于同步对集合的访问的对象。</summary>
<returns>可用于同步对集合的访问的对象。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
<summary>返回一个循环访问集合的枚举器。</summary>
<returns>一个可用于循环访问集合的枚举器。</returns>
    </member>
    <member name="T:System.Configuration.Assemblies.AssemblyHashAlgorithm">
<summary>指定用于哈希文件和用于生成强名称的所有哈希算法。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.None">
<summary>一个掩码，它指示无哈希算法。如果为多模块程序集指定 None，则公共语言运行时默认采用 SHA1 算法，因为多模块程序集必须生成哈希。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.MD5">
<summary>用于检索 MD5 消息摘要算法的掩码。MD5 是 Rivest 在 1991 年开发的。它与 MD4 基本相同，只是增加了安全性。它虽然比 MD4 稍慢一些，但更安全。该算法包括四个不同的步骤，其设计与 MD4 的设计略有不同。消息摘要的大小以及填充要求保持不变。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA1">
<summary>用于检索“安全哈希算法”修订版的掩码，该修订版更正了 SHA 中的一个未发布的错误。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA256">
<summary>用于检索具有 256 位哈希大小的安全哈希算法的版本的掩码。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA384">
<summary>用于检索具有 384 位哈希大小的安全哈希算法的版本的掩码。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA512">
<summary>用于检索具有 512 位哈希大小的安全哈希算法的版本的掩码。</summary>
    </member>
    <member name="T:System.Configuration.Assemblies.AssemblyVersionCompatibility">
<summary>定义不同类型程序集版本的兼容性。 </summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameMachine">
<summary>该程序集无法与其他版本在同一台计算机上一起执行。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameProcess">
<summary>程序集无法与其他版本在同一进程中一起执行。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameDomain">
<summary>程序集无法与其他版本在同一应用程序域中一起执行。</summary>
    </member>
    <member name="T:System.Diagnostics.ConditionalAttribute">
<summary>指示编译器应忽略方法调用或属性，除非已定义指定的条件编译符号。 </summary>
    </member>
    <member name="M:System.Diagnostics.ConditionalAttribute.#ctor(System.String)">
<summary>初始化 <see cref="T:System.Diagnostics.ConditionalAttribute"/> 类的新实例。</summary>
<param name="conditionString">一个字符串，它指定与此属性关联的区分大小写的条件编译符号。 </param>
    </member>
    <member name="P:System.Diagnostics.ConditionalAttribute.ConditionString">
<summary>获取与 <see cref="T:System.Diagnostics.ConditionalAttribute"/> 属性相关的条件编译符号。</summary>
<returns>一个字符串，它指定与 <see cref="T:System.Diagnostics.ConditionalAttribute"/> 属性关联的区分大小写的条件编译符号。</returns>
    </member>
    <member name="T:System.Diagnostics.DebuggableAttribute">
<summary>修改运行库实时 (JIT) 调试的代码生成。无法继承此类。</summary>
    </member>
    <member name="M:System.Diagnostics.DebuggableAttribute.#ctor(System.Boolean,System.Boolean)">
<summary>使用为实时 (JIT) 编译器指定的跟踪和优化选项来初始化 <see cref="T:System.Diagnostics.DebuggableAttribute"/> 类的新实例。</summary>
<param name="isJITTrackingEnabled">如果启用调试，则为 true；否则为 false。 </param>
<param name="isJITOptimizerDisabled">如果禁用执行优化程序，则为 true；否则为 false。 </param>
    </member>
    <member name="M:System.Diagnostics.DebuggableAttribute.#ctor(System.Diagnostics.DebuggableAttribute.DebuggingModes)">
<summary>使用为实时 (JIT) 编译器指定的调试模式来初始化 <see cref="T:System.Diagnostics.DebuggableAttribute"/> 类的新实例。 </summary>
<param name="modes">枚举值的按位组合，这些值指定 JIT 编译器的调试模式。</param>
    </member>
    <member name="T:System.Diagnostics.DebuggableAttribute.DebuggingModes">
<summary>指定实时 (JIT) 编译器的调试模式。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.None">
<summary>在 .NET Framework for Silverlight 中，始终会生成实时 (JIT) 跟踪信息。此标志的作用与 <see cref="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default"/> 一样。 </summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default">
<summary>使用实时 (JIT) 编译器的默认行为，其中包括启用优化、禁用“编辑并继续”支持以及使用符号存储区序列点（如果存在）。在 .NET Framework for Silverlight 中，始终会生成 JIT 跟踪信息。这使调试器能够将 MSIL 链与其机器码副本相配，并且能够跟踪存储局部变量和函数参数之处。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations">
<summary>禁用编译器为使输出文件更小、更快、更有效而执行的优化。优化会导致输出文件中的代码重排，这会增加调试的难度。通常，应在调试时禁用优化。 </summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints">
<summary>使用隐式 MSIL 序列点，而非程序数据库 (PDB) 序列点。符号信息的每个源行通常至少对应一个 MSIL 偏移量。当实时 (JIT) 编译器要编译方法时，它请求分析服务提供应保留的 MSIL 偏移量列表。 </summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.EnableEditAndContinue">
<summary>启用“编辑并继续”。此功能使您可以在程序处于中断模式时对源代码进行更改。能否使用“编辑并继续”功能取决于具体的编译器。 </summary>
    </member>
    <member name="T:System.Diagnostics.Debugger">
<summary>启用与调试器的通信。无法继承此类。</summary>
    </member>
    <member name="M:System.Diagnostics.Debugger.#ctor">
<summary>初始化 <see cref="T:System.Diagnostics.Debugger"/> 类的新实例。 </summary>
    </member>
    <member name="M:System.Diagnostics.Debugger.Break">
<summary>发出信号表示连接调试器的断点。</summary>
    </member>
    <member name="P:System.Diagnostics.Debugger.IsAttached">
<summary>获取一个值，它指示调试器是否已附加到进程。</summary>
<returns>如果调试器已连接，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Diagnostics.Debugger.IsLogging">
<summary>检查连接的调试器是否启用了日志记录。</summary>
<returns>如果已连接调试器并已启用日志记录，则值为 true；否则为 false。连接的调试器是 DbgManagedDebugger 注册表项中已注册的托管调试器。 </returns>
    </member>
    <member name="M:System.Diagnostics.Debugger.Launch">
<summary>启动调试器并将其连接到进程。</summary>
<returns>如果启动成功或者调试器已连接，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)">
<summary>发送连接调试器的消息。</summary>
<param name="level">消息重要性的说明。 </param>
<param name="category">消息的类别。此参数不得超过 256 个字符。超过此限制的字符串会被截断。</param>
<param name="message">要显示的消息。 </param>
    </member>
    <member name="T:System.Diagnostics.DebuggerBrowsableAttribute">
<summary>确定是否在调试器变量窗口中显示成员以及如何显示成员。无法继承此类。</summary>
    </member>
    <member name="M:System.Diagnostics.DebuggerBrowsableAttribute.#ctor(System.Diagnostics.DebuggerBrowsableState)">
<summary>初始化 <see cref="T:System.Diagnostics.DebuggerBrowsableAttribute"/> 类的新实例。 </summary>
<param name="state">指定成员的显示方式的枚举值之一。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="state"/> 不是 <see cref="T:System.Diagnostics.DebuggerBrowsableState"/> 值之一。</exception>
    </member>
    <member name="P:System.Diagnostics.DebuggerBrowsableAttribute.State">
<summary>获取属性的显示状态。</summary>
<returns>枚举值之一。</returns>
    </member>
    <member name="T:System.Diagnostics.DebuggerBrowsableState">
<summary>指定调试器的显示方式。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggerBrowsableState.Never">
<summary>从不显示元素。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggerBrowsableState.Collapsed">
<summary>以折叠方式显示元素。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggerBrowsableState.RootHidden">
<summary>不显示根元素，但是如果元素是项的集合或数组，则会显示子元素。</summary>
    </member>
    <member name="T:System.Diagnostics.DebuggerDisplayAttribute">
<summary>确定类或字段在调试器的变量窗口中的显示方式。</summary>
    </member>
    <member name="M:System.Diagnostics.DebuggerDisplayAttribute.#ctor(System.String)">
<summary>初始化 <see cref="T:System.Diagnostics.DebuggerDisplayAttribute"/> 类的新实例。 </summary>
<param name="value">要在类型实例的值列中显示的字符串。空字符串 ("") 将导致该值列隐藏。</param>
    </member>
    <member name="P:System.Diagnostics.DebuggerDisplayAttribute.Name">
<summary>获取或设置要在调试器的变量窗口中显示的名称。</summary>
<returns>要在调试器的变量窗口中显示的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.DebuggerDisplayAttribute.Target">
<summary>获取或设置该属性的目标类型。</summary>
<returns>一个对象，标识该属性的目标类型。</returns>
      <exception cref="T:System.ArgumentNullException">
<see cref="P:System.Diagnostics.DebuggerDisplayAttribute.Target"/> 设置为 null。</exception>
    </member>
    <member name="P:System.Diagnostics.DebuggerDisplayAttribute.TargetTypeName">
<summary>获取或设置该属性的目标类型的名称。</summary>
<returns>该属性的目标类型的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.DebuggerDisplayAttribute.Type">
<summary>获取或设置要在调试器的变量窗口的类型列中显示的字符串。</summary>
<returns>要在调试器的变量窗口的类型列中显示的字符串。</returns>
    </member>
    <member name="P:System.Diagnostics.DebuggerDisplayAttribute.Value">
<summary>获取要在调试器变量窗口的值列中显示的字符串。</summary>
<returns>要在调试器变量窗口的值列中显示的字符串。</returns>
    </member>
    <member name="T:System.Diagnostics.DebuggerHiddenAttribute">
<summary>在调试器中隐藏代码。无法继承此类。</summary>
    </member>
    <member name="M:System.Diagnostics.DebuggerHiddenAttribute.#ctor">
<summary>初始化 <see cref="T:System.Diagnostics.DebuggerHiddenAttribute"/> 类的新实例。 </summary>
    </member>
    <member name="T:System.Diagnostics.DebuggerNonUserCodeAttribute">
<summary>标识不属于应用程序用户代码的类型或成员。</summary>
    </member>
    <member name="M:System.Diagnostics.DebuggerNonUserCodeAttribute.#ctor">
<summary>初始化 <see cref="T:System.Diagnostics.DebuggerNonUserCodeAttribute"/> 类的新实例。 </summary>
    </member>
    <member name="T:System.Diagnostics.DebuggerStepThroughAttribute">
<summary>指示调试器逐句通过代码，而不是进入并单步执行代码。无法继承此类。</summary>
    </member>
    <member name="M:System.Diagnostics.DebuggerStepThroughAttribute.#ctor">
<summary>初始化 <see cref="T:System.Diagnostics.DebuggerStepThroughAttribute"/> 类的新实例。 </summary>
    </member>
    <member name="T:System.Diagnostics.DebuggerTypeProxyAttribute">
<summary>指定类型的显示代理。</summary>
    </member>
    <member name="M:System.Diagnostics.DebuggerTypeProxyAttribute.#ctor(System.String)">
<summary>使用代理类型名称初始化 <see cref="T:System.Diagnostics.DebuggerTypeProxyAttribute"/> 类的新实例。 </summary>
<param name="typeName">代理类型的名称。</param>
    </member>
    <member name="M:System.Diagnostics.DebuggerTypeProxyAttribute.#ctor(System.Type)">
<summary>使用代理类型初始化 <see cref="T:System.Diagnostics.DebuggerTypeProxyAttribute"/> 类的新实例。 </summary>
<param name="type">代理类型。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="type"/> 为 null。</exception>
    </member>
    <member name="P:System.Diagnostics.DebuggerTypeProxyAttribute.ProxyTypeName">
<summary>获取代理类型的名称。 </summary>
<returns>代理类型的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.DebuggerTypeProxyAttribute.Target">
<summary>获取或设置属性的目标类型。</summary>
<returns>目标类型。</returns>
      <exception cref="T:System.ArgumentNullException">
<see cref="P:System.Diagnostics.DebuggerTypeProxyAttribute.Target"/> 设置为 null。</exception>
    </member>
    <member name="P:System.Diagnostics.DebuggerTypeProxyAttribute.TargetTypeName">
<summary>获取或设置属性的目标类型的名称。</summary>
<returns>目标类型的名称。</returns>
    </member>
    <member name="T:System.Diagnostics.StackFrame">
<summary>提供有关堆栈帧的信息，堆栈帧表示对当前线程的调用堆栈的一个函数调用。</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor">
<summary>初始化 <see cref="T:System.Diagnostics.StackFrame"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Boolean)">
<summary>[SECURITY CRITICAL] 初始化 <see cref="T:System.Diagnostics.StackFrame"/> 类的新实例，并可以选择捕获源信息。</summary>
<param name="fNeedFileInfo">若要捕获堆栈帧的文件名、行号和列号，则为 true；否则为 false。 </param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32)">
<summary>初始化与当前堆栈帧之上的帧对应的 <see cref="T:System.Diagnostics.StackFrame"/> 类的新实例。</summary>
<param name="skipFrames">堆栈上要跳过的帧数。 </param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32,System.Boolean)">
<summary>[SECURITY CRITICAL] 初始化与当前堆栈帧之上的帧对应的 <see cref="T:System.Diagnostics.StackFrame"/> 类的新实例，并可以选择捕获源信息。</summary>
<param name="skipFrames">堆栈上要跳过的帧数。 </param>
<param name="fNeedFileInfo">若要捕获堆栈帧的文件名、行号和列号，则为 true；否则为 false。 </param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32)">
<summary>初始化只包含指定的文件名和行号的 <see cref="T:System.Diagnostics.StackFrame"/> 类的新实例。</summary>
<param name="fileName">文件名。 </param>
<param name="lineNumber">指定文件中的行号。 </param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32,System.Int32)">
<summary>初始化只包含指定的文件名、行号和列号的 <see cref="T:System.Diagnostics.StackFrame"/> 类的新实例。</summary>
<param name="fileName">文件名。 </param>
<param name="lineNumber">指定文件中的行号。 </param>
<param name="colNumber">指定文件中的列号。 </param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileColumnNumber">
<summary>获取文件中包含所执行代码的列号。该信息通常从可执行文件的调试符号中提取。</summary>
<returns>文件列号。如果无法确定文件列号，则为 0（零）。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileLineNumber">
<summary>获取文件中包含所执行代码的行号。该信息通常从可执行文件的调试符号中提取。</summary>
<returns>文件行号。如果无法确定文件行号，则为 0（零）。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileName">
<summary>[SECURITY CRITICAL] 获取包含所执行代码的文件名。该信息通常从可执行文件的调试符号中提取。</summary>
<returns>文件名。-或- 如果无法确定文件名，则为 null 引用（在 Visual Basic 中为 Nothing）。 </returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetILOffset">
<summary>获取离开所执行方法的 Microsoft 中间语言 (MSIL) 代码开头的偏移量。此偏移量可能是近似量，具体取决于实时 (JIT) 编译器是否正在生成调试代码。该调试信息的生成由 <see cref="T:System.Diagnostics.DebuggableAttribute"/> 属性控制。</summary>
<returns>离开所执行方法的 MSIL 代码开头的偏移量。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetMethod">
<summary>获取在其中执行帧的方法。</summary>
<returns>在其中执行帧的方法。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetNativeOffset">
<summary>获取相对于所执行方法的本机实时 (JIT) 编译代码开头的偏移量。该调试信息的生成由 <see cref="T:System.Diagnostics.DebuggableAttribute"/> 类控制。</summary>
<returns>相对于所执行方法的 JIT 编译代码开头的偏移量。</returns>
    </member>
    <member name="F:System.Diagnostics.StackFrame.OFFSET_UNKNOWN">
<summary>定义当本机或 Microsoft 中间语言 (MSIL) 偏移量未知时从 <see cref="M:System.Diagnostics.StackFrame.GetNativeOffset"/> 或 <see cref="M:System.Diagnostics.StackFrame.GetILOffset"/> 方法返回的值。此字段为常量。</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.ToString">
<summary>生成堆栈帧的可读表示形式。</summary>
<returns>堆栈帧的可读表示形式。</returns>
    </member>
    <member name="T:System.Diagnostics.StackTrace">
<summary>表示一个堆栈跟踪，它是一个或多个堆栈帧的有序集合。</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor">
<summary>用调用方的帧初始化 <see cref="T:System.Diagnostics.StackTrace"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Boolean)">
<summary>[SECURITY CRITICAL] 从调用方的帧初始化 <see cref="T:System.Diagnostics.StackTrace"/> 类的新实例，并可以选择捕获源信息。</summary>
<param name="fNeedFileInfo">若要捕获文件名、行号和列号，则为 true；否则为 false。 </param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Diagnostics.StackFrame)">
<summary>初始化包含单个帧的 <see cref="T:System.Diagnostics.StackTrace"/> 类的新实例。</summary>
<param name="frame"><see cref="T:System.Diagnostics.StackTrace"/> 对象应包含的帧。 </param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception)">
<summary>使用指定的异常对象初始化 <see cref="T:System.Diagnostics.StackTrace"/> 类的新实例。</summary>
<param name="e">从其构造堆栈跟踪的异常对象。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="e"/> 为 null。 </exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Boolean)">
<summary>[SECURITY CRITICAL] 使用指定的异常对象初始化 <see cref="T:System.Diagnostics.StackTrace"/> 类的新实例，并可以选择捕获源信息。</summary>
<param name="e">从其构造堆栈跟踪的异常对象。 </param>
<param name="fNeedFileInfo">若要捕获文件名、行号和列号，则为 true；否则为 false。 </param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32)">
<summary>[SECURITY CRITICAL] 使用指定的异常对象并跳过指定的帧数来初始化 <see cref="T:System.Diagnostics.StackTrace"/> 类的新实例。</summary>
<param name="e">从其构造堆栈跟踪的异常对象。 </param>
<param name="skipFrames">堆栈中的帧数，将从其上开始跟踪。 </param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32,System.Boolean)">
<summary>[SECURITY CRITICAL] 使用指定的异常对象并跳过指定的帧数来初始化 <see cref="T:System.Diagnostics.StackTrace"/> 类的新实例，并可以选择捕获源信息。</summary>
<param name="e">从其构造堆栈跟踪的异常对象。 </param>
<param name="skipFrames">堆栈中的帧数，将从其上开始跟踪。 </param>
<param name="fNeedFileInfo">若要捕获文件名、行号和列号，则为 true；否则为 false。 </param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32)">
<summary>[SECURITY CRITICAL] 从调用方的帧初始化 <see cref="T:System.Diagnostics.StackTrace"/> 类的新实例，跳过指定的帧数。</summary>
<param name="skipFrames">堆栈中的帧数，将从其上开始跟踪。 </param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32,System.Boolean)">
<summary>[SECURITY CRITICAL] 从调用方的帧初始化 <see cref="T:System.Diagnostics.StackTrace"/> 类的新实例，跳过指定的帧数并可以选择捕获源信息。</summary>
<param name="skipFrames">堆栈中的帧数，将从其上开始跟踪。 </param>
<param name="fNeedFileInfo">若要捕获文件名、行号和列号，则为 true；否则为 false。 </param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Threading.Thread,System.Boolean)">
<summary>[SECURITY CRITICAL] 为特定线程初始化 <see cref="T:System.Diagnostics.StackTrace"/> 类的新实例，并可以选择捕获源信息。</summary>
<param name="targetThread">请求其堆栈跟踪的线程。 </param>
<param name="needFileInfo">若要捕获文件名、行号和列号，则为 true；否则为 false。 </param>
    </member>
    <member name="P:System.Diagnostics.StackTrace.FrameCount">
<summary>获取堆栈跟踪中的帧数。</summary>
<returns>堆栈跟踪中的帧数。 </returns>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrame(System.Int32)">
<summary>获取指定的堆栈帧。</summary>
<returns>指定的堆栈帧。</returns>
<param name="index">所请求的堆栈帧的索引。 </param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrames">
<summary>返回当前堆栈跟踪中所有堆栈帧的副本。</summary>
<returns>表示堆栈跟踪中的函数调用的数组。</returns>
    </member>
    <member name="F:System.Diagnostics.StackTrace.METHODS_TO_SKIP">
<summary>定义要从堆栈跟踪中省略的默认方法数。此字段为常量。</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.ToString">
<summary>生成堆栈跟踪的可读表示形式。</summary>
<returns>堆栈帧的可读表示形式。</returns>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute">
<summary>取消报告特定的静态分析工具规则冲突，允许一个代码项目上应用多个取消报告设置。</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.#ctor(System.String,System.String)">
<summary>初始化 <see cref="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"/> 类的新实例，同时指定静态分析工具的类别和分析规则的标识符。 </summary>
<param name="category">该属性的类别。</param>
<param name="checkId">应用该属性的分析工具规则的标识符。</param>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.Category">
<summary>获取标识属性分类的类别。</summary>
<returns>标识属性的类别。</returns>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.CheckId">
<summary>获取要取消的静态分析工具规则的标识符。</summary>
<returns>要取消的静态分析工具规则的标识符。</returns>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.Justification">
<summary>获取或设置用于取消代码分析消息的规则。</summary>
<returns>用于取消消息的规则。</returns>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.MessageId">
<summary>获取或设置扩展排除条件的可选参数。</summary>
<returns>一个包含扩展的排除条件的字符串。</returns>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.Scope">
<summary>获取或设置与属性相关的代码的范围。</summary>
<returns>与属性相关的代码的范围。</returns>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.Target">
<summary>获取或设置表示属性目标的完全限定路径。</summary>
<returns>表示属性目标的完全限定路径。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.Contract">
<summary>包含用于表示程序协定（如前置条件、后置条件和对象固定）的静态方法。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)">
<summary>检查条件；如果条件为 false，则遵循为分析器设置的升级策略。</summary>
<param name="condition">要测试的条件表达式。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
<summary>检查条件；如果条件为 false，则遵循由分析器设置的升级策略，并显示指定的消息。</summary>
<param name="condition">要测试的条件表达式。</param>
<param name="userMessage">在不满足条件时要显示的消息。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)">
<summary>指示代码分析工具假设指定的条件为 true（即使无法静态地证明该条件始终为 true）。</summary>
<param name="condition">假设为 true 的条件表达式。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
<summary>指示代码分析工具假设某个条件为 true（即使无法静态地证明该条件始终为 true），并在假设失败时显示一条消息。</summary>
<param name="condition">假设为 true 的条件表达式。</param>
<param name="userMessage">假设失败时要发布的消息。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
<summary>当方法的协定仅包含 if-then-throw 形式的前置条件时，标记协定部分的结尾。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
<summary>为封闭方法或属性指定一个后置条件协定。</summary>
<param name="condition">要测试的条件表达式。该表达式可以包括 <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)"/>、<see cref="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)"/> 和 <see cref="M:System.Diagnostics.Contracts.Contract.Result``1"/> 值。 </param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
<summary>为提供的退出条件指定后置条件协定，并指定条件为 false 时要显示的消息。</summary>
<param name="condition">要测试的条件表达式。该表达式可以包括 <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)"/> 和 <see cref="M:System.Diagnostics.Contracts.Contract.Result``1"/> 值。 </param>
<param name="userMessage">表达式不为 true 时要显示的消息。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
<summary>基于提供的异常和条件为封闭方法或属性指定一个后置条件协定。</summary>
<param name="condition">要测试的条件表达式。</param>
<typeparam name="TException">引发后置条件检查的异常的类型。</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
<summary>基于提供的异常和条件为封闭方法或属性指定后置条件协定，并指定条件为 false 时要显示的消息。</summary>
<param name="condition">要测试的条件表达式。</param>
<param name="userMessage">表达式为 false 时要显示的消息。</param>
<typeparam name="TException">引发后置条件检查的异常的类型。</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
<summary>确定函数中是否存在某个元素集合中的元素。</summary>
<returns>当且仅当 <paramref name="predicate"/> 对于 <paramref name="collection"/> 中 <paramref name="T"/> 类型的任何元素都返回 true 时，才为 true。</returns>
<param name="collection">将从中提取 <paramref name="T"/> 类型的元素以将其传递给 <paramref name="predicate"/> 的集合。</param>
<param name="predicate">用于计算 <paramref name="collection"/> 中某个元素的函数。</param>
<typeparam name="T"><paramref name="collection"/> 中包含的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
<paramref name="collection"/> 或 <paramref name="predicate"/> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
<summary>确定指定的测试对某个整数范围中的任何整数是否为 true。</summary>
<returns>如果 <paramref name="predicate"/> 对于从 <paramref name="fromInclusive"/> 开始到 <paramref name="toExclusive"/> - 1 的范围内的任何整数都返回 true，则为 true。</returns>
<param name="fromInclusive">要传递给 <paramref name="predicate"/> 的第一个整数。</param>
<param name="toExclusive">要传递给 <paramref name="predicate"/> 的最后一个整数加一。</param>
<param name="predicate">用于计算指定范围内整数的任何值的函数。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="predicate"/> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="toExclusive "/> 小于 <paramref name="fromInclusive"/>。</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
<summary>确定函数中是否存在某个集合中的所有元素。</summary>
<returns>当且仅当 <paramref name="predicate"/> 对于 <paramref name="collection"/> 中的 <paramref name="T"/> 类型的所有元素都返回 true 时，才为 true。</returns>
<param name="collection">将从中提取 <paramref name="T"/> 类型的元素以将其传递给 <paramref name="predicate"/> 的集合。</param>
<param name="predicate">用于计算 <paramref name="collection"/> 中的所有元素是否存在的函数。</param>
<typeparam name="T"><paramref name="collection"/> 中包含的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
<paramref name="collection"/> 或 <paramref name="predicate"/> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
<summary>确定某个特定条件是否对指定范围内的所有整数都有效。</summary>
<returns>如果 <paramref name="predicate"/> 对于从 <paramref name="fromInclusive"/> 开始到 <paramref name="toExclusive"/> - 1 的范围内的所有整数都返回 true，则为 true。</returns>
<param name="fromInclusive">要传递给 <paramref name="predicate"/> 的第一个整数。</param>
<param name="toExclusive">要传递给 <paramref name="predicate"/> 的最后一个整数加一。</param>
<param name="predicate">要计算其中是否存在指定范围内的整数的函数。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="predicate"/> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="toExclusive "/> 小于 <paramref name="fromInclusive"/>。</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
<summary>为封闭类指定一个固定协定。 </summary>
<param name="condition">要测试的条件表达式。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
<summary>为封闭类指定一个固定协定，并在该协定的条件失败时显示一条消息。</summary>
<param name="condition">要测试的条件表达式。</param>
<param name="userMessage">条件为 false 时要显示的消息。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
<summary>表示方法或属性开始时的值。</summary>
<returns>一个方法或属性开始处的参数或字段的值。</returns>
<param name="value">要表示的值（字段或参数）。</param>
<typeparam name="T">值的类型。</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
<summary>为封闭方法或属性指定一个前置条件协定，并在该协定的条件失败时引发异常。</summary>
<param name="condition">要测试的条件表达式。</param>
<typeparam name="TException">条件为 false 时要引发的异常。</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
<summary>为封闭方法或属性指定一个前置条件协定。</summary>
<param name="condition">要测试的条件表达式。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
<summary>为封闭方法或属性指定一个前置条件协定，并在该协定的条件失败时引发异常，其中包含提供的消息。</summary>
<param name="condition">要测试的条件表达式。</param>
<param name="userMessage">条件为 false 时要显示的消息。</param>
<typeparam name="TException">条件为 false 时要引发的异常。</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
<summary>为封闭方法或属性指定一个前置条件协定，并在该协定的条件失败时显示一条消息。</summary>
<param name="condition">要测试的条件表达式。</param>
<param name="userMessage">条件为 false 时要显示的消息。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Result``1">
<summary>表示一个方法或属性的返回值。</summary>
<returns>封闭方法或属性的返回值。</returns>
<typeparam name="T">封闭方法或属性的返回值的类型。</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
<summary>表示从一个方法返回时 out 参数的最终（输出）值。</summary>
<returns>out 参数的输出值。</returns>
<param name="value">out 参数。</param>
<typeparam name="T">out 参数的类型。</typeparam>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassAttribute">
<summary>指定一个单独的类型包含此类型的代码协定。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassAttribute.#ctor(System.Type)">
<summary>初始化 <see cref="T:System.Diagnostics.Contracts.ContractClassAttribute"/> 类的新实例。 </summary>
<param name="typeContainingContracts">包含此类型的代码协定的类型。</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassAttribute.TypeContainingContracts">
<summary>获取包含此类型的代码协定的类型。</summary>
<returns>包含此类型的代码协定的类型。 </returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassForAttribute">
<summary>指定一个类是某个类型的协定。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassForAttribute.#ctor(System.Type)">
<summary>初始化 <see cref="T:System.Diagnostics.Contracts.ContractClassForAttribute"/> 类的新实例，并指定使用当前类作为协定的类型。 </summary>
<param name="typeContractsAreFor">使用当前类作为协定的类型。</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassForAttribute.TypeContractsAreFor">
<summary>获取此代码协定应用于的类型。 </summary>
<returns>此协定应用于的类型。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailureKind">
<summary>指定失败的协定的类型。 </summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Precondition">
<summary>一个失败的 <see cref="Overload:System.Diagnostics.Contracts.Contract.Requires"/> 协定。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Postcondition">
<summary>一个失败的 <see cref="Overload:System.Diagnostics.Contracts.Contract.Ensures"/> 协定。 </summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.PostconditionOnException">
<summary>一个失败的 <see cref="Overload:System.Diagnostics.Contracts.Contract.EnsuresOnThrow"/> 协定。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Invariant">
<summary>一个失败的 <see cref="Overload:System.Diagnostics.Contracts.Contract.Invariant"/> 协定。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assert">
<summary>一个失败的 <see cref="Overload:System.Diagnostics.Contracts.Contract.Assert"/> 协定。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assume">
<summary>一个失败的 <see cref="Overload:System.Diagnostics.Contracts.Contract.Assume"/> 协定。</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute">
<summary>将一个方法标记为某个类的固定方法。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractInvariantMethodAttribute.#ctor">
<summary>初始化 <see cref="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute"/> 类的新实例。 </summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute">
<summary>指定在某个字段的可见性低于方法时可在方法协定中使用该字段。 </summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.#ctor(System.String)">
<summary>初始化 <see cref="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute"/> 类的新实例。 </summary>
<param name="name">要应用于字段的属性名称。</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.Name">
<summary>获取要应用于字段的属性名称。</summary>
<returns>要应用于字段的属性名称。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute">
<summary>指定一个程序集是包含协定的引用程序集。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute.#ctor">
<summary>初始化 <see cref="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute"/> 类的新实例。 </summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute">
<summary>标识没有运行时行为的成员。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute.#ctor">
<summary>初始化 <see cref="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute"/> 类的新实例。 </summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractVerificationAttribute">
<summary>指示分析工具假定程序集、类型或成员的正确性，而不执行静态验证。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractVerificationAttribute.#ctor(System.Boolean)">
<summary>初始化 <see cref="T:System.Diagnostics.Contracts.ContractVerificationAttribute"/> 类的新实例。 </summary>
<param name="value">如果为 true，则需要验证；否则为 false。 </param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractVerificationAttribute.Value">
<summary>获取指示是否验证目标的协定的值。 </summary>
<returns>如果需要验证，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.PureAttribute">
<summary>指示一个类型或方法为纯类型或纯方法，即它不进行任何可视的状态更改。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.PureAttribute.#ctor">
<summary>初始化 <see cref="T:System.Diagnostics.Contracts.PureAttribute"/> 类的新实例。 </summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.Internal.ContractHelper">
<summary>提供二进制重写工具用来处理协定失败的方法。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Internal.ContractHelper.RaiseContractFailedEvent(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
<summary>由二进制重写工具用来激活默认失败行为。</summary>
<returns>如果事件已经过处理且不应触发失败，则为空引用（在 Visual Basic 中为 Nothing）；否则返回本地化的失败消息。</returns>
<param name="failureKind">失败的类型。</param>
<param name="userMessage">其他用户信息。</param>
<param name="conditionText">对导致失败的条件的说明。</param>
<param name="innerException">导致当前异常的内部异常。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="failureKind"/> 不是有效的 <see cref="T:System.Diagnostics.Contracts.ContractFailureKind"/> 值。</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Internal.ContractHelper.TriggerFailure(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.String,System.Exception)">
<summary>触发默认失败行为。</summary>
<param name="kind">失败的类型。</param>
<param name="displayMessage">要显示的消息。</param>
<param name="userMessage">其他用户信息。</param>
<param name="conditionText">对导致失败的条件的说明。</param>
<param name="innerException">导致当前异常的内部异常。</param>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocumentWriter">
<summary>表示符号存储区所引用的文档。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetCheckSum(System.Guid,System.Byte[])">
<summary>设置校验和信息。</summary>
<param name="algorithmId">表示算法 ID 的 GUID。 </param>
<param name="checkSum">校验和。 </param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetSource(System.Byte[])">
<summary>将文档的原始源存储在符号存储区中。</summary>
<param name="source">表示为无符号字节的文档源。 </param>
    </member>
    <member name="T:System.Globalization.Calendar">
<summary>将时间分成段来表示，如分成星期、月和年。</summary>
    </member>
    <member name="M:System.Globalization.Calendar.#ctor">
<summary>初始化 <see cref="T:System.Globalization.Calendar"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)">
<summary>返回与指定 <see cref="T:System.DateTime"/> 相距指定天数的 <see cref="T:System.DateTime"/>。</summary>
<returns>将指定天数添加到指定的 <see cref="T:System.DateTime"/> 中时得到的 <see cref="T:System.DateTime"/>。</returns>
<param name="time"><see cref="T:System.DateTime"/>，将向其添加天数。 </param>
<param name="days">要添加的天数。 </param>
<exception cref="T:System.ArgumentException">得到的 <see cref="T:System.DateTime"/> 超出了此日历支持的范围。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="days"/> 超出了 <see cref="T:System.DateTime"/> 返回值支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)">
<summary>返回与指定 <see cref="T:System.DateTime"/> 相距指定小时数的 <see cref="T:System.DateTime"/>。</summary>
<returns>将指定小时数添加到指定的 <see cref="T:System.DateTime"/> 中时得到的 <see cref="T:System.DateTime"/>。</returns>
<param name="time"><see cref="T:System.DateTime"/>，将向其添加小时数。 </param>
<param name="hours">要添加的小时数。 </param>
<exception cref="T:System.ArgumentException">得到的 <see cref="T:System.DateTime"/> 超出了此日历支持的范围。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="hours"/> 超出了 <see cref="T:System.DateTime"/> 返回值支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)">
<summary>返回与指定 <see cref="T:System.DateTime"/> 相距指定毫秒数的 <see cref="T:System.DateTime"/>。</summary>
<returns>将指定毫秒数添加到指定的 <see cref="T:System.DateTime"/> 中时得到的 <see cref="T:System.DateTime"/>。</returns>
<param name="time"><see cref="T:System.DateTime"/>，将向其添加毫秒数。 </param>
<param name="milliseconds">要添加的毫秒数。</param>
<exception cref="T:System.ArgumentException">得到的 <see cref="T:System.DateTime"/> 超出了此日历支持的范围。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="milliseconds"/> 超出了 <see cref="T:System.DateTime"/> 返回值支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)">
<summary>返回与指定 <see cref="T:System.DateTime"/> 相距指定分钟数的 <see cref="T:System.DateTime"/>。</summary>
<returns>将指定分钟数添加到指定的 <see cref="T:System.DateTime"/> 中时得到的 <see cref="T:System.DateTime"/>。</returns>
<param name="time"><see cref="T:System.DateTime"/>，将向其添加分钟数。 </param>
<param name="minutes">要添加的分钟数。 </param>
<exception cref="T:System.ArgumentException">得到的 <see cref="T:System.DateTime"/> 超出了此日历支持的范围。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="minutes"/> 超出了 <see cref="T:System.DateTime"/> 返回值支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)">
<summary>当在派生类中重写时，将返回与指定的 <see cref="T:System.DateTime"/> 相距指定月数的 <see cref="T:System.DateTime"/>。</summary>
<returns>将指定的月数添加到指定的 <see cref="T:System.DateTime"/> 中时得到的 <see cref="T:System.DateTime"/>。</returns>
<param name="time"><see cref="T:System.DateTime"/>，将向其添加月数。 </param>
<param name="months">要添加的月数。 </param>
<exception cref="T:System.ArgumentException">得到的 <see cref="T:System.DateTime"/> 超出了此日历支持的范围。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="months"/> 超出了 <see cref="T:System.DateTime"/> 返回值支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)">
<summary>返回与指定 <see cref="T:System.DateTime"/> 相距指定秒数的 <see cref="T:System.DateTime"/>。</summary>
<returns>将指定的秒数添加到指定的 <see cref="T:System.DateTime"/> 中时得到的 <see cref="T:System.DateTime"/>。</returns>
<param name="time"><see cref="T:System.DateTime"/>，将向其添加秒数。 </param>
<param name="seconds">要添加的秒数。 </param>
<exception cref="T:System.ArgumentException">得到的 <see cref="T:System.DateTime"/> 超出了此日历支持的范围。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="seconds"/> 超出了 <see cref="T:System.DateTime"/> 返回值支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)">
<summary>返回与指定 <see cref="T:System.DateTime"/> 相距指定星期数的 <see cref="T:System.DateTime"/>。</summary>
<returns>将指定周数添加到指定的 <see cref="T:System.DateTime"/> 中时得到的 <see cref="T:System.DateTime"/>。</returns>
<param name="time"><see cref="T:System.DateTime"/>，将向其添加星期数。 </param>
<param name="weeks">要添加的星期数。 </param>
<exception cref="T:System.ArgumentException">得到的 <see cref="T:System.DateTime"/> 超出了此日历支持的范围。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="weeks"/> 超出了 <see cref="T:System.DateTime"/> 返回值支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)">
<summary>当在派生类中重写时，将返回与指定的 <see cref="T:System.DateTime"/> 相距指定年数的 <see cref="T:System.DateTime"/>。</summary>
<returns>将指定年数添加到指定的 <see cref="T:System.DateTime"/> 中时得到的 <see cref="T:System.DateTime"/>。</returns>
<param name="time"><see cref="T:System.DateTime"/>，将向其添加年数。 </param>
<param name="years">要添加的年数。 </param>
<exception cref="T:System.ArgumentException">得到的 <see cref="T:System.DateTime"/> 超出了此日历支持的范围。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="years"/> 超出了 <see cref="T:System.DateTime"/> 返回值支持的范围。 </exception>
    </member>
    <member name="F:System.Globalization.Calendar.CurrentEra">
<summary>表示当前日历的当前纪元。 </summary>
    </member>
    <member name="P:System.Globalization.Calendar.Eras">
<summary>当在派生类中重写时，获取当前日历中的纪元列表。</summary>
<returns>表示当前日历中的纪元的整数数组。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetDayOfMonth(System.DateTime)">
<summary>当在派生类中重写时，将返回指定 <see cref="T:System.DateTime"/> 中的月中日期。</summary>
<returns>一个正整数，表示 <paramref name="time"/> 参数中的月中日期。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.Calendar.GetDayOfWeek(System.DateTime)">
<summary>当在派生类中重写时，将返回指定 <see cref="T:System.DateTime"/> 中的周中日期。</summary>
<returns>一个 <see cref="T:System.DayOfWeek"/> 值，表示 <paramref name="time"/> 参数中的周中日期。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)">
<summary>当在派生类中重写时，将返回指定 <see cref="T:System.DateTime"/> 中的年中日期。</summary>
<returns>一个正整数，表示 <paramref name="time"/> 参数中的年中日期。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)">
<summary>返回当前纪元的指定月份和年份中的天数。</summary>
<returns>当前纪元中指定年份的指定月份中的天数。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">一个表示月份的正整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
<summary>当在派生类中重写时，返回指定月份、纪元年份中的天数。</summary>
<returns>指定纪元中指定年份的指定月份中的天数。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">一个表示月份的正整数。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInYear(System.Int32)">
<summary>返回当前纪元的指定年份中的天数。</summary>
<returns>当前纪元中指定年份的天数。</returns>
<param name="year">表示年份的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)">
<summary>当在派生类中重写时，返回指定纪元年份中的天数。</summary>
<returns>指定纪元中指定年份的天数。</returns>
<param name="year">表示年份的整数。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetEra(System.DateTime)">
<summary>当在派生类中重写时，将返回指定 <see cref="T:System.DateTime"/> 中的纪元。</summary>
<returns>表示 <paramref name="time"/> 中的纪元的整数。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.Calendar.GetHour(System.DateTime)">
<summary>返回指定的 <see cref="T:System.DateTime"/> 中的小时值。</summary>
<returns>0 与 23 之间的一个整数，它表示 <paramref name="time"/> 中的小时。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)">
<summary>计算指定纪元年份的闰月。</summary>
<returns>一个正整数，表示指定纪元年份中的闰月。-或- 如果此日历不支持闰月，或者 <paramref name="year"/> 和 <paramref name="era"/> 参数未指定闰年，则为零。</returns>
<param name="year">年份。</param>
<param name="era">纪元。</param>
    </member>
    <member name="M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的毫秒值。</summary>
<returns>一个介于 0 到 999 之间的双精度浮点数字，表示 <paramref name="time"/> 参数中的毫秒数。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.Calendar.GetMinute(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的分钟值。</summary>
<returns>0 到 59 之间的一个整数，它表示 <paramref name="time"/> 中的分钟值。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.Calendar.GetMonth(System.DateTime)">
<summary>当在派生类中重写时，将返回指定 <see cref="T:System.DateTime"/> 中的月份。</summary>
<returns>一个正整数，表示 <paramref name="time"/> 中的月份。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.Calendar.GetMonthsInYear(System.Int32)">
<summary>返回当前纪元中指定年份的月数。</summary>
<returns>当前纪元中指定年份的月数。</returns>
<param name="year">表示年份的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)">
<summary>当在派生类中重写时，将返回指定纪元中指定年份的月数。</summary>
<returns>指定纪元中指定年份的月数。</returns>
<param name="year">表示年份的整数。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetSecond(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的秒值。</summary>
<returns>0 到 59 之间的一个整数，它表示 <paramref name="time"/> 中的秒数。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
<summary>返回一年中包括指定 <see cref="T:System.DateTime"/> 值中的日期的那个星期。</summary>
<returns>一个正整数，表示一年中包括 <paramref name="time"/> 参数中的日期的那个星期。</returns>
<param name="time">日期和时间值。</param>
<param name="rule">定义日历周的枚举值。 </param>
<param name="firstDayOfWeek">表示一周的第一天的 <see cref="T:System.DayOfWeek"/> 值。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="time"/> 早于 <see cref="P:System.Globalization.Calendar.MinSupportedDateTime"/> 或晚于 <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime"/>。-或-<paramref name="firstDayOfWeek"/> 不是有效的 <see cref="T:System.DayOfWeek"/> 值。-或- <paramref name="rule"/> 不是有效的 <see cref="T:System.Globalization.CalendarWeekRule"/> 值。 </exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetYear(System.DateTime)">
<summary>当在派生类中重写时，将返回指定 <see cref="T:System.DateTime"/> 中的年份。</summary>
<returns>表示 <paramref name="time"/> 中的年份的整数。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)">
<summary>确定当前纪元中的指定日期是否为闰日。</summary>
<returns>如果指定的日期是闰日，则为 true；否则为 false。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">一个表示月份的正整数。 </param>
<param name="day">一个表示天的正整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。-或- <paramref name="day"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>当在派生类中重写时，将确定指定纪元中的指定日期是否为闰日。</summary>
<returns>如果指定的日期是闰日，则为 true；否则为 false。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">一个表示月份的正整数。 </param>
<param name="day">一个表示天的正整数。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。-或- <paramref name="day"/> 超出了此日历支持的范围。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)">
<summary>确定当前纪元中指定年份的指定月份是否为闰月。</summary>
<returns>如果指定的月份是闰月，则为 true；否则为 false。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">一个表示月份的正整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
<summary>当在派生类中重写时，将确定指定纪元中指定年份的指定月份是否为闰月。</summary>
<returns>如果指定的月份是闰月，则为 true；否则为 false。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">一个表示月份的正整数。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapYear(System.Int32)">
<summary>确定当前纪元中的指定年份是否为闰年。</summary>
<returns>如果指定的年份是闰年，则为 true；否则为 false。</returns>
<param name="year">表示年份的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)">
<summary>当在派生类中重写时，将确定指定纪元中的指定年份是否为闰年。</summary>
<returns>如果指定的年份是闰年，则为 true；否则为 false。</returns>
<param name="year">表示年份的整数。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="P:System.Globalization.Calendar.IsReadOnly">
<summary>获取一个值，该值指示此 <see cref="T:System.Globalization.Calendar"/> 对象是否为只读。</summary>
<returns>如果此 <see cref="T:System.Globalization.Calendar"/> 对象为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Globalization.Calendar.MaxSupportedDateTime">
<summary>获取此 <see cref="T:System.Globalization.Calendar"/> 对象支持的最晚日期和时间。</summary>
<returns>此日历支持的最晚日期和时间。默认值为 <see cref="F:System.DateTime.MaxValue"/>。</returns>
    </member>
    <member name="P:System.Globalization.Calendar.MinSupportedDateTime">
<summary>获取此 <see cref="T:System.Globalization.Calendar"/> 对象支持的最早日期和时间。</summary>
<returns>此日历支持的最早日期和时间。默认值为 <see cref="F:System.DateTime.MinValue"/>。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>返回设置为当前纪元中的指定日期和时间的 <see cref="T:System.DateTime"/>。</summary>
<returns>设置为当前纪元中的指定日期和时间的 <see cref="T:System.DateTime"/>。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">一个表示月份的正整数。 </param>
<param name="day">一个表示天的正整数。 </param>
<param name="hour">0 与 23 之间的一个整数，它表示小时。 </param>
<param name="minute">0 与 59 之间的一个整数，它表示分钟。 </param>
<param name="second">0 与 59 之间的一个整数，它表示秒。 </param>
<param name="millisecond">0 与 999 之间的一个整数，它表示毫秒。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。-或- <paramref name="day"/> 超出了此日历支持的范围。-或- <paramref name="hour"/> 小于 0 或大于 23。-或- <paramref name="minute"/> 小于 0 或大于 59。-或- <paramref name="second"/> 小于 0 或大于 59。-或- <paramref name="millisecond"/> 小于 0 或大于 999。 </exception>
    </member>
    <member name="M:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>当在派生类中重写时，将返回设置为指定纪元中的指定日期和时间的 <see cref="T:System.DateTime"/>。</summary>
<returns>设置为当前纪元中的指定日期和时间的 <see cref="T:System.DateTime"/>。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">一个表示月份的正整数。 </param>
<param name="day">一个表示天的正整数。 </param>
<param name="hour">0 与 23 之间的一个整数，它表示小时。 </param>
<param name="minute">0 与 59 之间的一个整数，它表示分钟。 </param>
<param name="second">0 与 59 之间的一个整数，它表示秒。 </param>
<param name="millisecond">0 与 999 之间的一个整数，它表示毫秒。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。-或- <paramref name="day"/> 超出了此日历支持的范围。-或- <paramref name="hour"/> 小于 0 或大于 23。-或- <paramref name="minute"/> 小于 0 或大于 59。-或- <paramref name="second"/> 小于 0 或大于 59。-或- <paramref name="millisecond"/> 小于 0 或大于 999。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.Calendar.ToFourDigitYear(System.Int32)">
<summary>使用 <see cref="P:System.Globalization.Calendar.TwoDigitYearMax"/> 属性将指定的年份转换为四位数年份，以确定相应的纪元。</summary>
<returns>包含 <paramref name="year"/> 的四位数表示形式的整数。</returns>
<param name="year">一个两位数或四位数的整数，表示要转换的年份。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了日历支持的范围。 </exception>
    </member>
    <member name="P:System.Globalization.Calendar.TwoDigitYearMax">
<summary>获取或设置可以用两位数年份表示的 100 年范围内的最后一年。</summary>
<returns>可以用两位数年份表示的 100 年范围内的最后一年。</returns>
<exception cref="T:System.InvalidOperationException">当前的 <see cref="T:System.Globalization.Calendar"/> 对象为只读。</exception>
    </member>
    <member name="T:System.Globalization.CalendarWeekRule">
<summary>定义确定年份第一周的不同规则。</summary>
    </member>
    <member name="F:System.Globalization.CalendarWeekRule.FirstDay">
<summary>指示年的第一周从该年的第一天开始，到所指定的下一个周首日前结束。值为 0。</summary>
    </member>
    <member name="F:System.Globalization.CalendarWeekRule.FirstFullWeek">
<summary>指示年的第一周从所指定周首日的第一个匹配项开始，可以是年的第一天或其后某一天。值为 1。</summary>
    </member>
    <member name="F:System.Globalization.CalendarWeekRule.FirstFourDayWeek">
<summary>指示年的第一周是第一个在指定的周首日前包含四天或更多天的周。值为 2。</summary>
    </member>
    <member name="T:System.Globalization.CharUnicodeInfo">
<summary>检索有关 Unicode 字符的信息。无法继承此类。</summary>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)">
<summary>获取与指定字符关联的数值。</summary>
<returns>与指定的字符关联的数值。-或- 如果指定的字符不是一个数值型字符，则为 -1。</returns>
<param name="ch">要获取其数值的 Unicode 字符。 </param>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)">
<summary>获取与位于指定字符串的指定索引位置的字符关联的数值。</summary>
<returns>与位于指定字符串的指定索引位置的字符关联的数值。-或- 如果位于指定字符串的指定索引位置的字符不是一个数值型字符，则为 -1。</returns>
<param name="s"><see cref="T:System.String"/>，包含要获取其数值的 Unicode 字符。 </param>
<param name="index">要获取其数值的 Unicode 字符的索引。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 超出了 <paramref name="s"/> 中的有效索引范围。 </exception>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)">
<summary>获取指定字符的 Unicode 类别。</summary>
<returns>一个 <see cref="T:System.Globalization.UnicodeCategory"/> 值，指示指定字符的类别。</returns>
<param name="ch">要获取其 Unicode 类别的 Unicode 字符。 </param>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)">
<summary>获取位于指定字符串的指定索引位置的字符的 Unicode 类别。</summary>
<returns>一个 <see cref="T:System.Globalization.UnicodeCategory"/> 值，指示位于指定字符串的指定索引位置的字符的类别。</returns>
<param name="s"><see cref="T:System.String"/>，包含要获取其 Unicode 类别的 Unicode 字符。 </param>
<param name="index">要获取其 Unicode 类别的 Unicode 字符的索引。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 超出了 <paramref name="s"/> 中的有效索引范围。 </exception>
    </member>
    <member name="T:System.Globalization.CompareInfo">
<summary>实现一组方法进行区分区域性的字符串比较。</summary>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
<summary>将一个字符串的一部分与另一个字符串的一部分相比较，并返回一个指示二者在排序顺序中的关系的整数。</summary>
<returns>一个整数，该整数用于指示在排序顺序中两个字符串之间的关系，如下所示：值 条件 零 两个字符串相等。小于零 <paramref name="string1"/> 的指定部分位于 <paramref name="string2"/> 的指定部分之前。大于零 <paramref name="string1"/> 的指定部分位于 <paramref name="string2"/> 的指定部分之后。 </returns>
<param name="string1">要比较的第一个字符串。 </param>
<param name="offset1"><paramref name="string1"/> 中的字符从零开始的索引，将从此位置开始比较。 </param>
<param name="length1"><paramref name="string1"/> 中要比较的连续字符数。 </param>
<param name="string2">要比较的第二个字符串。 </param>
<param name="offset2"><paramref name="string2"/> 中的字符从零开始的索引，将从此位置开始比较。 </param>
<param name="length2"><paramref name="string2"/> 中要比较的连续字符数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="offset1"/> 或 <paramref name="length1"/> 或 <paramref name="offset2"/> 或 <paramref name="length2"/> 小于零。-或- <paramref name="offset1"/> 大于或等于 <paramref name="string1"/> 中的字符数。-或- <paramref name="offset2"/> 大于或等于 <paramref name="string2"/> 中的字符数。-或- <paramref name="length1"/> 大于或等于从 <paramref name="offset1"/> 到 <paramref name="string1"/> 末尾的字符数。-或- <paramref name="length2"/> 大于或等于从 <paramref name="offset2"/> 到 <paramref name="string2"/> 末尾的字符数。 </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)">
<summary>使用指定的 <see cref="T:System.Globalization.CompareOptions"/> 值将一个字符串的一部分与另一个字符串的一部分相比较，并返回一个指示二者在排序顺序中的关系的整数。</summary>
<returns>一个整数，该整数用于指示在排序顺序中两个字符串之间的关系，如下所示：值 条件 零 两个字符串相等。小于零 <paramref name="string1"/> 的指定部分小于 <paramref name="string2"/> 的指定部分。大于零 <paramref name="string1"/> 的指定部分大于 <paramref name="string2"/> 的指定部分。 </returns>
<param name="string1">要比较的第一个字符串。 </param>
<param name="offset1"><paramref name="string1"/> 中的字符从零开始的索引，将从此位置开始比较。 </param>
<param name="length1"><paramref name="string1"/> 中要比较的连续字符数。 </param>
<param name="string2">要比较的第二个字符串。 </param>
<param name="offset2"><paramref name="string2"/> 中的字符从零开始的索引，将从此位置开始比较。 </param>
<param name="length2"><paramref name="string2"/> 中要比较的连续字符数。 </param>
<param name="options">定义应如何比较 <paramref name="string1"/> 和 <paramref name="string2"/> 的 <see cref="T:System.Globalization.CompareOptions"/> 值。<paramref name="options"/> 或者是单独使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal"/> 值，或者是以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType"/> 和 <see cref="F:System.Globalization.CompareOptions.StringSort"/>。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="offset1"/> 或 <paramref name="length1"/> 或 <paramref name="offset2"/> 或 <paramref name="length2"/> 小于零。-或- <paramref name="offset1"/> 大于或等于 <paramref name="string1"/> 中的字符数。-或- <paramref name="offset2"/> 大于或等于 <paramref name="string2"/> 中的字符数。-或- <paramref name="length1"/> 大于或等于从 <paramref name="offset1"/> 到 <paramref name="string1"/> 末尾的字符数。-或- <paramref name="length2"/> 大于或等于从 <paramref name="offset2"/> 到 <paramref name="string2"/> 末尾的字符数。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="options"/> 包含无效的 <see cref="T:System.Globalization.CompareOptions"/> 值。 </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)">
<summary>将一个字符串的结束部分与另一个字符串的结束部分相比较，并返回一个指示二者在排序顺序中的关系的整数。</summary>
<returns>一个整数，该整数用于指示在排序顺序中两个字符串之间的关系，如下所示：值 条件 零 两个字符串相等。小于零 <paramref name="string1"/> 的指定部分小于 <paramref name="string2"/> 的指定部分。大于零 <paramref name="string1"/> 的指定部分大于 <paramref name="string2"/> 的指定部分。 </returns>
<param name="string1">要比较的第一个字符串。 </param>
<param name="offset1"><paramref name="string1"/> 中的字符从零开始的索引，将从此位置开始比较。 </param>
<param name="string2">要比较的第二个字符串。 </param>
<param name="offset2"><paramref name="string2"/> 中的字符从零开始的索引，将从此位置开始比较。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="offset1"/> 或 <paramref name="offset2"/> 小于零。-或- <paramref name="offset1"/> 大于或等于 <paramref name="string1"/> 中的字符数。-或- <paramref name="offset2"/> 大于或等于 <paramref name="string2"/> 中的字符数。 </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)">
<summary>使用指定的 <see cref="T:System.Globalization.CompareOptions"/> 值将一个字符串的结束部分与另一个字符串的结束部分相比较，并返回一个指示二者在排序顺序中的关系的整数。</summary>
<returns>一个整数，该整数用于指示在排序顺序中两个字符串之间的关系，如下所示：值 条件 零 两个字符串相等。小于零 <paramref name="string1"/> 的指定部分小于 <paramref name="string2"/> 的指定部分。大于零 <paramref name="string1"/> 的指定部分大于 <paramref name="string2"/> 的指定部分。 </returns>
<param name="string1">要比较的第一个字符串。 </param>
<param name="offset1"><paramref name="string1"/> 中的字符从零开始的索引，将从此位置开始比较。 </param>
<param name="string2">要比较的第二个字符串。 </param>
<param name="offset2"><paramref name="string2"/> 中的字符从零开始的索引，将从此位置开始比较。 </param>
<param name="options">定义应如何比较 <paramref name="string1"/> 和 <paramref name="string2"/> 的 <see cref="T:System.Globalization.CompareOptions"/> 值。<paramref name="options"/> 或者是单独使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal"/> 值，或者是以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType"/> 和 <see cref="F:System.Globalization.CompareOptions.StringSort"/>。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="offset1"/> 或 <paramref name="offset2"/> 小于零。-或- <paramref name="offset1"/> 大于或等于 <paramref name="string1"/> 中的字符数。-或- <paramref name="offset2"/> 大于或等于 <paramref name="string2"/> 中的字符数。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="options"/> 包含无效的 <see cref="T:System.Globalization.CompareOptions"/> 值。 </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.String)">
<summary>对两个字符串进行比较，并返回一个指示二者在排序顺序中的关系的整数。 </summary>
<returns>一个整数，该整数用于指示在排序顺序中两个字符串之间的关系，如下所示：值 条件 零 两个字符串相等。小于零 <paramref name="string1"/> 位于 <paramref name="string2"/> 之前。大于零 <paramref name="string1"/> 位于 <paramref name="string2"/> 之后。 </returns>
<param name="string1">要比较的第一个字符串。 </param>
<param name="string2">要比较的第二个字符串。 </param>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)">
<summary>使用指定的 <see cref="T:System.Globalization.CompareOptions"/> 值对两个字符串进行比较，并返回一个指示二者在排序顺序中的关系的整数。</summary>
<returns>一个整数，该整数用于指示在排序顺序中两个字符串之间的关系，如下所示：值 条件 零 两个字符串相等。小于零 <paramref name="string1"/> 小于 <paramref name="string2"/>。大于零 <paramref name="string1"/> 大于 <paramref name="string2"/>。 </returns>
<param name="string1">要比较的第一个字符串。 </param>
<param name="string2">要比较的第二个字符串。 </param>
<param name="options">定义应如何比较 <paramref name="string1"/> 和 <paramref name="string2"/> 的 <see cref="T:System.Globalization.CompareOptions"/> 值。<paramref name="options"/> 或者是单独使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal"/> 值，或者是以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType"/> 和 <see cref="F:System.Globalization.CompareOptions.StringSort"/>。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="options"/> 包含无效的 <see cref="T:System.Globalization.CompareOptions"/> 值。 </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Equals(System.Object)">
<summary>确定指定的对象是否等同于当前的 <see cref="T:System.Globalization.CompareInfo"/>。</summary>
<returns>如果指定的对象等于当前的 <see cref="T:System.Globalization.CompareInfo"/>，则为 true；否则为 false。</returns>
<param name="value">将与当前 <see cref="T:System.Globalization.CompareInfo"/> 进行比较的对象。 </param>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetCompareInfo(System.String)">
<summary>初始化与具有指定名称的区域性关联的新 <see cref="T:System.Globalization.CompareInfo"/> 对象。</summary>
<returns>一个新 <see cref="T:System.Globalization.CompareInfo"/> 对象，它与具有指定标识符的区域性关联，并使用当前 <see cref="T:System.Reflection.Assembly"/> 中的字符串比较方法。</returns>
<param name="name">表示区域性名称的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="name"/> 是无效的区域性名称。 </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetHashCode">
<summary>用作当前 <see cref="T:System.Globalization.CompareInfo"/> 的哈希函数，适合在哈希算法和数据结构（如哈希表）中使用。</summary>
<returns>当前 <see cref="T:System.Globalization.CompareInfo"/> 的哈希代码。</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)">
<summary>搜索指定的字符并返回整个源字符串内第一个匹配项的从零开始的索引。</summary>
<returns>如果在整个 <paramref name="source"/> 中找到 <paramref name="value"/> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
<param name="source">要搜索的字符串。 </param>
<param name="value">要在 <paramref name="source"/> 中查找的字符。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="source"/> 为 null。 </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)">
<summary>使用指定的 <see cref="T:System.Globalization.CompareOptions"/> 值，搜索指定的字符，并返回整个源字符串内第一个匹配项的从零开始的索引。</summary>
<returns>使用指定的 <see cref="T:System.Globalization.CompareOptions"/> 值，如果在整个 <paramref name="source"/> 中找到 <paramref name="value"/> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
<param name="source">要搜索的字符串。 </param>
<param name="value">要在 <paramref name="source"/> 中查找的字符。 </param>
<param name="options">定义应如何比较字符串的 <see cref="T:System.Globalization.CompareOptions"/> 值。<paramref name="options"/> 或者是单独使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal"/> 值，或者是以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth"/> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="source"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="options"/> 包含无效的 <see cref="T:System.Globalization.CompareOptions"/> 值。 </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)">
<summary>使用指定的 <see cref="T:System.Globalization.CompareOptions"/> 值，搜索指定的字符，并返回源字符串中从指定的索引位置到字符串结尾这一部分中第一个匹配项的从零开始的索引。</summary>
<returns>使用指定的 <see cref="T:System.Globalization.CompareOptions"/> 值，如果在 <paramref name="source"/> 中从 <paramref name="startIndex"/> 一直到 <paramref name="source"/> 的结尾这部分找到 <paramref name="value"/> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
<param name="source">要搜索的字符串。 </param>
<param name="value">要在 <paramref name="source"/> 中查找的字符。 </param>
<param name="startIndex">搜索的从零开始的起始索引。 </param>
<param name="options">定义应如何比较 <paramref name="source"/> 和 <paramref name="value"/> 的 <see cref="T:System.Globalization.CompareOptions"/> 值。<paramref name="options"/> 或者是单独使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal"/> 值，或者是以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth"/> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="source"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 超出了 <paramref name="source"/> 的有效索引范围。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="options"/> 包含无效的 <see cref="T:System.Globalization.CompareOptions"/> 值。 </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)">
<summary>搜索指定的字符，并返回源字符串内从指定的索引位置开始、包含所指定元素数的部分中第一个匹配项的从零开始的索引。</summary>
<returns>如果在 <paramref name="source"/> 的从 <paramref name="startIndex"/> 开始、包含 <paramref name="count"/> 所指定的元素数的部分中，找到 <paramref name="value"/> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
<param name="source">要搜索的字符串。 </param>
<param name="value">要在 <paramref name="source"/> 中查找的字符。 </param>
<param name="startIndex">搜索的从零开始的起始索引。 </param>
<param name="count">要搜索的部分中的元素数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="source"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 超出了 <paramref name="source"/> 的有效索引范围。-或-<paramref name="count"/> 小于零。-或-<paramref name="startIndex"/> 和 <paramref name="count"/> 指定的不是 <paramref name="source"/> 中的有效部分。 </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)">
<summary>使用指定的 <see cref="T:System.Globalization.CompareOptions"/> 值，搜索指定的字符，并返回源字符串内从指定的索引位置开始、包含所指定元素数的部分中第一个匹配项的从零开始的索引。</summary>
<returns>使用指定的 <see cref="T:System.Globalization.CompareOptions"/> 值，如果在 <paramref name="source"/> 中从 <paramref name="startIndex"/> 开始、包含 <paramref name="count"/> 指定的元素数的部分找到 <paramref name="value"/> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
<param name="source">要搜索的字符串。 </param>
<param name="value">要在 <paramref name="source"/> 中查找的字符。 </param>
<param name="startIndex">搜索的从零开始的起始索引。 </param>
<param name="count">要搜索的部分中的元素数。 </param>
<param name="options">定义应如何比较 <paramref name="source"/> 和 <paramref name="value"/> 的 <see cref="T:System.Globalization.CompareOptions"/> 值。<paramref name="options"/> 或者是单独使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal"/> 值，或者是以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth"/> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="source"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 超出了 <paramref name="source"/> 的有效索引范围。-或-<paramref name="count"/> 小于零。-或-<paramref name="startIndex"/> 和 <paramref name="count"/> 指定的不是 <paramref name="source"/> 中的有效部分。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="options"/> 包含无效的 <see cref="T:System.Globalization.CompareOptions"/> 值。 </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)">
<summary>搜索指定的子字符串并返回整个源字符串内第一个匹配项的从零开始的索引。</summary>
<returns>如果在整个 <paramref name="source"/> 中找到 <paramref name="value"/> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
<param name="source">要搜索的字符串。 </param>
<param name="value">要在 <paramref name="source"/> 中查找的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="source"/> 为 null。-或- <paramref name="value"/> 为 null。 </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)">
<summary>使用指定的 <see cref="T:System.Globalization.CompareOptions"/> 值，搜索指定的子字符串，并返回整个源字符串内第一个匹配项的从零开始的索引。</summary>
<returns>使用指定的 <see cref="T:System.Globalization.CompareOptions"/> 值，如果在整个 <paramref name="source"/> 中找到 <paramref name="value"/> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
<param name="source">要搜索的字符串。 </param>
<param name="value">要在 <paramref name="source"/> 中查找的字符串。 </param>
<param name="options">定义应如何比较 <paramref name="source"/> 和 <paramref name="value"/> 的 <see cref="T:System.Globalization.CompareOptions"/> 值。<paramref name="options"/> 或者是单独使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal"/> 值，或者是以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth"/> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="source"/> 为 null。-或- <paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="options"/> 包含无效的 <see cref="T:System.Globalization.CompareOptions"/> 值。 </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)">
<summary>使用指定的 <see cref="T:System.Globalization.CompareOptions"/> 值，搜索指定的子字符串，并返回源字符串中从指定的索引位置到字符串结尾这一部分中第一个匹配项的从零开始的索引。</summary>
<returns>使用指定的 <see cref="T:System.Globalization.CompareOptions"/> 值，如果在 <paramref name="source"/> 中从 <paramref name="startIndex"/> 一直到 <paramref name="source"/> 的结尾这部分找到 <paramref name="value"/> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
<param name="source">要搜索的字符串。 </param>
<param name="value">要在 <paramref name="source"/> 中查找的字符串。 </param>
<param name="startIndex">搜索的从零开始的起始索引。 </param>
<param name="options">定义应如何比较 <paramref name="source"/> 和 <paramref name="value"/> 的 <see cref="T:System.Globalization.CompareOptions"/> 值。<paramref name="options"/> 或者是单独使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal"/> 值，或者是以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth"/> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="source"/> 为 null。-或- <paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 超出了 <paramref name="source"/> 的有效索引范围。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="options"/> 包含无效的 <see cref="T:System.Globalization.CompareOptions"/> 值。 </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)">
<summary>搜索指定的子字符串，并返回源字符串内从指定的索引位置开始、包含所指定元素数的部分中第一个匹配项的从零开始的索引。</summary>
<returns>如果在 <paramref name="source"/> 的从 <paramref name="startIndex"/> 开始、包含 <paramref name="count"/> 所指定的元素数的部分中，找到 <paramref name="value"/> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
<param name="source">要搜索的字符串。 </param>
<param name="value">要在 <paramref name="source"/> 中查找的字符串。 </param>
<param name="startIndex">搜索的从零开始的起始索引。 </param>
<param name="count">要搜索的部分中的元素数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="source"/> 为 null。-或- <paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 超出了 <paramref name="source"/> 的有效索引范围。-或-<paramref name="count"/> 小于零。-或-<paramref name="startIndex"/> 和 <paramref name="count"/> 指定的不是 <paramref name="source"/> 中的有效部分。 </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)">
<summary>使用指定的 <see cref="T:System.Globalization.CompareOptions"/> 值，搜索指定的子字符串，并返回源字符串内从指定的索引位置开始、包含所指定元素数的部分中第一个匹配项的从零开始的索引。</summary>
<returns>使用指定的 <see cref="T:System.Globalization.CompareOptions"/> 值，如果在 <paramref name="source"/> 中从 <paramref name="startIndex"/> 开始、包含 <paramref name="count"/> 指定的元素数的部分找到 <paramref name="value"/> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
<param name="source">要搜索的字符串。 </param>
<param name="value">要在 <paramref name="source"/> 中查找的字符串。 </param>
<param name="startIndex">搜索的从零开始的起始索引。 </param>
<param name="count">要搜索的部分中的元素数。 </param>
<param name="options">定义应如何比较 <paramref name="source"/> 和 <paramref name="value"/> 的 <see cref="T:System.Globalization.CompareOptions"/> 值。<paramref name="options"/> 或者是单独使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal"/> 值，或者是以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth"/> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="source"/> 为 null。-或- <paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 超出了 <paramref name="source"/> 的有效索引范围。-或-<paramref name="count"/> 小于零。-或-<paramref name="startIndex"/> 和 <paramref name="count"/> 指定的不是 <paramref name="source"/> 中的有效部分。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="options"/> 包含无效的 <see cref="T:System.Globalization.CompareOptions"/> 值。 </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String)">
<summary>确定指定的源字符串是否以指定的前缀开头。</summary>
<returns>如果 <paramref name="prefix"/> 的长度小于或等于 <paramref name="source"/> 的长度，并且 <paramref name="source"/> 以 <paramref name="prefix"/> 开头，则为 true；否则为 false。</returns>
<param name="source">要在其中搜索的字符串。 </param>
<param name="prefix">要与 <paramref name="source"/> 的开头进行比较的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="source"/> 为 null。-或- <paramref name="prefix"/> 为 null。 </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)">
<summary>使用指定的 <see cref="T:System.Globalization.CompareOptions"/> 值确定指定的源字符串是否以指定的前缀开头。</summary>
<returns>如果 <paramref name="prefix"/> 的长度小于或等于 <paramref name="source"/> 的长度，并且 <paramref name="source"/> 以 <paramref name="prefix"/> 开头，则为 true；否则为 false。</returns>
<param name="source">要在其中搜索的字符串。 </param>
<param name="prefix">要与 <paramref name="source"/> 的开头进行比较的字符串。 </param>
<param name="options">定义应如何比较 <paramref name="source"/> 和 <paramref name="prefix"/> 的 <see cref="T:System.Globalization.CompareOptions"/> 值。<paramref name="options"/> 或者是单独使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal"/> 值，或者是以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth"/> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="source"/> 为 null。-或- <paramref name="prefix"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="options"/> 包含无效的 <see cref="T:System.Globalization.CompareOptions"/> 值。 </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String)">
<summary>确定指定的源字符串是否以指定的后缀结尾。</summary>
<returns>如果 <paramref name="suffix"/> 的长度小于或等于 <paramref name="source"/> 的长度，并且 <paramref name="source"/> 以 <paramref name="suffix"/> 结尾，则为 true；否则为 false。</returns>
<param name="source">要在其中搜索的字符串。 </param>
<param name="suffix">要与 <paramref name="source"/> 的结尾进行比较的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="source"/> 为 null。-或- <paramref name="suffix"/> 为 null。 </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)">
<summary>使用指定的 <see cref="T:System.Globalization.CompareOptions"/> 值确定指定的源字符串是否以指定的后缀结尾。</summary>
<returns>如果 <paramref name="suffix"/> 的长度小于或等于 <paramref name="source"/> 的长度，并且 <paramref name="source"/> 以 <paramref name="suffix"/> 结尾，则为 true；否则为 false。</returns>
<param name="source">要在其中搜索的字符串。 </param>
<param name="suffix">要与 <paramref name="source"/> 的结尾进行比较的字符串。 </param>
<param name="options">定义应如何比较 <paramref name="source"/> 和 <paramref name="suffix"/> 的 <see cref="T:System.Globalization.CompareOptions"/> 值。<paramref name="options"/> 或者是单独使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal"/> 值，或者是以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth"/> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="source"/> 为 null。-或- <paramref name="suffix"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="options"/> 包含无效的 <see cref="T:System.Globalization.CompareOptions"/> 值。 </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)">
<summary>搜索指定的字符，并返回整个源字符串内最后一个匹配项的从零开始的索引。</summary>
<returns>如果在整个 <paramref name="source"/> 中找到 <paramref name="value"/> 的匹配项，则为最后一个匹配项的从零开始的索引；否则为 -1。</returns>
<param name="source">要搜索的字符串。 </param>
<param name="value">要在 <paramref name="source"/> 中查找的字符。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="source"/> 为 null。 </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)">
<summary>使用指定的 <see cref="T:System.Globalization.CompareOptions"/> 值，搜索指定的字符，并返回整个源字符串内最后一个匹配项的从零开始的索引。</summary>
<returns>使用指定的 <see cref="T:System.Globalization.CompareOptions"/> 值，如果在整个 <paramref name="source"/> 中找到 <paramref name="value"/> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
<param name="source">要搜索的字符串。 </param>
<param name="value">要在 <paramref name="source"/> 中查找的字符。 </param>
<param name="options">定义应如何比较 <paramref name="source"/> 和 <paramref name="value"/> 的 <see cref="T:System.Globalization.CompareOptions"/> 值。<paramref name="options"/> 或者是单独使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal"/> 值，或者是以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth"/> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="source"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="options"/> 包含无效的 <see cref="T:System.Globalization.CompareOptions"/> 值。 </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)">
<summary>使用指定的 <see cref="T:System.Globalization.CompareOptions"/> 值，搜索指定的字符，并返回源字符串内从字符串开头到指定的索引位置这一部分中最后一个匹配项的从零开始的索引。</summary>
<returns>使用指定的 <see cref="T:System.Globalization.CompareOptions"/> 值，如果在 <paramref name="source"/> 中从 <paramref name="source"/> 的开头一直到 <paramref name="startIndex"/> 这部分找到 <paramref name="value"/> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
<param name="source">要搜索的字符串。 </param>
<param name="value">要在 <paramref name="source"/> 中查找的字符。 </param>
<param name="startIndex">向后搜索的从零开始的起始索引。 </param>
<param name="options">定义应如何比较 <paramref name="source"/> 和 <paramref name="value"/> 的 <see cref="T:System.Globalization.CompareOptions"/> 值。<paramref name="options"/> 或者是单独使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal"/> 值，或者是以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth"/> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="source"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 超出了 <paramref name="source"/> 的有效索引范围。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="options"/> 包含无效的 <see cref="T:System.Globalization.CompareOptions"/> 值。 </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)">
<summary>搜索指定的字符，并返回源字符串内包含所指定元素数、以指定索引位置结尾的部分中最后一个匹配项的从零开始的索引。</summary>
<returns>在包含 <paramref name="count"/> 所指定的元素数并以 <paramref name="startIndex"/> 结尾的这部分 <paramref name="source"/> 中，如果找到 <paramref name="value"/> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
<param name="source">要搜索的字符串。 </param>
<param name="value">要在 <paramref name="source"/> 中查找的字符。 </param>
<param name="startIndex">向后搜索的从零开始的起始索引。 </param>
<param name="count">要搜索的部分中的元素数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="source"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 超出了 <paramref name="source"/> 的有效索引范围。-或-<paramref name="count"/> 小于零。-或-<paramref name="startIndex"/> 和 <paramref name="count"/> 指定的不是 <paramref name="source"/> 中的有效部分。 </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)">
<summary>使用指定的 <see cref="T:System.Globalization.CompareOptions"/> 值，搜索指定的字符，并返回源字符串内包含所指定元素数、以指定的索引位置结尾的部分中最后一个匹配项的从零开始的索引。</summary>
<returns>使用指定的 <see cref="T:System.Globalization.CompareOptions"/> 值，如果在 <paramref name="source"/> 中包含 <paramref name="count"/> 指定的元素数并以 <paramref name="startIndex"/> 结尾的这部分找到 <paramref name="value"/> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
<param name="source">要搜索的字符串。 </param>
<param name="value">要在 <paramref name="source"/> 中查找的字符。 </param>
<param name="startIndex">向后搜索的从零开始的起始索引。 </param>
<param name="count">要搜索的部分中的元素数。 </param>
<param name="options">定义应如何比较 <paramref name="source"/> 和 <paramref name="value"/> 的 <see cref="T:System.Globalization.CompareOptions"/> 值。<paramref name="options"/> 或者是单独使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal"/> 值，或者是以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth"/> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="source"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 超出了 <paramref name="source"/> 的有效索引范围。-或-<paramref name="count"/> 小于零。-或-<paramref name="startIndex"/> 和 <paramref name="count"/> 指定的不是 <paramref name="source"/> 中的有效部分。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="options"/> 包含无效的 <see cref="T:System.Globalization.CompareOptions"/> 值。 </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)">
<summary>搜索指定的子字符串，并返回整个源字符串内最后一个匹配项的从零开始的索引。</summary>
<returns>如果在整个 <paramref name="source"/> 中找到 <paramref name="value"/> 的匹配项，则为最后一个匹配项的从零开始的索引；否则为 -1。</returns>
<param name="source">要搜索的字符串。 </param>
<param name="value">要在 <paramref name="source"/> 中查找的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="source"/> 为 null。-或- <paramref name="value"/> 为 null。 </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)">
<summary>使用指定的 <see cref="T:System.Globalization.CompareOptions"/> 值，搜索指定的子字符串，并返回整个源字符串内最后一个匹配项的从零开始的索引。</summary>
<returns>使用指定的 <see cref="T:System.Globalization.CompareOptions"/> 值，如果在整个 <paramref name="source"/> 中找到 <paramref name="value"/> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
<param name="source">要搜索的字符串。 </param>
<param name="value">要在 <paramref name="source"/> 中查找的字符串。 </param>
<param name="options">定义应如何比较 <paramref name="source"/> 和 <paramref name="value"/> 的 <see cref="T:System.Globalization.CompareOptions"/> 值。<paramref name="options"/> 或者是单独使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal"/> 值，或者是以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth"/> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="source"/> 为 null。-或- <paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="options"/> 包含无效的 <see cref="T:System.Globalization.CompareOptions"/> 值。 </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)">
<summary>使用指定的 <see cref="T:System.Globalization.CompareOptions"/> 值，搜索指定的子字符串，并返回源字符串内从字符串开头到指定的索引位置这一部分中最后一个匹配项的从零开始的索引。</summary>
<returns>使用指定的 <see cref="T:System.Globalization.CompareOptions"/> 值，如果在 <paramref name="source"/> 中从 <paramref name="source"/> 的开头一直到 <paramref name="startIndex"/> 这部分找到 <paramref name="value"/> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
<param name="source">要搜索的字符串。 </param>
<param name="value">要在 <paramref name="source"/> 中查找的字符串。 </param>
<param name="startIndex">向后搜索的从零开始的起始索引。 </param>
<param name="options">定义应如何比较 <paramref name="source"/> 和 <paramref name="value"/> 的 <see cref="T:System.Globalization.CompareOptions"/> 值。<paramref name="options"/> 或者是单独使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal"/> 值，或者是以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth"/> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="source"/> 为 null。-或- <paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 超出了 <paramref name="source"/> 的有效索引范围。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="options"/> 包含无效的 <see cref="T:System.Globalization.CompareOptions"/> 值。 </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)">
<summary>搜索指定的子字符串，并返回源字符串内包含所指定元素数、以指定的索引位置结尾的部分中最后一个匹配项的从零开始的索引。</summary>
<returns>在包含 <paramref name="count"/> 所指定的元素数并以 <paramref name="startIndex"/> 结尾的这部分 <paramref name="source"/> 中，如果找到 <paramref name="value"/> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
<param name="source">要搜索的字符串。 </param>
<param name="value">要在 <paramref name="source"/> 中查找的字符串。 </param>
<param name="startIndex">向后搜索的从零开始的起始索引。 </param>
<param name="count">要搜索的部分中的元素数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="source"/> 为 null。-或- <paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 超出了 <paramref name="source"/> 的有效索引范围。-或-<paramref name="count"/> 小于零。-或-<paramref name="startIndex"/> 和 <paramref name="count"/> 指定的不是 <paramref name="source"/> 中的有效部分。 </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)">
<summary>使用指定的 <see cref="T:System.Globalization.CompareOptions"/> 值，搜索指定的子字符串，并返回源字符串内包含所指定元素数、以指定的索引位置结尾的部分中最后一个匹配项的从零开始的索引。</summary>
<returns>使用指定的 <see cref="T:System.Globalization.CompareOptions"/> 值，如果在 <paramref name="source"/> 中包含 <paramref name="count"/> 指定的元素数并以 <paramref name="startIndex"/> 结尾的这部分找到 <paramref name="value"/> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
<param name="source">要搜索的字符串。 </param>
<param name="value">要在 <paramref name="source"/> 中查找的字符串。 </param>
<param name="startIndex">向后搜索的从零开始的起始索引。 </param>
<param name="count">要搜索的部分中的元素数。 </param>
<param name="options">定义应如何比较 <paramref name="source"/> 和 <paramref name="value"/> 的 <see cref="T:System.Globalization.CompareOptions"/> 值。<paramref name="options"/> 或者是单独使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal"/> 值，或者是以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace"/>、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth"/> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="source"/> 为 null。-或- <paramref name="value"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 超出了 <paramref name="source"/> 的有效索引范围。-或-<paramref name="count"/> 小于零。-或-<paramref name="startIndex"/> 和 <paramref name="count"/> 指定的不是 <paramref name="source"/> 中的有效部分。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="options"/> 包含无效的 <see cref="T:System.Globalization.CompareOptions"/> 值。 </exception>
    </member>
    <member name="P:System.Globalization.CompareInfo.Name">
<summary>获取用于通过此 <see cref="T:System.Globalization.CompareInfo"/> 对象执行排序操作的区域性的名称。</summary>
<returns>区域性的名称。</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.ToString">
<summary>返回一个字符串，它表示当前的 <see cref="T:System.Globalization.CompareInfo"/>。</summary>
<returns>表示当前 <see cref="T:System.Globalization.CompareInfo"/> 的字符串。</returns>
    </member>
    <member name="T:System.Globalization.CompareOptions">
<summary>定义要用于许多字符串比较方法的选项。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.None">
<summary>指定字符串比较的默认选项设置。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreCase">
<summary>指示字符串比较必须忽略大小写。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreNonSpace">
<summary>指示字符串比较必须忽略不占空间的组合字符，比如音调符号。Unicode 标准将组合字符定义为与基字符组合起来产生新字符的字符。不占空间的组合字符在呈现时其本身不占用空间位置。有关不占空间的组合字符的更多信息，请参阅位于 Unicode 主页上的“Unicode 标准”。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreSymbols">
<summary>指示字符串比较必须忽略符号，如空白字符、标点符号、货币符号、百分号、数学符号、“&amp;”符等等。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreKanaType">
<summary>指示字符串比较必须忽略假名类型。假名类型是指日语平假名和片假名字符，它们表示日语中的语音。平假名用于表示日语自有的短语和字词，而片假名用于表示从其他语言借用的字词，如“computer”或“Internet”。语音既可以用平假名也可以用片假名表示。如果选择该值，则认为一个语音的平假名字符等于同一语音的片假名字符。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreWidth">
<summary>指示字符串比较必须忽略字符宽度。例如，日语片假名字符可以写为全角或半角形式。如果选择此值，则认为片假名字符的全角形式等同于半角形式。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.OrdinalIgnoreCase">
<summary>字符串比较必须忽略大小写，然后执行序号比较。此方法相当于先使用固定区域性将字符串转换为大写，然后再对结果执行序号比较。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.StringSort">
<summary>指示字符串比较必须使用字符串排序算法。在字符串排序中，连字符、撇号以及其他非字母数字符号都排在字母数字字符之前。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.Ordinal">
<summary>指示必须使用每个字符的 Unicode 值进行字符串比较，这样可以提高比较速度，但不能区分区域性。如果 xxxx 小于 yyyy，则以“U+xxxx”开头的字符串位于以“U+yyyy”开头的字符串之前。此值必须单独使用，而不能与其他 <see cref="T:System.Globalization.CompareOptions"/> 值组合在一起。</summary>
    </member>
    <member name="T:System.Globalization.CultureInfo">
<summary>提供有关特定区域性的信息。这些信息包括区域性的名称、书写体系、使用的日历、用于数字和日期的格式以及排序字符串的顺序。</summary>
    </member>
    <member name="M:System.Globalization.CultureInfo.#ctor(System.String)">
<summary>根据由名称指定的区域性初始化 <see cref="T:System.Globalization.CultureInfo"/> 类的新实例。</summary>
<param name="name">预定义的区域性名称或现有 <see cref="T:System.Globalization.CultureInfo"/> 对象的 <see cref="P:System.Globalization.CultureInfo.Name"/> 属性。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
<exception cref="T:System.Globalization.CultureNotFoundException">在 Windows 系统上，<paramref name="name"/> 不是有效的区域性名称。</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.Calendar">
<summary>获取区域性使用的默认日历。</summary>
<returns>表示区域性使用的默认日历的对象。</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.Clone">
<summary>创建当前 <see cref="T:System.Globalization.CultureInfo"/> 对象的副本。</summary>
<returns>当前 <see cref="T:System.Globalization.CultureInfo"/> 对象的副本。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.CompareInfo">
<summary>获取用来为区域性定义如何比较字符串的 <see cref="T:System.Globalization.CompareInfo"/> 对象。</summary>
<returns>用来为区域性定义如何比较字符串的对象。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.CurrentCulture">
<summary>获取表示当前线程使用的区域性的 <see cref="T:System.Globalization.CultureInfo"/> 对象。</summary>
<returns>表示当前线程使用的区域性的对象。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.CurrentUICulture">
<summary>获取 <see cref="T:System.Globalization.CultureInfo"/> 对象，它表示资源管理器在运行时查找区域性特定资源所用的当前区域性。</summary>
<returns>表示资源管理器在运行时查找区域性特定资源所用的当前区域性。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.DateTimeFormat">
<summary>获取或设置 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象，该对象定义用于将日期和时间转换为字符串的相应于区域性的格式。</summary>
<returns>一个对象，它定义用于将日期和时间转换为字符串的相应于区域性的格式。</returns>
<exception cref="T:System.ArgumentNullException">该属性设置为 null。 </exception>
<exception cref="T:System.InvalidOperationException">设置了 <see cref="P:System.Globalization.CultureInfo.DateTimeFormat"/> 属性或任何 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 属性，但 <see cref="T:System.Globalization.CultureInfo"/> 是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.DisplayName">
<summary>获取采用 .NET Framework 本地化版本的语言的区域性名称，其格式为“language (country/region)”。</summary>
<returns>采用 .NET Framework 本地化版本的语言的区域性名称，其格式为“language (country/region)”，其中 language 是语言的完整名称，country/region 是国家或地区的完整名称。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.EnglishName">
<summary>获取格式为“language (country/region)”的英语区域性名称。</summary>
<returns>格式为“language (country/region)”的英语区域性名称，其中 language 是语言的完整名称，country/region 是国家或地区的完整名称。</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.Equals(System.Object)">
<summary>确定指定对象与此 <see cref="T:System.Globalization.CultureInfo"/> 对象是否为相同的区域性。</summary>
<returns>如果 <paramref name="value"/> 与当前 <see cref="T:System.Globalization.CultureInfo"/> 是相同的区域性，则为 true；否则为 false。</returns>
<param name="value">与此 <see cref="T:System.Globalization.CultureInfo"/> 对象进行比较的对象。 </param>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetFormat(System.Type)">
<summary>获取一个定义如何格式化指定类型的对象。</summary>
<returns>如果 <paramref name="formatType"/> 是表示 <see cref="T:System.Globalization.NumberFormatInfo"/> 类的 <see cref="T:System.Type"/> 对象，则为 <see cref="P:System.Globalization.CultureInfo.NumberFormat"/> 属性的值。该值是一个 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象，它包含此 <see cref="T:System.Globalization.CultureInfo"/> 对象的数值格式设置信息，-或- 如果 <paramref name="formatType"/> 是表示 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 类的 <see cref="T:System.Type"/> 对象，则为 <see cref="P:System.Globalization.CultureInfo.DateTimeFormat"/> 属性的值。该值是一个 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象，它包含此 <see cref="T:System.Globalization.CultureInfo"/> 对象的数值格式设置信息，-或- <paramref name="formatType"/> 是其他任何对象，则为 null。</returns>
<param name="formatType">要为其获取格式设置对象的类型。此方法仅支持 <see cref="T:System.Globalization.NumberFormatInfo"/> 和 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 两种类型。 </param>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetHashCode">
<summary>用作当前 <see cref="T:System.Globalization.CultureInfo"/> 的哈希函数，适合在哈希算法和数据结构（如哈希表）中使用。</summary>
<returns>当前 <see cref="T:System.Globalization.CultureInfo"/> 的哈希代码。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.InvariantCulture">
<summary>获取不依赖于区域性（固定）的 <see cref="T:System.Globalization.CultureInfo"/>。</summary>
<returns>不依赖于区域性（固定）的 <see cref="T:System.Globalization.CultureInfo"/>。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.IsNeutralCulture">
<summary>获取一个值，该值指示当前 <see cref="T:System.Globalization.CultureInfo"/> 对象是否表示非特定区域性。</summary>
<returns>如果当前 <see cref="T:System.Globalization.CultureInfo"/> 对象表示非特定区域性，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.IsReadOnly">
<summary>获取一个值，该值指示当前 <see cref="T:System.Globalization.CultureInfo"/> 对象是否为只读。</summary>
<returns>如果当前 <see cref="T:System.Globalization.CultureInfo"/> 对象为只读，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.Name">
<summary>获取格式为“languagecode-country/regioncode”的区域性名称。</summary>
<returns>格式为“languagecode-country/regioncode”的区域性名称，其中 languagecode 是从 ISO 639-1 派生的由两个小写字母构成的代码，country/regioncode 是从 ISO 3166 派生的由两个大写字母构成的代码。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.NativeName">
<summary>获取区域性设置显示的本地名称，它由语言、国家/地区以及可选的书写符号组成。</summary>
<returns>区域性的本地名称，由语言全名、国家/地区全名以及可选的书写符号组成。有关其格式的讨论，请参阅对 <see cref="T:System.Globalization.CultureInfo"/> 类的说明。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.NumberFormat">
<summary>获取或设置 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象，该对象定义用于将数字、货币值和百分比转换为字符串的相应于区域性的格式。</summary>
<returns>一个对象，它定义相应于区域性的数字、货币值和百分比输出格式。</returns>
<exception cref="T:System.ArgumentNullException">该属性设置为 null。 </exception>
<exception cref="T:System.InvalidOperationException">正在设置 <see cref="P:System.Globalization.CultureInfo.NumberFormat"/> 属性或任何 <see cref="T:System.Globalization.NumberFormatInfo"/> 属性，但 <see cref="T:System.Globalization.CultureInfo"/> 是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.OptionalCalendars">
<summary>获取该区域性可使用的日历的列表。</summary>
<returns>一个数组，表示此 <see cref="T:System.Globalization.CultureInfo"/> 对象代表的区域性可使用的日历。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.Parent">
<summary>获取表示当前 <see cref="T:System.Globalization.CultureInfo"/> 的父区域性的 <see cref="T:System.Globalization.CultureInfo"/>。</summary>
<returns>表示当前 <see cref="T:System.Globalization.CultureInfo"/> 的父区域性的 <see cref="T:System.Globalization.CultureInfo"/>。</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)">
<summary>返回指定 <see cref="T:System.Globalization.CultureInfo"/> 对象的只读包装。</summary>
<returns><paramref name="ci"/> 周围的只读 <see cref="T:System.Globalization.CultureInfo"/> 包装。</returns>
<param name="ci">要包装的 <see cref="T:System.Globalization.CultureInfo"/> 对象。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="ci"/> 为 null。 </exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.TextInfo">
<summary>获取定义与区域性关联的书写体系的 <see cref="T:System.Globalization.TextInfo"/> 对象。</summary>
<returns>定义与区域性关联的书写体系的 <see cref="T:System.Globalization.TextInfo"/> 对象。</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.ToString">
<summary>返回一个字符串，该字符串包含当前 <see cref="T:System.Globalization.CultureInfo"/> 对象的名称，其格式为“languagecode-country/regioncode”。</summary>
<returns>包含当前 <see cref="T:System.Globalization.CultureInfo"/> 名称的字符串。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName">
<summary>获取当前 <see cref="T:System.Globalization.CultureInfo"/> 的语言的由两个字母构成的 ISO 639-1 代码。</summary>
<returns>当前 <see cref="T:System.Globalization.CultureInfo"/> 对象的语言的由两个字母组成的 ISO 639-1 代码。</returns>
    </member>
    <member name="T:System.Globalization.CultureNotFoundException">
<summary>当某方法尝试构造一个在本地系统上不可用的区域性时引发的异常。</summary>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor">
<summary>使用系统提供的消息初始化 <see cref="T:System.Globalization.CultureNotFoundException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.Globalization.CultureNotFoundException"/> 类的新实例。</summary>
<param name="message">说明发生此异常的原因的错误消息。</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.Exception)">
<summary>使用指定的错误消息和对导致此异常的内部异常的引用来初始化 <see cref="T:System.Globalization.CultureNotFoundException"/> 类的新实例。</summary>
<param name="message">说明发生此异常的原因的错误消息。</param>
<param name="innerException">引发当前异常的异常。如果 <paramref name="innerException"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.String)">
<summary>使用指定错误消息和导致此异常的参数的名称来初始化 <see cref="T:System.Globalization.CultureNotFoundException"/> 类的新实例。</summary>
<param name="paramName">导致当前异常的参数的名称。</param>
<param name="message">说明发生此异常的原因的错误消息。</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.String,System.Exception)">
<summary>使用指定的错误消息、无效的区域性名称和对导致此异常的内部异常的引用来初始化 <see cref="T:System.Globalization.CultureNotFoundException"/> 类的新实例。</summary>
<param name="message">说明发生此异常的原因的错误消息。</param>
<param name="invalidCultureName">找不到的区域性名称。</param>
<param name="innerException">引发当前异常的异常。如果 <paramref name="innerException"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.String,System.String)">
<summary>使用指定的错误消息、无效的区域性名称和导致此异常的参数的名称来初始化 <see cref="T:System.Globalization.CultureNotFoundException"/> 类的新实例。</summary>
<param name="paramName">导致当前异常的参数的名称。</param>
<param name="invalidCultureName">找不到的区域性名称。</param>
<param name="message">说明发生此异常的原因的错误消息。</param>
    </member>
    <member name="P:System.Globalization.CultureNotFoundException.InvalidCultureName">
<summary>获取找不到的区域性名称。</summary>
<returns>无效的区域性名称。</returns>
    </member>
    <member name="P:System.Globalization.CultureNotFoundException.Message">
<summary>获取解释异常原因的错误消息。</summary>
<returns>一个描述异常的详细信息的文本字符串。</returns>
    </member>
    <member name="T:System.Globalization.DateTimeFormatInfo">
<summary>定义如何根据区域性设置 <see cref="T:System.DateTime"/> 值的格式并显示这些值。</summary>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.#ctor">
<summary>初始化不依赖于区域性的（固定的）<see cref="T:System.Globalization.DateTimeFormatInfo"/> 类的新可写实例。</summary>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames">
<summary>获取或设置类型 <see cref="T:System.String"/> 的一维数组，它包含周中各天的特定于区域性的缩写名称。</summary>
<returns>一个类型 <see cref="T:System.String"/> 的一维数组，它包含周中各天的特定于区域性的缩写名称。<see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo"/> 的数组包含"Sun"、"Mon"、"Tue"、"Wed"、"Thu"、"Fri"和"Sat"。</returns>
<exception cref="T:System.ArgumentNullException">已尝试将该属性设置为 null。 </exception>
<exception cref="T:System.ArgumentException">尝试将该属性设置为多维数组，或者设置为长度不恰好等于 7 的单维数组。 </exception>
<exception cref="T:System.InvalidOperationException"><see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames">
<summary>获取或设置与当前 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象关联的月份缩写名称的字符串数组。</summary>
<returns>月份缩写名称的字符串数组。</returns>
<exception cref="T:System.ArgumentException">尝试将该属性设置为多维数组，或者设置为长度不恰好等于 13 的单维数组。</exception>
<exception cref="T:System.ArgumentNullException">在设置操作中，值数组或值数组的元素之一为 null。</exception>
<exception cref="T:System.InvalidOperationException"><see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象是只读的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames">
<summary>获取或设置类型 <see cref="T:System.String"/> 的一维数组，它包含各月的特定于区域性的缩写名称。</summary>
<returns>一个类型 <see cref="T:System.String"/> 的一维数组，它包含各月的特定于区域性的缩写名称。在 12 个月的日历中，数组的第 13 个元素是一个空字符串。<see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo"/> 数组包含"Jan"、"Feb"、"Mar"、"Apr"、"May"、"Jun"、"Jul"、"Aug"、"Sep"、"Oct"、"Nov"、"Dec"和""。</returns>
<exception cref="T:System.ArgumentNullException">已尝试将该属性设置为 null。 </exception>
<exception cref="T:System.ArgumentException">尝试将该属性设置为多维数组，或者设置为长度不恰好等于 13 的单维数组。 </exception>
<exception cref="T:System.InvalidOperationException"><see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AMDesignator">
<summary>获取或设置表示处于"上午"（中午前）的各小时的字符串指示项。</summary>
<returns>表示处于"上午"（中午前）的各小时的字符串指示项。<see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo"/> 的默认值为"AM"。</returns>
<exception cref="T:System.ArgumentNullException">已尝试将该属性设置为 null。 </exception>
<exception cref="T:System.InvalidOperationException"><see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.Calendar">
<summary>获取或设置用于当前区域性的日历。</summary>
<returns>指示日历用于当前区域性的 <see cref="T:System.Globalization.Calendar"/>。<see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo"/> 的默认值是 <see cref="T:System.Globalization.GregorianCalendar"/>。</returns>
<exception cref="T:System.ArgumentNullException">已尝试将该属性设置为 null。 </exception>
<exception cref="T:System.ArgumentOutOfRangeException">尝试将该属性设置为对于当前区域性无效的 <see cref="T:System.Globalization.Calendar"/>。 </exception>
<exception cref="T:System.InvalidOperationException"><see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.CalendarWeekRule">
<summary>获取或设置一个值，该值指定使用哪一规则确定该年的第一个日历周。</summary>
<returns>一个 <see cref="T:System.Globalization.CalendarWeekRule"/> 值，该值确定该年的第一个日历周。<see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo"/> 的默认值是 <see cref="F:System.Globalization.CalendarWeekRule.FirstDay"/>。</returns>
<exception cref="T:System.ArgumentOutOfRangeException">尝试将该属性设置为不是有效的 <see cref="T:System.Globalization.CalendarWeekRule"/> 值的值。 </exception>
<exception cref="T:System.InvalidOperationException"><see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.Clone">
<summary>创建x <see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象的一个浅表副本。</summary>
<returns>从原始 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象复制的新 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.CurrentInfo">
<summary>获取表示当前区域性的日期和时间格式设置信息的只读 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象。</summary>
<returns>一个基于当前线程的 <see cref="T:System.Globalization.CultureInfo"/> 对象的只读 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象。它与检索 CultureInfo.CurrentCulture.DateTimeFormat 属性所返回的 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象完全相同。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.DayNames">
<summary>获取或设置类型 <see cref="T:System.String"/> 的一维数组，它包含周中各天的特定于区域性的全名。</summary>
<returns>一个类型 <see cref="T:System.String"/> 的一维数组，它包含周中各天的特定于区域性的完整名称。<see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo"/> 数组包含"Sunday"、"Monday"、"Tuesday"、"Wednesday"、"Thursday"、"Friday"和"Saturday"。</returns>
<exception cref="T:System.ArgumentNullException">已尝试将该属性设置为 null。 </exception>
<exception cref="T:System.ArgumentException">尝试将该属性设置为多维数组，或者设置为长度不恰好等于 7 的单维数组。 </exception>
<exception cref="T:System.InvalidOperationException"><see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek">
<summary>获取或设置该周的第一天。</summary>
<returns>一个 <see cref="T:System.DayOfWeek"/> 值，该值表示该周的第一天。<see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo"/> 的默认值是 <see cref="F:System.DayOfWeek.Sunday"/>。</returns>
<exception cref="T:System.ArgumentOutOfRangeException">尝试将该属性设置为不是有效的 <see cref="T:System.DayOfWeek"/> 值的值。 </exception>
<exception cref="T:System.InvalidOperationException"><see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.FullDateTimePattern">
<summary>获取或设置长日期和长时间值的自定义格式字符串，该字符串与"F"标准日期和时间格式字符串关联。</summary>
<returns>长日期和长时间值的自定义格式字符串，该字符串与"F"标准日期和时间格式字符串关联。</returns>
<exception cref="T:System.ArgumentNullException">已尝试将该属性设置为 null。 </exception>
<exception cref="T:System.InvalidOperationException"><see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedDayName(System.DayOfWeek)">
<summary>基于与当前 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象关联的区域性，返回周中指定天的特定于区域性的缩写名称。</summary>
<returns>由 <paramref name="dayofweek"/> 表示的周中某天的特定于区域性的缩写名称。</returns>
<param name="dayofweek">一个 <see cref="T:System.DayOfWeek"/> 值。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="dayofweek"/> 不是有效的 <see cref="T:System.DayOfWeek"/> 值。 </exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)">
<summary>返回包含指定纪元的缩写名称的字符串（如果缩写名称存在）。</summary>
<returns>如果存在缩写，则为包含指定纪元缩写名称的字符串；如果不存在缩写，则为包含该纪元完整名称的字符串。</returns>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="era"/> 不表示在 <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar"/> 属性中指定的日历中的有效纪元。 </exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedMonthName(System.Int32)">
<summary>基于与当前 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象关联的区域性，返回指定月份的特定于区域性的缩写名称。</summary>
<returns>由 <paramref name="month"/> 表示的月的特定于区域性的缩写名称。</returns>
<param name="month">一个从 1 到 13 的整数，表示要检索的月份的名称。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="month"/> 小于 1 或大于 13。 </exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetDayName(System.DayOfWeek)">
<summary>基于与当前 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象关联的区域性，返回周中指定天的特定于区域性的全名。</summary>
<returns>由 <paramref name="dayofweek"/> 表示的周中某天的特定于区域性的完整名称。</returns>
<param name="dayofweek">一个 <see cref="T:System.DayOfWeek"/> 值。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="dayofweek"/> 不是有效的 <see cref="T:System.DayOfWeek"/> 值。 </exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetEra(System.String)">
<summary>返回表示指定纪元名称的整数。</summary>
<returns>如果 <paramref name="eraName"/> 有效，则为表示纪元的整数；否则为 -1。</returns>
<param name="eraName">包含纪元名称的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="eraName"/> 为 null。 </exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)">
<summary>返回包含指定纪元名称的字符串。</summary>
<returns>包含纪元名称的字符串。</returns>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="era"/> 不表示在 <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar"/> 属性中指定的日历中的有效纪元。 </exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetFormat(System.Type)">
<summary>返回指定类型的对象，它提供 <see cref="T:System.DateTime"/> 格式化服务。</summary>
<returns>如果 <paramref name="formatType"/> 的类型是 <see cref="T:System.Globalization.DateTimeFormatInfo"/>，则为当前 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象；否则为 null。</returns>
<param name="formatType">所需格式化服务的 <see cref="T:System.Type"/>。 </param>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetInstance(System.IFormatProvider)">
<summary>返回与指定 <see cref="T:System.IFormatProvider"/> 关联的 <see cref="T:System.Globalization.DateTimeFormatInfo"/>。</summary>
<returns>与指定的 <see cref="T:System.IFormatProvider"/> 关联的 <see cref="T:System.Globalization.DateTimeFormatInfo"/>。</returns>
<param name="provider">获取 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 的 <see cref="T:System.IFormatProvider"/>。-或者- 如果为 null，则获取 <see cref="P:System.Globalization.DateTimeFormatInfo.CurrentInfo"/>。 </param>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetMonthName(System.Int32)">
<summary>基于与当前 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象关联的区域性，返回指定月份的特定于区域性的全名。</summary>
<returns>由 <paramref name="month"/> 表示的月的特定于区域性的完整名称。</returns>
<param name="month">一个从 1 到 13 的整数，表示要检索的月份的名称。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="month"/> 小于 1 或大于 13。 </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.InvariantInfo">
<summary>获取不依赖于区域性的（固定的）默认只读 <see cref="T:System.Globalization.DateTimeFormatInfo"/>。</summary>
<returns>不依赖于区域性的（固定的）默认只读 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象。它与 CultureInfo.InvariantCulture.DateTimeFormat 属性返回的 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象完全相同。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.IsReadOnly">
<summary>获取一个值，该值指示 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象是否为只读。</summary>
<returns>如果 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.LongDatePattern">
<summary>获取或设置长日期值的自定义格式字符串，该字符串与"D"标准日期和时间格式字符串关联。</summary>
<returns>长日期值的自定义格式字符串，该字符串与"D"标准格式字符串关联。</returns>
<exception cref="T:System.ArgumentNullException">已尝试将该属性设置为 null。 </exception>
<exception cref="T:System.InvalidOperationException"><see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.LongTimePattern">
<summary>获取或设置长时间值的自定义格式字符串，该字符串与"T"标准格式字符串关联。</summary>
<returns>长时间值的自定义格式字符串，该字符串与"T"标准格式字符串关联。</returns>
<exception cref="T:System.ArgumentNullException">已尝试将该属性设置为 null。 </exception>
<exception cref="T:System.InvalidOperationException"><see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.MonthDayPattern">
<summary>获取或设置月和日值的自定义格式字符串，该字符串与"m"和"M"标准日期和时间格式字符串关联。</summary>
<returns>月和日值的自定义格式字符串，该字符串与"m"和"M"标准格式字符串关联。</returns>
<exception cref="T:System.ArgumentNullException">已尝试将该属性设置为 null。 </exception>
<exception cref="T:System.InvalidOperationException"><see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames">
<summary>获取或设置与当前 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象关联的月份名称的字符串数组。</summary>
<returns>月份名称的字符串数组。</returns>
<exception cref="T:System.ArgumentException">尝试将该属性设置为多维数组，或者设置为长度不恰好等于 13 的单维数组。</exception>
<exception cref="T:System.ArgumentNullException">在设置操作中，值数组或值数组的元素之一为 null。</exception>
<exception cref="T:System.InvalidOperationException"><see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象是只读的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.MonthNames">
<summary>获取或设置类型 <see cref="T:System.String"/> 的一维数组，它包含各月的特定于区域性的全名。</summary>
<returns>一个类型 <see cref="T:System.String"/> 的一维数组，该数组包含月份的特定于区域性的完整名称。在 12 个月的日历中，数组的第 13 个元素是一个空字符串。<see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo"/> 数组包含"January"、"February"、"March"、"April"、"May"、"June"、"July"、"August"、"September"、"October"、"November"、"December"和""。</returns>
<exception cref="T:System.ArgumentNullException">已尝试将该属性设置为 null。 </exception>
<exception cref="T:System.ArgumentException">尝试将该属性设置为多维数组，或者设置为长度不恰好等于 13 的单维数组。 </exception>
<exception cref="T:System.InvalidOperationException"><see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.PMDesignator">
<summary>获取或设置表示处于"下午"（中午后）的各小时的字符串指示项。</summary>
<returns>表示处于"下午"（中午后）的各小时的字符串指示项。<see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo"/> 的默认值为"PM"。</returns>
<exception cref="T:System.ArgumentNullException">已尝试将该属性设置为 null。 </exception>
<exception cref="T:System.InvalidOperationException"><see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.ReadOnly(System.Globalization.DateTimeFormatInfo)">
<summary>返回只读的 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 包装。</summary>
<returns><paramref name="dtfi"/> 周围的只读 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 包装。</returns>
<param name="dtfi">要包装的 <see cref="T:System.Globalization.DateTimeFormatInfo"/>。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="dtfi"/> 为 null。 </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.RFC1123Pattern">
<summary>获取自定义的日期和时间格式字符串，该字符串基于 Internet 工程任务组 (IETF) 征求意见文档 (RFC) 1123 规范，并且与"r"和"R"标准格式字符串关联。</summary>
<returns>基于 IETF RFC 1123 规范的自定义日期和时间格式字符串。该字符串是固定的，不因区域性而变化。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.ShortDatePattern">
<summary>获取或设置短日期值的自定义日期和时间格式字符串，该字符串与"d"标准格式字符串关联。</summary>
<returns>短日期值的自定义格式字符串，该字符串与"d"标准格式字符串关联。</returns>
<exception cref="T:System.ArgumentNullException">已尝试将该属性设置为 null。 </exception>
<exception cref="T:System.InvalidOperationException"><see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.ShortestDayNames">
<summary>获取或设置与当前 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象关联的最短唯一日期缩写名称的字符串数组。</summary>
<returns>日期名称的字符串数组。</returns>
<exception cref="T:System.ArgumentException">尝试将该属性设置为多维数组，或者设置为长度不恰好等于 7 的单维数组。</exception>
<exception cref="T:System.ArgumentNullException">在设置操作中，值数组或值数组的元素之一为 null。</exception>
<exception cref="T:System.InvalidOperationException"><see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象是只读的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.ShortTimePattern">
<summary>获取或设置短时间值的自定义日期和时间格式字符串，该字符串与"t"标准格式字符串关联。</summary>
<returns>短时间值的自定义格式字符串，该字符串与"t"标准格式字符串关联。</returns>
<exception cref="T:System.ArgumentNullException">已尝试将该属性设置为 null。 </exception>
<exception cref="T:System.InvalidOperationException"><see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern">
<summary>获取可排序日期和时间值的自定义日期和时间格式字符串，该字符串与"s"标准格式字符串关联。</summary>
<returns>可排序日期和时间值的自定义格式字符串，该字符串与"s"标准格式字符串关联。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern">
<summary>获取通用的可排序日期和时间值的自定义日期和时间格式字符串，该字符串与"u"标准格式字符串关联。</summary>
<returns>通用的可排序日期和时间值的自定义格式字符串，该字符串与"u"标准格式字符串关联。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.YearMonthPattern">
<summary>获取或设置年和月值的自定义日期和时间格式字符串，该字符串与"y"和"Y"标准格式字符串关联。</summary>
<returns>年和月值的自定义格式字符串，该字符串与"y"和"Y"格式字符串关联。</returns>
<exception cref="T:System.ArgumentNullException">已尝试将该属性设置为 null。 </exception>
<exception cref="T:System.InvalidOperationException"><see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="T:System.Globalization.DateTimeStyles">
<summary>定义一些格式设置选项，这些选项可自定义许多 <see cref="T:System.DateTime"/> 和 <see cref="T:System.DateTimeOffset"/> 分析方法的字符串分析方法。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.None">
<summary>必须使用默认格式设置选项。此值表示 <see cref="M:System.DateTime.Parse(System.String)"/>、<see cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)"/> 和 <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)"/> 的默认样式。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowLeadingWhite">
<summary>在分析期间必须忽略前导空白字符，但空白字符出现在 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 格式模式中的情况除外。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowTrailingWhite">
<summary>在分析期间必须忽略尾随空白字符，但空白字符出现在 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 格式模式中的情况除外。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowInnerWhite">
<summary>在分析期间必须忽略字符串中间的多余空白字符，但空白字符出现在 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 格式模式中的情况除外。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces">
<summary>在分析期间必须忽略字符串任意位置的多余空白字符，但空白字符出现在 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 格式模式中的情况除外。该值是 <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite"/>、<see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite"/> 和 <see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite"/> 值的组合。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault">
<summary>如果分析的字符串只包含时间而不包含日期，则分析方法会假定以下公历日期：年 = 1、月 = 1 并且日 = 1。如果没有使用此值，则假定为当前日期。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AdjustToUniversal">
<summary>以协调世界时 (UTC) 形式返回日期和时间。如果输入字符串表示本地时间（通过时区说明符或 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal"/>），则会将日期和时间从本地时间转换为 UTC。如果输入字符串表示 UTC 时间（通过时区说明符或 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal"/>），则不进行任何转换。如果输入字符串不表示本地时间或 UTC 时间，则不进行任何转换，并且生成的 <see cref="P:System.DateTime.Kind"/> 属性为 <see cref="F:System.DateTimeKind.Unspecified"/>。 </summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AssumeLocal">
<summary>如果分析的字符串中未指定任何时区，则假定该字符串表示本地时间。 </summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AssumeUniversal">
<summary>如果分析的字符串中未指定任何时区，则假定该字符串表示 UTC。 </summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.RoundtripKind">
<summary>对于将 <see cref="T:System.DateTime"/> 方法用于包含时区信息的字符串的分析操作，尝试阻止转换为其 <see cref="P:System.DateTime.Kind"/> 属性设置为 <see cref="F:System.DateTimeKind.Local"/> 的本地 <see cref="T:System.DateTime"/> 值。对于 <see cref="T:System.DateTimeOffset"/> 值，此标志无效。</summary>
    </member>
    <member name="T:System.Globalization.GregorianCalendar">
<summary>表示公历。</summary>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.#ctor">
<summary>使用默认的 <see cref="T:System.Globalization.GregorianCalendarTypes"/> 值初始化 <see cref="T:System.Globalization.GregorianCalendar"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.#ctor(System.Globalization.GregorianCalendarTypes)">
<summary>使用指定的 <see cref="T:System.Globalization.GregorianCalendarTypes"/> 值初始化 <see cref="T:System.Globalization.GregorianCalendar"/> 类的新实例。</summary>
<param name="type"><see cref="T:System.Globalization.GregorianCalendarTypes"/> 值，指示要创建的日历的语言版本。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="type"/> 不是 <see cref="T:System.Globalization.GregorianCalendarTypes"/> 枚举的成员。</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.AddMonths(System.DateTime,System.Int32)">
<summary>返回与指定 <see cref="T:System.DateTime"/> 相距指定月数的 <see cref="T:System.DateTime"/>。</summary>
<returns>将指定的月数添加到指定的 <see cref="T:System.DateTime"/> 中时得到的 <see cref="T:System.DateTime"/>。</returns>
<param name="time"><see cref="T:System.DateTime"/>，将向其添加月数。 </param>
<param name="months">要添加的月数。 </param>
<exception cref="T:System.ArgumentException">结果 <see cref="T:System.DateTime"/> 超出了支持的范围。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="months"/> 小于 -120000。-或- <paramref name="months"/> 大于 120000。 </exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.AddYears(System.DateTime,System.Int32)">
<summary>返回与指定 <see cref="T:System.DateTime"/> 相距指定年数的 <see cref="T:System.DateTime"/>。</summary>
<returns>将指定年数添加到指定的 <see cref="T:System.DateTime"/> 中时得到的 <see cref="T:System.DateTime"/>。</returns>
<param name="time"><see cref="T:System.DateTime"/>，将向其添加年数。 </param>
<param name="years">要添加的年数。 </param>
<exception cref="T:System.ArgumentException">结果 <see cref="T:System.DateTime"/> 超出了支持的范围。 </exception>
    </member>
    <member name="F:System.Globalization.GregorianCalendar.ADEra">
<summary>表示当前纪元。此字段为常量。</summary>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.CalendarType">
<summary>获取或设置 <see cref="T:System.Globalization.GregorianCalendarTypes"/> 值，该值指示当前 <see cref="T:System.Globalization.GregorianCalendar"/> 的语言版本。</summary>
<returns>一个 <see cref="T:System.Globalization.GregorianCalendarTypes"/> 值，该值指示当前 <see cref="T:System.Globalization.GregorianCalendar"/> 的语言版本。</returns>
<exception cref="T:System.ArgumentOutOfRangeException">在设置操作中赋予的值不是 <see cref="T:System.Globalization.GregorianCalendarTypes"/> 枚举的成员。</exception>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.Eras">
<summary>获取 <see cref="T:System.Globalization.GregorianCalendar"/> 中的纪元的列表。</summary>
<returns>表示 <see cref="T:System.Globalization.GregorianCalendar"/> 中的纪元的整数数组。</returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDayOfMonth(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的日期是该月的几号。</summary>
<returns>从 1 到 31 的整数，表示 <paramref name="time"/> 中的日期是该月的几号。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDayOfWeek(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的日期是星期几。</summary>
<returns>一个 <see cref="T:System.DayOfWeek"/> 值，它表示 <paramref name="time"/> 中的日期是星期几。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDayOfYear(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的日期是该年中的第几天。</summary>
<returns>从 1 到 366 的整数，表示 <paramref name="time"/> 中的日期是该年中的第几天。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
<summary>返回指定纪元中指定年份的指定月份的天数。</summary>
<returns>指定纪元中指定年份的指定月份中的天数。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">1 到 12 之间的一个整数，它表示月份。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="era"/> 超出了此日历支持的范围。-或- <paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDaysInYear(System.Int32,System.Int32)">
<summary>返回指定纪元中指定年份的天数。</summary>
<returns>指定纪元中指定年份的天数。</returns>
<param name="year">表示年份的整数。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="era"/> 超出了此日历支持的范围。-或- <paramref name="year"/> 超出了此日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetEra(System.DateTime)">
<summary>返回指定的 <see cref="T:System.DateTime"/> 值的纪元。</summary>
<returns>表示 <paramref name="time"/> 中的纪元的整数。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetLeapMonth(System.Int32,System.Int32)">
<summary>计算指定纪元年份的闰月。</summary>
<returns>总为 0，因为公历无法识别闰月。</returns>
<param name="year">年份。</param>
<param name="era">纪元。指定 <see cref="F:System.Globalization.GregorianCalendar.ADEra"/> 或 GregorianCalendar.Eras[Calendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 小于公历 1 年或大于公历 9999 年。-或- <paramref name="era"/> 不是 <see cref="F:System.Globalization.GregorianCalendar.ADEra"/> 或 <see cref="F:System.Globalization.Calendar.CurrentEra"/>。</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetMonth(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的月份。</summary>
<returns>1 到 12 之间的一个整数，它表示 <paramref name="time"/> 中的月份。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetMonthsInYear(System.Int32,System.Int32)">
<summary>返回指定纪元中指定年份中的月数。</summary>
<returns>指定纪元中指定年份的月数。</returns>
<param name="year">表示年份的整数。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="era"/> 超出了此日历支持的范围。-或- <paramref name="year"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetYear(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的年份。</summary>
<returns>表示 <paramref name="time"/> 中的年份的整数。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>确定指定纪元中的指定日期是否为闰日。</summary>
<returns>如果指定的日期是闰日，则为 true；否则为 false。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">1 到 12 之间的一个整数，它表示月份。 </param>
<param name="day">1 到 31 之间的一个整数，它表示天。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="era"/> 超出了日历支持的范围。-或- <paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。-或- <paramref name="day"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
<summary>确定指定纪元中指定年份的指定月份是否为闰月。</summary>
<returns>除非被派生类重写，否则此方法始终返回 false。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">1 到 12 之间的一个整数，它表示月份。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="era"/> 超出了此日历支持的范围。-或- <paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.IsLeapYear(System.Int32,System.Int32)">
<summary>确定指定纪元中的指定年份是否为闰年。</summary>
<returns>如果指定的年份是闰年，则为 true；否则为 false。</returns>
<param name="year">表示年份的整数。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="era"/> 超出了此日历支持的范围。-或- <paramref name="year"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.MaxSupportedDateTime">
<summary>获取此 <see cref="T:System.Globalization.GregorianCalendar"/> 类型支持的最晚日期和时间。</summary>
<returns><see cref="T:System.Globalization.GregorianCalendar"/> 类型支持的最晚日期和时间，此日期时间为公历的公元 9999 年 12 月 31 日结束的那一刻，等效于 <see cref="F:System.DateTime.MaxValue"/> </returns>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.MinSupportedDateTime">
<summary>获取此 <see cref="T:System.Globalization.GregorianCalendar"/> 类型支持的最早日期和时间。</summary>
<returns><see cref="T:System.Globalization.GregorianCalendar"/> 类型支持的最早日期和时间，此日期时间为公历的公元 0001 年的 1 月 1 日开始的那一刻，等效于 <see cref="F:System.DateTime.MinValue"/> </returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>返回设置为指定纪元中的指定日期和时间的 <see cref="T:System.DateTime"/>。</summary>
<returns>设置为当前纪元中的指定日期和时间的 <see cref="T:System.DateTime"/>。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">1 到 12 之间的一个整数，它表示月份。 </param>
<param name="day">1 到 31 之间的一个整数，它表示天。 </param>
<param name="hour">0 与 23 之间的一个整数，它表示小时。 </param>
<param name="minute">0 与 59 之间的一个整数，它表示分钟。 </param>
<param name="second">0 与 59 之间的一个整数，它表示秒。 </param>
<param name="millisecond">0 与 999 之间的一个整数，它表示毫秒。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="era"/> 超出了此日历支持的范围。-或- <paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。-或- <paramref name="day"/> 超出了此日历支持的范围。-或- <paramref name="hour"/> 小于 0 或大于 23。-或- <paramref name="minute"/> 小于 0 或大于 59。-或- <paramref name="second"/> 小于 0 或大于 59。-或- <paramref name="millisecond"/> 小于 0 或大于 999。 </exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.ToFourDigitYear(System.Int32)">
<summary>使用 <see cref="P:System.Globalization.GregorianCalendar.TwoDigitYearMax"/> 属性将指定的年份转换为四位数年份，以确定相应的纪元。</summary>
<returns>包含 <paramref name="year"/> 的四位数表示形式的整数。</returns>
<param name="year">一个两位数或四位数的整数，表示要转换的年份。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了日历支持的范围。 </exception>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.TwoDigitYearMax">
<summary>获取或设置可以用两位数年份表示的 100 年范围内的最后一年。</summary>
<returns>可以用两位数年份表示的 100 年范围内的最后一年。</returns>
<exception cref="T:System.ArgumentOutOfRangeException">在设置操作中，赋予的值小于 99。-或- 在设置操作中，赋予的值大于 9999。</exception>
    </member>
    <member name="T:System.Globalization.GregorianCalendarTypes">
<summary>定义公历的不同语言版本。</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.Localized">
<summary>指公历的已本地化版本（基于使用 <see cref="T:System.Globalization.DateTimeFormatInfo"/> 对象的 <see cref="T:System.Globalization.CultureInfo"/> 对象的语言）。</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.USEnglish">
<summary>指公历的美国英语版本。</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.MiddleEastFrench">
<summary>指公历的中东法语版本。</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.Arabic">
<summary>指公历的阿拉伯语版本。</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.TransliteratedEnglish">
<summary>指公历的已转译的英语版本。</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.TransliteratedFrench">
<summary>指公历的已转译的法语版本。</summary>
    </member>
    <member name="T:System.Globalization.HebrewCalendar">
<summary>表示犹太历。</summary>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.#ctor">
<summary>初始化 <see cref="T:System.Globalization.HebrewCalendar"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.AddMonths(System.DateTime,System.Int32)">
<summary>返回与指定 <see cref="T:System.DateTime"/> 相距指定月数的 <see cref="T:System.DateTime"/>。</summary>
<returns>将指定的月数添加到指定的 <see cref="T:System.DateTime"/> 中时得到的 <see cref="T:System.DateTime"/>。</returns>
<param name="time">将向其添加 <paramref name="months"/> 的 <see cref="T:System.DateTime"/>。 </param>
<param name="months">要添加的月数。 </param>
<exception cref="T:System.ArgumentException">结果 <see cref="T:System.DateTime"/> 超出了支持的范围。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="months"/> 小于 -120,000 或大于 120,000。 </exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.AddYears(System.DateTime,System.Int32)">
<summary>返回与指定 <see cref="T:System.DateTime"/> 相距指定年数的 <see cref="T:System.DateTime"/>。</summary>
<returns>将指定年数添加到指定的 <see cref="T:System.DateTime"/> 中时得到的 <see cref="T:System.DateTime"/>。</returns>
<param name="time">将向其添加 <paramref name="years"/> 的 <see cref="T:System.DateTime"/>。 </param>
<param name="years">要添加的年数。 </param>
<exception cref="T:System.ArgumentException">结果 <see cref="T:System.DateTime"/> 超出了支持的范围。 </exception>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.Eras">
<summary>获取 <see cref="T:System.Globalization.HebrewCalendar"/> 中的纪元的列表。</summary>
<returns>表示 <see cref="T:System.Globalization.HebrewCalendar"/> 类型中的纪元的整数数组。返回值始终是包含一个等于 <see cref="F:System.Globalization.Calendar.CurrentEra"/> 的元素的数组。 </returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDayOfMonth(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的日期是该月的几号。</summary>
<returns>从 1 到 30 的整数，表示指定 <see cref="T:System.DateTime"/> 中的日期是该月的几号。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDayOfWeek(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的日期是星期几。</summary>
<returns>一个 <see cref="T:System.DayOfWeek"/> 值，它表示指定的 <see cref="T:System.DateTime"/> 中的日期是星期几。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDayOfYear(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的日期是该年中的第几天。</summary>
<returns>从 1 到 385 的整数，表示指定 <see cref="T:System.DateTime"/> 中的日期是该年中的第几天。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="time"/> 早于公历 1583 年 9 月 17 日或大于 <see cref="P:System.Globalization.HebrewCalendar.MaxSupportedDateTime"/>。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
<summary>返回指定纪元中指定年份的指定月份的天数。</summary>
<returns>指定纪元中指定年份的指定月份中的天数。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">1 到 13 之间的一个整数，它表示月份。 </param>
<param name="era">表示纪元的整数。指定 Calendar.Eras[Calendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/>、<paramref name="month"/> 或 <paramref name="era"/> 超出了当前 <see cref="T:System.Globalization.HebrewCalendar"/> 对象支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDaysInYear(System.Int32,System.Int32)">
<summary>返回指定纪元中指定年份的天数。</summary>
<returns>指定纪元中指定年份的天数。</returns>
<param name="year">表示年份的整数。 </param>
<param name="era">表示纪元的整数。指定 Calendar.Eras[Calendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 或 <paramref name="era"/> 超出了当前 <see cref="T:System.Globalization.HebrewCalendar"/> 对象支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetEra(System.DateTime)">
<summary>返回指定的 <see cref="T:System.DateTime"/> 值的纪元。</summary>
<returns>表示指定的 <see cref="T:System.DateTime"/> 值中的纪元的整数。返回值始终为 <see cref="F:System.Globalization.Calendar.CurrentEra"/>。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetLeapMonth(System.Int32,System.Int32)">
<summary>计算指定纪元年份的闰月。</summary>
<returns>一个正整数，表示指定纪元年份中的闰月。如果 <paramref name="year"/> 和 <paramref name="era"/> 参数指定闰年，则返回值为 7；如果不是闰年，则为 0。</returns>
<param name="year">年份。</param>
<param name="era">纪元。指定 Calendar.Eras[Calendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="era"/> 不是 <see cref="F:System.Globalization.Calendar.CurrentEra"/>。-或- <paramref name="year"/> 小于犹太历年份 5343 或大于犹太历年份 5999。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetMonth(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的月份。</summary>
<returns>1 到 13 之间的一个整数，它表示指定的 <see cref="T:System.DateTime"/> 中的月份。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="time"/> 小于 <see cref="P:System.Globalization.HebrewCalendar.MinSupportedDateTime"/> 或大于 <see cref="P:System.Globalization.HebrewCalendar.MaxSupportedDateTime"/>。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetMonthsInYear(System.Int32,System.Int32)">
<summary>返回指定纪元中指定年份中的月数。</summary>
<returns>指定纪元中指定年份的月数。返回值是 12（在平年中）或 13（在闰年中）。</returns>
<param name="year">表示年份的整数。 </param>
<param name="era">表示纪元的整数。指定 Calendar.Eras[Calendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 或 <paramref name="era"/> 超出了当前 <see cref="T:System.Globalization.HebrewCalendar"/> 对象支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetYear(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 值中的年份。</summary>
<returns>一个整数，表示指定的 <see cref="T:System.DateTime"/> 值中的年份。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="time"/> 超出了当前 <see cref="T:System.Globalization.HebrewCalendar"/> 对象支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>确定指定纪元中的指定日期是否为闰日。</summary>
<returns>如果指定的日期是闰日，则为 true；否则为 false。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">1 到 13 之间的一个整数，它表示月份。 </param>
<param name="day">1 到 30 之间的一个整数，它表示天。 </param>
<param name="era">表示纪元的整数。指定 Calendar.Eras[Calendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/>、<paramref name="month"/>、<paramref name="day"/> 或 <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
<summary>确定指定纪元中指定年份的指定月份是否为闰月。</summary>
<returns>如果指定的月份是闰月，则为 true；否则为 false。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">1 到 13 之间的一个整数，它表示月份。 </param>
<param name="era">表示纪元的整数。指定 Calendar.Eras[Calendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/>、<paramref name="month"/> 或 <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.IsLeapYear(System.Int32,System.Int32)">
<summary>确定指定纪元中的指定年份是否为闰年。</summary>
<returns>如果指定的年份是闰年，则为 true；否则为 false。</returns>
<param name="year">表示年份的整数。 </param>
<param name="era">表示纪元的整数。指定 Calendar.Eras[Calendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 或 <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.MaxSupportedDateTime">
<summary>获取此 <see cref="T:System.Globalization.HebrewCalendar"/> 类型支持的最晚日期和时间。</summary>
<returns><see cref="T:System.Globalization.HebrewCalendar"/> 类型支持的最晚日期和时间，此日期时间为公历的公元 2239 年 9 月 29 日的最后时刻。</returns>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.MinSupportedDateTime">
<summary>获取此 <see cref="T:System.Globalization.HebrewCalendar"/> 类型支持的最早日期和时间。</summary>
<returns><see cref="T:System.Globalization.HebrewCalendar"/> 类型支持的最早日期和时间，此日期时间相当于公历的公元 1583 年 1 月 1 日开始的那一刻。</returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>返回设置为指定纪元中的指定日期和时间的 <see cref="T:System.DateTime"/>。</summary>
<returns>设置为当前纪元中的指定日期和时间的 <see cref="T:System.DateTime"/>。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">1 到 13 之间的一个整数，它表示月份。 </param>
<param name="day">1 到 30 之间的一个整数，它表示天。 </param>
<param name="hour">0 与 23 之间的一个整数，它表示小时。 </param>
<param name="minute">0 与 59 之间的一个整数，它表示分钟。 </param>
<param name="second">0 与 59 之间的一个整数，它表示秒。 </param>
<param name="millisecond">0 与 999 之间的一个整数，它表示毫秒。 </param>
<param name="era">表示纪元的整数。指定 Calendar.Eras[Calendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/>、<paramref name="month"/>、<paramref name="day"/> 或 <paramref name="era"/> 超出了当前 <see cref="T:System.Globalization.HebrewCalendar"/> 对象支持的范围。-或- <paramref name="hour"/> 小于 0 或大于 23。-或- <paramref name="minute"/> 小于 0 或大于 59。-或- <paramref name="second"/> 小于 0 或大于 59。-或- <paramref name="millisecond"/> 小于 0 或大于 999。 </exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.ToFourDigitYear(System.Int32)">
<summary>使用 <see cref="P:System.Globalization.HebrewCalendar.TwoDigitYearMax"/> 属性将指定的年份转换为四位数年份，以确定相应的纪元。</summary>
<returns>如果 <paramref name="year"/> 参数是两位数年份，则返回值是对应的四位数年份。如果 <paramref name="year"/> 参数是四位数年份，则返回值是未更改的 <paramref name="year"/> 参数。</returns>
<param name="year">一个从 0 到 99 的两位数年份，或者从 5343 到 5999 的四位数犹太历年份。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 小于 0。-或- <paramref name="year"/> 小于 <see cref="P:System.Globalization.HebrewCalendar.MinSupportedDateTime"/> 或大于 <see cref="P:System.Globalization.HebrewCalendar.MaxSupportedDateTime"/>。 </exception>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.TwoDigitYearMax">
<summary>获取或设置可以用两位数年份表示的 100 年范围内的最后一年。</summary>
<returns>可以用两位数年份表示的 100 年范围内的最后一年。</returns>
<exception cref="T:System.InvalidOperationException">当前的 <see cref="T:System.Globalization.HebrewCalendar"/> 对象为只读。</exception>
<exception cref="T:System.ArgumentOutOfRangeException">在 set 操作中，犹太历年数值小于 5343 而不是 99，或者大于 5999。 </exception>
    </member>
    <member name="T:System.Globalization.HijriCalendar">
<summary>表示回历。</summary>
    </member>
    <member name="M:System.Globalization.HijriCalendar.#ctor">
<summary>初始化 <see cref="T:System.Globalization.HijriCalendar"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Globalization.HijriCalendar.AddMonths(System.DateTime,System.Int32)">
<summary>返回与指定 <see cref="T:System.DateTime"/> 相距指定月数的 <see cref="T:System.DateTime"/>。</summary>
<returns>将指定的月数添加到指定的 <see cref="T:System.DateTime"/> 中时得到的 <see cref="T:System.DateTime"/>。</returns>
<param name="time">将向其添加月数的 <see cref="T:System.DateTime"/>。 </param>
<param name="months">要添加的月数。 </param>
<exception cref="T:System.ArgumentException">产生的 <see cref="T:System.DateTime"/>。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="months"/> 小于 -120000。-或- <paramref name="months"/> 大于 120000。 </exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.AddYears(System.DateTime,System.Int32)">
<summary>返回与指定 <see cref="T:System.DateTime"/> 相距指定年数的 <see cref="T:System.DateTime"/>。</summary>
<returns>将指定年数添加到指定的 <see cref="T:System.DateTime"/> 中时得到的 <see cref="T:System.DateTime"/>。</returns>
<param name="time">将向其添加年数的 <see cref="T:System.DateTime"/>。 </param>
<param name="years">要添加的年数。 </param>
<exception cref="T:System.ArgumentException">结果 <see cref="T:System.DateTime"/> 超出了支持的范围。 </exception>
    </member>
    <member name="P:System.Globalization.HijriCalendar.Eras">
<summary>获取 <see cref="T:System.Globalization.HijriCalendar"/> 中的纪元的列表。</summary>
<returns>表示 <see cref="T:System.Globalization.HijriCalendar"/> 中的纪元的整数数组。</returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDayOfMonth(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的日期是该月的几号。</summary>
<returns>从 1 到 30 的整数，表示指定 <see cref="T:System.DateTime"/> 中的日期是该月的几号。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDayOfWeek(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的日期是星期几。</summary>
<returns>一个 <see cref="T:System.DayOfWeek"/> 值，它表示指定的 <see cref="T:System.DateTime"/> 中的日期是星期几。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDayOfYear(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的日期是该年中的第几天。</summary>
<returns>从 1 到 355 的整数，表示指定 <see cref="T:System.DateTime"/> 中的日期是该年中的第几天。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
<summary>返回指定纪元年份中指定月份的天数。</summary>
<returns>指定纪元中指定年份的指定月份中的天数。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">1 到 12 之间的一个整数，它表示月份。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="era"/> 超出了此日历支持的范围。-或- <paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDaysInYear(System.Int32,System.Int32)">
<summary>返回指定纪元年份中的天数。</summary>
<returns>指定纪元年份中的天数。天数在平年中为 354，在闰年中为 355。</returns>
<param name="year">表示年份的整数。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 或 <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetEra(System.DateTime)">
<summary>返回指定的 <see cref="T:System.DateTime"/> 值的纪元。</summary>
<returns>表示指定的 <see cref="T:System.DateTime"/> 值中的纪元的整数。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetLeapMonth(System.Int32,System.Int32)">
<summary>计算指定纪元年份的闰月。</summary>
<returns>总为 0，因为 <see cref="T:System.Globalization.HijriCalendar"/> 类型不支持闰月。</returns>
<param name="year">年份。</param>
<param name="era">纪元。指定 <see cref="F:System.Globalization.Calendar.CurrentEra"/>。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 小于回历年 1 或大于 9666 年。-或- <paramref name="era"/> 不是 <see cref="F:System.Globalization.Calendar.CurrentEra"/>。</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetMonth(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的月份。</summary>
<returns>1 到 12 之间的一个整数，它表示指定的 <see cref="T:System.DateTime"/> 中的月份。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetMonthsInYear(System.Int32,System.Int32)">
<summary>返回指定纪元年份中的月数。</summary>
<returns>指定纪元年份中的月数。</returns>
<param name="year">表示年份的整数。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="era"/> 超出了此日历支持的范围。-或- <paramref name="year"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetYear(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的年份。</summary>
<returns>一个整数，它表示指定的 <see cref="T:System.DateTime"/> 中的年份。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="P:System.Globalization.HijriCalendar.HijriAdjustment">
<summary>获取或设置要在日历中添加或减去的天数，以适应 Ramadan 的开头和结尾中的差异以及国家/地区间的日期差别。</summary>
<returns>-2 到 2 之间的一个整数，表示要在日历中添加或减去的天数。</returns>
<exception cref="T:System.ArgumentOutOfRangeException">此属性当前设置为无效值。 </exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>确定指定的日期是否为闰日。</summary>
<returns>如果指定的日期是闰日，则为 true；否则为 false。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">1 到 12 之间的一个整数，它表示月份。 </param>
<param name="day">1 到 30 之间的一个整数，它表示天。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="era"/> 超出了此日历支持的范围。-或- <paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。-或- <paramref name="day"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
<summary>确定指定纪元年份中的指定月份是否为闰月。</summary>
<returns>此方法始终返回 false。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">1 到 12 之间的一个整数，它表示月份。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="era"/> 超出了此日历支持的范围。-或- <paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.IsLeapYear(System.Int32,System.Int32)">
<summary>确定指定纪元中的指定年份是否为闰年。</summary>
<returns>如果指定的年份是闰年，则为 true；否则为 false。</returns>
<param name="year">表示年份的整数。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="era"/> 超出了此日历支持的范围。-或- <paramref name="year"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="P:System.Globalization.HijriCalendar.MaxSupportedDateTime">
<summary>获取此日历支持的最晚日期和时间。</summary>
<returns><see cref="T:System.Globalization.HijriCalendar"/> 类型支持的最晚日期和时间，此日期时间相当于公历的公元 9999 年 12 月 31 日结束的那一刻。</returns>
    </member>
    <member name="P:System.Globalization.HijriCalendar.MinSupportedDateTime">
<summary>获取此日历支持的最早日期和时间。</summary>
<returns><see cref="T:System.Globalization.HijriCalendar"/> 类型支持的最早日期和时间，此日期时间相当于公历的公元 622 年 7 月 18 月开始的那一刻。</returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>返回设置为指定的日期、时间和纪元的 <see cref="T:System.DateTime"/>。</summary>
<returns>设置为当前纪元中的指定日期和时间的 <see cref="T:System.DateTime"/>。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">1 到 12 之间的一个整数，它表示月份。 </param>
<param name="day">1 到 30 之间的一个整数，它表示天。 </param>
<param name="hour">0 与 23 之间的一个整数，它表示小时。 </param>
<param name="minute">0 与 59 之间的一个整数，它表示分钟。 </param>
<param name="second">0 与 59 之间的一个整数，它表示秒。 </param>
<param name="millisecond">0 与 999 之间的一个整数，它表示毫秒。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="era"/> 超出了此日历支持的范围。-或- <paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。-或- <paramref name="day"/> 超出了此日历支持的范围。-或- <paramref name="hour"/> 小于 0 或大于 23。-或- <paramref name="minute"/> 小于 0 或大于 59。-或- <paramref name="second"/> 小于 0 或大于 59。-或- <paramref name="millisecond"/> 小于 0 或大于 999。 </exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.ToFourDigitYear(System.Int32)">
<summary>使用 <see cref="P:System.Globalization.HijriCalendar.TwoDigitYearMax"/> 属性将指定的年份转换为四位数年份，以确定相应的纪元。</summary>
<returns>包含 <paramref name="year"/> 的四位数表示形式的整数。</returns>
<param name="year">一个两位数或四位数的整数，表示要转换的年份。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="P:System.Globalization.HijriCalendar.TwoDigitYearMax">
<summary>获取或设置可以用两位数年份表示的 100 年范围内的最后一年。</summary>
<returns>可以用两位数年份表示的 100 年范围内的最后一年。</returns>
<exception cref="T:System.InvalidOperationException">此日历为只读。</exception>
<exception cref="T:System.ArgumentOutOfRangeException">设置操作中的值小于 100 或大于 9666。</exception>
    </member>
    <member name="T:System.Globalization.JapaneseCalendar">
<summary>表示日本历。</summary>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.#ctor">
<summary>初始化 <see cref="T:System.Globalization.JapaneseCalendar"/> 类的新实例。</summary>
<exception cref="T:System.TypeInitializationException">无法初始化与此 <see cref="T:System.Globalization.JapaneseCalendar"/> 对象对应的 ja-JP <see cref="T:System.Globalization.CultureInfo"/> 对象。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.AddMonths(System.DateTime,System.Int32)">
<summary>返回与指定 <see cref="T:System.DateTime"/> 相距指定月数的 <see cref="T:System.DateTime"/>。</summary>
<returns>将指定的月数添加到指定的 <see cref="T:System.DateTime"/> 中时得到的 <see cref="T:System.DateTime"/>。</returns>
<param name="time"><see cref="T:System.DateTime"/>，将向其添加月数。 </param>
<param name="months">要添加的月数。 </param>
<exception cref="T:System.ArgumentException">结果 <see cref="T:System.DateTime"/> 超出了支持的范围。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="months"/> 小于 -120000。-或- <paramref name="months"/> 大于 120000。 </exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.AddYears(System.DateTime,System.Int32)">
<summary>返回与指定 <see cref="T:System.DateTime"/> 相距指定年数的 <see cref="T:System.DateTime"/>。</summary>
<returns>将指定年数添加到指定的 <see cref="T:System.DateTime"/> 中时得到的 <see cref="T:System.DateTime"/>。</returns>
<param name="time"><see cref="T:System.DateTime"/>，将向其添加年数。 </param>
<param name="years">要添加的年数。 </param>
<exception cref="T:System.ArgumentException">结果 <see cref="T:System.DateTime"/> 超出了支持的范围。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="time"/> 超出了 <see cref="T:System.Globalization.JapaneseCalendar"/> 类型所支持的范围。-或- <paramref name="years"/> 小于 -10,000 或大于 10,000。 </exception>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.Eras">
<summary>获取 <see cref="T:System.Globalization.JapaneseCalendar"/> 中的纪元的列表。</summary>
<returns>表示 <see cref="T:System.Globalization.JapaneseCalendar"/> 中的纪元的整数数组。</returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的日期是该月的几号。</summary>
<returns>从 1 到 31 的整数，表示指定 <see cref="T:System.DateTime"/> 中的日期是该月的几号。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的日期是星期几。</summary>
<returns>一个 <see cref="T:System.DayOfWeek"/> 值，它表示指定的 <see cref="T:System.DateTime"/> 中的日期是星期几。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的日期是该年中的第几天。</summary>
<returns>从 1 到 366 的整数，表示指定 <see cref="T:System.DateTime"/> 中的日期是该年中的第几天。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
<summary>返回指定纪元中指定年份的指定月份的天数。</summary>
<returns>指定纪元中指定年份的指定月份中的天数。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">1 到 12 之间的一个整数，它表示月份。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32,System.Int32)">
<summary>返回指定纪元中指定年份的天数。</summary>
<returns>指定纪元中指定年份的天数。</returns>
<param name="year">表示年份的整数。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetEra(System.DateTime)">
<summary>返回指定的 <see cref="T:System.DateTime"/> 值的纪元。</summary>
<returns>表示指定的 <see cref="T:System.DateTime"/> 值中的纪元的整数。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
<exception cref="T:System.ArgumentException">结果 <see cref="T:System.DateTime"/> 超出了支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetLeapMonth(System.Int32,System.Int32)">
<summary>计算指定纪元年份的闰月。</summary>
<returns>返回值总是为 0，因为 <see cref="T:System.Globalization.JapaneseCalendar"/> 类型不支持闰月的概念。</returns>
<param name="year">年份。</param>
<param name="era">纪元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 或 <paramref name="era"/> 超出了 <see cref="T:System.Globalization.JapaneseCalendar"/> 类型支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的月份。</summary>
<returns>1 到 12 之间的一个整数，它表示指定的 <see cref="T:System.DateTime"/> 中的月份。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)">
<summary>返回指定纪元中指定年份中的月数。</summary>
<returns>返回值始终为 12。</returns>
<param name="year">表示年份的整数。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
<summary>返回年中包括指定 <see cref="T:System.DateTime"/> 中的日期的星期。</summary>
<returns>一个从 1 开始的整数，表示一年中包括 <paramref name="time"/> 参数中的日期的那个星期。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
<param name="rule"><see cref="T:System.Globalization.CalendarWeekRule"/> 值之一，用于定义一个日历周。 </param>
<param name="firstDayOfWeek"><see cref="T:System.DayOfWeek"/> 值之一，表示一个星期的第一天。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="time"/> 或 <paramref name="firstDayOfWeek"/> 超出了此日历支持的范围。-或- <paramref name="rule"/> 不是有效的 <see cref="T:System.Globalization.CalendarWeekRule"/> 值。 </exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetYear(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的年份。</summary>
<returns>一个整数，它表示指定的 <see cref="T:System.DateTime"/> 中的年份。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>确定指定纪元中的指定日期是否为闰日。</summary>
<returns>如果指定的日期是闰日，则为 true；否则为 false。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">1 到 12 之间的一个整数，它表示月份。 </param>
<param name="day">1 到 31 之间的一个整数，它表示天。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。-或- <paramref name="day"/> 超出了此日历支持的范围。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
<summary>确定指定纪元中指定年份的指定月份是否为闰月。</summary>
<returns>除非被派生类重写，否则此方法始终返回 false。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">1 到 12 之间的一个整数，它表示月份。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.IsLeapYear(System.Int32,System.Int32)">
<summary>确定指定纪元中的指定年份是否为闰年。</summary>
<returns>如果指定的年份是闰年，则为 true；否则为 false。</returns>
<param name="year">表示年份的整数。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.MaxSupportedDateTime">
<summary>获取此 <see cref="T:System.Globalization.JapaneseCalendar"/> 类支持的最晚日期和时间。</summary>
<returns><see cref="T:System.Globalization.JapaneseCalendar"/> 类型支持的最晚日期和时间，此日期时间相当于公历的公元 9999 年 12 月 31 日结束的那一刻。</returns>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.MinSupportedDateTime">
<summary>获取此 <see cref="T:System.Globalization.JapaneseCalendar"/> 类支持的最早日期和时间。</summary>
<returns><see cref="T:System.Globalization.JapaneseCalendar"/> 类型支持的最早日期和时间，此日期时间相当于公历的公元 1868 年 1 月 1 日开始的那一刻。 </returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>返回设置为指定纪元中的指定日期和时间的 <see cref="T:System.DateTime"/>。</summary>
<returns>设置为当前纪元中的指定日期和时间的 <see cref="T:System.DateTime"/>。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">1 到 12 之间的一个整数，它表示月份。 </param>
<param name="day">1 到 31 之间的一个整数，它表示天。 </param>
<param name="hour">0 与 23 之间的一个整数，它表示小时。 </param>
<param name="minute">0 与 59 之间的一个整数，它表示分钟。 </param>
<param name="second">0 与 59 之间的一个整数，它表示秒。 </param>
<param name="millisecond">0 与 999 之间的一个整数，它表示毫秒。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。-或- <paramref name="day"/> 超出了此日历支持的范围。-或- <paramref name="hour"/> 小于 0 或大于 23。-或- <paramref name="minute"/> 小于 0 或大于 59。-或- <paramref name="second"/> 小于 0 或大于 59。-或- <paramref name="millisecond"/> 小于 0 或大于 999。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.ToFourDigitYear(System.Int32)">
<summary>使用 <see cref="P:System.Globalization.JapaneseCalendar.TwoDigitYearMax"/> 属性将指定的年份转换为四位数年份，以确定相应的纪元。</summary>
<returns>包含 <paramref name="year"/> 的四位数表示形式的整数。</returns>
<param name="year">一个表示要转换的年份的整数（通常为两位数）。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了日历支持的范围。 </exception>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.TwoDigitYearMax">
<summary>获取或设置可以用两位数年份表示的 100 年范围内的最后一年。</summary>
<returns>可以用两位数年份表示的 100 年范围内的最后一年。</returns>
<exception cref="T:System.ArgumentOutOfRangeException">在设置操作中，赋予的值小于 99。-或- 在设置操作中，赋予的值大于 8011。</exception>
    </member>
    <member name="T:System.Globalization.KoreanCalendar">
<summary>表示朝鲜历。</summary>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.#ctor">
<summary>初始化 <see cref="T:System.Globalization.KoreanCalendar"/> 类的新实例。</summary>
<exception cref="T:System.TypeInitializationException">无法初始化与此 <see cref="T:System.Globalization.KoreanCalendar"/> 对象对应的 ko-KR <see cref="T:System.Globalization.CultureInfo"/> 对象。</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.AddMonths(System.DateTime,System.Int32)">
<summary>返回与指定 <see cref="T:System.DateTime"/> 相距指定月数的 <see cref="T:System.DateTime"/>。</summary>
<returns>将指定的月数添加到指定的 <see cref="T:System.DateTime"/> 中时得到的 <see cref="T:System.DateTime"/>。</returns>
<param name="time"><see cref="T:System.DateTime"/>，将向其添加月数。 </param>
<param name="months">要添加的月数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="months"/> 小于 -120000。-或- <paramref name="months"/> 大于 120000。 </exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.AddYears(System.DateTime,System.Int32)">
<summary>返回与指定 <see cref="T:System.DateTime"/> 相距指定年数的 <see cref="T:System.DateTime"/>。</summary>
<returns>将指定年数添加到指定的 <see cref="T:System.DateTime"/> 中时得到的 <see cref="T:System.DateTime"/>。</returns>
<param name="time"><see cref="T:System.DateTime"/>，将向其添加年数。 </param>
<param name="years">要添加的年数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="years"/> 或 <paramref name="time"/> 已超出范围。</exception>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.Eras">
<summary>获取 <see cref="T:System.Globalization.KoreanCalendar"/> 中的纪元的列表。</summary>
<returns>表示 <see cref="T:System.Globalization.KoreanCalendar"/> 中的纪元的整数数组。</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDayOfMonth(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的日期是该月的几号。</summary>
<returns>从 1 到 31 的整数，表示指定 <see cref="T:System.DateTime"/> 中的日期是该月的几号。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDayOfWeek(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的日期是星期几。</summary>
<returns>一个 <see cref="T:System.DayOfWeek"/> 值，它表示指定的 <see cref="T:System.DateTime"/> 中的日期是星期几。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDayOfYear(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的日期是该年中的第几天。</summary>
<returns>从 1 到 366 的整数，表示指定 <see cref="T:System.DateTime"/> 中的日期是该年中的第几天。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
<summary>返回指定纪元中指定年份的指定月份的天数。</summary>
<returns>指定纪元中指定年份的指定月份中的天数。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">1 到 12 之间的一个整数，它表示月份。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDaysInYear(System.Int32,System.Int32)">
<summary>返回指定纪元中指定年份的天数。</summary>
<returns>指定纪元中指定年份的天数。</returns>
<param name="year">表示年份的整数。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetEra(System.DateTime)">
<summary>返回指定的 <see cref="T:System.DateTime"/> 值的纪元。</summary>
<returns>表示 <paramref name="time"/> 中的纪元的整数。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetLeapMonth(System.Int32,System.Int32)">
<summary>计算指定纪元年份的闰月。</summary>
<returns>返回值始终为 0，因为 <see cref="T:System.Globalization.KoreanCalendar"/> 类不支持闰月。</returns>
<param name="year">年份。</param>
<param name="era">纪元。</param>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetMonth(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的月份。</summary>
<returns>1 到 12 之间的一个整数，它表示指定的 <see cref="T:System.DateTime"/> 中的月份。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetMonthsInYear(System.Int32,System.Int32)">
<summary>返回指定纪元中指定年份中的月数。</summary>
<returns>指定纪元中指定年份的月数。</returns>
<param name="year">表示年份的整数。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
<summary>返回年中包括指定 <see cref="T:System.DateTime"/> 中的日期的星期。</summary>
<returns>一个从 1 开始的整数，表示一年中包括 <paramref name="time"/> 参数中的日期的那个星期。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
<param name="rule"><see cref="T:System.Globalization.CalendarWeekRule"/> 值之一，用于定义一个日历周。 </param>
<param name="firstDayOfWeek"><see cref="T:System.DayOfWeek"/> 值之一，表示一个星期的第一天。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="time"/> 或 <paramref name="firstDayOfWeek"/> 超出了此日历支持的范围。-或- <paramref name="rule"/> 不是有效的 <see cref="T:System.Globalization.CalendarWeekRule"/> 值。 </exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetYear(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的年份。</summary>
<returns>一个整数，它表示指定的 <see cref="T:System.DateTime"/> 中的年份。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>确定指定纪元中的指定日期是否为闰日。</summary>
<returns>如果指定的日期是闰日，则为 true；否则为 false。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">1 到 12 之间的一个整数，它表示月份。 </param>
<param name="day">1 到 31 之间的一个整数，它表示天。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。-或- <paramref name="day"/> 超出了此日历支持的范围。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
<summary>确定指定纪元中指定年份的指定月份是否为闰月。</summary>
<returns>除非被派生类重写，否则此方法始终返回 false。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">1 到 12 之间的一个整数，它表示月份。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.IsLeapYear(System.Int32,System.Int32)">
<summary>确定指定纪元中的指定年份是否为闰年。</summary>
<returns>如果指定的年份是闰年，则为 true；否则为 false。</returns>
<param name="year">表示年份的整数。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="F:System.Globalization.KoreanCalendar.KoreanEra">
<summary>表示当前纪元。此字段为常量。</summary>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.MaxSupportedDateTime">
<summary>获取此 <see cref="T:System.Globalization.KoreanCalendar"/> 类支持的最晚日期和时间。</summary>
<returns><see cref="T:System.Globalization.KoreanCalendar"/> 类支持的最晚日期和时间，它相当于公历的公元 9999 年 12 月 31 日结束的那一刻。</returns>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.MinSupportedDateTime">
<summary>获取此 <see cref="T:System.Globalization.KoreanCalendar"/> 类支持的最早日期和时间。</summary>
<returns><see cref="T:System.Globalization.KoreanCalendar"/> 类支持的最早日期和时间，它相当于公历的公元 0001 年的 1 月 1 日开始的那一刻。</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>返回设置为指定纪元中的指定日期和时间的 <see cref="T:System.DateTime"/>。</summary>
<returns>设置为当前纪元中的指定日期和时间的 <see cref="T:System.DateTime"/>。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">1 到 12 之间的一个整数，它表示月份。 </param>
<param name="day">1 到 31 之间的一个整数，它表示天。 </param>
<param name="hour">0 与 23 之间的一个整数，它表示小时。 </param>
<param name="minute">0 与 59 之间的一个整数，它表示分钟。 </param>
<param name="second">0 与 59 之间的一个整数，它表示秒。 </param>
<param name="millisecond">0 与 999 之间的一个整数，它表示毫秒。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。-或- <paramref name="day"/> 超出了此日历支持的范围。-或- <paramref name="hour"/> 小于 0 或大于 23。-或- <paramref name="minute"/> 小于 0 或大于 59。-或- <paramref name="second"/> 小于 0 或大于 59。-或- <paramref name="millisecond"/> 小于 0 或大于 999。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.ToFourDigitYear(System.Int32)">
<summary>使用 <see cref="P:System.Globalization.KoreanCalendar.TwoDigitYearMax"/> 属性将指定的年份转换为四位数年份，以确定相应的纪元。</summary>
<returns>包含 <paramref name="year"/> 的四位数表示形式的整数。</returns>
<param name="year">一个两位数或四位数的整数，表示要转换的年份。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了日历支持的范围。 </exception>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.TwoDigitYearMax">
<summary>获取或设置可以用两位数年份表示的 100 年范围内的最后一年。</summary>
<returns>可以用两位数年份表示的 100 年范围内的最后一年。</returns>
<exception cref="T:System.ArgumentOutOfRangeException">在设置操作中，赋予的值小于 99。-或- 在设置操作中，赋予的值大于 12332。</exception>
    </member>
    <member name="T:System.Globalization.NumberFormatInfo">
<summary>根据区域性定义如何设置数值格式以及如何显示数值。</summary>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.#ctor">
<summary>初始化不依赖于区域性的（固定的）<see cref="T:System.Globalization.NumberFormatInfo"/> 类的新可写实例。</summary>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.Clone">
<summary>创建一个 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象的浅表副本。</summary>
<returns>从原始 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象复制的新 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象。</returns>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits">
<summary>获取或设置在货币值中使用的小数位数。</summary>
<returns>要在货币值中使用的小数位数。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo"/> 的默认值为 2。</returns>
<exception cref="T:System.ArgumentOutOfRangeException">该属性被设置为小于 0 或大于 99 的值。 </exception>
<exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator">
<summary>获取或设置要在货币值中用作小数点分隔符的字符串。</summary>
<returns>要在货币值中用作小数点分隔符的字符串。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo"/> 的默认值为"."。</returns>
<exception cref="T:System.ArgumentNullException">该属性设置为 null。 </exception>
<exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象是只读的。 </exception>
<exception cref="T:System.ArgumentException">此属性当前设置为空字符串。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator">
<summary>获取或设置在货币值中对小数点左边数字进行分组的字符串。</summary>
<returns>在货币值中对小数点左边数字进行分组的字符串。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo"/> 的默认值为","。</returns>
<exception cref="T:System.ArgumentNullException">该属性设置为 null。 </exception>
<exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes">
<summary>获取或设置货币值中小数点左边每一组的位数。</summary>
<returns>货币值中小数点左边每一组的位数。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo"/> 的默认值是一个一维数组，该数组只包含一个设置为 3 的元素。</returns>
<exception cref="T:System.ArgumentNullException">该属性设置为 null。 </exception>
<exception cref="T:System.ArgumentException">试图设置该属性，但此数组包含一个小于 0 或大于 9 的项。-或- 试图设置该属性，但此数组包含一个设置为 0 的项（最后一项除外）。 </exception>
<exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern">
<summary>获取或设置负货币值的格式模式。</summary>
<returns>负货币值的格式模式。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo"/> 的默认值是 0，它表示"($n)"，其中"$"是 <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol"/> 并且 <paramref name="n"/> 是一个数字。</returns>
<exception cref="T:System.ArgumentOutOfRangeException">该属性被设置为小于 0 或大于 15 的值。 </exception>
<exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern">
<summary>获取或设置正货币值的格式模式。</summary>
<returns>正货币值的格式模式。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo"/> 的默认值是 0，这表示"$n"，其中"$"是 <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol"/> 并且 <paramref name="n"/> 是一个数字。</returns>
<exception cref="T:System.ArgumentOutOfRangeException">该属性被设置为小于 0 或大于 3 的值。 </exception>
<exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencySymbol">
<summary>获取或设置用作货币符号的字符串。</summary>
<returns>用作货币符号的字符串。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo"/> 的默认值为“¤”。</returns>
<exception cref="T:System.ArgumentNullException">该属性设置为 null。 </exception>
<exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrentInfo">
<summary>获取一个只读的 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象，该对象包含当前区域性的数字格式设置信息。</summary>
<returns>一个基于当前线程的 <see cref="T:System.Globalization.CultureInfo"/> 对象的只读 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象。</returns>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.GetFormat(System.Type)">
<summary>获取提供数字格式设置服务的指定类型的对象。</summary>
<returns>如果 <paramref name="formatType"/> 是 <see cref="T:System.Globalization.NumberFormatInfo"/> 类型的对象，则为当前 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象；否则为 null。</returns>
<param name="formatType">所需格式化服务的 <see cref="T:System.Type"/>。 </param>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.GetInstance(System.IFormatProvider)">
<summary>获取与指定的 <see cref="T:System.IFormatProvider"/> 对象关联的 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象。</summary>
<returns>与指定的 <see cref="T:System.IFormatProvider"/> 对象关联的 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象。</returns>
<param name="formatProvider">用于获取 <see cref="T:System.Globalization.NumberFormatInfo"/> 的 <see cref="T:System.IFormatProvider"/> 对象。-或- 如果为 null，则获取 <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo"/> 对象。 </param>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.InvariantInfo">
<summary>获取不依赖于区域性的（固定的）默认只读 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象。</summary>
<returns>不依赖于区域性的（固定的）默认只读 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象。</returns>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.IsReadOnly">
<summary>获取一个值，该值指示 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象是否为只读。</summary>
<returns>如果 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NaNSymbol">
<summary>获取或设置表示 IEEE NaN（非数字）值的字符串。</summary>
<returns>表示 IEEE NaN（非数字）值的字符串。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo"/> 的默认值为"NaN"。</returns>
<exception cref="T:System.ArgumentNullException">该属性设置为 null。 </exception>
<exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol">
<summary>获取或设置表示负无穷大的字符串。</summary>
<returns>表示负无穷大的字符串。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo"/> 的默认值为"-Infinity"。</returns>
<exception cref="T:System.ArgumentNullException">该属性设置为 null。 </exception>
<exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NegativeSign">
<summary>获取或设置表示数字是负值的字符串。</summary>
<returns>表示数字是负值的字符串。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo"/> 的默认值为"-"。</returns>
<exception cref="T:System.ArgumentNullException">该属性设置为 null。 </exception>
<exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits">
<summary>获取或设置在数值中使用的小数位数。</summary>
<returns>在数值中使用的小数位数。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo"/> 的默认值为 2。</returns>
<exception cref="T:System.ArgumentOutOfRangeException">该属性被设置为小于 0 或大于 99 的值。 </exception>
<exception cref="T:System.InvalidOperationException">设置该属性，并且 <see cref="T:System.Globalization.NumberFormatInfo"/> 是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator">
<summary>获取或设置在数值中用作小数点分隔符的字符串。</summary>
<returns>在数值中用作小数点分隔符的字符串。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo"/> 的默认值为"."。</returns>
<exception cref="T:System.ArgumentNullException">该属性设置为 null。 </exception>
<exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象是只读的。 </exception>
<exception cref="T:System.ArgumentException">此属性当前设置为空字符串。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator">
<summary>获取或设置在数值中对小数点左边数字进行分组的字符串。</summary>
<returns>在数值中对小数点左边数字进行分组的字符串。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo"/> 的默认值为","。</returns>
<exception cref="T:System.ArgumentNullException">该属性设置为 null。 </exception>
<exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberGroupSizes">
<summary>获取或设置数值中小数点左边每一组的位数。</summary>
<returns>数值中小数点左边每一组的位数。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo"/> 的默认值是一个一维数组，该数组只包含一个设置为 3 的元素。</returns>
<exception cref="T:System.ArgumentNullException">该属性设置为 null。 </exception>
<exception cref="T:System.ArgumentException">试图设置该属性，但此数组包含一个小于 0 或大于 9 的项。-或- 试图设置该属性，但此数组包含一个设置为 0 的项（最后一项除外）。 </exception>
<exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberNegativePattern">
<summary>获取或设置负数值的格式模式。</summary>
<returns>负数值的格式模式。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo"/> 的默认值为 1，这表示"-n"，其中 <paramref name="n"/> 是一个数字。</returns>
<exception cref="T:System.ArgumentOutOfRangeException">该属性被设置为小于 0 或大于 4 的值。 </exception>
<exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits">
<summary>获取或设置在百分比值中使用的小数位数。 </summary>
<returns>在百分比值中使用的小数位数。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo"/> 的默认值为 2。</returns>
<exception cref="T:System.ArgumentOutOfRangeException">该属性被设置为小于 0 或大于 99 的值。 </exception>
<exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator">
<summary>获取或设置要在百分比值中用作小数点分隔符的字符串。 </summary>
<returns>在百分比值中用作小数点分隔符的字符串。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo"/> 的默认值为"."。</returns>
<exception cref="T:System.ArgumentNullException">该属性设置为 null。 </exception>
<exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象是只读的。 </exception>
<exception cref="T:System.ArgumentException">此属性当前设置为空字符串。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator">
<summary>获取或设置在百分比值中对小数点左边数字进行分组的字符串。 </summary>
<returns>在百分比值中对小数点左边数字进行分组的字符串。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo"/> 的默认值为","。</returns>
<exception cref="T:System.ArgumentNullException">该属性设置为 null。 </exception>
<exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentGroupSizes">
<summary>获取或设置百分比值中小数点左边每一组的位数。 </summary>
<returns>百分比值中小数点左边的每一组的位数。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo"/> 的默认值是一个一维数组，该数组只包含一个设置为 3 的元素。</returns>
<exception cref="T:System.ArgumentNullException">该属性设置为 null。 </exception>
<exception cref="T:System.ArgumentException">试图设置该属性，但此数组包含一个小于 0 或大于 9 的项。-或- 试图设置该属性，但此数组包含一个设置为 0 的项（最后一项除外）。 </exception>
<exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentNegativePattern">
<summary>获取或设置负百分比值的格式模式。</summary>
<returns>负百分比值的格式模式。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo"/> 的默认值是 0，这表示"-n %"，其中"%"是 <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol"/>，并且 <paramref name="n"/> 是一个数字。</returns>
<exception cref="T:System.ArgumentOutOfRangeException">该属性被设置为小于 0 或大于 11 的值。 </exception>
<exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentPositivePattern">
<summary>获取或设置正百分比值的格式模式。</summary>
<returns>正百分比值的格式模式。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo"/> 的默认值是 0，这表示"n %"，其中"%"是 <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol"/>，并且 <paramref name="n"/> 是一个数字。</returns>
<exception cref="T:System.ArgumentOutOfRangeException">该属性被设置为小于 0 或大于 3 的值。 </exception>
<exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentSymbol">
<summary>获取或设置用作百分比符号的字符串。</summary>
<returns>用作百分比符号的字符串。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo"/> 的默认值为"%"。</returns>
<exception cref="T:System.ArgumentNullException">该属性设置为 null。 </exception>
<exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PerMilleSymbol">
<summary>获取或设置用作千分比符号的字符串。</summary>
<returns>用作千分比符号的字符串。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo"/> 的默认值为"‰"，它是 Unicode 字符 U+2030。</returns>
<exception cref="T:System.ArgumentNullException">该属性设置为 null。 </exception>
<exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol">
<summary>获取或设置表示正无穷大的字符串。</summary>
<returns>表示正无穷大的字符串。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo"/> 的默认值为"Infinity"。</returns>
<exception cref="T:System.ArgumentNullException">该属性设置为 null。 </exception>
<exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PositiveSign">
<summary>获取或设置指示关联数字是正值的字符串。</summary>
<returns>指示关联数字是正值的字符串。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo"/> 的默认值为"+"。</returns>
<exception cref="T:System.ArgumentNullException">在设置操作中，要赋予属性的值为 null。</exception>
<exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.NumberFormatInfo"/> 对象是只读的。 </exception>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)">
<summary>返回只读的 <see cref="T:System.Globalization.NumberFormatInfo"/> 包装。</summary>
<returns><paramref name="nfi"/> 周围的只读 <see cref="T:System.Globalization.NumberFormatInfo"/> 包装。</returns>
<param name="nfi">要包装的 <see cref="T:System.Globalization.NumberFormatInfo"/>。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="nfi"/> 为 null。 </exception>
    </member>
    <member name="T:System.Globalization.NumberStyles">
<summary>确定数值字符串参数中允许的样式，这些参数被传递到整数和浮点数值类型的 Parse 方法。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.None">
<summary>指示分析的字符串中不可以存在样式元素，如前导或尾随空白、千位分隔符或小数分隔符。要分析的字符串必须仅由整数位数和小数位数组成。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowLeadingWhite">
<summary>指示分析的字符串中可以存在前导空白字符。有效的空白字符具有 Unicode 值 U+0009、U+000A、U+000B、U+000C、U+000D 和 U+0020。请注意，这是 <see cref="M:System.Char.IsWhiteSpace(System.Char)"/> 方法为其返回 true 的字符的子集。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowTrailingWhite">
<summary>指示分析的字符串中可以存在尾随空白字符。有效的空白字符具有 Unicode 值 U+0009、U+000A、U+000B、U+000C、U+000D 和 U+0020。请注意，这是 <see cref="M:System.Char.IsWhiteSpace(System.Char)"/> 方法为其返回 true 的字符的子集。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowLeadingSign">
<summary>指示数值字符串可以具有前导符号。有效的前导符号字符由 <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign"/> 和 <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign"/> 属性确定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowTrailingSign">
<summary>指示数值字符串可以具有尾随符号。有效的尾随符号字符由 <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign"/> 和 <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign"/> 属性确定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowParentheses">
<summary>指示数值字符串可以具有一对将数字括起来的括号。括号指示要分析的字符串表示一个负数。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowDecimalPoint">
<summary>指示数值字符串可以具有小数点。如果 <see cref="T:System.Globalization.NumberStyles"/> 值包括 <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol"/> 标志并且分析的字符串包括货币符号，则小数分隔符字符由有效的小数点字符确定，而有效的小数点字符又由 <see cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator"/> 属性确定。否则，小数分隔符字符由 <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator"/> 属性确定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowThousands">
<summary>指示数值字符串可以具有组分隔符，例如，将百位与千位分隔开来的符号。如果 <see cref="T:System.Globalization.NumberStyles"/> 值包括 <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol"/> 标志并且要分析的字符串包括货币符号，则有效的组分隔符字符由 <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator"/> 属性确定，并且每个组中的位数由 <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes"/> 属性确定。否则，有效的组分隔符由 <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator"/> 属性确定，并且每个组中的位数由 <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes"/> 属性确定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowExponent">
<summary>指示数值字符串可以采用指数表示法。AllowExponent 标志允许分析的字符串包含一个指数，该指数以“E”或“e”字符开头，后跟一个可选的正号或负号以及一个整数。换句话说，它能够成功分析 nnnExx、nnnE+xx 和 nnnE-xx 形式的字符串。它不允许在有效位数或尾数中使用小数分隔符或符号；为了允许对字符串中的这些元素进行分析，请使用 <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint"/> 和 <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign"/> 标志，或者使用包括这些标志的复合样式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowCurrencySymbol">
<summary>指示数值字符串可以包含货币符号。有效的货币符号由 <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol"/> 属性确定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowHexSpecifier">
<summary>指示数值字符串表示一个十六进制值。有效的十六进制值包括数字 0-9 和十六进制数字 A-F 和 a-f。使用此样式分析的字符串不能带有“0x”或“&amp;h”前缀。使用 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 样式分析的字符串将始终解释为十六进制值。可以与 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 组合的唯一标志是 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite"/> 和 <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite"/>。<see cref="T:System.Globalization.NumberStyles"/> 枚举包括由着三个标志组成的复合样式 <see cref="F:System.Globalization.NumberStyles.HexNumber"/>。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Integer">
<summary>指示使用 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite"/>、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite"/> 和 <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign"/> 样式。这是复合数字样式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.HexNumber">
<summary>指示使用 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite"/>、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite"/> 和 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 样式。这是复合数字样式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Number">
<summary>指示使用 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite"/>、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite"/>、<see cref="F:System.Globalization.NumberStyles.AllowLeadingSign"/>、<see cref="F:System.Globalization.NumberStyles.AllowTrailingSign"/>、<see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint"/> 和 <see cref="F:System.Globalization.NumberStyles.AllowThousands"/> 样式。这是复合数字样式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Float">
<summary>指示使用 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite"/>、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite"/>、<see cref="F:System.Globalization.NumberStyles.AllowLeadingSign"/>、<see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint"/> 和 <see cref="F:System.Globalization.NumberStyles.AllowExponent"/> 样式。这是复合数字样式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Currency">
<summary>指示使用 <see cref="F:System.Globalization.NumberStyles.AllowExponent"/> 和 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 以外的所有样式。这是复合数字样式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Any">
<summary>指示使用 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> 以外的所有样式。这是复合数字样式。</summary>
    </member>
    <member name="T:System.Globalization.RegionInfo">
<summary>包含有关国家/地区的信息。</summary>
    </member>
    <member name="M:System.Globalization.RegionInfo.#ctor(System.String)">
<summary>根据特定国家/地区的完整区域性名称，初始化该国家/地区的 <see cref="T:System.Globalization.RegionInfo"/> 类的新实例。</summary>
<param name="name">包含特定区域性的完整区域性名称的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="name"/> 为国家/地区名称。-或- <paramref name="name"/> 为非特定区域性的名称。-或- <paramref name="name"/> 不是有效的区域性名称。</exception>
    </member>
    <member name="P:System.Globalization.RegionInfo.CurrencySymbol">
<summary>获取与国家/地区关联的货币符号。</summary>
<returns>与国家/地区关联的货币符号。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.CurrentRegion">
<summary>获取表示当前线程所使用的国家/地区的 <see cref="T:System.Globalization.RegionInfo"/>。</summary>
<returns>表示当前线程所使用的国家/地区的 <see cref="T:System.Globalization.RegionInfo"/>。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.DisplayName">
<summary>获取以 .NET Framework for Silverlight 本地化版本语言表示的国家/地区的全名。</summary>
<returns>以 .NET Framework for Silverlight 本地化版本语言表示的国家/地区的全名。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.EnglishName">
<summary>获取以英文表示的国家/地区的全名。</summary>
<returns>以英文表示的国家/地区的全名。</returns>
    </member>
    <member name="M:System.Globalization.RegionInfo.Equals(System.Object)">
<summary>确定指定对象是否与当前 <see cref="T:System.Globalization.RegionInfo"/> 对象相同。</summary>
<returns>如果 <paramref name="value"/> 参数为 <see cref="T:System.Globalization.RegionInfo"/> 对象并且其 <see cref="P:System.Globalization.RegionInfo.Name"/> 属性与当前 <see cref="T:System.Globalization.RegionInfo"/> 对象的 <see cref="P:System.Globalization.RegionInfo.Name"/> 属性相同，则为 true；否则为 false。</returns>
<param name="value">将与当前 <see cref="T:System.Globalization.RegionInfo"/> 进行比较的对象。 </param>
    </member>
    <member name="M:System.Globalization.RegionInfo.GetHashCode">
<summary>用作当前 <see cref="T:System.Globalization.RegionInfo"/> 的哈希函数，适合在哈希算法和数据结构（如哈希表）中使用。</summary>
<returns>当前 <see cref="T:System.Globalization.RegionInfo"/> 的哈希代码。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.IsMetric">
<summary>获取一个值，该值指示该国家/地区是否使用公制进行度量。</summary>
<returns>如果该国家/地区使用公制进行度量，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.ISOCurrencySymbol">
<summary>获取与国家/地区关联的由三个字符组成的 ISO 4217 货币符号。</summary>
<returns>与国家/地区关联的由三个字符组成的 ISO 4217 货币符号。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.Name">
<summary>获取当前 <see cref="T:System.Globalization.RegionInfo"/> 对象的名称或 ISO 3166 双字母国家/地区代码。</summary>
<returns><see cref="M:System.Globalization.RegionInfo.#ctor(System.String)"/> 构造函数的 <paramref name="name"/> 参数指定的值。返回值为大写。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.NativeName">
<summary>获取一个国家/地区的名称，它使用该国家/地区的本地语言格式表示。</summary>
<returns>该国家/地区的本地名称，它使用与 ISO 3166 国家/地区代码关联的语言格式表示。 </returns>
    </member>
    <member name="M:System.Globalization.RegionInfo.ToString">
<summary>返回一个字符串，它包含区域性名称或 ISO 3166 中为当前 <see cref="T:System.Globalization.RegionInfo"/> 指定的双字母国家/地区代码。</summary>
<returns>一个字符串，它包含区域性名称或 ISO 3166 中为当前 <see cref="T:System.Globalization.RegionInfo"/> 定义的双字母国家/地区代码。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.TwoLetterISORegionName">
<summary>获取在 ISO 3166 中定义的由两个字母组成的国家/地区代码。</summary>
<returns>在 ISO 3166 中定义的由两个字母组成的国家/地区代码。</returns>
    </member>
    <member name="T:System.Globalization.StringInfo">
<summary>提供功能将字符串拆分为文本元素并循环访问这些文本元素。</summary>
    </member>
    <member name="M:System.Globalization.StringInfo.#ctor">
<summary>初始化 <see cref="T:System.Globalization.StringInfo"/> 类的新实例。 </summary>
    </member>
    <member name="M:System.Globalization.StringInfo.#ctor(System.String)">
<summary>将 <see cref="T:System.Globalization.StringInfo"/> 类的新实例初始化为指定的字符串。</summary>
<param name="value">用于初始化此 <see cref="T:System.Globalization.StringInfo"/> 对象的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。</exception>
    </member>
    <member name="M:System.Globalization.StringInfo.Equals(System.Object)">
<summary>指示当前 <see cref="T:System.Globalization.StringInfo"/> 对象是否等于指定的对象。</summary>
<returns>如果 <paramref name="value"/> 参数为 <see cref="T:System.Globalization.StringInfo"/> 对象并且其 <see cref="P:System.Globalization.StringInfo.String"/> 属性等于此 <see cref="T:System.Globalization.StringInfo"/> 对象的 <see cref="P:System.Globalization.StringInfo.String"/> 属性，则为 true；否则为 false。</returns>
<param name="value">一个对象。</param>
    </member>
    <member name="M:System.Globalization.StringInfo.GetHashCode">
<summary>计算当前 <see cref="T:System.Globalization.StringInfo"/> 对象的值的哈希代码。</summary>
<returns>基于此 <see cref="T:System.Globalization.StringInfo"/> 对象的字符串值的 32 位带符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Globalization.StringInfo.GetNextTextElement(System.String)">
<summary>获取指定字符串中的第一个文本元素。</summary>
<returns>包含指定字符串中的第一个文本元素的字符串。</returns>
<param name="str">要从其获取文本元素的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="str"/> 为 null。 </exception>
    </member>
    <member name="M:System.Globalization.StringInfo.GetNextTextElement(System.String,System.Int32)">
<summary>获取指定字符串中指定索引处的文本元素。</summary>
<returns>包含指定字符串中指定索引处的文本元素的字符串。</returns>
<param name="str">要从其获取文本元素的字符串。 </param>
<param name="index">文本元素开始位置的从零开始的索引。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="str"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 超出了 <paramref name="str"/> 的有效索引范围。 </exception>
    </member>
    <member name="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)">
<summary>返回一个循环访问整个字符串的文本元素的枚举器。</summary>
<returns>整个字符串的 <see cref="T:System.Globalization.TextElementEnumerator"/>。</returns>
<param name="str">要循环访问的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="str"/> 为 null。 </exception>
    </member>
    <member name="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)">
<summary>返回一个枚举器，它循环访问字符串的文本元素并从指定索引处开始。</summary>
<returns>在 <paramref name="index"/> 处开始的字符串的 <see cref="T:System.Globalization.TextElementEnumerator"/>。</returns>
<param name="str">要循环访问的字符串。 </param>
<param name="index">开始迭代处的从零开始的索引。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="str"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 超出了 <paramref name="str"/> 的有效索引范围。 </exception>
    </member>
    <member name="P:System.Globalization.StringInfo.LengthInTextElements">
<summary>获取当前 <see cref="T:System.Globalization.StringInfo"/> 对象中的文本元素的数目。</summary>
<returns>此 <see cref="T:System.Globalization.StringInfo"/> 对象中的基本字符、代理项对和组合字符序列的数目。</returns>
    </member>
    <member name="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)">
<summary>返回指定字符串中每个基字符、高代理项或控制字符的索引。</summary>
<returns>一个整数数组，它包含指定字符串中每个基字符、高代理项或控制字符的索引（从零开始）。</returns>
<param name="str">要搜索的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="str"/> 为 null。 </exception>
    </member>
    <member name="P:System.Globalization.StringInfo.String">
<summary>获取或设置当前 <see cref="T:System.Globalization.StringInfo"/> 对象的值。</summary>
<returns>作为当前 <see cref="T:System.Globalization.StringInfo"/> 对象的值的字符串。</returns>
<exception cref="T:System.ArgumentNullException">设置操作中的值为 null。</exception>
    </member>
    <member name="T:System.Globalization.TaiwanCalendar">
<summary>表示台湾日历。</summary>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.#ctor">
<summary>初始化 <see cref="T:System.Globalization.TaiwanCalendar"/> 类的新实例。</summary>
<exception cref="T:System.TypeInitializationException">无法初始化与此 <see cref="T:System.Globalization.TaiwanCalendar"/> 对象对应的 zh-TW <see cref="T:System.Globalization.CultureInfo"/> 对象。</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.AddMonths(System.DateTime,System.Int32)">
<summary>返回与指定 <see cref="T:System.DateTime"/> 相距指定月数的 <see cref="T:System.DateTime"/>。</summary>
<returns>将指定的月数添加到指定的 <see cref="T:System.DateTime"/> 中时得到的 <see cref="T:System.DateTime"/>。</returns>
<param name="time"><see cref="T:System.DateTime"/>，将向其添加月数。 </param>
<param name="months">要添加的月数。 </param>
<exception cref="T:System.ArgumentException">结果 <see cref="T:System.DateTime"/> 超出了支持的范围。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="months"/> 小于 -120000。-或- <paramref name="months"/> 大于 120000。 </exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.AddYears(System.DateTime,System.Int32)">
<summary>返回与指定 <see cref="T:System.DateTime"/> 相距指定年数的 <see cref="T:System.DateTime"/>。</summary>
<returns>将指定年数添加到指定的 <see cref="T:System.DateTime"/> 中时得到的 <see cref="T:System.DateTime"/>。</returns>
<param name="time"><see cref="T:System.DateTime"/>，将向其添加年数。 </param>
<param name="years">要添加的年数。 </param>
<exception cref="T:System.ArgumentException">结果 <see cref="T:System.DateTime"/> 超出了支持的范围。 </exception>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.Eras">
<summary>获取 <see cref="T:System.Globalization.TaiwanCalendar"/> 中的纪元的列表。</summary>
<returns>一个数组，它由值始终是当前纪元的单个元素组成。</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDayOfMonth(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的日期是该月的几号。</summary>
<returns>从 1 到 31 的整数，表示指定 <see cref="T:System.DateTime"/> 中的日期是该月的几号。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDayOfWeek(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的日期是星期几。</summary>
<returns>一个 <see cref="T:System.DayOfWeek"/> 值，它表示指定的 <see cref="T:System.DateTime"/> 中的日期是星期几。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDayOfYear(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的日期是该年中的第几天。</summary>
<returns>从 1 到 366 的整数，表示指定 <see cref="T:System.DateTime"/> 中的日期是该年中的第几天。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
<summary>返回指定纪元中指定年份的指定月份的天数。</summary>
<returns>指定纪元中指定年份的指定月份中的天数。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">1 到 12 之间的一个整数，它表示月份。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDaysInYear(System.Int32,System.Int32)">
<summary>返回指定纪元中指定年份的天数。</summary>
<returns>指定纪元中指定年份的天数。</returns>
<param name="year">表示年份的整数。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetEra(System.DateTime)">
<summary>返回指定的 <see cref="T:System.DateTime"/> 值的纪元。</summary>
<returns>表示 <paramref name="time"/> 中的纪元的整数。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetLeapMonth(System.Int32,System.Int32)">
<summary>计算指定纪元年份的闰月。</summary>
<returns>返回值始终为 0，因为 <see cref="T:System.Globalization.TaiwanCalendar"/> 类不支持闰月这一概念。</returns>
<param name="year">年份。</param>
<param name="era">纪元。</param>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetMonth(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的月份。</summary>
<returns>1 到 12 之间的一个整数，它表示指定的 <see cref="T:System.DateTime"/> 中的月份。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32,System.Int32)">
<summary>返回指定纪元中指定年份中的月数。</summary>
<returns>指定纪元中指定年份的月数。</returns>
<param name="year">表示年份的整数。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
<summary>返回年中包括指定 <see cref="T:System.DateTime"/> 中的日期的星期。</summary>
<returns>一个正整数，表示一年中包括 <paramref name="time"/> 参数中的日期的那个星期。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
<param name="rule"><see cref="T:System.Globalization.CalendarWeekRule"/> 值之一，用于定义一个日历周。 </param>
<param name="firstDayOfWeek"><see cref="T:System.DayOfWeek"/> 值之一，表示一个星期的第一天。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="time"/> 或 <paramref name="firstDayOfWeek"/> 超出了此日历支持的范围。-或- <paramref name="rule"/> 不是有效的 <see cref="T:System.Globalization.CalendarWeekRule"/> 值。 </exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetYear(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的年份。</summary>
<returns>一个整数，它表示指定的 <see cref="T:System.DateTime"/> 中的年份。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>确定指定纪元中的指定日期是否为闰日。</summary>
<returns>如果指定的日期是闰日，则为 true；否则为 false。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">1 到 12 之间的一个整数，它表示月份。 </param>
<param name="day">1 到 31 之间的一个整数，它表示天。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。-或- <paramref name="day"/> 超出了此日历支持的范围。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
<summary>确定指定纪元中指定年份的指定月份是否为闰月。</summary>
<returns>除非被派生类重写，否则此方法始终返回 false。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">1 到 12 之间的一个整数，它表示月份。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.IsLeapYear(System.Int32,System.Int32)">
<summary>确定指定纪元中的指定年份是否为闰年。</summary>
<returns>如果指定的年份是闰年，则为 true；否则为 false。</returns>
<param name="year">表示年份的整数。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.MaxSupportedDateTime">
<summary>获取此 <see cref="T:System.Globalization.TaiwanCalendar"/> 类支持的最晚日期和时间。</summary>
<returns><see cref="T:System.Globalization.TaiwanCalendar"/> 类支持的最晚日期和时间，它相当于公历的公元 9999 年 12 月 31 日结束的那一刻。</returns>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.MinSupportedDateTime">
<summary>获取此 <see cref="T:System.Globalization.TaiwanCalendar"/> 类支持的最早日期和时间。</summary>
<returns><see cref="T:System.Globalization.TaiwanCalendar"/> 类支持的最早日期和时间，它相当于公历的公元 1912 年的 1 月 1 日开始的那一刻。</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>返回设置为指定纪元中的指定日期和时间的 <see cref="T:System.DateTime"/>。</summary>
<returns>设置为当前纪元中的指定日期和时间的 <see cref="T:System.DateTime"/>。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">1 到 12 之间的一个整数，它表示月份。 </param>
<param name="day">1 到 31 之间的一个整数，它表示天。 </param>
<param name="hour">0 与 23 之间的一个整数，它表示小时。 </param>
<param name="minute">0 与 59 之间的一个整数，它表示分钟。 </param>
<param name="second">0 与 59 之间的一个整数，它表示秒。 </param>
<param name="millisecond">0 与 999 之间的一个整数，它表示毫秒。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。-或- <paramref name="day"/> 超出了此日历支持的范围。-或- <paramref name="hour"/> 小于 0 或大于 23。-或- <paramref name="minute"/> 小于 0 或大于 59。-或- <paramref name="second"/> 小于 0 或大于 59。-或- <paramref name="millisecond"/> 小于 0 或大于 999。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.ToFourDigitYear(System.Int32)">
<summary>使用 <see cref="P:System.Globalization.TaiwanCalendar.TwoDigitYearMax"/> 属性将指定的年份转换为四位数年份，以确定相应的纪元。</summary>
<returns>包含 <paramref name="year"/> 的四位数表示形式的整数。</returns>
<param name="year">一个两位数或四位数的整数，表示要转换的年份。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了日历支持的范围。 </exception>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.TwoDigitYearMax">
<summary>获取或设置可以用两位数年份表示的 100 年范围内的最后一年。</summary>
<returns>可以用两位数年份表示的 100 年范围内的最后一年。</returns>
<exception cref="T:System.ArgumentOutOfRangeException">在设置操作中，赋予的值小于 99。-或- 在设置操作中，赋予的值大于 8088。</exception>
    </member>
    <member name="T:System.Globalization.TextElementEnumerator">
<summary>枚举字符串的文本元素。 </summary>
    </member>
    <member name="P:System.Globalization.TextElementEnumerator.Current">
<summary>获取字符串中的当前文本元素。</summary>
<returns>包含字符串中当前文本元素的对象。</returns>
<exception cref="T:System.InvalidOperationException">枚举器位于字符串的第一个文本元素之前或最后一个文本元素之后。 </exception>
    </member>
    <member name="P:System.Globalization.TextElementEnumerator.ElementIndex">
<summary>获取枚举器当前所在的文本元素的索引。</summary>
<returns>枚举器当前所在的文本元素的索引。</returns>
<exception cref="T:System.InvalidOperationException">枚举器位于字符串的第一个文本元素之前或最后一个文本元素之后。 </exception>
    </member>
    <member name="M:System.Globalization.TextElementEnumerator.GetTextElement">
<summary>获取字符串中的当前文本元素。</summary>
<returns>包含所读取字符串中当前文本元素的新字符串。</returns>
<exception cref="T:System.InvalidOperationException">枚举器位于字符串的第一个文本元素之前或最后一个文本元素之后。 </exception>
    </member>
    <member name="M:System.Globalization.TextElementEnumerator.MoveNext">
<summary>将枚举器前移到字符串的下一个文本元素。</summary>
<returns>如果枚举器成功前移到下一个文本元素，则为 true；如果枚举器已超过字符串的结尾，则为 false。</returns>
<exception cref="T:System.InvalidOperationException">创建枚举器后修改了字符串。 </exception>
    </member>
    <member name="M:System.Globalization.TextElementEnumerator.Reset">
<summary>将枚举器设置为其初始位置，该位置位于字符串中第一个文本元素之前。</summary>
    </member>
    <member name="T:System.Globalization.TextInfo">
<summary>定义特定于书写体系的属性和行为（如大小写）。 </summary>
    </member>
    <member name="P:System.Globalization.TextInfo.CultureName">
<summary>获取与当前 <see cref="T:System.Globalization.TextInfo"/> 对象关联的区域性的名称。</summary>
<returns>区域性的名称。 </returns>
    </member>
    <member name="M:System.Globalization.TextInfo.Equals(System.Object)">
<summary>确定指定的对象是否与当前 <see cref="T:System.Globalization.TextInfo"/> 对象表示同一书写体系。</summary>
<returns>如果 <paramref name="obj"/> 与当前 <see cref="T:System.Globalization.TextInfo"/> 表示同一书写体系，则为 true；否则为 false。</returns>
<param name="obj">将与当前 <see cref="T:System.Globalization.TextInfo"/> 进行比较的对象。 </param>
    </member>
    <member name="M:System.Globalization.TextInfo.GetHashCode">
<summary>用作当前 <see cref="T:System.Globalization.TextInfo"/> 对象的哈希函数，适合在哈希算法和数据结构（如哈希表）中使用。</summary>
<returns>当前 <see cref="T:System.Globalization.TextInfo"/> 的哈希代码。</returns>
    </member>
    <member name="P:System.Globalization.TextInfo.IsReadOnly">
<summary>获取一个值，该值指示当前 <see cref="T:System.Globalization.TextInfo"/> 对象是否为只读。</summary>
<returns>如果当前 <see cref="T:System.Globalization.TextInfo"/> 对象为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Globalization.TextInfo.ListSeparator">
<summary>获取或设置在列表中分隔项的字符串。</summary>
<returns>在列表中分隔项的字符串。</returns>
<exception cref="T:System.ArgumentNullException">设置操作中的值为 null。</exception>
<exception cref="T:System.InvalidOperationException">在设置操作中，当前 <see cref="T:System.Globalization.TextInfo"/> 对象是只读的。</exception>
    </member>
    <member name="M:System.Globalization.TextInfo.ToLower(System.Char)">
<summary>将指定的字符转换为小写。</summary>
<returns>转换为小写的指定字符。</returns>
<param name="c">要转换为小写的字符。 </param>
    </member>
    <member name="M:System.Globalization.TextInfo.ToLower(System.String)">
<summary>将指定的字符串转换为小写。</summary>
<returns>转换为小写的指定字符串。</returns>
<param name="str">要转换为小写的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="str"/> 为 null。 </exception>
    </member>
    <member name="M:System.Globalization.TextInfo.ToString">
<summary>返回一个字符串，它表示当前的 <see cref="T:System.Globalization.TextInfo"/>。</summary>
<returns>表示当前 <see cref="T:System.Globalization.TextInfo"/> 的字符串。</returns>
    </member>
    <member name="M:System.Globalization.TextInfo.ToUpper(System.Char)">
<summary>将指定的字符转换为大写。</summary>
<returns>转换为大写的指定字符。</returns>
<param name="c">要转换为大写的字符。 </param>
    </member>
    <member name="M:System.Globalization.TextInfo.ToUpper(System.String)">
<summary>将指定的字符串转换为大写。</summary>
<returns>转换为大写的指定字符串。</returns>
<param name="str">要转换为大写的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="str"/> 为 null。 </exception>
    </member>
    <member name="T:System.Globalization.ThaiBuddhistCalendar">
<summary>表示泰国佛历。</summary>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.#ctor">
<summary>初始化 <see cref="T:System.Globalization.ThaiBuddhistCalendar"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.AddMonths(System.DateTime,System.Int32)">
<summary>返回与指定 <see cref="T:System.DateTime"/> 相距指定月数的 <see cref="T:System.DateTime"/>。</summary>
<returns>将指定的月数添加到指定的 <see cref="T:System.DateTime"/> 中时得到的 <see cref="T:System.DateTime"/>。</returns>
<param name="time"><see cref="T:System.DateTime"/>，将向其添加月数。 </param>
<param name="months">要添加的月数。 </param>
<exception cref="T:System.ArgumentException">结果 <see cref="T:System.DateTime"/> 超出了支持的范围。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="months"/> 小于 -120000。-或- <paramref name="months"/> 大于 120000。 </exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.AddYears(System.DateTime,System.Int32)">
<summary>返回与指定 <see cref="T:System.DateTime"/> 相距指定年数的 <see cref="T:System.DateTime"/>。</summary>
<returns>将指定年数添加到指定的 <see cref="T:System.DateTime"/> 中时得到的 <see cref="T:System.DateTime"/>。</returns>
<param name="time"><see cref="T:System.DateTime"/>，将向其添加年数。 </param>
<param name="years">要添加的年数。 </param>
<exception cref="T:System.ArgumentException">结果 <see cref="T:System.DateTime"/> 超出了支持的范围。 </exception>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.Eras">
<summary>获取 <see cref="T:System.Globalization.ThaiBuddhistCalendar"/> 类中的纪元的列表。</summary>
<returns>一个数组，它由值始终是当前纪元的单个元素组成。</returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDayOfMonth(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的日期是该月的几号。</summary>
<returns>从 1 到 31 的整数，表示指定 <see cref="T:System.DateTime"/> 中的日期是该月的几号。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDayOfWeek(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的日期是星期几。</summary>
<returns>一个 <see cref="T:System.DayOfWeek"/> 值，它表示指定的 <see cref="T:System.DateTime"/> 中的日期是星期几。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDayOfYear(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的日期是该年中的第几天。</summary>
<returns>从 1 到 366 的整数，表示指定 <see cref="T:System.DateTime"/> 中的日期是该年中的第几天。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
<summary>返回指定纪元中指定年份的指定月份的天数。</summary>
<returns>指定纪元中指定年份的指定月份中的天数。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">1 到 12 之间的一个整数，它表示月份。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDaysInYear(System.Int32,System.Int32)">
<summary>返回指定纪元中指定年份的天数。</summary>
<returns>指定纪元中指定年份的天数。</returns>
<param name="year">表示年份的整数。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetEra(System.DateTime)">
<summary>返回指定的 <see cref="T:System.DateTime"/> 值的纪元。</summary>
<returns>表示 <paramref name="time"/> 中的纪元的整数。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetLeapMonth(System.Int32,System.Int32)">
<summary>计算指定纪元年份的闰月。</summary>
<returns>返回值始终为 0，因为 <see cref="T:System.Globalization.ThaiBuddhistCalendar"/> 类不支持闰月这一概念。</returns>
<param name="year">年份。</param>
<param name="era">纪元。</param>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetMonth(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的月份。</summary>
<returns>1 到 12 之间的一个整数，它表示指定的 <see cref="T:System.DateTime"/> 中的月份。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetMonthsInYear(System.Int32,System.Int32)">
<summary>返回指定纪元中指定年份中的月数。</summary>
<returns>指定纪元中指定年份的月数。</returns>
<param name="year">表示年份的整数。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
<summary>返回年中包括指定 <see cref="T:System.DateTime"/> 中的日期的星期。</summary>
<returns>一个从 1 开始的正整数，表示一年中包括 <paramref name="time"/> 参数中的日期的那个星期。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
<param name="rule"><see cref="T:System.Globalization.CalendarWeekRule"/> 值之一，用于定义一个日历周。 </param>
<param name="firstDayOfWeek"><see cref="T:System.DayOfWeek"/> 值之一，表示一个星期的第一天。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="time"/> 或 <paramref name="firstDayOfWeek"/> 超出了此日历支持的范围。-或- <paramref name="rule"/> 不是有效的 <see cref="T:System.Globalization.CalendarWeekRule"/> 值。 </exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetYear(System.DateTime)">
<summary>返回指定 <see cref="T:System.DateTime"/> 中的年份。</summary>
<returns>一个整数，它表示指定的 <see cref="T:System.DateTime"/> 中的年份。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/>。 </param>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>确定指定纪元中的指定日期是否为闰日。</summary>
<returns>如果指定的日期是闰日，则为 true；否则为 false。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">1 到 12 之间的一个整数，它表示月份。 </param>
<param name="day">1 到 31 之间的一个整数，它表示天。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。-或- <paramref name="day"/> 超出了此日历支持的范围。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
<summary>确定指定纪元中指定年份的指定月份是否为闰月。</summary>
<returns>除非被派生类重写，否则此方法始终返回 false。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">1 到 12 之间的一个整数，它表示月份。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.IsLeapYear(System.Int32,System.Int32)">
<summary>确定指定纪元中的指定年份是否为闰年。</summary>
<returns>如果指定的年份是闰年，则为 true；否则为 false。</returns>
<param name="year">表示年份的整数。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.MaxSupportedDateTime">
<summary>获取此 <see cref="T:System.Globalization.ThaiBuddhistCalendar"/> 类支持的最晚日期和时间。</summary>
<returns><see cref="T:System.Globalization.ThaiBuddhistCalendar"/> 类支持的最晚日期和时间，它相当于公历的公元 9999 年 12 月 31 日结束的那一刻。</returns>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.MinSupportedDateTime">
<summary>获取此 <see cref="T:System.Globalization.ThaiBuddhistCalendar"/> 类支持的最早日期和时间。</summary>
<returns><see cref="T:System.Globalization.ThaiBuddhistCalendar"/> 类支持的最早日期和时间，它相当于公历的公元 0001 年的 1 月 1 日开始的那一刻。</returns>
    </member>
    <member name="F:System.Globalization.ThaiBuddhistCalendar.ThaiBuddhistEra">
<summary>表示当前纪元。此字段为常量。</summary>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>返回设置为指定纪元中的指定日期和时间的 <see cref="T:System.DateTime"/>。</summary>
<returns>设置为当前纪元中的指定日期和时间的 <see cref="T:System.DateTime"/>。</returns>
<param name="year">表示年份的整数。 </param>
<param name="month">1 到 12 之间的一个整数，它表示月份。 </param>
<param name="day">1 到 31 之间的一个整数，它表示天。 </param>
<param name="hour">0 与 23 之间的一个整数，它表示小时。 </param>
<param name="minute">0 与 59 之间的一个整数，它表示分钟。 </param>
<param name="second">0 与 59 之间的一个整数，它表示秒。 </param>
<param name="millisecond">0 与 999 之间的一个整数，它表示毫秒。 </param>
<param name="era">表示纪元的整数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。-或- <paramref name="month"/> 超出了此日历支持的范围。-或- <paramref name="day"/> 超出了此日历支持的范围。-或- <paramref name="hour"/> 小于 0 或大于 23。-或- <paramref name="minute"/> 小于 0 或大于 59。-或- <paramref name="second"/> 小于 0 或大于 59。-或- <paramref name="millisecond"/> 小于 0 或大于 999。-或- <paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.ToFourDigitYear(System.Int32)">
<summary>使用 <see cref="P:System.Globalization.ThaiBuddhistCalendar.TwoDigitYearMax"/> 属性将指定的年份转换为四位数年份，以确定相应的纪元。</summary>
<returns>包含 <paramref name="year"/> 的四位数表示形式的整数。</returns>
<param name="year">一个两位数或四位数的整数，表示要转换的年份。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了日历支持的范围。 </exception>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.TwoDigitYearMax">
<summary>获取或设置可以用两位数年份表示的 100 年范围内的最后一年。</summary>
<returns>可以用两位数年份表示的 100 年范围内的最后一年。</returns>
<exception cref="T:System.ArgumentOutOfRangeException">在设置操作中，赋予的值小于 99。-或- 在设置操作中，赋予的值大于 10542。</exception>
    </member>
    <member name="T:System.Globalization.TimeSpanStyles">
<summary>定义一些格式设置选项，这些选项可自定义 <see cref="Overload:System.TimeSpan.ParseExact"/> 和 <see cref="Overload:System.TimeSpan.TryParseExact"/> 方法的字符串分析方法。</summary>
    </member>
    <member name="F:System.Globalization.TimeSpanStyles.None">
<summary>指示仅当存在一个负号时输入解释为一个负时间间隔。</summary>
    </member>
    <member name="F:System.Globalization.TimeSpanStyles.AssumeNegative">
<summary>指示输入始终解释为一个负时间间隔。</summary>
    </member>
    <member name="T:System.Globalization.UmAlQuraCalendar">
<summary>表示沙特阿拉伯回历 (Um Al Qura)。</summary>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.#ctor">
<summary>初始化 <see cref="T:System.Globalization.UmAlQuraCalendar"/> 类的新实例。 </summary>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.AddMonths(System.DateTime,System.Int32)">
<summary>计算与指定初始日期相距指定月数的日期。</summary>
<returns>在将 <paramref name="months"/> 参数指定的月数加到 <paramref name="time"/> 参数指定的日期后所得的日期。</returns>
<param name="time">要加上月数的日期。<see cref="T:System.Globalization.UmAlQuraCalendar"/> 类仅支持从 04/30/1900 00.00.00（公历日期）到 05/13/2029 23:59:59（公历日期）的日期。</param>
<param name="months">要添加的正月数或负月数。 </param>
<exception cref="T:System.ArgumentException">得到的日期不在 <see cref="T:System.Globalization.UmAlQuraCalendar"/> 类支持的范围内。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="months"/> 小于 -120,000 或大于 120,000。-或- <paramref name="time"/> 超出了此日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.AddYears(System.DateTime,System.Int32)">
<summary>计算与指定初始日期相距指定年数的日期。</summary>
<returns>在将 <paramref name="years"/> 参数指定的年数加到 <paramref name="time"/> 参数指定的日期后所得的日期。</returns>
<param name="time">要加上年数的日期。 </param>
<param name="years">要添加的正年数或负年数。 </param>
<exception cref="T:System.ArgumentException">得到的日期不在 <see cref="T:System.Globalization.UmAlQuraCalendar"/> 类支持的范围内。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="years"/> 小于 -10,000 或大于 10,000。-或- <paramref name="time"/> 超出了此日历支持的范围。</exception>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.Eras">
<summary>获取当前 <see cref="T:System.Globalization.UmAlQuraCalendar"/> 支持的纪元的列表。</summary>
<returns>一个数组，它由具有值 <see cref="F:System.Globalization.Calendar.CurrentEra"/> 的单个元素组成。</returns>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDayOfMonth(System.DateTime)">
<summary>计算指定日期出现在月中的哪一天。</summary>
<returns>一个从 1 到 30 的整数，表示由 <paramref name="time"/> 参数指定的月中日期。 </returns>
<param name="time">要读取的日期。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="time"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDayOfWeek(System.DateTime)">
<summary>计算指定日期出现在星期几。</summary>
<returns>由 <paramref name="time"/> 参数指定的一周中的某天。</returns>
<param name="time">要读取的日期。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="time"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDayOfYear(System.DateTime)">
<summary>计算指定日期出现在年中的哪一天。</summary>
<returns>一个从 1 到 355 的整数，表示 <paramref name="time"/> 参数指定的日期是年中的第几天。</returns>
<param name="time">要读取的日期。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="time"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
<summary>计算指定纪元年份的指定月份中的天数。</summary>
<returns>指定纪元年份中指定月份的天数。返回值是 29（在平年中）或 30（在闰年中）。</returns>
<param name="year">年份。 </param>
<param name="month">1 到 12 之间的一个整数，用于表示月。 </param>
<param name="era">纪元。指定 UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/>、<paramref name="month"/> 或 <paramref name="era"/> 超出了 <see cref="T:System.Globalization.UmAlQuraCalendar"/> 类支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDaysInYear(System.Int32,System.Int32)">
<summary>计算指定纪元的指定年份中的天数。</summary>
<returns>指定纪元年份中的天数。天数在平年中为 354，在闰年中为 355。</returns>
<param name="year">年份。 </param>
<param name="era">纪元。指定 UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 或 <paramref name="era"/> 超出了 <see cref="T:System.Globalization.UmAlQuraCalendar"/> 类支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetEra(System.DateTime)">
<summary>返回指定的 <see cref="T:System.DateTime"/> 值的纪元。</summary>
<returns>总是返回 <see cref="F:System.Globalization.Calendar.CurrentEra"/> 值。</returns>
<param name="time">要读取的日期。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="time"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetLeapMonth(System.Int32,System.Int32)">
<summary>计算指定纪元年份的闰月。</summary>
<returns>始终为 0，因为 <see cref="T:System.Globalization.UmAlQuraCalendar"/> 类不支持闰月这一概念。</returns>
<param name="year">年份。</param>
<param name="era">纪元。指定 UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 小于 1318 或大于 1450。-或- <paramref name="era"/> 不是 UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetMonth(System.DateTime)">
<summary>计算指定日期出现在哪个月份中。</summary>
<returns>一个从 1 到 12 的整数，表示 <paramref name="time"/> 参数指定的日期中的月份。</returns>
<param name="time">要读取的日期。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="time"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetMonthsInYear(System.Int32,System.Int32)">
<summary>计算指定纪元的指定年份中的月数。</summary>
<returns>始终为 12。</returns>
<param name="year">年份。 </param>
<param name="era">纪元。指定 UmAlQuaraCalendar.Eras[UmAlQuraCalendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="era"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetYear(System.DateTime)">
<summary>计算由指定 <see cref="T:System.DateTime"/> 表示的日期所在的年份。</summary>
<returns>一个整数，表示由 <paramref name="time"/> 参数指定的年份。</returns>
<param name="time">要读取的日期。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="time"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>确定指定的日期是否为闰日。</summary>
<returns>始终为 false，因为 <see cref="T:System.Globalization.UmAlQuraCalendar"/> 类不支持闰日这一概念。</returns>
<param name="year">年份。 </param>
<param name="month">1 到 12 之间的一个整数，用于表示月。 </param>
<param name="day">1 到 30 之间的一个整数，用于表示日。 </param>
<param name="era">纪元。指定 UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/>、<paramref name="month"/>、<paramref name="day"/> 或 <paramref name="era"/> 超出了 <see cref="T:System.Globalization.UmAlQuraCalendar"/> 类支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
<summary>确定指定纪元年份中的指定月份是否为闰月。</summary>
<returns>始终为 false，因为 <see cref="T:System.Globalization.UmAlQuraCalendar"/> 类不支持闰月。</returns>
<param name="year">年份。 </param>
<param name="month">1 到 12 之间的一个整数，用于表示月。 </param>
<param name="era">纪元。指定 UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/>、<paramref name="month"/> 或 <paramref name="era"/> 超出了 <see cref="T:System.Globalization.UmAlQuraCalendar"/> 类支持的范围。 </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.IsLeapYear(System.Int32,System.Int32)">
<summary>确定指定纪元中的指定年份是否为闰年。</summary>
<returns>如果指定的年份是闰年，则为 true；否则为 false。 </returns>
<param name="year">年份。 </param>
<param name="era">纪元。指定 UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 或 <paramref name="era"/> 超出了 <see cref="T:System.Globalization.UmAlQuraCalendar"/> 类支持的范围。 </exception>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.MaxSupportedDateTime">
<summary>获取此日历支持的最晚日期和时间。</summary>
<returns><see cref="T:System.Globalization.UmAlQuraCalendar"/> 类支持的最晚日期和时间，它相当于公历的公元 2029 年 5 月 13 日结束的那一刻。</returns>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.MinSupportedDateTime">
<summary>获取此日历支持的最早日期和时间。</summary>
<returns><see cref="T:System.Globalization.UmAlQuraCalendar"/> 类支持的最早日期和时间，它相当于公历的公元 1900 年 4 月 30 日开始的那一刻。</returns>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>返回设置为指定的日期、时间和纪元的 <see cref="T:System.DateTime"/>。</summary>
<returns>设置为当前纪元中的指定日期和时间的对象。</returns>
<param name="year">年份。 </param>
<param name="month">1 到 12 之间的一个整数，用于表示月。 </param>
<param name="day">1 到 29 之间的一个整数，用于表示日。 </param>
<param name="hour">0 到 23 之间的一个整数，用于表示小时。 </param>
<param name="minute">0 到 59 之间的一个整数，用于表示分钟。 </param>
<param name="second">0 到 59 之间的一个整数，用于表示秒。 </param>
<param name="millisecond">0 到 999 之间的一个整数，用于表示毫秒。 </param>
<param name="era">纪元。指定 UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/>、<paramref name="month"/>、<paramref name="day"/> 或 <paramref name="era"/> 超出了 <see cref="T:System.Globalization.UmAlQuraCalendar"/> 类支持的范围。-或- <paramref name="hour"/> 小于 0 或大于 23。-或- <paramref name="minute"/> 小于 0 或大于 59。-或- <paramref name="second"/> 小于 0 或大于 59。-或- <paramref name="millisecond"/> 小于 0 或大于 999。 </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.ToFourDigitYear(System.Int32)">
<summary>使用 <see cref="P:System.Globalization.UmAlQuraCalendar.TwoDigitYearMax"/> 属性将指定的年份转换为四位数年份，以确定相应的纪元。</summary>
<returns>如果 <paramref name="year"/> 参数是两位数年份，则返回值是对应的四位数年份。如果 <paramref name="year"/> 参数是四位数年份，则返回值是未更改的 <paramref name="year"/> 参数。</returns>
<param name="year">一个从 0 到 99 的两位数年份，或一个从 1318 到 1450 的四位数 Um Al Qura 日历年份。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="year"/> 超出了此日历支持的范围。 </exception>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.TwoDigitYearMax">
<summary>获取或设置可以用两位数年份表示的 100 年范围内的最后一年。</summary>
<returns>可以用两位数年份表示的 100 年范围内的最后一年。</returns>
<exception cref="T:System.InvalidOperationException">此日历为只读。</exception>
<exception cref="T:System.ArgumentOutOfRangeException">在设置操作中，Um Al Qura 年份值小于 1318 而不是 99，或者大于 1450。</exception>
    </member>
    <member name="T:System.Globalization.UnicodeCategory">
<summary>定义字符的 Unicode 类别。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.UppercaseLetter">
<summary>指示字符是大写字母。由 Unicode 代码“Lu”（字母，大写）表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.LowercaseLetter">
<summary>指示字符是小写字母。由 Unicode 代码“Ll”（字母，小写）表示。 </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.TitlecaseLetter">
<summary>指示字符是词首字母大写字母。由 Unicode 代码“Lt”（字母，词首字母大写）表示。 </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ModifierLetter">
<summary>指示字符是修饰符字母，它是独立式的间距字符，指示前面字母的修改。由 Unicode 代码“Lm”（字母，修饰符）表示。 </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherLetter">
<summary>指示字符是字母，但它不是大写字母、小写字母、词首字母大写或修饰符字母。由 Unicode 代码“Lo”（字母，其他）表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.NonSpacingMark">
<summary>指示字符是非间距字符，这指示基字符的修改。由 Unicode 代码“Mn”（符号，非间距）表示。 </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.SpacingCombiningMark">
<summary>指示字符是间距字符，这指示基字符的修改并影响该基字符的标志符号的宽度。由 Unicode 代码“Mc”（符号，间距组合）表示。 </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.EnclosingMark">
<summary>指示字符是封闭符号，封闭符号是非间距组合字符，它环绕基字符前面的所有字符（包括基字符）。由 Unicode 代码“Me”（符号，封闭）表示。 </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.DecimalDigitNumber">
<summary>指示字符是十进制数字，即在范围 0 到 9 内。由 Unicode 代码“Nd”（数字，十进制数字）表示。 </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.LetterNumber">
<summary>指示字符是由字母表示的数字，而不是十进制数字，例如，罗马数字 5 由字母“V”表示。此指示符由 Unicode 代码“Nl”（数字，字母）表示。 </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherNumber">
<summary>指示字符为既不是十进制数字也不是字母数字的数字，例如分数 1/2。此指示符由 Unicode 代码“No”（数字，其他）表示。 </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.SpaceSeparator">
<summary>指示字符是空白字符，它不具有标志符号，但不是控制或格式字符。由 Unicode 代码“Zs”（分隔符，空白）表示。 </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.LineSeparator">
<summary>指示字符用于分隔文本各行。由 Unicode 代码“Zl”（分隔符，行）表示。 </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ParagraphSeparator">
<summary>指示字符用于分隔段落。由 Unicode 代码“Zp”（分隔符，段落）表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.Control">
<summary>指示字符是控制代码，其 Unicode 值是 U+007F，或者位于 U+0000 到 U+001F 或 U+0080 到 U+009F 范围内。由 Unicode 代码“Cc”（其他，控制）表示。 </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.Format">
<summary>指示字符是格式字符，格式字符是通常不呈现的字符，但它影响文本布局或文本处理操作。由 Unicode 代码“Cf”（其他，格式）表示。 </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.Surrogate">
<summary>指示字符是高代理项还是低代理项。代理项代码值在范围 U+D800 到 U+DFFF 内。由 Unicode 代码“Cs”（其他，代理项）表示。 </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.PrivateUse">
<summary>指示字符是专用字符，其 Unicode 值在范围 U+E000 到 U+F8FF 内。由 Unicode 代码“Co”（其他，专用）表示。 </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ConnectorPunctuation">
<summary>指示字符是连接两个字符的连接符标点。由 Unicode 代码“Pc”（标点，连接符）表示。 </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.DashPunctuation">
<summary>指示字符是短划线或连字符。由 Unicode 代码“Pd”（标点，短划线）表示。 </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OpenPunctuation">
<summary>指示字符是成对的标点符号（例如括号、方括号和大括号）之一的开始字符。由 Unicode 代码“Ps”（标点，开始）表示。 </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ClosePunctuation">
<summary>指示字符是成对的标点符号（例如括号、方括号和大括号）之一的结束字符。由 Unicode 代码“Pe”（标点，结束）表示。 </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.InitialQuotePunctuation">
<summary>指示字符是开始或前引号。由 Unicode 代码“Pi”（标点，前引号）表示。 </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.FinalQuotePunctuation">
<summary>指示字符是封闭或后引号。由 Unicode 代码“Pf”（标点，后引号）表示。 </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherPunctuation">
<summary>指示字符是标点，但它不是连接符标点、短划线标点、开始标点、结束标点、前引号标点或后引号标点。由 Unicode 代码“Po”（标点，其他）表示。 </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.MathSymbol">
<summary>指示字符是数学符号，例如“+”或“=”。由 Unicode 代码“Sm”（符号，数学）表示。 </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.CurrencySymbol">
<summary>指示字符是货币符号。由 Unicode 代码“Sc”（符号，货币）表示。 </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ModifierSymbol">
<summary>指示字符是修饰符符号，这指示环绕字符的修改。例如，分数斜线号指示其左侧的数字为分子，右侧的数字为分母。此指示符由 Unicode 代码“Sk”（符号，修饰符）表示。 </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherSymbol">
<summary>指示字符是符号，但它不是数学符号、货币符号或修饰符符号。由 Unicode 代码“So”（符号，其他）表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherNotAssigned">
<summary>指示字符未被分配给任何 Unicode 类别。由 Unicode 代码“Cn”（其他，未分配）表示。</summary>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
<summary>返回年中包括指定 <see cref="T:System.DateTime"/> 对象中的日期的星期。</summary>
<returns>一个从 1 开始的整数，表示一年中包括 <paramref name="time"/> 参数中的日期的那个星期。</returns>
<param name="time">要读取的 <see cref="T:System.DateTime"/> 对象。 </param>
<param name="rule"><see cref="T:System.Globalization.CalendarWeekRule"/> 值之一，用于定义一个日历周。 </param>
<param name="firstDayOfWeek"><see cref="T:System.DayOfWeek"/> 值之一，表示一个星期的第一天。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="firstDayOfWeek"/> 超出了此日历支持的范围。-或- <paramref name="rule"/> 不是有效的 <see cref="T:System.Globalization.CalendarWeekRule"/> 值。 </exception>
    </member>
    <member name="T:System.IO.BinaryReader">
<summary>用特定的编码将基元数据类型读作二进制值。</summary>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream)">
<summary>基于所提供的流，用 <see cref="T:System.Text.UTF8Encoding"/> 初始化 <see cref="T:System.IO.BinaryReader"/> 类的新实例。</summary>
<param name="input">输入流。 </param>
<exception cref="T:System.ArgumentNullException">该流为 null。</exception>
<exception cref="T:System.ArgumentException">该流不支持读取，或者该流已关闭。 </exception>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
<summary>基于所提供的流和特定的字符编码，初始化 <see cref="T:System.IO.BinaryReader"/> 类的新实例。</summary>
<param name="input">输入流。 </param>
<param name="encoding">要使用的字符编码。 </param>
<exception cref="T:System.ArgumentException">该流不支持读取，或者该流已关闭。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 或 <paramref name="encoding"/> 为 null。 </exception>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
<summary>基于所提供的流、特定的字符编码以及指示是否打开流的值，初始化 <see cref="T:System.IO.BinaryReader"/> 类的新实例。</summary>
<param name="input">输入流。</param>
<param name="encoding">要使用的字符编码。</param>
<param name="leaveOpen">流打开为 true，否则为 flase。</param>
<exception cref="T:System.ArgumentException">该流不支持读取，或者该流已关闭。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 或 <paramref name="encoding"/> 为 null。 </exception>
    </member>
    <member name="P:System.IO.BinaryReader.BaseStream">
<summary>公开对 <see cref="T:System.IO.BinaryReader"/> 的基础流的访问。</summary>
<returns>与 BinaryReader 关联的基础流。</returns>
    </member>
    <member name="M:System.IO.BinaryReader.Close">
<summary>关闭当前阅读器及基础流。</summary>
    </member>
    <member name="M:System.IO.BinaryReader.Dispose">
<summary>释放由 <see cref="T:System.IO.BinaryReader"/> 类的当前实例使用的资源。</summary>
    </member>
    <member name="M:System.IO.BinaryReader.Dispose(System.Boolean)">
<summary>由 <see cref="M:System.IO.BinaryReader.Dispose"/> 方法和终结器调用，以释放由 <see cref="T:System.IO.BinaryReader"/> 类的当前实例占用的托管资源和未托管资源。</summary>
<param name="disposing">如果释放托管和未托管资源，则为 true；如果只释放未托管资源，则为 false。 </param>
    </member>
    <member name="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
<summary>用从流中读取的指定字节数填充内部缓冲区。</summary>
<param name="numBytes">要读取的字节数。 </param>
<exception cref="T:System.IO.EndOfStreamException">在可以读取 <paramref name="numBytes"/> 之前到达了流的末尾。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.ArgumentOutOfRangeException">请求的 <paramref name="numBytes"/> 大于内部缓冲区大小。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.PeekChar">
<summary>返回下一个可用的字符，并且不提升字节或字符的位置。</summary>
<returns>下一个可用的字符，或者，如果没有可用字符或者流不支持查找时为 -1。</returns>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read">
<summary>从基础流中读取字符，并根据所使用的 Encoding 和从流中读取的特定字符，提升流的当前位置。</summary>
<returns>输入流中的下一个字符，如果当前无可用字符则为 -1。</returns>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
<summary>将 <paramref name="index"/> 作为字节数组中的起始点，从流中读取 <paramref name="count"/> 个字节。</summary>
<returns>读入 <paramref name="buffer"/> 的字符数。如果可用的字节没有请求的那么多，此数可能小于所请求的字节数；如果到达了流的末尾，此数可能为零。</returns>
<param name="buffer">要读入数据的缓冲区。 </param>
<param name="index">缓冲区中的起始点，在该处开始读入缓冲区。 </param>
<param name="count">要读取的字符数。 </param>
<exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index"/> 小于 <paramref name="count"/>。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="buffer"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 或 <paramref name="count"/> 为负。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
<summary>将 <paramref name="index"/> 作为字符数组中的起始点，从流中读取 <paramref name="count"/> 个字符。</summary>
<returns>读入缓冲区的总字符数。如果当前可用的字节没有请求的那么多，此数可能小于所请求的字符数；如果到达了流的末尾，此数可能为零。</returns>
<param name="buffer">要读入数据的缓冲区。 </param>
<param name="index">缓冲区中的起始点，在该处开始读入缓冲区。 </param>
<param name="count">要读取的字符数。 </param>
<exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index"/> 小于 <paramref name="count"/>。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="buffer"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 或 <paramref name="count"/> 为负。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read7BitEncodedInt">
<summary>以压缩格式读入 32 位整数。</summary>
<returns>压缩格式的 32 位整数。</returns>
<exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.FormatException">此流已损坏。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadBoolean">
<summary>从当前流中读取布尔值，并使该流的当前位置提升 1 个字节。</summary>
<returns>如果字节非零，则为 true；否则为 false。</returns>
<exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadByte">
<summary>从当前流中读取下一个字节，并使流的当前位置提升 1 个字节。</summary>
<returns>从当前流中读取的下一个字节。</returns>
<exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
<summary>从当前流中将 <paramref name="count"/> 个字节读入字节数组，并使当前位置提升 <paramref name="count"/> 个字节。</summary>
<returns>包含从基础流中读取的数据的字节数组。如果到达了流的末尾，则该字节数组可能小于所请求的字节数。</returns>
<param name="count">要读取的字节数。 </param>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="count"/> 为负数。 </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadChar">
<summary>从当前流中读取下一个字符，并根据所使用的 Encoding 和从流中读取的特定字符，提升流的当前位置。</summary>
<returns>从当前流中读取的字符。</returns>
<exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.ArgumentException">读取了一个代理项字符。 </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadChars(System.Int32)">
<summary>从当前流中读取 <paramref name="count"/> 个字符，以字符数组的形式返回数据，并根据所使用的 Encoding 和从流中读取的特定字符，提升当前位置。</summary>
<returns>包含从基础流中读取的数据的字节数组。如果到达了流的末尾，则该字符数组可能小于所请求的字符数。</returns>
<param name="count">要读取的字符数。 </param>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="count"/> 为负数。 </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadDouble">
<summary>从当前流中读取 8 字节浮点值，并使流的当前位置提升 8 个字节。</summary>
<returns>从当前流中读取的 8 字节浮点值。</returns>
<exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt16">
<summary>从当前流中读取 2 字节带符号整数，并使流的当前位置提升 2 个字节。</summary>
<returns>从当前流中读取的 2 字节带符号整数。</returns>
<exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt32">
<summary>从当前流中读取 4 字节带符号整数，并使流的当前位置提升 4 个字节。</summary>
<returns>从当前流中读取的 4 字节带符号整数。</returns>
<exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt64">
<summary>从当前流中读取 8 字节带符号整数，并使流的当前位置向前移动 8 个字节。</summary>
<returns>从当前流中读取的 8 字节带符号整数。</returns>
<exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadSByte">
<summary>从此流中读取一个有符号字节，并使流的当前位置提升 1 个字节。</summary>
<returns>从当前流中读取的一个有符号字节。</returns>
<exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadSingle">
<summary>从当前流中读取 4 字节浮点值，并使流的当前位置提升 4 个字节。</summary>
<returns>从当前流中读取的 4 字节浮点值。</returns>
<exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadString">
<summary>从当前流中读取一个字符串。该字符串有长度前缀，被编码为整数（一次 7 位）。</summary>
<returns>正被读取的字符串。</returns>
<exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt16">
<summary>使用 Little-Endian 编码从当前流中读取 2 字节无符号整数，并将流的位置提升 2 个字节。</summary>
<returns>从该流中读取的 2 字节无符号整数。</returns>
<exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt32">
<summary>从当前流中读取 4 字节无符号整数并使流的当前位置提升 4 个字节。</summary>
<returns>从该流中读取的 4 字节无符号整数。</returns>
<exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt64">
<summary>从当前流中读取 8 字节无符号整数并使流的当前位置提升 8 个字节。</summary>
<returns>从该流中读取的 8 字节无符号整数。</returns>
<exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
    </member>
    <member name="T:System.IO.BinaryWriter">
<summary>以二进制形式将基元类型写入流，并支持用特定的编码写入字符串。</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor">
<summary>初始化向流中写入的 <see cref="T:System.IO.BinaryWriter"/> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream)">
<summary>基于所提供的流，用 UTF-8 作为字符串编码来初始化 <see cref="T:System.IO.BinaryWriter"/> 类的新实例。</summary>
<param name="output">输出流。 </param>
<exception cref="T:System.ArgumentException">该流不支持写入，或者该流已关闭。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="output"/> 为 null。 </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
<summary>基于所提供的流和特定的字符编码，初始化 <see cref="T:System.IO.BinaryWriter"/> 类的新实例。</summary>
<param name="output">输出流。 </param>
<param name="encoding">要使用的字符编码。 </param>
<exception cref="T:System.ArgumentException">该流不支持写入，或者该流已关闭。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="output"/> 或 <paramref name="encoding"/> 为 null。 </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
<summary>基于所提供的流、特定的字符编码以及指示是否打开流的值，初始化 <see cref="T:System.IO.BinaryWriter"/> 类的新实例。</summary>
<param name="output">输出流。</param>
<param name="encoding">要使用的字符编码。</param>
<param name="leaveOpen">流打开为 true，否则为 flase。</param>
<exception cref="T:System.ArgumentException">该流不支持写入，或者该流已关闭。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="output"/> 或 <paramref name="encoding"/> 为 null。 </exception>
    </member>
    <member name="P:System.IO.BinaryWriter.BaseStream">
<summary>获取 <see cref="T:System.IO.BinaryWriter"/> 的基础流。</summary>
<returns>与 BinaryWriter 关联的基础流。</returns>
    </member>
    <member name="M:System.IO.BinaryWriter.Close">
<summary>关闭当前<see cref="T:System.IO.BinaryWriter"/>和基础流。</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Dispose">
<summary>释放由 <see cref="T:System.IO.BinaryWriter"/> 类的当前实例使用的资源。</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Dispose(System.Boolean)">
<summary>由 <see cref="M:System.IO.BinaryWriter.Dispose"/> 方法和终结器调用，以释放由 <see cref="T:System.IO.BinaryWriter"/> 类的当前实例占用的托管资源和未托管资源。</summary>
<param name="disposing">如果释放托管和未托管资源，则为 true；如果只释放未托管资源，则为 false。 </param>
    </member>
    <member name="M:System.IO.BinaryWriter.Flush">
<summary>清理当前编写器的所有缓冲区，使所有缓冲数据写入基础设备。</summary>
    </member>
    <member name="F:System.IO.BinaryWriter.Null">
<summary>指定无后备存储区的 <see cref="T:System.IO.BinaryWriter"/>。</summary>
    </member>
    <member name="F:System.IO.BinaryWriter.OutStream">
<summary>持有基础流。</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
<summary>设置当前流中的位置。</summary>
<returns>包含当前流的位置。</returns>
<param name="offset">相对于 <paramref name="origin"/> 的字节偏移量。 </param>
<param name="origin"><see cref="T:System.IO.SeekOrigin"/> 的一个字段，指示获取新位置所依据的参考点。 </param>
<exception cref="T:System.IO.IOException">文件指针被移到无效位置。 </exception>
<exception cref="T:System.ArgumentException"><see cref="T:System.IO.SeekOrigin"/> 值无效。 </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Boolean)">
<summary>将单字节布尔值写入当前流，其中 0 表示 false，1 表示 true。</summary>
<param name="value">要写入的布尔值（0 或 1）。 </param>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte)">
<summary>将一个无符号字节写入当前流，并将流的位置提升 1 个字节。</summary>
<param name="value">要写入的无符号字节。 </param>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte[])">
<summary>将字节数组写入基础流。</summary>
<param name="buffer">包含要写入的数据的字节数组。 </param>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="buffer"/> 为 null。 </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
<summary>将字节数组部分写入当前流。</summary>
<param name="buffer">包含要写入的数据的字节数组。 </param>
<param name="index"><paramref name="buffer"/> 中开始写入的起始点。 </param>
<param name="count">要写入的字节数。 </param>
<exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index"/> 小于 <paramref name="count"/>。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="buffer"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 或 <paramref name="count"/> 为负。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char)">
<summary>将 Unicode 字符写入当前流，并根据所使用的 Encoding 和向流中写入的特定字符，提升流的当前位置。</summary>
<param name="ch">要写入的非代理项 Unicode 字符。 </param>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="ch"/> 是单一代理项字符。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char[])">
<summary>将字符数组写入当前流，并根据所使用的 Encoding 和向流中写入的特定字符，提升流的当前位置。</summary>
<param name="chars">包含要写入数据的字符数组。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="chars"/> 为 null。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
<summary>将字符数组部分写入当前流，并根据所使用的 Encoding（可能还根据向流中写入的特定字符），提升流的当前位置。</summary>
<param name="chars">包含要写入数据的字符数组。 </param>
<param name="index"><paramref name="buffer"/> 中开始写入的起始点。 </param>
<param name="count">要写入的字符数。 </param>
<exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index"/> 小于 <paramref name="count"/>。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="chars"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 或 <paramref name="count"/> 为负。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Double)">
<summary>将 8 字节浮点值写入当前流，并将流的位置提升 8 个字节。</summary>
<param name="value">要写入的 8 字节浮点值。 </param>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int16)">
<summary>将 2 字节带符号整数写入当前流，并将流的位置提升 2 个字节。</summary>
<param name="value">要写入的 2 字节带符号整数。 </param>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int32)">
<summary>将 4 字节带符号整数写入当前流，并将流的位置提升 4 个字节。</summary>
<param name="value">要写入的 4 字节带符号整数。 </param>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int64)">
<summary>将 8 字节无符号整数写入当前流，并将流的位置提升 8 个字节。</summary>
<param name="value">要写入的 8 字节无符号整数。 </param>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.SByte)">
<summary>将一个有符号字节写入当前流，并将流的位置提升 1 个字节。</summary>
<param name="value">要写入的有符号字节。 </param>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Single)">
<summary>将 4 字节浮点值写入当前流，并将流的位置提升 4 个字节。</summary>
<param name="value">要写入的 4 字节浮点值。 </param>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.String)">
<summary>将有长度前缀的字符串按 <see cref="T:System.IO.BinaryWriter"/> 的当前编码写入此流，并根据所使用的编码和写入流的特定字符，提升流的当前位置。</summary>
<param name="value">要写入的值。 </param>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt16)">
<summary>将 2 字节无符号整数写入当前流，并将流的位置提升 2 个字节。</summary>
<param name="value">要写入的 2 字节无符号整数。 </param>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt32)">
<summary>将 4 字节无符号整数写入当前流，并将流的位置提升 4 个字节。</summary>
<param name="value">要写入的 4 字节无符号整数。 </param>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt64)">
<summary>将 8 字节无符号整数写入当前流，并将流的位置提升 8 个字节。</summary>
<param name="value">要写入的 8 字节无符号整数。 </param>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
<summary>以压缩格式写出 32 位整数。</summary>
<param name="value">要写出的 32 位整数。 </param>
<exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
<exception cref="T:System.IO.IOException">流已关闭。 </exception>
    </member>
    <member name="T:System.IO.Directory">
<summary>公开用于创建、移动和枚举通过目录和子目录的静态方法。无法继承此类。</summary>
    </member>
    <member name="M:System.IO.Directory.CreateDirectory(System.String)">
<summary>在被受信任的应用程序调用时，创建由 <paramref name="path"/> 指定的所有目录和子目录。</summary>
<returns>由 <paramref name="path"/> 指定的 <see cref="T:System.IO.DirectoryInfo"/>。</returns>
<param name="path">要创建的目录路径。 </param>
<exception cref="T:System.IO.IOException"><paramref name="path"/> 指定的目录是只读的。</exception>
<exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个无效字符。-或- <paramref name="path"/> 带有前缀，或仅包含一个冒号字符 (:)。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 包含一个冒号字符 (:)，该冒号字符不是驱动器标签（“C:\”）的一部分。</exception>
    </member>
    <member name="M:System.IO.Directory.Delete(System.String)">
<summary>在被受信任的应用程序调用时，从指定路径中删除空目录。</summary>
<param name="path">要移除的空目录的名称。此目录必须为可写或为空。 </param>
<exception cref="T:System.IO.IOException">存在具有相同名称和 <paramref name="path"/> 所指定位置的文件。-或- 该目录为应用程序的当前工作目录。-或- <paramref name="path"/> 指定的目录不为空。-或- 对于目录有打开句柄，并且操作系统是 Windows XP 或更早版本。此打开句柄可能是由于枚举目录和文件导致的。 </exception>
<exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个无效字符。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径不存在或找不到。-或- 指定的路径无效（例如，它位于未映射的驱动器上）。 </exception>
    </member>
    <member name="M:System.IO.Directory.Delete(System.String,System.Boolean)">
<summary>在被受信任的应用程序调用时，删除指定的目录，并且删除该目录中的所有子目录和文件（如果指定）。</summary>
<param name="path">要移除的目录的名称。 </param>
<param name="recursive">若要移除 <paramref name="path"/> 中的目录、子目录和文件，则为 true；否则为 false。 </param>
<exception cref="T:System.IO.IOException">存在具有相同名称和 <paramref name="path"/> 所指定位置的文件。-或- 由 <paramref name="path"/> 指定的目录是只读的或 <paramref name="recursive"/> 为 false 并且 <paramref name="path"/> 不是空目录。-或- 该目录为应用程序的当前工作目录。-或- 对于目录或其文件之一有打开句柄，并且操作系统是 Windows XP 或更早版本。此打开句柄可能是由于枚举目录和文件导致的。 </exception>
<exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个无效字符。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径不存在或找不到。-或- 指定的路径无效（例如，它位于未映射的驱动器上）。 </exception>
    </member>
    <member name="M:System.IO.Directory.EnumerateDirectories(System.String)">
<summary>在被受信任的应用程序调用时，返回指定路径中的目录名称的可枚举集合。</summary>
<returns>由 <paramref name="path"/> 指定的目录中的目录名称的可枚举集合。</returns>
<param name="path">要搜索的目录。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="path "/> 是零长度字符串、只包含空白或者包含在 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
<paramref name="path"/> 无效，比如引用未映射的驱动器。 </exception>
      <exception cref="T:System.IO.IOException">
<paramref name="path"/> 是一个文件名。</exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
<exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.IO.Directory.EnumerateDirectories(System.String,System.String)">
<summary>在被受信任的应用程序调用时，返回指定路径中与搜索模式匹配的目录名称的可枚举集合。</summary>
<returns>由 <paramref name="path"/> 指定的目录中与 <paramref name="searchPattern"/> 匹配的目录名称的可枚举集合。</returns>
<param name="path">要搜索的目录。</param>
<param name="searchPattern">要与 <paramref name="path"/> 中的目录名称匹配的搜索字符串。  </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path "/> 是零长度字符串、只包含空白或者包含在 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。-或- <paramref name="searchPattern"/> 不包含有效模式。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。-或- <paramref name="searchPattern"/> 为 null。 </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
<paramref name="path"/> 无效，比如引用未映射的驱动器。 </exception>
      <exception cref="T:System.IO.IOException">
<paramref name="path"/> 是一个文件名。</exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
<exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.IO.Directory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)">
<summary>在被受信任的应用程序调用时，返回指定路径中与搜索模式匹配的目录名称的可枚举集合，并且还可以选择搜索子目录。</summary>
<returns>由 <paramref name="path"/> 指定的目录中与 <paramref name="searchPattern "/>和 <paramref name="searchOption"/> 匹配的目录名称的可枚举集合。</returns>
<param name="path">要搜索的目录。 </param>
<param name="searchPattern">要与 <paramref name="path"/> 中的目录名称匹配的搜索字符串。  </param>
<param name="searchOption"><see cref="T:System.IO.SearchOption"/> 枚举的一个值，指定搜索操作是应仅包含当前目录还是应包含所有子目录。默认值为 <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="path "/> 是零长度字符串、只包含空白或者包含在 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。-或- <paramref name="searchPattern"/> 不包含有效模式。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。-或- <paramref name="searchPattern"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="searchOption"/> 不是有效的 <see cref="T:System.IO.SearchOption"/> 值。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
<paramref name="path"/> 无效，比如引用未映射的驱动器。 </exception>
      <exception cref="T:System.IO.IOException">
<paramref name="path"/> 是一个文件名。</exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
<exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.IO.Directory.EnumerateFiles(System.String)">
<summary>在被受信任的应用程序调用时，返回指定路径中的文件名的可枚举集合。</summary>
<returns>由 <paramref name="path"/> 指定的目录中的文件名称的可枚举集合。</returns>
<param name="path">要搜索的目录。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path "/> 是零长度字符串、只包含空白或者包含在 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
<paramref name="path"/> 无效，比如引用未映射的驱动器。 </exception>
      <exception cref="T:System.IO.IOException">
<paramref name="path"/> 是一个文件名。</exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
<exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.IO.Directory.EnumerateFiles(System.String,System.String)">
<summary>在被受信任的应用程序调用时，返回指定路径中与搜索模式匹配的文件名的可枚举集合。</summary>
<returns>由 <paramref name="path"/> 指定的目录中与 <paramref name="searchPattern"/> 匹配的文件名称的可枚举集合。</returns>
<param name="path">要搜索的目录。 </param>
<param name="searchPattern">要与 <paramref name="path"/> 中的目录名称匹配的搜索字符串。  </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path "/> 是零长度字符串、只包含空白或者包含在 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。-或- <paramref name="searchPattern"/> 不包含有效模式。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。-或- <paramref name="searchPattern"/> 为 null。 </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
<paramref name="path"/> 无效，比如引用未映射的驱动器。 </exception>
      <exception cref="T:System.IO.IOException">
<paramref name="path"/> 是一个文件名。</exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
<exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.IO.Directory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
<summary>在被受信任的应用程序调用时，返回指定路径中与搜索模式匹配的文件名的可枚举集合，并且还可以选择搜索子目录。</summary>
<returns>由 <paramref name="path"/> 指定的目录中与 <paramref name="searchPattern "/>和 <paramref name="searchOption"/> 匹配的文件名称的可枚举集合。</returns>
<param name="path">要搜索的目录。 </param>
<param name="searchPattern">要与 <paramref name="path"/> 中的目录名称匹配的搜索字符串。  </param>
<param name="searchOption">枚举值之一，指定搜索操作是应仅包含当前目录还是应包含所有子目录。默认值为 <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="path "/> 是零长度字符串、只包含空白或者包含在 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。-或- <paramref name="searchPattern"/> 不包含有效模式。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。-或- <paramref name="searchPattern"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="searchOption"/> 不是有效的 <see cref="T:System.IO.SearchOption"/> 值。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
<paramref name="path"/> 无效，比如引用未映射的驱动器。 </exception>
      <exception cref="T:System.IO.IOException">
<paramref name="path"/> 是一个文件名。</exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
<exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.IO.Directory.EnumerateFileSystemEntries(System.String)">
<summary>在被受信任的应用程序调用时，返回指定路径中的文件系统项的可枚举集合。</summary>
<returns>由 <paramref name="path"/> 指定的目录中的文件系统项的可枚举集合。</returns>
<param name="path">要搜索的目录。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path "/> 是零长度字符串、只包含空白或者包含在 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
<paramref name="path"/> 无效，比如引用未映射的驱动器。 </exception>
      <exception cref="T:System.IO.IOException">
<paramref name="path"/> 是一个文件名。</exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
<exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String)">
<summary>在被受信任的应用程序调用时，返回指定路径中与搜索模式匹配的文件系统项的可枚举集合。</summary>
<returns>由 <paramref name="path"/> 指定的目录中与 <paramref name="searchPattern"/> 匹配的文件系统项的可枚举集合。</returns>
<param name="path">要搜索的目录。 </param>
<param name="searchPattern">要与 <paramref name="path"/> 中的目录名称匹配的搜索字符串。  </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path "/> 是零长度字符串、只包含空白或者包含在 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。-或- <paramref name="searchPattern"/> 不包含有效模式。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。-或- <paramref name="searchPattern"/> 为 null。 </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
<paramref name="path"/> 无效，比如引用未映射的驱动器。 </exception>
      <exception cref="T:System.IO.IOException">
<paramref name="path"/> 是一个文件名。</exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
<exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
<summary>在被受信任的应用程序调用时，返回指定路径中与搜索模式匹配的文件名和目录名称的可枚举集合，并且还可以选择搜索子目录。</summary>
<returns>由 <paramref name="path"/> 指定的目录中与 <paramref name="searchPattern "/>和 <paramref name="searchOption"/> 匹配的文件系统项的可枚举集合。</returns>
<param name="path">要搜索的目录。 </param>
<param name="searchPattern">要与 <paramref name="path"/> 中的目录名称匹配的搜索字符串。  </param>
<param name="searchOption"><see cref="T:System.IO.SearchOption"/> 枚举的一个值，指定搜索操作是应仅包含当前目录还是应包含所有子目录。默认值为 <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="path "/> 是零长度字符串、只包含空白或者包含在 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。-或- <paramref name="searchPattern"/> 不包含有效模式。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。-或- <paramref name="searchPattern"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="searchOption"/> 不是有效的 <see cref="T:System.IO.SearchOption"/> 值。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
<paramref name="path"/> 无效，比如引用未映射的驱动器。 </exception>
      <exception cref="T:System.IO.IOException">
<paramref name="path"/> 是一个文件名。</exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
<exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.IO.Directory.Exists(System.String)">
<summary>在被受信任的应用程序调用时，确定给定路径是否引用磁盘上的一个现有目录。</summary>
<returns>如果 <paramref name="path"/> 引用现有目录，则为 true；否则为 false。</returns>
<param name="path">要测试的路径。 </param>
    </member>
    <member name="M:System.IO.Directory.GetCreationTime(System.String)">
<summary>在被受信任的应用程序调用时，获取目录的创建日期及时间。</summary>
<returns>一个 <see cref="T:System.DateTime"/> 结构，它设置为指定目录的创建日期和时间。该值用本地时间表示。</returns>
<param name="path">目录的路径。 </param>
<exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个无效字符。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
    </member>
    <member name="M:System.IO.Directory.GetCurrentDirectory">
<summary>在被受信任的应用程序调用时，获取该应用程序的当前工作目录。</summary>
<returns>包含当前工作目录的路径的字符串。</returns>
<exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。 </exception>
<exception cref="T:System.NotSupportedException">操作系统为 Windows CE，该系统不具有当前目录功能。</exception>
    </member>
    <member name="M:System.IO.Directory.GetDirectoryRoot(System.String)">
<summary>在被受信任的应用程序调用时，返回指定路径的卷信息、根信息或者同时返回这两者。</summary>
<returns>包含指定路径的卷信息、根信息或同时包括这两者的字符串。</returns>
<param name="path">一个文件或目录的路径。 </param>
<exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个无效字符。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
    </member>
    <member name="M:System.IO.Directory.GetLastAccessTime(System.String)">
<summary>在被受信任的应用程序调用时，返回上次访问指定文件或目录的日期及时间。</summary>
<returns>一个 <see cref="T:System.DateTime"/> 结构，它设置为上次访问指定文件或目录的日期和时间。该值用本地时间表示。</returns>
<param name="path">要获取其访问日期和时间信息的文件或目录。 </param>
<exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个无效字符。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
<exception cref="T:System.NotSupportedException"><paramref name="path"/> 参数的格式无效。 </exception>
    </member>
    <member name="M:System.IO.Directory.GetLastWriteTime(System.String)">
<summary>在被受信任的应用程序调用时，返回上次写入指定文件或目录的日期及时间。</summary>
<returns>一个 <see cref="T:System.DateTime"/> 结构，它设置为上次写入指定文件或目录的日期和时间。该值用本地时间表示。</returns>
<param name="path">要获取其修改日期和时间信息的文件或目录。 </param>
<exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个无效字符。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
    </member>
    <member name="M:System.IO.Directory.Move(System.String,System.String)">
<summary>在被受信任的应用程序调用时，将文件或目录及其内容移到一个新位置。</summary>
<param name="sourceDirName">要移动的文件或目录的路径。 </param>
<param name="destDirName">指向 <paramref name="sourceDirName"/> 的新位置的路径。如果 <paramref name="sourceDirName"/> 是一个文件，则 <paramref name="destDirName"/> 也必须是一个文件名。</param>
<exception cref="T:System.IO.IOException">试图将一个目录移到不同的卷。-或- <paramref name="destDirName"/> 已存在。-或- <paramref name="sourceDirName"/> 和 <paramref name="destDirName"/> 参数引用相同的文件或目录。 </exception>
<exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="sourceDirName"/> or <paramref name="destDirName"/> 是一个零长度字符串，仅包含空白或者包含一个或多个无效字符。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="sourceDirName"/> 或 <paramref name="destDirName"/> 为 null。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">由 <paramref name="sourceDirName"/> 指定的路径无效（例如，它位于未映射的驱动器上）。 </exception>
    </member>
    <member name="M:System.IO.Directory.SetCurrentDirectory(System.String)">
<summary>[SECURITY CRITICAL] 将应用程序的当前工作目录设置为指定的目录。</summary>
<param name="path">设置为当前工作目录的路径。 </param>
    </member>
    <member name="T:System.IO.DirectoryInfo">
<summary>公开用于创建、移动和枚举目录和子目录的实例方法。无法继承此类。</summary>
    </member>
    <member name="M:System.IO.DirectoryInfo.#ctor(System.String)">
<summary>在被受信任的应用程序调用时，初始化 <see cref="T:System.IO.DirectoryInfo"/> 类的新实例。 .</summary>
<param name="path">一个字符串，它指定要在其中创建 DirectoryInfo 的路径。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 包含无效字符，如 "、&lt;、&gt; 或 |。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。指定的路径、文件名或两者都太长。</exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.Create">
<summary>在被受信任的应用程序调用时，创建一个目录。</summary>
<exception cref="T:System.IO.IOException">不能创建该目录。 </exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.CreateSubdirectory(System.String)">
<summary>在被受信任的应用程序调用时，在指定路径中创建一个或多个子目录。 </summary>
<returns>在 <paramref name="path"/> 中指定的最后一个目录。</returns>
<param name="path">指定的路径。它不能是另一个磁盘卷或“统一命名约定”(UNC) 名称。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 未指定有效文件路径或包含无效的 DirectoryInfo 字符。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，比如在未映射的驱动器上。 </exception>
<exception cref="T:System.IO.IOException">不能创建子目录。-或- 已有文件或目录具有 <paramref name="path"/> 所指定的名称。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。指定的路径、文件名或两者都太长。</exception>
<exception cref="T:System.Security.SecurityException">调用方不具有创建目录的代码访问权限。-或- 对于返回的 <see cref="T:System.IO.DirectoryInfo"/> 对象所描述的目录，调用方不具有代码读取访问权限。这可能在 <paramref name="path"/> 参数描述现有目录时发生。</exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 包含一个冒号字符 (:)，该冒号字符不是驱动器标签（“C:\”）的一部分。</exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.Delete">
<summary>在被受信任的应用程序调用时，如果此 <see cref="T:System.IO.DirectoryInfo"/> 为空，则删除它。</summary>
<exception cref="T:System.IO.IOException">目录不为空。-或- 该目录为应用程序的当前工作目录。-或- 对于目录有打开句柄，并且操作系统是 Windows XP 或更早版本。此打开句柄可能是由于枚举目录和文件导致的。</exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">此 <see cref="T:System.IO.DirectoryInfo"/> 对象描述的目录不存在或找不到。</exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.Delete(System.Boolean)">
<summary>在被受信任的应用程序调用时，删除 <see cref="T:System.IO.DirectoryInfo"/> 的此实例，并指定是否要删除子目录和文件。</summary>
<param name="recursive">若为 true，则删除此目录、其子目录以及所有文件；否则为 false。 </param>
<exception cref="T:System.IO.IOException">该目录是只读的。-或- 此目录包含一个或多个文件或子目录，且 <paramref name="recursive"/> 为 false。-或- 该目录为应用程序的当前工作目录。-或- 对于目录或其文件之一有打开句柄，并且操作系统是 Windows XP 或更早版本。此打开句柄可能是由于枚举目录和文件导致的。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.EnumerateDirectories">
<summary>在被受信任的应用程序调用时，返回当前目录中目录信息的可枚举集合。</summary>
<returns>当前目录中的目录的可枚举集合。</returns>
<exception cref="T:System.IO.DirectoryNotFoundException">封装在 <see cref="T:System.IO.DirectoryInfo"/> 对象中的路径无效（例如，在未映射的驱动器上）。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.EnumerateDirectories(System.String)">
<summary>在被受信任的应用程序调用时，返回与指定的搜索模式匹配的目录信息的可枚举集合。</summary>
<returns>与 <paramref name="searchPattern"/> 匹配的目录的可枚举集合。</returns>
<param name="searchPattern">搜索字符串。默认模式为“*”，该模式返回所有目录。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="searchPattern"/> 为 null。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">封装在 <see cref="T:System.IO.DirectoryInfo"/> 对象中的路径无效（例如，在未映射的驱动器上）。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)">
<summary>在被受信任的应用程序调用时，返回与指定的搜索模式匹配的目录信息的可枚举集合，并搜索子目录选项。 </summary>
<returns>与 <paramref name="searchPattern"/> 和 <paramref name="searchOption"/> 匹配的目录的可枚举集合。</returns>
<param name="searchPattern">搜索字符串。默认模式为“*”，该模式返回所有目录。</param>
<param name="searchOption">用于指定搜索操作是应仅包含当前目录还是应包含所有子目录的枚举值之一。默认值为 <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="searchPattern"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="searchOption"/> 不是有效的 <see cref="T:System.IO.SearchOption"/> 值。</exception>
<exception cref="T:System.IO.DirectoryNotFoundException">封装在 <see cref="T:System.IO.DirectoryInfo"/> 对象中的路径无效（例如，在未映射的驱动器上）。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.EnumerateFiles">
<summary>在被受信任的应用程序调用时，返回当前目录中文件信息的可枚举集合。</summary>
<returns>当前目录中的文件的可枚举集合。</returns>
<exception cref="T:System.IO.DirectoryNotFoundException">封装在 <see cref="T:System.IO.FileInfo"/> 对象中的路径无效（例如，在未映射的驱动器上）。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.EnumerateFiles(System.String)">
<summary>在被受信任的应用程序调用时，返回与搜索模式匹配的文件信息的可枚举集合。</summary>
<returns>与 <paramref name="searchPattern"/> 匹配的文件的可枚举集合。</returns>
<param name="searchPattern">搜索字符串。默认模式为“*”，该模式返回所有文件。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="searchPattern"/> 为 null。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">封装在 <see cref="T:System.IO.FileInfo"/> 对象中的路径无效（例如，在未映射的驱动器上）。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)">
<summary>在被受信任的应用程序调用时，返回与指定的搜索模式匹配的文件信息的可枚举集合，并搜索子目录选项。</summary>
<returns>与 <paramref name="searchPattern"/> 和 <paramref name="searchOption"/> 匹配的文件的可枚举集合。</returns>
<param name="searchPattern">搜索字符串。默认模式为“*”，该模式返回所有文件。</param>
<param name="searchOption">用于指定搜索操作是应仅包含当前目录还是应包含所有子目录的枚举值之一。默认值为 <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="searchPattern"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="searchOption"/> 不是有效的 <see cref="T:System.IO.SearchOption"/> 值。</exception>
<exception cref="T:System.IO.DirectoryNotFoundException">封装在 <see cref="T:System.IO.FileInfo"/> 对象中的路径无效（例如，在未映射的驱动器上）。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.EnumerateFileSystemInfos">
<summary>在被受信任的应用程序调用时，返回当前目录中文件系统信息的可枚举集合。</summary>
<returns>当前目录中的文件系统信息的可枚举集合。 </returns>
<exception cref="T:System.IO.DirectoryNotFoundException">封装在 <see cref="T:System.IO.FileSystemInfo"/> 对象中的路径无效（例如，在未映射的驱动器上）。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)">
<summary>在被受信任的应用程序调用时，返回与指定的搜索模式匹配的文件系统信息的可枚举集合。</summary>
<returns>与 <paramref name="searchPattern"/> 匹配的文件系统信息对象的可枚举集合。</returns>
<param name="searchPattern">搜索字符串。默认模式为“*”，该模式返回所有文件和目录。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="searchPattern"/> 为 null。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">封装在 <see cref="T:System.IO.FileSystemInfo"/> 对象中的路径无效（例如，在未映射的驱动器上）。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)">
<summary>在被受信任的应用程序调用时，返回与指定的搜索模式匹配的文件系统信息的可枚举集合，并搜索子目录选项。</summary>
<returns>与 <paramref name="searchPattern"/> 和 <paramref name="searchOption"/> 匹配的文件系统信息对象的可枚举集合。</returns>
<param name="searchPattern">搜索字符串。默认模式为“*”，该模式返回所有文件或目录。</param>
<param name="searchOption">用于指定搜索操作是应仅包含当前目录还是应包含所有子目录的枚举值之一。默认值为 <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="searchPattern"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="searchOption"/> 不是有效的 <see cref="T:System.IO.SearchOption"/> 值。</exception>
<exception cref="T:System.IO.DirectoryNotFoundException">封装在 <see cref="T:System.IO.FileSystemInfo"/> 对象中的路径无效（例如，在未映射的驱动器上）。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
    </member>
    <member name="P:System.IO.DirectoryInfo.Exists">
<summary>获取指示目录是否存在的值。</summary>
<returns>如果目录存在，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.IO.DirectoryInfo.MoveTo(System.String)">
<summary>在被受信任的应用程序调用时，将 <see cref="T:System.IO.DirectoryInfo"/> 实例及其内容移到新路径。</summary>
<param name="destDirName">要将此目录移动到的目标位置的名称和路径。目标不能是另一个具有相同名称的磁盘卷或目录。它可以是您要将此目录作为子目录添加到其中的一个现有目录。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="destDirName"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="destDirName"/> 是空字符串 ("")。 </exception>
<exception cref="T:System.IO.IOException">试图将一个目录移到不同的卷。-或- <paramref name="destDirName"/> 已存在。-或- 您无权访问此路径。-或- 被移动的目录与目标目录同名。</exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">找不到此目标目录。</exception>
    </member>
    <member name="P:System.IO.DirectoryInfo.Name">
<summary>获取此 <see cref="T:System.IO.DirectoryInfo"/> 实例的名称。</summary>
<returns>目录名称。</returns>
    </member>
    <member name="P:System.IO.DirectoryInfo.Parent">
<summary>在被受信任的应用程序调用时，获取指定子目录的父目录。</summary>
<returns>父目录，或者如果路径为 null 或如果文件路径表示根（如“\”、“C:”或 *“\\server\share”），则为 null。</returns>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
    </member>
    <member name="P:System.IO.DirectoryInfo.Root">
<summary>在被受信任的应用程序调用时，获取路径的根部分。</summary>
<returns>代表路径的根的 <see cref="T:System.IO.DirectoryInfo"/> 对象。</returns>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.ToString">
<summary>返回用户所传递的原始路径。</summary>
<returns>返回用户所传递的原始路径。</returns>
    </member>
    <member name="T:System.IO.DirectoryNotFoundException">
<summary>当找不到文件或目录的一部分时所引发的异常。</summary>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor">
<summary>初始化 <see cref="T:System.IO.DirectoryNotFoundException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor(System.String)">
<summary>初始化 <see cref="T:System.IO.DirectoryNotFoundException"/> 类的新实例，将其消息字符串设置为 <paramref name="message"/>。</summary>
<param name="message">描述该错误的 <see cref="T:System.String"/>。<paramref name="message"/> 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。 </param>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IO.DirectoryNotFoundException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="T:System.IO.EndOfStreamException">
<summary>读操作试图超出流的末尾时引发的异常。</summary>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor">
<summary>初始化 <see cref="T:System.IO.EndOfStreamException"/> 类的新实例，将其消息字符串设置为系统提供的消息。</summary>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.String)">
<summary>初始化 <see cref="T:System.IO.EndOfStreamException"/> 类的新实例，消息字符串设置为 <paramref name="message"/>，HRESULT 设置为 COR_E_ENDOFSTREAM。</summary>
<param name="message">描述错误的字符串。<paramref name="message"/> 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。 </param>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IO.EndOfStreamException"/> 类的新实例。</summary>
<param name="message">描述错误的字符串。<paramref name="message"/> 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。 </param>
<param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="T:System.IO.File">
<summary>提供用于创建、复制、删除、移动和打开文件的静态方法，并协助创建 <see cref="T:System.IO.FileStream"/> 对象。</summary>
    </member>
    <member name="M:System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>在被受信任的应用程序调用时，向文件中追加行，然后关闭该文件。</summary>
<param name="path">要向其中追加行的文件。如果文件尚不存在，则创建该文件。</param>
<param name="contents">要追加到文件中的文本行。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 方法定义的一个或多个无效字符。</exception>
<exception cref="T:System.ArgumentNullException"><paramref name=" path "/> 或 <paramref name="contents"/> 为 null。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
<paramref name="path"/> 无效（例如，在未映射的驱动器上）。</exception>
<exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="path"/> 指定的文件。</exception>
<exception cref="T:System.IO.IOException">打开文件时发生 I/O 错误。</exception>
      <exception cref="T:System.IO.PathTooLongException">
<paramref name="path"/> 超过了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 的格式无效。</exception>
<exception cref="T:System.Security.SecurityException">调用方没有写入到文件的权限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">
<paramref name="path"/> 指定了一个只读文件。-或- 在当前平台上不支持此操作。-或- <paramref name="path"/> 是目录。-或- 调用方没有所要求的权限。 </exception>
    </member>
    <member name="M:System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
<summary>在被受信任的应用程序调用时，使用指定编码向文件中追加行，然后关闭该文件。</summary>
<param name="path">要向其中追加行的文件。</param>
<param name="contents">要追加到文件中的文本行。</param>
<param name="encoding">要使用的字符编码。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 方法定义的一个或多个无效字符。</exception>
<exception cref="T:System.ArgumentNullException"><paramref name=" path"/>、<paramref name="contents"/> 或 <paramref name="encoding"/> 为 null。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
<paramref name="path"/> 无效（例如，在未映射的驱动器上）。</exception>
<exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="path"/> 指定的文件。</exception>
<exception cref="T:System.IO.IOException">打开文件时发生 I/O 错误。</exception>
      <exception cref="T:System.IO.PathTooLongException">
<paramref name="path"/> 超过了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 的格式无效。</exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">
<paramref name="path"/> 指定了一个只读文件。-或- 在当前平台上不支持此操作。-或- <paramref name="path"/> 是目录。-或- 调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.IO.File.AppendAllText(System.String,System.String)">
<summary>在被受信任的应用程序调用时，将指定的字符串追加到该文件，然后关闭该文件。如果文件不存在，此方法创建一个文件，将指定的字符串写入文件，然后关闭该文件。</summary>
<param name="path">要将指定的字符串追加到的文件。 </param>
<param name="contents">要追加到文件中的字符串。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。 </exception>
<exception cref="T:System.IO.IOException">打开文件时发生 I/O 错误。 </exception>
      <exception cref="T:System.UnauthorizedAccessException">
<paramref name="path"/> 指定了一个只读文件。-或- 在当前平台上不支持此操作。-或- <paramref name="path"/> 指定了一个目录。-或- 调用方没有所要求的权限。 </exception>
<exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="path"/> 中指定的文件。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 的格式无效。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
    </member>
    <member name="M:System.IO.File.AppendAllText(System.String,System.String,System.Text.Encoding)">
<summary>在被受信任的应用程序调用时，将指定的字符串追加到文件中，如果文件还不存在则创建该文件。</summary>
<param name="path">要将指定的字符串追加到的文件。 </param>
<param name="contents">要追加到文件中的字符串。 </param>
<param name="encoding">要使用的字符编码。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。 </exception>
<exception cref="T:System.IO.IOException">打开文件时发生 I/O 错误。 </exception>
      <exception cref="T:System.UnauthorizedAccessException">
<paramref name="path"/> 指定了一个只读文件。-或- 在当前平台上不支持此操作。-或- <paramref name="path"/> 指定了一个目录。-或- 调用方没有所要求的权限。 </exception>
<exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="path"/> 中指定的文件。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 的格式无效。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
    </member>
    <member name="M:System.IO.File.AppendText(System.String)">
<summary>在被受信任的应用程序调用时，创建一个将 UTF-8 编码文本追加到现有文件中的 <see cref="T:System.IO.StreamWriter"/>。</summary>
<returns>一个 StreamWriter，它将 UTF-8 编码文本追加到现有文件。</returns>
<param name="path">要向其中追加内容的文件的路径。 </param>
<exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 的格式无效。 </exception>
    </member>
    <member name="M:System.IO.File.Copy(System.String,System.String)">
<summary>在被受信任的应用程序调用时，将现有文件复制到新文件。不允许覆盖同名的文件。</summary>
<param name="sourceFileName">要复制的文件。 </param>
<param name="destFileName">目标文件的名称。它不能是一个目录或现有文件。 </param>
<exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="sourceFileName"/> 或 <paramref name="destFileName"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。-或- <paramref name="sourceFileName"/> 或 <paramref name="destFileName"/> 指定一个目录。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="sourceFileName"/> 或 <paramref name="destFileName"/> 为 null。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">在 <paramref name="sourceFileName"/> 或 <paramref name="destFileName"/> 中指定的路径无效（例如，它位于未映射的驱动器上）。 </exception>
      <exception cref="T:System.IO.FileNotFoundException">
未找到 <paramref name="sourceFileName"/>。 </exception>
      <exception cref="T:System.IO.IOException">
<paramref name="destFileName"/> 存在。-或- 出现 I/O 错误。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="sourceFileName"/> 或 <paramref name="destFileName"/> 的格式无效。 </exception>
    </member>
    <member name="M:System.IO.File.Copy(System.String,System.String,System.Boolean)">
<summary>在被受信任的应用程序调用时，将现有文件复制到新文件。允许覆盖同名的文件。</summary>
<param name="sourceFileName">要复制的文件。 </param>
<param name="destFileName">目标文件的名称。不能是目录。 </param>
<param name="overwrite">如果可以覆盖目标文件，则为 true；否则为 false。 </param>
<exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="sourceFileName"/> 或 <paramref name="destFileName"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。-或- <paramref name="sourceFileName"/> 或 <paramref name="destFileName"/> 指定一个目录。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="sourceFileName"/> 或 <paramref name="destFileName"/> 为 null。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">在 <paramref name="sourceFileName"/> 或 <paramref name="destFileName"/> 中指定的路径无效（例如，它位于未映射的驱动器上）。 </exception>
      <exception cref="T:System.IO.FileNotFoundException">
未找到 <paramref name="sourceFileName"/>。 </exception>
      <exception cref="T:System.IO.IOException">
<paramref name="destFileName"/> 为只读或 <paramref name="destFileName"/> 存在并且 <paramref name="overwrite"/> 为 false。-或- 出现 I/O 错误。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="sourceFileName"/> 或 <paramref name="destFileName"/> 的格式无效。 </exception>
    </member>
    <member name="M:System.IO.File.Create(System.String)">
<summary>在被受信任的应用程序调用时，在指定的路径下创建一个文件或者覆盖其中的文件。</summary>
<returns>一个 <see cref="T:System.IO.FileStream"/>，它提供对 <paramref name="path"/> 中指定的文件的读/写访问。</returns>
<param name="path">要创建的文件的路径及名称。 </param>
<exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。-或- <paramref name="path"/> 指定了一个只读文件。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。 </exception>
<exception cref="T:System.IO.IOException">创建文件时发生 I/O 错误。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 的格式无效。 </exception>
    </member>
    <member name="M:System.IO.File.Create(System.String,System.Int32)">
<summary>在被受信任的应用程序调用时，创建或者覆盖指定文件。</summary>
<returns>一个具有指定缓冲大小的 <see cref="T:System.IO.FileStream"/>，它提供对 <paramref name="path"/> 中指定的文件的读/写访问。</returns>
<param name="path">文件名。 </param>
<param name="bufferSize">用于读取和写入文件的已放入缓冲区的字节数。 </param>
<exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。-或- <paramref name="path"/> 指定了一个只读文件。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。 </exception>
<exception cref="T:System.IO.IOException">创建文件时发生 I/O 错误。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 的格式无效。 </exception>
    </member>
    <member name="M:System.IO.File.CreateText(System.String)">
<summary>在被受信任的应用程序调用时，创建或者打开一个要向其中写入 UTF-8 编码文本的文件。</summary>
<returns>一个 <see cref="T:System.IO.StreamWriter"/>，它使用 UTF-8 编码写入指定的文件。</returns>
<param name="path">要打开以进行写入的文件。 </param>
<exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 的格式无效。 </exception>
    </member>
    <member name="M:System.IO.File.Delete(System.String)">
<summary>在被受信任的应用程序调用时，删除指定文件。如果指定的文件不存在，则不引发异常。</summary>
<param name="path">要删除的文件的名称。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。 </exception>
<exception cref="T:System.IO.IOException">指定的文件正在使用中。-或- 对于文件有打开句柄，并且操作系统是 Windows XP 或更早版本。此打开句柄可能是由于枚举目录和文件导致的。</exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 的格式无效。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
<exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。-或- <paramref name="path"/> 是一个目录。-或- <paramref name="path"/> 指定了一个只读文件。 </exception>
    </member>
    <member name="M:System.IO.File.Exists(System.String)">
<summary>在被受信任的应用程序调用时，确定指定的文件是否存在。</summary>
<returns>如果调用方具有要求的权限并且 <paramref name="path"/> 包含现有文件的名称，则为 true；否则为 false。如果 <paramref name="path"/> 为 null、无效路径或零长度字符串，则此方法也将返回 false。如果调用方不具有读取指定文件所需的足够权限，则不引发异常并且该方法返回 false，这与 <paramref name="path"/> 是否存在无关。</returns>
<param name="path">要检查的文件。 </param>
    </member>
    <member name="M:System.IO.File.GetAttributes(System.String)">
<summary>获取在此路径上的文件的 <see cref="T:System.IO.FileAttributes"/>。</summary>
<returns>路径上文件的 <see cref="T:System.IO.FileAttributes"/>。</returns>
<param name="path">该文件的路径。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 为空，仅包含空白，或包含无效字符。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 的格式无效。 </exception>
      <exception cref="T:System.IO.FileNotFoundException">
<paramref name="path"/> 表示一个文件且它是无效的，例如，位于未映射的驱动器上或无法找到文件。 </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
<paramref name="path"/> 表示一个目录且它是无效的，例如，位于未映射的驱动器上或无法找到目录。</exception>
    </member>
    <member name="M:System.IO.File.GetCreationTime(System.String)">
<summary>在被受信任的应用程序调用时，返回指定的文件或目录的创建日期及时间。</summary>
<returns>一个 <see cref="T:System.DateTime"/> 结构，它被设置为指定文件或目录的创建日期和时间。该值用本地时间表示。</returns>
<param name="path">要获取其创建日期和时间信息的文件或目录。 </param>
<exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 的格式无效。 </exception>
    </member>
    <member name="M:System.IO.File.GetLastAccessTime(System.String)">
<summary>在被受信任的应用程序调用时，返回上次访问指定文件或目录的日期及时间。</summary>
<returns>一个 <see cref="T:System.DateTime"/> 结构，它被设置为上次访问指定文件或目录的日期和时间。该值用本地时间表示。</returns>
<param name="path">要获取其访问日期和时间信息的文件或目录。 </param>
<exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 的格式无效。 </exception>
    </member>
    <member name="M:System.IO.File.GetLastWriteTime(System.String)">
<summary>在被受信任的应用程序调用时，返回上次写入指定文件或目录的日期及时间。</summary>
<returns>一个 <see cref="T:System.DateTime"/> 结构，它被设置为上次写入指定文件或目录的日期和时间。该值用本地时间表示。</returns>
<param name="path">要获取其写入日期和时间信息的文件或目录。 </param>
<exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 的格式无效。 </exception>
    </member>
    <member name="M:System.IO.File.Move(System.String,System.String)">
<summary>在被受信任的应用程序调用时，将指定文件移到新位置，并提供用来指定新文件名的选项。</summary>
<param name="sourceFileName">要移动的文件的名称。 </param>
<param name="destFileName">文件的新路径。 </param>
<exception cref="T:System.IO.IOException">目标文件已经存在。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="sourceFileName"/> 或 <paramref name="destFileName"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="sourceFileName"/> 或 <paramref name="destFileName"/> 是零长度字符串、只包含空白或者包含在 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 中定义的无效字符。 </exception>
<exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。 </exception>
      <exception cref="T:System.IO.FileNotFoundException">
未找到 <paramref name="sourceFileName"/>。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="sourceFileName"/> 或 <paramref name="destFileName"/> 中指定的路径无效（例如，它位于未映射的驱动器上）。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="sourceFileName"/> 或 <paramref name="destFileName"/> 的格式无效。 </exception>
    </member>
    <member name="M:System.IO.File.Open(System.String,System.IO.FileMode)">
<summary>在被受信任的应用程序调用时，使用读/写访问权限打开指定路径上的 <see cref="T:System.IO.FileStream"/>。</summary>
<returns>以指定模式打开的指定路径上的 <see cref="T:System.IO.FileStream"/>，具有读/写访问权限并且不共享。</returns>
<param name="path">要打开的文件。 </param>
<param name="mode"><see cref="T:System.IO.FileMode"/> 值，用于指定在文件不存在时是否创建该文件，并确定是保留还是覆盖现有文件的内容。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。 </exception>
<exception cref="T:System.IO.IOException">打开文件时发生 I/O 错误。 </exception>
      <exception cref="T:System.UnauthorizedAccessException">
<paramref name="path"/> 指定了一个只读文件。-或- 在当前平台上不支持此操作。-或- <paramref name="path"/> 指定了一个目录。-或- 调用方没有所要求的权限。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="mode"/> 指定了一个无效值。 </exception>
<exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="path"/> 中指定的文件。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 的格式无效。 </exception>
    </member>
    <member name="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
<summary>在被受信任的应用程序调用时，使用指定的模式和访问权限打开指定路径下的 <see cref="T:System.IO.FileStream"/>。</summary>
<returns>一个非共享的 <see cref="T:System.IO.FileStream"/>，它提供对指定文件的访问，并且具有指定的模式和访问权限。</returns>
<param name="path">要打开的文件。 </param>
<param name="mode"><see cref="T:System.IO.FileMode"/> 值，用于指定在文件不存在时是否创建该文件，并确定是保留还是覆盖现有文件的内容。 </param>
<param name="access"><see cref="T:System.IO.FileAccess"/> 值，指定可以对文件执行的操作。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。-或- <paramref name="access"/> 指定 Read 并且 <paramref name="mode"/> 指定 Create、CreateNew、Truncate 或 Append。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。 </exception>
<exception cref="T:System.IO.IOException">打开文件时发生 I/O 错误。 </exception>
      <exception cref="T:System.UnauthorizedAccessException">
<paramref name="path"/> 指定了一个只读文件，而 <paramref name="access"/> 不为 Read。-或- <paramref name="path"/> 指定了一个目录。-或- 调用方没有所要求的权限。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="mode"/> 或 <paramref name="access"/> 指定了一个无效值。 </exception>
<exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="path"/> 中指定的文件。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 的格式无效。 </exception>
    </member>
    <member name="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
<summary>在被受信任的应用程序调用时，用读访问权限、写访问权限或者读/写访问权限以及指定的共享选项以指定模式打开指定路径下的 <see cref="T:System.IO.FileStream"/>。</summary>
<returns>指定路径上的 <see cref="T:System.IO.FileStream"/>，具有指定的读、写或读/写访问模式以及指定的共享选项。</returns>
<param name="path">要打开的文件。 </param>
<param name="mode"><see cref="T:System.IO.FileMode"/> 值，用于指定在文件不存在时是否创建该文件，并确定是保留还是覆盖现有文件的内容。 </param>
<param name="access"><see cref="T:System.IO.FileAccess"/> 值，指定可以对文件执行的操作。 </param>
<param name="share"><see cref="T:System.IO.FileShare"/> 值，它指定其他线程对该文件所具有的访问类型。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。-或- <paramref name="access"/> 指定 Read 并且 <paramref name="mode"/> 指定 Create、CreateNew、Truncate 或 Append。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。 </exception>
<exception cref="T:System.IO.IOException">打开文件时发生 I/O 错误。 </exception>
      <exception cref="T:System.UnauthorizedAccessException">
<paramref name="path"/> 指定了一个只读文件，而 <paramref name="access"/> 不为 Read。-或- <paramref name="path"/> 指定了一个目录。-或- 调用方没有所要求的权限。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="mode"/>、<paramref name="access"/> 或 <paramref name="share"/> 指定了一个无效值。 </exception>
<exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="path"/> 中指定的文件。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 的格式无效。 </exception>
    </member>
    <member name="M:System.IO.File.OpenRead(System.String)">
<summary>在被受信任的应用程序调用时，打开现有文件以进行读取。</summary>
<returns>指定路径上的只读 <see cref="T:System.IO.FileStream"/>。</returns>
<param name="path">要打开以进行读取的文件。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。 </exception>
      <exception cref="T:System.UnauthorizedAccessException">
<paramref name="path"/> 指定了一个目录。-或- 调用方没有所要求的权限。 </exception>
<exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="path"/> 中指定的文件。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 的格式无效。 </exception>
    </member>
    <member name="M:System.IO.File.OpenText(System.String)">
<summary>在被受信任的应用程序调用时，打开一个现有的 UTF-8 编码的文本文件以进行读取。</summary>
<returns>指定路径上的 <see cref="T:System.IO.StreamReader"/>。</returns>
<param name="path">要打开以进行读取的文件。 </param>
<exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。 </exception>
<exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="path"/> 中指定的文件。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 的格式无效。 </exception>
    </member>
    <member name="M:System.IO.File.OpenWrite(System.String)">
<summary>在被受信任的应用程序调用时，打开现有文件以进行写入。</summary>
<returns>具有 <see cref="F:System.IO.FileAccess.Write"/> 访问权限的指定路径上的非共享 <see cref="T:System.IO.FileStream"/> 对象。</returns>
<param name="path">要打开以进行写入的文件。 </param>
<exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。-或- <paramref name="path"/> 指定了一个只读文件或目录。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。 </exception>
<exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="path"/> 中指定的文件。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 的格式无效。 </exception>
    </member>
    <member name="M:System.IO.File.ReadAllBytes(System.String)">
<summary>在被受信任的应用程序调用时，打开一个二进制文件，将该文件的内容读入一个字节数组中，然后关闭该文件。</summary>
<returns>包含文件内容的字节数组。</returns>
<param name="path">要打开以进行读取的文件。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。 </exception>
<exception cref="T:System.IO.IOException">打开文件时发生 I/O 错误。 </exception>
<exception cref="T:System.UnauthorizedAccessException">在当前平台上不支持此操作。-或- <paramref name="path"/> 指定了一个目录。-或- 调用方没有所要求的权限。 </exception>
<exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="path"/> 中指定的文件。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 的格式无效。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
    </member>
    <member name="M:System.IO.File.ReadAllText(System.String)">
<summary>在被受信任的应用程序调用时，打开一个文本文件，读取该文件中的所有行，然后关闭该文件。</summary>
<returns>包含文件所有行的字符串。</returns>
<param name="path">要打开以进行读取的文件。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。 </exception>
<exception cref="T:System.IO.IOException">打开文件时发生 I/O 错误。 </exception>
      <exception cref="T:System.UnauthorizedAccessException">
<paramref name="path"/> 指定了一个只读文件。-或- 在当前平台上不支持此操作。-或- <paramref name="path"/> 指定了一个目录。-或- 调用方没有所要求的权限。 </exception>
<exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="path"/> 中指定的文件。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 的格式无效。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
    </member>
    <member name="M:System.IO.File.ReadAllText(System.String,System.Text.Encoding)">
<summary>在被受信任的应用程序调用时，打开一个文件，读取该文件中应用了指定编码的所有行，然后关闭该文件。</summary>
<returns>包含文件所有行的字符串。</returns>
<param name="path">要打开以进行读取的文件。 </param>
<param name="encoding">应用到文件内容的编码。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。 </exception>
<exception cref="T:System.IO.IOException">打开文件时发生 I/O 错误。 </exception>
      <exception cref="T:System.UnauthorizedAccessException">
<paramref name="path"/> 指定了一个只读文件。-或- 在当前平台上不支持此操作。-或- <paramref name="path"/> 指定了一个目录。-或- 调用方没有所要求的权限。 </exception>
<exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="path"/> 中指定的文件。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 的格式无效。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
    </member>
    <member name="M:System.IO.File.ReadLines(System.String)">
<summary>在被受信任的应用程序调用时，读取文件中的行。</summary>
<returns>文件的文本行。</returns>
<param name="path">要读取的文件。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 方法定义的一个或多个无效字符。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
<paramref name="path"/> 无效（例如，在未映射的驱动器上）。</exception>
<exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="path"/> 指定的文件。</exception>
<exception cref="T:System.IO.IOException">打开文件时发生 I/O 错误。</exception>
      <exception cref="T:System.IO.PathTooLongException">
<paramref name="path"/> 超过了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">
<paramref name="path"/> 指定了一个只读文件。-或- 在当前平台上不支持此操作。-或- <paramref name="path"/> 是目录。-或- 调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.IO.File.ReadLines(System.String,System.Text.Encoding)">
<summary>在被受信任的应用程序调用时，读取文件中具有指定编码的行。</summary>
<returns>文件的文本行。</returns>
<param name="path">要读取的文件。</param>
<param name="encoding">应用到文件内容的编码。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 方法中定义的一个或多个无效字符。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
<paramref name="path"/> 无效（例如，在未映射的驱动器上）。</exception>
<exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="path"/> 指定的文件。</exception>
<exception cref="T:System.IO.IOException">打开文件时发生 I/O 错误。</exception>
      <exception cref="T:System.IO.PathTooLongException">
<paramref name="path"/> 超过了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">
<paramref name="path"/> 指定了一个只读文件。-或- 在当前平台上不支持此操作。-或- <paramref name="path"/> 是目录。-或- 调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)">
<summary>[SECURITY CRITICAL] 设置指定路径上文件的指定的 <see cref="T:System.IO.FileAttributes"/>。</summary>
<param name="path">该文件的路径。 </param>
<param name="fileAttributes">枚举值的按位组合。 </param>
    </member>
    <member name="M:System.IO.File.WriteAllBytes(System.String,System.Byte[])">
<summary>在被受信任的应用程序调用时，创建一个新文件，将指定的字节数组写入该文件，然后关闭该文件。如果目标文件已存在，则覆盖该文件。</summary>
<param name="path">要写入的文件。 </param>
<param name="bytes">要写入文件的字节。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null 或字节数组为空。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。 </exception>
<exception cref="T:System.IO.IOException">打开文件时发生 I/O 错误。 </exception>
      <exception cref="T:System.UnauthorizedAccessException">
<paramref name="path"/> 指定了一个只读文件。-或- 在当前平台上不支持此操作。-或- <paramref name="path"/> 指定了一个目录。-或- 调用方没有所要求的权限。 </exception>
<exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="path"/> 中指定的文件。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 的格式无效。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
    </member>
    <member name="M:System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>在被受信任的应用程序调用时，创建一个新文件，将字符串集合写入该文件，然后关闭该文件。</summary>
<param name="path">要写入的文件。</param>
<param name="contents">要写入到文件中的文本行。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 方法定义的一个或多个无效字符。</exception>
<exception cref="T:System.ArgumentNullException"><paramref name=" path "/> 或 <paramref name="contents"/> 为 null。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
<paramref name="path"/> 无效（例如，在未映射的驱动器上）。</exception>
<exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="path"/> 指定的文件。</exception>
<exception cref="T:System.IO.IOException">打开文件时发生 I/O 错误。</exception>
      <exception cref="T:System.IO.PathTooLongException">
<paramref name="path"/> 超过了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 的格式无效。</exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">
<paramref name="path"/> 指定了一个只读文件。-或- 在当前平台上不支持此操作。-或- <paramref name="path"/> 是目录。-或- 调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
<summary>在被受信任的应用程序调用时，使用指定编码创建一个新文件，将字符串集合写入该文件，然后关闭该文件。</summary>
<param name="path">要写入的文件。</param>
<param name="contents">要写入到文件中的文本行。</param>
<param name="encoding">要使用的字符编码。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 方法定义的一个或多个无效字符。</exception>
<exception cref="T:System.ArgumentNullException"><paramref name=" path"/>、<paramref name=" contents"/> 或 <paramref name="encoding"/> 为 null。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
<paramref name="path"/> 无效（例如，在未映射的驱动器上）。</exception>
<exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="path"/> 指定的文件。</exception>
<exception cref="T:System.IO.IOException">打开文件时发生 I/O 错误。</exception>
      <exception cref="T:System.IO.PathTooLongException">
<paramref name="path"/> 超过了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 的格式无效。</exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">
<paramref name="path"/> 指定了一个只读文件。-或- 在当前平台上不支持此操作。-或- <paramref name="path"/> 是目录。-或- 调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.IO.File.WriteAllText(System.String,System.String)">
<summary>在被受信任的应用程序调用时，创建一个新文件，将指定的字符串写入该文件，然后关闭该文件。如果目标文件已存在，则覆盖该文件。</summary>
<param name="path">要写入的文件。 </param>
<param name="contents">要写入文件的字符串。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。 </exception>
<exception cref="T:System.IO.IOException">打开文件时发生 I/O 错误。 </exception>
      <exception cref="T:System.UnauthorizedAccessException">
<paramref name="path"/> 指定了一个只读文件。-或- 在当前平台上不支持此操作。-或- <paramref name="path"/> 指定了一个目录。-或- 调用方没有所要求的权限。 </exception>
<exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="path"/> 中指定的文件。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 的格式无效。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
    </member>
    <member name="M:System.IO.File.WriteAllText(System.String,System.String,System.Text.Encoding)">
<summary>在被受信任的应用程序调用时，创建一个新文件，使用指定编码将指定的字符串写入该文件，然后关闭该文件。如果目标文件已存在，则覆盖该文件。</summary>
<param name="path">要写入的文件。 </param>
<param name="contents">要写入文件的字符串。 </param>
<param name="encoding">一个 <see cref="T:System.Text.Encoding"/> 对象，表示应用于字符串的编码。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 定义的无效字符。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null 或内容字符串为空。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。 </exception>
<exception cref="T:System.IO.IOException">打开文件时发生 I/O 错误。 </exception>
      <exception cref="T:System.UnauthorizedAccessException">
<paramref name="path"/> 指定了一个只读文件。-或- 在当前平台上不支持此操作。-或- <paramref name="path"/> 指定了一个目录。-或- 调用方没有所要求的权限。 </exception>
<exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="path"/> 中指定的文件。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 的格式无效。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
    </member>
    <member name="T:System.IO.FileAccess">
<summary>定义用于文件读取、写入或读取/写入访问权限的常数。</summary>
    </member>
    <member name="F:System.IO.FileAccess.Read">
<summary>对文件的读访问权。可从文件中读取数据。同 Write 组合即构成读/写访问权。</summary>
    </member>
    <member name="F:System.IO.FileAccess.Write">
<summary>文件的写访问。可将数据写入文件。同 Read 组合即构成读/写访问权。</summary>
    </member>
    <member name="F:System.IO.FileAccess.ReadWrite">
<summary>对文件的读访问和写访问。可从文件读取数据和将数据写入文件。</summary>
    </member>
    <member name="T:System.IO.FileAttributes">
<summary>提供文件和目录的属性。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.ReadOnly">
<summary>此文件是只读的。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Hidden">
<summary>文件是隐藏的，因此没有包括在普通的目录列表中。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.System">
<summary>此文件是系统文件。它是操作系统的一部分，或者由操作系统以独占方式使用。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Directory">
<summary>此文件是一个目录。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Archive">
<summary>此文件的存档状态。应用程序使用此属性将文件标记为备份或移除。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Device">
<summary>保留供将来使用。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Normal">
<summary>文件正常，没有设置其他属性。仅当单独使用时，此属性才有效。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Temporary">
<summary>此文件是临时文件。文件系统试图将所有数据保留在内存中以便更快地访问，而不是将数据刷新回大容量存储器中。当临时文件不再需要时，应用程序应立即删除它。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.SparseFile">
<summary>此文件是稀疏文件。稀疏文件通常是数据大部分为零的大文件。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.ReparsePoint">
<summary>文件包含一个重新分析点，它是一个与文件或目录关联的用户定义的数据块。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Compressed">
<summary>此文件是压缩文件。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Offline">
<summary>此文件处于脱机状态。文件数据不能立即供使用。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.NotContentIndexed">
<summary>将不会通过操作系统的内容索引服务来索引此文件。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Encrypted">
<summary>此文件或目录已加密。对于文件来说，表示文件中的所有数据都是加密的。对于目录来说，表示新创建的文件和目录在默认情况下是加密的。</summary>
    </member>
    <member name="T:System.IO.FileInfo">
<summary>提供创建、复制、删除、移动和打开文件的实例方法，并且帮助创建 <see cref="T:System.IO.FileStream"/> 对象。无法继承此类。</summary>
    </member>
    <member name="M:System.IO.FileInfo.#ctor(System.String)">
<summary>在被受信任的应用程序调用时，初始化 <see cref="T:System.IO.FileInfo"/> 类的新实例，该实例作为文件路径的包装。</summary>
<param name="fileName">新文件的完全限定名或相对文件名。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="fileName"/> 为 null。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
<exception cref="T:System.ArgumentException">文件名为空，只包含空白，或包含无效字符。 </exception>
<exception cref="T:System.UnauthorizedAccessException">对 <paramref name="fileName"/> 的访问被拒绝。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="fileName"/> 的字符串中间包含一个冒号 (:)。 </exception>
    </member>
    <member name="M:System.IO.FileInfo.AppendText">
<summary>在被受信任的应用程序调用时，创建一个 <see cref="T:System.IO.StreamWriter"/>，以便向 <see cref="T:System.IO.FileInfo"/> 的此实例所表示的文件追加文本。</summary>
<returns>一个新的 StreamWriter。</returns>
    </member>
    <member name="M:System.IO.FileInfo.CopyTo(System.String)">
<summary>在被受信任的应用程序调用时，将现有文件复制到新文件，但不允许覆盖现有文件。</summary>
<returns>带有完全限定路径的新文件。</returns>
<param name="destFileName">要复制到的新文件的名称。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="destFileName"/> 为空，仅包含空白，或包含无效字符。 </exception>
<exception cref="T:System.IO.IOException">发生错误或目标文件已经存在。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="destFileName"/> 为 null。 </exception>
<exception cref="T:System.UnauthorizedAccessException">传入了一个目录路径，或者正在将文件移动到另一个驱动器。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="destFileName"/> 中指定的目录不存在。</exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="destFileName"/> 的字符串中间包含一个冒号 (:)。 </exception>
    </member>
    <member name="M:System.IO.FileInfo.CopyTo(System.String,System.Boolean)">
<summary>在被受信任的应用程序调用时，将现有文件复制到新文件，但不允许覆盖现有文件。</summary>
<returns>新文件，或者如果 <paramref name="overwrite"/> 为 true，则覆盖现有文件。如果文件存在，且 <paramref name="overwrite"/> 为 false，则会发生 <see cref="T:System.IO.IOException"/>。</returns>
<param name="destFileName">要复制到的新文件的名称。 </param>
<param name="overwrite">若为 true，则允许覆盖现有文件；否则为 false。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="destFileName"/> 为空，仅包含空白，或包含无效字符。 </exception>
<exception cref="T:System.IO.IOException">发生错误，或者目标文件已经存在，并且 <paramref name="overwrite"/> 为 false。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="destFileName"/> 为 null。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="destFileName"/> 中指定的目录不存在。</exception>
<exception cref="T:System.UnauthorizedAccessException">传入了一个目录路径，或者正在将文件移动到另一个驱动器。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="destFileName"/> 的字符串中间包含一个冒号 (:)。 </exception>
    </member>
    <member name="M:System.IO.FileInfo.Create">
<summary>在被受信任的应用程序调用时，创建一个文件。</summary>
<returns>新文件。</returns>
    </member>
    <member name="M:System.IO.FileInfo.CreateText">
<summary>在被受信任的应用程序调用时，创建一个写入新文本文件的 <see cref="T:System.IO.StreamWriter"/>。</summary>
<returns>一个新的 StreamWriter。</returns>
<exception cref="T:System.UnauthorizedAccessException">文件名为目录。 </exception>
<exception cref="T:System.IO.IOException">磁盘为只读。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
    </member>
    <member name="M:System.IO.FileInfo.Delete">
<summary>在被受信任的应用程序调用时，永久删除文件。</summary>
<exception cref="T:System.IO.IOException">目标文件已打开或内存映射到运行 Microsoft Windows NT 的计算机上。-或- 对于文件有打开句柄，并且操作系统是 Windows XP 或更早版本。此打开句柄可能是由于枚举目录和文件导致的。</exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
<exception cref="T:System.UnauthorizedAccessException">路径是目录。 </exception>
    </member>
    <member name="P:System.IO.FileInfo.Directory">
<summary>在被受信任的应用程序调用时，获取父目录的实例。</summary>
<returns>表示此文件父目录的 <see cref="T:System.IO.DirectoryInfo"/> 对象。</returns>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，比如在未映射的驱动器上。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
    </member>
    <member name="P:System.IO.FileInfo.DirectoryName">
<summary>在被受信任的应用程序调用时，获取一个表示目录的完整路径的字符串。</summary>
<returns>表示目录的完整路径的字符串。</returns>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
<exception cref="T:System.ArgumentNullException">为目录名传入 null。 </exception>
    </member>
    <member name="P:System.IO.FileInfo.Exists">
<summary>获取指示文件是否存在的值。</summary>
<returns>如果该文件存在，则为 true；如果该文件不存在或如果该文件是目录，则为 false。</returns>
    </member>
    <member name="P:System.IO.FileInfo.Length">
<summary>获取当前文件的大小（字节）。</summary>
<returns>当前文件的大小（字节）。</returns>
      <exception cref="T:System.IO.IOException">
<see cref="M:System.IO.FileSystemInfo.Refresh"/> 无法更新文件或目录的状态。 </exception>
<exception cref="T:System.IO.FileNotFoundException">该文件不存在。-或- 为一个目录调用 Length 属性。 </exception>
    </member>
    <member name="M:System.IO.FileInfo.MoveTo(System.String)">
<summary>在被受信任的应用程序调用时，将指定文件移到新位置，并提供用来指定新文件名的选项。</summary>
<param name="destFileName">要将文件移动到的路径，可以指定另一个文件名。 </param>
<exception cref="T:System.IO.IOException">发生 I/O 错误，如目标文件已经存在或目标设备未准备好。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="destFileName"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="destFileName"/> 为空，仅包含空白，或包含无效字符。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
      <exception cref="T:System.UnauthorizedAccessException">
<paramref name="destFileName"/> 为只读，或者是一个目录。 </exception>
<exception cref="T:System.IO.FileNotFoundException">找不到该文件。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，比如在未映射的驱动器上。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="destFileName"/> 的字符串中间包含一个冒号 (:)。 </exception>
    </member>
    <member name="P:System.IO.FileInfo.Name">
<summary>获取文件的名称。</summary>
<returns>文件名。</returns>
    </member>
    <member name="M:System.IO.FileInfo.Open(System.IO.FileMode)">
<summary>在被受信任的应用程序调用时，以指定的模式打开文件。</summary>
<returns>在指定模式中打开、具有读/写访问权限且不共享的文件。</returns>
<param name="mode">一个 <see cref="T:System.IO.FileMode"/> 常数，它指定打开文件所采用的模式（例如 Open 或 Append）。 </param>
<exception cref="T:System.IO.FileNotFoundException">找不到该文件。 </exception>
<exception cref="T:System.UnauthorizedAccessException">此文件是只读文件，或者是一个目录。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，比如在未映射的驱动器上。 </exception>
<exception cref="T:System.IO.IOException">该文件已打开。 </exception>
    </member>
    <member name="M:System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess)">
<summary>在被受信任的应用程序调用时，用读访问权限、写访问权限或读/写访问权限以指定模式打开文件。</summary>
<returns>用指定模式和访问权限打开且不共享的 <see cref="T:System.IO.FileStream"/> 对象。</returns>
<param name="mode">一个 <see cref="T:System.IO.FileMode"/> 常数，它指定打开文件所采用的模式（例如 Open 或 Append）。 </param>
<param name="access">一个 <see cref="T:System.IO.FileAccess"/> 常数，它指定是使用 Read、Write 还是 ReadWrite 文件访问权限来打开文件。 </param>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 为空，或者只包含空白。 </exception>
<exception cref="T:System.IO.FileNotFoundException">找不到该文件。 </exception>
<exception cref="T:System.ArgumentNullException">一个或多个参数为 null。 </exception>
      <exception cref="T:System.UnauthorizedAccessException">
<paramref name="path"/> 为只读，或者是一个目录。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，比如在未映射的驱动器上。 </exception>
<exception cref="T:System.IO.IOException">该文件已打开。 </exception>
    </member>
    <member name="M:System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
<summary>在被受信任的应用程序调用时，用读访问权限、写访问权限或读/写访问权限以及指定的共享选项以指定模式打开文件。</summary>
<returns>用指定的模式、访问权限和共享选项打开的 <see cref="T:System.IO.FileStream"/> 对象。</returns>
<param name="mode">一个 <see cref="T:System.IO.FileMode"/> 常数，它指定打开文件所采用的模式（例如 Open 或 Append）。 </param>
<param name="access">一个 <see cref="T:System.IO.FileAccess"/> 常数，它指定是使用 Read、Write 还是 ReadWrite 文件访问权限来打开文件。 </param>
<param name="share">一个 <see cref="T:System.IO.FileShare"/> 常数，它指定其他 FileStream 对象对此文件拥有的访问类型。 </param>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 为空，或者只包含空白。 </exception>
<exception cref="T:System.IO.FileNotFoundException">找不到该文件。 </exception>
<exception cref="T:System.ArgumentNullException">一个或多个参数为 null。 </exception>
      <exception cref="T:System.UnauthorizedAccessException">
<paramref name="path"/> 为只读，或者是一个目录。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，比如在未映射的驱动器上。 </exception>
<exception cref="T:System.IO.IOException">该文件已打开。 </exception>
    </member>
    <member name="M:System.IO.FileInfo.OpenRead">
<summary>创建只读的 <see cref="T:System.IO.FileStream"/>。</summary>
<returns>新的只读 <see cref="T:System.IO.FileStream"/> 对象。</returns>
      <exception cref="T:System.UnauthorizedAccessException">
<paramref name="path"/> 为只读，或者是一个目录。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，比如在未映射的驱动器上。 </exception>
<exception cref="T:System.IO.IOException">该文件已打开。 </exception>
    </member>
    <member name="M:System.IO.FileInfo.OpenText">
<summary>创建使用 UTF8 编码、从现有文本文件中进行读取的 <see cref="T:System.IO.StreamReader"/>。</summary>
<returns>使用 UTF8 编码的新 StreamReader。</returns>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
<exception cref="T:System.IO.FileNotFoundException">找不到该文件。 </exception>
      <exception cref="T:System.UnauthorizedAccessException">
<paramref name="path"/> 为只读，或者是一个目录。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，比如在未映射的驱动器上。 </exception>
    </member>
    <member name="M:System.IO.FileInfo.OpenWrite">
<summary>在被受信任的应用程序调用时，创建一个只写 <see cref="T:System.IO.FileStream"/>。</summary>
<returns>新的只写不共享的 <see cref="T:System.IO.FileStream"/> 对象。</returns>
      <exception cref="T:System.UnauthorizedAccessException">
<paramref name="path"/> 为只读，或者是一个目录。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，比如在未映射的驱动器上。 </exception>
    </member>
    <member name="M:System.IO.FileInfo.ToString">
<summary>以字符串形式返回路径。</summary>
<returns>一个表示该路径的字符串。</returns>
    </member>
    <member name="T:System.IO.FileLoadException">
<summary>当找到托管程序集却不能加载它时引发的异常。</summary>
    </member>
    <member name="P:System.IO.FileLoadException.Message">
<summary>获取错误消息和引发此异常的文件的名称。</summary>
<returns>包含错误消息和引发此异常的文件名称的字符串。</returns>
    </member>
    <member name="M:System.IO.FileLoadException.ToString">
<summary>返回当前异常的完全限定名，还可能返回错误消息、内部异常的名称和堆栈跟踪。</summary>
<returns>一个字符串，它包含此异常的完全限定名，还可能包含错误消息、内部异常的名称和堆栈跟踪（取决于所使用的 <see cref="T:System.IO.FileLoadException"/> 构造函数）。</returns>
    </member>
    <member name="T:System.IO.FileMode">
<summary>指定操作系统打开文件的方式。</summary>
    </member>
    <member name="F:System.IO.FileMode.CreateNew">
<summary>指定操作系统应创建新文件。 </summary>
    </member>
    <member name="F:System.IO.FileMode.Create">
<summary>指定操作系统应创建新文件。如果文件已存在，将被覆盖。<see cref="F:System.IO.FileMode.Create"/> 等效于这样的请求：如果文件不存在，则使用 <see cref="F:System.IO.FileMode.CreateNew"/>；否则使用 <see cref="F:System.IO.FileMode.Truncate"/>。</summary>
    </member>
    <member name="F:System.IO.FileMode.Open">
<summary>指定操作系统应打开现有文件。打开文件的能力取决于 <see cref="T:System.IO.FileAccess"/> 所指定的值。如果该文件不存在，则引发 <see cref="T:System.IO.FileNotFoundException"/>。</summary>
    </member>
    <member name="F:System.IO.FileMode.OpenOrCreate">
<summary>指定操作系统应打开文件（如果文件存在）；否则，应创建新文件。 </summary>
    </member>
    <member name="F:System.IO.FileMode.Truncate">
<summary>指定操作系统应打开现有文件。文件一旦打开，就将被截断为零字节大小。 </summary>
    </member>
    <member name="F:System.IO.FileMode.Append">
<summary>打开现有文件并查找到文件尾，或创建新文件。<see cref="F:System.IO.FileMode.Append"/> 只能同 <see cref="F:System.IO.FileAccess.Write"/> 一起使用。试图查找文件尾之前的位置时会引发 <see cref="T:System.IO.IOException"/>，并且任何试图读取的操作都会失败并引发 <see cref="T:System.NotSupportedException"/>。</summary>
    </member>
    <member name="T:System.IO.FileNotFoundException">
<summary>试图访问不存在的文件失败时引发的异常。</summary>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor">
<summary>初始化 <see cref="T:System.IO.FileNotFoundException"/> 类的新实例，将其消息字符串设置为系统提供的消息。</summary>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String)">
<summary>初始化 <see cref="T:System.IO.FileNotFoundException"/> 类的新实例，将其消息字符串设置为 <paramref name="message"/>。</summary>
<param name="message">错误的描述。<paramref name="message"/> 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。 </param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IO.FileNotFoundException"/> 类的新实例。</summary>
<param name="message">错误的描述。<paramref name="message"/> 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。 </param>
<param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="P:System.IO.FileNotFoundException.Message"></member>
    <member name="M:System.IO.FileNotFoundException.ToString">
<summary>返回该异常的完全限定名，还可能返回错误消息、内部异常的名称和堆栈跟踪。</summary>
<returns>一个字符串，包含该异常的完全限定名，还可能包含错误消息、内部异常的名称和堆栈跟踪。</returns>
    </member>
    <member name="T:System.IO.FileShare">
<summary>包含用于控制其他 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/> 对象对同一文件可以具有的访问类型的常数。</summary>
    </member>
    <member name="F:System.IO.FileShare.None">
<summary>谢绝共享当前文件。文件关闭前，打开该文件的任何请求（由此进程或另一进程发出的请求）都将失败。</summary>
    </member>
    <member name="F:System.IO.FileShare.Read">
<summary>允许随后打开文件读取。如果未指定此标志，则文件关闭前，任何打开该文件以进行读取的请求（由此进程或另一进程发出的请求）都将失败。 </summary>
    </member>
    <member name="F:System.IO.FileShare.Write">
<summary>允许随后打开文件写入。如果未指定此标志，则文件关闭前，任何打开该文件以进行写入的请求（由此进程或另一进过程发出的请求）都将失败。 </summary>
    </member>
    <member name="F:System.IO.FileShare.ReadWrite">
<summary>允许随后打开文件读取或写入。如果未指定此标志，则文件关闭前，任何打开该文件以进行读取或写入的请求（由此进程或另一进程发出）都将失败。 </summary>
    </member>
    <member name="F:System.IO.FileShare.Delete">
<summary>允许随后删除文件。</summary>
    </member>
    <member name="F:System.IO.FileShare.Inheritable">
<summary>使文件句柄可由子进程继承。 </summary>
    </member>
    <member name="T:System.IO.FileStream">
<summary>在被提升了信任级别的应用程序调用时，公开封装文件的 <see cref="T:System.IO.Stream"/>，既支持同步读写操作，也支持异步读写操作。</summary>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
<summary>在被受信任的应用程序调用时，使用指定的路径和创建模式初始化 <see cref="T:System.IO.FileStream"/> 类的新实例。</summary>
<param name="path">当前 FileStream 对象将封装的文件的相对路径或绝对路径。 </param>
<param name="mode"><see cref="T:System.IO.FileMode"/> 常数，确定如何打开或创建文件。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 为空字符串 ("")，只包含空格，或者包含一个或多个无效字符。-或- <paramref name="path"/> 引用一个非文件设备，如 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 引用一个非文件设备，如非 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
<exception cref="T:System.IO.FileNotFoundException">找不到文件，比如当 <paramref name="mode"/> 是 FileMode.Truncate 或 FileMode.Open 而 <paramref name="path"/> 指定的文件不存在时。文件必须已经以这些模式存在。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误，比如指定 FileMode.CreateNew 而 <paramref name="path"/> 指定的文件已存在。-或- 流已关闭。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，比如在未映射的驱动器上。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="mode"/> 包含无效值。 </exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
<summary>在被受信任的应用程序调用时，使用指定的路径、创建模式和读/写权限初始化 <see cref="T:System.IO.FileStream"/> 类的新实例。</summary>
<param name="path">当前 FileStream 对象将封装的文件的相对路径或绝对路径。 </param>
<param name="mode"><see cref="T:System.IO.FileMode"/> 常数，确定如何打开或创建文件。 </param>
<param name="access"><see cref="T:System.IO.FileAccess"/> 常数，它确定 FileStream 对象访问文件的方式。这将获取 FileStream 对象的 <see cref="P:System.IO.FileStream.CanRead"/> 和 <see cref="P:System.IO.FileStream.CanWrite"/> 属性。如果 <paramref name="path"/> 指定磁盘文件，则 <see cref="P:System.IO.FileStream.CanSeek"/> 为 true。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 为空字符串 ("")，只包含空格，或者包含一个或多个无效字符。-或- <paramref name="path"/> 引用一个非文件设备，如 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 引用一个非文件设备，如非 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 为空字符串 ("")，只包含空格，或者包含一个或多个无效字符。 </exception>
<exception cref="T:System.IO.FileNotFoundException">找不到文件，比如当 <paramref name="mode"/> 是 FileMode.Truncate 或 FileMode.Open 而 <paramref name="path"/> 指定的文件不存在时。文件必须已经以这些模式存在。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误，比如指定 FileMode.CreateNew 而 <paramref name="path"/> 指定的文件已存在。-或- 流已关闭。</exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，比如在未映射的驱动器上。 </exception>
<exception cref="T:System.UnauthorizedAccessException">对于指定的 <paramref name="path"/> 操作系统不允许所请求的 <paramref name="access"/>，比如当 <paramref name="access"/> 是 Write 或 ReadWrite 而文件或目录设置为只读访问时。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="mode"/> 包含无效值。 </exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
<summary>在被受信任的应用程序调用时，使用指定的路径、创建模式、读/写权限和共享权限来初始化 <see cref="T:System.IO.FileStream"/> 类的新实例。</summary>
<param name="path">当前 FileStream 对象将封装的文件的相对路径或绝对路径。 </param>
<param name="mode"><see cref="T:System.IO.FileMode"/> 常数，确定如何打开或创建文件。 </param>
<param name="access"><see cref="T:System.IO.FileAccess"/> 常数，它确定 FileStream 对象访问文件的方式。这将获取 FileStream 对象的 <see cref="P:System.IO.FileStream.CanRead"/> 和 <see cref="P:System.IO.FileStream.CanWrite"/> 属性。如果 <paramref name="path"/> 指定磁盘文件，则 <see cref="P:System.IO.FileStream.CanSeek"/> 为 true。 </param>
<param name="share"><see cref="T:System.IO.FileShare"/> 常数，确定文件如何由进程共享。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 为空字符串 ("")，只包含空格，或者包含一个或多个无效字符。-或- <paramref name="path"/> 引用一个非文件设备，如 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 引用一个非文件设备，如非 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 为空字符串 ("")，只包含空格，或者包含一个或多个无效字符。 </exception>
<exception cref="T:System.IO.FileNotFoundException">找不到文件，比如当 <paramref name="mode"/> 是 FileMode.Truncate 或 FileMode.Open 而 <paramref name="path"/> 指定的文件不存在时。文件必须已经以这些模式存在。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误，比如指定 FileMode.CreateNew 而 <paramref name="path"/> 指定的文件已存在。-或- 系统运行的是 Windows 98 或 Windows 98 Second Edition，并且 <paramref name="share"/> 设置为 FileShare.Delete。-或- 流已关闭。</exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，比如在未映射的驱动器上。 </exception>
<exception cref="T:System.UnauthorizedAccessException">对于指定的 <paramref name="path"/> 操作系统不允许所请求的 <paramref name="access"/>，比如当 <paramref name="access"/> 是 Write 或 ReadWrite 而文件或目录设置为只读访问时。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="mode"/> 包含无效值。 </exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
<summary>在被受信任的应用程序调用时，使用指定的路径、创建模式、读/写权限和共享权限以及缓冲区大小来初始化 <see cref="T:System.IO.FileStream"/> 类的新实例。</summary>
<param name="path">当前 FileStream 对象将封装的文件的相对路径或绝对路径。 </param>
<param name="mode"><see cref="T:System.IO.FileMode"/> 常数，确定如何打开或创建文件。 </param>
<param name="access"><see cref="T:System.IO.FileAccess"/> 常数，它确定 FileStream 对象访问文件的方式。这将获取 FileStream 对象的 <see cref="P:System.IO.FileStream.CanRead"/> 和 <see cref="P:System.IO.FileStream.CanWrite"/> 属性。如果 <paramref name="path"/> 指定磁盘文件，则 <see cref="P:System.IO.FileStream.CanSeek"/> 为 true。 </param>
<param name="share"><see cref="T:System.IO.FileShare"/> 常数，确定文件如何由进程共享。 </param>
<param name="bufferSize">一个大于零的正 <see cref="T:System.Int32"/> 值，表示缓冲区大小。对于 1 和 8 之间的 <paramref name="bufferSize"/> 值，缓冲区的实际大小设置为 8 字节。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 为空字符串 ("")，只包含空格，或者包含一个或多个无效字符。-或- <paramref name="path"/> 引用一个非文件设备，如 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 引用一个非文件设备，如非 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 为空字符串 ("")，只包含空格，或者包含一个或多个无效字符。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="bufferSize"/> 为负或为零。-或- <paramref name="mode"/>、<paramref name="access"/> 或 <paramref name="share"/> 包含无效值。 </exception>
<exception cref="T:System.IO.FileNotFoundException">找不到文件，比如当 <paramref name="mode"/> 是 FileMode.Truncate 或 FileMode.Open 而 <paramref name="path"/> 指定的文件不存在时。文件必须已经以这些模式存在。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误，比如指定 FileMode.CreateNew 而 <paramref name="path"/> 指定的文件已存在。-或- 系统运行的是 Windows 98 或 Windows 98 Second Edition，并且 <paramref name="share"/> 设置为 FileShare.Delete。-或- 流已关闭。</exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，比如在未映射的驱动器上。 </exception>
<exception cref="T:System.UnauthorizedAccessException">对于指定的 <paramref name="path"/> 操作系统不允许所请求的 <paramref name="access"/>，比如当 <paramref name="access"/> 是 Write 或 ReadWrite 而文件或目录设置为只读访问时。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
    </member>
    <member name="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
<summary>开始异步读。</summary>
<returns>引用异步读的 <see cref="T:System.IAsyncResult"/>。</returns>
<param name="array">要读入数据的缓冲区。 </param>
<param name="offset">从其开始读取的 <paramref name="array"/> 的字节偏移量。 </param>
<param name="numBytes">要读取的最大字节数。 </param>
<param name="userCallback">异步读操作完成后调用的方法。 </param>
<param name="stateObject">用户提供的对象从其他请求中区分出这个特别的异步读取请求。 </param>
<exception cref="T:System.ArgumentException">数组长度减去 <paramref name="offset"/> 小于 <paramref name="numBytes"/>。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="offset"/> 或 <paramref name="numBytes"/> 为负。 </exception>
<exception cref="T:System.IO.IOException">试图在文件的末尾之外进行异步读取。 </exception>
    </member>
    <member name="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
<summary>开始异步写。</summary>
<returns>引用异步写的 <see cref="T:System.IAsyncResult"/>。</returns>
<param name="array">包含要写入当前流的数据的缓冲区。</param>
<param name="offset"><paramref name="array"/> 中从零开始的字节偏移量，在这里开始复制字节到当前流。</param>
<param name="numBytes">要写入的最大字节数。 </param>
<param name="userCallback">异步写操作完成后调用的方法。 </param>
<param name="stateObject">用户提供的对象从其他请求中区分出这个特别的异步读取请求。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="array"/> 长度减去 <paramref name="offset"/> 小于 <paramref name="numBytes"/>。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="offset"/> 或 <paramref name="numBytes"/> 为负。 </exception>
<exception cref="T:System.NotSupportedException">流不支持写入。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="P:System.IO.FileStream.CanRead">
<summary>获取一个值，该值指示当前流是否支持读取。</summary>
<returns>如果流支持读取，则为 true；如果流已关闭或是通过只写访问方式打开的，则为 false。</returns>
    </member>
    <member name="P:System.IO.FileStream.CanSeek">
<summary>获取一个值，该值指示当前流是否支持查找。</summary>
<returns>如果流支持查找，则为 true；如果流已关闭或者如果 FileStream 是从操作系统句柄（如管道或到控制台的输出）构造的，则为 false。</returns>
    </member>
    <member name="P:System.IO.FileStream.CanWrite">
<summary>获取一个值，该值指示当前流是否支持写入。</summary>
<returns>如果流支持写入，则为 true；如果流已关闭或是通过只读访问方式打开的，则为 false。 </returns>
    </member>
    <member name="M:System.IO.FileStream.Dispose(System.Boolean)">
<summary>释放由 <see cref="T:System.IO.FileStream"/> 使用的未托管的资源，并且可以选择释放托管的资源。</summary>
<param name="disposing">如果释放托管和未托管资源，则为 true；如果只释放未托管资源，则为 false。 </param>
    </member>
    <member name="M:System.IO.FileStream.EndRead(System.IAsyncResult)">
<summary>等待挂起的异步读取完成。</summary>
<returns>从流中读取的字节数，介于 0 和所请求的字节数之间。流仅在流的末尾返回 0；否则应一直阻塞到至少有 1 个字节可用为止。</returns>
<param name="asyncResult">对所等待的挂起异步请求的引用。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="asyncResult"/> 为 null。 </exception>
<exception cref="T:System.ArgumentException">此 <see cref="T:System.IAsyncResult"/> 对象不是通过对该类调用 <see cref="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> 来创建的。 </exception>
      <exception cref="T:System.InvalidOperationException">
<see cref="M:System.IO.FileStream.EndRead(System.IAsyncResult)"/> 被多次调用。 </exception>
<exception cref="T:System.IO.IOException">此流关闭或发生内部错误。</exception>
    </member>
    <member name="M:System.IO.FileStream.EndWrite(System.IAsyncResult)">
<summary>结束异步写入，在 I/O 操作完成之前一直阻止。</summary>
<param name="asyncResult">挂起的异步 I/O 请求。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="asyncResult"/> 为 null。 </exception>
<exception cref="T:System.ArgumentException"><see cref="T:System.IAsyncResult"/>对象不是在该类上调用 <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> 所创建。 </exception>
      <exception cref="T:System.InvalidOperationException">
<see cref="M:System.IO.FileStream.EndWrite(System.IAsyncResult)"/> 被多次调用。 </exception>
<exception cref="T:System.IO.IOException">此流关闭或发生内部错误。</exception>
    </member>
    <member name="M:System.IO.FileStream.Finalize">
<summary>确保垃圾回收器回收 FileStream 时释放资源并执行其他清理操作。</summary>
    </member>
    <member name="M:System.IO.FileStream.Flush">
<summary>清除此流的缓冲区，使得所有缓冲的数据都写入到文件中。</summary>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
    </member>
    <member name="M:System.IO.FileStream.Flush(System.Boolean)">
<summary>清除此流的缓冲区，会将所有缓冲的数据都写入到文件中，另外也会清除所有的中间文件缓冲区。</summary>
<param name="flushToDisk">如果刷新所有的中间文件缓冲区，则为 true；否则为 false。 </param>
    </member>
    <member name="P:System.IO.FileStream.Length">
<summary>在被受信任的应用程序调用时，获取流的字节长度。</summary>
<returns>用字节表示流长度的长值。</returns>
      <exception cref="T:System.NotSupportedException">
该流的<see cref="P:System.IO.FileStream.CanSeek"/>为 false。 </exception>
<exception cref="T:System.IO.IOException">发生一个 I/O 错误，如文件被关闭。 </exception>
    </member>
    <member name="P:System.IO.FileStream.Name">
<summary>在被受信任的应用程序调用时，获取传递给构造函数的文件流的名称。</summary>
<returns>字符串是文件流的名称。</returns>
    </member>
    <member name="P:System.IO.FileStream.Position">
<summary>在被受信任的应用程序调用时，获取或设置该流的当前位置。</summary>
<returns>该流的当前位置。</returns>
<exception cref="T:System.NotSupportedException">流不支持查找。 </exception>
<exception cref="T:System.IO.IOException">发生了 I/O 错误。-或- 位置被设置为很大的值，超出了 Windows 98 或更早版本的流的末尾。</exception>
<exception cref="T:System.ArgumentOutOfRangeException">试图将位置设置为负值。 </exception>
<exception cref="T:System.IO.EndOfStreamException">尝试在流的末尾之外查找，而流不支持此操作。 </exception>
    </member>
    <member name="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
<summary>从流读取字节块并将数据写入给定的缓冲区。</summary>
<returns>读入缓冲区中的总字节数。如果字节数当前不可用，则可能小于请求的字节数，或者，如果达到流末尾，则为零。</returns>
<param name="array">该方法有返回值时，包含指定的字节数组，数组中在 <paramref name="offset"/> 和 (<paramref name="offset"/> + <paramref name="count"/> - 1<paramref name=")"/> 之间的值由从当前源读取的字节替代。 </param>
<param name="offset"><paramref name="array"/> 中的字节偏移量，将在此处开始放置读入的字节。 </param>
<param name="count">要读取的最大字节数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="offset"/> 或 <paramref name="count"/> 为负。 </exception>
<exception cref="T:System.NotSupportedException">流不支持读取。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="offset"/> 和 <paramref name="count"/> 描述 <paramref name="array"/> 中的无效范围。 </exception>
<exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。 </exception>
    </member>
    <member name="M:System.IO.FileStream.ReadByte">
<summary>从文件读取一个字节，读取位置向前移动一个字节。</summary>
<returns>字节转换为 <see cref="T:System.Int32"/>，如果到达流末尾，为 -1。</returns>
<exception cref="T:System.NotSupportedException">当前流不支持读取。 </exception>
<exception cref="T:System.ObjectDisposedException">当前流已关闭。 </exception>
    </member>
    <member name="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
<summary>设置该流的当前位置为给定值。</summary>
<returns>流中的新位置。</returns>
<param name="offset">相对于 <paramref name="origin"/> 的点，从这里开始查找。 </param>
<param name="origin">指定开始，结束，或当前位置作为 <paramref name="origin"/> 的参考点，使用 <see cref="T:System.IO.SeekOrigin"/> 类型的值。 </param>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.NotSupportedException">流不支持查找，比如，如果 FileStream 由一个管道或控制台输出构造。 </exception>
<exception cref="T:System.ArgumentException">试图在流开始位置之前查找。 </exception>
<exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。 </exception>
    </member>
    <member name="M:System.IO.FileStream.SetLength(System.Int64)">
<summary>将该流的长度设置为给定值。</summary>
<param name="value">流的新长度。 </param>
<exception cref="T:System.IO.IOException">出现 I/O 错误。 </exception>
<exception cref="T:System.NotSupportedException">流不同时支持写入和查找。 </exception>
<exception cref="T:System.ArgumentOutOfRangeException">试图设置 <paramref name="value"/> 参数为小于 0。 </exception>
    </member>
    <member name="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
<summary>使用缓冲区的数据向该流写入字节块。</summary>
<param name="array">缓冲区包含要写入流的数据。</param>
<param name="offset"><paramref name="array"/> 中从零开始的字节偏移量，在这里开始复制字节到当前流。 </param>
<param name="count">要写入当前流的字节数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="offset"/> 和 <paramref name="count"/> 描述 <paramref name="array"/> 中的无效范围。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="offset"/> 或 <paramref name="count"/> 为负。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。-或- 另一个线程可能已经在操作系统文件句柄的位置引发未知的改变。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
<exception cref="T:System.NotSupportedException">当前流实例不支持写入。 </exception>
    </member>
    <member name="M:System.IO.FileStream.WriteByte(System.Byte)">
<summary>向文件流的当前位置写入一个字节。</summary>
<param name="value">要写入流的字节。 </param>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
<exception cref="T:System.NotSupportedException">流不支持写入。 </exception>
    </member>
    <member name="T:System.IO.FileSystemInfo">
<summary>为 <see cref="T:System.IO.FileInfo"/> 和 <see cref="T:System.IO.DirectoryInfo"/> 对象提供基类。</summary>
    </member>
    <member name="M:System.IO.FileSystemInfo.#ctor">
<summary>初始化 <see cref="T:System.IO.FileSystemInfo"/> 类的新实例。</summary>
    </member>
    <member name="P:System.IO.FileSystemInfo.Attributes">
<summary>在被受信任的应用程序调用时，获取或设置当前 <see cref="T:System.IO.FileSystemInfo"/> 的 <see cref="T:System.IO.FileAttributes"/>。</summary>
      <returns>
当前 <see cref="T:System.IO.FileSystemInfo"/> 的 <see cref="T:System.IO.FileAttributes"/>。</returns>
<exception cref="T:System.IO.FileNotFoundException">指定的文件不存在。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，比如在未映射的驱动器上。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
<exception cref="T:System.ArgumentException">调用方试图设置一个无效的文件属性。 </exception>
      <exception cref="T:System.IO.IOException">
<see cref="M:System.IO.FileSystemInfo.Refresh"/> 不能初始化数据。 </exception>
    </member>
    <member name="P:System.IO.FileSystemInfo.CreationTime">
<summary>在被受信任的应用程序调用时，获取或设置当前 <see cref="T:System.IO.FileSystemInfo"/> 对象的创建时间。</summary>
<returns>当前 <see cref="T:System.IO.FileSystemInfo"/> 对象的创建日期和时间。</returns>
      <exception cref="T:System.IO.IOException">
<see cref="M:System.IO.FileSystemInfo.Refresh"/> 不能初始化数据。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，比如在未映射的驱动器上。 </exception>
<exception cref="T:System.PlatformNotSupportedException">当前操作系统不是 Microsoft Windows NT 或更高版本。</exception>
    </member>
    <member name="M:System.IO.FileSystemInfo.Delete">
<summary>在被受信任的应用程序调用时，删除一个文件或目录。</summary>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，比如在未映射的驱动器上。-或- 在文件或目录上有一个打开句柄，并且操作系统是 Windows XP 或之前的版本。此打开句柄可能是由于枚举目录和文件导致的。</exception>
    </member>
    <member name="P:System.IO.FileSystemInfo.Exists">
<summary>获取指示文件或目录是否存在的值。</summary>
<returns>如果文件或目录存在，为 true，否则为 false。</returns>
    </member>
    <member name="P:System.IO.FileSystemInfo.Extension">
<summary>获取表示文件扩展名部分的字符串。</summary>
<returns>包含 <see cref="T:System.IO.FileSystemInfo"/> 扩展名的字符串。</returns>
    </member>
    <member name="P:System.IO.FileSystemInfo.FullName">
<summary>在被受信任的应用程序调用时，获取目录或文件的完整路径。</summary>
<returns>包含完整路径的字符串。</returns>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
    </member>
    <member name="F:System.IO.FileSystemInfo.FullPath">
<summary>表示目录或文件的完全限定路径。</summary>
    </member>
    <member name="P:System.IO.FileSystemInfo.LastAccessTime">
<summary>在被受信任的应用程序调用时，获取或设置当前文件或目录最后一次被访问的时间。</summary>
<returns>当前文件或目录最后一次被访问的时间。</returns>
      <exception cref="T:System.IO.IOException">
<see cref="M:System.IO.FileSystemInfo.Refresh"/> 不能初始化数据。 </exception>
<exception cref="T:System.PlatformNotSupportedException">当前操作系统不是 Microsoft Windows NT 或更高版本。</exception>
    </member>
    <member name="P:System.IO.FileSystemInfo.LastWriteTime">
<summary>在被受信任的应用程序调用时，获取或设置当前文件或目录最后一次被写入的时间。</summary>
<returns>当前文件最后被写入的时间。</returns>
      <exception cref="T:System.IO.IOException">
<see cref="M:System.IO.FileSystemInfo.Refresh"/> 不能初始化数据。 </exception>
<exception cref="T:System.PlatformNotSupportedException">当前操作系统不是 Microsoft Windows NT 或更高版本。</exception>
    </member>
    <member name="P:System.IO.FileSystemInfo.Name">
<summary>对于文件，获取文件名。对于目录，如果层次结构存在，获取层次结构最后一级目录名。否则，Name 属性获取目录名。</summary>
<returns>父目录名称的字符串，层次结构中最后一级目录名，或文件名，包括文件扩展名。</returns>
    </member>
    <member name="F:System.IO.FileSystemInfo.OriginalPath">
<summary>最初由用户指定的目录，无论是相对路径还是绝对路径。</summary>
    </member>
    <member name="M:System.IO.FileSystemInfo.Refresh">
<summary>刷新对象状态。</summary>
<exception cref="T:System.IO.IOException">设备如磁盘驱动器没有准备好。 </exception>
    </member>
    <member name="T:System.IO.IOException">
<summary>在发生 I/O 错误时引发异常。</summary>
    </member>
    <member name="M:System.IO.IOException.#ctor">
<summary>初始化 <see cref="T:System.IO.IOException"/> 类的新实例，消息字符串设置为空字符串 ("")，HRESULT设置为 COR_E_IO，内部异常设置为 null 引用。</summary>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String)">
<summary>初始化 <see cref="T:System.IO.IOException"/> 类的新实例，消息字符串设置为 <paramref name="message"/>，HRESULT 设置为 COR_E_IO，内部异常设置为 null。</summary>
<param name="message">描述该错误的 <see cref="T:System.String"/>。<paramref name="message"/> 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。 </param>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IO.IOException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="T:System.IO.MemoryStream">
<summary>创建其支持存储区为内存的流。</summary>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor">
<summary>用初始化为零的可扩展容量初始化 <see cref="T:System.IO.MemoryStream"/> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[])">
<summary>基于指定字节数组初始化 <see cref="T:System.IO.MemoryStream"/> 类的非可变大小的新实例。</summary>
<param name="buffer">从无符号字节数组创建当前流。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="buffer"/> 为 null。 </exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)">
<summary>基于指定字节数组使用指定的 <see cref="P:System.IO.MemoryStream.CanWrite"/> 属性初始化 <see cref="T:System.IO.MemoryStream"/> 类的固定大小的新实例。</summary>
<param name="buffer">从无符号字节数组创建当前流。 </param>
<param name="writable"><see cref="P:System.IO.MemoryStream.CanWrite"/> 属性的设置，决定流是否支持写入。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="buffer"/> 为 null。 </exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
<summary>基于字节数组的指定区域（索引）初始化 <see cref="T:System.IO.MemoryStream"/> 类的固定大小的新实例。</summary>
<param name="buffer">从无符号字节数组创建当前流。 </param>
<param name="index">流起始的 <paramref name="buffer"/> 中的索引。 </param>
<param name="count">流的字节长度。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="buffer"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 或 <paramref name="count"/> 小于零。 </exception>
<exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index"/> 小于 <paramref name="count"/>。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
<summary>基于字节数组指定区域使用指定的 <see cref="P:System.IO.MemoryStream.CanWrite"/> 属性初始化 <see cref="T:System.IO.MemoryStream"/> 类的固定大小的新实例。</summary>
<param name="buffer">从无符号字节数组创建当前流。 </param>
<param name="index">流起始的 <paramref name="buffer"/> 中的索引。 </param>
<param name="count">流的字节长度。 </param>
<param name="writable"><see cref="P:System.IO.MemoryStream.CanWrite"/> 属性的设置，决定流是否支持写入。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="buffer"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 或 <paramref name="count"/> 为负数。 </exception>
<exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index"/> 小于 <paramref name="count"/>。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
<summary>基于字节数组指定区域初始化 <see cref="T:System.IO.MemoryStream"/> 类的新实例，<see cref="P:System.IO.MemoryStream.CanWrite"/> 属性根据指定设置并具有调用指定 <see cref="M:System.IO.MemoryStream.GetBuffer"/> 的能力。</summary>
<param name="buffer">从无符号字节数组创建当前流。 </param>
<param name="index">流起始的 <paramref name="buffer"/> 中的索引。 </param>
<param name="count">流的字节长度。 </param>
<param name="writable"><see cref="P:System.IO.MemoryStream.CanWrite"/> 属性的设置，决定流是否支持写入。 </param>
<param name="publiclyVisible">启用 <see cref="M:System.IO.MemoryStream.GetBuffer"/> 为 true，返回流创建所依据的无符号字节数组；否则为 flase。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="buffer"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 或 <paramref name="count"/> 为负。 </exception>
<exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index"/> 小于 <paramref name="count"/>。 </exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Int32)">
<summary>使用指定初始化的可扩展容量，初始化 <see cref="T:System.IO.MemoryStream"/> 类的新实例。</summary>
<param name="capacity">内部数组的初始化字节大小。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="capacity"/> 为负值。 </exception>
    </member>
    <member name="P:System.IO.MemoryStream.CanRead">
<summary>获取一个值，该值指示当前流是否支持读取。</summary>
<returns>如果流已经打开，则为 true。</returns>
    </member>
    <member name="P:System.IO.MemoryStream.CanSeek">
<summary>获取一个值，该值指示当前流是否支持查找。</summary>
<returns>如果流已经打开，则为 true。</returns>
    </member>
    <member name="P:System.IO.MemoryStream.CanWrite">
<summary>获取一个值，该值指示当前流是否支持写入。</summary>
<returns>如果流支持写入为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IO.MemoryStream.Capacity">
<summary>获取或设置为该流分配的字节数。</summary>
<returns>流缓冲区可用部分的长度。</returns>
<exception cref="T:System.ArgumentOutOfRangeException">设置的容量为负值或小于流的当前长度。 </exception>
<exception cref="T:System.ObjectDisposedException">当前流已关闭。 </exception>
<exception cref="T:System.NotSupportedException">对不能修改其容量的流调用 set。 </exception>
    </member>
    <member name="M:System.IO.MemoryStream.Dispose(System.Boolean)">
<summary>释放由 <see cref="T:System.IO.MemoryStream"/> 类使用的未托管的资源，并且可以选择释放托管的资源。</summary>
<param name="disposing">如果释放托管和未托管资源，则为 true；如果只释放未托管资源，则为 false。</param>
    </member>
    <member name="M:System.IO.MemoryStream.Flush">
<summary>重写 <see cref="M:System.IO.Stream.Flush"/>，所以没有执行任何动作。</summary>
    </member>
    <member name="M:System.IO.MemoryStream.GetBuffer">
<summary>返回从其创建此流的无符号字节数组。</summary>
<returns>用来创建流的字节数组，或如果在当前实例构造期间字节数组没有提供给 <see cref="T:System.IO.MemoryStream"/> 构造函数的基础数组。</returns>
<exception cref="T:System.UnauthorizedAccessException">MemoryStream 实例没有创建公共可见的缓冲区。 </exception>
    </member>
    <member name="P:System.IO.MemoryStream.Length">
<summary>获取流的字节长度。</summary>
<returns>流的字节长度。</returns>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
    </member>
    <member name="P:System.IO.MemoryStream.Position">
<summary>获取或设置流的当前位置。</summary>
<returns>流中的当前位置。</returns>
<exception cref="T:System.ArgumentOutOfRangeException">设置位置为一个负值或一个大于 <see cref="F:System.Int32.MaxValue"/> 的值。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。 </exception>
    </member>
    <member name="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
<summary>从当前流读一个字节块并把数据写入缓冲区。</summary>
<returns>写入缓冲区的总字节数。如果当前可用字节数不到所请求的字节数，可以小于请求的字节数，如果在读取任何字节前达到流末尾将为零。</returns>
<param name="buffer">该方法有返回值时，包含指定的字节数组，其值在 <paramref name="offset"/> 和 (<paramref name="offset"/> + <paramref name="count"/> - 1) 之间，被从当前流读取的字符替代。 </param>
<param name="offset"><paramref name="buffer"/> 中从零开始的字节偏移量，在这里开始存储来自当前流的数据。</param>
<param name="count">要读取的最大字节数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="buffer"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="offset"/> 或 <paramref name="count"/> 为负。 </exception>
      <exception cref="T:System.ArgumentException">
缓冲区长度减去 <paramref name="offset"/> 的结果小于 <paramref name="count"/>。 </exception>
<exception cref="T:System.ObjectDisposedException">当前流实例已关闭。 </exception>
    </member>
    <member name="M:System.IO.MemoryStream.ReadByte">
<summary>从当前流读取一个字节。</summary>
<returns>字节转换为 <see cref="T:System.Int32"/>，如果到达流末尾，为 -1。</returns>
<exception cref="T:System.ObjectDisposedException">当前流实例已关闭。 </exception>
    </member>
    <member name="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
<summary>设置该流的当前位置为指定值。</summary>
<returns>流的新位置，根据组合初始的引用点和偏移量计算。</returns>
<param name="offset">流中的新位置。相对于 <paramref name="loc"/> 参数，可以为正值或负值。 </param>
<param name="loc"><see cref="T:System.IO.SeekOrigin"/> 类型的值，作用是查找引用点。 </param>
<exception cref="T:System.IO.IOException">试图在流开始前查找。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="offset"/> 大于 <see cref="F:System.Int32.MaxValue"/>。 </exception>
<exception cref="T:System.ArgumentException">SeekOrigin 无效。 </exception>
<exception cref="T:System.ObjectDisposedException">当前流实例已关闭。 </exception>
    </member>
    <member name="M:System.IO.MemoryStream.SetLength(System.Int64)">
<summary>设置当前流的位置为指定值。</summary>
<param name="value">设置长度的值。 </param>
<exception cref="T:System.NotSupportedException">当前流不是可调整大小的，<paramref name="value"/> 大于当前容量。-或- 当前流不支持写入。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="value"/> 为负值或大于 <see cref="T:System.IO.MemoryStream"/> 的最大长度，最大值是（<see cref="F:System.Int32.MaxValue"/> - 原点），原点是流起始的基础缓冲区的索引。 </exception>
    </member>
    <member name="M:System.IO.MemoryStream.ToArray">
<summary>将流内容写入一个字节数组，与 <see cref="P:System.IO.MemoryStream.Position"/> 无关。</summary>
<returns>一个新的字节数组。</returns>
    </member>
    <member name="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
<summary>使用从缓冲区读取的数据将字节块写入当前流。</summary>
<param name="buffer">写入数据的来源缓冲区。 </param>
<param name="offset"><paramref name="buffer"/>中从零开始基的字节偏移量，在这里开始复制字节到当前流。</param>
<param name="count">要写入的最大字节数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="buffer"/> 为 null。 </exception>
<exception cref="T:System.NotSupportedException">流不支持写入。有关更多信息，请查阅 <see cref="P:System.IO.Stream.CanWrite"/>。-或- 当前位置比 <paramref name="count"/> 字节更接近流末尾，并且容量不能更改。 </exception>
      <exception cref="T:System.ArgumentException">
缓冲区长度减去 <paramref name="offset"/> 的结果小于 <paramref name="count"/>。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="offset"/> 或 <paramref name="count"/> 为负数。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.ObjectDisposedException">当前流实例已关闭。 </exception>
    </member>
    <member name="M:System.IO.MemoryStream.WriteByte(System.Byte)">
<summary>向流的当前位置写入一个字节。</summary>
<param name="value">要写入的字节。 </param>
<exception cref="T:System.NotSupportedException">流不支持写入。有关更多信息，请查阅 <see cref="P:System.IO.Stream.CanWrite"/>。-或- 当前位置在流末尾，并且容量不能更改。 </exception>
<exception cref="T:System.ObjectDisposedException">当前流已关闭。 </exception>
    </member>
    <member name="M:System.IO.MemoryStream.WriteTo(System.IO.Stream)">
<summary>将该内存流的整体内容写入到另外一个流。</summary>
<param name="stream">要写入该内存流的流。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="stream"/> 为 null。 </exception>
<exception cref="T:System.ObjectDisposedException">当前流或目标流已关闭。 </exception>
    </member>
    <member name="T:System.IO.Path">
<summary>执行 <see cref="T:System.String"/> 实例的操作，包含文件或目录路径信息。这些操作以交叉平台方式执行。</summary>
    </member>
    <member name="F:System.IO.Path.AltDirectorySeparatorChar">
<summary>提供一个特定于平台的替换字符，用于在反映层次结构文件系统组织的路径字符串中分离目录层。</summary>
    </member>
    <member name="M:System.IO.Path.ChangeExtension(System.String,System.String)">
<summary>在被受信任的应用程序调用时，修改路径字符串的扩展名。</summary>
<returns>包含修改后路径信息的字符串。在基于 Windows的桌面平台上，如果<paramref name="path"/>为 null 或一个空字符串 ("")，路径信息将不做修改就返回。如果 <paramref name="extension"/> 为 null，返回的字符串包含移除了扩展名的指定路径。如果 <paramref name="path"/> 没有扩展名，并且 <paramref name="extension"/> 不为 null，返回的路径字符串包含附加到 <paramref name="path"/> 末尾的<paramref name="extension"/>。</returns>
<param name="path">要修改的路径信息。路径不能包含任何在 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 中定义的字符。 </param>
<param name="extension">新扩展名（有一个前导句号）。指定空值从 <paramref name="path"/> 移除一个存在的扩展名。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 包含 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 中已定义的一个或多个无效字符。</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String)">
<summary>在被受信任的应用程序调用时，组合两个路径字符串。</summary>
<returns>包含组合路径的字符串。如果指定路径中的一个是长度为零的字符串，该方法返回其他路径。如果 <paramref name="path2"/> 包含一个绝对路径，该方法返回<paramref name="path2"/>。</returns>
<param name="path1">第一个路径。 </param>
<param name="path2">第二个路径。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path1"/> 或 <paramref name="path2"/> 包含一个或多个在 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 中定义的无效字符。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path1"/> 或 <paramref name="path2"/> 为 null。 </exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String,System.String)">
<summary>在被受信任的应用程序调用时，把四个字符串组合为路径。</summary>
<returns>包含合并的路径的字符串。</returns>
<param name="path1">第一个要组合的路径。 </param>
<param name="path2">第二个要组合的路径。 </param>
<param name="path3">第三个要组合的路径。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="path1"/>、<paramref name="path2"/>、<paramref name="path3"/> 或 <paramref name="path4"/> 包含一个或多个在 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 中定义的无效字符。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path1"/>、<paramref name="path2"/>、<paramref name="path3"/> 或 <paramref name="path4"/> 为 null。 </exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String[])">
<summary>在被受信任的应用程序调用时，把一个字符串数组组合为路径。</summary>
<returns>包含合并的路径的字符串。</returns>
<param name="paths">一部分路径的数组。</param>
<exception cref="T:System.ArgumentException">数组中的一个字符串包含一个或多个 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 中定义的无效字符。 </exception>
<exception cref="T:System.ArgumentNullException">数组中的一个字符串为 null。 </exception>
    </member>
    <member name="F:System.IO.Path.DirectorySeparatorChar">
<summary>提供一个特定于平台的字符，用于在反映层次结构文件系统组织的路径字符串中分离目录层。</summary>
    </member>
    <member name="M:System.IO.Path.GetDirectoryName(System.String)">
<summary>在被受信任的应用程序调用时，返回指定路径字符串的目录信息。</summary>
<returns>包含 <paramref name="path"/> 目录信息的字符串，或者，如果 <paramref name="path"/> 表示一个根目录或为 null，则为 null。如果<paramref name="path"/>不包含路径信息，返回<see cref="F:System.String.Empty"/>。</returns>
<param name="path">一个文件或目录的路径。 </param>
<exception cref="T:System.ArgumentException"><paramref name="path"/> 参数包含无效字符，或是空的，或只包含空格。 </exception>
<exception cref="T:System.IO.PathTooLongException"><paramref name="path"/> 参数长于系统定义的最大长度。</exception>
    </member>
    <member name="M:System.IO.Path.GetExtension(System.String)">
<summary>在被受信任的应用程序调用时，返回路径字符串的扩展名。</summary>
<returns><see cref="T:System.String"/> 包含指定路径（包括"."）的扩展名，null 或 <see cref="F:System.String.Empty"/>。如果 <paramref name="path"/> 为 null，GetExtension 返回 null。如果 <paramref name="path"/> 没有扩展名信息，GetExtension返回空。</returns>
<param name="path">获取扩展名的路径字符串。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 包含 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 中已定义的一个或多个无效字符。  </exception>
    </member>
    <member name="M:System.IO.Path.GetFileName(System.String)">
<summary>在被受信任的应用程序调用时，返回指定路径字符串的文件名和扩展名。</summary>
<returns><see cref="T:System.String"/> 包含 <paramref name="path"/> 中目录最后一个字符后的字符。如果 <paramref name="path"/> 的最后一个字符是一个目录或卷分隔字符，方法返回 <see cref="F:System.String.Empty"/>。如果 <paramref name="path"/> 为 null，则该方法返回 null。</returns>
<param name="path">获取文件名和扩展名的路径字符串。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 包含 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 中已定义的一个或多个无效字符。 </exception>
    </member>
    <member name="M:System.IO.Path.GetFileNameWithoutExtension(System.String)">
<summary>在被受信任的应用程序调用时，返回指定路径字符串不包含扩展名的文件名。</summary>
<returns><see cref="T:System.String"/>包含<see cref="M:System.IO.Path.GetFileName(System.String)"/>返回的字符串，去除最后一个句号(.)和随后的所有字符。</returns>
<param name="path">文件的路径。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 包含 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 中已定义的一个或多个无效字符。</exception>
    </member>
    <member name="M:System.IO.Path.GetFullPath(System.String)">
<summary>在被受信任的应用程序调用时，返回指定路径字符串的绝对路径。</summary>
<returns>字符串包含<paramref name="path"/>的完全限定位置，如“rootdir\MyFile.txt”。</returns>
<param name="path">获取绝对路径信息的文件或路径。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/>是一个长度为零的字符串，只包含空格，或包含一个或多个<see cref="M:System.IO.Path.GetInvalidPathChars"/>中指定的无效字符。-或- 系统不能检索绝对路径。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所需的权限。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
    </member>
    <member name="M:System.IO.Path.GetInvalidPathChars">
<summary>在被受信任的应用程序调用时，获取一个包含路径名中不允许的字符的数组。</summary>
<returns>包含路径名中不允许的字符的数组。</returns>
    </member>
    <member name="M:System.IO.Path.GetPathRoot(System.String)">
<summary>获取指定路径的根目录信息。</summary>
<returns>包含<paramref name="path"/>根目录的字符串，如“rootdir”，或如果<paramref name="path"/>为 null，该值就为 null，或如果<paramref name="path"/>不包含根目录信息，则是一个空字符串。</returns>
<param name="path">获取根目录信息的路径。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/>包含一个或多个在<see cref="M:System.IO.Path.GetInvalidPathChars"/>中定义的无效字符。-或-<see cref="F:System.String.Empty"/>传递给<paramref name="path"/>。 </exception>
    </member>
    <member name="M:System.IO.Path.GetTempFileName">
<summary>在磁盘上创建一个唯一命名的，零字节临时文件，返回文件的完整路径。</summary>
<returns>包含临时文件完整路径的<see cref="T:System.String"/>。</returns>
<exception cref="T:System.IO.IOException">发生一个 I/O 错误，如没有提供唯一的临时文件名。-或- 该方法不能创建一个临时文件。</exception>
    </member>
    <member name="M:System.IO.Path.GetTempPath">
<summary>返回当前系统临时文件夹的路径。</summary>
<returns>包含临时目录路径信息的<see cref="T:System.String"/>。</returns>
<exception cref="T:System.Security.SecurityException">调用方没有所需的权限。 </exception>
    </member>
    <member name="M:System.IO.Path.HasExtension(System.String)">
<summary>在被受信任的应用程序调用时，确定路径是否包括一个文件扩展名。</summary>
<returns>如果路径中最后一个路径分隔符(\\ 或 /) 或卷分隔符（:）后的字符包含句号（.），并且后面跟有一个或多个字符，则为 true，否则为 false。</returns>
<param name="path">用于搜索扩展名的路径。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 包含 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 中已定义的一个或多个无效字符。 </exception>
    </member>
    <member name="M:System.IO.Path.IsPathRooted(System.String)">
<summary>获取一个值，该值指示指定的路径字符串是否包含根。</summary>
<returns>如果 <paramref name="path"/> 包含根，则为 true；否则为 false。</returns>
<param name="path">要测试的路径。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 包含 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 中已定义的一个或多个无效字符。 </exception>
    </member>
    <member name="F:System.IO.Path.PathSeparator">
<summary>用于在环境变量中分离路径字符串的平台特定分隔符。</summary>
    </member>
    <member name="F:System.IO.Path.VolumeSeparatorChar">
<summary>提供一个平台特定的卷分隔符。</summary>
    </member>
    <member name="T:System.IO.PathTooLongException">
<summary>当路径名或文件名长于系统指定的最大长度时，引发异常。</summary>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor">
<summary>初始化 <see cref="T:System.IO.PathTooLongException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.String)">
<summary>初始化 <see cref="T:System.IO.PathTooLongException"/> 类的新实例，消息字符串设置为 <paramref name="message"/>，HRESULT设置为 COR_E_PATHTOOLONG。</summary>
<param name="message">描述该错误的 <see cref="T:System.String"/>。<paramref name="message"/> 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。 </param>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IO.PathTooLongException"/> 类的新实例。</summary>
<param name="message">描述该错误的 <see cref="T:System.String"/>。<paramref name="message"/> 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。 </param>
<param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="T:System.IO.SearchOption">
<summary>指定是否搜索当前目录，或当前目录和所有子目录。 </summary>
    </member>
    <member name="F:System.IO.SearchOption.TopDirectoryOnly">
<summary>在搜索中只包括当前目录。</summary>
    </member>
    <member name="F:System.IO.SearchOption.AllDirectories">
<summary>在一个搜索操作中包括当前目录和所有子目录。该选项包括搜索中的重解析点如驱动器和符号链接。</summary>
    </member>
    <member name="T:System.IO.SeekOrigin">
<summary>提供表示流中的参考点以供进行查找的字段。</summary>
    </member>
    <member name="F:System.IO.SeekOrigin.Begin">
<summary>指定流的起始。</summary>
    </member>
    <member name="F:System.IO.SeekOrigin.Current">
<summary>指定流的当前位置。</summary>
    </member>
    <member name="F:System.IO.SeekOrigin.End">
<summary>指定指定流的末尾。</summary>
    </member>
    <member name="T:System.IO.Stream">
<summary>提供对字节序列的常规视图。</summary>
    </member>
    <member name="M:System.IO.Stream.#ctor">
<summary>初始化 <see cref="T:System.IO.Stream"/> 类的新实例。 </summary>
    </member>
    <member name="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
<summary>开始异步读操作。</summary>
<returns>表示异步读的<see cref="T:System.IAsyncResult"/>，仍可挂起。</returns>
<param name="buffer">读数据要送到的缓冲区。 </param>
<param name="offset"><paramref name="buffer"/>中从零开始的字节偏移量，在这里开始存储从当前流读取的数据。 </param>
<param name="count">要读取的最大字节数。 </param>
<param name="callback">选择性异步回叫，完成读取时调用。 </param>
<param name="state">用户提供的对象从其他请求中区分出这个特别的异步读取请求。 </param>
<exception cref="T:System.IO.IOException">试图异步读取经过流末尾，或发生一个磁盘错误。 </exception>
<exception cref="T:System.ArgumentException">一个或多个参数无效。 </exception>
<exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。 </exception>
<exception cref="T:System.NotSupportedException">当前流实现不支持读取操作。 </exception>
    </member>
    <member name="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
<summary>开始异步写操作。</summary>
<returns>表示异步写的 IAsyncResult，仍可挂起。</returns>
<param name="buffer">写入数据的来源缓冲区。 </param>
<param name="offset">开始写入的<paramref name="buffer"/>的字节偏移量。 </param>
<param name="count">要写入的最大字节数。 </param>
<param name="callback">选择性异步回叫，完成写入时调用。 </param>
<param name="state">用户提供的对象从其他请求中区分出这个特别的异步读取请求。 </param>
<exception cref="T:System.IO.IOException">试图异步读取经过流末尾，或发生一个磁盘错误。 </exception>
<exception cref="T:System.ArgumentException">一个或多个参数无效。 </exception>
<exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。 </exception>
<exception cref="T:System.NotSupportedException">当前 Stream 实现不支持写操作。 </exception>
    </member>
    <member name="P:System.IO.Stream.CanRead">
<summary>在重写一个派生类时，获取指示当前流是否支持读取的值。</summary>
<returns>如果流支持读取为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IO.Stream.CanSeek">
<summary>在重写一个派生类时，获取指示当前流是否支持查找的值。</summary>
<returns>如果流支持查找为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IO.Stream.CanTimeout">
<summary>获取一个确定当前流能否超时的值。</summary>
<returns>一个确定当前流能否超时的值。</returns>
    </member>
    <member name="P:System.IO.Stream.CanWrite">
<summary>在重写一个派生类时，获取指示当前流是否支持写入的值。</summary>
<returns>如果流支持写入为 true；否则为 false。</returns>
    </member>
    <member name="M:System.IO.Stream.Close">
<summary>关闭当前流并释放与当前流关联的任何资源（如套接字和文件句柄）。</summary>
    </member>
    <member name="M:System.IO.Stream.CopyTo(System.IO.Stream)">
<summary>从当前流读取所有字节并向目标流写入它们。</summary>
<param name="destination">将包含当前流内容的流。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="destination"/> 为 null。</exception>
<exception cref="T:System.NotSupportedException">当前流不支持读取。-或-<paramref name="destination"/>不支持写入。</exception>
<exception cref="T:System.ObjectDisposedException">在调用 <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)"/> 方法前当前流或 <paramref name="destination"/> 已关闭。</exception>
<exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
<summary>从当前流读取所有字节并使用指定缓冲区大小向目标流写入它们。</summary>
<param name="destination">将包含当前流内容的流。</param>
<param name="bufferSize">缓冲区的大小。该值必须大于零。默认大小是4096。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="destination"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="bufferSize"/>为负数或零。</exception>
<exception cref="T:System.NotSupportedException">当前流不支持读取。-或-<paramref name="destination"/>不支持写入。</exception>
<exception cref="T:System.ObjectDisposedException">在调用 <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)"/> 方法前当前流或 <paramref name="destination"/> 已关闭。</exception>
<exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.Stream.Dispose">
<summary>释放<see cref="T:System.IO.Stream"/>占用的所有资源。</summary>
    </member>
    <member name="M:System.IO.Stream.Dispose(System.Boolean)">
<summary>释放由 <see cref="T:System.IO.Stream"/> 使用的未托管的资源，并且可以选择释放托管的资源。</summary>
<param name="disposing">如果释放托管和未托管资源，则为 true；如果只释放未托管资源，则为 false。</param>
    </member>
    <member name="M:System.IO.Stream.EndRead(System.IAsyncResult)">
<summary>等待挂起的异步读取完成。</summary>
<returns>从流中读取的字节数，在零（0）和您请求的字节数之间。流只在流末尾返回零 (0)，否则应一直阻止到至少有一个字节可用为止。</returns>
<param name="asyncResult">对要结束的挂起异步请求的引用。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="asyncResult"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="asyncResult"/>并非源自当前流上的<see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/>方法。 </exception>
<exception cref="T:System.IO.IOException">此流关闭或发生内部错误。</exception>
    </member>
    <member name="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
<summary>结束异步写操作。</summary>
<param name="asyncResult">对未完成的异步 I/O 请求的引用。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="asyncResult"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="asyncResult"/>并非源自当前流上的<see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/>方法。 </exception>
<exception cref="T:System.IO.IOException">此流关闭或发生内部错误。</exception>
    </member>
    <member name="M:System.IO.Stream.Flush">
<summary>在派生类进行重写时，将清除该流的所有缓冲区，并使得所有缓冲数据被写入到基础设备。</summary>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="P:System.IO.Stream.Length">
<summary>在派生类中重写时，获取流的字节长度。</summary>
<returns>用字节表示流长度的长值。</returns>
<exception cref="T:System.NotSupportedException">从 Stream 派生来的类不支持查找。 </exception>
<exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。 </exception>
    </member>
    <member name="F:System.IO.Stream.Null">
<summary>无后备存储区的 Stream 类。</summary>
    </member>
    <member name="P:System.IO.Stream.Position">
<summary>在派生类中重写时，获取或设置当前流的位置。</summary>
<returns>流中的当前位置。</returns>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.NotSupportedException">流不支持查找。 </exception>
<exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。 </exception>
    </member>
    <member name="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
<summary>在派生类中重写时，从当前流读取字节序列并且将流的位置向前移动所读取的字节数。</summary>
<returns>读入缓冲区中的总字节数。如果当前可用的字节数没有请求的字节数那么多，则总字节数可能小于请求的字节数，或者如果已到达流的末尾，则为零 (0)。</returns>
<param name="buffer">一个字节数组。该方法有返回值时，缓冲区包括指定的字节数组，数组中在<paramref name="offset"/>和(<paramref name="offset"/> + <paramref name="count"/> - 1）之间的值由从当前源读取的字节替代。 </param>
<param name="offset"><paramref name="buffer"/> 中从零开始的字节偏移量，在这里开始存储从当前流读取的数据。 </param>
<param name="count">要从当前流读取的最大字节数。 </param>
<exception cref="T:System.ArgumentException"><paramref name="offset"/>和<paramref name="count"/>的和大于缓冲区长度。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="buffer"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="offset"/> 或 <paramref name="count"/> 为负。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.NotSupportedException">流不支持读取。 </exception>
<exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。 </exception>
    </member>
    <member name="M:System.IO.Stream.ReadByte">
<summary>从流中读取有一个字节，并在流中向前移动一个字节的位置，或在流末尾返回-1。</summary>
<returns>无符号字节转换为一个 Int32，或在流末尾为 -1。</returns>
<exception cref="T:System.NotSupportedException">流不支持读取。 </exception>
<exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。 </exception>
    </member>
    <member name="P:System.IO.Stream.ReadTimeout">
<summary>获取或设置一个毫秒级的值，可以确定在超时前流尝试读取的时间。 </summary>
<returns>一个毫秒级的值，可以确定在超时前流尝试读取的时间。</returns>
<exception cref="T:System.InvalidOperationException"><see cref="P:System.IO.Stream.ReadTimeout"/>方法始终引发<see cref="T:System.InvalidOperationException"/>。 </exception>
    </member>
    <member name="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
<summary>在派生类中重写时，在当前流设置位置。</summary>
<returns>当前流的新位置。</returns>
<param name="offset">相对于<paramref name="origin"/>参数的字节偏移量。 </param>
<param name="origin">类型<see cref="T:System.IO.SeekOrigin"/>的值指示用于获取新位置的引用点。 </param>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.NotSupportedException">流不支持查找，比如如果流由一个管道或控制台输出构造。 </exception>
<exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。 </exception>
    </member>
    <member name="M:System.IO.Stream.SetLength(System.Int64)">
<summary>在派生类中重写时，设置当前流的长度。</summary>
<param name="value">当前流需要的字节长度。 </param>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.NotSupportedException">流不支持写入和查找，比如如果流由一个管道或控制台输出构造。 </exception>
<exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。 </exception>
    </member>
    <member name="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
<summary>在派生类中重写时，向当前流写入字节序列并将流的当前位置向前移动写入的字节数</summary>
<param name="buffer">一个字节数组。此方法将 <paramref name="count"/> 个字节从 <paramref name="buffer"/> 复制到当前流。 </param>
<param name="offset"><paramref name="buffer"/>中从零开始基的字节偏移量，在这里开始复制字节到当前流。 </param>
<param name="count">要写入当前流的字节数。 </param>
    </member>
    <member name="M:System.IO.Stream.WriteByte(System.Byte)">
<summary>向流中的当前位置写一个字节，流中的位置向前移动一个字节。</summary>
<param name="value">要写入流的字节。 </param>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.NotSupportedException">该流不支持写入，或者该流已关闭。 </exception>
<exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。 </exception>
    </member>
    <member name="P:System.IO.Stream.WriteTimeout">
<summary>获取或设置一个毫秒级的值，可以确定在超时前流尝试写入的时间。 </summary>
<returns>一个毫秒级的值，可以确定在超时前流尝试写入的时间。</returns>
<exception cref="T:System.InvalidOperationException"><see cref="P:System.IO.Stream.WriteTimeout"/> 方法始终引发 <see cref="T:System.InvalidOperationException"/>。 </exception>
    </member>
    <member name="T:System.IO.StreamReader">
<summary>实现一个 <see cref="T:System.IO.TextReader"/>，从特殊编码的字节流读取字节。</summary>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream)">
<summary>使用指定流初始化 <see cref="T:System.IO.StreamReader"/> 类的新实例。</summary>
<param name="stream">要读取的流。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="stream"/> 不支持读取。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="stream"/> 为 null。 </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Boolean)">
<summary>为指定的流初始化 <see cref="T:System.IO.StreamReader"/> 类的新实例，使用指定的字节顺序标记检测选项。</summary>
<param name="stream">要读取的流。 </param>
<param name="detectEncodingFromByteOrderMarks">如果在文件头查找字节顺序标记，则为 true；如果使用 <see cref="P:System.Text.Encoding.UTF8"/> 编码，则为 false。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="stream"/> 不支持读取。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="stream"/> 为 null。 </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)">
<summary>为指定的流初始化 <see cref="T:System.IO.StreamReader"/> 类的新实例，使用指定的字符编码。</summary>
<param name="stream">要读取的流。 </param>
<param name="encoding">要使用的字符编码。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="stream"/> 不支持读取。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="stream"/> 或 <paramref name="encoding"/> 为 null。 </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
<summary>为指定的流初始化 <see cref="T:System.IO.StreamReader"/> 类的新实例，使用指定的字节编码和字节顺序标记检测选项。</summary>
<param name="stream">要读取的流。 </param>
<param name="encoding">要使用的字符编码。 </param>
<param name="detectEncodingFromByteOrderMarks">如果在文件头查找字节顺序标记，则为 true；否则为 false。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="stream"/> 不支持读取。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="stream"/> 或 <paramref name="encoding"/> 为 null。 </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
<summary>为指定的流初始化 <see cref="T:System.IO.StreamReader"/> 类的新实例，使用指定的字节编码，字节顺序标记检测选项和缓冲区大小。</summary>
<param name="stream">要读取的流。 </param>
<param name="encoding">要使用的字符编码。 </param>
<param name="detectEncodingFromByteOrderMarks">如果在文件头查找字节顺序标记，则为 true；否则为 false。 </param>
<param name="bufferSize">缓冲区最小大小。 </param>
<exception cref="T:System.ArgumentException">流不支持读取。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="stream"/> 或 <paramref name="encoding"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="bufferSize"/> 小于或等于零。 </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32,System.Boolean)">
<summary>为指定的流初始化 <see cref="T:System.IO.StreamReader"/> 类的新实例，使用指定的字节编码，字节顺序标记检测选项，缓冲区大小和指示是否打开流的值。</summary>
<param name="stream">要读取的流。</param>
<param name="encoding">要使用的字符编码。</param>
<param name="detectEncodingFromByteOrderMarks">如果在文件头查找字节顺序标记，则为 true；否则为 false。</param>
<param name="bufferSize">缓冲区最小大小。</param>
<param name="leaveOpen">流打开为 true，否则为 flase。</param>
<exception cref="T:System.ArgumentException">流不支持读取。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="stream"/> 或 <paramref name="encoding"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="bufferSize"/> 小于或等于零。 </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String)">
<summary>在被受信任的应用程序调用时，初始化指定文件名的 <see cref="T:System.IO.StreamReader"/> 类的新实例。</summary>
<param name="path">要读取的完整文件路径。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 为空字符串 ("")。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.FileNotFoundException">无法找到该文件。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效；例如，它可能引用了一个未映射的驱动器。 </exception>
      <exception cref="T:System.IO.IOException">
<paramref name="path"/> 包括不正确或无效的文件名、目录名或卷标的语法。 </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Boolean)">
<summary>在被受信任的应用程序调用时，初始化指定文件名的 <see cref="T:System.IO.StreamReader"/> 类的新实例，使用指定字节顺序标记检测选项。</summary>
<param name="path">要读取的完整文件路径。 </param>
<param name="detectEncodingFromByteOrderMarks">如果在文件头查找字节顺序标记，则为 true；否则为 false。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 为空字符串 ("")。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.FileNotFoundException">无法找到该文件。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效；例如，它可能引用了一个未映射的驱动器。 </exception>
      <exception cref="T:System.IO.IOException">
<paramref name="path"/> 包括不正确或无效的文件名、目录名或卷标的语法。 </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding)">
<summary>在被受信任的应用程序调用时，初始化指定文件名的 <see cref="T:System.IO.StreamReader"/> 类的新实例，使用指定的字符编码。</summary>
<param name="path">要读取的完整文件路径。 </param>
<param name="encoding">要使用的字符编码。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 为空字符串 ("")。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 或 <paramref name="encoding"/> 为 null。 </exception>
<exception cref="T:System.IO.FileNotFoundException">无法找到该文件。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效；例如，它可能引用了一个未映射的驱动器。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 包括不正确或无效的文件名、目录名或卷标的语法。 </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean)">
<summary>在被受信任的应用程序调用时，初始化指定文件名的<see cref="T:System.IO.StreamReader"/>类的新实例，使用指定的字符编码和字节顺序标记检测选项。</summary>
<param name="path">要读取的完整文件路径。 </param>
<param name="encoding">要使用的字符编码。 </param>
<param name="detectEncodingFromByteOrderMarks">如果在文件头查找字节顺序标记，则为 true；否则为 false。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 为空字符串 ("")。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 或 <paramref name="encoding"/> 为 null。 </exception>
<exception cref="T:System.IO.FileNotFoundException">无法找到该文件。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效；例如，它可能引用了一个未映射的驱动器。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 包括不正确或无效的文件名、目录名或卷标的语法。 </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
<summary>在被受信任的应用程序调用时，使用指定的字符编码，字节顺序标记检测选项和缓冲区大小，为指定的文件名初始化 <see cref="T:System.IO.StreamReader"/> 类的新实例。</summary>
<param name="path">要读取的完整文件路径。 </param>
<param name="encoding">要使用的字符编码。 </param>
<param name="detectEncodingFromByteOrderMarks">如果在文件头查找字节顺序标记，则为 true；否则为 false。 </param>
<param name="bufferSize">缓冲区最小大小（以16 位字符数表示）。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 为空字符串 ("")。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 或 <paramref name="encoding"/> 为 null。 </exception>
<exception cref="T:System.IO.FileNotFoundException">无法找到该文件。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效；例如，它可能引用了一个未映射的驱动器。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="path"/> 包括不正确或无效的文件名、目录名或卷标的语法。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="buffersize"/> 小于或等于零。 </exception>
    </member>
    <member name="P:System.IO.StreamReader.BaseStream">
<summary>在被受信任的应用程序调用时，返回基础流。</summary>
<returns>基础流。</returns>
    </member>
    <member name="M:System.IO.StreamReader.Close">
<summary>在被受信任的应用程序调用时，关闭<see cref="T:System.IO.StreamReader"/>对象和基础流，并释放与读取器关联的所有系统资源。</summary>
    </member>
    <member name="P:System.IO.StreamReader.CurrentEncoding">
<summary>在被受信任的应用程序调用时，获取当前<see cref="T:System.IO.StreamReader"/>对象正在使用的当前字符编码。</summary>
<returns>当前读取器使用的当前字符编码。在首次调用 <see cref="T:System.IO.StreamReader"/> 的 <see cref="Overload:System.IO.StreamReader.Read"/>方 法后，值可以不同，因为在首次调用 <see cref="Overload:System.IO.StreamReader.Read"/> 方法后才完成编码自动检测。</returns>
    </member>
    <member name="M:System.IO.StreamReader.DiscardBufferedData">
<summary>清除内部缓冲区。</summary>
    </member>
    <member name="M:System.IO.StreamReader.Dispose(System.Boolean)">
<summary>关闭基础流，释放由 <see cref="T:System.IO.StreamReader"/> 使用的未托管的资源，并且可以选择释放托管的资源。</summary>
<param name="disposing">如果释放托管和未托管资源，则为 true；如果只释放未托管资源，则为 false。 </param>
    </member>
    <member name="P:System.IO.StreamReader.EndOfStream">
<summary>在被受信任的应用程序调用时，获取一个指示当前流位置是否在流末尾的值。</summary>
<returns>如果当前流位置在流末尾，返回 true，否则返回 false。</returns>
<exception cref="T:System.ObjectDisposedException">基础流已处理完毕。</exception>
    </member>
    <member name="F:System.IO.StreamReader.Null">
<summary>环绕一个空流的 <see cref="T:System.IO.StreamReader"/> 对象。</summary>
    </member>
    <member name="M:System.IO.StreamReader.Peek">
<summary>在被受信任的应用程序调用时，返回下一个有效的字符但不使用它。</summary>
<returns>一个表示下一个要读取的字符的整数；如果没有更多可读取的字符或该流不支持查找，则为 -1。</returns>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.StreamReader.Read">
<summary>在被受信任的应用程序调用时，从输入流读取下一个字符并将字符位置向前移动一个字符。</summary>
<returns>输入流的下一个字符，由一个 <see cref="T:System.Int32"/> 对象表示，或-1，如果没有更多有效的字符。</returns>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)">
<summary>在被受信任的应用程序调用时，从当前流读取 <paramref name="count"/> 字符的最大值到 <paramref name="buffer"/>，从 <paramref name="index"/> 开始。</summary>
<returns>已经读取的字符数，或者如果在流末尾和没有读取数据时为 0。数量将小于或等于 <paramref name="count"/> 参数，取决于流中的数据是否有效。</returns>
<param name="buffer">该方法有返回值时，包含指定的字节数组，数组中在 <paramref name="index"/> 和（<paramref name="index "/> + <paramref name="count"/> - 1）之间的值，由从当前源读取的字符替代。 </param>
<param name="index">开始写入的 <paramref name="buffer"/> 的索引。 </param>
<param name="count">要读取的最大字节数。 </param>
<exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index"/> 小于 <paramref name="count"/>。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="buffer"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 或 <paramref name="count"/> 为负。 </exception>
<exception cref="T:System.IO.IOException">发生一个 I/O 错误，如流被关闭。 </exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadLine">
<summary>在被受信任的应用程序调用时，从当前流读取一行字符并将数据作为字符串返回。</summary>
<returns>输入流的下一行，或如果到达输入流的末尾，为 null。</returns>
<exception cref="T:System.OutOfMemoryException">内存不足，无法为返回的字符串分配缓冲区。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadToEnd">
<summary>在被受信任的应用程序调用时，从当前位置读取流到流末尾。</summary>
<returns>字符串形式的流的其余部分（从当前位置到末尾）。如果当前位置在流末尾，返回空字符串 ("")。</returns>
<exception cref="T:System.OutOfMemoryException">内存不足，无法为返回的字符串分配缓冲区。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="T:System.IO.StreamWriter">
<summary>实现一个<see cref="T:System.IO.TextWriter"/>，向特殊编码的流中写入字符。</summary>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream)">
<summary>初始化指定流的<see cref="T:System.IO.StreamWriter"/>类的新实例，使用 UTF-8 编码和默认缓冲区大小。</summary>
<param name="stream">要写入的流。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="stream"/> 不可写。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="stream"/> 为 null。 </exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
<summary>初始化指定流的<see cref="T:System.IO.StreamWriter"/>类的新实例，使用指定编码和默认缓冲区大小。</summary>
<param name="stream">要写入的流。 </param>
<param name="encoding">要使用的字符编码。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="stream"/> 或 <paramref name="encoding"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="stream"/> 不可写。 </exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)">
<summary>初始化指定流的 <see cref="T:System.IO.StreamWriter"/> 类的新实例，使用指定编码和缓冲区大小。</summary>
<param name="stream">要写入的流。 </param>
<param name="encoding">要使用的字符编码。 </param>
<param name="bufferSize">缓冲区大小。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="stream"/> 或 <paramref name="encoding"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="bufferSize"/> 为负数。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="stream"/> 不可写。 </exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)">
<summary>初始化指定流的 <see cref="T:System.IO.StreamWriter"/> 类的新实例，使用指定的字节编码，缓冲区大小和指示是否打开流的值。</summary>
<param name="stream">要写入的流。</param>
<param name="encoding">要使用的字符编码。</param>
<param name="bufferSize">缓冲区大小。</param>
<param name="leaveOpen">流打开为 true，否则为 flase。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="stream"/> 或 <paramref name="encoding"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="bufferSize"/> 为负数。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="stream"/> 不可写。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String)">
<summary>在被受信任的应用程序调用时，初始化指定路径上指定文件的 <see cref="T:System.IO.StreamWriter"/> 类的新实例，使用默认编码和缓冲区大小。</summary>
<param name="path">要写入的完整文件路径。<paramref name="path"/> 可以是一个文件名。 </param>
<exception cref="T:System.UnauthorizedAccessException">访问被拒绝。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 为空字符串 ("")。-或- <paramref name="path"/> 包含一个系统设备（com1, com2, 等等）的名称。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效；例如，它可能引用了一个未映射的驱动器。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
      <exception cref="T:System.IO.IOException">
<paramref name="path"/> 包含不正确或无效的文件名、目录名或卷标的语法。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean)">
<summary>在被受信任的应用程序调用时，初始化指定路径上指定文件的 <see cref="T:System.IO.StreamWriter"/> 类的新实例，使用默认编码和缓冲区大小。如果该文件存在，则可以将其覆盖或向其追加。如果文件不存在，该构造函数创建一个新文件。</summary>
<param name="path">要写入的完整文件路径。 </param>
<param name="append">向已存在的文件添加数据为 true，覆盖已存在的文件为 false。如果指定文件不存在，创建一个新文件，与该参数的值无关。 </param>
<exception cref="T:System.UnauthorizedAccessException">访问被拒绝。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 为空。-或- <paramref name="path"/> 包含一个系统设备（com1, com2, 等等）的名称。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效；例如，它可能引用了一个未映射的驱动器。 </exception>
      <exception cref="T:System.IO.IOException">
<paramref name="path"/> 包含不正确或无效的文件名、目录名或卷标的语法。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding)">
<summary>在被受信任的应用程序调用时，初始化指定路径上指定文件的 <see cref="T:System.IO.StreamWriter"/> 类的新实例，使用指定编码和默认缓冲区大小。如果该文件存在，则可以将其覆盖或向其追加。如果文件不存在，该构造函数创建一个新文件。</summary>
<param name="path">要写入的完整文件路径。 </param>
<param name="append">向已存在的文件添加数据为 true，覆盖已存在的文件为 false。如果指定文件不存在，创建一个新文件，与该参数的值无关。 </param>
<param name="encoding">要使用的字符编码。 </param>
<exception cref="T:System.UnauthorizedAccessException">访问被拒绝。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 为空。-或-<paramref name="path"/> 包含一个系统设备（com1, com2, 等等）的名称。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效；例如，它可能引用了一个未映射的驱动器。 </exception>
      <exception cref="T:System.IO.IOException">
<paramref name="path"/> 包含不正确或无效的文件名、目录名或卷标的语法。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,System.Int32)">
<summary>在被受信任的应用程序调用时，初始化指定路径上指定文件的<see cref="T:System.IO.StreamWriter"/>类的新实例，使用指定编码和缓冲区大小。如果该文件存在，则可以将其覆盖或向其追加。如果文件不存在，该构造函数创建一个新文件。</summary>
<param name="path">要写入的完整文件路径。 </param>
<param name="append">确定是否添加数据到文件。如果文件存在并且 <paramref name="append"/> 为 false，覆盖文件。如果文件存在并且 <paramref name="append"/> 为 true，添加数据到文件。否则，创建一个新文件。 </param>
<param name="encoding">要使用的字符编码。 </param>
<param name="bufferSize">缓冲区大小。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 为空字符串 ("")。-或-<paramref name="path"/> 包含一个系统设备（com1, com2, 等等）的名称。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 或 <paramref name="encoding"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="bufferSize"/> 为负数。 </exception>
      <exception cref="T:System.IO.IOException">
<paramref name="path"/> 包含不正确或无效的文件名、目录名或卷标的语法。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
<exception cref="T:System.UnauthorizedAccessException">访问被拒绝。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效；例如，它可能引用了一个未映射的驱动器。 </exception>
<exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。 </exception>
    </member>
    <member name="P:System.IO.StreamWriter.AutoFlush">
<summary>获取或设置一个指示<see cref="T:System.IO.StreamWriter"/>是否在每次调用<see cref="M:System.IO.StreamWriter.Write(System.Char)"/>后刷新缓冲区到基础流的值。</summary>
<returns>如果强制 <see cref="T:System.IO.StreamWriter"/> 刷新其缓冲区，则为 true，否则为 false。</returns>
    </member>
    <member name="P:System.IO.StreamWriter.BaseStream">
<summary>在被受信任的应用程序调用时，获取同后备存储区连接的基础流。</summary>
<returns>StreamWriter 要写入的流。</returns>
    </member>
    <member name="M:System.IO.StreamWriter.Close">
<summary>在被受信任的应用程序调用时，关闭当前 StreamWriter 对象和基础流。</summary>
<exception cref="T:System.Text.EncoderFallbackException">当前编码不支持显示半个 Unicode 代理项对。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Dispose(System.Boolean)">
<summary>释放由 <see cref="T:System.IO.StreamWriter"/> 使用的未托管的资源，并且可以选择释放托管的资源。</summary>
<param name="disposing">如果释放托管和未托管资源，则为 true；如果只释放未托管资源，则为 false。 </param>
<exception cref="T:System.Text.EncoderFallbackException">当前编码不支持显示半个 Unicode 代理项对。</exception>
    </member>
    <member name="P:System.IO.StreamWriter.Encoding">
<summary>在被受信任的应用程序调用时，获取写输出使用的<see cref="T:System.Text.Encoding"/>。</summary>
<returns>当前实例构造函数中指定的<see cref="T:System.Text.Encoding"/>，或如果未指定编码，使用<see cref="T:System.Text.UTF8Encoding"/>。</returns>
    </member>
    <member name="M:System.IO.StreamWriter.Flush">
<summary>清理当前编写器的所有缓冲区，并使所有缓冲数据写入基础流。</summary>
<exception cref="T:System.ObjectDisposedException">当前写入器已关闭。 </exception>
<exception cref="T:System.IO.IOException">出现 I/O 错误。 </exception>
<exception cref="T:System.Text.EncoderFallbackException">当前编码不支持显示半个 Unicode 代理项对。 </exception>
    </member>
    <member name="F:System.IO.StreamWriter.Null">
<summary>提供 StreamWriter，它不带任何可写入但无法从中读取的后备存储区。</summary>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char)">
<summary>在被受信任的应用程序调用时，向流写入一个字符。</summary>
<param name="value">要写入下一个流的字符。 </param>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
      <exception cref="T:System.ObjectDisposedException">
<see cref="P:System.IO.StreamWriter.AutoFlush"/> 为 true 或 <see cref="T:System.IO.StreamWriter"/> 缓冲区已满，并且当前编写器已关闭。 </exception>
      <exception cref="T:System.NotSupportedException">
<see cref="P:System.IO.StreamWriter.AutoFlush"/> 为 true 或 <see cref="T:System.IO.StreamWriter"/> 缓冲区已满，并且由于 <see cref="T:System.IO.StreamWriter"/> 位于基础固定大小流的结尾，缓冲区的内容无法写入该流。 </exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char[])">
<summary>在被受信任的应用程序调用时，向流写入一个字符数组。</summary>
<param name="buffer">包含要写入数据的字符数组。如果<paramref name="buffer"/>为 null，不写入。 </param>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
      <exception cref="T:System.ObjectDisposedException">
<see cref="P:System.IO.StreamWriter.AutoFlush"/> 为 true 或 <see cref="T:System.IO.StreamWriter"/> 缓冲区已满，并且当前编写器已关闭。 </exception>
      <exception cref="T:System.NotSupportedException">
<see cref="P:System.IO.StreamWriter.AutoFlush"/> 为 true 或 <see cref="T:System.IO.StreamWriter"/> 缓冲区已满，并且由于 <see cref="T:System.IO.StreamWriter"/> 位于基础固定大小流的结尾，缓冲区的内容无法写入该流。 </exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char[],System.Int32,System.Int32)">
<summary>在被受信任的应用程序调用时，向流写入一个字符子数组。</summary>
<param name="buffer">包含要写入数据的字符数组。 </param>
<param name="index">开始写入的 <paramref name="buffer"/> 的索引。 </param>
<param name="count">要从 <paramref name="buffer"/> 读取的字节数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="buffer"/> 为 null。 </exception>
<exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index"/> 小于 <paramref name="count"/>。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 或 <paramref name="count"/> 为负。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
      <exception cref="T:System.ObjectDisposedException">
<see cref="P:System.IO.StreamWriter.AutoFlush"/> 为 true 或 <see cref="T:System.IO.StreamWriter"/> 缓冲区已满，并且当前编写器已关闭。 </exception>
      <exception cref="T:System.NotSupportedException">
<see cref="P:System.IO.StreamWriter.AutoFlush"/> 为 true 或 <see cref="T:System.IO.StreamWriter"/> 缓冲区已满，并且由于 <see cref="T:System.IO.StreamWriter"/> 位于基础固定大小流的结尾，缓冲区的内容无法写入该流。 </exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String)">
<summary>在被受信任的应用程序调用时，向流写入一个字符串。</summary>
<param name="value">要写入流的字符串。如果<paramref name="value"/>为 null，不写入。 </param>
      <exception cref="T:System.ObjectDisposedException">
<see cref="P:System.IO.StreamWriter.AutoFlush"/> 为 true 或 <see cref="T:System.IO.StreamWriter"/> 缓冲区已满，并且当前编写器已关闭。 </exception>
      <exception cref="T:System.NotSupportedException">
<see cref="P:System.IO.StreamWriter.AutoFlush"/> 为 true 或 <see cref="T:System.IO.StreamWriter"/> 缓冲区已满，并且由于 <see cref="T:System.IO.StreamWriter"/> 位于基础固定大小流的结尾，缓冲区的内容无法写入该流。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="T:System.IO.StringReader">
<summary>实现从字符串读取的<see cref="T:System.IO.TextReader"/>。</summary>
    </member>
    <member name="M:System.IO.StringReader.#ctor(System.String)">
<summary>初始化从指定字符串读取的<see cref="T:System.IO.StringReader"/>类的新实例。</summary>
<param name="s"> <see cref="T:System.IO.StringReader"/>的字符串应初始化。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="s"/> 参数为 null。 </exception>
    </member>
    <member name="M:System.IO.StringReader.Close">
<summary>关闭<see cref="T:System.IO.StringReader"/>。</summary>
    </member>
    <member name="M:System.IO.StringReader.Dispose(System.Boolean)">
<summary>释放由 <see cref="T:System.IO.StringReader"/> 使用的未托管的资源，并且可以选择释放托管的资源。</summary>
<param name="disposing">如果释放托管和未托管资源，则为 true；如果只释放未托管资源，则为 false。 </param>
    </member>
    <member name="M:System.IO.StringReader.Peek">
<summary>返回下一个有效的字符但是不使用它。</summary>
<returns>一个表示下一个要读取的字符的整数；如果没有更多可读取的字符或该流不支持查找，则为 -1。</returns>
<exception cref="T:System.ObjectDisposedException">当前读取器已关闭。 </exception>
    </member>
    <member name="M:System.IO.StringReader.Read">
<summary>从输入字符串读取下一个字符，将字符位置向前移动一个字符。</summary>
<returns>从基础字符串开始的下一个字符，或如果没有更多有效字符，则为 -1。</returns>
<exception cref="T:System.ObjectDisposedException">当前读取器已关闭。 </exception>
    </member>
    <member name="M:System.IO.StringReader.Read(System.Char[],System.Int32,System.Int32)">
<summary>从输入字符串地区字符块，并将字符位置向前移动<paramref name="count"/>。</summary>
<returns>读入缓冲区的总字符数。如果很多字符当前不可用的话，或许小于请求的字节数，或者如果达到基础字符串末尾将为零（0）。</returns>
<param name="buffer">该方法有返回值时，包含指定的字节数组，数组中在<paramref name="index"/>和（<paramref name="index"/> + <paramref name="count"/> - 1）之间的值，由从当前源读取的字符替代。 </param>
<param name="index">缓冲区的起始索引。 </param>
<param name="count">要读取的字符数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="buffer"/> 为 null。 </exception>
<exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index"/> 小于 <paramref name="count"/>。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 或 <paramref name="count"/> 为负。 </exception>
<exception cref="T:System.ObjectDisposedException">当前读取器已关闭。 </exception>
    </member>
    <member name="M:System.IO.StringReader.ReadLine">
<summary>从基础字符串读取一行。</summary>
<returns>基础字符串的下一行，或如果到达输入基础字符串的末尾，则为 null。</returns>
<exception cref="T:System.ObjectDisposedException">当前读取器已关闭。 </exception>
<exception cref="T:System.OutOfMemoryException">内存不足，无法为返回的字符串分配缓冲区。 </exception>
    </member>
    <member name="M:System.IO.StringReader.ReadToEnd">
<summary>将整个流或从流的当前位置到流的结尾作为字符串读取。</summary>
<returns>从当前位置到基础字符串末尾的内容。</returns>
<exception cref="T:System.OutOfMemoryException">内存不足，无法为返回的字符串分配缓冲区。 </exception>
<exception cref="T:System.ObjectDisposedException">当前读取器已关闭。 </exception>
    </member>
    <member name="T:System.IO.StringWriter">
<summary>为写入信息到字符串实现一个<see cref="T:System.IO.TextWriter"/>。信息存储在一个基础 <see cref="T:System.Text.StringBuilder"/>中。</summary>
    </member>
    <member name="M:System.IO.StringWriter.#ctor">
<summary>初始化 <see cref="T:System.IO.StringWriter"/> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.IFormatProvider)">
<summary>用指定的格式控制初始化<see cref="T:System.IO.StringWriter"/>类的新实例。</summary>
<param name="formatProvider">控制格式化的<see cref="T:System.IFormatProvider"/>对象。 </param>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.Text.StringBuilder)">
<summary>初始化写入到指定<see cref="T:System.Text.StringBuilder"/>的<see cref="T:System.IO.StringWriter"/>类的新实例。</summary>
<param name="sb">要写入的 StringBuilder。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="sb"/> 为 null。 </exception>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.Text.StringBuilder,System.IFormatProvider)">
<summary>初始化写入到指定<see cref="T:System.Text.StringBuilder"/>并且有指定格式提供者的<see cref="T:System.IO.StringWriter"/>类的新实例。</summary>
<param name="sb">要写入的 StringBuilder。 </param>
<param name="formatProvider">控制格式化的<see cref="T:System.IFormatProvider"/>对象。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="sb"/> 为 null。 </exception>
    </member>
    <member name="M:System.IO.StringWriter.Close">
<summary>关闭当前<see cref="T:System.IO.StringWriter"/>和基础流。</summary>
    </member>
    <member name="M:System.IO.StringWriter.Dispose(System.Boolean)">
<summary>释放由 <see cref="T:System.IO.StringWriter"/> 使用的未托管的资源，并且可以选择释放托管的资源。</summary>
<param name="disposing">如果释放托管和未托管资源，则为 true；如果只释放未托管资源，则为 false。 </param>
    </member>
    <member name="P:System.IO.StringWriter.Encoding">
<summary>获取用来写入输出的 <see cref="T:System.Text.Encoding"/>。</summary>
<returns>用来写入输出的 Encoding。</returns>
    </member>
    <member name="M:System.IO.StringWriter.GetStringBuilder">
<summary>返回基础 <see cref="T:System.Text.StringBuilder"/>。</summary>
<returns>基础 StringBuilder。</returns>
    </member>
    <member name="M:System.IO.StringWriter.ToString">
<summary>返回包含迄今为止写入到当前 StringWriter 中的字符的字符串。</summary>
<returns>包含写入到当前 StringWriter 中的字符的字符串。</returns>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Char)">
<summary>将一个字符写入到 StringWriter 的此实例中。</summary>
<param name="value">要写入的字符。 </param>
<exception cref="T:System.ObjectDisposedException">编写器已关闭。 </exception>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Char[],System.Int32,System.Int32)">
<summary>将字符数组的指定区域写入到 StringWriter 的此实例中。</summary>
<param name="buffer">将从中读取数据的字符数组。 </param>
<param name="index">从 <paramref name="buffer"/> 的索引处开始读取。 </param>
<param name="count">要写入的最大字符数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="buffer"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 或 <paramref name="count"/> 为负。 </exception>
<exception cref="T:System.ArgumentException">(<paramref name="index"/> + <paramref name="count"/>)&gt; <paramref name="buffer"/>. Length。 </exception>
<exception cref="T:System.ObjectDisposedException">编写器已关闭。 </exception>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.String)">
<summary>将字符串写入到 StringWriter 的此实例中。</summary>
<param name="value">要写入的字符串。 </param>
<exception cref="T:System.ObjectDisposedException">编写器已关闭。 </exception>
    </member>
    <member name="T:System.IO.TextReader">
<summary>表示可读取连续字符系列的读取器。</summary>
    </member>
    <member name="M:System.IO.TextReader.#ctor">
<summary>初始化 <see cref="T:System.IO.TextReader"/> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.TextReader.Close">
<summary>关闭 <see cref="T:System.IO.TextReader"/> 并释放与该 TextReader 关联的所有系统资源。</summary>
    </member>
    <member name="M:System.IO.TextReader.Dispose">
<summary>释放由 <see cref="T:System.IO.TextReader"/> 对象使用的所有资源。</summary>
    </member>
    <member name="M:System.IO.TextReader.Dispose(System.Boolean)">
<summary>释放由 <see cref="T:System.IO.TextReader"/> 使用的未托管的资源，并且可以选择释放托管的资源。</summary>
<param name="disposing">如果释放托管和未托管资源，则为 true；如果只释放未托管资源，则为 false。 </param>
    </member>
    <member name="F:System.IO.TextReader.Null">
<summary>提供一个无数据可供读取的 TextReader。</summary>
    </member>
    <member name="M:System.IO.TextReader.Peek">
<summary>读取下一个字符，而不更改读取器状态或字符源。返回下一个可用字符，而实际上并不从输入流中读取此字符。</summary>
<returns>一个表示下一个要读取的字符的整数；如果没有更多可读取的字符或该流不支持查找，则为 -1。</returns>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextReader"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.TextReader.Read">
<summary>读取输入流中的下一个字符并使该字符的位置提升一个字符。</summary>
<returns>输入流中的下一个字符，或者如果没有更多的可用字符，则为 -1。默认实现将返回 -1。</returns>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextReader"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
<summary>从当前流中读取最大数量的 <paramref name="count"/> 字符并从 <paramref name="index"/> 开始将该数据写入 <paramref name="buffer"/>。</summary>
<returns>已读取的字符数。该数小于或等于 <paramref name="count"/>，具体取决于流中是否有可用的数据。如果调用此方法时没有更多的字符留下可供读取，则此方法返回 0。</returns>
<param name="buffer">该方法有返回值时，包含指定的字节数组，数组中在<paramref name="index"/>和（<paramref name="index"/> + <paramref name="count"/> - 1）之间的值，由从当前源读取的字符替代。 </param>
<param name="index"><paramref name="buffer"/> 中开始写入的位置。 </param>
<param name="count">要读取的最大字节数。如果在将 <paramref name="count"/> 个字符读入 <paramref name="buffer"/> 之前已到达流的末尾，则当前方法将返回。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="buffer"/> 为 null。 </exception>
<exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index"/> 小于 <paramref name="count"/>。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 或 <paramref name="count"/> 为负。 </exception>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextReader"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
<summary>从当前流中读取最大数量的 <paramref name="count"/> 字符并从 <paramref name="index"/> 开始将该数据写入 <paramref name="buffer"/>。</summary>
<returns>基础流的位置前移，前移量等于已读入 <paramref name="buffer"/> 的字符数。已读取的字符数。该数字将小于或等于 <paramref name="count"/>，具体取决于是否所有的输入字符都已读取。</returns>
<param name="buffer">该方法有返回值时，此参数包含指定的字节数组，数组中位于 <paramref name="index"/> 和（<paramref name="index"/> + <paramref name="count"/> -1）之间的值由从当前源读取的字符替代。 </param>
<param name="index"><paramref name="buffer"/> 中开始写入的位置。 </param>
<param name="count">要读取的最大字节数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="buffer"/> 为 null。 </exception>
<exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index"/> 小于 <paramref name="count"/>。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 或 <paramref name="count"/> 为负。 </exception>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextReader"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.TextReader.ReadLine">
<summary>从当前流中读取一行字符并将数据作为字符串返回。</summary>
<returns>输入流的下一行，或者如果已读取了所有字符，则为 null。</returns>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.OutOfMemoryException">内存不足，无法为返回的字符串分配缓冲区。 </exception>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextReader"/> 是关闭的。 </exception>
<exception cref="T:System.ArgumentOutOfRangeException">下一行中的字符数大于 <see cref="F:System.Int32.MaxValue"/></exception>
    </member>
    <member name="M:System.IO.TextReader.ReadToEnd">
<summary>读取从当前位置到 TextReader 的结尾的所有字符并将它们作为一个字符串返回。</summary>
<returns>包含从当前位置到 TextReader 的结尾的所有字符的字符串。</returns>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextReader"/> 是关闭的。 </exception>
<exception cref="T:System.OutOfMemoryException">内存不足，无法为返回的字符串分配缓冲区。 </exception>
<exception cref="T:System.ArgumentOutOfRangeException">下一行中的字符数大于 <see cref="F:System.Int32.MaxValue"/></exception>
    </member>
    <member name="T:System.IO.TextWriter">
<summary>表示可以编写一个有序字符系列的编写器。该类为抽象类。</summary>
    </member>
    <member name="M:System.IO.TextWriter.#ctor">
<summary>初始化 <see cref="T:System.IO.TextWriter"/> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.TextWriter.#ctor(System.IFormatProvider)">
<summary>用指定的格式提供程序初始化 <see cref="T:System.IO.TextWriter"/> 类的新实例。</summary>
<param name="formatProvider">控制格式化的<see cref="T:System.IFormatProvider"/>对象。 </param>
    </member>
    <member name="M:System.IO.TextWriter.Close">
<summary>关闭当前编写器并释放任何与该编写器关联的系统资源。</summary>
    </member>
    <member name="F:System.IO.TextWriter.CoreNewLine">
<summary>存储用于此 TextWriter 的换行符。</summary>
    </member>
    <member name="M:System.IO.TextWriter.Dispose">
<summary>释放由 <see cref="T:System.IO.TextWriter"/> 对象使用的所有资源。</summary>
    </member>
    <member name="M:System.IO.TextWriter.Dispose(System.Boolean)">
<summary>释放由 <see cref="T:System.IO.TextWriter"/> 使用的未托管的资源，并且可以选择释放托管的资源。</summary>
<param name="disposing">如果释放托管和未托管资源，则为 true；如果只释放未托管资源，则为 false。 </param>
    </member>
    <member name="P:System.IO.TextWriter.Encoding">
<summary>当在派生类中重写时，将返回用来写入输出的 <see cref="T:System.Text.Encoding"/>。</summary>
<returns>用来写入输出的 Encoding。</returns>
    </member>
    <member name="M:System.IO.TextWriter.Flush">
<summary>清理当前编写器的所有缓冲区，使所有缓冲数据写入基础设备。</summary>
    </member>
    <member name="P:System.IO.TextWriter.FormatProvider">
<summary>获取控制格式设置的对象。</summary>
<returns>特定区域性的 <see cref="T:System.IFormatProvider"/> 对象，或者如果未指定任何其他区域性，则为当前区域性的格式设置。</returns>
    </member>
    <member name="P:System.IO.TextWriter.NewLine">
<summary>获取或设置由当前 TextWriter 使用的行结束符字符串。</summary>
<returns>当前 TextWriter 的行结束符字符串。</returns>
    </member>
    <member name="F:System.IO.TextWriter.Null">
<summary>提供 TextWriter，它不带任何可写入但无法从中读取的后备存储区。</summary>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Boolean)">
<summary>将布尔值的文本表示形式写入文本流。</summary>
<param name="value">要写入的 Boolean。 </param>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char)">
<summary>将字符写入文本流。</summary>
<param name="value">要写入下一个流的字符。 </param>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char[])">
<summary>将字符数组写入文本流。</summary>
<param name="buffer">要写入文本流中的字符数组。 </param>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)">
<summary>将字符的子数组写入文本流。</summary>
<param name="buffer">要从中写出数据的字符数组。 </param>
<param name="index">在缓冲区中开始索引。 </param>
<param name="count">要写入的字符数。 </param>
<exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index"/> 小于 <paramref name="count"/>。 </exception>
<exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> 参数为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 或 <paramref name="count"/> 为负。 </exception>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Decimal)">
<summary>将十进制值的文本表示形式写入文本流。</summary>
<param name="value">要写入的十进制值。 </param>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Double)">
<summary>将 8 字节浮点值的文本表示形式写入文本流。</summary>
<param name="value">要写入的 8 字节浮点值。 </param>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Int32)">
<summary>将 4 字节带符号整数的文本表示形式写入文本流。</summary>
<param name="value">要写入的 4 字节带符号整数。 </param>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Int64)">
<summary>将 8 字节带符号整数的文本表示形式写入文本流。</summary>
<param name="value">要写入的 8 字节带符号整数。 </param>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Object)">
<summary>通过在对象上调用 ToString 将此对象的文本表示形式写入文本流。</summary>
<param name="value">要写入的对象。 </param>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Single)">
<summary>将 4 字节浮点值的文本表示形式写入文本流。</summary>
<param name="value">要写入的 4 字节浮点值。 </param>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String)">
<summary>将字符串写入文本流。</summary>
<param name="value">要写入的字符串。 </param>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object)">
<summary>使用与 <see cref="M:System.String.Format(System.String,System.Object)"/> 相同的语义写出格式化的字符串。</summary>
<param name="format">格式化字符串。 </param>
<param name="arg0">要写入格式化字符串的对象。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="format"/> 为 null。 </exception>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.FormatException">格式中的格式规范无效。-或- 用于指示要设置格式的参数的数字小于零，或者大于或等于所提供的要设置格式的对象的数目。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object,System.Object)">
<summary>使用与 <see cref="M:System.String.Format(System.String,System.Object)"/> 相同的语义写出格式化的字符串。</summary>
<param name="format">格式化字符串。 </param>
<param name="arg0">要写入格式化字符串的对象。 </param>
<param name="arg1">要写入格式化字符串的对象。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="format"/> 为 null。 </exception>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.FormatException">格式中的格式规范无效。-或- 用于指示要设置格式的参数的数字小于零，或者大于或等于所提供的要设置格式的对象的数目。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object[])">
<summary>使用与 <see cref="M:System.String.Format(System.String,System.Object)"/> 相同的语义写出格式化的字符串。</summary>
<param name="format">格式化字符串。 </param>
<param name="arg">要写入格式化字符串的对象数组。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="format"/> 或 <paramref name="arg"/> 为 null。 </exception>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.FormatException">格式中的格式规范无效。-或- 用于指示要设置格式的参数的数字小于零，或者大于或等于 <paramref name="arg"/>.Length。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.UInt32)">
<summary>将 4 字节无符号整数的文本表示形式写入文本流。</summary>
<param name="value">要写入的 4 字节无符号整数。 </param>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.UInt64)">
<summary>将 8 字节无符号整数的文本表示形式写入文本流。</summary>
<param name="value">要写入的 8 字节无符号整数。 </param>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine">
<summary>将行结束符写入文本流。</summary>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Boolean)">
<summary>将后跟行结束符的 Boolean 的文本表示形式写入文本流。</summary>
<param name="value">要写入的 Boolean。 </param>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char)">
<summary>将后跟行结束符的字符写入文本流。</summary>
<param name="value">要写入下一个流的字符。 </param>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char[])">
<summary>将后跟行结束符的字符数组写入文本流。</summary>
<param name="buffer">从其读取数据的字符数组。 </param>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
<summary>将后跟行结束符的字符子数组写入文本流。</summary>
<param name="buffer">从其读取数据的字符数组。 </param>
<param name="index">开始读取的 <paramref name="buffer"/> 中的索引。 </param>
<param name="count">要写入的最大字符数。 </param>
<exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index"/> 小于 <paramref name="count"/>。 </exception>
<exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> 参数为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 或 <paramref name="count"/> 为负。 </exception>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Decimal)">
<summary>将后面带有行结束符的十进制值的文本表示形式写入文本流。</summary>
<param name="value">要写入的十进制值。 </param>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Double)">
<summary>将后跟行结束符的 8 字节浮点值的文本表示形式写入文本流。</summary>
<param name="value">要写入的 8 字节浮点值。 </param>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Int32)">
<summary>将后跟行结束符的 4 字节带符号整数的文本表示形式写入文本流。</summary>
<param name="value">要写入的 4 字节带符号整数。 </param>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Int64)">
<summary>将后跟行结束符的 8 字节带符号整数的文本表示形式写入文本流。</summary>
<param name="value">要写入的 8 字节带符号整数。 </param>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Object)">
<summary>通过在对象上调用 ToString 将后跟行结束符的此对象的文本表示形式写入文本流。</summary>
<param name="value">要写入的对象。如果 <paramref name="value"/> 为 null，则仅写入行结束字符。 </param>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Single)">
<summary>将后跟行结束符的 4 字节浮点值的文本表示形式写入文本流。</summary>
<param name="value">要写入的 4 字节浮点值。 </param>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String)">
<summary>将后跟行结束符的字符串写入文本流。</summary>
<param name="value">要写入的字符串。如果 <paramref name="value"/> 为 null，则仅写入行结束字符。 </param>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object)">
<summary>使用与 <see cref="M:System.String.Format(System.String,System.Object)"/> 相同的语义写出格式化的字符串和一个新行。</summary>
<param name="format">格式化的字符串。 </param>
<param name="arg0">要写入已格式化字符串的对象。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="format"/> 为 null。 </exception>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.FormatException">格式中的格式规范无效。-或- 用于指示要设置格式的参数的数字小于零，或者大于或等于所提供的要设置格式的对象的数目。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)">
<summary>使用与 <see cref="M:System.String.Format(System.String,System.Object)"/> 相同的语义写出格式化的字符串和一个新行。</summary>
<param name="format">格式化字符串。 </param>
<param name="arg0">要写入格式字符串的对象。 </param>
<param name="arg1">要写入格式字符串的对象。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="format"/> 为 null。 </exception>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.FormatException">格式中的格式规范无效。-或- 用于指示要设置格式的参数的数字小于零，或者大于或等于所提供的要设置格式的对象的数目。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object[])">
<summary>使用与 <see cref="M:System.String.Format(System.String,System.Object)"/> 相同的语义写出格式化的字符串和一个新行。</summary>
<param name="format">格式化字符串。 </param>
<param name="arg">要写入格式化字符串的对象数组。 </param>
<exception cref="T:System.ArgumentNullException">字符串或对象作为 null 传入。 </exception>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.FormatException">格式中的格式规范无效。-或- 用于指示要设置格式的参数的数字小于零，或者大于或等于 arg.Length。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.UInt32)">
<summary>将后跟行结束符的 4 字节无符号整数的文本表示形式写入文本流。</summary>
<param name="value">要写入的 4 字节无符号整数。 </param>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.UInt64)">
<summary>将后跟行结束符的 8 字节无符号整数的文本表示形式写入文本流。</summary>
<param name="value">要写入的 8 字节无符号整数。 </param>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter"/> 是关闭的。 </exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
    </member>
    <member name="T:System.IO.UnmanagedMemoryStream">
<summary>提供从托管代码访问非托管内存块的能力。</summary>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanRead">
<summary>获取一个值，该值指示流是否支持读取。</summary>
<returns>如果对象是用一个构造函数创建的，而该构造函数的 <paramref name="access"/> 参数不包括读取流，或者如果流已关闭，则为 false，否则为 true。</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanSeek">
<summary>获取一个值，该值指示流是否支持查找。</summary>
<returns>如果流已关闭，则为 false；否则为 true。</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanWrite">
<summary>获取一个值，该值指示流是否支持写入。</summary>
<returns>如果对象是用一个构造函数创建的，而该构造函数的 <paramref name="access"/> 参数值支持写入，或者对象是用一个不带参数的构造函数创建的，或者如果流已关闭，则为 false，否则为 true。</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Capacity">
<summary>获取流的长度（大小）或分配给流的内存总量（容量）。</summary>
<returns>流的大小或容量。</returns>
<exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
<summary>释放由 <see cref="T:System.IO.UnmanagedMemoryStream"/> 使用的未托管的资源，并且可以选择释放托管的资源。</summary>
<param name="disposing">如果释放托管和未托管资源，则为 true；如果只释放未托管资源，则为 false。</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Flush">
<summary>重写 <see cref="M:System.IO.Stream.Flush"/> 方法以便不执行任何操作。</summary>
<exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Length">
<summary>获取流的数据长度。</summary>
<returns>流的数据长度。</returns>
<exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Position">
<summary>获取或设置流中的当前位置。</summary>
<returns>流中的当前新位置。</returns>
<exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
<exception cref="T:System.ArgumentOutOfRangeException">位置被设置为小于 0 的值，或者位置大于 <see cref="F:System.Int32.MaxValue"/> 或在添加到当前指针时导致溢出。</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.PositionPointer">
<summary>[SECURITY CRITICAL] 获取或设置基于流中当前位置的指向流的字节指针。</summary>
<returns>字节指针。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
<summary>将指定数目的字节读入指定的数组。</summary>
<returns>读入缓冲区中的总字节数。如果当前可用的字节数没有请求的字节数那么多，则总字节数可能小于请求的字节数，或者如果已到达流的末尾，则为零 (0)。</returns>
<param name="buffer">该方法有返回值时，包含指定的字节数组，数组中位于 <paramref name="offset"/> 和 (<paramref name="offset"/> + <paramref name="count"/> - 1) 之间的值由从当前源读取的字节替代。该参数未经初始化即被传递。</param>
<param name="offset"><paramref name="buffer"/> 中从零开始的字节偏移量，在这里开始存储从当前流读取的数据。</param>
<param name="count">要从当前流中读取的最大字节数。</param>
<exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
<exception cref="T:System.NotSupportedException">基础内存不支持读取。-或 - <see cref="P:System.IO.UnmanagedMemoryStream.CanRead"/> 属性设置为 false。 </exception>
<exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> 参数设置为 null。</exception>
<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> 参数小于零。-或- <paramref name="count"/> 参数小于零。</exception>
<exception cref="T:System.ArgumentException">缓冲区数组的长度减去 <paramref name="offset"/> 参数小于 <paramref name="count"/> 参数。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.ReadByte">
<summary>从流中读取一个字节，并将流内的位置向前推进一个字节，或者如果已到达流的末尾，则返回 -1。</summary>
<returns>转换为 <see cref="T:System.Int32"/> 对象的无符号字节，或者如果到达流的末尾，则为 -1。</returns>
<exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
<exception cref="T:System.NotSupportedException">基础内存不支持读取。-或- 当前的流位置在流的末尾。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
<summary>将当前流的当前位置设置为给定值。</summary>
<returns>流中的新位置。</returns>
<param name="offset">相对于 <paramref name="origin"/> 的点，从此处开始查找。 </param>
<param name="loc">指定开始，结束，或当前位置作为 <paramref name="origin"/> 的参考点，使用 <see cref="T:System.IO.SeekOrigin"/> 类型的值。 </param>
<exception cref="T:System.IO.IOException">尝试在流的开始位置之前查找。</exception>
<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> 值大于流的最大大小。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="loc"/> 无效。</exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
<summary>将流的长度设置为指定的值。</summary>
<param name="value">流的长度。</param>
<exception cref="T:System.IO.IOException">出现 I/O 错误。 </exception>
<exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
<exception cref="T:System.NotSupportedException">基础内存不支持写入。-或- 尝试写入流，但 <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite"/> 属性为 false。</exception>
<exception cref="T:System.ArgumentOutOfRangeException">指定的 <paramref name="value"/> 超出流的容量。-或- 指定的 <paramref name="value"/> 为负。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
<summary>使用缓冲区中的数据将字节块写入当前流。</summary>
<param name="buffer">字节数组，从该字节数组将字节复制到当前流中。</param>
<param name="offset">缓冲区中的偏移量，从此处开始将字节复制到当前流中。</param>
<param name="count">要写入当前流的字节数。</param>
<exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
<exception cref="T:System.NotSupportedException">基础内存不支持写入。-或- 尝试写入流，但 <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite"/> 属性为 false。-或- <paramref name="count"/> 值大于流的容量。-或- 位置在流容量的末尾。</exception>
<exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
<exception cref="T:System.ArgumentOutOfRangeException">其中一个指定的参数小于 0。</exception>
<exception cref="T:System.ArgumentException"><paramref name="offset"/> 参数减去 <paramref name="buffer"/> 参数的长度小于 <paramref name="count"/> 参数。</exception>
<exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> 参数为 null。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
<summary>向文件流的当前位置写入一个字节。</summary>
<param name="value">写入流的字节值。</param>
<exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
<exception cref="T:System.NotSupportedException">基础内存不支持写入。-或- 尝试写入流，但 <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite"/> 属性为 false。-或- 当前位置在流容量的末尾。</exception>
<exception cref="T:System.IO.IOException">提供的 <paramref name="value"/> 导致流超出它的最大容量。</exception>
    </member>
    <member name="M:System.IO.Directory.GetDirectories(System.String)">
<summary>[SECURITY CRITICAL] 获取指定目录中子目录（包括其路径）的名称。</summary>
<returns>包含 <paramref name="path"/> 中子目录的名称的 String 类型的数组。</returns>
<param name="path">为其返回子目录名称的数组的路径。 </param>
    </member>
    <member name="M:System.IO.Directory.GetDirectories(System.String,System.String)">
<summary>[SECURITY CRITICAL] 获取当前目录中与指定搜索模式匹配的目录的数组（包括其路径）。</summary>
<returns>与搜索模式匹配的目录的 String 数组。</returns>
<param name="path">要搜索的路径。 </param>
<param name="searchPattern">要与 <paramref name="path"/> 中的文件名匹配的搜索字符串。该参数不能以两个句点（".."）结束，也不能在 <see cref="F:System.IO.Path.DirectorySeparatorChar"/> 或 <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/> 的前面包含两个句点（".."）。 </param>
    </member>
    <member name="M:System.IO.Directory.GetFiles(System.String)">
<summary>[SECURITY CRITICAL] 返回指定目录中文件的名称。</summary>
<returns>指定目录中文件名的 String 数组。</returns>
<param name="path">将从其检索文件的目录。 </param>
    </member>
    <member name="M:System.IO.Directory.GetFiles(System.String,System.String)">
<summary>[SECURITY CRITICAL] 返回指定目录中与指定搜索模式匹配的文件的名称。</summary>
<returns>一个 String 数组，它包含指定目录中与指定搜索模式匹配的文件的名称。</returns>
<param name="path">要搜索的目录。 </param>
<param name="searchPattern">要与 <paramref name="path"/> 中的文件名匹配的搜索字符串。该参数不能以两个句点（".."）结束，不能在 <see cref="F:System.IO.Path.DirectorySeparatorChar"/> 或 <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/> 的前面包含两个句点（".."），也不能包含任何字符。 </param>
    </member>
    <member name="M:System.IO.Directory.GetFileSystemEntries(System.String)">
<summary>[SECURITY CRITICAL] 返回指定目录中所有文件和子目录的名称。</summary>
<returns>一个 String 数组，它包含指定目录中文件系统项的名称。</returns>
<param name="path">为其返回文件名和子目录名的目录。 </param>
    </member>
    <member name="M:System.IO.Directory.GetFileSystemEntries(System.String,System.String)">
<summary>[SECURITY CRITICAL] 返回与指定搜索条件匹配的文件系统项的数组。</summary>
<returns>一个 String 数组，它包含与搜索条件匹配的文件系统项。</returns>
<param name="path">要搜索的路径。 </param>
<param name="searchPattern">要与 <paramref name="path"/> 中的文件名匹配的搜索字符串。<paramref name="searchPattern"/> 参数不能以两个句点（".."）结束，也不能在 <see cref="F:System.IO.Path.DirectorySeparatorChar"/> 或 <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/> 的前面包含两个句点（".."）。 </param>
    </member>
    <member name="M:System.IO.DirectoryInfo.GetDirectories">
<summary>[SECURITY CRITICAL] 返回当前目录的子目录。</summary>
<returns><see cref="T:System.IO.DirectoryInfo"/> 对象的数组。</returns>
    </member>
    <member name="M:System.IO.DirectoryInfo.GetDirectories(System.String)">
<summary>[SECURITY CRITICAL] 返回当前 <see cref="T:System.IO.DirectoryInfo"/> 中、与给定搜索条件匹配的目录的数组。</summary>
<returns>与 <paramref name="searchPattern"/> 匹配的 DirectoryInfo 类型的数组。</returns>
<param name="searchPattern">搜索字符串，如用于搜索所有以单词“System”开头的目录的“System*”。 </param>
    </member>
    <member name="M:System.IO.DirectoryInfo.GetFiles">
<summary>[SECURITY CRITICAL] 返回当前目录的文件列表。</summary>
<returns><see cref="T:System.IO.FileInfo"/> 类型数组。</returns>
    </member>
    <member name="M:System.IO.DirectoryInfo.GetFiles(System.String)">
<summary>[SECURITY CRITICAL] 返回当前目录中与给定的 <paramref name="searchPattern"/> 匹配的文件列表。</summary>
<returns><see cref="T:System.IO.FileInfo"/> 类型数组。</returns>
<param name="searchPattern">搜索字符串（如“*.txt”）。 </param>
    </member>
    <member name="M:System.IO.DirectoryInfo.GetFileSystemInfos">
<summary>[SECURITY CRITICAL] 返回表示某个目录中所有文件和子目录的强类型 <see cref="T:System.IO.FileSystemInfo"/> 项的数组。</summary>
<returns>强类型 <see cref="T:System.IO.FileSystemInfo"/> 项的数组。</returns>
    </member>
    <member name="M:System.IO.DirectoryInfo.GetFileSystemInfos(System.String)">
<summary>[SECURITY CRITICAL] 检索表示与指定的搜索条件匹配的文件和子目录的强类型 <see cref="T:System.IO.FileSystemInfo"/> 对象的数组。</summary>
<returns>与搜索条件匹配的强类型 FileSystemInfo 对象的数组。</returns>
<param name="searchPattern">搜索字符串，如用于搜索所有以单词“System”开头的目录的“System*”。 </param>
    </member>
    <member name="P:System.IO.FileLoadException.Data">
<summary>获取一个提供用户定义的其他异常信息的键/值对的集合。</summary>
<returns>一个对象，它实现 <see cref="T:System.Collections.IDictionary"/> 接口并包含用户定义的键/值对的集合。默认值为空集合。</returns>
    </member>
    <member name="T:System.IO.IsolatedStorage.IsolatedStorageException">
<summary>独立存储中的操作失败时所引发的异常。</summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageException.#ctor">
<summary>使用默认属性初始化 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="inner">导致当前异常的异常。如果 <paramref name="inner"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="T:System.IO.IsolatedStorage.IsolatedStorageFile">
<summary>表示包含文件和目录的独立存储区。</summary>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFile.AvailableFreeSpace">
<summary>获取一个值，该值表示独立存储的可用空间量。</summary>
<returns>可用独立存储空间，以字节为单位。</returns>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">独立存储区已被移除。-或- 独立存储被禁用。</exception>
<exception cref="T:System.ObjectDisposedException">独立存储区已被释放。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.CopyFile(System.String,System.String)">
<summary>将现有文件复制到新文件。  </summary>
<param name="sourceFileName">要复制的文件的名称。</param>
<param name="destinationFileName">目标文件的名称。它不能是一个目录或现有文件。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="sourceFileName "/> 或 <paramref name=" destinationFileName "/> 是一个零长度字符串，仅包含空白或者包含 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 方法定义的一个或多个无效字符。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="sourceFileName "/> 或 <paramref name=" destinationFileName "/> 为 null。</exception>
<exception cref="T:System.InvalidOperationException">独立存储区已被关闭。</exception>
<exception cref="T:System.ObjectDisposedException">独立存储区已被释放。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
未找到 <paramref name="sourceFileName "/>。</exception>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">独立存储区已被移除。-或- 独立存储被禁用。-或- <paramref name="destinationFileName"/> 存在。-或- 出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.CopyFile(System.String,System.String,System.Boolean)">
<summary>将现有文件复制到新文件，还可以覆盖现有文件。</summary>
<param name="sourceFileName">要复制的文件的名称。</param>
<param name="destinationFileName">目标文件的名称。不能是目录。</param>
<param name="overwrite">如果可以覆盖目标文件，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="sourceFileName "/> 或 <paramref name=" destinationFileName "/> 是一个零长度字符串，仅包含空白或者包含 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 方法定义的一个或多个无效字符。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="sourceFileName "/> 或 <paramref name=" destinationFileName "/> 为 null。</exception>
<exception cref="T:System.InvalidOperationException">独立存储区已被关闭。</exception>
<exception cref="T:System.ObjectDisposedException">独立存储区已被释放。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
未找到 <paramref name="sourceFileName "/>。</exception>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">独立存储区已被移除。-或- 独立存储被禁用。-或- 出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.CreateDirectory(System.String)">
<summary>在独立存储范围中创建目录。</summary>
<param name="dir">要在独立存储中创建的目录的相对路径。 </param>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">存储区已被移除。-或- 无法创建目录。-或- 独立存储被禁用。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="dir"/> 的格式错误。</exception>
<exception cref="T:System.ArgumentNullException">目录路径为 null。 </exception>
<exception cref="T:System.ObjectDisposedException">存储区已被释放。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.CreateFile(System.String)">
<summary>在独立存储区中创建文件。</summary>
<returns>新的独立存储文件。</returns>
<param name="path">要在独立存储区中创建的文件的相对路径。</param>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">独立存储区已被移除。-或- 独立存储被禁用。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 的格式不正确。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。</exception>
<exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> 中的目录不存在。</exception>
<exception cref="T:System.ObjectDisposedException">独立存储区已被释放。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.DeleteDirectory(System.String)">
<summary>删除独立存储范围中的目录。</summary>
<param name="dir">要在独立存储范围中删除的目录的相对路径。 </param>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">存储区已被移除。-或- 无法删除目录。-或- 独立存储被禁用。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="dir"/> 的格式错误。</exception>
<exception cref="T:System.ArgumentNullException">目录路径为 null。 </exception>
<exception cref="T:System.ObjectDisposedException">存储区已被释放。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.DeleteFile(System.String)">
<summary>删除独立存储区中的文件。</summary>
<param name="file">要在独立存储区中删除的文件的相对路径。 </param>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">存储区已被移除。-或- 无法删除文件。-或- 独立存储被禁用。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="file"/> 的格式错误。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="file"/> 为 null。 </exception>
<exception cref="T:System.ObjectDisposedException">存储区已被释放。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.DirectoryExists(System.String)">
<summary>确定指定的路径是否指的是独立存储区中的现有目录。</summary>
<returns>如果 <paramref name="path"/> 指的是独立存储区中的现有目录而不是 null，则为 true；否则为 false。</returns>
<param name="path">要测试的路径。</param>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">独立存储区已被移除。-或- 独立存储被禁用。</exception>
<exception cref="T:System.ObjectDisposedException">独立存储区已被释放。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.Dispose">
<summary>释放由 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> 使用的所有资源。 </summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.FileExists(System.String)">
<summary>确定指定的路径是否指的是独立存储区中的现有文件。</summary>
<returns>如果 <paramref name="path"/> 指的是独立存储区中的现有文件而不是 null，则为 true；否则为 false。</returns>
<param name="path">要测试的路径和文件名。</param>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">独立存储区已被移除。-或- 独立存储被禁用。</exception>
<exception cref="T:System.ObjectDisposedException">独立存储区已被释放。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetCreationTime(System.String)">
<summary>返回指定文件或目录的创建日期和时间。</summary>
<returns>指定的文件或目录的创建日期和时间。该值用本地时间表示。</returns>
<param name="path">要获取其创建日期和时间信息的文件或目录的路径。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="path "/> 是一个零长度字符串，仅包含空白或者包含 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 方法定义的一个或多个无效字符。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path "/> 为 null。</exception>
<exception cref="T:System.InvalidOperationException">独立存储区已被关闭。</exception>
<exception cref="T:System.ObjectDisposedException">独立存储区已被释放。</exception>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">独立存储区已被移除。-或- 独立存储被禁用。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames">
<summary>枚举独立存储区根处的目录。</summary>
<returns>独立存储区根处目录的相对路径的数组。零长度数组指定根处没有任何目录。</returns>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">独立存储区已被移除。-或- 独立存储被禁用。</exception>
<exception cref="T:System.ObjectDisposedException">独立存储区已被释放。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames(System.String)">
<summary>枚举独立存储范围中与给定模式匹配的目录。</summary>
<returns>独立存储范围中与 <paramref name="searchPattern"/> 匹配的目录的相对路径 <see cref="T:System.Array"/>。零长度数组指定没有任何匹配的目录。</returns>
<param name="searchPattern">搜索模式。单字符 ("?") 和多字符 ("*") 通配符都受支持。 </param>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">存储区已被移除。-或- 独立存储被禁用。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="searchPattern"/> 的格式错误。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="searchPattern"/> 为 null。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">找不到 <paramref name="searchPattern"/> 的一部分。</exception>
<exception cref="T:System.ObjectDisposedException">存储区已被释放。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames">
<summary>获取独立存储区根处的文件的名称。</summary>
<returns>独立存储区根处文件的相对路径的数组。零长度数组指定根处没有任何文件。</returns>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">独立存储区已被移除。-或- 独立存储被禁用。</exception>
<exception cref="T:System.ObjectDisposedException">独立存储区已被释放。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames(System.String)">
<summary>枚举独立存储范围中与给定模式匹配的文件。</summary>
<returns>独立存储范围中与 <paramref name="searchPattern"/> 匹配的文件的相对路径 <see cref="T:System.Array"/>。零长度数组指定没有任何匹配的文件。</returns>
<param name="searchPattern">搜索模式。单字符 ("?") 和多字符 ("*") 通配符都受支持。 </param>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">存储区已被移除。-或- 独立存储被禁用。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="searchPattern"/> 的格式错误。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="searchPattern"/> 为 null。 </exception>
<exception cref="T:System.IO.DirectoryNotFoundException">找不到 <paramref name="searchPattern"/> 的一部分。</exception>
<exception cref="T:System.ObjectDisposedException">存储区已被释放。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetLastAccessTime(System.String)">
<summary>返回上次访问指定文件或目录的日期和时间。</summary>
<returns>上次访问指定文件或目录的日期和时间。该值用本地时间表示。</returns>
<param name="path">要获取其上次访问日期和时间信息的文件或目录的路径。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="path "/> 是一个零长度字符串，仅包含空白或者包含 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 方法定义的一个或多个无效字符。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path "/> 为 null。</exception>
<exception cref="T:System.InvalidOperationException">独立存储区已被关闭。</exception>
<exception cref="T:System.ObjectDisposedException">独立存储区已被释放。</exception>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">独立存储区已被移除。-或- 独立存储被禁用。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetLastWriteTime(System.String)">
<summary>返回上次写入指定文件或目录的日期和时间。</summary>
<returns>上次写入指定文件或目录的日期和时间。该值用本地时间表示。</returns>
<param name="path">要获取其上次写入日期和时间信息的文件或目录的路径。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="path "/> 是一个零长度字符串，仅包含空白或者包含 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 方法定义的一个或多个无效字符。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path "/> 为 null。</exception>
<exception cref="T:System.InvalidOperationException">独立存储区已被关闭。</exception>
<exception cref="T:System.ObjectDisposedException">独立存储区已被释放。</exception>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">独立存储区已被移除。-或- 独立存储被禁用。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForApplication">
<summary>获取从虚拟主机域调用的应用程序所使用的用户范围的独立存储。</summary>
<returns>与基于虚拟主机域中应用程序标识的独立存储范围对应的独立存储文件。</returns>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">存储区的组配额设置为零。-或- 存储区已被移除但不能重新创建，因为目录或文件正在由另一个进程使用。-或- 独立存储被禁用。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForSite">
<summary>获取由虚拟主机域中的所有应用程序使用的某个用户范围的独立存储。</summary>
<returns>与基于调用代码的应用程序标识的独立存储范围对应的独立存储文件。</returns>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">存储区的组配额设置为零。-或- 存储区已被移除但不能重新创建，因为目录或文件正在由另一个进程使用。-或- 独立存储被禁用。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.IncreaseQuotaTo(System.Int64)">
<summary>使应用程序显式请求一个更大的配额大小，以字节为单位。</summary>
<returns>如果用户接受新配额，则为 true；否则为 false。</returns>
<param name="newQuotaSize">请求的大小，以字节为单位。</param>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">独立存储区已被移除。-或- 独立存储被禁用。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="newQuotaSize"/> 小于零 -或- <paramref name="newQuotaSize"/> 小于或等于 <see cref="P:System.IO.IsolatedStorage.IsolatedStorageFile.Quota"/> 属性的值。</exception>
<exception cref="T:System.ObjectDisposedException">独立存储区已被释放。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="newQuotaSize"/> 无效。</exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFile.IsEnabled">
<summary>获取一个值，该值指示是否启用了独立存储。</summary>
<returns>在任何情况下均为 true。</returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.MoveDirectory(System.String,System.String)">
<summary>将指定的目录及其内容移到新位置。</summary>
<param name="sourceDirectoryName">要移动的目录的名称。</param>
<param name="destinationDirectoryName">指向 <paramref name="sourceDirectoryName"/> 的新位置的路径。这不能是现有目录的路径。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="sourceFileName "/> 或 <paramref name=" destinationFileName "/> 是一个零长度字符串，仅包含空白或者包含 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 方法定义的一个或多个无效字符。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="sourceFileName "/> 或 <paramref name=" destinationFileName "/> 为 null。</exception>
<exception cref="T:System.InvalidOperationException">独立存储区已被关闭。</exception>
<exception cref="T:System.ObjectDisposedException">独立存储区已被释放。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
<paramref name="sourceDirectoryName"/> 不存在。</exception>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">独立存储区已被移除。-或- 独立存储被禁用。-或- <paramref name="destinationDirectoryName"/> 已存在。-或- <paramref name="sourceDirectoryName"/> 和 <paramref name="destinationDirectoryName"/> 引用相同的目录。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.MoveFile(System.String,System.String)">
<summary>将指定文件移到新位置，还可以允许您指定新文件名。</summary>
<param name="sourceFileName">要移动的文件的名称。</param>
<param name="destinationFileName">指向文件的新位置的路径。如果包括文件名，则移动的文件将具有该名称。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="sourceFileName "/> 或 <paramref name=" destinationFileName "/> 是一个零长度字符串，仅包含空白或者包含 <see cref="M:System.IO.Path.GetInvalidPathChars"/> 方法定义的一个或多个无效字符。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="sourceFileName "/> 或 <paramref name=" destinationFileName "/> 为 null。</exception>
<exception cref="T:System.InvalidOperationException">独立存储区已被关闭。</exception>
<exception cref="T:System.ObjectDisposedException">独立存储区已被释放。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
未找到 <paramref name="sourceFileName"/>。</exception>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">独立存储区已被移除。-或- 独立存储被禁用。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.OpenFile(System.String,System.IO.FileMode)">
<summary>在指定的模式中打开文件。</summary>
<returns>在指定模式下打开、具有读/写访问权限且不共享的文件。</returns>
<param name="path">独立存储区内文件的相对路径。</param>
<param name="mode">用于打开文件的模式。</param>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">独立存储区已被移除。-或- 独立存储被禁用。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 的格式不正确。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。</exception>
<exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> 中的目录不存在。</exception>
<exception cref="T:System.IO.FileNotFoundException">未找到文件，而 <paramref name="mode"/> 设置为 <see cref="M:System.IO.FileInfo.Open(System.IO.FileMode)"/>。</exception>
<exception cref="T:System.ObjectDisposedException">独立存储区已被释放。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.OpenFile(System.String,System.IO.FileMode,System.IO.FileAccess)">
<summary>以指定的文件访问权限在指定的模式下打开文件。</summary>
<returns>用指定模式和访问权限打开且不共享的文件。</returns>
<param name="path">独立存储区内文件的相对路径。</param>
<param name="mode">用于打开文件的模式。</param>
<param name="access">用于打开文件的访问类型。</param>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">独立存储区已被移除。-或- 独立存储被禁用。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 的格式不正确。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。</exception>
<exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> 中的目录不存在。</exception>
<exception cref="T:System.IO.FileNotFoundException">未找到文件，而 <paramref name="mode"/> 设置为 <see cref="M:System.IO.FileInfo.Open(System.IO.FileMode)"/>。</exception>
<exception cref="T:System.ObjectDisposedException">独立存储区已被释放。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.OpenFile(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
<summary>用读、写或读/写访问权限和指定的共享选项在指定的模式中打开文件。</summary>
<returns>用指定的模式和访问权限以及指定的共享选项打开的文件。</returns>
<param name="path">独立存储区内文件的相对路径。</param>
<param name="mode">用于打开文件的模式。</param>
<param name="access">用于打开文件的访问类型。</param>
<param name="share">其他 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/> 对象所具有的对该文件的访问类型。</param>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">独立存储区已被移除。-或- 独立存储被禁用。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="path"/> 的格式不正确。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="path"/> 为 null。</exception>
<exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> 中的目录不存在。</exception>
<exception cref="T:System.IO.FileNotFoundException">未找到文件，而 <paramref name="mode"/> 设置为 <see cref="M:System.IO.FileInfo.Open(System.IO.FileMode)"/>。</exception>
<exception cref="T:System.ObjectDisposedException">独立存储区已被释放。</exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFile.Quota">
<summary>获取一个值，该值表示独立存储的最大可用空间量。</summary>
<returns>独立存储空间的限制，以字节为单位。</returns>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">独立存储区已被移除。-或- 独立存储被禁用。</exception>
<exception cref="T:System.ObjectDisposedException">独立存储区已被释放。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.Remove">
<summary>移除独立存储区范围及其所有内容。</summary>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">无法删除独立存储区。 </exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFile.UsedSize">
<summary>获取一个值，该值表示用于独立存储的空间量。</summary>
<returns>已用的独立存储空间，以字节为单位。</returns>
<exception cref="T:System.InvalidOperationException">独立存储区已被关闭。</exception>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">独立存储区已被移除。</exception>
<exception cref="T:System.ObjectDisposedException">独立存储区已被释放。</exception>
    </member>
    <member name="T:System.IO.IsolatedStorage.IsolatedStorageFileStream">
<summary>公开独立存储中的文件。</summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.IsolatedStorage.IsolatedStorageFile)">
<summary>初始化 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/> 类的一个新实例，以便可以在 <paramref name="isf"/> 指定的 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> 的上下文中，使用 <paramref name="share"/> 指定的文件共享模式，以指定的 <paramref name="mode"/>、用指定的文件 <paramref name="access"/> 来访问 <paramref name="path"/> 所指定的文件。</summary>
<param name="path">独立存储区内文件的相对路径。 </param>
<param name="mode">其中一个 <see cref="T:System.IO.FileMode"/> 值。 </param>
<param name="access"><see cref="T:System.IO.FileAccess"/> 值的按位组合。 </param>
<param name="share"><see cref="T:System.IO.FileShare"/> 值的按位组合。 </param>
<param name="isf">要在其中打开 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/> 的 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/>。 </param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">
<paramref name="isf"/> 已被释放。-或- <paramref name="path"/> 的格式错误。-或- <paramref name="path"/> 为 null。-或- <paramref name="isf"/> 为 null。-或- <paramref name="path"/> 中的目录不存在。-或- 未找到文件，而 <paramref name="mode"/> 设置为 <see cref="F:System.IO.FileMode.Open"/>。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.IsolatedStorage.IsolatedStorageFile)">
<summary>初始化 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/> 类的一个新实例，以便可以在 <paramref name="isf"/> 所指定的 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> 的上下文中，以指定的 <paramref name="mode"/>、用指定的文件 <paramref name="access"/> 来访问 <paramref name="path"/> 所指定的文件。</summary>
<param name="path">独立存储区内文件的相对路径。 </param>
<param name="mode">其中一个 <see cref="T:System.IO.FileMode"/> 值。 </param>
<param name="access"><see cref="T:System.IO.FileAccess"/> 值的按位组合。 </param>
<param name="isf">要在其中打开 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/> 的 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/>。 </param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">
<paramref name="isf"/> 已被释放。-或- <paramref name="path"/> 的格式错误。-或- <paramref name="path"/> 为 null。-或- <paramref name="isf"/> 为 null。-或- <paramref name="path"/> 中的目录不存在。-或- 未找到文件，而 <paramref name="mode"/> 设置为 <see cref="F:System.IO.FileMode.Open"/>。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.IsolatedStorage.IsolatedStorageFile)">
<summary>初始化 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/> 类的一个新实例，以便可以在 <paramref name="isf"/> 指定的 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> 的上下文中，以指定的 <paramref name="mode"/> 来访问 <paramref name="path"/> 所指定的文件。</summary>
<param name="path">独立存储区内文件的相对路径。 </param>
<param name="mode">其中一个 <see cref="T:System.IO.FileMode"/> 值。 </param>
<param name="isf">要在其中打开 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/> 的 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/>。 </param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">
<paramref name="isf"/> 已被释放。-或- <paramref name="path"/> 的格式错误。-或- <paramref name="path"/> 为 null。-或- <paramref name="isf"/> 为 null。-或- <paramref name="path"/> 中的目录不存在。-或- 未找到文件，而 <paramref name="mode"/> 设置为 <see cref="F:System.IO.FileMode.Open"/>。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
<summary>开始异步读。</summary>
<returns>表示可能仍处于挂起状态的异步读取的 <see cref="T:System.IAsyncResult"/> 对象。此 <see cref="T:System.IAsyncResult"/> 必须传递到该流的 <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead(System.IAsyncResult)"/> 方法以确定读取的字节数。这可以通过调用 <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> 的相同代码来完成，或在传递给 <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> 的回调中完成。</returns>
<param name="buffer">要读入数据的缓冲区。 </param>
<param name="offset">从其开始读取的 <paramref name="buffer"/> 的字节偏移量。 </param>
<param name="numBytes">要读取的最大字节数。 </param>
<param name="userCallback">异步读操作完成后调用的方法。此参数可选。 </param>
<param name="stateObject">异步读取操作的状态。 </param>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">独立存储区已被移除。-或- 独立存储被禁用。 </exception>
<exception cref="T:System.ArgumentException"><paramref name="buffer"/> 长度减去偏移量小于 <paramref name="numBytes"/>。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="buffer"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="offset"/> 或 <paramref name="numBytes"/> 为负。</exception>
<exception cref="T:System.IO.IOException">试图在文件的末尾之外进行异步读取。 </exception>
<exception cref="T:System.ObjectDisposedException">流已被释放。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
<summary>开始异步写。</summary>
<returns>表示可能仍处于挂起状态的异步写入的 <see cref="T:System.IAsyncResult"/>。此 <see cref="T:System.IAsyncResult"/> 必须传递到该流的 <see cref="M:System.IO.Stream.EndWrite(System.IAsyncResult)"/> 方法以确保写入完成，然后相应地释放资源。这可以通过调用 <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> 的相同代码来完成，或在传递给 <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> 的回调中完成。</returns>
<param name="buffer">数据写入的缓冲区。 </param>
<param name="offset"><paramref name="buffer"/> 中的字节偏移量，在这里开始写入数据。 </param>
<param name="numBytes">要写入的最大字节数。 </param>
<param name="userCallback">异步写操作完成后调用的方法。此参数可选。 </param>
<param name="stateObject">异步写的状态。 </param>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">独立存储区已被移除。-或- 独立存储被禁用。</exception>
<exception cref="T:System.ArgumentException"><paramref name="buffer"/> 长度减去偏移量小于 <paramref name="numBytes"/>。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="buffer"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="offset"/> 或 <paramref name="numBytes"/> 为负。</exception>
<exception cref="T:System.IO.IOException">试图在文件的末尾之外进行异步读取。 </exception>
<exception cref="T:System.ObjectDisposedException">流已被释放。</exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanRead">
<summary>获取一个布尔值，该值指示该文件是否可读。</summary>
<returns>如果 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/> 对象可读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek">
<summary>获取一个布尔值，该值指示查找操作是否受支持。</summary>
<returns>如果 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/> 对象支持查找操作，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanWrite">
<summary>获取一个布尔值，该值指示是否可以写入文件。</summary>
<returns>如果 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/> 对象可写，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose(System.Boolean)">
<summary>释放由 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/> 使用的未托管的资源，并且可以选择释放托管的资源。</summary>
<param name="disposing">如果释放托管和未托管资源，则为 true；如果只释放未托管资源，则为 false。 </param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead(System.IAsyncResult)">
<summary>结束挂起的异步读取请求。</summary>
<returns>从流中读取的字节数，介于零和所请求的字节数之间。流仅在到达流的结尾处时才返回零。否则，它们将一直被阻止到至少有一个字节可用时。</returns>
<param name="asyncResult">此流关闭或发生内部错误</param>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">独立存储区已被移除。-或- 独立存储被禁用。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="asyncResult"/> 不是通过对该类调用 <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> 来创建的。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="asyncResult"/> 为 null。 </exception>
      <exception cref="T:System.InvalidOperationException">
<see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead(System.IAsyncResult)"/> 被多次调用。</exception>
<exception cref="T:System.IO.IOException">此流关闭或发生内部错误。 </exception>
<exception cref="T:System.ObjectDisposedException">流已被释放。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndWrite(System.IAsyncResult)">
<summary>结束异步写入。</summary>
<param name="asyncResult">要结束的挂起的异步 I/O 请求。 </param>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">独立存储区已被移除。-或- 独立存储被禁用。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="asyncResult"/> 不是通过对该类调用 <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> 来创建的。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="asyncResult"/> 为 null。 </exception>
      <exception cref="T:System.InvalidOperationException">
<see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndWrite(System.IAsyncResult)"/> 被多次调用。</exception>
<exception cref="T:System.IO.IOException">此流关闭或发生内部错误。 </exception>
<exception cref="T:System.ObjectDisposedException">流已被释放。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush">
<summary>用缓冲区的当前状态更新文件，然后清除缓冲区。</summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush(System.Boolean)">
<summary>清除此流的缓冲区，会将所有缓冲的数据都写入到文件中，另外也会清除所有的中间文件缓冲区。</summary>
<param name="flushToDisk">如果刷新所有的中间文件缓冲区，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.Length">
<summary>获取 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/> 对象的长度。</summary>
<returns><see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/> 对象的长度（以字节为单位）。</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.Position">
<summary>获取或设置当前 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/> 对象的当前位置。</summary>
<returns>此 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/> 对象的当前位置。</returns>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">独立存储区已被移除。-或- 独立存储被禁用。</exception>
<exception cref="T:System.ArgumentOutOfRangeException">此位置不能设置为负数。</exception>
<exception cref="T:System.ObjectDisposedException">独立存储区已被释放。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte[],System.Int32,System.Int32)">
<summary>将字节从当前缓冲的 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/> 对象复制到数组。</summary>
<returns>读入 <paramref name="buffer"/> 中的总字节数。如果当前可用的字节数没有请求的字节数那么多，则总字节数可能小于请求的字节数；如果已到达流的末尾，则为零。</returns>
<param name="buffer">要读取的缓冲区。 </param>
<param name="offset">缓冲区中开始写入的偏移量。 </param>
<param name="count">要读取的最大字节数。 </param>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">独立存储区已被移除。-或- 独立存储被禁用。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="offset"/> 和 <paramref name="count"/> 描述缓冲区中的无效范围。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="buffer"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="offset"/> 或 <paramref name="count"/> 为负。</exception>
<exception cref="T:System.IO.IOException">此流关闭或发生内部错误。 </exception>
<exception cref="T:System.ObjectDisposedException">流已被释放。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadByte">
<summary>从独立存储中的 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/> 对象读取一个字节。</summary>
<returns>从独立存储文件中读取的 8 位无符号整数值。</returns>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">独立存储区已被移除。-或- 独立存储被禁用。</exception>
<exception cref="T:System.NotSupportedException">当前流不支持读取。</exception>
<exception cref="T:System.ObjectDisposedException">流已被释放。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
<summary>将此 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/> 对象的当前位置设置为指定值。</summary>
<returns><see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/> 对象中的新位置。</returns>
<param name="offset"><see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/> 对象的新位置。 </param>
<param name="origin">其中一个 <see cref="T:System.IO.SeekOrigin"/> 值。 </param>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">独立存储区已被移除。-或- 独立存储被禁用。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="origin "/>必须是 SeekOrigin 值之一。</exception>
<exception cref="T:System.NotSupportedException">流不支持查找。</exception>
<exception cref="T:System.IO.IOException">此流关闭或发生内部错误。 </exception>
<exception cref="T:System.ObjectDisposedException">流已被释放。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.SetLength(System.Int64)">
<summary>将此 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/> 对象的长度设置为指定的 <paramref name="value"/>。</summary>
<param name="value"><see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/> 对象的新长度。 </param>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">独立存储区已被移除。-或- 独立存储被禁用。</exception>
<exception cref="T:System.ArgumentOutOfRangeException">试图将值参数设置为小于 0。</exception>
<exception cref="T:System.NotSupportedException">流不同时支持写入和查找。</exception>
<exception cref="T:System.IO.IOException">此流关闭或发生内部错误。 </exception>
<exception cref="T:System.ObjectDisposedException">流已被释放。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Write(System.Byte[],System.Int32,System.Int32)">
<summary>使用从字节数组中读取的数据将字节块写入 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/> 对象。</summary>
<param name="buffer">要写入的缓冲区。 </param>
<param name="offset">缓冲区中开始写入的字节偏移量。 </param>
<param name="count">要写入的最大字节数。 </param>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">独立存储区已被移除。-或- 写入尝试超过了 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/> 对象的配额。-或- 独立存储被禁用。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="offset"/> 和 <paramref name="count"/> 描述 <paramref name="buffer"/> 中的无效范围。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="buffer"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="offset"/> 或 <paramref name="count"/> 为负。</exception>
<exception cref="T:System.IO.IOException">此流关闭或发生内部错误。-或- 另一个线程可能已经在操作系统文件句柄的位置引发未知的改变。</exception>
<exception cref="T:System.NotSupportedException">流不支持写入。</exception>
<exception cref="T:System.ObjectDisposedException">流已被释放。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteByte(System.Byte)">
<summary>将一个字节写入 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/> 对象。</summary>
<param name="value">写入独立存储文件的字节值。 </param>
<exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">独立存储区已被移除。-或- 写入尝试超过了 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/> 对象的配额。-或- 独立存储被禁用。</exception>
<exception cref="T:System.NotSupportedException">流不支持写入。</exception>
<exception cref="T:System.ObjectDisposedException">流已被释放。</exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.Name">
<summary>[SECURITY CRITICAL] 获取用于创建 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/> 的实例的文件名。</summary>
<returns>与流关联的文件名。</returns>
    </member>
    <member name="T:System.Reflection.AmbiguousMatchException">
<summary>当绑定到成员的操作导致一个以上的成员匹配绑定条件时引发的异常。无法继承此类。</summary>
    </member>
    <member name="M:System.Reflection.AmbiguousMatchException.#ctor">
<summary>通过使用空消息字符串和将根源异常设置为 null 来初始化 <see cref="T:System.Reflection.AmbiguousMatchException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Reflection.AmbiguousMatchException.#ctor(System.String)">
<summary>初始化 <see cref="T:System.Reflection.AmbiguousMatchException"/> 类的一个新实例，将其消息字符串设置为给定消息，将根源异常设置为 null。</summary>
<param name="message">一个指示引发此异常的原因的字符串。 </param>
    </member>
    <member name="M:System.Reflection.AmbiguousMatchException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Reflection.AmbiguousMatchException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="inner">导致当前异常的异常。如果 <paramref name="inner"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="T:System.Reflection.Assembly">
<summary>表示一个程序集，它是一个可重用、无版本冲突并且可自我描述的公共语言运行时应用程序构造块。</summary>
    </member>
    <member name="M:System.Reflection.Assembly.#ctor"></member>
    <member name="P:System.Reflection.Assembly.CodeBase">
<summary>[SECURITY CRITICAL] 获取最初指定的程序集的位置，例如，在 <see cref="T:System.Reflection.AssemblyName"/> 对象中指定的位置。</summary>
<returns>程序集的位置（按照最初的指定）。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.CreateInstance(System.String)">
<summary>使用区分大小写的搜索，从此程序集中查找指定的类型，然后使用系统激活器创建它的实例。</summary>
<returns>表示该类型的 <see cref="T:System.Object"/> 的实例（其区域性、参数、联编程序和激活属性设置为 null，并且 <see cref="T:System.Reflection.BindingFlags"/> 设置为 Public 或 Instance），或者如果没有找到 <paramref name="typeName"/>，则为 null。</returns>
<param name="typeName">要查找的类型的 <see cref="P:System.Type.FullName"/>。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="typeName"/> 是一个空字符串 ("") 或一个以空字符开头的字符串。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="typeName"/> 为 null。 </exception>
<exception cref="T:System.MissingMethodException">未找到匹配的构造函数。 </exception>
      <exception cref="T:System.IO.FileNotFoundException">
<paramref name="typeName"/> 需要一个无法找到的依赖程序集。 </exception>
      <exception cref="T:System.IO.FileLoadException">
<paramref name="typeName"/> 需要一个已找到但无法加载的依赖程序集。 </exception>
      <exception cref="T:System.BadImageFormatException">
<paramref name="typeName"/> 需要一个依赖程序集，但该文件不是一个有效的程序集。-或- <paramref name="typeName"/> 需要一个针对高于当前加载版本的运行库版本编译的依赖程序集。</exception>
<exception cref="T:System.MemberAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的形式调用此方法。</exception>
    </member>
    <member name="P:System.Reflection.Assembly.EntryPoint">
<summary>获取此程序集的入口点。</summary>
<returns>表示此程序集入口点的 <see cref="T:System.Reflection.MethodInfo"/> 对象。如果没有找到入口点（例如，此程序集是一个 DLL），则返回 null。</returns>
    </member>
    <member name="P:System.Reflection.Assembly.FullName">
<summary>获取程序集的显示名称。</summary>
<returns>程序集的显示名称。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetCallingAssembly">
<summary>返回调用当前正在执行的方法的方法的 <see cref="T:System.Reflection.Assembly"/>。</summary>
<returns>调用当前正在执行的方法的方法的 Assembly 对象。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)">
<summary>获取此程序集的所有自定义属性。</summary>
<returns>Object 类型的数组，包含此程序集的自定义属性。</returns>
<param name="inherit">对于 <see cref="T:System.Reflection.Assembly"/> 类型的对象，将忽略此参数。 </param>
<exception cref="T:System.MemberAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的形式调用此方法。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)">
<summary>获取按类型指定的此程序集的自定义属性。</summary>
<returns>Object 类型的数组，包含由 <paramref name="attributeType"/> 为此程序集指定的自定义属性。</returns>
<param name="attributeType">要为其返回自定义属性的 <see cref="T:System.Type"/>。 </param>
<param name="inherit">对于 <see cref="T:System.Reflection.Assembly"/> 类型的对象，将忽略此参数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="attributeType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 不是运行时类型。 </exception>
<exception cref="T:System.MemberAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的形式调用此方法。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetExecutingAssembly">
<summary>获取包含当前执行的代码的程序集。</summary>
<returns>一个 <see cref="T:System.Reflection.Assembly"/>，表示包含当前执行的代码的程序集。 </returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetExportedTypes">
<summary>获取此程序集中定义的类型，这些类型在程序集外可见。</summary>
<returns>Type 对象的数组，这些对象表示此程序集中定义的在程序集外可见的类型。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetFile(System.String)">
<summary>[SECURITY CRITICAL] 获取此程序集清单的文件表中指定文件的 <see cref="T:System.IO.FileStream"/>。</summary>
<returns>指定文件的 <see cref="T:System.IO.FileStream"/>；如果没有找到此文件，则为 null。</returns>
<param name="name">指定文件的名称。不包括文件的路径。</param>
    </member>
    <member name="M:System.Reflection.Assembly.GetFiles(System.Boolean)">
<summary>[SECURITY CRITICAL] 获取程序集清单的文件表中的文件，指定是否包括资源模块。</summary>
<returns><see cref="T:System.IO.FileStream"/> 对象的数组。</returns>
<param name="getResourceModules">如果为 true，则包括资源模块；否则为 false。 </param>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceNames">
<summary>返回此程序集中的所有资源的名称。</summary>
<returns>包含所有资源名称的 String 类型的数组。</returns>
<exception cref="T:System.MemberAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的形式调用此方法。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)">
<summary>从此程序集加载指定的清单资源。</summary>
<returns>一个 <see cref="T:System.IO.Stream"/>，表示清单资源；如果在编译期间没有指定任何资源，或者如果资源对调用方不可见，则为 null。</returns>
<param name="name">所请求的清单资源的名称（区分大小写）。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="name"/> 参数为 null。 </exception>
<exception cref="T:System.ArgumentException"><paramref name="name"/> 参数是空字符串 ("")。 </exception>
<exception cref="T:System.IO.FileLoadException">发现一个未能加载的文件。 </exception>
      <exception cref="T:System.IO.FileNotFoundException">
未找到 <paramref name="name"/>。 </exception>
      <exception cref="T:System.BadImageFormatException">
<paramref name="name"/> 不是有效程序集。 </exception>
<exception cref="T:System.MemberAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的形式调用此方法。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceStream(System.Type,System.String)">
<summary>从此程序集加载指定清单资源，清单资源的范围由指定类型的命名空间确定。</summary>
<returns>一个 <see cref="T:System.IO.Stream"/>，表示清单资源；如果在编译期间没有指定任何资源，或者如果资源对调用方不可见，则为 null。</returns>
<param name="type">其命名空间用于确定清单资源名的范围的类型。 </param>
<param name="name">所请求的清单资源的名称（区分大小写）。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="name"/> 参数为 null。 </exception>
<exception cref="T:System.ArgumentException"><paramref name="name"/> 参数是空字符串 ("")。 </exception>
<exception cref="T:System.IO.FileLoadException">发现一个未能加载的文件。 </exception>
      <exception cref="T:System.IO.FileNotFoundException">
未找到 <paramref name="name"/>。 </exception>
      <exception cref="T:System.BadImageFormatException">
<paramref name="name"/> 不是有效程序集。 </exception>
<exception cref="T:System.MemberAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的形式调用此方法。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetModules">
<summary>获取作为此程序集的一部分的所有模块。</summary>
<returns>模块的数组。</returns>
<exception cref="T:System.IO.FileNotFoundException">要加载的模块未指定文件扩展名。 </exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetName">
<summary>[SECURITY CRITICAL] 获取此程序集的 <see cref="T:System.Reflection.AssemblyName"/>。</summary>
<returns>此程序集的 <see cref="T:System.Reflection.AssemblyName"/>。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetName(System.Boolean)">
<summary>[SECURITY CRITICAL] 获取此程序集的 <see cref="T:System.Reflection.AssemblyName"/>，并按 <paramref name="copiedName"/> 指定的那样设置基本代码。</summary>
<returns>此程序集的 <see cref="T:System.Reflection.AssemblyName"/>。</returns>
<param name="copiedName">如果为 true，则将 <see cref="P:System.Reflection.Assembly.CodeBase"/> 设置为程序集在进行卷影复制之后的位置；如果为 false，则将 <see cref="P:System.Reflection.Assembly.CodeBase"/> 设置为原位置。 </param>
    </member>
    <member name="M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)">
<summary>获取指定区域性的附属程序集。</summary>
<returns>指定的附属程序集。</returns>
<param name="culture">指定的区域性。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="culture"/> 为 null。 </exception>
<exception cref="T:System.IO.FileNotFoundException">找不到此程序集。 </exception>
<exception cref="T:System.IO.FileLoadException">找到了具有匹配文件名的附属程序集，但是 CultureInfo 与指定的不匹配。 </exception>
<exception cref="T:System.BadImageFormatException">附属程序集不是有效程序集。 </exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)">
<summary>获取指定区域性的附属程序集的指定版本。</summary>
<returns>指定的附属程序集。</returns>
<param name="culture">指定的区域性。 </param>
<param name="version">附属程序集的版本。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="culture"/> 为 null。 </exception>
<exception cref="T:System.IO.FileLoadException">找到了具有匹配文件名的附属程序集，但是 CultureInfo 或版本与指定的不匹配。 </exception>
<exception cref="T:System.IO.FileNotFoundException">找不到此程序集。 </exception>
<exception cref="T:System.BadImageFormatException">附属程序集不是有效程序集。 </exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetType(System.String)">
<summary>获取程序集实例中具有指定名称的 <see cref="T:System.Type"/> 对象。</summary>
<returns>表示指定类的 <see cref="T:System.Type"/> 对象，若未找到该类则为 null。</returns>
<param name="name">该类型的全名。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="name"/> 无效。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
      <exception cref="T:System.IO.FileNotFoundException">
<paramref name="name"/> 需要一个无法找到的依赖程序集。 </exception>
      <exception cref="T:System.IO.FileLoadException">
<paramref name="name"/> 需要一个已找到但无法加载的依赖程序集。-或- 当前程序集被加载到只反射上下文中，<paramref name="name"/> 需要一个未预先加载的依赖程序集。 </exception>
      <exception cref="T:System.BadImageFormatException">
<paramref name="name"/> 需要一个依赖程序集，但该文件不是一个有效的程序集。-或- <paramref name="name"/> 需要一个针对高于当前加载版本的运行库版本编译的依赖程序集。</exception>
<exception cref="T:System.MemberAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的形式调用此方法。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetType(System.String,System.Boolean)">
<summary>获取程序集实例中具有指定名称的 <see cref="T:System.Type"/> 对象，并选择在找不到该类型时引发异常。</summary>
<returns>表示指定类的 <see cref="T:System.Type"/> 对象。</returns>
<param name="name">该类型的全名。 </param>
<param name="throwOnError">如果为 true，则在找不到该类型时引发异常；如果为 false，则返回 null。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="name"/> 无效。-或- <paramref name="name"/> 的长度超过 1024 个字符。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
      <exception cref="T:System.TypeLoadException">
<paramref name="throwOnError"/> 为 true，找不到该类型。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
<paramref name="name"/> 需要一个无法找到的依赖程序集。 </exception>
      <exception cref="T:System.IO.FileLoadException">
<paramref name="name"/> 需要一个已找到但无法加载的依赖程序集。 </exception>
      <exception cref="T:System.BadImageFormatException">
<paramref name="name"/> 需要一个依赖程序集，但该文件不是一个有效的程序集。-或- <paramref name="name"/> 需要一个针对高于当前加载版本的运行库版本编译的依赖程序集。</exception>
<exception cref="T:System.MemberAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的形式调用此方法。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetTypes">
<summary>获取此程序集中定义的类型。</summary>
<returns><see cref="T:System.Type"/> 类型的数组，包含此程序集中定义的所有类型的对象。</returns>
<exception cref="T:System.Reflection.ReflectionTypeLoadException">该程序集包含一个或多个无法加载的类型。对于加载的每个类型，由此异常的 <see cref="P:System.Reflection.ReflectionTypeLoadException.Types"/> 属性返回的数组包含一个 <see cref="T:System.Type"/> 对象；对于无法加载的每个类型，该数组包含 null，而 <see cref="P:System.Reflection.ReflectionTypeLoadException.LoaderExceptions"/> 属性则包含一个异常。</exception>
<exception cref="T:System.MemberAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的形式调用此方法。</exception>
    </member>
    <member name="P:System.Reflection.Assembly.ImageRuntimeVersion">
<summary>获取表示公共语言运行时 (CLR) 的版本的字符串，该信息保存在包含清单的文件中。</summary>
<returns>表示 CLR 版本文件夹名称的字符串。这不是完整路径。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.IsDefined(System.Type,System.Boolean)">
<summary>指示指定的属性是否已应用于该程序集。</summary>
<returns>如果已将该属性应用于程序集，则为 true；否则为 false。</returns>
<param name="attributeType">要为此程序集检查的属性的 <see cref="T:System.Type"/>。 </param>
<param name="inherit">对于该类型的对象，该参数被忽略。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="attributeType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 使用的类型无效。</exception>
    </member>
    <member name="P:System.Reflection.Assembly.IsDynamic">
<summary>获取一个值，该值指示当前程序集是否是通过使用反射发出在当前进程中动态生成的。</summary>
<returns>如果当前程序集是在当前进程中动态生成的，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.Byte[])">
<summary>[SECURITY CRITICAL] 加载带有基于通用对象文件格式 (COFF) 的映像的程序集，该映像包含已发出的程序集。将该程序集加载到调用方的域。</summary>
<returns>加载的程序集。</returns>
<param name="rawAssembly">byte 类型的数组，它是包含已发出程序集的基于 COFF 的映像。 </param>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.Byte[],System.Byte[])">
<summary>[SECURITY CRITICAL] 加载带有基于通用对象文件格式 (COFF) 的映像的程序集，该映像包含已发出的程序集。</summary>
<returns>加载的程序集。</returns>
<param name="rawAssembly">byte 类型的数组，它是包含已发出程序集的基于 COFF 的映像。 </param>
<param name="rawSymbolStore">byte 类型的数组，它包含表示程序集符号的原始字节。 </param>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.Reflection.AssemblyName)">
<summary>[SECURITY CRITICAL] 在给定程序集的 <see cref="T:System.Reflection.AssemblyName"/> 的情况下，加载程序集。</summary>
<returns>加载的程序集。</returns>
<param name="assemblyRef">描述要加载的程序集的 <see cref="T:System.Reflection.AssemblyName"/> 对象。 </param>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.String)">
<summary>通过给定程序集的长格式名称加载程序集。</summary>
<returns>加载的程序集。</returns>
<param name="assemblyString">程序集名称的长格式。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="assemblyString"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="assemblyString"/> 是零长度字符串。 </exception>
      <exception cref="T:System.IO.FileNotFoundException">
未找到 <paramref name="assemblyString"/>。 </exception>
<exception cref="T:System.IO.FileLoadException">发现一个未能加载的文件。 </exception>
      <exception cref="T:System.BadImageFormatException">
<paramref name="assemblyString"/> 不是有效程序集。-或- <paramref name="assemblyString"/> 是针对高于当前执行版本的公共语言运行时版本编译的。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.LoadFrom(System.String)">
<summary>[SECURITY CRITICAL] 已知程序集的文件名或路径，加载程序集。</summary>
<returns>加载的程序集。</returns>
<param name="assemblyFile">包含程序集清单的文件的名称或路径。 </param>
    </member>
    <member name="P:System.Reflection.Assembly.Location">
<summary>[SECURITY CRITICAL] 获取包含清单的已加载文件的路径或 UNC 位置。</summary>
<returns>包含清单的已加载文件的位置。 </returns>
    </member>
    <member name="P:System.Reflection.Assembly.ManifestModule">
<summary>获取包含当前程序集清单的模块。 </summary>
<returns>一个 <see cref="T:System.Reflection.Module"/> 对象，表示包含程序集清单的模块。 </returns>
    </member>
    <member name="M:System.Reflection.Assembly.ToString">
<summary>返回程序集的全名，即所谓的显示名称。</summary>
<returns>程序集的全名；如果不能确定程序集的全名，则为类名。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyAlgorithmIdAttribute">
<summary>指定对程序集中的所有文件进行哈希计算的算法。无法继承此类。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyAlgorithmIdAttribute.#ctor(System.Configuration.Assemblies.AssemblyHashAlgorithm)">
<summary>用指定的哈希算法初始化 <see cref="T:System.Reflection.AssemblyAlgorithmIdAttribute"/> 类的新实例，使用 <see cref="T:System.Configuration.Assemblies.AssemblyHashAlgorithm"/> 的成员之一来表示哈希算法。</summary>
<param name="algorithmId">表示哈希算法的 AssemblyHashAlgorithm 的成员。 </param>
    </member>
    <member name="M:System.Reflection.AssemblyAlgorithmIdAttribute.#ctor(System.UInt32)">
<summary>用指定的哈希算法初始化 <see cref="T:System.Reflection.AssemblyAlgorithmIdAttribute"/> 类的新实例，使用无符号整数来表示哈希算法。</summary>
<param name="algorithmId">表示哈希算法的无符号整数。 </param>
    </member>
    <member name="P:System.Reflection.AssemblyAlgorithmIdAttribute.AlgorithmId">
<summary>获取程序集清单内容的哈希算法。</summary>
<returns>表示程序集哈希算法的无符号整数。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyCompanyAttribute">
<summary>定义程序集清单的公司名称自定义属性。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCompanyAttribute.#ctor(System.String)">
<summary>初始化 <see cref="T:System.Reflection.AssemblyCompanyAttribute"/> 类的新实例。</summary>
<param name="company">公司名称信息。 </param>
    </member>
    <member name="P:System.Reflection.AssemblyCompanyAttribute.Company">
<summary>获取公司名称信息。</summary>
<returns>包含公司名称的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyConfigurationAttribute">
<summary>为程序集指定生成配置，例如发布或调试。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyConfigurationAttribute.#ctor(System.String)">
<summary>初始化 <see cref="T:System.Reflection.AssemblyConfigurationAttribute"/> 类的新实例。</summary>
<param name="configuration">程序集配置。 </param>
    </member>
    <member name="P:System.Reflection.AssemblyConfigurationAttribute.Configuration">
<summary>获取程序集配置信息。</summary>
<returns>包含程序集配置信息的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyCopyrightAttribute">
<summary>定义程序集清单的版权自定义属性。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCopyrightAttribute.#ctor(System.String)">
<summary>初始化 <see cref="T:System.Reflection.AssemblyCopyrightAttribute"/> 类的新实例。</summary>
<param name="copyright">版权信息。 </param>
    </member>
    <member name="P:System.Reflection.AssemblyCopyrightAttribute.Copyright">
<summary>获取版权信息。</summary>
<returns>包含版权信息的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyCultureAttribute">
<summary>指定程序集支持哪个区域性。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCultureAttribute.#ctor(System.String)">
<summary>用正在属性化的程序集支持的区域性初始化 <see cref="T:System.Reflection.AssemblyCultureAttribute"/> 类的新实例。</summary>
<param name="culture">属性化程序集支持的区域性。 </param>
    </member>
    <member name="P:System.Reflection.AssemblyCultureAttribute.Culture">
<summary>获取属性化程序集支持的区域性。</summary>
<returns>包含受支持区域性的名称的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDefaultAliasAttribute">
<summary>定义程序集清单的友好默认别名。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDefaultAliasAttribute.#ctor(System.String)">
<summary>初始化 <see cref="T:System.Reflection.AssemblyDefaultAliasAttribute"/> 类的新实例。</summary>
<param name="defaultAlias">程序集默认别名信息。 </param>
    </member>
    <member name="P:System.Reflection.AssemblyDefaultAliasAttribute.DefaultAlias">
<summary>获取默认别名信息。</summary>
<returns>包含默认别名信息的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDelaySignAttribute">
<summary>指定程序集在创建时未完全签名。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDelaySignAttribute.#ctor(System.Boolean)">
<summary>初始化 <see cref="T:System.Reflection.AssemblyDelaySignAttribute"/> 类的新实例。</summary>
<param name="delaySign">如果此属性表示的功能被激活，则为 true；否则为 false。 </param>
    </member>
    <member name="P:System.Reflection.AssemblyDelaySignAttribute.DelaySign">
<summary>获取指示该属性状态的值。</summary>
<returns>如果此程序集已采用延迟签名方式生成，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDescriptionAttribute">
<summary>提供程序集的文本说明。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDescriptionAttribute.#ctor(System.String)">
<summary>初始化 <see cref="T:System.Reflection.AssemblyDescriptionAttribute"/> 类的新实例。</summary>
<param name="description">程序集说明。 </param>
    </member>
    <member name="P:System.Reflection.AssemblyDescriptionAttribute.Description">
<summary>获取程序集说明信息。</summary>
<returns>包含程序集说明的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyFileVersionAttribute">
<summary>指示编译器使用 Win32 文件版本资源的特定版本号。不要求 Win32 文件版本与程序集的版本号相同。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyFileVersionAttribute.#ctor(System.String)">
<summary>初始化 <see cref="T:System.Reflection.AssemblyFileVersionAttribute"/> 类的新实例，指定文件版本。</summary>
<param name="version">文件版本。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="version"/> 为 null。 </exception>
    </member>
    <member name="P:System.Reflection.AssemblyFileVersionAttribute.Version">
<summary>获取 Win32 文件版本资源名称。</summary>
<returns>包含文件版本资源名称的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyFlagsAttribute">
<summary>为程序集指定 <see cref="T:System.Reflection.AssemblyNameFlags"/> 标志的按位组合，从而描述实时 (JIT) 编译器选项，该程序集是否可重定目标以及是否有完整或已标记化的公钥。无法继承此类。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyFlagsAttribute.#ctor(System.Reflection.AssemblyNameFlags)">
<summary>使用 <see cref="T:System.Reflection.AssemblyNameFlags"/> 标志的指定组合初始化 <see cref="T:System.Reflection.AssemblyFlagsAttribute"/> 类的新实例。</summary>
<param name="assemblyFlags"><see cref="T:System.Reflection.AssemblyNameFlags"/> 标志的按位组合，表示实时 (JIT) 编译器选项、寿命、程序集是否可重定目标以及是否有完整或已标记化的公钥。</param>
    </member>
    <member name="P:System.Reflection.AssemblyFlagsAttribute.AssemblyFlags">
<summary>获取一个整数值，该值表示在创建此属性实例时指定的 <see cref="T:System.Reflection.AssemblyNameFlags"/> 标志的组合。</summary>
<returns>一个整数值，表示 <see cref="T:System.Reflection.AssemblyNameFlags"/> 标志的按位组合。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyInformationalVersionAttribute">
<summary>定义程序集清单的其他版本信息。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyInformationalVersionAttribute.#ctor(System.String)">
<summary>初始化 <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute"/> 类的新实例。</summary>
<param name="informationalVersion">程序集版本信息。 </param>
    </member>
    <member name="P:System.Reflection.AssemblyInformationalVersionAttribute.InformationalVersion">
<summary>获取版本信息。</summary>
<returns>包含版本信息的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyKeyFileAttribute">
<summary>指定包含用于生成强名称的密钥对的文件名称。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyKeyFileAttribute.#ctor(System.String)">
<summary>使用文件的名称初始化 AssemblyKeyFileAttribute 类的新实例，该文件包含为正在属性化的程序集生成强名称的密钥对。</summary>
<param name="keyFile">包含密钥对的文件的名称。 </param>
    </member>
    <member name="P:System.Reflection.AssemblyKeyFileAttribute.KeyFile">
<summary>获取文件的名称，该文件包含用于为属性化程序集生成强名称的密钥对。</summary>
<returns>包含密钥对所在文件的名称的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyKeyNameAttribute">
<summary>指定 CSP 内某密钥容器的名称，该密钥容器包含用于生成强名称的密钥对。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyKeyNameAttribute.#ctor(System.String)">
<summary>使用某容器的名称（该容器保存用于为正在属性化的程序集生成强名称的密钥对）来初始化 <see cref="T:System.Reflection.AssemblyKeyNameAttribute"/> 类的新实例。</summary>
<param name="keyName">包含密钥对的容器的名称。 </param>
    </member>
    <member name="P:System.Reflection.AssemblyKeyNameAttribute.KeyName">
<summary>获取容器的名称，该容器包含用于为属性化程序集生成强名称的密钥对。</summary>
<returns>一个字符串，它包含带有相关密钥对的容器的名称。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyName">
<summary>完整描述程序集的唯一标识。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyName.#ctor">
<summary>初始化 <see cref="T:System.Reflection.AssemblyName"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyName.#ctor(System.String)">
<summary>用指定的显示名称初始化 <see cref="T:System.Reflection.AssemblyName"/> 类的新实例。</summary>
<param name="assemblyName">程序集的显示名称，由 <see cref="P:System.Reflection.AssemblyName.FullName"/> 属性返回。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="assemblyName"/> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="assemblyName"/> 是零长度字符串。</exception>
<exception cref="T:System.IO.FileLoadException">找不到所引用的程序集，或无法加载。</exception>
    </member>
    <member name="M:System.Reflection.AssemblyName.Clone">
<summary>制作此 AssemblyName 对象的副本。</summary>
<returns>作为 AssemblyName 对象副本的对象。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.CodeBase">
<summary>[SECURITY CRITICAL] 获取或设置程序集的 URL 位置。</summary>
<returns>一个字符串，它是程序集的 URL 位置。 </returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.CultureInfo">
<summary>获取或设置程序集支持的区域性。</summary>
<returns>程序集支持的区域性。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.Flags">
<summary>获取或设置该程序集的属性。</summary>
<returns>程序集的属性。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.FullName">
<summary>获取程序集的全名（也称为显示名称）。</summary>
<returns>一个字符串，是程序集的全名（显示名称）。</returns>
    </member>
    <member name="M:System.Reflection.AssemblyName.GetPublicKey">
<summary>获取标识程序集的公钥。 </summary>
<returns>程序集的公钥。</returns>
    </member>
    <member name="M:System.Reflection.AssemblyName.GetPublicKeyToken">
<summary>获取公钥标记，该标记为应用程序或程序集签名时所用公钥的 SHA-1 哈希值的最后 8 个字节。</summary>
<returns>公钥标记。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.HashAlgorithm">
<summary>获取或设置程序集清单使用的哈希算法。</summary>
<returns>程序集清单使用的哈希算法。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.Name">
<summary>获取或设置程序集的简单名称。这通常（但不一定）是程序集的清单文件的文件名，不包括其扩展名。</summary>
<returns>程序集的简单名称。</returns>
    </member>
    <member name="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
<summary>返回一个值，该值指示加载程序是否将两个程序集名称解析为同一程序集。</summary>
<returns>如果加载程序将 <paramref name="definition"/> 解析为与 <paramref name="reference"/> 相同的程序集，则为 true；否则为 false。</returns>
<param name="reference">引用程序集名称。</param>
<param name="definition">与引用程序集进行比较的程序集名称。</param>
    </member>
    <member name="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
<summary>设置标识程序集的公钥。</summary>
<param name="publicKey">字节数组，包含程序集的公钥。 </param>
    </member>
    <member name="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
<summary>设置公钥标记，该标记为应用程序或程序集签名时所用公钥的 SHA-1 哈希值的最后 8 个字节。</summary>
<param name="publicKeyToken">字节数组，包含程序集的公钥标记。 </param>
    </member>
    <member name="M:System.Reflection.AssemblyName.ToString">
<summary>返回程序集的全名，即所谓的显示名称。</summary>
<returns>程序集的全名；如果不能确定程序集的全名，则为类名。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.Version">
<summary>获取或设置程序集的主版本号、次版本号、内部版本号和修订号。</summary>
<returns>程序集的主版本号、次版本号、内部版本号和修订号。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.VersionCompatibility">
<summary>获取或设置与程序集同其他程序集的兼容性相关的信息。</summary>
<returns>有关程序集同其他程序集的兼容性的信息。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyNameFlags">
<summary>提供有关 <see cref="T:System.Reflection.Assembly"/> 引用的信息。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.None">
<summary>指定没有有效标志。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.PublicKey">
<summary>指定公钥基于完整公钥而不是公钥标记构成。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.EnableJITcompileOptimizer">
<summary>指定已经为程序集禁用实时 (JIT) 编译器优化。这与成员名称暗示的含义正好相反。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.EnableJITcompileTracking">
<summary>指定已经为程序集启用实时 (JIT) 编译器跟踪。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.Retargetable">
<summary>指定可以在运行时将程序集重定向到来自其他发行者的程序集。</summary>
    </member>
    <member name="T:System.Reflection.AssemblyProductAttribute">
<summary>定义程序集清单的产品名称自定义属性。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyProductAttribute.#ctor(System.String)">
<summary>初始化 <see cref="T:System.Reflection.AssemblyProductAttribute"/> 类的新实例。</summary>
<param name="product">产品名称信息。 </param>
    </member>
    <member name="P:System.Reflection.AssemblyProductAttribute.Product">
<summary>获取产品名称信息。</summary>
<returns>包含产品名称的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyTitleAttribute">
<summary>指定程序集的说明。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyTitleAttribute.#ctor(System.String)">
<summary>初始化 <see cref="T:System.Reflection.AssemblyTitleAttribute"/> 类的新实例。</summary>
<param name="title">程序集标题。 </param>
    </member>
    <member name="P:System.Reflection.AssemblyTitleAttribute.Title">
<summary>获取程序集标题信息。</summary>
<returns>包含程序集标题的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyTrademarkAttribute">
<summary>定义程序集清单的商标自定义属性。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyTrademarkAttribute.#ctor(System.String)">
<summary>初始化 <see cref="T:System.Reflection.AssemblyTrademarkAttribute"/> 类的新实例。</summary>
<param name="trademark">商标信息。 </param>
    </member>
    <member name="P:System.Reflection.AssemblyTrademarkAttribute.Trademark">
<summary>获取商标信息。</summary>
<returns>包含商标信息的 String。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyVersionAttribute">
<summary>指定正在属性化的程序集的版本。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyVersionAttribute.#ctor(System.String)">
<summary>使用正在属性化的程序集的版本号来初始化 AssemblyVersionAttribute 类的新实例。</summary>
<param name="version">属性化程序集的版本号。 </param>
    </member>
    <member name="P:System.Reflection.AssemblyVersionAttribute.Version">
<summary>获取属性化程序集的版本号。</summary>
<returns>包含程序集的版本号的字符串。</returns>
    </member>
    <member name="T:System.Reflection.Binder">
<summary>从候选者列表中选择一个成员，并执行实际参数类型到形式参数类型的类型转换。 </summary>
    </member>
    <member name="M:System.Reflection.Binder.#ctor">
<summary>初始化 <see cref="T:System.Reflection.Binder"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
<summary>基于指定的判据，从给定的字段集中选择一个字段。</summary>
<returns>匹配的字段。 </returns>
<param name="bindingAttr"><see cref="T:System.Reflection.BindingFlags"/> 值的按位组合。 </param>
<param name="match">用于匹配的候选字段集。例如，当 <see cref="Overload:System.Type.InvokeMember"/> 使用 <see cref="T:System.Reflection.Binder"/> 对象时，此参数将指定反射已确定为可能匹配项的字段集，通常是因为它们有正确的成员名称。由 <see cref="P:System.Type.DefaultBinder"/> 提供的默认实现会更改此数组的顺序。</param>
<param name="value">用于查找匹配字段的字段值。 </param>
<param name="culture">一个 <see cref="T:System.Globalization.CultureInfo"/> 实例，用于在强制类型的联编程序实现中控制数据类型强制。如果 <paramref name="culture"/> 为 null，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo"/>。说明   例如，如果联编程序实现允许将字符串值强制转换为数值类型，则此参数对于将表示 1000 的 String 转换为 Double 值是必需的，因为不同的区域性以不同的方式表示 1000。默认联编程序不进行此类字符串强制。</param>
<exception cref="T:System.Reflection.AmbiguousMatchException">对于默认的联编程序，<paramref name="bindingAttr"/> 包括 <see cref="F:System.Reflection.BindingFlags.SetField"/>，并且 <paramref name="match"/> 包含多个与 <paramref name="value"/> 良好匹配且匹配程度相同的字段。例如，<paramref name="value"/> 包含一个实现 IMyClass 接口的 MyClass 对象，并且 <paramref name="match"/> 包含一个类型为 MyClass 的字段和一个类型为 IMyClass 的字段。 </exception>
<exception cref="T:System.MissingFieldException">对于默认联编程序，<paramref name="bindingAttr"/> 包括 <see cref="F:System.Reflection.BindingFlags.SetField"/>，并且 <paramref name="match"/> 不包含任何可接受 <paramref name="value"/> 的字段。</exception>
<exception cref="T:System.NullReferenceException">对于默认联编程序，<paramref name="bindingAttr"/> 包括 <see cref="F:System.Reflection.BindingFlags.SetField"/> 并且 <paramref name="match"/> 为 null 或空数组。-或- <paramref name="bindingAttr"/> 包括 <see cref="F:System.Reflection.BindingFlags.SetField"/> 并且 <paramref name="value"/> 为 null。</exception>
    </member>
    <member name="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
<summary>基于提供的参数，从给定的方法集中选择要调用的方法。</summary>
<returns>匹配的方法。</returns>
<param name="bindingAttr"><see cref="T:System.Reflection.BindingFlags"/> 值的按位组合。 </param>
<param name="match">用于匹配的候选方法集。例如，当 <see cref="Overload:System.Type.InvokeMember"/> 使用 <see cref="T:System.Reflection.Binder"/> 对象时，此参数将指定反射已确定为可能匹配项的方法集，通常是因为它们有正确的成员名称。由 <see cref="P:System.Type.DefaultBinder"/> 提供的默认实现会更改此数组的顺序。</param>
<param name="args">传入的参数。联编程序可以更改此数组中的参数的顺序；例如，如果 <paramref name="names"/> 参数用于指定位置顺序以外的顺序，则默认联编程序会更改参数的顺序。如果联编程序实现强制转换参数类型，则也可以更改参数的类型和值。 </param>
<param name="modifiers">使绑定能够处理在其中修改了类型的参数签名的参数修饰符数组。默认的联编程序实现不使用此参数。</param>
<param name="culture">一个 <see cref="T:System.Globalization.CultureInfo"/> 实例，用于在强制类型的联编程序实现中控制数据类型强制。如果 <paramref name="culture"/> 为 null，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo"/>。说明   例如，如果联编程序实现允许将字符串值强制转换为数值类型，则此参数对于将表示 1000 的 String 转换为 Double 值是必需的，因为不同的区域性以不同的方式表示 1000。默认联编程序不进行此类字符串强制。</param>
<param name="names">参数名（如果匹配时要考虑参数名）或 null（如果要将变量视为纯位置）。例如，如果没有按位置顺序提供变量，则必须使用参数名。 </param>
<param name="state">方法返回之后，<paramref name="state"/> 包含一个联编程序提供的对象，用于跟踪参数的重新排序。联编程序创建此对象，并且联编程序是此对象的唯一使用者。如果在返回 BindToMethod 时 <paramref name="state"/> 不为 null，若要将 <paramref name="args"/> 还原为其原始顺序，您必须将 <paramref name="state"/> 传递给 <see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)"/> 方法，以便可以检索 ref 参数（在 Visual Basic 中为 ByRef 参数）的值。 </param>
<exception cref="T:System.Reflection.AmbiguousMatchException">对于默认联编程序，<paramref name="match"/> 包含多个与 <paramref name="args"/> 良好匹配且匹配程序相同的方法。例如，<paramref name="args"/> 包含一个实现 IMyClass 接口的 MyClass 对象，并且 <paramref name="match"/> 包含一个采用 MyClass 的方法和一个采用 IMyClass 的方法。 </exception>
<exception cref="T:System.MissingMethodException">对于默认联编程序，<paramref name="match"/> 不包含可以接受 <paramref name="args"/> 中提供的参数的任何方法。</exception>
<exception cref="T:System.ArgumentException">对于默认联编程序，<paramref name="match"/> 为 null 或一个空数组。</exception>
    </member>
    <member name="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
<summary>将给定 Object 的类型更改为给定 Type。</summary>
<returns>一个包含作为新类型的给定值的对象。 </returns>
<param name="value">要更改为新 Type 的对象。 </param>
<param name="type"><paramref name="value"/> 将变成的新 Type。 </param>
<param name="culture">一个 <see cref="T:System.Globalization.CultureInfo"/> 实例，用于控制数据类型的强制转换。如果 <paramref name="culture"/> 为 null，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo"/>。说明   例如，此参数对于将表示 1000 的 String 转换为 Double 值是必需的，因为不同的区域性以不同的方式表示 1000。 </param>
    </member>
    <member name="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)">
<summary>从 <see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)"/> 返回后，将 <paramref name="args"/> 参数还原为从 BindToMethod 传入时的状态。</summary>
<param name="args">传入的实际参数。参数的类型和值都可更改。 </param>
<param name="state">联编程序提供的对象，用于跟踪参数的重新排序。 </param>
    </member>
    <member name="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
<summary>基于参数类型，从给定的方法集中选择一个方法。</summary>
<returns>如果找到，则为匹配的方法；否则为 null。</returns>
<param name="bindingAttr"><see cref="T:System.Reflection.BindingFlags"/> 值的按位组合。 </param>
<param name="match">用于匹配的候选方法集。例如，当 <see cref="Overload:System.Type.InvokeMember"/> 使用 <see cref="T:System.Reflection.Binder"/> 对象时，此参数将指定反射已确定为可能匹配项的方法集，通常是因为它们有正确的成员名称。由 <see cref="P:System.Type.DefaultBinder"/> 提供的默认实现会更改此数组的顺序。</param>
<param name="types">用于定位匹配方法的参数类型。 </param>
<param name="modifiers">使绑定能够处理在其中修改了类型的参数签名的参数修饰符数组。 </param>
<exception cref="T:System.Reflection.AmbiguousMatchException">对于默认联编程序，<paramref name="match"/> 包含多个与由 <paramref name="types"/> 描述的参数类型良好匹配且匹配程序相同的方法。例如，<paramref name="types"/> 中的数组包含一个用于 MyClass 的 <see cref="T:System.Type"/> 对象，并且 <paramref name="match"/> 中的数组包含一个采用 MyClass 的基类的方法和一个采用 MyClass 实现的接口的方法。 </exception>
<exception cref="T:System.ArgumentException">对于默认联编程序，<paramref name="match"/> 为 null 或空数组。-或- <paramref name="types"/> 的元素从 <see cref="T:System.Type"/>，但并不属于类型 RuntimeType。</exception>
    </member>
    <member name="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
<summary>基于指定的判据，从给定的属性集中选择一个属性。</summary>
<returns>匹配的属性。</returns>
<param name="bindingAttr"><see cref="T:System.Reflection.BindingFlags"/> 值的按位组合。 </param>
<param name="match">用于匹配的候选属性集。例如，当 <see cref="Overload:System.Type.InvokeMember"/> 使用 <see cref="T:System.Reflection.Binder"/> 对象时，此参数将指定反射已确定为可能匹配项的属性集，通常是因为它们有正确的成员名称。由 <see cref="P:System.Type.DefaultBinder"/> 提供的默认实现会更改此数组的顺序。</param>
<param name="returnType">匹配属性必须具有的返回值。 </param>
<param name="indexes">所搜索的属性的索引类型。用于索引属性，如类的索引器。 </param>
<param name="modifiers">使绑定能够处理在其中修改了类型的参数签名的参数修饰符数组。 </param>
<exception cref="T:System.Reflection.AmbiguousMatchException">对于默认联编程序，<paramref name="match"/> 包含多个与 <paramref name="returnType"/> 和 <paramref name="indexes"/> 良好匹配且匹配程序相同的属性。 </exception>
<exception cref="T:System.ArgumentException">对于默认联编程序，<paramref name="match"/> 为 null 或一个空数组。 </exception>
    </member>
    <member name="T:System.Reflection.BindingFlags">
<summary>指定控制绑定和由反射执行的成员和类型搜索方法的标志。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Default">
<summary>没有绑定标志。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.IgnoreCase">
<summary>绑定时不应考虑成员名的大小写。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.DeclaredOnly">
<summary>只应考虑在所提供类型的层次结构级别上声明的成员。不考虑继承成员。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Instance">
<summary>实例成员应包含在搜索中。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Static">
<summary>搜索中应包含静态成员。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Public">
<summary>搜索中应包含公共成员。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.NonPublic">
<summary>搜索中应包含非公共成员。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.FlattenHierarchy">
<summary>应返回层次结构上的公共静态成员和受保护的静态成员。不返回继承类中的私有静态成员。静态成员包括字段、方法、事件和属性。不返回嵌套类型。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.InvokeMethod">
<summary>要调用一个方法。它不能是构造函数或类型初始值设定项。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.CreateInstance">
<summary>反射应当创建指定类型的实例。此标志调用与给定参数匹配的构造函数。忽略提供的成员名。如果未指定查找类型，将应用 (Instance |Public)。调用类型初始值设定项是不可能的。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.GetField">
<summary>应返回指定字段的值。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.SetField">
<summary>应设置指定字段的值。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.GetProperty">
<summary>应返回指定属性的值。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.SetProperty">
<summary>应设置指定属性的值。对于 COM 属性，指定此绑定标志与指定 PutDispProperty 和 PutRefDispProperty 是等效的。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.PutDispProperty">
<summary>应调用 COM 对象的 PROPPUT 成员。PROPPUT 指定使用值的属性设置函数。如果属性同时具有 PROPPUT 和 PROPPUTREF，而且需要区分调用哪一个，请使用 PutDispProperty。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.PutRefDispProperty">
<summary>应调用 COM 对象的 PROPPUTREF 成员。PROPPUTREF 指定使用引用而不是值的属性设置函数。如果属性同时具有 PROPPUT 和 PROPPUTREF，而且需要区分调用哪一个，请使用 PutRefDispProperty。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.ExactBinding">
<summary>提供的实际参数的类型必须与对应形式参数的类型完全匹配。如果调用方提供一个非空 Binder 对象，则“反射”将引发异常，因为这意味着调用方正在提供的 BindToXXX 实现将选取适当的方法。默认联编程序忽略此标志，而自定义联编程序可以实现此标志的语义。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.SuppressChangeType">
<summary>未实现。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.OptionalParamBinding">
<summary>应返回其参数计数与提供的参数的数目匹配的成员集。此绑定标志用于所带参数具有默认值的方法和带变量参数 (varargs) 的方法。此标志应只与 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 方法一起使用。具有默认值的参数仅用在省略尾部参数的调用中。它们必须是最后的参数。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.IgnoreReturn">
<summary>在 COM 互操作中用于指定可以忽略成员的返回值。</summary>
    </member>
    <member name="T:System.Reflection.CallingConventions">
<summary>定义方法的有效调用约定。</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.Standard">
<summary>指定公共语言运行时确定的默认调用约定。对静态方法使用此调用约定。对实例或虚方法使用 HasThis。</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.VarArgs">
<summary>指定包含变量参数的方法的调用约定。</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.Any">
<summary>指定可以使用 Standard 调用约定或 VarArgs 调用约定。</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.HasThis">
<summary>指定一个实例或虚方法（不是静态方法）。运行时，向被调用方法传递一个指向目标对象的指针作为此方法的第一个参数（this 指针）。存储在元数据中的签名不包括此第一个参数的类型，因为此方法是已知的，并且其所有者类能够从元数据中发现。</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.ExplicitThis">
<summary>指定该签名是函数指针签名，它表示对实例或虚方法（不是静态方法）的调用。如果设置了 ExplicitThis，则还须设置 HasThis。传递到被调用方法的第一个参数仍然是 this 指针，但第一个参数的类型现在未知。因此，应将描述 this 指针的类型（或类）的标记显式存储到其元数据签名中。</summary>
    </member>
    <member name="T:System.Reflection.ConstructorInfo">
<summary>发现类构造函数的属性并提供对构造函数元数据的访问权。 </summary>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.#ctor">
<summary>初始化 <see cref="T:System.Reflection.ConstructorInfo"/> 类的新实例。</summary>
    </member>
    <member name="F:System.Reflection.ConstructorInfo.ConstructorName">
<summary>表示存储在元数据中的类构造函数方法的名称。该名称始终为“.ctor”。此字段为只读。</summary>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.Invoke(System.Object[])">
<summary>使用指定参数调用当前构造函数。 </summary>
<returns>与构造函数关联的类的实例。</returns>
<param name="parameters">与此构造函数的参数的个数、顺序和类型（受默认联编程序的约束）相匹配的值的数组。如果此构造函数不采用任何参数，则传递 null 或包含零个元素的数组，例如，new Object[] {}（在 Visual Basic 中为 New Object() {}）。如果此数组中的对象未用值来显式初始化，则该对象将包含该对象类型的默认值。对于引用类型的元素，该值为 null。对于值类型的元素，该值为 0、0.0 或 false，具体取决于特定的元素类型。 </param>
<exception cref="T:System.MemberAccessException">此类是抽象类。-或- 构造函数是类初始值设定项。 </exception>
<exception cref="T:System.MethodAccessException">构造函数是私有的或受保护的。</exception>
<exception cref="T:System.ArgumentException"><paramref name="parameters"/> 数组不包含与此构造函数所接受的类型相匹配的值。 </exception>
<exception cref="T:System.Reflection.TargetInvocationException">调用的构造函数引发异常。 </exception>
<exception cref="T:System.Reflection.TargetParameterCountException">传递的参数个数不正确。 </exception>
<exception cref="T:System.NotSupportedException">不支持创建 <see cref="T:System.TypedReference"/> 和 <see cref="T:System.RuntimeArgumentHandle"/> 类型。</exception>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
<summary>在派生类中实现时，调用具有指定参数的当前构造函数，并使用指定的联编程序和区域性来验证参数类型。</summary>
<returns>与构造函数关联的类的实例。</returns>
<param name="invokeAttr">指定绑定类型的枚举值之一。 </param>
<param name="binder">一个对象，它定义一组属性并通过反射来启用绑定、参数类型强制和成员调用。如果 <paramref name="binder"/> 为 null，则使用 <see cref="P:System.Type.DefaultBinder"/>。 </param>
<param name="parameters">Object 类型的数组，该类型用于在 <paramref name="binder"/> 的约束下匹配此构造函数的参数的个数、顺序和类型。如果此构造函数不需要任何参数，则传递 null 或包含零个元素的数组，例如，new Object[] {}（在 Visual Basic 中为 New Object() {}）。如果此数组中的对象未用值来显式初始化，则该对象将包含该对象类型的默认值。对于引用类型的元素，该值为 null。对于值类型的元素，该值为 0、0.0 或 false，具体取决于特定的元素类型。 </param>
<param name="culture">用于控制类型强制的对象。如果这是 null，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo"/>。 </param>
<exception cref="T:System.ArgumentException">在 <paramref name="binder"/> 的约束下，<paramref name="parameters"/> 数组不包含与此构造函数所接受的类型相匹配的值。 </exception>
<exception cref="T:System.Reflection.TargetInvocationException">调用的构造函数引发异常。 </exception>
<exception cref="T:System.Reflection.TargetParameterCountException">传递的参数个数不正确。 </exception>
<exception cref="T:System.NotSupportedException">不支持创建 <see cref="T:System.TypedReference"/> 和 <see cref="T:System.RuntimeArgumentHandle"/> 类型。</exception>
<exception cref="T:System.MemberAccessException">此类是抽象类。-或- 构造函数是类初始值设定项。 </exception>
<exception cref="T:System.MethodAccessException">构造函数是私有的或受保护的。 </exception>
    </member>
    <member name="P:System.Reflection.ConstructorInfo.MemberType">
<summary>获取一个 <see cref="T:System.Reflection.MemberTypes"/> 值，该值指示此成员是构造函数。</summary>
<returns>一个值，指示此成员是构造函数。</returns>
    </member>
    <member name="F:System.Reflection.ConstructorInfo.TypeConstructorName">
<summary>表示存储于元数据中的类型构造函数方法的名称。该名称始终为“.cctor”。此属性为只读。</summary>
    </member>
    <member name="T:System.Reflection.CustomAttributeFormatException">
<summary>当自定义属性的二进制格式无效时引发的异常。</summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeFormatException.#ctor">
<summary>使用默认属性初始化 <see cref="T:System.Reflection.CustomAttributeFormatException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeFormatException.#ctor(System.String)">
<summary>使用指定的消息初始化 <see cref="T:System.Reflection.CustomAttributeFormatException"/> 类的新实例。</summary>
<param name="message">指示引发异常的原因的消息。 </param>
    </member>
    <member name="M:System.Reflection.CustomAttributeFormatException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Reflection.CustomAttributeFormatException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="inner">导致当前异常的异常。如果 <paramref name="inner"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="T:System.Reflection.DefaultMemberAttribute">
<summary>定义某类型的成员，该成员是 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 使用的默认成员。 </summary>
    </member>
    <member name="M:System.Reflection.DefaultMemberAttribute.#ctor(System.String)">
<summary>初始化 <see cref="T:System.Reflection.DefaultMemberAttribute"/> 类的新实例。</summary>
<param name="memberName">包含要调用的成员名称的 String。这可能是一个构造函数、方法、属性或字段。在调用成员时必须指定合适的调用属性。通过传递一个空 String 作为成员名称，可以指定类的默认成员。类型的默认成员由 DefaultMemberAttribute 自定义属性标记，或按通常的方法在 COM 中标记。 </param>
    </member>
    <member name="P:System.Reflection.DefaultMemberAttribute.MemberName">
<summary>从属性中获取名称。</summary>
<returns>表示成员名称的字符串。</returns>
    </member>
    <member name="T:System.Reflection.EventAttributes">
<summary>指定事件的属性。</summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.None">
<summary>指定该事件不具有属性。</summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.SpecialName">
<summary>指定事件特殊，具体之处由名称描述。</summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.ReservedMask">
<summary>指定仅供公共语言运行时使用的保留标志。</summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.RTSpecialName">
<summary>指定公共语言运行时应检查名称编码。</summary>
    </member>
    <member name="T:System.Reflection.EventInfo">
<summary>发现事件的属性并提供对事件元数据的访问权。</summary>
    </member>
    <member name="M:System.Reflection.EventInfo.#ctor">
<summary>初始化 <see cref="T:System.Reflection.EventInfo"/> 类的新实例。</summary>
<exception cref="T:System.MemberAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用此成员。</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
<summary>将事件处理程序添加到事件源。</summary>
<param name="target">事件源。 </param>
<param name="handler">当此事件由目标引发时将调用的一个或多个方法的封装。 </param>
<exception cref="T:System.InvalidOperationException">该事件没有公共的 add 访问器。</exception>
<exception cref="T:System.ArgumentException">传入的处理程序无法使用。 </exception>
<exception cref="T:System.Reflection.TargetException"><paramref name="target"/> 参数为 null 并且该事件不是静态的。-或- 未在目标上声明 <see cref="T:System.Reflection.EventInfo"/>。 </exception>
<exception cref="T:System.MemberAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用此成员。</exception>
    </member>
    <member name="P:System.Reflection.EventInfo.Attributes">
<summary>获取此事件的属性。</summary>
<returns>该事件的属性。</returns>
    </member>
    <member name="P:System.Reflection.EventInfo.EventHandlerType">
<summary>获取与此事件关联的基础事件处理程序委托的 Type 对象。</summary>
<returns>委托事件处理程序。</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetAddMethod">
<summary>返回用于将事件处理程序委托添加到事件源的方法。</summary>
<returns>用于向事件源中添加事件处理程序委托的方法；如果该方法不是公共方法，则为 null。</returns>
<exception cref="T:System.MemberAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用此成员。</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
<summary>当在派生类中重写时，返回用于向事件源添加事件处理程序委托的方法，并指定在当前事件为非公共事件的情况下是否返回该方法。</summary>
<returns>用于向事件源中添加事件处理程序委托的方法；如果 <paramref name="nonPublic"/> 为 false 且该方法不是公共方法，则为 null。</returns>
<param name="nonPublic">如果在它为非公共事件的情况下返回该方法，则为 true；否则为 false。 </param>
<exception cref="T:System.MemberAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用此成员。</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRaiseMethod">
<summary>返回在引发该事件时所调用的方法。</summary>
<returns>引发该事件时所调用的方法。</returns>
<exception cref="T:System.MemberAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用此成员。</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
<summary>当在派生类中重写时，返回引发事件时调用的方法，指定是否返回非公共方法。</summary>
<returns>引发该事件时所调用的方法。</returns>
<param name="nonPublic">如果可以返回非公共方法，则为 true；否则为 false。 </param>
<exception cref="T:System.MemberAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用此成员。</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRemoveMethod">
<summary>返回用于从事件源中移除事件处理程序委托的方法。</summary>
<returns>用于从事件源移除事件处理程序委托的方法；如果该方法不是公共方法，则为 null。</returns>
<exception cref="T:System.MemberAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用此成员。</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
<summary>当在派生类中重写时，检索用于移除事件的方法的 <see cref="T:System.Reflection.MethodInfo"/> 对象，指定是否返回非公共方法。</summary>
<returns>用于从事件源中移除事件处理程序委托的方法；如果 <paramref name="nonPublic"/> 为 false 且该方法不是公共方法，则为 null。</returns>
<param name="nonPublic">如果在当前事件为非公共事件的情况下返回该方法，则为 true；否则为 false。 </param>
<exception cref="T:System.MemberAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用此成员。</exception>
    </member>
    <member name="P:System.Reflection.EventInfo.IsMulticast">
<summary>获取一个值，该值指示此事件是否为多路广播事件。</summary>
<returns>如果该委托是多播委托的实例，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.EventInfo.IsSpecialName">
<summary>获取一个值，该值指示 <see cref="T:System.Reflection.EventInfo"/> 是否具有一个有特殊意义的名称。</summary>
<returns>如果此事件具有一个特殊名称，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.EventInfo.MemberType">
<summary>获取一个 <see cref="T:System.Reflection.MemberTypes"/> 值，该值指示此成员是事件。</summary>
<returns>一个值，指示此成员是事件。</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
<summary>从事件源中移除事件处理程序。</summary>
<param name="target">事件源。 </param>
<param name="handler">要从事件源解除挂钩的委托。 </param>
<exception cref="T:System.InvalidOperationException">该事件没有公共的 remove 访问器。 </exception>
<exception cref="T:System.ArgumentException">传入的处理程序无法使用。 </exception>
<exception cref="T:System.Reflection.TargetException"><paramref name="target"/> 参数为 null 并且该事件不是静态的。-或- 未在目标上声明 <see cref="T:System.Reflection.EventInfo"/>。 </exception>
<exception cref="T:System.MemberAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用此成员。</exception>
    </member>
    <member name="T:System.Reflection.FieldAttributes">
<summary>指定字段的属性。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.FieldAccessMask">
<summary>指定给定字段的访问级别。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.PrivateScope">
<summary>不能引用该字段。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Private">
<summary>该字段只能由父类型访问。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.FamANDAssem">
<summary>该字段只能由此程序集中的子类型访问。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Assembly">
<summary>该字段可以在整个程序集中进行访问。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Family">
<summary>该字段只能由类型和子类型访问。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.FamORAssem">
<summary>该字段可由任意位置的子类型访问，也可在整个此程序集中进行访问。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Public">
<summary>该字段可由任何可看见此范围的成员访问。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Static">
<summary>该字段表示已定义的类型，否则为每实例方式。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.InitOnly">
<summary>该字段只能初始化，初始化后不能写入。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Literal">
<summary>该字段的值是一个编译时（静态或早期绑定）常量。尝试设置它会引发 <see cref="T:System.FieldAccessException"/>。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.NotSerialized">
<summary>类型为远程类型时不必序列化该字段。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.SpecialName">
<summary>指定一个特殊字段，并用名称说明该字段的特殊性。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.PinvokeImpl">
<summary>保留。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.ReservedMask">
<summary>保留。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.RTSpecialName">
<summary>公共语言运行时（内部元数据 API）应检查名称编码。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.HasFieldMarshal">
<summary>该字段具有封送处理信息。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.HasDefault">
<summary>该字段具有默认值。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.HasFieldRVA">
<summary>该字段具有相对虚拟地址 (RVA)。RVA 是方法体在当前映像中的位置，它是相对于它所在的映像文件的开始的地址。</summary>
    </member>
    <member name="T:System.Reflection.FieldInfo">
<summary>发现字段属性并提供对字段元数据的访问权。 </summary>
    </member>
    <member name="M:System.Reflection.FieldInfo.#ctor">
<summary>初始化 <see cref="T:System.Reflection.FieldInfo"/> 类的新实例。</summary>
    </member>
    <member name="P:System.Reflection.FieldInfo.Attributes">
<summary>获取与此字段关联的属性。</summary>
<returns>此字段的属性。</returns>
<exception cref="T:System.MethodAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用此成员。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.FieldHandle">
<summary>获取字段的内部元数据表示形式的句柄。</summary>
<returns>某个字段的内部元数据表示形式的句柄。</returns>
<exception cref="T:System.MethodAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用此成员。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.FieldType">
<summary>获取此字段对象的类型。</summary>
<returns>此字段对象的类型。</returns>
<exception cref="T:System.MethodAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用此成员。</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
<summary>获取由指定句柄表示的字段的 <see cref="T:System.Reflection.FieldInfo"/>。</summary>
<returns><paramref name="handle"/> 指定的字段。</returns>
<param name="handle">一个结构，包含字段的内部元数据表示形式的句柄。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="handle"/> 无效。</exception>
<exception cref="T:System.MethodAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用该成员。</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
<summary>获取由指定句柄表示的指定泛型类型字段的 <see cref="T:System.Reflection.FieldInfo"/>。</summary>
<returns>该字段由 <paramref name="handle"/> 指定，在泛型类型中由 <paramref name="declaringType"/> 指定。</returns>
<param name="handle">一个结构，包含字段的内部元数据表示形式的句柄。</param>
<param name="declaringType">一个结构，包含定义该字段的泛型类型的句柄。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="handle"/> 无效。-或- <paramref name="declaringType"/> 与 <paramref name="handle"/> 不兼容。例如，<paramref name="declaringType"/> 是泛型类型定义的运行时类型句柄，且 <paramref name="handle"/> 来自于构造类型。请参阅“备注”。</exception>
<exception cref="T:System.MethodAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用该成员。</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetRawConstantValue">
<summary>由编译器返回与字段关联的文本值。 </summary>
<returns>与该字段相关联的文本值。如果文本值是一个元素值为零的类类型，则返回值为 null。</returns>
<exception cref="T:System.InvalidOperationException">非托管元数据中的常数表不包含当前属性的常数值。</exception>
<exception cref="T:System.FormatException">值的类型不是公共语言规范 (CLS) 许可的类型。（请参阅“ECMA Partition II”（ECMA 第二部分）规范。） </exception>
<exception cref="T:System.MethodAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用该成员。</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetValue(System.Object)">
<summary>在派生类中被重写时，返回给定对象支持的字段的值。</summary>
<returns>包含此实例反映的字段值的对象。</returns>
<param name="obj">其字段值将返回的对象。 </param>
<exception cref="T:System.Reflection.TargetException">此字段是非静态的且 <paramref name="obj"/> 为 null。 </exception>
<exception cref="T:System.NotSupportedException">字段被标记为文本，但是该字段没有一个可接受的文本类型。 </exception>
<exception cref="T:System.FieldAccessException">该字段不可访问。 </exception>
<exception cref="T:System.ArgumentException"><paramref name="obj"/> 类既不声明该方法也不继承该方法。 </exception>
<exception cref="T:System.MethodAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用该成员。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsAssembly">
<summary>获取一个值，该值指示此字段的潜在可见性是否由 <see cref="F:System.Reflection.FieldAttributes.Assembly"/> 描述；也就是说，此字段最多只对同一程序集中的其他类型可见，而对该程序集以外的派生类型不可见。</summary>
<returns>如果此字段的可见性由 <see cref="F:System.Reflection.FieldAttributes.Assembly"/> 准确描述，则为 true；否则为 false。</returns>
<exception cref="T:System.MethodAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用此成员。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsFamily">
<summary>获取一个值，该值指示此字段的可见性是否由 <see cref="F:System.Reflection.FieldAttributes.Family"/> 描述；也就是说，此字段仅在其类和派生类内可见。</summary>
<returns>如果对此字段的访问由 <see cref="F:System.Reflection.FieldAttributes.Family"/> 准确描述，则为 true；否则为 false。</returns>
<exception cref="T:System.MethodAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用此成员。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
<summary>获取一个值，该值指示此字段的可见性是否由 <see cref="F:System.Reflection.FieldAttributes.FamANDAssem"/> 描述；也就是说，可从派生类访问此字段，但仅当这些派生类在同一程序集中时。</summary>
<returns>如果对此字段的访问由 <see cref="F:System.Reflection.FieldAttributes.FamANDAssem"/> 准确描述，则为 true；否则为 false。</returns>
<exception cref="T:System.MethodAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用此成员。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
<summary>获取一个值，该值指示此字段的潜在可见性是否由 <see cref="F:System.Reflection.FieldAttributes.FamORAssem"/> 描述；也就是说，可通过派生类（无论其位置如何）和同一程序集中的类访问此字段。</summary>
<returns>如果对此字段的访问由 <see cref="F:System.Reflection.FieldAttributes.FamORAssem"/> 准确描述，则为 true；否则为 false。</returns>
<exception cref="T:System.MethodAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用此成员。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsInitOnly">
<summary>获取一个值，该值指示此字段是否只能在构造函数的主体中设置。</summary>
<returns>如果字段设置了 InitOnly 属性，则为 true；否则为 false。</returns>
<exception cref="T:System.MethodAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用此成员。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsLiteral">
<summary>获取一个值，该值指示值是否是在编译时写入的，不能更改。</summary>
<returns>如果字段设置了 Literal 属性，则为 true；否则为 false。</returns>
<exception cref="T:System.MethodAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用此成员。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsNotSerialized">
<summary>获取一个值，该值指示此字段是否有 NotSerialized 属性。 </summary>
<returns>如果字段设置了 <see cref="F:System.Reflection.FieldAttributes.NotSerialized"/> 属性，则为 true；否则为 false。</returns>
<exception cref="T:System.MethodAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用此成员。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsPinvokeImpl">
<summary>获取一个值，该值指示是否在 <see cref="T:System.Reflection.FieldAttributes"/> 中设置了相应的 PinvokeImpl 属性。 </summary>
<returns>如果字段设置了 <see cref="F:System.Reflection.FieldAttributes.PinvokeImpl"/> 属性，则为 true；否则为 false。</returns>
<exception cref="T:System.MethodAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用此成员。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsPrivate">
<summary>获取一个值，该值指示此字段是否为私有字段。</summary>
<returns>如果此字段为私有字段，则为 true；否则为 false。</returns>
<exception cref="T:System.MethodAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用此成员。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsPublic">
<summary>获取一个值，该值指示此字段是否为公共字段。</summary>
<returns>如果此字段为公共字段，则为 true；否则为 false。</returns>
<exception cref="T:System.MethodAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用此成员。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsSpecialName">
<summary>获取一个值，该值指示此字段是否具有一个有特殊意义的名称。</summary>
<returns>如果字段设置了 <see cref="F:System.Reflection.FieldAttributes.SpecialName"/> 属性，则为 true；否则为 false。</returns>
<exception cref="T:System.MethodAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用此成员。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsStatic">
<summary>获取一个值，该值指示此字段是否标记有 static（在 Visual Basic 中为 Shared）。</summary>
<returns>如果此字段为静态字段，则为 true；否则为 false。</returns>
<exception cref="T:System.MethodAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用此成员。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.MemberType">
<summary>一个值，指示此成员是字段。</summary>
<returns>一个值，指示此成员是字段。</returns>
<exception cref="T:System.MethodAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用此成员。</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
<summary>设置给定对象支持的字段值。</summary>
<param name="obj">将设置其字段值的对象。 </param>
<param name="value">分配给字段的值。 </param>
<exception cref="T:System.FieldAccessException">该字段不可访问。 </exception>
<exception cref="T:System.Reflection.TargetException"><paramref name="obj"/> 参数为 null 并且该字段是一个实例字段。 </exception>
<exception cref="T:System.ArgumentException">对象上不存在该字段。-或- <paramref name="value"/> 参数无法转换并存储在该字段中。 </exception>
<exception cref="T:System.MethodAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用该成员。</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
<summary>在派生类中重写时，用对类型转换的指定约束设置字段的值。</summary>
<param name="obj">将设置其字段值的对象。 </param>
<param name="value">分配给字段的值。 </param>
<param name="invokeAttr">所需的绑定类型。 </param>
<param name="binder">一个对象，它实现此字段到 <paramref name="obj"/> 的绑定，并将 <paramref name="value"/> 强制为 <see cref="P:System.Reflection.FieldInfo.FieldType"/>。如果 <paramref name="binder"/> 为 null，则使用 <see cref="P:System.Type.DefaultBinder"/>。 </param>
<param name="culture">区域性，用于控制将 <paramref name="obj"/> 强制为 <see cref="P:System.Reflection.FieldInfo.FieldType"/> 的过程。 </param>
<exception cref="T:System.FieldAccessException">该字段不可访问。 </exception>
<exception cref="T:System.Reflection.TargetException"><paramref name="obj"/> 参数为 null 并且该字段是一个实例字段。 </exception>
<exception cref="T:System.ArgumentException">对象上不存在该字段。-或- <paramref name="value"/> 参数无法转换并存储在该字段中。 </exception>
<exception cref="T:System.MethodAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用该成员。</exception>
    </member>
    <member name="T:System.Reflection.GenericParameterAttributes">
<summary>描述对泛型类型或泛型方法的泛型类型参数的约束。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.None">
<summary>没有任何特殊标志。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.VarianceMask">
<summary>选择所有方差标志的组合。此值是使用逻辑“或”将以下标志进行组合的结果：<see cref="F:System.Reflection.GenericParameterAttributes.Contravariant"/> 和 <see cref="F:System.Reflection.GenericParameterAttributes.Covariant"/>。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.Covariant">
<summary>该泛型类型参数是协变的。协变类型参数可以作为方法的结果类型、只读字段的类型、声明的基类型或实现接口出现。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.Contravariant">
<summary>该泛型类型参数是逆变的。逆变类型参数可以作为参数类型出现在方法签名中。 </summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.SpecialConstraintMask">
<summary>选择所有特殊约束标志的组合。此值是使用逻辑“或”将以下标志进行组合的结果：<see cref="F:System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint"/>、<see cref="F:System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint"/> 和 <see cref="F:System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint"/>。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint">
<summary>仅当类型为引用类型时，才能替代泛型类型参数。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint">
<summary>仅当类型是值类型且不可为空时，才能替代泛型类型参数。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint">
<summary>仅当类型具有无参数构造函数时，才能替代泛型类型参数。</summary>
    </member>
    <member name="T:System.Reflection.ICustomAttributeProvider">
<summary>为支持自定义属性的反映对象提供自定义属性。</summary>
    </member>
    <member name="M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)">
<summary>返回在此成员上定义的所有自定义属性（命名属性除外）的数组，或如果没有自定义属性，返回一个空数组。</summary>
<returns>表示自定义属性的对象的数组或空数组。</returns>
<param name="inherit">当为 true 时，查找继承的自定义属性的层次结构链。 </param>
<exception cref="T:System.TypeLoadException">无法加载自定义属性类型。 </exception>
<exception cref="T:System.Reflection.AmbiguousMatchException">此成员上定义的 <paramref name="attributeType"/> 类型属性不止一个。 </exception>
    </member>
    <member name="M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)">
<summary>返回此成员上定义的自定义属性的数组（由类型标识），如果该类型没有自定义属性，则返回空数组。</summary>
<returns>表示自定义属性的对象的数组或空数组。</returns>
<param name="attributeType">自定义属性的类型。 </param>
<param name="inherit">当为 true 时，查找继承的自定义属性的层次结构链。 </param>
<exception cref="T:System.TypeLoadException">无法加载自定义属性类型。 </exception>
<exception cref="T:System.Reflection.AmbiguousMatchException">此成员上定义的 <paramref name="attributeType"/> 类型属性不止一个。 </exception>
    </member>
    <member name="M:System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)">
<summary>指示是否在此成员上定义一个或多个 <paramref name="attributeType"/> 的实例。</summary>
<returns>如果在此成员上定义 <paramref name="attributeType"/>，则为 true；否则为 false。</returns>
<param name="attributeType">自定义属性的类型。 </param>
<param name="inherit">当为 true 时，查找继承的自定义属性的层次结构链。 </param>
    </member>
    <member name="T:System.Reflection.InterfaceMapping">
<summary>将某个接口的映射检索到实现该接口的类上的实际方法中。</summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.InterfaceMethods">
<summary>显示在接口上定义的方法。</summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.InterfaceType">
<summary>显示表示接口的类型。</summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.TargetMethods">
<summary>显示实现接口的方法。</summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.TargetType">
<summary>表示用于创建接口映射的类型。</summary>
    </member>
    <member name="T:System.Reflection.IReflect">
<summary>与 IDispatch 接口进行互操作。</summary>
    </member>
    <member name="M:System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)">
<summary>返回与指定字段和绑定标志对应的 <see cref="T:System.Reflection.FieldInfo"/> 对象。</summary>
<returns><see cref="T:System.Reflection.FieldInfo"/> 对象，包含命名对象的符合 <paramref name="bindingAttr"/> 中指定的搜索约束的字段信息。</returns>
<param name="name">要查找的字段的名称。 </param>
<param name="bindingAttr">用于控制搜索的绑定属性。 </param>
<exception cref="T:System.Reflection.AmbiguousMatchException">该对象实现同名的多个字段。 </exception>
    </member>
    <member name="M:System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)">
<summary>返回与当前类的所有字段对应的 <see cref="T:System.Reflection.FieldInfo"/> 对象的数组。</summary>
<returns><see cref="T:System.Reflection.FieldInfo"/> 对象的数组，包含此反射对象的符合 <paramref name="bindingAttr"/> 中指定的搜索约束的所有字段信息。</returns>
<param name="bindingAttr">用于控制搜索的绑定属性。 </param>
    </member>
    <member name="M:System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)">
<summary>检索与所有公共成员对应或者与匹配指定名称的所有成员对应的 <see cref="T:System.Reflection.MemberInfo"/> 对象的数组。</summary>
<returns>与 <paramref name="name"/> 参数匹配的 <see cref="T:System.Reflection.MemberInfo"/> 对象的数组。</returns>
<param name="name">要查找的成员的名称。 </param>
<param name="bindingAttr">用于控制搜索的绑定属性。 </param>
    </member>
    <member name="M:System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)">
<summary>检索与所有公共成员或当前类的所有成员对应的 <see cref="T:System.Reflection.MemberInfo"/> 对象的数组。</summary>
<returns>包含此反射对象的所有成员信息的 <see cref="T:System.Reflection.MemberInfo"/> 对象数组。</returns>
<param name="bindingAttr">用于控制搜索的绑定属性。 </param>
    </member>
    <member name="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)">
<summary>在指定的搜索约束下检索与指定方法对应的 <see cref="T:System.Reflection.MethodInfo"/> 对象。</summary>
<returns>包含方法信息的 <see cref="T:System.Reflection.MethodInfo"/> 对象，匹配基于方法名和 <paramref name="bindingAttr"/> 中指定的搜索约束。</returns>
<param name="name">要查找的成员的名称。 </param>
<param name="bindingAttr">用于控制搜索的绑定属性。 </param>
<exception cref="T:System.Reflection.AmbiguousMatchException">该对象实现同名的多个方法。 </exception>
    </member>
    <member name="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
<summary>检索与指定方法对应的 <see cref="T:System.Reflection.MethodInfo"/> 对象，使用 <see cref="T:System.Type"/> 数组从重载方法中进行选择。</summary>
<returns>匹配所有指定参数的请求的方法。</returns>
<param name="name">要查找的成员的名称。 </param>
<param name="bindingAttr">用于控制搜索的绑定属性。 </param>
<param name="binder">实现 <see cref="T:System.Reflection.Binder"/> 的对象，它包含与此方法相关的属性。 </param>
<param name="types">用于从重载方法中进行选择的数组。 </param>
<param name="modifiers">参数修饰符数组，用来与参数签名进行绑定，这些参数签名中的类型已经被修改。 </param>
<exception cref="T:System.Reflection.AmbiguousMatchException">该对象实现同名的多个方法。 </exception>
    </member>
    <member name="M:System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)">
<summary>检索与所有公共方法或当前类的所有方法相关的 <see cref="T:System.Reflection.MethodInfo"/> 对象的数组。</summary>
<returns><see cref="T:System.Reflection.MethodInfo"/> 对象的数组，包含为此反射对象定义的符合 <paramref name="bindingAttr"/> 中指定的搜索约束的所有方法。</returns>
<param name="bindingAttr">用于控制搜索的绑定属性。 </param>
    </member>
    <member name="M:System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)">
<summary>检索与所有公共属性或当前类的所有属性对应的 <see cref="T:System.Reflection.PropertyInfo"/> 对象的数组。</summary>
<returns>在反射对象上定义的所有属性的 <see cref="T:System.Reflection.PropertyInfo"/> 对象数组。</returns>
<param name="bindingAttr">用于控制搜索的绑定属性。 </param>
    </member>
    <member name="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)">
<summary>在指定搜索约束下检索与指定属性对应的 <see cref="T:System.Reflection.PropertyInfo"/> 对象。</summary>
<returns>找到的与 <paramref name="bindingAttr"/> 中指定的搜索约束相符的属性的 <see cref="T:System.Reflection.PropertyInfo"/> 对象；如果没有找到此属性，则为 null。</returns>
<param name="name">要查找的属性的名称。 </param>
<param name="bindingAttr">用于控制搜索的绑定属性。 </param>
<exception cref="T:System.Reflection.AmbiguousMatchException">该对象实现同名的多个字段。 </exception>
    </member>
    <member name="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
<summary>在指定的搜索约束下检索与指定属性对应的 <see cref="T:System.Reflection.PropertyInfo"/> 对象。</summary>
<returns>如果在此反射对象中找到了具有指定名称的属性，则为所找到的属性的 <see cref="T:System.Reflection.PropertyInfo"/> 对象；如果没有找到此属性，则为 null。</returns>
<param name="name">要查找的成员的名称。 </param>
<param name="bindingAttr">用于控制搜索的绑定属性。 </param>
<param name="binder">实现 <see cref="T:System.Reflection.Binder"/> 的对象，它包含与此方法相关的属性。 </param>
<param name="returnType">属性的类型。 </param>
<param name="types">用于从同名的重载方法中进行选择的数组。 </param>
<param name="modifiers">用于选择参数修饰符的数组。 </param>
    </member>
    <member name="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
<summary>调用指定的成员。</summary>
<returns>指定的成员。</returns>
<param name="name">要查找的成员的名称。 </param>
<param name="invokeAttr"><see cref="T:System.Reflection.BindingFlags"/> 调用属性之一。<paramref name="invokeAttr"/> 参数可以是构造函数、方法、属性或字段。必须指定合适的调用属性。通过将空字符串 ("") 作为成员的名称传递来调用类的默认成员。 </param>
<param name="binder"><see cref="T:System.Reflection.BindingFlags"/> 位标志之一。实现 <see cref="T:System.Reflection.Binder"/>，包含与此方法相关的属性。 </param>
<param name="target">对其调用指定成员的对象。对于静态成员，此参数被忽略。 </param>
<param name="args">包含要调用的成员的参数数目、顺序和类型的对象数组。如果没有参数，则这是一个空数组。 </param>
<param name="modifiers"><see cref="T:System.Reflection.ParameterModifier"/> 对象的数组。此数组与表示元数据中被调用成员的参数属性的 <paramref name="args"/> 参数具有相同的长度。参数可以有下列属性：pdIn、pdOut、pdRetval、pdOptional 和 pdHasDefault。这些属性分别表示 [In]、[Out]、[retval]、[optional] 和默认参数。这些属性由不同的互操作性服务使用。 </param>
<param name="culture">用于控制类型强制的 <see cref="T:System.Globalization.CultureInfo"/> 的实例。例如，<paramref name="culture"/> 将表示 1000 的 String 转换为 Double 值，因为不同的区域性以不同的方式表示 1000。如果该参数为 null，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo"/>。 </param>
<param name="namedParameters">参数的 String 数组。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="invokeAttr"/> 是 <see cref="F:System.Reflection.BindingFlags.CreateInstance"/> 并且还设置了另一个位标志。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="invokeAttr"/> 不是 <see cref="F:System.Reflection.BindingFlags.CreateInstance"/>，且 <paramref name="name"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="invokeAttr"/> 不是来自 <see cref="T:System.Reflection.BindingFlags"/> 的调用属性。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="invokeAttr"/> 为属性或字段同时指定 get 和 set。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="invokeAttr"/> 同时指定字段 set 和 Invoke 方法。为字段 get 提供了 <paramref name="args"/>。 </exception>
<exception cref="T:System.ArgumentException">为字段 set 指定了多个参数。 </exception>
<exception cref="T:System.MissingFieldException">找不到该字段或属性。 </exception>
<exception cref="T:System.MissingMethodException">找不到此方法。 </exception>
<exception cref="T:System.MethodAccessException">调用方无权访问正在被调用的成员。-或- 正在被调用的成员或包含该成员的类型具有 <see cref="T:System.Security.SecurityCriticalAttribute"/> 属性。 </exception>
    </member>
    <member name="P:System.Reflection.IReflect.UnderlyingSystemType">
<summary>获取表示 <see cref="T:System.Reflection.IReflect"/> 对象的基础类型。</summary>
<returns>表示 <see cref="T:System.Reflection.IReflect"/> 对象的基础类型。</returns>
    </member>
    <member name="T:System.Reflection.LocalVariableInfo">
<summary>发现局部变量的属性并提供对局部变量元数据的访问。</summary>
    </member>
    <member name="M:System.Reflection.LocalVariableInfo.#ctor">
<summary>初始化 <see cref="T:System.Reflection.LocalVariableInfo"/> 类的新实例。</summary>
    </member>
    <member name="P:System.Reflection.LocalVariableInfo.IsPinned">
<summary>获取一个 <see cref="T:System.Boolean"/> 值，该值指示由局部变量引用的对象是否被固定在内存中。</summary>
<returns>如果变量引用的对象固定于内存中，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.LocalVariableInfo.LocalIndex">
<summary>获取方法体内局部变量的索引。</summary>
<returns>一个整数值，表示方法体内局部变量的声明顺序。</returns>
    </member>
    <member name="P:System.Reflection.LocalVariableInfo.LocalType">
<summary>获取局部变量的类型。</summary>
<returns>一个 <see cref="T:System.Type"/> 对象，表示局部变量的类型。</returns>
    </member>
    <member name="M:System.Reflection.LocalVariableInfo.ToString">
<summary>返回一个描述局部变量的用户可读的字符串。</summary>
<returns>一个字符串，显示有关局部变量的信息，包括类型名称、索引和固定状态。</returns>
    </member>
    <member name="T:System.Reflection.MemberFilter">
<summary>表示一个委托，该委托用于筛选 <see cref="T:System.Reflection.MemberInfo"/> 对象数组中表示的成员列表。</summary>
<returns>如果包括已筛选列表中的成员，则为 true；否则为 false。</returns>
<param name="m">筛选器应用到的 <see cref="T:System.Reflection.MemberInfo"/> 对象。 </param>
<param name="filterCriteria">用于筛选列表的任意对象。 </param>
    </member>
    <member name="T:System.Reflection.MemberInfo">
<summary>获取有关成员属性的信息并提供对成员元数据的访问。</summary>
    </member>
    <member name="M:System.Reflection.MemberInfo.#ctor">
<summary>初始化 <see cref="T:System.Reflection.MemberInfo"/> 类的新实例。</summary>
    </member>
    <member name="P:System.Reflection.MemberInfo.DeclaringType">
<summary>获取声明该成员的类。</summary>
<returns>声明该成员的类的 Type 对象。</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
<summary>当在派生类中重写时，返回应用于此成员的所有自定义属性的数组。 </summary>
<returns>一个包含应用于此成员的所有自定义属性的数组，在未定义任何属性时为包含零个元素的数组。</returns>
<param name="inherit">搜索此成员的继承链以查找这些属性，则为 true；否则为 false。属性和事件中忽略此参数；请参阅“备注”</param>
<exception cref="T:System.TypeLoadException">未能加载自定义属性类型。 </exception>
    </member>
    <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
<summary>当在派生类中重写时，返回应用于此成员并由 <see cref="T:System.Type"/> 标识的自定义属性的数组。</summary>
<returns>应用于此成员的自定义属性的数组；如果未应用任何可分配给 <paramref name="attributeType"/> 的属性，则为包含零个元素的数组。</returns>
<param name="attributeType">要搜索的属性类型。只返回可分配给此类型的属性。 </param>
<param name="inherit">搜索此成员的继承链以查找这些属性，则为 true；否则为 false。属性和事件中忽略此参数；请参阅“备注”。 </param>
<exception cref="T:System.TypeLoadException">未能加载自定义属性类型。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="attributeType"/> 为 null。</exception>
    </member>
    <member name="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
<summary>在派生类中重写时，指示是否将指定类型或其派生类型的一个或多个属性应用于此成员。</summary>
<returns>如果将 <paramref name="attributeType"/> 或其任何派生类型的一个或多个实例应用于此成员，则为 true；否则为 false。</returns>
<param name="attributeType">要搜索的自定义属性的类型。该搜索包括派生类型。 </param>
<param name="inherit">搜索此成员的继承链以查找这些属性，则为 true；否则为 false。属性和事件中忽略此参数；请参阅“备注”。</param>
    </member>
    <member name="P:System.Reflection.MemberInfo.MemberType">
<summary>在派生类中重写时，获取一个 <see cref="T:System.Reflection.MemberTypes"/> 值，指示此成员的类型（方法、构造函数和事件等）。</summary>
<returns>成员的类型。</returns>
    </member>
    <member name="P:System.Reflection.MemberInfo.MetadataToken">
<summary>获取一个值，该值标识元数据元素。</summary>
<returns>一个值，与 <see cref="P:System.Reflection.MemberInfo.Module"/> 一起来唯一标识元数据元素。</returns>
<exception cref="T:System.InvalidOperationException">当前 <see cref="T:System.Reflection.MemberInfo"/> 表示某数组类型的数组方法（如 Addres），该数组类型的元素类型属于尚未完成的动态类型。若要在这种情况下获取元数据标记，请将 <see cref="T:System.Reflection.MemberInfo"/> 对象传递给 <see cref="M:System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo)"/> 方法；或者使用 <see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])"/> 方法直接获取该标记，而不是首先使用 <see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])"/> 方法获取 <see cref="T:System.Reflection.MethodInfo"/>。</exception>
    </member>
    <member name="P:System.Reflection.MemberInfo.Module">
<summary>获取一个模块，在该模块中已经定义一个类型，该类型用于声明由当前 <see cref="T:System.Reflection.MemberInfo"/> 表示的成员。</summary>
<returns><see cref="T:System.Reflection.Module"/>，在其中已经定义一个类型，该类型用于声明由当前 <see cref="T:System.Reflection.MemberInfo"/> 表示的成员。</returns>
<exception cref="T:System.NotImplementedException">此方法未实现。</exception>
    </member>
    <member name="P:System.Reflection.MemberInfo.Name">
<summary>获取当前成员的名称。</summary>
<returns>此成员的名称。</returns>
    </member>
    <member name="P:System.Reflection.MemberInfo.ReflectedType">
<summary>获取用于获取 MemberInfo 的此实例的类对象。</summary>
<returns>type 对象，通过它获取了该 MemberInfo 对象。</returns>
    </member>
    <member name="T:System.Reflection.MemberTypes">
<summary>标记每个已定义为 MemberInfo 的派生类的成员类型。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Constructor">
<summary>指定该成员是一个构造函数，表示 <see cref="T:System.Reflection.ConstructorInfo"/> 成员。0x01 的十六进制值。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Event">
<summary>指定该成员是一个事件，表示 <see cref="T:System.Reflection.EventInfo"/> 成员。0x02 的十六进制值。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Field">
<summary>指定该成员是一个字段，表示 <see cref="T:System.Reflection.FieldInfo"/> 成员。0x04 的十六进制值。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Method">
<summary>指定该成员是一个方法，表示 <see cref="T:System.Reflection.MethodInfo"/> 成员。0x08 的十六进制值。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Property">
<summary>指定该成员是一个属性，表示 <see cref="T:System.Reflection.PropertyInfo"/> 成员。0x10 的十六进制值。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.TypeInfo">
<summary>指定该成员是一种类型，表示 <see cref="F:System.Reflection.MemberTypes.TypeInfo"/> 成员。0x20 的十六进制值。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Custom">
<summary>指定该成员是一个自定义成员类型。0x40 的十六进制值。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.NestedType">
<summary>指定该成员是一个嵌套类型，并扩展 <see cref="T:System.Reflection.MemberInfo"/>。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.All">
<summary>指定所有成员类型。</summary>
    </member>
    <member name="T:System.Reflection.MethodAttributes">
<summary>指定方法属性的标志。这些标志在 corhdr.h 文件中定义。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.MemberAccessMask">
<summary>检索可访问性信息。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.PrivateScope">
<summary>指示该成员不能被引用。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Private">
<summary>指示此方法只能由当前类访问。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.FamANDAssem">
<summary>指示此方法只能由该类型和它在此程序集中的派生类型的成员访问。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Assembly">
<summary>指示此方法可由该程序集的任何类访问。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Family">
<summary>指示此方法只可由该类及其派生类的成员访问。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.FamORAssem">
<summary>指示此方法可由任意位置的派生类访问，也可由程序集中的任何类访问。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Public">
<summary>指示此方法可由任何包括该对象的对象访问。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Static">
<summary>指示在类型上定义此方法，否则基于每个实例定义此方法。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Final">
<summary>指示无法重写此方法。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Virtual">
<summary>指示此方法为虚方法。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.HideBySig">
<summary>指示此方法按名称和签名隐藏，否则只按名称隐藏。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.CheckAccessOnOverride">
<summary>指示仅当此方法可访问时，才可以对其进行重写。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.VtableLayoutMask">
<summary>检索 vtable 属性。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.ReuseSlot">
<summary>指示此方法将重复使用 vtable 中的现有槽。这是默认行为。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.NewSlot">
<summary>指示此方法总是获取 vtable 中的新槽。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Abstract">
<summary>指示此类不提供此方法的实现。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.SpecialName">
<summary>指示此方法是特殊的。名称描述此方法的特殊性。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.PinvokeImpl">
<summary>指示此方法的实现通过 PInvoke（平台调用服务）转发。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.UnmanagedExport">
<summary>指示此托管方法由 thunk 导出为非托管代码。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.RTSpecialName">
<summary>指示公共语言运行时检查名称编码。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.ReservedMask">
<summary>指示仅供运行时使用的保留标志。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.HasSecurity">
<summary>指示此方法具有关联的安全性。保留此标志仅供运行时使用。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.RequireSecObject">
<summary>指示此方法调用另一个包含安全代码的方法。保留此标志仅供运行时使用。</summary>
    </member>
    <member name="T:System.Reflection.MethodBase">
<summary>提供有关方法和构造函数的信息。 </summary>
    </member>
    <member name="M:System.Reflection.MethodBase.#ctor">
<summary>初始化 <see cref="T:System.Reflection.MethodBase"/> 类的新实例。</summary>
    </member>
    <member name="P:System.Reflection.MethodBase.Attributes">
<summary>获取与此方法关联的属性。</summary>
<returns>该方法的属性。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.CallingConvention">
<summary>获取一个值，该值指示此方法的调用约定。</summary>
<returns>该方法的调用约定。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.ContainsGenericParameters">
<summary>获取一个值，该值指示泛型方法是否包含未赋值的泛型类型参数。</summary>
<returns>如果当前 <see cref="T:System.Reflection.MethodBase"/> 对象表示的泛型方法包含未赋值的泛型类型参数，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.GetCurrentMethod">
<summary>返回表示当前正在执行的方法的 <see cref="T:System.Reflection.MethodBase"/> 对象。</summary>
<returns>当前正在执行的方法。</returns>
<exception cref="T:System.Reflection.TargetException">用后期绑定机制调用该成员。</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetGenericArguments">
<summary>返回表示泛型方法的类型实际参数或泛型方法定义的类型形式参数的 <see cref="T:System.Type"/> 对象的数组。</summary>
<returns>包含泛型方法的类型实际参数或泛型方法定义的类型形式参数的数组。如果当前方法不是泛型方法，则返回空数组。</returns>
<exception cref="T:System.NotSupportedException">当前对象是 <see cref="T:System.Reflection.ConstructorInfo"/>。不支持泛型构造函数。</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)">
<summary>获取由指定句柄表示的方法的方法信息。</summary>
<returns><paramref name="handle"/> 表示的方法。</returns>
<param name="handle">方法的句柄。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="handle"/> 无效。</exception>
<exception cref="T:System.MethodAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用此成员。</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
<summary>为指定泛型类型获取指定句柄所表示的构造函数或方法。</summary>
<returns><paramref name="declaringType"/> 指定的泛型类型中由 <paramref name="handle"/> 指定的方法或构造函数。</returns>
<param name="handle">构造函数或方法的内部元数据表示形式的句柄。</param>
<param name="declaringType">定义构造函数或方法的泛型类型的句柄。</param>
<exception cref="T:System.MethodAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用此成员。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="handle"/> 无效。</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetMethodImplementationFlags">
<summary>当在派生类中重写时，将返回 <see cref="T:System.Reflection.MethodImplAttributes"/> 标志。</summary>
<returns>方法实现标志。</returns>
<exception cref="T:System.MethodAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用此成员。</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetParameters">
<summary>当在派生类中重写时，获取此方法或构造函数的参数。</summary>
<returns>一个数组，包含此方法或构造函数的参数。</returns>
<exception cref="T:System.MethodAccessException">通过如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> 等机制以后期绑定的方式调用此成员。</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])">
<summary>使用指定的参数调用当前实例所表示的方法或构造函数。</summary>
<returns>被调用方法的返回值；如果调用的是构造函数，则为 null。<paramref name="parameters"/> 数组的表示用 ref 或 out 关键字声明的参数的 Caution:Elements 也可能会被修改。</returns>
<param name="obj">对其调用方法或构造函数的对象。如果方法是静态的，则忽略此参数。如果构造函数是静态的，则此参数必须为 null 或定义该构造函数的类的实例。 </param>
<param name="parameters">调用的方法或构造函数的参数列表。这是一个对象数组，这些对象与要调用的方法或构造函数的参数具有相同的数量、顺序和类型。如果没有参数，则 <paramref name="parameters"/> 应该为 null。如果此实例所表示的方法或构造函数采用 ref 参数（在 Visual Basic 中为 ByRef），使用此函数调用该方法或构造函数时，该参数不需要任何特殊属性。如果此数组中的对象未用值来显式初始化，则该对象将包含该对象类型的默认值。对于引用类型的元素，该值为 null。对于值类型的元素，该值为 0、0.0 或 false，具体取决于特定的元素类型。 </param>
<exception cref="T:System.Reflection.TargetException"><paramref name="obj"/> 参数为 null 并且该方法不是静态的。-或- <paramref name="obj"/> 的类既不声明也不继承此方法。-或- 调用了静态构造函数，并且 <paramref name="obj"/> 既不是 null 也不是声明该构造函数的类的实例。</exception>
<exception cref="T:System.ArgumentException"><paramref name="parameters"/> 数组的元素与此实例所反射的方法或构造函数的签名不匹配。 </exception>
<exception cref="T:System.Reflection.TargetInvocationException">调用的方法或构造函数引发异常。 </exception>
<exception cref="T:System.Reflection.TargetParameterCountException"><paramref name="parameters"/> 数组的参数数目不正确。 </exception>
<exception cref="T:System.MethodAccessException">该方法或构造函数不可访问。 </exception>
<exception cref="T:System.InvalidOperationException">声明此方法的类型是开放式泛型类型。即，<see cref="P:System.Type.ContainsGenericParameters"/> 属性为声明类型返回 true。</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
<summary>当在派生类中重写时，调用具有给定参数的反射的方法或构造函数。</summary>
<returns>被调用方法的返回值；如果调用的是构造函数，则为 null；如果方法的返回类型是 void，则为 null。<paramref name="parameters"/> 数组的表示用 ref 或 out 关键字声明的参数的 Caution:Elements 也可能会被修改。</returns>
<param name="obj">对其调用方法或构造函数的对象。如果方法是静态的，则忽略此参数。如果构造函数是静态的，则此参数必须为 null 或定义该构造函数的类的实例。</param>
<param name="invokeAttr">位屏蔽，它是 <see cref="T:System.Reflection.BindingFlags"/> 的 0 个或多个位标志的组合。如果 <paramref name="binder"/> 为 null，则此参数赋值为 <see cref="F:System.Reflection.BindingFlags.Default"/>；因此，传入的任何值都被忽略。 </param>
<param name="binder">一个启用绑定、参数类型强制、成员调用以及通过反射进行 <see cref="T:System.Reflection.MemberInfo"/> 对象检索的对象。如果 <paramref name="binder"/> 为 null，则使用默认联编程序。 </param>
<param name="parameters">调用的方法或构造函数的参数列表。这是一个对象数组，这些对象与要调用的方法或构造函数的参数具有相同的数量、顺序和类型。如果没有参数，则它应该为 null。如果此实例所表示的方法或构造函数采用 ByRef 参数，使用此函数调用该方法或构造函数时，该参数不需要任何特殊属性。如果此数组中的对象未用值来显式初始化，则该对象将包含该对象类型的默认值。对于引用类型的元素，该值为 null。对于值类型的元素，该值为 0、0.0 或 false，具体取决于特定的元素类型。 </param>
<param name="culture">用于控制类型强制的区域性信息。如果这是 null，则使用当前线程的 CultureInfo。（例如，这对于将表示 1000 的 String 转换为 Double 值是必需的，因为不同的区域性以不同的方式表示 1000。） </param>
<exception cref="T:System.Reflection.TargetException"><paramref name="obj"/> 参数为 null 并且该方法不是静态的。-或- <paramref name="obj"/> 的类既不声明也不继承此方法。-或- 调用了静态构造函数，并且 <paramref name="obj"/> 既不是 null 也不是声明该构造函数的类的实例。</exception>
<exception cref="T:System.ArgumentException"><paramref name="parameters"/> 参数的类型与此实例所反射的方法或构造函数的签名不匹配。 </exception>
<exception cref="T:System.Reflection.TargetParameterCountException"><paramref name="parameters"/> 数组的参数数目不正确。 </exception>
<exception cref="T:System.Reflection.TargetInvocationException">调用的方法或构造函数引发异常。 </exception>
<exception cref="T:System.MethodAccessException">该方法或构造函数不可访问。 </exception>
<exception cref="T:System.InvalidOperationException">声明此方法的类型是开放式泛型类型。即，<see cref="P:System.Type.ContainsGenericParameters"/> 属性为声明类型返回 true。</exception>
    </member>
    <member name="P:System.Reflection.MethodBase.IsAbstract">
<summary>获取一个值，该值指示方法是否为抽象方法（在 Visual Basic 中为 MustInherit）。</summary>
<returns>如果该方法是抽象方法，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsAssembly">
<summary>获取一个值，该值指示此方法或构造函数的潜在可见性是否由 <see cref="F:System.Reflection.MethodAttributes.Assembly"/> 描述；也就是说，此方法或构造函数只对同一程序集中的其他类型可见，而对该程序集以外的派生类型则不可见。</summary>
<returns>如果此方法或构造函数的可见性由 <see cref="F:System.Reflection.MethodAttributes.Assembly"/> 准确描述，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsConstructor">
<summary>获取指示该方法是否为构造函数的值。</summary>
<returns>如果此方法是 <see cref="T:System.Reflection.ConstructorInfo"/> 对象（请参阅“备注”中有关 <see cref="T:System.Reflection.Emit.ConstructorBuilder"/> 对象的说明）所表示的构造函数，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFamily">
<summary>获取一个值，该值指示此方法或构造函数的可见性是否由 <see cref="F:System.Reflection.MethodAttributes.Family"/> 描述；也就是说，此方法或构造函数仅在其类和派生类内可见。</summary>
<returns>如果对此方法或构造函数的访问由 <see cref="F:System.Reflection.MethodAttributes.Family"/> 准确描述，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFamilyAndAssembly">
<summary>获取一个值，该值指示此方法或构造函数的可见性是否由 <see cref="F:System.Reflection.MethodAttributes.FamANDAssem"/> 描述；也就是说，此方法或构造函数可由派生类调用，但仅当这些派生类在同一程序集中时。</summary>
<returns>如果对此方法或构造函数的访问由 <see cref="F:System.Reflection.MethodAttributes.FamANDAssem"/> 准确描述，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFamilyOrAssembly">
<summary>获取一个值，该值指示此方法或构造函数的潜在可见性是否由 <see cref="F:System.Reflection.MethodAttributes.FamORAssem"/> 描述；也就是说，此方法或构造函数可由派生类（无论其位置如何）和同一程序集中的类调用。</summary>
<returns>如果对此方法或构造函数的访问由 <see cref="F:System.Reflection.MethodAttributes.FamORAssem"/> 准确描述，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFinal">
<summary>获取一个值，该值指示此方法是否为 final（在 Visual Basic 中为 NotOverridable）。</summary>
<returns>如果该方法为 final，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsGenericMethod">
<summary>获取指示该方法是否为泛型方法的值。</summary>
<returns>如果当前 <see cref="T:System.Reflection.MethodBase"/> 表示泛型方法，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsGenericMethodDefinition">
<summary>获取指示该方法是否为泛型方法定义的值。</summary>
<returns>如果当前 <see cref="T:System.Reflection.MethodBase"/> 对象表示泛型方法的定义，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsHideBySig">
<summary>获取一个值，该值指示是否只有一个签名完全相同的同一种类的成员在派生类中是隐藏的。</summary>
<returns>如果此成员被签名隐藏，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsPrivate">
<summary>获取一个值，该值指示此成员是否为私有的。</summary>
<returns>如果对此方法的访问只限于该类的其他成员，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsPublic">
<summary>获取一个值，该值指示此方法是否为一个公共方法。</summary>
<returns>如果该方法为公共方法，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsSpecialName">
<summary>获取一个值，该值指示此方法是否具有特殊名称。</summary>
<returns>如果该方法具有一个特殊名称，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsStatic">
<summary>获取一个值，该值指示该方法是否标记有 static（在 Visual Basic 中为 Shared）。</summary>
<returns>如果该方法为静态方法，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsVirtual">
<summary>获取一个值，该值指示方法是否为虚方法（在 Visual Basic 中为 Overridable）。</summary>
<returns>如果该方法为虚方法，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.MethodHandle">
<summary>获取方法的内部元数据表示形式的句柄。</summary>
<returns>此方法的运行时句柄。</returns>
    </member>
    <member name="T:System.Reflection.MethodImplAttributes">
<summary>指定方法实现属性的标志。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.CodeTypeMask">
<summary>指定代码类型的标志。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.IL">
<summary>指定此方法实现是用 Microsoft 中间语言 (MSIL) 编写的。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Native">
<summary>指定方法实现为本机代码。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.OPTIL">
<summary>指定此方法实现是用优化中间语言 (OPTIL) 编写的。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Runtime">
<summary>指定此方法实现由运行时提供。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.ManagedMask">
<summary>指定代码是托管代码还是非托管代码。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Unmanaged">
<summary>指定方法实现为非托管代码。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Managed">
<summary>指定方法实现为托管代码。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.ForwardRef">
<summary>指定未定义此方法。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.PreserveSig">
<summary>指定此方法签名完全按声明的样子导出。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.InternalCall">
<summary>指定一个内部调用。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Synchronized">
<summary>指定此方法的整个方法体是单线程的。静态方法（在 Visual Basic 中为 Shared 方法）在类型上锁定，而实例方法在实例上锁定。也可使用 C# lock 语句或 Visual Basic 的 Lock 函数来实现此目的。 </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.NoInlining">
<summary>指定该方法不能内联。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.AggressiveInlining">
<summary>如果可能的话，指定该方法始终为内联。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.NoOptimization">
<summary>指定在调试可能的代码生成问题时，该方法不是由实时 (JIT) 编译器优化的。 </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.MaxMethodImplVal">
<summary>指定范围检查值。</summary>
    </member>
    <member name="T:System.Reflection.MethodInfo">
<summary>发现方法的属性并提供对方法元数据的访问。</summary>
    </member>
    <member name="M:System.Reflection.MethodInfo.#ctor">
<summary>初始化 <see cref="T:System.Reflection.MethodInfo"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Reflection.MethodInfo.GetBaseDefinition">
<summary>当在派生类中被重写时，为直接或间接的基类（用该实例表示的方法首先在此类中声明）上的方法返回 MethodInfo 对象。</summary>
<returns>表示此方法第一个实现的 MethodInfo 对象。</returns>
    </member>
    <member name="M:System.Reflection.MethodInfo.GetGenericArguments">
<summary>返回表示泛型方法的类型实际参数或泛型方法定义的类型形式参数的 <see cref="T:System.Type"/> 对象的数组。</summary>
<returns><see cref="T:System.Type"/> 对象的数组，这些对象表示泛型方法的类型变量或泛型方法定义的类型参数。如果当前方法不是泛型方法，则返回空数组。</returns>
<exception cref="T:System.NotSupportedException">不支持此方法。</exception>
    </member>
    <member name="M:System.Reflection.MethodInfo.GetGenericMethodDefinition">
<summary>返回一个 <see cref="T:System.Reflection.MethodInfo"/> 对象，该对象表示可从其构造当前方法的泛型方法定义。</summary>
<returns>一个 <see cref="T:System.Reflection.MethodInfo"/> 对象，表示可从其构造当前方法的泛型方法定义。</returns>
<exception cref="T:System.InvalidOperationException">当前方法不是泛型方法。即 <see cref="P:System.Reflection.MethodInfo.IsGenericMethod"/> 返回 false。 </exception>
<exception cref="T:System.NotSupportedException">不支持此方法。</exception>
    </member>
    <member name="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
<summary>替代由当前泛型方法定义的类型参数组成的类型数组的元素，并返回表示结果构造方法的 <see cref="T:System.Reflection.MethodInfo"/> 对象。</summary>
<returns>一个 <see cref="T:System.Reflection.MethodInfo"/> 对象，表示通过将当前泛型方法定义的类型参数替换为 <paramref name="typeArguments"/> 的元素生成的构造方法。</returns>
<param name="typeArguments">要替换当前泛型方法定义的类型参数的类型数组。</param>
<exception cref="T:System.InvalidOperationException">当前 <see cref="T:System.Reflection.MethodInfo"/> 不表示泛型方法定义。即 <see cref="P:System.Reflection.MethodInfo.IsGenericMethodDefinition"/> 返回 false。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="typeArguments"/> 为 null。-或- <paramref name="typeArguments"/> 的任何元素都为 null。 </exception>
<exception cref="T:System.ArgumentException"><paramref name="typeArguments"/> 中元素的数目与当前泛型方法定义的类型参数的数目不同。-或- <paramref name="typeArguments"/> 的元素不满足为当前泛型方法定义的相应类型参数指定的约束。 </exception>
<exception cref="T:System.NotSupportedException">不支持此方法。</exception>
    </member>
    <member name="P:System.Reflection.MethodInfo.MemberType">
<summary>获取一个 <see cref="T:System.Reflection.MemberTypes"/> 值，该值指示此成员是一个方法。</summary>
<returns>一个 <see cref="T:System.Reflection.MemberTypes"/> 值，指示此成员是方法。</returns>
    </member>
    <member name="P:System.Reflection.MethodInfo.ReturnParameter">
<summary>获取一个 <see cref="T:System.Reflection.ParameterInfo"/> 对象，该对象包含有关方法的返回类型的信息（例如返回类型是否具有自定义修饰符）。 </summary>
<returns>一个 <see cref="T:System.Reflection.ParameterInfo"/> 对象，包含有关返回类型的信息。</returns>
<exception cref="T:System.NotImplementedException">此方法未实现。</exception>
    </member>
    <member name="P:System.Reflection.MethodInfo.ReturnType">
<summary>获取此方法的返回类型。</summary>
<returns>此方法的返回类型。</returns>
    </member>
    <member name="P:System.Reflection.MethodInfo.ReturnTypeCustomAttributes">
<summary>获取返回类型的自定义属性。</summary>
<returns>表示返回类型自定义属性的 ICustomAttributeProvider 对象。</returns>
    </member>
    <member name="T:System.Reflection.Missing">
<summary>表示缺少的 <see cref="T:System.Object"/>。无法继承此类。</summary>
    </member>
    <member name="F:System.Reflection.Missing.Value">
<summary>表示 <see cref="T:System.Reflection.Missing"/> 类的唯一实例。</summary>
    </member>
    <member name="T:System.Reflection.Module">
<summary>在模块上执行反射。</summary>
    </member>
    <member name="M:System.Reflection.Module.#ctor">
<summary>初始化 <see cref="T:System.Reflection.Module"/> 类的新实例。</summary>
    </member>
    <member name="P:System.Reflection.Module.Assembly">
<summary>为此 <see cref="T:System.Reflection.Module"/> 实例获取适当的 <see cref="T:System.Reflection.Assembly"/>。</summary>
<returns>Assembly 对象。</returns>
    </member>
    <member name="P:System.Reflection.Module.FullyQualifiedName">
<summary>[SECURITY CRITICAL] 获取表示此模块的完全限定名和路径的字符串。</summary>
<returns>完全限定的模块名。</returns>
    </member>
    <member name="M:System.Reflection.Module.GetCustomAttributes(System.Boolean)">
<summary>返回所有自定义属性。</summary>
<returns>一个包含所有自定义属性的数组。</returns>
<param name="inherit">对于该类型的对象，该参数被忽略。 </param>
    </member>
    <member name="M:System.Reflection.Module.GetCustomAttributes(System.Type,System.Boolean)">
<summary>返回指定类型的自定义属性。</summary>
<returns>一个包含指定类型的所有自定义属性的数组。</returns>
<param name="attributeType">要获取的属性的类型。 </param>
<param name="inherit">对于该类型的对象，该参数被忽略。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="attributeType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 不是一个由运行库提供的 <see cref="T:System.Type"/> 对象。例如，<paramref name="attributeType"/> 是一个 <see cref="T:System.Reflection.Emit.TypeBuilder"/> 对象。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetField(System.String)">
<summary>返回具有指定名称的全局字段。</summary>
<returns>一个具有指定名称的全局字段，如果该字段不存在，则为 null。</returns>
<param name="name">全局字段的名称。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="name"/> 参数为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Module.GetField(System.String,System.Reflection.BindingFlags)">
<summary>返回具有指定名称和绑定属性的全局字段。</summary>
<returns>一个具有指定名称及绑定属性的全局字段，如果该字段不存在，则为 null。</returns>
<param name="name">全局字段的名称。 </param>
<param name="bindingAttr">用于控制搜索的标志。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="name"/> 参数为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Module.GetFields">
<summary>返回在模块中定义的全局字段。</summary>
<returns>一个数组，该数组包含在模块中定义的全局字段；如果没有全局字段，则返回一个空数组。</returns>
    </member>
    <member name="M:System.Reflection.Module.GetFields(System.Reflection.BindingFlags)">
<summary>返回模块中定义的与指定的绑定标志匹配的全局字段。</summary>
<returns>一个数组，包含在模块中定义的全局字段，这些字段与指定的绑定标志匹配；如果不存在与这些绑定标志匹配的全局字段，则返回一个空数组。</returns>
<param name="bindingFlags">用来限制搜索的枚举值的按位组合。</param>
    </member>
    <member name="M:System.Reflection.Module.GetMethod(System.String)">
<summary>返回具有指定名称的全局方法。</summary>
<returns>具有指定名称的全局方法，如果该方法不存在，则为 null。</returns>
<param name="name">方法名。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
<exception cref="T:System.Reflection.AmbiguousMatchException">多个全局方法匹配 <paramref name="name"/>。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
<summary>返回具有指定名称、绑定信息、调用约定、参数类型和修饰符的全局方法。</summary>
<returns>匹配指定条件的全局方法，如果不存在这样的方法，则为 null。</returns>
<param name="name">方法名。 </param>
<param name="bindingAttr">用于控制搜索的标志。 </param>
<param name="binder">一个执行重载决策和类型强制的对象，如果为 null，则使用 <see cref="P:System.Type.DefaultBinder"/>。 </param>
<param name="callConvention">该方法的调用约定。 </param>
<param name="types">要搜索的参数类型。 </param>
<param name="modifiers">参数修饰符数组，用来与参数签名进行绑定，这些参数签名中的类型已经被修改。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null，<paramref name="types"/> 为 null，或者 <paramref name="types"/> 的某个元素为 null。 </exception>
<exception cref="T:System.Reflection.AmbiguousMatchException">多个全局方法匹配指定的条件。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetMethod(System.String,System.Type[])">
<summary>返回匹配指定名称和参数类型的全局方法。</summary>
<returns>匹配指定条件的全局方法，如果该方法不存在，则为 null。</returns>
<param name="name">方法名。 </param>
<param name="types">要搜索的参数类型。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null，<paramref name="types"/> 为 null，或者 <paramref name="types"/> 的某个元素为 null。 </exception>
<exception cref="T:System.Reflection.AmbiguousMatchException">多个全局方法匹配指定的条件。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
<summary>在派生类中，提供 <see cref="M:System.Reflection.Module.GetMethod(System.String)"/> 方法重载的实现。</summary>
<returns>匹配指定条件的全局方法，如果不存在这样的方法，则为 null。</returns>
<param name="name">方法名。 </param>
<param name="bindingAttr">用于控制搜索的标志。 </param>
<param name="binder">一个执行重载决策和类型强制的对象，如果为 null，则使用 <see cref="P:System.Type.DefaultBinder"/>。</param>
<param name="callConvention">该方法的调用约定。 </param>
<param name="types">要搜索的参数类型。 </param>
<param name="modifiers">参数修饰符数组，用来与参数签名进行绑定，这些参数签名中的类型已经被修改。 </param>
<exception cref="T:System.Reflection.AmbiguousMatchException">多个全局方法匹配指定的条件。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null，<paramref name="types"/> 为 null，或者 <paramref name="types"/> 的某个元素为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Module.GetMethods">
<summary>返回在模块中定义的全局方法。</summary>
<returns>一个数组，该数组包含在模块中定义的全局方法；如果没有全局方法，则返回一个空数组。</returns>
    </member>
    <member name="M:System.Reflection.Module.GetMethods(System.Reflection.BindingFlags)">
<summary>返回模块中定义的与指定绑定标志匹配的全局方法。</summary>
<returns>一个数组，包含在模块中定义的全局方法，这些方法与指定的绑定标志匹配；如果不存在与这些绑定标志匹配的全局方法，则返回一个空数组。</returns>
<param name="bindingFlags">用来限制搜索的枚举值的按位组合。</param>
    </member>
    <member name="M:System.Reflection.Module.GetType(System.String)">
<summary>返回指定类型，并执行区分大小写的搜索。</summary>
<returns>如果给定的类型在此模块中，则为该类型；否则为 null。</returns>
<param name="className">要定位的类型的名称。该名称必须是用命名空间完全限定的。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="className"/> 为 null。 </exception>
<exception cref="T:System.Reflection.TargetInvocationException">调用该类初始值设定项，并引发异常。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="className"/> 是零长度字符串。 </exception>
      <exception cref="T:System.IO.FileNotFoundException">
<paramref name="className"/> 需要一个无法找到的依赖程序集。 </exception>
      <exception cref="T:System.IO.FileLoadException">
<paramref name="className"/> 需要一个已找到但无法加载的依赖程序集。-或- 当前程序集被加载到只反射上下文中，<paramref name="className"/> 需要一个未预先加载的依赖程序集。 </exception>
      <exception cref="T:System.BadImageFormatException">
<paramref name="className"/> 需要一个依赖程序集，但该文件不是一个有效的程序集。-或- <paramref name="className"/> 需要一个针对高于当前加载版本的运行库版本编译的依赖程序集。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetType(System.String,System.Boolean)">
<summary>返回指定的类型，并按指定的区分大小写搜索模块。</summary>
<returns>如果给定的类型在此模块中，则为该类型；否则为 null。</returns>
<param name="className">要定位的类型的名称。该名称必须是用命名空间完全限定的。 </param>
<param name="ignoreCase">如果为 true，则执行不区分大小写的搜索；否则为 false。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="className"/> 为 null。 </exception>
<exception cref="T:System.Reflection.TargetInvocationException">调用该类初始值设定项，并引发异常。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="className"/> 是零长度字符串。 </exception>
      <exception cref="T:System.IO.FileNotFoundException">
<paramref name="className"/> 需要一个无法找到的依赖程序集。 </exception>
      <exception cref="T:System.IO.FileLoadException">
<paramref name="className"/> 需要一个已找到但无法加载的依赖程序集。-或- 当前程序集被加载到只反射上下文中，<paramref name="className"/> 需要一个未预先加载的依赖程序集。 </exception>
      <exception cref="T:System.BadImageFormatException">
<paramref name="className"/> 需要一个依赖程序集，但该文件不是一个有效的程序集。-或- <paramref name="className"/> 需要一个针对高于当前加载版本的运行库版本编译的依赖程序集。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)">
<summary>返回指定的类型，指定是否对该模块进行区分大小写的搜索；如果找不到该类型，则指定是否引发异常。</summary>
<returns>如果指定类型已在此模块中声明，则为该类型；否则为 null。</returns>
<param name="className">要定位的类型的名称。该名称必须是用命名空间完全限定的。 </param>
<param name="throwOnError">如果为 true，则在找不到该类型时引发异常；如果为 false，则返回 null。 </param>
<param name="ignoreCase">如果为 true，则执行不区分大小写的搜索；否则为 false。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="className"/> 为 null。 </exception>
<exception cref="T:System.Reflection.TargetInvocationException">调用该类初始值设定项，并引发异常。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="className"/> 是零长度字符串。 </exception>
      <exception cref="T:System.TypeLoadException">
<paramref name="throwOnError"/> 为 true，找不到该类型。 </exception>
      <exception cref="T:System.IO.FileNotFoundException">
<paramref name="className"/> 需要一个无法找到的依赖程序集。 </exception>
      <exception cref="T:System.IO.FileLoadException">
<paramref name="className"/> 需要一个已找到但无法加载的依赖程序集。-或- 当前程序集被加载到只反射上下文中，<paramref name="className"/> 需要一个未预先加载的依赖程序集。 </exception>
      <exception cref="T:System.BadImageFormatException">
<paramref name="className"/> 需要一个依赖程序集，但该文件不是一个有效的程序集。-或- <paramref name="className"/> 需要一个针对高于当前加载版本的运行库版本编译的依赖程序集。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetTypes">
<summary>返回在此模块内定义的所有类型。</summary>
<returns>一个数组，包含在此实例反射的模块内定义的类型。</returns>
<exception cref="T:System.Reflection.ReflectionTypeLoadException">未能加载模块中的一个或多个类。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
    </member>
    <member name="M:System.Reflection.Module.IsDefined(System.Type,System.Boolean)">
<summary>确定指定的属性类型是否应用于此模块。</summary>
<returns>如果一个或多个 <paramref name="attributeType"/> 实例应用于此模块，则为 true；否则为 false。</returns>
<param name="attributeType">要搜索的自定义属性的类型。 </param>
<param name="inherit">对于该类型的对象，该参数被忽略。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="attributeType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 不是一个由运行库提供的 <see cref="T:System.Type"/> 对象。例如，<paramref name="attributeType"/> 是一个 <see cref="T:System.Reflection.Emit.TypeBuilder"/> 对象。</exception>
    </member>
    <member name="P:System.Reflection.Module.MetadataToken">
<summary>获取一个标记，该标记用于标识元数据中的模块。</summary>
<returns>一个整数标记，用于标识元数据中的当前模块。</returns>
    </member>
    <member name="P:System.Reflection.Module.Name">
<summary>获取移除了路径的模块的名称。</summary>
<returns>不带路径的模块名。</returns>
    </member>
    <member name="M:System.Reflection.Module.ResolveMethod(System.Int32)">
<summary>返回由指定的元数据标记标识的方法或构造函数。</summary>
<returns>由指定的元数据标记标识的方法或构造函数。</returns>
<param name="metadataToken">一个元数据标记，用于标识模块中的方法或构造函数。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="metadataToken"/> 不是当前模块范围内的方法或构造函数的标记。-或- <paramref name="metadataToken"/> 是一个 MethodSpec，其签名包含元素类型 var（泛型类型的类型参数）或 mvar（泛型方法的类型参数）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="metadataToken"/> 不是当前模块范围内的有效标记。</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])">
<summary>在由指定的泛型类型参数定义的上下文中，返回由指定的元数据标记标识的方法或构造函数。 </summary>
<returns>由指定的元数据标记和泛型参数标识的方法。</returns>
<param name="metadataToken">一个元数据标记，用于标识模块中的方法或构造函数。</param>
<param name="genericTypeArguments">一个数组，其中包含特定类型的泛型类型参数，在该类型中，标记在范围内；如果该类型不是泛型类型，则为 null。 </param>
<param name="genericMethodArguments">一个数组，其中包含其标记在范围内的方法的泛型类型参数；如果该方法不是泛型方法，则为 null。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="metadataToken"/> 不是当前模块范围内的方法或构造函数的标记。-或- <paramref name="metadataToken"/> 是一个 MethodSpec，其签名包含元素类型 var（泛型类型的类型参数）或 mvar（泛型方法的类型参数），并且必要的泛型类型参数不是为 <paramref name="genericTypeArguments"/> 和/或 <paramref name="genericMethodArguments"/> 提供的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="metadataToken"/> 不是当前模块范围内的有效标记。</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveString(System.Int32)">
<summary>返回由指定元数据标记标识的字符串。</summary>
<returns>来自元数据字符串堆的一个字符串值。</returns>
<param name="metadataToken">一个元数据标记，用于标识模块的字符串堆中的一个字符串。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="metadataToken"/> 不是当前模块范围内的字符串的标记。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="metadataToken"/> 不是当前模块范围内的有效标记。</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveType(System.Int32)">
<summary>返回由指定元数据标记标识的类型。</summary>
<returns>由指定元数据标记标识的类型。</returns>
<param name="metadataToken">一个元数据标记，用于标识模块中的一个类型。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="metadataToken"/> 不是当前模块范围内的类型的标记。-或- <paramref name="metadataToken"/> 是一个 TypeSpec，其签名包含元素类型 var（泛型类型的类型参数）或 mvar（泛型方法的类型参数）。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="metadataToken"/> 不是当前模块范围内的有效标记。</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveType(System.Int32,System.Type[],System.Type[])">
<summary>在由指定的泛型类型参数定义的上下文中，返回由指定的元数据标记标识的类型。</summary>
<returns>由指定的元数据标记和泛型参数标识的类型。</returns>
<param name="metadataToken">一个元数据标记，用于标识模块中的一个类型。</param>
<param name="genericTypeArguments">一个数组，其中包含特定类型的泛型类型参数，在该类型中，标记在范围内；如果该类型不是泛型类型，则为 null。 </param>
<param name="genericMethodArguments">一个数组，其中包含其标记在范围内的方法的泛型类型参数；如果该方法不是泛型方法，则为 null。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="metadataToken"/> 不是当前模块范围内的类型的标记。-或- <paramref name="metadataToken"/> 是一个 TypeSpec，其签名包含元素类型 var（泛型类型的类型参数）或 mvar（泛型方法的类型参数），并且必要的泛型类型参数不是为 <paramref name="genericTypeArguments"/> 和/或 <paramref name="genericMethodArguments"/> 提供的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="metadataToken"/> 不是当前模块范围内的有效标记。</exception>
    </member>
    <member name="M:System.Reflection.Module.ToString">
<summary>返回模块的名称。</summary>
<returns>此模块的名称。</returns>
    </member>
    <member name="T:System.Reflection.ParameterAttributes">
<summary>定义可与参数关联的属性。这些属性在 CorHdr.h 中定义。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.None">
<summary>指定不存在参数属性。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.In">
<summary>指定该参数是一个输入参数。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Out">
<summary>指定该参数是一个输出参数。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Retval">
<summary>指定该参数是一个返回值。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Optional">
<summary>指定参数为可选。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.ReservedMask">
<summary>指定该参数是保留的。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.HasDefault">
<summary>指定参数具有默认值。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.HasFieldMarshal">
<summary>指定该参数具有字段封送处理信息。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Reserved3">
<summary>保留。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Reserved4">
<summary>保留。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Lcid">
<summary>指定该参数是一个区域设置标识符。不支持。存在于 Silverlight for Windows Phone 中。</summary>
    </member>
    <member name="T:System.Reflection.ParameterInfo">
<summary>发现参数属性并提供对参数元数据的访问。</summary>
    </member>
    <member name="M:System.Reflection.ParameterInfo.#ctor">
<summary>初始化 ParameterInfo 类的新实例。</summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Attributes">
<summary>获取该参数的属性。</summary>
<returns>该参数的属性。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.DefaultValue">
<summary>如果参数具有默认值，则获取该默认值。</summary>
<returns>此参数的默认值；如果此参数没有默认值，则为 <see cref="F:System.DBNull.Value"/>。</returns>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
<summary>获取该参数上定义的所有自定义属性。</summary>
<returns>包含应用于此参数的所有自定义属性的数组。</returns>
<param name="inherit">对于该类型的对象，该参数被忽略。请参阅“备注”。</param>
<exception cref="T:System.TypeLoadException">未能加载自定义属性类型。 </exception>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
<summary>获取应用于此参数的指定类型或其派生类型的自定义属性。</summary>
<returns>一个数组，其中包含对此参数定义的所有自定义属性，以及指定类型或指定类型的任意子类型的所有自定义属性。</returns>
<param name="attributeType">由类型标识的自定义属性。 </param>
<param name="inherit">对于该类型的对象，该参数被忽略。请参阅“备注”。</param>
<exception cref="T:System.ArgumentException">该类型必须是由基础运行时系统提供的类型。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="attributeType"/> 为 null。</exception>
<exception cref="T:System.TypeLoadException">未能加载自定义属性类型。 </exception>
    </member>
    <member name="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
<summary>确定指定类型或其派生类型的自定义属性是否应用于此参数。</summary>
<returns>如果将 <paramref name="attributeType"/> 或其派生类型的一个或多个实例应用于此参数，则为 true；否则为 false。</returns>
<param name="attributeType">要搜索的类型。 </param>
<param name="inherit">对于该类型的对象，该参数被忽略。请参阅“备注”。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="attributeType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 不是一个由公共语言运行时提供的 <see cref="T:System.Type"/> 对象。</exception>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsOptional">
<summary>获取一个值，该值指示该参数是否可选。</summary>
<returns>如果该参数为可选，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsOut">
<summary>获取一个值，该值指示这是否为输出参数。</summary>
<returns>如果此参数是输出参数，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Member">
<summary>获取在其中定义该参数的成员。</summary>
<returns>在其中定义该参数的成员。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.MetadataToken">
<summary>获取在元数据中标识此参数的值。</summary>
<returns>与模块一起使用的标记，可在元数据中唯一地标识此参数。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Name">
<summary>获取参数名。</summary>
<returns>此参数的简单名称。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.ParameterType">
<summary>获取此参数的类型。</summary>
<returns>此参数的类型。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Position">
<summary>获取参数在参数表中的位置（从零开始）。</summary>
<returns>该参数在参数列表中所占的位置。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.RawDefaultValue">
<summary>如果此参数有默认值，则获取指示此参数的默认值的值。</summary>
<returns>此参数的默认值；如果此参数没有默认值，则为 <see cref="F:System.DBNull.Value"/>。</returns>
    </member>
    <member name="M:System.Reflection.ParameterInfo.ToString">
<summary>获取表示为字符串的参数类型和名称。</summary>
<returns>参数的类型和名称。</returns>
    </member>
    <member name="T:System.Reflection.ParameterModifier">
<summary>在参数中附加修饰符，以便绑定能够处理在其中修改了类型的参数签名。</summary>
    </member>
    <member name="M:System.Reflection.ParameterModifier.#ctor(System.Int32)">
<summary>初始化表示指定参数数目的 <see cref="T:System.Reflection.ParameterModifier"/> 结构的新实例。</summary>
<param name="parameterCount">参数数目。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="parameterCount"/> 为负数。 </exception>
    </member>
    <member name="P:System.Reflection.ParameterModifier.Item(System.Int32)">
<summary>获取或设置一个值，该值指示位于指定索引位置的参数是否应由当前 <see cref="T:System.Reflection.ParameterModifier"/> 修改。</summary>
<returns>如果此索引位置的参数应由此 <see cref="T:System.Reflection.ParameterModifier"/> 修改，则为 true；否则为 false。</returns>
<param name="index">正在检查或设置其修改状态的参数的索引位置。 </param>
    </member>
    <member name="T:System.Reflection.PropertyAttributes">
<summary>定义可能与属性关联的特性。 </summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.None">
<summary>指定没有与属性关联的特性。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.SpecialName">
<summary>指定属性是特殊的，并用名称描述属性的特殊性。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.ReservedMask">
<summary>指定一个仅供运行时使用的保留标志。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.RTSpecialName">
<summary>指定由元数据内部 API 检查名称编码。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.HasDefault">
<summary>指定属性具有默认值。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.Reserved2">
<summary>保留。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.Reserved3">
<summary>保留。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.Reserved4">
<summary>保留。</summary>
    </member>
    <member name="T:System.Reflection.PropertyInfo">
<summary>发现属性的特性并提供对属性元数据的访问。</summary>
    </member>
    <member name="M:System.Reflection.PropertyInfo.#ctor">
<summary>初始化 <see cref="T:System.Reflection.PropertyInfo"/> 类的新实例。</summary>
    </member>
    <member name="P:System.Reflection.PropertyInfo.Attributes">
<summary>获取此属性的特性。</summary>
<returns>此属性的特性。</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.CanRead">
<summary>获取一个值，该值指示此属性是否可读。</summary>
<returns>如果此属性可读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.CanWrite">
<summary>获取一个值，该值指示此属性是否可写。</summary>
<returns>如果此属性可写，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetAccessors">
<summary>返回一个数组，其元素反射了由当前实例反射的属性的公共 get、set 以及其他访问器。</summary>
<returns>如果找到访问器，此方法将返回一个包含当前实例反射的属性的公共 get、set 以及其他访问器的数组；否则，此方法将返回包含 0（零）个元素的数组。</returns>
<exception cref="T:System.MethodAccessException">应用程序代码尝试访问此成员后期绑定，例如通过使用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])"/> 方法。 </exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
<summary>返回一个数组，其元素反射了当前实例反射的属性的公共及非公共（如果指定）get、set 以及其他访问器。</summary>
<returns>一个数组，包含当前实例反射的属性的 get、set 以及其他访问器。如果 <paramref name="nonPublic"/> 为 true，则此数组包含公共及非公共访问器。如果 <paramref name="nonPublic"/> 为 false，则此数组仅包含公共访问器。如果没有找到具有指定可见性的访问器，则此方法将返回包含 0（零）个元素的数组。</returns>
<param name="nonPublic">如果包括非公共访问器，则为 true；否则为 false。 </param>
<exception cref="T:System.MethodAccessException">应用程序代码尝试访问此成员后期绑定，例如通过使用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])"/> 方法。 </exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetConstantValue">
<summary>由编译器返回与属性关联的文本值。 </summary>
<returns>与该属性相关联的文本值。如果文本值是一个元素值为零的类类型，则返回值为 null。</returns>
<exception cref="T:System.InvalidOperationException">非托管元数据中的常数表不包含当前属性的常数值。</exception>
<exception cref="T:System.FormatException">值的类型不是公共语言规范 (CLS) 许可的类型。请参阅 Standard ECMA-335 - Common Language Infrastructure (CLI) specification, Partition II（标准 ECMA-335 - 公共语言基础结构 (CLI) 规范）第二部分。 </exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetGetMethod">
<summary>返回此属性的公共 get 访问器。</summary>
<returns>如果 get 访问器存在并且是公共的，则为此属性的公共 get 访问器；否则为 null。</returns>
<exception cref="T:System.MethodAccessException">应用程序代码尝试访问此成员后期绑定，例如通过使用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])"/> 方法。 </exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
<summary>当在派生类中重写时，返回此属性的公共或非公共 get 访问器。</summary>
<returns>如果 <paramref name="nonPublic"/> 为 true，则为此属性的 get 访问器。如果 <paramref name="nonPublic"/> 为 false 并且 get 访问器是非公共的，或者如果 <paramref name="nonPublic"/> 为 true 但不存在 get 访问器，则返回 null。</returns>
<param name="nonPublic">如果为 true，则返回非公共的访问器；否则为 false。 </param>
<exception cref="T:System.MethodAccessException">应用程序代码尝试访问此成员后期绑定，例如通过使用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])"/> 方法。 </exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetIndexParameters">
<summary>当在派生类中重写时，返回此属性的所有索引参数的数组。</summary>
<returns>一个包含索引的参数的数组。如果未索引该属性，则数组具有 0（零）个元素。</returns>
<exception cref="T:System.MethodAccessException">应用程序代码尝试访问此成员后期绑定，例如通过使用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])"/> 方法。 </exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetRawConstantValue">
<summary>由编译器返回与属性关联的文本值。 </summary>
<returns>与该属性相关联的文本值。如果文本值是一个元素值为零的类类型，则返回值为 null。</returns>
<exception cref="T:System.InvalidOperationException">非托管元数据中的常数表不包含当前属性的常数值。</exception>
<exception cref="T:System.FormatException">值的类型不是公共语言规范 (CLS) 许可的类型。请参阅 Standard ECMA-335 - Common Language Infrastructure (CLI) specification, Partition II（标准 ECMA-335 - 公共语言基础结构 (CLI) 规范）第二部分。</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetSetMethod">
<summary>返回此属性的公共 set 访问器。</summary>
<returns>如果 set 访问器存在并且是公共的，则为此属性的 set 访问器；否则为 null。</returns>
<exception cref="T:System.MethodAccessException">应用程序代码尝试访问此成员后期绑定，例如通过使用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])"/> 方法。 </exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
<summary>当在派生类中重写时，返回此属性的 set 访问器。</summary>
<returns>值 条件 此属性的 set 访问器。set 访问器是公共的。-或- <paramref name="nonPublic"/> 为 true 并且 set 访问器存在。null<paramref name="nonPublic"/> 为 false 并且 set 访问器不是公共的。-或- 没有 set 访问器，因为该属性为只读。 </returns>
<param name="nonPublic">如果为 true，则返回非公共的访问器；否则为 false。 </param>
<exception cref="T:System.MethodAccessException">应用程序代码尝试访问此成员后期绑定，例如通过使用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])"/> 方法。 </exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
<summary>用索引化属性的可选索引值返回该属性的值。</summary>
<returns><paramref name="obj"/> 参数指定的对象的属性值。</returns>
<param name="obj">将返回其属性值的对象。 </param>
<param name="index">索引化属性的可选索引值。对于非索引化属性，该值应为 null。 </param>
<exception cref="T:System.ArgumentException"><paramref name="index"/> 数组不包含所需类型的参数。-或- 未找到该属性的 get 访问器。 </exception>
<exception cref="T:System.Reflection.TargetException">该对象与目标类型不匹配，或者某属性是实例属性但 <paramref name="obj"/> 为 null。 </exception>
<exception cref="T:System.Reflection.TargetParameterCountException"><paramref name="index"/> 中参数的数目与已编制索引的属性所采用的参数的数目不相符。 </exception>
<exception cref="T:System.MethodAccessException">调用方无权访问该属性。 </exception>
<exception cref="T:System.Reflection.TargetInvocationException">检索属性值时出错。例如，为索引属性指定的索引值超出范围。<see cref="P:System.Exception.InnerException"/> 属性指示错误的原因。</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
<summary>在派生类中重写时，返回具有指定绑定、索引和 <see cref="T:System.Globalization.CultureInfo"/> 的属性的值。</summary>
<returns><paramref name="obj"/> 参数指定的对象的属性值。</returns>
<param name="obj">将返回其属性值的对象。 </param>
<param name="invokeAttr">调用属性。这必须是来自 BindingFlags 的位标志：InvokeMethod、CreateInstance、Static、GetField、SetField、GetProperty 或 SetProperty。必须指定合适的调用属性。如果要调用静态成员，则必须设置 BindingFlags 的 Static 标志。 </param>
<param name="binder">一个启用绑定、参数类型强制、成员调用以及通过反射进行 MemberInfo 对象检索的对象。如果 <paramref name="binder"/> 为 null，则使用默认联编程序。 </param>
<param name="index">索引化属性的可选索引值。对于非索引化属性，该值应为 null。 </param>
<param name="culture">要针对其本地化资源的区域性。请注意，如果没有为此区域性本地化该资源，则在搜索匹配项的过程中将继续调用 CultureInfo.Parent 方法。如果该值为 null，则从 CultureInfo.CurrentUICulture 属性获得 CultureInfo。 </param>
<exception cref="T:System.ArgumentException"><paramref name="index"/> 数组不包含所需类型的参数。-或- 未找到该属性的 get 访问器。 </exception>
<exception cref="T:System.Reflection.TargetException">该对象与目标类型不匹配，或者某属性是实例属性但 <paramref name="obj"/> 为 null。 </exception>
<exception cref="T:System.Reflection.TargetParameterCountException"><paramref name="index"/> 中参数的数目与已编制索引的属性所采用的参数的数目不相符。 </exception>
<exception cref="T:System.MethodAccessException">调用方无权访问该属性。 </exception>
<exception cref="T:System.Reflection.TargetInvocationException">检索属性值时出错。例如，为索引属性指定的索引值超出范围。<see cref="P:System.Exception.InnerException"/> 属性指示错误的原因。</exception>
    </member>
    <member name="P:System.Reflection.PropertyInfo.IsSpecialName">
<summary>获取一个值，该值指示编译器是否将该属性的名称识别为特殊名称。</summary>
<returns>如果此属性具有一个特殊名称，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.MemberType">
<summary>获取一个 <see cref="T:System.Reflection.MemberTypes"/> 值，该值指示此成员是属性。</summary>
<returns>指示此成员是属性的值。</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.PropertyType">
<summary>获取此属性的类型。</summary>
<returns>此属性的类型。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
<summary>用索引化属性的可选索引值设置指定对象的该属性值。</summary>
<param name="obj">将设置其属性值的对象。 </param>
<param name="value">此属性的新值。 </param>
<param name="index">索引化属性的可选索引值。对于非索引化属性，该值应为 null。 </param>
<exception cref="T:System.ArgumentException"><paramref name="index"/> 数组不包含所需类型的参数。-或- 未找到该属性的 set 访问器。 </exception>
<exception cref="T:System.Reflection.TargetException">该对象与目标类型不匹配，或者某属性是实例属性但 <paramref name="obj"/> 为 null。 </exception>
<exception cref="T:System.Reflection.TargetParameterCountException"><paramref name="index"/> 中参数的数目与已编制索引的属性所采用的参数的数目不相符。 </exception>
<exception cref="T:System.MethodAccessException">调用方无权访问该属性。 </exception>
<exception cref="T:System.Reflection.TargetInvocationException">设置属性值时出错。例如，为索引属性指定的索引值超出范围。<see cref="P:System.Exception.InnerException"/> 属性指示错误的原因。</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
<summary>当在派生类中重写时，将给定对象的该属性值设置为给定值，遵循指定的绑定约束、联编程序和区域性。</summary>
<param name="obj">将设置其属性值的对象。 </param>
<param name="value">此属性的新值。 </param>
<param name="invokeAttr">调用属性。这必须是来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志：InvokeMethod、CreateInstance、Static、GetField、SetField、GetProperty 或 SetProperty。必须指定合适的调用属性。如果要调用静态成员，则必须设置 BindingFlags 的 Static 标志。 </param>
<param name="binder">一个对象，它启用绑定、对参数类型的强制、对成员的调用，以及通过反射对 <see cref="T:System.Reflection.MemberInfo"/> 对象的检索。如果 <paramref name="binder"/> 为 null，则使用默认联编程序。 </param>
<param name="index">索引化属性的可选索引值。对于非索引化属性，该值应为 null。 </param>
<param name="culture">要针对其本地化资源的区域性。请注意，如果没有为此区域性本地化该资源，则在搜索匹配项的过程中将继续调用 CultureInfo.Parent 方法。如果该值为 null，则从 CultureInfo.CurrentUICulture 属性获得 CultureInfo。 </param>
<exception cref="T:System.ArgumentException"><paramref name="index"/> 数组不包含所需类型的参数。-或- 未找到该属性的 set 访问器。 </exception>
<exception cref="T:System.Reflection.TargetException">该对象与目标类型不匹配，或者某属性是实例属性但 <paramref name="obj"/> 为 null。 </exception>
<exception cref="T:System.Reflection.TargetParameterCountException"><paramref name="index"/> 中参数的数目与已编制索引的属性所采用的参数的数目不相符。 </exception>
<exception cref="T:System.MethodAccessException">调用方无权访问该属性。 </exception>
<exception cref="T:System.Reflection.TargetInvocationException">设置属性值时出错。例如，为索引属性指定的索引值超出范围。<see cref="P:System.Exception.InnerException"/> 属性指示错误的原因。</exception>
    </member>
    <member name="T:System.Reflection.ReflectionTypeLoadException">
<summary>当模块中的所有类无法加载时由 <see cref="M:System.Reflection.Module.GetTypes"/> 方法引发的异常。无法继承此类。</summary>
    </member>
    <member name="P:System.Reflection.ReflectionTypeLoadException.LoaderExceptions">
<summary>获取类加载程序引发的异常数组。</summary>
<returns>Exception 类型的数组，其中包含由类加载程序引发的异常。此实例的 <paramref name="classes"/> 数组中的空值也属于该数组中的异常。</returns>
    </member>
    <member name="P:System.Reflection.ReflectionTypeLoadException.Types">
<summary>获取模块中定义并加载的类的数组。</summary>
<returns>Type 类型的数组，其中包含在模块中定义并加载的类。此数组可以包含一些 null 值。</returns>
    </member>
    <member name="T:System.Reflection.ResourceAttributes">
<summary>指定清单资源的属性。</summary>
    </member>
    <member name="F:System.Reflection.ResourceAttributes.Public">
<summary>用于检索公共清单资源的掩码。</summary>
    </member>
    <member name="F:System.Reflection.ResourceAttributes.Private">
<summary>用于检索私有清单资源的掩码。</summary>
    </member>
    <member name="T:System.Reflection.TargetException">
<summary>表示当试图调用无效目标时引发的异常。</summary>
    </member>
    <member name="T:System.Reflection.TargetInvocationException">
<summary>由通过反射调用的方法引发的异常。无法继承此类。</summary>
    </member>
    <member name="M:System.Reflection.TargetInvocationException.#ctor(System.Exception)">
<summary>用对作为此异常原因的内部异常的引用初始化 <see cref="T:System.Reflection.TargetInvocationException"/> 类的新实例。</summary>
<param name="inner">导致当前异常的异常。如果 <paramref name="inner"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="M:System.Reflection.TargetInvocationException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Reflection.TargetInvocationException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="inner">导致当前异常的异常。如果 <paramref name="inner"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="T:System.Reflection.TargetParameterCountException">
<summary>当调用的参数数目与预期的数目不匹配时引发的异常。无法继承此类。</summary>
    </member>
    <member name="M:System.Reflection.TargetParameterCountException.#ctor">
<summary>用空消息字符串和异常的根源初始化 <see cref="T:System.Reflection.TargetParameterCountException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Reflection.TargetParameterCountException.#ctor(System.String)">
<summary>用设置为给定消息的消息字符串和根源异常初始化 <see cref="T:System.Reflection.TargetParameterCountException"/> 类的新实例。</summary>
<param name="message">描述此异常的引发原因的 String。 </param>
    </member>
    <member name="M:System.Reflection.TargetParameterCountException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Reflection.TargetParameterCountException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="inner">导致当前异常的异常。如果 <paramref name="inner"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="T:System.Reflection.TypeAttributes">
<summary>指定类型属性。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.VisibilityMask">
<summary>指定类型可见性信息。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NotPublic">
<summary>指定此类不是公共的。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Public">
<summary>指定此类是公共的。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedPublic">
<summary>指定此类是用公共可见性嵌套的。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedPrivate">
<summary>指定此类是用私有可见性嵌套的。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedFamily">
<summary>指定此类是用族可见性嵌套的，因此只能由它自己的类型和任何子类型中的方法访问。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedAssembly">
<summary>指定此类是用程序集可见性嵌套的，因此只能由其程序集内的方法访问。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedFamANDAssem">
<summary>指定此类是用程序集和族可见性嵌套的，因此只能由其族和程序集的交集中的方法访问。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedFamORAssem">
<summary>指定此类是用族或程序集可见性嵌套的，因此只能由其族和程序集的并集中的方法访问。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.LayoutMask">
<summary>指定类布局信息。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.AutoLayout">
<summary>指定类字段由公共语言运行时自动布局。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.SequentialLayout">
<summary>指定类字段按字段发出到元数据的顺序依次布局。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.ExplicitLayout">
<summary>指定类字段按指定的偏移量布局。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.ClassSemanticsMask">
<summary>指定类语义信息；当前类与上下文相关（否则是灵活的）。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Class">
<summary>指定该类型为一个类。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Interface">
<summary>指定该类型为一个接口。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Abstract">
<summary>指定该类型为抽象类型。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Sealed">
<summary>指定此类是具体的，无法扩展。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.SpecialName">
<summary>指定此类特殊，具体由名称表示。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Import">
<summary>指定此类或接口从另一个模块导入。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Serializable">
<summary>指定此类可以序列化。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.StringFormatMask">
<summary>用于检索本机互操作性的字符串信息。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.AnsiClass">
<summary>LPTSTR 被解释为 ANSI。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.UnicodeClass">
<summary>LPTSTR 被解释为 UNICODE。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.AutoClass">
<summary>LPTSTR 自动被解释。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.CustomFormatClass">
<summary>LPSTR 由一些特定于实现的方式解释，这些方式有可能引发 <see cref="T:System.NotSupportedException"/>。不用于 Microsoft 的 .NET Framework 实现。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.CustomFormatMask">
<summary>用于检索本机互操作的非标准编码信息。未指定这些 2 位值的含义。不用于 Microsoft 的 .NET Framework 实现。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.BeforeFieldInit">
<summary>指定调用此类型的静态方法并不强制系统初始化此类型。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.ReservedMask">
<summary>保留供运行时使用的属性。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.RTSpecialName">
<summary>运行时应检查名称编码。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.HasSecurity">
<summary>类型具有与之关联的安全性。</summary>
    </member>
    <member name="T:System.Reflection.TypeDelegator">
<summary>包装 Type 对象并将所有方法委托给该 Type。</summary>
    </member>
    <member name="M:System.Reflection.TypeDelegator.#ctor">
<summary>使用默认属性初始化 <see cref="T:System.Reflection.TypeDelegator"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Reflection.TypeDelegator.#ctor(System.Type)">
<summary>在指定封装实例的情况下，初始化 <see cref="T:System.Reflection.TypeDelegator"/> 类的新实例。</summary>
<param name="delegatingType"><see cref="T:System.Type"/> 类的实例，它封装对对象方法的调用。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="delegatingType"/> 为 null。 </exception>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Assembly">
<summary>获取已实现类型的程序集。</summary>
<returns>表示已实现类型的程序集的 <see cref="T:System.Reflection.Assembly"/> 对象。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.AssemblyQualifiedName">
<summary>获取程序集的完全限定名。</summary>
<returns>包含程序集的完全限定名的 String。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.BaseType">
<summary>获取当前类型的基类型。</summary>
<returns>类型的基类型。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.FullName">
<summary>获取已实现类型的完全限定名。</summary>
<returns>包含类型的完全限定名的 String。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetAttributeFlagsImpl">
<summary>获取分配给 TypeDelegator 的属性。</summary>
<returns>表示实现属性标志的 TypeAttributes 对象。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
<summary>获取实现 TypeDelegator 的构造函数。</summary>
<returns>此方法的匹配定条件的 ConstructorInfo 对象；如果无法找到匹配项，则为 null。</returns>
<param name="bindingAttr">影响执行搜索的方式的位屏蔽。该值是零个或多个来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志的组合。 </param>
<param name="binder">一个启用绑定、参数类型强制、成员调用以及使用反射进行 MemberInfo 对象检索的对象。如果 <paramref name="binder"/> 为 null，则使用默认联编程序。 </param>
<param name="callConvention">调用约定。 </param>
<param name="types">Type 类型的数组，包含参数数量、顺序和类型的列表。类型不能为 null；使用相应的 GetMethod 方法或空数组搜索不带参数的方法。 </param>
<param name="modifiers">ParameterModifier 类型的数组，它与 <paramref name="types"/> 数组的长度相同，后者的元素表示与要获取的方法的参数关联的属性。 </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)">
<summary>返回 <see cref="T:System.Reflection.ConstructorInfo"/> 对象的数组，这些对象表示为当前 <see cref="T:System.Reflection.TypeDelegator"/> 所包装的类型定义的构造函数。</summary>
<returns>ConstructorInfo 类型的数组，包含为此类定义的指定构造函数。如果未定义任何构造函数，则返回空数组。根据指定参数的值，只返回公共构造函数或同时返回公共和非公共构造函数。</returns>
<param name="bindingAttr">影响执行搜索的方式的位屏蔽。该值是零个或多个来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志的组合。 </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Boolean)">
<summary>返回为此类型定义的所有自定义属性，并指定是否搜索此类型的继承链。</summary>
<returns>一个包含为此类型定义的所有自定义属性的对象数组。</returns>
<param name="inherit">指定是否搜索此类型的继承链以查找这些属性。 </param>
<exception cref="T:System.TypeLoadException">无法加载自定义属性类型。 </exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)">
<summary>返回由类型标识的自定义属性数组。</summary>
<returns>一个对象数组，包含此类型中定义的与 <paramref name="attributeType"/> 参数匹配的自定义属性，并指定是否搜索此类型的继承链；如果在此类型上未定义自定义属性，则为 null。</returns>
<param name="attributeType">由类型标识的自定义属性数组。</param>
<param name="inherit">指定是否搜索此类型的继承链以查找这些属性。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 为 null。 </exception>
<exception cref="T:System.TypeLoadException">无法加载自定义属性类型。 </exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetElementType">
<summary>返回由当前数组、指针或 ByRef 包含或引用的对象的 <see cref="T:System.Type"/>。</summary>
<returns>由当前数组、指针或 ByRef 包含或引用的对象的 <see cref="T:System.Type"/>；如果当前 <see cref="T:System.Type"/> 不是数组、指针或 ByRef，则为 null。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)">
<summary>返回指定事件。</summary>
<returns><see cref="T:System.Reflection.EventInfo"/> 对象，表示由此类型声明或继承的具有指定名称的事件。如果未找到此类事件，则此方法返回 null。</returns>
<param name="name">要获取的事件的名称。 </param>
<param name="bindingAttr">影响执行搜索的方式的位屏蔽。该值是零个或多个来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志的组合。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="name"/> 参数为 null。 </exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetEvents">
<summary>返回 <see cref="T:System.Reflection.EventInfo"/> 对象的数组，这些对象表示由当前 TypeDelegator 声明或继承的所有公共事件。</summary>
<returns>返回 EventInfo 类型的数组，该数组包含由当前类型声明或继承的所有事件。如果没有事件，则返回空数组。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetEvents(System.Reflection.BindingFlags)">
<summary>返回 <paramref name="bindingAttr"/> 中指定的由当前 TypeDelegator 声明或继承的事件。</summary>
<returns>EventInfo 类型的数组，包含 <paramref name="bindingAttr"/> 中指定的事件。如果没有事件，则返回空数组。</returns>
<param name="bindingAttr">影响执行搜索的方式的位屏蔽。该值是零个或多个来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志的组合。 </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)">
<summary>返回 <see cref="T:System.Reflection.FieldInfo"/> 对象，该对象表示具有指定名称的字段。</summary>
<returns>FieldInfo 对象，表示由此 TypeDelegator 声明或继承的具有指定名称的字段。如果未找到这样的字段，则返回 null。</returns>
<param name="name">要查找的字段的名称。 </param>
<param name="bindingAttr">影响执行搜索的方式的位屏蔽。该值是零个或多个来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志的组合。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="name"/> 参数为 null。 </exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)">
<summary>返回 <see cref="T:System.Reflection.FieldInfo"/> 对象的数组，这些对象表示为当前 <see cref="T:System.Reflection.TypeDelegator"/> 所包装的类型定义的数据字段。</summary>
<returns>FieldInfo 类型的数组，包含由当前 TypeDelegator 声明或继承的字段。如果没有匹配的字段，则返回空数组。</returns>
<param name="bindingAttr">影响执行搜索的方式的位屏蔽。该值是零个或多个来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志的组合。 </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)">
<summary>返回由当前 <see cref="T:System.Reflection.TypeDelegator"/> 包装的类型实现的指定接口。</summary>
<returns>Type 对象，表示由当前类（直接或间接）实现的、其完全限定名与指定名称相匹配的接口。如果未找到匹配名称的接口，则返回 null。</returns>
<param name="name">由当前类实现的接口的完全限定名。 </param>
<param name="ignoreCase">如果忽略大小写，则为 true；否则为 false。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="name"/> 参数为 null。 </exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetInterfaceMap(System.Type)">
<summary>返回指定接口类型的接口映射。</summary>
<returns>表示 <paramref name="interfaceType"/> 的接口映射的 <see cref="T:System.Reflection.InterfaceMapping"/> 对象。</returns>
<param name="interfaceType">要检索其映射的接口的 <see cref="T:System.Type"/>。 </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetInterfaces">
<summary>返回在当前类及其基类上实现的所有接口。</summary>
<returns>Type 类型的数组，包含在当前类及其基类上实现的所有接口。如果一个都没有定义，则返回空数组。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
<summary>返回由给定的 <paramref name="name"/>、<paramref name="type"/> 和 <paramref name="bindingAttr"/> 指定的成员（属性、方法、构造函数、字段、事件和嵌套类型）。</summary>
<returns>MemberInfo 类型的数组，包含当前类及其基类的符合指定条件的所有成员。</returns>
<param name="name">要获取的成员名称。 </param>
<param name="type">影响执行搜索的方式的位屏蔽。该值是零个或多个来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志的组合。 </param>
<param name="bindingAttr">要获取的成员类型。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="name"/> 参数为 null。 </exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)">
<summary>返回由 <paramref name="bindingAttr"/> 指定的成员。</summary>
<returns>MemberInfo 类型的数组，包含当前类及其基类的符合 <paramref name="bindingAttr"/> 筛选器的所有成员。</returns>
<param name="bindingAttr">影响执行搜索的方式的位屏蔽。该值是零个或多个来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志的组合。 </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
<summary>用指定的绑定约束和指定的调用约定，搜索参数与指定的参数类型及修饰符相匹配的指定方法。</summary>
<returns>此实现方法的匹配指定条件的 MethodInfoInfo 对象；如果无法找到匹配项，则为 null。</returns>
<param name="name">方法名。 </param>
<param name="bindingAttr">影响执行搜索的方式的位屏蔽。该值是零个或多个来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志的组合。 </param>
<param name="binder">一个启用绑定、参数类型强制、成员调用以及使用反射进行 MemberInfo 对象检索的对象。如果 <paramref name="binder"/> 为 null，则使用默认联编程序。 </param>
<param name="callConvention">调用约定。 </param>
<param name="types">Type 类型的数组，包含参数数量、顺序和类型的列表。类型不能为 null；使用相应的 GetMethod 方法或空数组搜索不带参数的方法。 </param>
<param name="modifiers">ParameterModifier 类型的数组，它与 <paramref name="types"/> 数组的长度相同，后者的元素表示与要获取的方法的参数关联的属性。 </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMethods(System.Reflection.BindingFlags)">
<summary>返回 <see cref="T:System.Reflection.MethodInfo"/> 对象的数组，这些对象表示由当前 <see cref="T:System.Reflection.TypeDelegator"/> 所包装的类型的指定方法。</summary>
<returns>MethodInfo 对象的数组，表示在此 TypeDelegator 上定义的方法。</returns>
<param name="bindingAttr">影响执行搜索的方式的位屏蔽。该值是零个或多个来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志的组合。 </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)">
<summary>返回由 <paramref name="name"/> 在 <paramref name="bindingAttr"/> 中指定且由当前 <see cref="T:System.Reflection.TypeDelegator"/> 所表示的类型声明或继承的嵌套类型。</summary>
<returns>表示嵌套类型的 Type 对象。</returns>
<param name="name">嵌套类型的名称。 </param>
<param name="bindingAttr">影响执行搜索的方式的位屏蔽。该值是零个或多个来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志的组合。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="name"/> 参数为 null。 </exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetNestedTypes(System.Reflection.BindingFlags)">
<summary>返回在 <paramref name="bindingAttr"/> 中指定且由当前 <see cref="T:System.Reflection.TypeDelegator"/> 所包装的类型声明或继承的嵌套类型。</summary>
<returns>包含嵌套类型的 Type 类型的数组。</returns>
<param name="bindingAttr">影响执行搜索的方式的位屏蔽。该值是零个或多个来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志的组合。 </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetProperties(System.Reflection.BindingFlags)">
<summary>返回 <see cref="T:System.Reflection.PropertyInfo"/> 对象的数组，这些对象表示由当前 <see cref="T:System.Reflection.TypeDelegator"/> 所包装类型的属性。</summary>
<returns>PropertyInfo 对象的数组，表示在此 TypeDelegator 上定义的属性。</returns>
<param name="bindingAttr">影响执行搜索的方式的位屏蔽。该值是零个或多个来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志的组合。 </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
<summary>当在派生类中重写时，使用指定的绑定约束搜索其参数与指定的参数类型和修饰符匹配的指定属性。</summary>
<returns>此属性的匹配指定条件的 <see cref="T:System.Reflection.PropertyInfo"/> 对象；如果无法找到匹配，则为 null。</returns>
<param name="name">要获取的属性。 </param>
<param name="bindingAttr">影响执行搜索的方式的位屏蔽。该值是零个或多个来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志的组合。 </param>
<param name="binder">一个启用绑定、参数类型强制、成员调用以及通过反射进行 MemberInfo 对象检索的对象。如果 <paramref name="binder"/> 为 null，则使用默认联编程序。请参阅 <see cref="T:System.Reflection.Binder"/>。 </param>
<param name="returnType">属性的返回类型。 </param>
<param name="types">参数类型的列表。此列表表示参数的数目、顺序和类型。类型不能为 null；使用相应的 GetMethod 方法或空数组搜索不带参数的方法。 </param>
<param name="modifiers">长度与 types 相同的数组，其元素表示与要获取的方法参数关联的属性。 </param>
    </member>
    <member name="P:System.Reflection.TypeDelegator.GUID">
<summary>获取已实现类型的 GUID（全局唯一标识符）。</summary>
<returns>一个 GUID。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.HasElementTypeImpl">
<summary>获取一个值，该值指示当前 <see cref="T:System.Type"/> 是否包含或引用其他类型，即当前 <see cref="T:System.Type"/> 是否为数组、指针或 ByRef。</summary>
<returns>如果 <see cref="T:System.Type"/> 是数组、指针或 ByRef，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
<summary>调用指定的成员。在指定的联编程序和调用属性的约束下，要调用的方法必须是可访问的，并且必须提供与指定参数列表相符的最精确的匹配项。</summary>
<returns>表示被调用成员的返回值的 Object。</returns>
<param name="name">要调用的成员名。这可能是一个构造函数、方法、属性或字段。如果传递了空字符串 ("")，则调用默认成员。 </param>
<param name="invokeAttr">调用属性。这必须是以下 <see cref="T:System.Reflection.BindingFlags"/> 之一：InvokeMethod、CreateInstance、Static、GetField、SetField、GetProperty 或 SetProperty。必须指定合适的调用属性。如果要调用静态成员，则必须设置 Static 标志。 </param>
<param name="binder">一个启用绑定、参数类型强制、成员调用以及通过反射进行 MemberInfo 对象检索的对象。如果 <paramref name="binder"/> 为 null，则使用默认联编程序。请参阅 <see cref="T:System.Reflection.Binder"/>。 </param>
<param name="target">对其调用指定成员的对象。 </param>
<param name="args">Object 类型的数组，包含要调用的成员参数的数目、顺序和类型。如果 <paramref name="args"/> 包含未初始化的 Object，则它被视为空，用默认联编程序可将它扩展为 0、0.0 或一个字符串。 </param>
<param name="modifiers">ParameterModifer 类型的数组，其长度与 <paramref name="args"/> 相同，其元素表示与要调用的成员参数关联的属性。参数在成员的签名中有与其关联的属性。对于 ByRef，使用 ParameterModifer.ByRef；对于 none，使用 ParameterModifer.None。默认联编程序执行与这些内容的精确匹配。In 和 InOut 这样的属性不用于绑定，可以使用 ParameterInfo 进行查看。 </param>
<param name="culture">用于控制类型强制的 CultureInfo 的实例。类型强制在某些情况下是必要的，例如将表示 1000 的字符串转换为 Double 值，因为不同的区域性表示 1000 的方式不同。如果 <paramref name="culture"/> 为 null，则使用当前线程的 CultureInfo 的 CultureInfo。 </param>
<param name="namedParameters">String 类型的数组，包含与 <paramref name="args"/> 数组匹配的参数名（从元素零开始）。数组中不能有空缺。如果 <paramref name="args"/>.Length 大于 <paramref name="namedParameters"/>.Length，则按顺序填充剩余的参数。 </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsArrayImpl">
<summary>获取一个值，该值指示 <see cref="T:System.Type"/> 是否为数组。</summary>
<returns>如果 <see cref="T:System.Type"/> 为数组，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsByRefImpl">
<summary>获取一个值，该值指示 <see cref="T:System.Type"/> 是否通过引用传递。</summary>
<returns>如果 <see cref="T:System.Type"/> 通过引用传递，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsCOMObjectImpl">
<summary>获取一个值，该值指示 <see cref="T:System.Type"/> 是否为 COM 对象。</summary>
<returns>如果 <see cref="T:System.Type"/> 是一个 COM 对象，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)">
<summary>指示是否定义由 <paramref name="attributeType"/> 标识的自定义属性。</summary>
<returns>如果定义由 <paramref name="attributeType"/> 标识的自定义属性，则为 true；否则为 false。</returns>
<param name="attributeType">指定是否搜索此类型的继承链以查找这些属性。 </param>
<param name="inherit">由类型标识的自定义属性数组。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 为 null。 </exception>
<exception cref="T:System.Reflection.ReflectionTypeLoadException">无法加载自定义属性类型。 </exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsPointerImpl">
<summary>获取一个值，该值指示 <see cref="T:System.Type"/> 是否为指针。</summary>
<returns>如果 <see cref="T:System.Type"/> 是指针，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsPrimitiveImpl">
<summary>获取一个值，该值指示 <see cref="T:System.Type"/> 是否为基元类型之一。</summary>
<returns>如果 <see cref="T:System.Type"/> 为基元类型之一，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsValueTypeImpl">
<summary>获取一个值，该值指示此类型是否为值类型（即不是类或接口）。</summary>
<returns>如果 type 是值类型，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.MetadataToken">
<summary>获取一个标识元数据中的此实体的值。</summary>
<returns>一个值，与模块一起来唯一标识元数据中的此实体。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Module">
<summary>获取包含已实现类型的模块。</summary>
<returns>表示已实现类型的模块的 <see cref="T:System.Reflection.Module"/> 对象。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Name">
<summary>获取移除了路径的已实现类型的名称。</summary>
<returns>包含类型的非限定名的 String。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Namespace">
<summary>获取已实现类型的命名空间。</summary>
<returns>包含类型的命名空间的 String。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.TypeHandle">
<summary>获取已实现类型的内部元数据表示形式的句柄。</summary>
<returns>一个 RuntimeTypeHandle 对象。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.UnderlyingSystemType">
<summary>获取表示已实现类型的基础 <see cref="T:System.Type"/>。</summary>
<returns>基础类型。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.Equals(System.Object)">
<summary>确定此程序集和指定的对象是否相等。</summary>
<returns>如果 <paramref name="o"/> 等于此实例，则为 true；否则为 false。</returns>
<param name="o">与此实例进行比较的对象。 </param>
    </member>
    <member name="M:System.Reflection.Assembly.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Reflection.MethodInfo.ContainsGenericParameters">
<summary>获取一个值，该值指示泛型方法是否包含未分配的泛型类型参数。</summary>
<returns>如果当前 <see cref="T:System.Reflection.MethodInfo"/> 包含未分配的泛型类型参数，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodInfo.IsGenericMethod">
<summary>获取一个值，该值指示当前方法是否为泛型方法。</summary>
<returns>如果当前方法是泛型方法，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodInfo.IsGenericMethodDefinition">
<summary>获取一个值，该值指示当前 <see cref="T:System.Reflection.MethodInfo"/> 是否表示泛型方法的定义。</summary>
<returns>如果 <see cref="T:System.Reflection.MethodInfo"/> 对象表示泛型方法的定义，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Reflection.Module.Equals(System.Object)">
<summary>确定此模块和指定的对象是否相等。</summary>
<returns>如果 <paramref name="o"/> 等于此实例，则为 true；否则为 false。</returns>
<param name="o">与此实例进行比较的对象。 </param>
    </member>
    <member name="M:System.Reflection.Module.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Reflection.ParameterInfo.Equals(System.Object)">
<summary>确定此实例和指定的对象是否相等。</summary>
<returns>如果 <paramref name="obj"/> 等于此实例，则为 true；否则为 false。</returns>
<param name="obj">与此实例进行比较的对象。 </param>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="T:System.Reflection.Emit.AssemblyBuilder">
<summary>定义并表示动态程序集。</summary>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.AddResourceFile(System.String,System.String)">
<summary>[SECURITY CRITICAL] 向此程序集添加现有资源文件。</summary>
<param name="name">资源的逻辑名称。 </param>
<param name="fileName">逻辑名称映射到的物理文件名（.resources 文件）。文件名不应包含路径；该文件必须与将其添加到的程序集位于同一目录中。 </param>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.AddResourceFile(System.String,System.String,System.Reflection.ResourceAttributes)">
<summary>[SECURITY CRITICAL] 向此程序集添加现有资源文件。</summary>
<param name="name">资源的逻辑名称。 </param>
<param name="fileName">逻辑名称映射到的物理文件名（.resources 文件）。文件名不应包含路径；该文件必须与将其添加到的程序集位于同一目录中。 </param>
<param name="attribute">资源属性。 </param>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.CodeBase">
<summary>[SECURITY CRITICAL] 获取最初指定的程序集的位置（例如，在 <see cref="T:System.Reflection.AssemblyName"/> 对象中指定的位置）。</summary>
<returns>程序集的位置（按照最初的指定）。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)">
<summary>在此程序集中定义命名的瞬态动态模块。</summary>
<returns>新动态模块。</returns>
<param name="name">该动态模块的名称。必须小于 260 个字符。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="name"/> 以空白开始。-或- <paramref name="name"/> 的长度为零。-或- <paramref name="name"/> 的长度大于或等于 260。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
<exception cref="T:System.ExecutionEngineException">无法加载默认符号编写器的程序集。-或- 无法找到实现默认符号编写器接口的类型。 </exception>
<exception cref="T:System.InvalidOperationException">已在此程序集中创建了动态模块。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String,System.Boolean)">
<summary>在此程序集中定义命名的瞬态动态模块，并指定是否发出符号信息。</summary>
<returns>新动态模块。</returns>
<param name="name">该动态模块的名称。必须小于 260 个字符。 </param>
<param name="emitSymbolInfo">如果发出符号信息，则为 true；否则为 false。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="name"/> 以空白开始。-或- <paramref name="name"/> 的长度为零。-或- <paramref name="name"/> 的长度大于或等于 260。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
<exception cref="T:System.ExecutionEngineException">无法加载默认符号编写器的程序集。-或- 无法找到实现默认符号编写器接口的类型。 </exception>
<exception cref="T:System.InvalidOperationException">已在此程序集中创建了动态模块。</exception>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.EntryPoint">
<summary>获取此程序集的入口点。</summary>
<returns>此程序集的入口点。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.Equals(System.Object)">
<summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
<returns>如果 <paramref name="obj"/> 等于此实例的类型和值，则为 true；否则为 false。</returns>
<param name="obj">要与此实例比较的对象，或 null。</param>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.FullName">
<summary>获取当前动态程序集的显示名称。 </summary>
<returns>动态程序集的显示名称。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Boolean)">
<summary>返回已应用于当前 <see cref="T:System.Reflection.Emit.AssemblyBuilder"/> 的所有自定义属性。</summary>
<returns>一个数组，其中包含自定义属性；如果没有属性，则该数组为空。</returns>
<param name="inherit">对于该类型的对象，该参数被忽略。</param>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
<summary>返回已应用于当前 <see cref="T:System.Reflection.Emit.AssemblyBuilder"/> 且派生自指定属性类型的所有自定义属性。</summary>
<returns>一个数组，其中包含从 <paramref name="attributeType"/> 派生的任何级别的自定义属性；如果没有这样的属性，则该数组为空。</returns>
<param name="attributeType">从中派生属性的基类。</param>
<param name="inherit">对于该类型的对象，该参数被忽略。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="attributeType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 不是一个由运行库提供的 <see cref="T:System.Type"/> 对象。例如，<paramref name="attributeType"/> 是一个 <see cref="T:System.Reflection.Emit.TypeBuilder"/> 对象。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(System.String)">
<summary>返回具有指定名称的动态模块。</summary>
<returns>请求的动态模块。</returns>
<param name="name">请求的动态模块的名称。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
<exception cref="T:System.ArgumentException"><paramref name="name"/> 的长度为零。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetExportedTypes">
<summary>获取在此程序集中定义的导出类型。</summary>
<returns>一个数组，包含此程序集中定义的导出类型。</returns>
<exception cref="T:System.NotSupportedException">此方法未实现。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetFile(System.String)">
<summary>[SECURITY CRITICAL] 获取此程序集清单的文件表中指定文件的 <see cref="T:System.IO.FileStream"/>。</summary>
<returns>指定文件的 <see cref="T:System.IO.FileStream"/>；如果没有找到此文件，则为 null。</returns>
<param name="name">指定文件的名称。 </param>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetFiles(System.Boolean)">
<summary>[SECURITY CRITICAL] 获取程序集清单的文件表中的文件，还可以包括资源模块。</summary>
<returns>表示程序集中文件的 <see cref="T:System.IO.FileStream"/> 对象的数组。</returns>
<param name="getResourceModules">如果为 true，则包括资源模块；否则为 false。 </param>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames">
<summary>加载此程序集中的清单资源的名称。</summary>
<returns>包含所有资源名称的数组。</returns>
<exception cref="T:System.NotSupportedException">在动态程序集上不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.String)">
<summary>从此程序集加载指定的清单资源。</summary>
<returns>清单资源。</returns>
<param name="name">请求的清单资源的名称。 </param>
<exception cref="T:System.NotSupportedException">目前不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.Type,System.String)">
<summary>从此程序集加载指定清单资源，清单资源的范围由指定类型的命名空间确定。</summary>
<returns>清单资源。</returns>
<param name="type">其命名空间用于确定清单资源名的范围的类型。 </param>
<param name="name">请求的清单资源的名称。 </param>
<exception cref="T:System.NotSupportedException">目前不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetName(System.Boolean)">
<summary>[SECURITY CRITICAL] 获取在创建当前动态程序集时指定的 <see cref="T:System.Reflection.AssemblyName"/>，并以指定方式设置基本代码。</summary>
<returns>动态程序集的名称。</returns>
<param name="copiedName">如果为 true，则将基本代码设置为程序集在进行卷影复制后的位置；如果为 false，则将基本代码设置为原位置。</param>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo)">
<summary>获取指定区域性的附属程序集。</summary>
<returns>指定的附属程序集。</returns>
<param name="culture">指定的区域性。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="culture"/> 为 null。</exception>
<exception cref="T:System.IO.FileNotFoundException">未找到附属程序集。</exception>
<exception cref="T:System.IO.FileLoadException">找到了具有匹配文件名的附属程序集，但是 CultureInfo 与指定的不匹配。 </exception>
<exception cref="T:System.BadImageFormatException">附属程序集不是有效程序集。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)">
<summary>获取指定区域性的附属程序集的指定版本。</summary>
<returns>指定的附属程序集。</returns>
<param name="culture">指定的区域性。 </param>
<param name="version">附属程序集的版本。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="culture"/> 为 null。</exception>
<exception cref="T:System.IO.FileNotFoundException">未找到附属程序集。</exception>
<exception cref="T:System.IO.FileLoadException">找到了具有匹配文件名的附属程序集，但是 CultureInfo 或版本与指定的不匹配。 </exception>
<exception cref="T:System.BadImageFormatException">附属程序集不是有效程序集。 </exception>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ImageRuntimeVersion">
<summary>获取将在包含清单的文件中保存的公共语言运行时的版本。</summary>
<returns>公共语言运行时版本。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.IsDefined(System.Type,System.Boolean)">
<summary>返回一个值，该值指示是否将指定属性类型的一个或多个实例应用于此成员。</summary>
<returns>如果对此动态程序集应用了一个或多个 <paramref name="attributeType"/> 实例，则为 true；否则为 false。</returns>
<param name="attributeType">要测试的属性的类型。</param>
<param name="inherit">对于该类型的对象，该参数被忽略。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="attributeType"/> 为 null。</exception>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.IsDynamic">
<summary>获取一个值，该值指示当前程序集是动态程序集。</summary>
<returns>始终为 true。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.Location">
<summary>[SECURITY CRITICAL] 如果包含清单的已加载文件未进行卷影复制，获取该文件的位置（基本代码的格式）。 </summary>
<returns>包含清单的已加载文件的位置。如果已加载文件已进行卷影复制，则返回该文件在影像复制前的位置。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ManifestModule">
<summary>获取当前 <see cref="T:System.Reflection.Emit.AssemblyBuilder"/> 中包含程序集清单的模块。</summary>
<returns>清单模块。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
<summary>[SECURITY CRITICAL] 使用指定的自定义属性 BLOB（二进制大对象）设置此程序集的自定义属性。 </summary>
<param name="con">自定义属性的构造函数。 </param>
<param name="binaryAttribute">表示属性的字节 BLOB。 </param>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
<summary>使用自定义属性生成器设置此程序集的自定义属性。</summary>
<param name="customBuilder">定义自定义属性的帮助器类的实例。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="customBuilder"/> 为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint(System.Reflection.MethodInfo)">
<summary>[SECURITY CRITICAL] 设置此动态程序集的入口点，假设正在生成控制台应用程序。</summary>
<param name="entryMethod">对表示此动态程序集入口点的方法的引用。 </param>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint(System.Reflection.MethodInfo,System.Reflection.Emit.PEFileKinds)">
<summary>[SECURITY CRITICAL] 设置此程序集的入口点并定义正在构建的可移植执行文件（PE 文件）的类型。</summary>
<param name="entryMethod">对表示此动态程序集入口点的方法的引用。 </param>
<param name="fileKind">正在生成的程序集可执行文件的类型。 </param>
    </member>
    <member name="T:System.Reflection.Emit.AssemblyBuilderAccess">
<summary>定义动态程序集的访问模式。</summary>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.Run">
<summary>表示可以执行但不能保存此动态程序集。</summary>
    </member>
    <member name="T:System.Reflection.Emit.ConstructorBuilder">
<summary>定义并表示动态类的构造函数。</summary>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Attributes">
<summary>获取该构造函数的属性。</summary>
<returns>该构造函数的属性。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.CallingConvention">
<summary>获取该构造函数的调用约定。</summary>
      <returns>
如果声明类型为泛型，则为 <see cref="F:System.Reflection.CallingConventions.HasThis"/>；否则为 <see cref="F:System.Reflection.CallingConventions.Standard"/>。 </returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.DeclaringType">
<summary>获取用于声明此构造函数的动态类型。</summary>
<returns>声明此成员的动态类型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
<summary>定义此构造函数的参数的名称和属性。</summary>
<returns>表示该参数的对象。</returns>
<param name="iSequence">该参数在参数列表中的位置。为参数编索引，第一个参数从数字 1 开始。 </param>
<param name="attributes">参数的属性。 </param>
<param name="strParamName">参数名。名称可以为 null 字符串。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="iSequence"/> 小于或等于零，或者大于构造函数的参数数目。 </exception>
<exception cref="T:System.InvalidOperationException">已经使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/> 创建了该包含类型。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Boolean)">
<summary>返回为此构造函数定义的所有自定义属性。不支持此方法。</summary>
<returns>一个数组，包含由此 <see cref="T:System.Reflection.Emit.ConstructorBuilder"/> 实例表示的构造函数的所有自定义属性。</returns>
<param name="inherit">控制来自基类的自定义属性的继承性。忽略此参数。 </param>
<exception cref="T:System.NotSupportedException">目前不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Type,System.Boolean)">
<summary>返回由给定类型标识的自定义属性。不支持此方法。</summary>
<returns>一个数组，包含此构造函数的所有 <paramref name="attributeType"/> 类型的属性或从 <paramref name="attributeType"/> 派生的所有属性。</returns>
<param name="attributeType">自定义属性类型。 </param>
<param name="inherit">控制来自基类的自定义属性的继承性。忽略此参数。 </param>
<exception cref="T:System.NotSupportedException">目前不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator">
<summary>为此构造函数返回 Microsoft 中间语言 (MSIL) 生成器。</summary>
<returns>MSIL 生成器，可以用来为此构造函数发出方法体。</returns>
<exception cref="T:System.InvalidOperationException">该构造函数是使用 <see cref="M:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)"/> 方法创建的默认构造函数。-或- 构造函数具有 <see cref="T:System.Reflection.MethodAttributes"/> 或 <see cref="T:System.Reflection.MethodImplAttributes"/> 标记，指示其不能包含方法体。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator(System.Int32)">
<summary>返回一个具有指定 MSIL 流大小的 Microsoft 中间语言 (MSIL) 生成器，该生成器可用于生成此构造函数的方法体。</summary>
<returns>MSIL 生成器，可以用来为此构造函数发出方法体。</returns>
<param name="streamSize">MSIL 流的大小，以字节为单位。</param>
<exception cref="T:System.InvalidOperationException">该构造函数是使用 <see cref="M:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)"/> 方法创建的默认构造函数。-或- 构造函数具有 <see cref="T:System.Reflection.MethodAttributes"/> 或 <see cref="T:System.Reflection.MethodImplAttributes"/> 标记，指示其不能包含方法体。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetMethodImplementationFlags">
<summary>返回此构造函数的方法实现标志。</summary>
<returns>此构造函数的方法实现标志。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetModule">
<summary>返回对包含此构造函数的模块的引用。</summary>
<returns>包含此构造函数的模块。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetParameters">
<summary>返回已完成的构造函数的参数。</summary>
<returns>一个数组，在包含此构造函数的类型完成后，包含此构造函数的参数。</returns>
      <exception cref="T:System.NotSupportedException">
尚未对此构造函数的类型调用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/>。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetToken">
<summary>返回该构造函数的标记。</summary>
<returns>该构造函数的标记。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.InitLocals">
<summary>获取或设置一个值，该值指定此构造函数中的局部变量是否初始化为零。</summary>
<returns>如果应将此构造函数中的局部变量初始化为零，则为 true；否则为 false。 </returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
<summary>在指定 Binder 的约束下，用指定的参数动态调用此实例反映的构造函数。不支持此方法。</summary>
<returns>与构造函数关联的类的实例。</returns>
<param name="obj">需要重新初始化的对象。 </param>
<param name="invokeAttr">枚举值的组合，用于指定所需的绑定类型。 </param>
<param name="binder">一个启用绑定、参数类型强制、成员调用以及通过反射进行 <see cref="T:System.Reflection.MemberInfo"/> 对象检索的对象。如果 <paramref name="binder"/> 为 null，则使用 <see cref="P:System.Type.DefaultBinder"/>。 </param>
<param name="parameters">参数列表。这是一个参数数组，这些参数与要调用的构造函数的参数具有相同的数量、顺序和类型。如果没有参数，则它应为 null。 </param>
<param name="culture">用于控制类型强制的 <see cref="T:System.Globalization.CultureInfo"/>。如果这是 null，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo"/>。 </param>
<exception cref="T:System.NotSupportedException">目前不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
<summary>在给定联编程序的约束下，对给定的对象动态调用此实例所反射的构造函数，并传递指定的参数。不支持此方法。</summary>
<returns>被调用构造函数的返回值。</returns>
<param name="invokeAttr">这必须是来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志，如 InvokeMethod、NonPublic 等。 </param>
<param name="binder">一个启用绑定、参数类型强制、成员调用以及使用反射进行 MemberInfo 对象检索的对象。 如果 binder 为 null，则使用默认联编程序。请参阅 <see cref="T:System.Reflection.Binder"/>。 </param>
<param name="parameters">参数列表。这是一个参数数组，这些参数与要调用的构造函数的参数具有相同的数量、顺序和类型。如果没有参数，则它应为 null。 </param>
<param name="culture">用于控制类型强制的 <see cref="T:System.Globalization.CultureInfo"/> 的实例。如果这是 null，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo"/>。（例如，这对于将表示 1000 的 <see cref="T:System.String"/> 转换为 <see cref="T:System.Double"/> 值是必需的，因为不同的区域性以不同的方式表示 1000。） </param>
<exception cref="T:System.NotSupportedException">目前不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.IsDefined(System.Type,System.Boolean)">
<summary>检查是否定义了指定的自定义属性类型。不支持此方法。</summary>
<returns>如果定义了指定的自定义属性类型，则为 true；否则为 false。</returns>
<param name="attributeType">自定义属性类型。 </param>
<param name="inherit">控制来自基类的自定义属性的继承性。忽略此参数。 </param>
<exception cref="T:System.NotSupportedException">目前不支持此方法。 </exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.MethodHandle">
<summary>获取该构造函数的句柄。不支持此属性。</summary>
<returns>构造函数的句柄。 </returns>
<exception cref="T:System.NotSupportedException">在该类上不支持此属性。 </exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Module">
<summary>获取定义此构造函数的动态模块。</summary>
<returns>定义此构造函数的动态模块。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Name">
<summary>检索此构造函数的名称。</summary>
<returns>此构造函数的名称。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.ReflectedType">
<summary>获取在其上定义此属性的动态类型。</summary>
<returns>定义此属性的动态类型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
<summary>[SECURITY CRITICAL] 使用表示自定义属性的指定二进制大对象 (BLOB) 向构造函数应用该属性。</summary>
<param name="con">自定义属性的构造函数。 </param>
<param name="binaryAttribute">表示属性的字节 BLOB。 </param>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
<summary>使用自定义属性生成器向构造函数应用自定义属性。</summary>
<param name="customBuilder">帮助器类的实例，指定要应用的自定义属性。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="customBuilder"/> 为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
<summary>设置此构造函数的方法实现标志。</summary>
<param name="attributes">方法实现标志。 </param>
<exception cref="T:System.InvalidOperationException">已经使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/> 创建了该包含类型。 </exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Signature">
<summary>获取构造函数签名的字符串表示形式。</summary>
<returns>构造函数签名的表示形式。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.ToString">
<summary>以 <see cref="T:System.String"/> 形式返回此 <see cref="T:System.Reflection.Emit.ConstructorBuilder"/> 实例。</summary>
<returns>一个字符串，它包含此构造函数的名称、属性和异常，后跟当前 Microsoft 中间语言 (MSIL) 流。</returns>
    </member>
    <member name="T:System.Reflection.Emit.CustomAttributeBuilder">
<summary>表示一个可附加到正在发出的类型或成员的形式的自定义属性。</summary>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[])">
<summary>在已知自定义属性的构造函数和该构造函数的参数的情况下，初始化 CustomAttributeBuilder 类的新实例。</summary>
<param name="con">自定义属性的构造函数。 </param>
<param name="constructorArgs">自定义属性的构造函数的参数。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="con"/> 为静态或私有。-或- 所提供的参数数量与该构造函数的调用约定所要求的构造函数的参数数量不匹配。-或- 所提供参数的类型与构造函数中声明的参数类型不匹配。-或- 提供的参数是引用类型，而不是 <see cref="T:System.String"/> 或 <see cref="T:System.Type"/>。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="con"/> 或 <paramref name="constructorArgs"/> 为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.FieldInfo[],System.Object[])">
<summary>在已知自定义属性的构造函数、该构造函数的参数以及一组命名的字段/值对的情况下，初始化 CustomAttributeBuilder 类的新实例。</summary>
<param name="con">自定义属性的构造函数。 </param>
<param name="constructorArgs">自定义属性的构造函数的参数。 </param>
<param name="namedFields">自定义属性的命名字段。 </param>
<param name="fieldValues">自定义属性的命名字段的值。 </param>
<exception cref="T:System.ArgumentException"><paramref name="namedFields"/> 和 <paramref name="fieldValues"/> 数组的长度不同。-或- <paramref name="con"/> 为静态或私有。-或- 所提供的参数数量与该构造函数的调用约定所要求的构造函数的参数数量不匹配。-或- 所提供参数的类型与构造函数中声明的参数类型不匹配。-或- 字段值的类型与命名字段的类型不匹配。-或- 该字段不属于与构造函数相同的类或基类。-或- 提供的参数或命名的字段是引用类型，而不是 <see cref="T:System.String"/> 或 <see cref="T:System.Type"/>。</exception>
<exception cref="T:System.ArgumentNullException">其中一个参数为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[])">
<summary>在已知自定义属性的构造函数、该构造函数的参数以及一组命名的属性/值对的情况下，初始化 CustomAttributeBuilder 类的新实例。</summary>
<param name="con">自定义属性的构造函数。 </param>
<param name="constructorArgs">自定义属性的构造函数的参数。 </param>
<param name="namedProperties">自定义特性的命名属性。 </param>
<param name="propertyValues">自定义特性的命名属性的值。 </param>
<exception cref="T:System.ArgumentException"><paramref name="namedProperties"/> 和 <paramref name="propertyValues"/> 数组的长度不同。-或- <paramref name="con"/> 为静态或私有。-或- 所提供的参数数量与该构造函数的调用约定所要求的构造函数的参数数量不匹配。-或- 所提供参数的类型与构造函数中声明的参数类型不匹配。-或- 属性值的类型与命名属性的类型不匹配。-或- 属性没有 setter 方法。-或- 该属性不属于与构造函数相同的类或基类。-或- 提供的参数或命名的属性是引用类型，而不是 <see cref="T:System.String"/> 或 <see cref="T:System.Type"/>。</exception>
<exception cref="T:System.ArgumentNullException">其中一个参数为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[],System.Reflection.FieldInfo[],System.Object[])">
<summary>在已知自定义属性的构造函数、该构造函数的参数、一组命名的属性/值对以及一组命名的字段/值对的情况下，初始化 CustomAttributeBuilder 类的新实例。</summary>
<param name="con">自定义属性的构造函数。 </param>
<param name="constructorArgs">自定义属性的构造函数的参数。 </param>
<param name="namedProperties">自定义特性的命名属性。 </param>
<param name="propertyValues">自定义特性的命名属性的值。 </param>
<param name="namedFields">自定义属性的命名字段。 </param>
<param name="fieldValues">自定义属性的命名字段的值。 </param>
<exception cref="T:System.ArgumentException"><paramref name="namedProperties"/> 和 <paramref name="propertyValues"/> 数组的长度不同。-或- <paramref name="namedFields"/> 和 <paramref name="fieldValues"/> 数组的长度不同。-或- <paramref name="con"/> 为静态或私有。-或- 所提供的参数数量与该构造函数的调用约定所要求的构造函数的参数数量不匹配。-或- 所提供参数的类型与构造函数中声明的参数类型不匹配。-或- 属性值的类型与命名属性的类型不匹配。-或- 字段值的类型与相应的字段类型的类型不匹配。-或- 属性没有 setter。-或- 该属性或字段不属于与构造函数相同的类或基类。-或- 提供的参数、命名的属性或命名的字段是引用类型，而不是 <see cref="T:System.String"/> 或 <see cref="T:System.Type"/>。</exception>
<exception cref="T:System.ArgumentNullException">其中一个参数为 null。 </exception>
    </member>
    <member name="T:System.Reflection.Emit.DynamicMethod">
<summary>定义并表示一种可编译、执行和丢弃的动态方法。丢弃的方法可用于垃圾回收。</summary>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
<summary>[SECURITY CRITICAL] 创建一个对模块全局有效的动态方法，指定方法名称、属性、调用约定、返回类型、参数类型和模块，并指定动态方法的 Microsoft 中间语言 (MSIL) 访问的类型和成员是否应跳过实时 (JIT) 可见性检查。</summary>
<param name="name">动态方法的名称。可以是长度为零的字符串，但不能为 null。</param>
<param name="attributes"><see cref="T:System.Reflection.MethodAttributes"/> 值的按位组合，指定动态方法的属性。允许的唯一组合为 <see cref="F:System.Reflection.MethodAttributes.Public"/> 和 <see cref="F:System.Reflection.MethodAttributes.Static"/>。</param>
<param name="callingConvention">动态方法的调用约定。必须为 <see cref="F:System.Reflection.CallingConventions.Standard"/>。</param>
<param name="returnType">一个 <see cref="T:System.Type"/> 对象，它指定动态方法的返回类型；如果方法没有返回类型，则为 null。 </param>
<param name="parameterTypes">一个 <see cref="T:System.Type"/> 对象数组，它指定动态方法的参数的类型；如果方法没有参数，则为 null。 </param>
<param name="m">一个 <see cref="T:System.Reflection.Module"/>，表示动态方法将与之逻辑关联的模块。 </param>
<param name="skipVisibility">要针对动态方法的 MSIL 所访问的类型和成员跳过 JIT 可见性检查，则为 true；否则为 false。 </param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
<summary>[SECURITY CRITICAL] 创建一个动态方法，指定方法名称、属性、调用约定、返回类型、参数类型、动态方法逻辑关联的类型，并指定动态方法的 Microsoft 中间语言 (MSIL) 访问的类型和成员是否应跳过实时 (JIT) 可见性检查。</summary>
<param name="name">动态方法的名称。可以是长度为零的字符串，但不能为 null。</param>
<param name="attributes"><see cref="T:System.Reflection.MethodAttributes"/> 值的按位组合，指定动态方法的属性。允许的唯一组合为 <see cref="F:System.Reflection.MethodAttributes.Public"/> 和 <see cref="F:System.Reflection.MethodAttributes.Static"/>。</param>
<param name="callingConvention">动态方法的调用约定。必须为 <see cref="F:System.Reflection.CallingConventions.Standard"/>。</param>
<param name="returnType">一个 <see cref="T:System.Type"/> 对象，它指定动态方法的返回类型；如果方法没有返回类型，则为 null。 </param>
<param name="parameterTypes">一个 <see cref="T:System.Type"/> 对象数组，它指定动态方法的参数的类型；如果方法没有参数，则为 null。 </param>
<param name="owner">一个 <see cref="T:System.Type"/>，动态方法与其逻辑关联。动态方法可以访问类型的所有成员。</param>
<param name="skipVisibility">要针对动态方法的 MSIL 所访问的类型和成员跳过 JIT 可见性检查，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
<summary>创建匿名承载的动态方法，指定方法名称、返回类型和参数类型。 </summary>
<param name="name">动态方法的名称。可以是长度为零的字符串，但不能为 null。 </param>
<param name="returnType">一个 <see cref="T:System.Type"/> 对象，它指定动态方法的返回类型；如果方法没有返回类型，则为 null。 </param>
<param name="parameterTypes">一个 <see cref="T:System.Type"/> 对象数组，它指定动态方法的参数的类型；如果方法没有参数，则为 null。 </param>
<exception cref="T:System.ArgumentException"><paramref name="parameterTypes"/> 的一个元素为 null 或 <see cref="T:System.Void"/>。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="returnType"/> 为 <see cref="P:System.Type.IsByRef"/> 返回 true 的类型。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
<summary>[SECURITY CRITICAL] 创建一个对模块全局有效的动态方法，指定方法名称、返回类型、参数类型和模块。</summary>
<param name="name">动态方法的名称。可以是长度为零的字符串，但不能为 null。 </param>
<param name="returnType">一个 <see cref="T:System.Type"/> 对象，它指定动态方法的返回类型；如果方法没有返回类型，则为 null。 </param>
<param name="parameterTypes">一个 <see cref="T:System.Type"/> 对象数组，它指定动态方法的参数的类型；如果方法没有参数，则为 null。 </param>
<param name="m">一个 <see cref="T:System.Reflection.Module"/>，表示动态方法将与之逻辑关联的模块。 </param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
<summary>[SECURITY CRITICAL] 创建一个对模块全局有效的动态方法，指定方法名称、返回类型、参数类型和模块，并指定动态方法的 Microsoft 中间语言 (MSIL) 访问的类型和成员是否应跳过实时 (JIT) 可见性检查。</summary>
<param name="name">动态方法的名称。可以是长度为零的字符串，但不能为 null。 </param>
<param name="returnType">一个 <see cref="T:System.Type"/> 对象，它指定动态方法的返回类型；如果方法没有返回类型，则为 null。 </param>
<param name="parameterTypes">一个 <see cref="T:System.Type"/> 对象数组，它指定动态方法的参数的类型；如果方法没有参数，则为 null。 </param>
<param name="m">一个 <see cref="T:System.Reflection.Module"/>，表示动态方法将与之逻辑关联的模块。 </param>
<param name="skipVisibility">要针对动态方法的 MSIL 所访问的类型和成员跳过 JIT 可见性检查，则为 true。 </param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
<summary>[SECURITY CRITICAL] 创建一个动态方法，指定方法名称、返回类型、参数类型和动态方法逻辑关联的类型。</summary>
<param name="name">动态方法的名称。可以是长度为零的字符串，但不能为 null。 </param>
<param name="returnType">一个 <see cref="T:System.Type"/> 对象，它指定动态方法的返回类型；如果方法没有返回类型，则为 null。 </param>
<param name="parameterTypes">一个 <see cref="T:System.Type"/> 对象数组，它指定动态方法的参数的类型；如果方法没有参数，则为 null。 </param>
<param name="owner">一个 <see cref="T:System.Type"/>，动态方法与其逻辑关联。动态方法可以访问类型的所有成员。 </param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
<summary>[SECURITY CRITICAL] 创建一个动态方法，指定方法名称、返回类型、参数类型、动态方法逻辑关联的类型，并指定动态方法的 Microsoft 中间语言 (MSIL) 访问的类型和成员是否应跳过实时 (JIT) 可见性检查。</summary>
<param name="name">动态方法的名称。可以是长度为零的字符串，但不能为 null。 </param>
<param name="returnType">一个 <see cref="T:System.Type"/> 对象，它指定动态方法的返回类型；如果方法没有返回类型，则为 null。 </param>
<param name="parameterTypes">一个 <see cref="T:System.Type"/> 对象数组，它指定动态方法的参数的类型；如果方法没有参数，则为 null。 </param>
<param name="owner">一个 <see cref="T:System.Type"/>，动态方法与其逻辑关联。动态方法可以访问类型的所有成员。</param>
<param name="skipVisibility">要针对动态方法的 MSIL 所访问的类型和成员跳过 JIT 可见性检查，则为 true；否则为 false。 </param>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Attributes">
<summary>获取创建动态方法时指定的属性。</summary>
<returns><see cref="T:System.Reflection.MethodAttributes"/> 值的按位组合，表示方法的属性。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.CallingConvention">
<summary>获取创建动态方法时指定的调用约定。</summary>
<returns>一个 <see cref="T:System.Reflection.CallingConventions"/> 值，它指示方法的调用约定。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
<summary>完成动态方法，并创建一个指定类型的委托，该委托可用于执行此动态方法。 </summary>
<returns>一个指定类型的委托，可用于执行动态方法。</returns>
<param name="delegateType">签名与动态方法的签名匹配的委托类型。 </param>
<exception cref="T:System.InvalidOperationException">动态方法没有方法体。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="delegateType"/> 的参数数量不正确，或者参数类型不正确。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
<summary>完成动态方法并创建一个可用于执行该方法的委托，指定委托类型和委托绑定到的对象。</summary>
<returns>一个指定类型的委托，可用于对指定的目标对象执行动态方法。</returns>
<param name="delegateType">一个签名与动态方法的签名匹配的委托类型，不包括第一个参数。</param>
<param name="target">委托绑定到的对象。其类型必须与动态方法的第一个参数的类型相同。 </param>
<exception cref="T:System.InvalidOperationException">动态方法没有方法体。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="target"/> 的类型与动态方法的第一个参数的类型不同，不能赋值给该类型。-或- <paramref name="delegateType"/> 的参数数量不正确，或者参数类型不正确。</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.DeclaringType">
<summary>获取声明方法的类型，对于动态方法，类型始终为 null。</summary>
<returns>始终为 null。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
<summary>定义动态方法的参数。</summary>
<returns>始终返回 null。 </returns>
<param name="position">该参数在参数列表中的位置。为参数编索引，第一个参数从数字 1 开始。 </param>
<param name="attributes"><see cref="T:System.Reflection.ParameterAttributes"/> 值的按位组合，用于指定参数的属性。 </param>
<param name="parameterName">参数名。名称可以为零长度字符串。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">此方法没有参数。-或- <paramref name="position"/> 小于 0。-或- <paramref name="position"/> 大于此方法的参数数目。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition">
<summary>返回方法的基实现。</summary>
<returns>方法的基实现。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)">
<summary>返回为此方法定义的所有自定义属性。</summary>
<returns>表示此方法的所有自定义属性的对象数组。</returns>
<param name="inherit">如果为 true，则搜索方法的继承链以查找自定义属性；如果为 false，则仅检查当前方法。 </param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
<summary>返回应用于此方法的指定类型的自定义属性。</summary>
<returns>一个对象数组，表示此方法的属性为 <paramref name="attributeType"/> 类型或派生自 <paramref name="attributeType"/> 类型。</returns>
<param name="attributeType">一个 <see cref="T:System.Type"/>，表示要返回的自定义属性类型。 </param>
<param name="inherit">如果为 true，则搜索方法的继承链以查找自定义属性；如果为 false，则仅检查当前方法。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="attributeType"/> 为 null。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
<summary>为该方法返回一个具有默认 MSIL 流大小（64 字节）的 Microsoft 中间语言 (MSIL) 生成器。</summary>
<returns>该方法的 <see cref="T:System.Reflection.Emit.ILGenerator"/> 对象。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
<summary>为方法返回一个具有指定 MSIL 流大小的 Microsoft 中间语言 (MSIL) 生成器。</summary>
<returns>方法的 <see cref="T:System.Reflection.Emit.ILGenerator"/> 对象，具有指定的 MSIL 流大小。</returns>
<param name="streamSize">MSIL 流的大小，以字节为单位。 </param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags">
<summary>返回此方法的实现标志。</summary>
<returns><see cref="T:System.Reflection.MethodImplAttributes"/> 值的按位组合，表示此方法的实现标志。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetParameters">
<summary>返回动态方法的参数。</summary>
<returns>一个 <see cref="T:System.Reflection.ParameterInfo"/> 对象数组，表示动态方法的参数。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.InitLocals">
<summary>获取或设置一个值，该值指示方法中的局部变量是否初始化为零。 </summary>
<returns>如果方法中的局部变量初始化为零，则为 true；否则为 false。默认值为 true。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
<summary>使用指定的参数，在指定的联编程序的约束下，使用指定的区域性信息调用动态方法。</summary>
<returns>一个 <see cref="T:System.Object"/>，包含调用的方法的返回值。</returns>
<param name="obj">因为动态方法是静态的，所以对于动态方法，忽略此参数。指定 null。 </param>
<param name="invokeAttr"><see cref="T:System.Reflection.BindingFlags"/> 值的按位组合。</param>
<param name="binder">一个 <see cref="T:System.Reflection.Binder"/> 对象，该对象通过反射来启用绑定、参数类型强制、成员调用以及对 <see cref="T:System.Reflection.MemberInfo"/> 对象的检索。如果 <paramref name="binder"/> 为 null，则使用默认联编程序。有关详细信息，请参阅 <see cref="T:System.Reflection.Binder"/>。 </param>
<param name="parameters">参数列表。这是一个参数数组，这些参数与要调用的方法的参数具有相同的数目、顺序和类型。如果没有任何参数，则此参数应为 null。 </param>
<param name="culture">用于控制类型强制的 <see cref="T:System.Globalization.CultureInfo"/> 的实例。如果这是 null，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo"/>。例如，将表示 1000 的 <see cref="T:System.String"/> 正确转换为 <see cref="T:System.Double"/> 值时需要此信息，因为不同的区域性使用不同的形式表示 1000。 </param>
<exception cref="T:System.NotSupportedException">不支持 <see cref="F:System.Reflection.CallingConventions.VarArgs"/> 调用约定。</exception>
<exception cref="T:System.Reflection.TargetParameterCountException"><paramref name="parameters"/> 中的元素数量与动态方法中的参数数量不匹配。</exception>
<exception cref="T:System.ArgumentException"><paramref name="parameters"/> 的一个或多个元素的类型与动态方法的相应参数的类型不匹配。</exception>
<exception cref="T:System.Reflection.TargetInvocationException">该动态方法与模块关联，并且不是匿名承载的，而是在 <paramref name="skipVisibility"/> 设置为 false的情况下构造的，但是该动态方法可以访问不是 public 或 internal（在 Visual Basic 中为 Friend）的成员。-或- 该动态方法是匿名承载的，并且是在 <paramref name="skipVisibility"/> 设置为 false 的情况下构造的，但是它可以访问不是 public 的成员。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)">
<summary>指示是否定义了指定的自定义属性类型。</summary>
<returns>如果定义了指定的自定义属性类型，则为 true；否则为 false。</returns>
<param name="attributeType">一个 <see cref="T:System.Type"/>，表示要搜索的自定义属性类型。 </param>
<param name="inherit">如果为 true，则搜索方法的继承链以查找自定义属性；如果为 false，则仅检查当前方法。 </param>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.MethodHandle">
<summary>动态方法不支持。</summary>
<returns>动态方法不支持。</returns>
<exception cref="T:System.InvalidOperationException">动态方法不允许。</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Module">
<summary>获取动态方法逻辑关联的模块。</summary>
<returns>动态方法当前关联的 <see cref="T:System.Reflection.Module"/>。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Name">
<summary>获取动态方法的名称。</summary>
<returns>方法的简称。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReflectedType">
<summary>获取在反射中用于获取方法的类。</summary>
<returns>始终为 null。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnParameter">
<summary>获取动态方法的返回参数。</summary>
<returns>始终为 null。 </returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnType">
<summary>获取动态方法的返回值的类型。</summary>
<returns>一个 <see cref="T:System.Type"/>，表示当前方法的返回值的类型；如果该方法没有返回类型，则为 <see cref="T:System.Void"/>。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes">
<summary>获取动态方法的返回类型的自定义属性。</summary>
<returns>一个 <see cref="T:System.Reflection.ICustomAttributeProvider"/>，表示动态方法的返回类型的自定义属性。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.ToString">
<summary>返回方法的签名，以字符串表示。</summary>
<returns>表示方法签名的字符串。</returns>
    </member>
    <member name="T:System.Reflection.Emit.EnumBuilder">
<summary>说明并表示枚举类型。</summary>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Assembly">
<summary>检索包含此枚举定义的动态程序集。</summary>
<returns>只读。包含此枚举定义的动态程序集。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
<summary>返回由父程序集的显示名称完全限定的此枚举的完整路径。</summary>
<returns>只读。由父程序集的显示名称完全限定的此枚举的完整路径。</returns>
<exception cref="T:System.NotSupportedException">如果 <see cref="M:System.Reflection.Emit.EnumBuilder.CreateType"/> 以前未被调用过。 </exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.BaseType">
<summary>返回此类型的父 <see cref="T:System.Type"/>，它始终为 <see cref="T:System.Enum"/>。</summary>
<returns>只读。该类型的父 <see cref="T:System.Type"/>。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.CreateType">
<summary>创建该枚举的 <see cref="T:System.Type"/> 对象。</summary>
<returns>该枚举的 <see cref="T:System.Type"/> 对象。</returns>
<exception cref="T:System.InvalidOperationException">以前创建过此类型。-或- 尚未创建封闭类型。 </exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.DeclaringType">
<summary>返回声明该 <see cref="T:System.Reflection.Emit.EnumBuilder"/> 的类型。</summary>
<returns>只读。声明该 <see cref="T:System.Reflection.Emit.EnumBuilder"/> 的类型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
<summary>用指定的常数值定义枚举类型中已命名的静态字段。</summary>
<returns>定义的字段。</returns>
<param name="literalName">静态字段的名称。 </param>
<param name="literalValue">Literal 的常数值。 </param>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.FullName">
<summary>返回此枚举的完整路径。</summary>
<returns>此枚举的完整路径。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)">
<summary>按照指定，返回 <see cref="T:System.Reflection.ConstructorInfo"/> 对象的数组，这些对象表示为此类定义的公共和非公共构造函数。</summary>
<returns>返回 <see cref="T:System.Reflection.ConstructorInfo"/> 对象的数组，这些对象表示为此类定义的指定构造函数。如果未定义任何构造函数，则返回空数组。</returns>
<param name="bindingAttr">这必须是来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志：InvokeMethod、NonPublic 等。 </param>
<exception cref="T:System.NotSupportedException">在不完整类型中目前不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)">
<summary>返回为此构造函数定义的所有自定义属性。</summary>
<returns>返回对象的数组，这些对象表示由此 <see cref="T:System.Reflection.Emit.ConstructorBuilder"/> 实例表示的构造函数的所有自定义属性。</returns>
<param name="inherit">指定是否搜索该成员的继承链以查找这些属性。 </param>
<exception cref="T:System.NotSupportedException">在不完整类型中目前不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)">
<summary>返回由给定类型标识的自定义属性。</summary>
<returns>返回表示该构造函数的属性（这些属性属于 <see cref="T:System.Type"/><paramref name="attributeType"/>）的对象的数组。</returns>
<param name="attributeType">对其应用自定义属性的 Type 对象。 </param>
<param name="inherit">指定是否搜索该成员的继承链以查找这些属性。 </param>
<exception cref="T:System.NotSupportedException">在不完整类型中目前不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetElementType">
<summary>调用此方法始终引发 <see cref="T:System.NotSupportedException"/>。</summary>
<returns>不支持此方法。不返回任何值。</returns>
<exception cref="T:System.NotSupportedException">目前不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
<summary>返回具有指定名称的事件。</summary>
<returns>返回 <see cref="T:System.Reflection.EventInfo"/> 对象，该对象表示此类型声明或继承的具有指定名称的事件。如果没有匹配项，则返回 null。</returns>
<param name="name">要获取的事件的名称。 </param>
<param name="bindingAttr">此调用属性。这必须是来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志：InvokeMethod、NonPublic 等。 </param>
<exception cref="T:System.NotSupportedException">在不完整类型中目前不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvents">
<summary>返回此类型声明或继承的公共事件的事件。</summary>
<returns>返回 <see cref="T:System.Reflection.EventInfo"/> 对象的数组，这些对象表示此类型声明或继承的公共事件。如果没有公共事件，则返回空数组。</returns>
<exception cref="T:System.NotSupportedException">在不完整类型中目前不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)">
<summary>返回此类型声明的公共和非公共事件。</summary>
<returns>返回 <see cref="T:System.Reflection.EventInfo"/> 对象的数组，这些对象表示此类型声明或继承的公共和非公共事件。按照指定，如果没有任何事件，则返回空数组。</returns>
<param name="bindingAttr">这必须是来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志，如 InvokeMethod、NonPublic 等。 </param>
<exception cref="T:System.NotSupportedException">在不完整类型中目前不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)">
<summary>返回由给定名称指定的字段。</summary>
<returns>返回 <see cref="T:System.Reflection.FieldInfo"/> 对象，该对象表示此类型声明或继承且具有指定名称和公共或非公共修饰符的字段。如果没有匹配项，则返回空。</returns>
<param name="name">要获取的字段的名称。 </param>
<param name="bindingAttr">这必须是来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志：InvokeMethod、NonPublic 等。 </param>
<exception cref="T:System.NotSupportedException">在不完整类型中目前不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)">
<summary>返回此类型声明的公共和非公共字段。</summary>
<returns>返回 <see cref="T:System.Reflection.FieldInfo"/> 对象的数组，这些对象表示此类型声明或继承的公共和非公共字段。按照指定，如果没有任何字段，则返回空数组。</returns>
<param name="bindingAttr">这必须是来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志，如 InvokeMethod、NonPublic 等。 </param>
<exception cref="T:System.NotSupportedException">在不完整类型中目前不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)">
<summary>使用指定的完全限定名返回此类型（直接或间接）实现的接口。</summary>
<returns>返回 <see cref="T:System.Type"/> 对象，该对象表示实现的接口。如果未找到名称匹配的接口，则返回空。</returns>
<param name="name">接口名。 </param>
<param name="ignoreCase">如果为 true，则搜索不区分大小写。如果为 false，则搜索区分大小写。 </param>
<exception cref="T:System.NotSupportedException">在不完整类型中目前不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)">
<summary>返回请求的接口的接口映射。</summary>
<returns>请求的接口映射。</returns>
<param name="interfaceType">要为其检索接口映射的接口类型。 </param>
<exception cref="T:System.NotSupportedException">在不完整类型中目前不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterfaces">
<summary>返回在此类及其基类上实现的所有接口的数组。</summary>
<returns>返回 <see cref="T:System.Type"/> 对象的数组，这些对象表示实现的接口。如果一个都没有定义，则返回空数组。</returns>
<exception cref="T:System.NotSupportedException">在不完整类型中目前不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
<summary>返回具有指定名称、类型并由此类型声明或继承其绑定的所有成员。</summary>
<returns>如果使用 <paramref name="nonPublic"/>，则返回 <see cref="T:System.Reflection.MemberInfo"/> 对象的数组，这些对象表示在此类型上定义的公共和非公共成员；否则，仅返回公共成员。</returns>
<param name="name">成员的名称。 </param>
<param name="type">要返回的成员的类型。 </param>
<param name="bindingAttr">这必须是来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志：InvokeMethod、NonPublic 等。 </param>
<exception cref="T:System.NotSupportedException">在不完整类型中目前不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)">
<summary>返回由此类型声明或继承的指定成员。</summary>
<returns>返回 <see cref="T:System.Reflection.MemberInfo"/> 对象的数组，这些对象表示此类型声明或继承的公共和非公共成员。如果没有匹配的成员，则返回空数组。</returns>
<param name="bindingAttr">这必须是来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志：InvokeMethod、NonPublic 等。 </param>
<exception cref="T:System.NotSupportedException">在不完整类型中目前不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)">
<summary>按照指定，返回此类型声明或继承的所有公共和非公共方法。</summary>
<returns>如果使用 <paramref name="nonPublic"/>，则返回 <see cref="T:System.Reflection.MethodInfo"/> 对象的数组，这些对象表示在此类型上定义的公共和非公共方法；否则，仅返回公共方法。</returns>
<param name="bindingAttr">这必须是来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志，如 InvokeMethod、NonPublic 等。 </param>
<exception cref="T:System.NotSupportedException">在不完整类型中目前不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
<summary>返回此类型声明的指定嵌套类型。</summary>
<returns>表示符合指定要求的嵌套类型的 <see cref="T:System.Type"/> 对象（如果找到的话）；否则为 null。</returns>
<param name="name">包含要获取的嵌套类型的名称的 <see cref="T:System.String"/>。 </param>
<param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags"/> 组成。-或- 零，表示对公共方法执行区分大小写的搜索。 </param>
<exception cref="T:System.NotSupportedException">在不完整类型中目前不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
<summary>返回此类型声明或继承的公共和非公共嵌套类型。</summary>
<returns>表示嵌套在当前 <see cref="T:System.Type"/> 中的匹配指定绑定约束的所有类型的 <see cref="T:System.Type"/> 对象数组。如果当前 <see cref="T:System.Type"/> 中没有嵌套类型或没有嵌套的类型与绑定约束匹配，则为 <see cref="T:System.Type"/> 类型的空数组。</returns>
<param name="bindingAttr">这必须是来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志，如 InvokeMethod、NonPublic 等。 </param>
<exception cref="T:System.NotSupportedException">在不完整类型中目前不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)">
<summary>按照指定，返回此类型声明或继承的所有公共和非公共属性。</summary>
<returns>如果使用 <paramref name="nonPublic"/>，则返回 <see cref="T:System.Reflection.PropertyInfo"/> 对象的数组，这些对象表示在此类型上定义的公共和非公共属性；否则，仅返回公共属性。</returns>
<param name="bindingAttr">此调用属性。这必须是来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志：InvokeMethod、NonPublic 等。 </param>
<exception cref="T:System.NotSupportedException">在不完整类型中目前不支持此方法。 </exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.GUID">
<summary>返回此枚举的 GUID。</summary>
<returns>此枚举的 GUID。</returns>
<exception cref="T:System.NotSupportedException">在不完整类型中目前不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
<summary>调用指定的成员。在指定的联编程序和调用属性的约束下，要调用的方法必须是可访问的，并且必须提供与指定参数列表相符的最精确的匹配项。</summary>
<returns>返回被调用成员的返回值。</returns>
<param name="name">要调用的成员名。它可以是构造函数、方法、属性或字段。必须指定合适的调用属性。请注意，可以通过将空字符串作为成员名称传递来调用类的默认成员。 </param>
<param name="invokeAttr">调用属性。这必须是来自 BindingFlags 的位标志。 </param>
<param name="binder">一个启用绑定、参数类型强制、成员调用以及使用反射进行 MemberInfo 对象检索的对象。 如果 binder 为 null，则使用默认联编程序。请参阅 <see cref="T:System.Reflection.Binder"/>。 </param>
<param name="target">对其调用指定成员的对象。如果该成员是静态的，则忽略此参数。 </param>
<param name="args">参数列表。这是一个对象数组，包含要调用的成员的参数的数目、顺序和类型。如果没有参数，则它应为 null。 </param>
<param name="modifiers">与 <paramref name="args"/> 长度相同的数组，其元素表示与要调用的成员的参数相关联的属性。参数在元数据中有关联的属性。它们由各种交互操作服务使用。有关这些说明的详细信息，请参阅元数据规范。 </param>
<param name="culture">用于控制类型强制的 CultureInfo 的实例。如果这是 null，则使用当前线程的 CultureInfo。（注意，这对于某些转换是必要的，例如，将表示 1000 的 String 转换为 Double 值，因为不同区域性的 1000 表示形式不同。） </param>
<param name="namedParameters"><paramref name="namedParameters"/> 数组中的每一个参数获取 <paramref name="args"/> 数组中相应元素中的值。如果 <paramref name="args"/> 的长度大于 <paramref name="namedParameters"/> 的长度，则按顺序传递剩余的参数值。 </param>
<exception cref="T:System.NotSupportedException">在不完整类型中目前不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)">
<summary>检查是否定义了指定的自定义属性类型。</summary>
<returns>如果该成员上定义了一个或多个 <paramref name="attributeType"/> 实例，则为 true；否则为 false。</returns>
<param name="attributeType">对其应用自定义属性的 Type 对象。 </param>
<param name="inherit">指定是否搜索该成员的继承链以查找这些属性。 </param>
<exception cref="T:System.NotSupportedException">在不完整类型中目前不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeArrayType">
<returns>返回一个表示当前类型的一维数组（下限为零）的 <see cref="T:System.Type"/> 对象。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)">
<returns>表示当前类型的指定维数的数组的 <see cref="T:System.Type"/> 对象。</returns>
<param name="rank">数组的维数。此数量必须小于等于 32。</param>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeByRefType">
<returns>表示作为 ref 参数（在 Visual Basic 中为 ByRef 参数）传递时的当前类型的 <see cref="T:System.Type"/> 对象。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakePointerType">
<returns>表示指向当前类型的指针的 <see cref="T:System.Type"/> 对象。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Module">
<summary>检索包含此 <see cref="T:System.Reflection.Emit.EnumBuilder"/> 定义的动态模块。</summary>
<returns>只读。包含此 <see cref="T:System.Reflection.Emit.EnumBuilder"/> 定义的动态模块。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Name">
<summary>返回该枚举的名称。</summary>
<returns>只读。该枚举的名称。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Namespace">
<summary>返回该枚举的命名空间。</summary>
<returns>只读。该枚举的命名空间。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.ReflectedType">
<summary>返回用于获取该 <see cref="T:System.Reflection.Emit.EnumBuilder"/> 的类型。</summary>
<returns>只读。用于获取该 <see cref="T:System.Reflection.Emit.EnumBuilder"/> 的类型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
<summary>[SECURITY CRITICAL] 使用指定的自定义属性 Blob 设置自定义属性。</summary>
<param name="con">自定义属性的构造函数。 </param>
<param name="binaryAttribute">表示属性的字节 Blob。 </param>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
<summary>使用自定义属性生成器设置自定义属性。</summary>
<param name="customBuilder">定义自定义属性的帮助器类的实例。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="con"/> 为 null。 </exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.TypeHandle">
<summary>检索该枚举的内部句柄。</summary>
<returns>只读。该枚举的内部句柄。</returns>
<exception cref="T:System.NotSupportedException">目前不支持此属性。 </exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.TypeToken">
<summary>获取该枚举的内部元数据类型标记。</summary>
<returns>该枚举的类型标记。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.UnderlyingField">
<summary>获取该枚举的基础字段。</summary>
<returns>该枚举的基础字段。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.UnderlyingSystemType">
<summary>获取该枚举的基础系统类型。</summary>
<returns>返回基础系统类型。</returns>
    </member>
    <member name="T:System.Reflection.Emit.EventBuilder">
<summary>定义类的事件。</summary>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
<summary>添加与该事件关联的“其他”方法之一。“其他”方法是与该事件关联的、除了“开”(on) 和“引发”(raise) 方法以外的方法。可以多次调用此函数，以添加一样多的“其他”方法。</summary>
<param name="mdBuilder">一个表示另一个方法的 MethodBuilder 对象。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="mdBuilder"/> 为 null。 </exception>
      <exception cref="T:System.InvalidOperationException">
已对封闭类型调用了 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/>。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.GetEventToken">
<summary>返回该事件的标记。</summary>
<returns>返回该事件的 EventToken。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetAddOnMethod(System.Reflection.Emit.MethodBuilder)">
<summary>设置用于预订该事件的方法。</summary>
<param name="mdBuilder">MethodBuilder 对象，表示用于预订该事件的方法。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="mdBuilder"/> 为 null。 </exception>
      <exception cref="T:System.InvalidOperationException">
已对封闭类型调用了 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/>。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
<summary>[SECURITY CRITICAL] 使用指定的自定义属性 Blob 设置自定义属性。</summary>
<param name="con">自定义属性的构造函数。 </param>
<param name="binaryAttribute">表示属性的字节 Blob。 </param>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
<summary>使用自定义属性生成器设置自定义属性。</summary>
<param name="customBuilder">说明自定义属性的帮助器类的实例。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="con"/> 为 null。 </exception>
      <exception cref="T:System.InvalidOperationException">
已对封闭类型调用了 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/>。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetRaiseMethod(System.Reflection.Emit.MethodBuilder)">
<summary>设置用于引发该事件的方法。</summary>
<param name="mdBuilder">MethodBuilder 对象，表示用于引发该事件的方法。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="mdBuilder"/> 为 null。 </exception>
      <exception cref="T:System.InvalidOperationException">
已对封闭类型调用了 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/>。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetRemoveOnMethod(System.Reflection.Emit.MethodBuilder)">
<summary>设置用于取消预订该事件的方法。</summary>
<param name="mdBuilder">MethodBuilder 对象，表示用于取消预订该事件的方法。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="mdBuilder"/> 为 null。 </exception>
      <exception cref="T:System.InvalidOperationException">
已对封闭类型调用了 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/>。 </exception>
    </member>
    <member name="T:System.Reflection.Emit.EventToken">
<summary>表示由元数据返回以表示某事件的 Token。</summary>
    </member>
    <member name="F:System.Reflection.Emit.EventToken.Empty">
<summary><see cref="P:System.Reflection.Emit.EventToken.Token"/> 值为 0 的默认 EventToken。</summary>
    </member>
    <member name="M:System.Reflection.Emit.EventToken.Equals(System.Object)">
<summary>检查给定对象是否为 EventToken 的实例且等于此实例。</summary>
<returns>如果 <paramref name="obj"/> 是 EventToken 的实例并等于当前实例，则返回 true；否则返回 false。</returns>
<param name="obj">要与该实例进行比较的对象。 </param>
    </member>
    <member name="M:System.Reflection.Emit.EventToken.Equals(System.Reflection.Emit.EventToken)">
<summary>指示当前实例是否等于指定的 <see cref="T:System.Reflection.Emit.EventToken"/>。</summary>
<returns>如果 <paramref name="obj"/> 的值等于当前实例的值，则为 true；否则为 false。</returns>
<param name="obj">要与当前实例进行比较的 <see cref="T:System.Reflection.Emit.EventToken"/>。</param>
    </member>
    <member name="M:System.Reflection.Emit.EventToken.GetHashCode">
<summary>生成此事件的哈希代码。</summary>
<returns>返回此实例的哈希代码。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EventToken.op_Equality(System.Reflection.Emit.EventToken,System.Reflection.Emit.EventToken)">
<summary>指示两个 <see cref="T:System.Reflection.Emit.EventToken"/> 结构是否相等。</summary>
<returns>如果 <paramref name="a"/> 等于 <paramref name="b"/>，则为 true；否则为 false。</returns>
<param name="a">要与 <paramref name="b"/> 进行比较的 <see cref="T:System.Reflection.Emit.EventToken"/>。</param>
<param name="b">要与 <paramref name="a"/> 进行比较的 <see cref="T:System.Reflection.Emit.EventToken"/>。</param>
    </member>
    <member name="M:System.Reflection.Emit.EventToken.op_Inequality(System.Reflection.Emit.EventToken,System.Reflection.Emit.EventToken)">
<summary>指示两个 <see cref="T:System.Reflection.Emit.EventToken"/> 结构是否不相等。</summary>
<returns>如果 <paramref name="a"/> 不等于 <paramref name="b"/>，则为 true；否则为 false。</returns>
<param name="a">要与 <paramref name="b"/> 进行比较的 <see cref="T:System.Reflection.Emit.EventToken"/>。</param>
<param name="b">要与 <paramref name="a"/> 进行比较的 <see cref="T:System.Reflection.Emit.EventToken"/>。</param>
    </member>
    <member name="P:System.Reflection.Emit.EventToken.Token">
<summary>检索此事件的元数据标记。</summary>
<returns>只读。检索此事件的元数据标记。</returns>
    </member>
    <member name="T:System.Reflection.Emit.FieldBuilder">
<summary>定义并表示字段。无法继承此类。</summary>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Attributes">
<summary>获取该字段的属性。 </summary>
<returns>该字段的属性。</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.DeclaringType">
<summary>获取对声明该字段的类型的 <see cref="T:System.Type"/> 对象的引用。 </summary>
<returns>对声明该字段的类型的 <see cref="T:System.Type"/> 对象的引用。</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.FieldHandle">
<summary>获取该字段的内部元数据句柄。 </summary>
<returns>该字段的内部元数据句柄。</returns>
<exception cref="T:System.NotSupportedException">不支持此方法。 </exception>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.FieldType">
<summary>获取 <see cref="T:System.Type"/> 对象，该对象表示此字段的类型。 </summary>
<returns><see cref="T:System.Type"/> 对象，表示该字段的类型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Boolean)">
<summary>返回为该字段定义的所有自定义属性。</summary>
<returns>类型 <see cref="T:System.Object"/> 的数组，该类型对象表示由此 <see cref="T:System.Reflection.Emit.FieldBuilder"/> 实例表示的构造函数的所有自定义属性。</returns>
<param name="inherit">控制来自基类的自定义属性的继承性。 </param>
<exception cref="T:System.NotSupportedException">不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Type,System.Boolean)">
<summary>返回为该字段定义的、由给定类型标识的所有自定义属性。</summary>
<returns>类型 <see cref="T:System.Object"/> 的数组，该类型对象表示由此 <see cref="T:System.Reflection.Emit.FieldBuilder"/> 实例表示的构造函数的所有自定义属性。</returns>
<param name="attributeType">自定义属性类型。 </param>
<param name="inherit">控制来自基类的自定义属性的继承性。 </param>
<exception cref="T:System.NotSupportedException">不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetToken">
<summary>返回表示该字段的标记。</summary>
<returns>返回表示该字段的标记的 <see cref="T:System.Reflection.Emit.FieldToken"/> 对象。</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetValue(System.Object)">
<summary>检索给定对象支持的字段值。</summary>
<returns>包含此实例反映的字段值的 <see cref="T:System.Object"/>。</returns>
<param name="obj">在其上访问该字段的对象。 </param>
<exception cref="T:System.NotSupportedException">不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.IsDefined(System.Type,System.Boolean)">
<summary>获取一个值，该值指示是否在字段上定义了具有指定类型的属性。</summary>
<returns>如果该字段上定义了一个或多个 <paramref name="attributeType"/> 实例，则为 true；否则为 false。</returns>
<param name="attributeType">属性的类型。 </param>
<param name="inherit">控制来自基类的自定义属性的继承性。 </param>
<exception cref="T:System.NotSupportedException">目前不支持此方法。使用 <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)"/> 检索该字段，并且对返回的 <see cref="T:System.Reflection.FieldInfo"/> 调用 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)"/>。 </exception>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Module">
<summary>获取在其中定义包含此字段的类型的模块。</summary>
<returns><see cref="T:System.Reflection.Module"/>，表示在其中定义此字段的动态模块。</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Name">
<summary>获取此字段的名称。 </summary>
<returns>包含该字段的名称的 <see cref="T:System.String"/>。</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.ReflectedType">
<summary>获取对从中获取该对象的 <see cref="T:System.Type"/> 对象的引用。 </summary>
<returns>对从中获取该实例的 <see cref="T:System.Type"/> 对象的引用。</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetConstant(System.Object)">
<summary>设置该字段的默认值。</summary>
<param name="defaultValue">该字段的新默认值。 </param>
<exception cref="T:System.InvalidOperationException">已经使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/> 创建了该包含类型。 </exception>
<exception cref="T:System.ArgumentException">该字段不是受支持类型之一。-或- <paramref name="defaultValue"/> 类型与该字段类型不匹配。-或- 该字段的类型为 <see cref="T:System.Object"/> 或其他引用类型，并且 <paramref name="defaultValue"/> 不为 null，该值无法赋给引用类型。</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
<summary>[SECURITY CRITICAL] 使用指定的自定义属性 Blob 设置自定义属性。</summary>
<param name="con">自定义属性的构造函数。 </param>
<param name="binaryAttribute">表示属性的字节 Blob。 </param>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
<summary>使用自定义属性生成器设置自定义属性。</summary>
<param name="customBuilder">定义自定义属性的帮助器类的实例。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="con"/> 为 null。 </exception>
<exception cref="T:System.InvalidOperationException">此字段的父类型是完整的。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetOffset(System.Int32)">
<summary>[SECURITY CRITICAL] 指定字段布局。</summary>
<param name="iOffset">包含该字段的类型内的字段偏移量。 </param>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
<summary>设置给定对象支持的字段值。</summary>
<param name="obj">在其上访问该字段的对象。 </param>
<param name="val">分配给字段的值。 </param>
<param name="invokeAttr">指定所需绑定类型的 IBinder 的成员（例如，IBinder.CreateInstance、IBinder.ExactBinding）。 </param>
<param name="binder">一组使用反射启用绑定、参数类型强制和成员调用的属性。如果联编程序为 null，则使用 IBinder.DefaultBinding。 </param>
<param name="culture">特定区域性的软件首选项。 </param>
<exception cref="T:System.NotSupportedException">不支持此方法。 </exception>
    </member>
    <member name="T:System.Reflection.Emit.FieldToken">
<summary>FieldToken 结构是表示字段的标记的对象表示形式。</summary>
    </member>
    <member name="F:System.Reflection.Emit.FieldToken.Empty">
<summary><see cref="P:System.Reflection.Emit.FieldToken.Token"/>值为 0 的默认 FieldToken。</summary>
    </member>
    <member name="M:System.Reflection.Emit.FieldToken.Equals(System.Object)">
<summary>确定对象是否为 FieldToken 的实例且等于该实例。</summary>
<returns>如果 <paramref name="obj"/> 是 FieldToken 的实例并等于此对象，则返回 true；否则返回 false。</returns>
<param name="obj">与FieldToken进行比较的对象。 </param>
    </member>
    <member name="M:System.Reflection.Emit.FieldToken.Equals(System.Reflection.Emit.FieldToken)">
<summary>指示当前实例是否等于指定的<see cref="T:System.Reflection.Emit.FieldToken"/>。</summary>
<returns>如果 <paramref name="obj"/> 的值等于当前实例的值，则为 true；否则为 false。</returns>
<param name="obj">要与当前实例进行比较的<see cref="T:System.Reflection.Emit.FieldToken"/>。</param>
    </member>
    <member name="M:System.Reflection.Emit.FieldToken.GetHashCode">
<summary>生成此字段的哈希代码。</summary>
<returns>返回此实例的哈希代码。</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldToken.op_Equality(System.Reflection.Emit.FieldToken,System.Reflection.Emit.FieldToken)">
<summary>指示两个 <see cref="T:System.Reflection.Emit.FieldToken"/> 结构是否相等。</summary>
<returns>如果 <paramref name="a"/> 等于 <paramref name="b"/>，则为 true；否则为 false。</returns>
<param name="a">要与 <paramref name="b"/> 进行比较的 <see cref="T:System.Reflection.Emit.FieldToken"/>。</param>
<param name="b">要与 <paramref name="a"/> 进行比较的 <see cref="T:System.Reflection.Emit.FieldToken"/>。</param>
    </member>
    <member name="M:System.Reflection.Emit.FieldToken.op_Inequality(System.Reflection.Emit.FieldToken,System.Reflection.Emit.FieldToken)">
<summary>指示两个 <see cref="T:System.Reflection.Emit.FieldToken"/> 结构是否不相等。</summary>
<returns>如果 <paramref name="a"/> 不等于 <paramref name="b"/>，则为 true；否则为 false。</returns>
<param name="a">要与 <paramref name="b"/> 进行比较的 <see cref="T:System.Reflection.Emit.FieldToken"/>。</param>
<param name="b">要与 <paramref name="a"/> 进行比较的 <see cref="T:System.Reflection.Emit.FieldToken"/>。</param>
    </member>
    <member name="P:System.Reflection.Emit.FieldToken.Token">
<summary>检索该字段的元数据标记。</summary>
<returns>只读。检索该字段的元数据标记。</returns>
    </member>
    <member name="T:System.Reflection.Emit.FlowControl">
<summary>描述指令如何改变控制流。</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Branch">
<summary>分支指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Break">
<summary>中断指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Call">
<summary>调用指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Cond_Branch">
<summary>条件分支指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Meta">
<summary>提供有关后面的指令的信息。例如，Reflection.Emit.Opcodes 的 Unaligned 指令具有 FlowControl.Meta 并且指定后面的指针指令可能是不对齐的。</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Next">
<summary>正常的控制流。</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Return">
<summary>返回指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Throw">
<summary>异常引发指令。</summary>
    </member>
    <member name="T:System.Reflection.Emit.GenericTypeParameterBuilder">
<summary>为动态定义的泛型类型与方法定义和创建泛型类型参数。无法继承此类。 </summary>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Assembly">
<summary>获取一个表示动态程序集的<see cref="T:System.Reflection.Assembly"/>对象，该动态程序集包含当前类型参数所属的泛型类型定义。</summary>
<returns>一个表示动态程序集的 <see cref="T:System.Reflection.Assembly"/> 对象，该动态程序集包含当前类型参数所属的泛型类型定义。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName">
<summary>在所有情况下均获取 null 值。</summary>
<returns>在所有情况下均为 null 引用（在 Visual Basic 中为 Nothing）。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType">
<summary>获取当前泛型类型参数的基类型约束。</summary>
<returns>为一个表示泛型类型参数的基类型约束的 <see cref="T:System.Type"/> 对象，或者为 null（如果类型参数没有基类型约束）。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters">
<summary>在所有情况下均获取 true。</summary>
<returns>在任何情况下均为 true。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod">
<summary>如果当前 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder"/> 表示泛型方法的一个类型参数，获取一个表示声明方法的 <see cref="T:System.Reflection.MethodInfo"/>。</summary>
<returns>如果当前 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder"/> 表示泛型方法的一个类型参数，则为一个表示声明方法的 <see cref="T:System.Reflection.MethodInfo"/>；否则为 null。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType">
<summary>获取泛型类型参数所属的泛型类型定义或泛型方法定义。</summary>
<returns>如果类型参数属于某个泛型类型，则为表示该泛型类型的 <see cref="T:System.Type"/> 对象；如果类型参数属于某个泛型方法，则为表示声明该泛型方法的类型的 <see cref="T:System.Type"/> 对象。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)">
<summary>测试给定的对象是否为 EventToken 的实例，并检查它是否与当前实例相等。</summary>
<returns>如果 <paramref name="o"/> 是 EventToken 的实例并等于当前实例，则返回 true；否则返回 false。</returns>
<param name="o">要与当前实例进行比较的对象。</param>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.FullName">
<summary>在所有情况下均获取 null 值。</summary>
<returns>在所有情况下均为 null 引用（在 Visual Basic 中为 Nothing）。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition">
<summary>获取类型参数在声明该参数的泛型类型或方法的类型参数列表中的位置。</summary>
<returns>类型参数在声明该参数的泛型类型或方法的类型参数列表中的位置。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)">
<summary>对于不完整的泛型类型参数不支持。</summary>
<returns>对于不完整的泛型类型参数不支持。</returns>
<param name="bindingAttr">不支持。</param>
<exception cref="T:System.NotSupportedException">在所有情况下。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)">
<summary>对于不完整的泛型类型参数不支持。</summary>
<returns>对于不完整的泛型类型参数不支持。</returns>
<param name="inherit">指定是否搜索该成员的继承链以查找这些属性。</param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)">
<summary>对于不完整的泛型类型参数不支持。</summary>
<returns>对于不完整的泛型类型参数不支持。</returns>
<param name="attributeType">要搜索的属性类型。只返回可分配给此类型的属性。</param>
<param name="inherit">指定是否搜索该成员的继承链以查找这些属性。</param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType">
<summary>在所有情况下均引发 <see cref="T:System.NotSupportedException"/>。 </summary>
<returns>由当前的数组类型、指针类型或 ByRef 类型引用的类型；如果当前类型不是数组类型，不是指针类型，且不是通过引用传递的，则为 null。</returns>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
<summary>对于不完整的泛型类型参数不支持。</summary>
<returns>对于不完整的泛型类型参数不支持。</returns>
<param name="name">不支持。</param>
<param name="bindingAttr">不支持。 </param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents">
<summary>对于不完整的泛型类型参数不支持。</summary>
<returns>对于不完整的泛型类型参数不支持。</returns>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)">
<summary>对于不完整的泛型类型参数不支持。</summary>
<returns>对于不完整的泛型类型参数不支持。</returns>
<param name="bindingAttr">不支持。</param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)">
<summary>对于不完整的泛型类型参数不支持。</summary>
<returns>对于不完整的泛型类型参数不支持。</returns>
<param name="name">不支持。</param>
<param name="bindingAttr">不支持。</param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)">
<summary>对于不完整的泛型类型参数不支持。</summary>
<returns>对于不完整的泛型类型参数不支持。</returns>
<param name="bindingAttr">不支持。</param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments">
<summary>对于泛型类型参数无效。</summary>
<returns>对于泛型类型参数无效。</returns>
<exception cref="T:System.InvalidOperationException">在所有情况下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition">
<summary>对于泛型类型参数无效。</summary>
<returns>对于泛型类型参数无效。</returns>
<exception cref="T:System.InvalidOperationException">在所有情况下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode">
<summary>返回当前实例的 32 位整数哈希代码。</summary>
<returns>32 位整数哈希代码。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)">
<summary>对于不完整的泛型类型参数不支持。</summary>
<returns>对于不完整的泛型类型参数不支持。</returns>
<param name="name">接口名。</param>
<param name="ignoreCase">如果搜索时不区分大小写，则为 true；如果搜索时区分大小写，则为 false。</param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)">
<summary>对于不完整的泛型类型参数不支持。</summary>
<returns>对于不完整的泛型类型参数不支持。</returns>
<param name="interfaceType">一个表示接口类型（针对该接口类型检索映射）的 <see cref="T:System.Type"/> 对象。</param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces">
<summary>对于不完整的泛型类型参数不支持。</summary>
<returns>对于不完整的泛型类型参数不支持。</returns>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
<summary>对于不完整的泛型类型参数不支持。</summary>
<returns>对于不完整的泛型类型参数不支持。</returns>
<param name="name">不支持。</param>
<param name="type">不支持。</param>
<param name="bindingAttr">不支持。</param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)">
<summary>对于不完整的泛型类型参数不支持。</summary>
<returns>对于不完整的泛型类型参数不支持。</returns>
<param name="bindingAttr">不支持。</param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)">
<summary>对于不完整的泛型类型参数不支持。</summary>
<returns>对于不完整的泛型类型参数不支持。</returns>
<param name="bindingAttr">不支持。</param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
<summary>对于不完整的泛型类型参数不支持。</summary>
<returns>对于不完整的泛型类型参数不支持。</returns>
<param name="name">不支持。</param>
<param name="bindingAttr">不支持。</param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
<summary>对于不完整的泛型类型参数不支持。</summary>
<returns>对于不完整的泛型类型参数不支持。</returns>
<param name="bindingAttr">不支持。</param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)">
<summary>对于不完整的泛型类型参数不支持。</summary>
<returns>对于不完整的泛型类型参数不支持。</returns>
<param name="bindingAttr">不支持。</param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GUID">
<summary>对于不完整的泛型类型参数不支持。</summary>
<returns>对于不完整的泛型类型参数不支持。</returns>
<exception cref="T:System.NotSupportedException">在所有情况下。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
<summary>对于不完整的泛型类型参数不支持。</summary>
<returns>对于不完整的泛型类型参数不支持。</returns>
<param name="name">不支持。 </param>
<param name="invokeAttr">不支持。</param>
<param name="binder">不支持。</param>
<param name="target">不支持。</param>
<param name="args">不支持。</param>
<param name="modifiers">不支持。</param>
<param name="culture">不支持。</param>
<param name="namedParameters">不支持。</param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)">
<summary>对于不完整的泛型类型参数不支持。</summary>
<returns>对于不完整的泛型类型参数不支持。</returns>
<param name="c">不支持。</param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)">
<summary>对于不完整的泛型类型参数不支持。</summary>
<returns>对于不完整的泛型类型参数不支持。</returns>
<param name="attributeType">不支持。</param>
<param name="inherit">不支持。</param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter">
<summary>在所有情况下均获取 true。</summary>
<returns>在任何情况下均为 true。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType">
<summary>在所有情况下均返回 false。</summary>
<returns>在任何情况下均为 false。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition">
<summary>在任何情况下均获取 false。</summary>
<returns>在任何情况下均为 false。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)">
<summary>对于不完整的泛型类型参数不支持。</summary>
<returns>对于不完整的泛型类型参数不支持。</returns>
<param name="c">不支持。</param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType">
<summary>返回元素类型为泛型类型参数的一维数组的类型。</summary>
<returns>一个表示元素类型为泛型类型参数的一维数组类型的 <see cref="T:System.Type"/> 对象。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
<summary>返回数组的类型，该数组的元素类型为泛型类型参数，且具有指定维数。</summary>
<returns>一个表示数组类型的 <see cref="T:System.Type"/> 对象，该数组的元素类型为泛型类型参数，且具有指定维数。</returns>
<param name="rank">数组的维数。</param>
      <exception cref="T:System.IndexOutOfRangeException">
<paramref name="rank"/> 不是有效的维数。例如，其值小于 1。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType">
<summary>返回一个表示当前泛型类型参数的 <see cref="T:System.Type"/> 对象（作为引用参数传递时）。</summary>
<returns>一个表示当前泛型类型参数的 <see cref="T:System.Type"/> 对象（作为引用参数传递时）。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])">
<summary>对于不完整泛型类型参数无效。</summary>
<returns>此方法对于不完整泛型类型参数无效。</returns>
<param name="typeArguments">类型参数数组。</param>
<exception cref="T:System.InvalidOperationException">在所有情况下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType">
<summary>返回一个 <see cref="T:System.Type"/> 对象，该对象表示指向当前泛型类型参数的指针。</summary>
<returns>一个表示指向当前泛型类型参数的指针的 <see cref="T:System.Type"/> 对象。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Module">
<summary>获取包含泛型类型参数的动态模块。</summary>
<returns>一个 <see cref="T:System.Reflection.Module"/> 对象，该对象表示包含泛型类型参数的动态模块。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Name">
<summary>获取泛型类型参数的名称。</summary>
<returns>泛型类型参数的名称。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Namespace">
<summary>在所有情况下均获取 null 值。</summary>
<returns>在所有情况下均为 null 引用（在 Visual Basic 中为 Nothing）。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType">
<summary>获取用于获取 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder"/> 的 <see cref="T:System.Type"/> 对象。</summary>
<returns>用于获取 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder"/> 的 <see cref="T:System.Type"/> 对象。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
<summary>设置某类型为了替换为类型参数而必须继承的基类型。</summary>
<param name="baseTypeConstraint">任何将替换为类型参数的类型必须继承的<see cref="T:System.Type"/>。</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
<summary>[SECURITY CRITICAL] 使用指定的自定义属性 Blob 设置自定义属性。</summary>
<param name="con">自定义属性的构造函数。</param>
<param name="binaryAttribute">表示属性的字节 Blob。</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
<summary>使用自定义属性生成器设置自定义属性。</summary>
<param name="customBuilder">定义自定义属性的帮助器类的实例。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="customBuilder"/> 为 null。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
<summary>设置泛型参数的方差特征和特殊约束，例如无参数构造函数约束。</summary>
<param name="genericParameterAttributes">一个表示泛型类型参数的方差特征和特殊约束的 <see cref="T:System.Reflection.GenericParameterAttributes"/> 值的按位组合。</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
<summary>设置某类型为了替换为类型参数而必须实现的接口。 </summary>
<param name="interfaceConstraints">一个 <see cref="T:System.Type"/> 对象的数组，这些对象表示某类型为了替换为类型参数而必须实现的接口。  </param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.ToString">
<summary>返回当前泛型类型参数的字符串表示形式。</summary>
<returns>包含泛型类型参数名称的字符串。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle">
<summary>对于不完整的泛型类型参数不支持。</summary>
<returns>对于不完整的泛型类型参数不支持。</returns>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType">
<summary>获取当前泛型类型参数。</summary>
<returns>当前 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder"/> 对象。</returns>
    </member>
    <member name="T:System.Reflection.Emit.ILGenerator">
<summary>生成 Microsoft 中间语言 (MSIL) 指令。</summary>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">
<summary>开始 Catch 块。</summary>
<param name="exceptionType">被捕获的异常的类型。 </param>
<exception cref="T:System.ArgumentException">Catch 块在已筛选的异常中。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="exceptionType"/>为 null，并且异常筛选器块没有返回一个值，该值指示在找到此 Catch 块之前一直运行 Finally 块。 </exception>
<exception cref="T:System.NotSupportedException">要生成的 Microsoft 中间语言 (MSIL) 当前不在异常块中。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">
<summary>开始已筛选异常的异常块。</summary>
<exception cref="T:System.NotSupportedException">要生成的 Microsoft 中间语言 (MSIL) 当前不在异常块中。-或- 此 <see cref="T:System.Reflection.Emit.ILGenerator"/> 属于某个 <see cref="T:System.Reflection.Emit.DynamicMethod"/>。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginExceptionBlock">
<summary>开始非筛选异常的异常块。</summary>
<returns>块结尾的标签。这将使您停在正确的位置执行 Finally 块或完成 Try 块。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginFaultBlock">
<summary>在 Microsoft 中间语言 (MSIL) 流中开始一个异常错误块。</summary>
<exception cref="T:System.NotSupportedException">生成的 MSIL 当前不在异常块中。-或- 此 <see cref="T:System.Reflection.Emit.ILGenerator"/> 属于某个 <see cref="T:System.Reflection.Emit.DynamicMethod"/>。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginFinallyBlock">
<summary>在 Microsoft 中间语言 (MSIL) 指令流中开始一个 Finally 块。</summary>
<exception cref="T:System.NotSupportedException">生成的 MSIL 当前不在异常块中。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginScope">
<summary>开始词法范围。</summary>
<exception cref="T:System.NotSupportedException">此 <see cref="T:System.Reflection.Emit.ILGenerator"/> 属于某个 <see cref="T:System.Reflection.Emit.DynamicMethod"/>。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
<summary>声明指定类型的局部变量。</summary>
<returns>已声明的局部变量。</returns>
<param name="localType">局部变量的类型。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="localType"/> 为 null。 </exception>
<exception cref="T:System.InvalidOperationException">包含类型已由 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/> 方法创建。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
<summary>声明指定类型的局部变量，还可以选择固定该变量所引用的对象。</summary>
<returns>局部变量。</returns>
<param name="localType">局部变量的类型。</param>
<param name="pinned">如果要将对象固定在内存中，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="localType"/> 为 null。 </exception>
<exception cref="T:System.InvalidOperationException">包含类型已由<see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/>方法创建。-或- 封闭方法的方法体已由<see cref="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)"/>方法创建。 </exception>
<exception cref="T:System.NotSupportedException">与此 <see cref="T:System.Reflection.Emit.ILGenerator"/> 关联的方法不由 <see cref="T:System.Reflection.Emit.MethodBuilder"/> 来表示。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DefineLabel">
<summary>声明新标签。</summary>
<returns>可用作分支标记的新标签。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">
<summary>将指定的指令放到指令流上。</summary>
<param name="opcode">要放到流上的 Microsoft 中间语言 (MSIL) 指令。 </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">
<summary>将指定的指令和字符参数放在 Microsoft 中间语言 (MSIL) 指令流上。</summary>
<param name="opcode">要放到流上的 MSIL 指令。 </param>
<param name="arg">紧接着该指令推到流中的字符参数。 </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)">
<summary>将指定的指令和数值参数放在 Microsoft 中间语言 (MSIL) 指令流上。</summary>
<param name="opcode">要放到流上的 MSIL 指令。 </param>
<param name="arg">紧接着该指令推到流中的数字参数。 </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">
<summary>将指定的指令和数值参数放在 Microsoft 中间语言 (MSIL) 指令流上。</summary>
<param name="opcode">要发到流中的 MSIL 指令。 </param>
<param name="arg">紧接着该指令推到流中的 Int 参数。 </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)">
<summary>将指定的指令和数值参数放在 Microsoft 中间语言 (MSIL) 指令流上。</summary>
<param name="opcode">要放到流上的 MSIL 指令。 </param>
<param name="arg">紧接着该指令推到流中的数字参数。 </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)">
<summary>将指定的指令和数值参数放在 Microsoft 中间语言 (MSIL) 指令流上。</summary>
<param name="opcode">要放到流上的 MSIL 指令。 </param>
<param name="arg">紧接着该指令推到流中的数字参数。 </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
<summary>将指定构造函数的指定指令和元数据标记放到 Microsoft 中间语言 (MSIL) 指令流上。</summary>
<param name="opcode">要发到流中的 MSIL 指令。 </param>
<param name="con"><paramref name="opcode"/> 的目标构造函数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="con"/> 为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
<summary>将指定的指令放在 Microsoft 中间语言 (MSIL) 流上，并留出在完成修正时加上标签所需的空白。</summary>
<param name="opcode">要发到流中的 MSIL 指令。 </param>
<param name="label">分支到的标签。 </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
<summary>将指定的指令放在 Microsoft 中间语言 (MSIL) 流上，并留出在完成修正时加上标签所需的空白。</summary>
<param name="opcode">要发到流中的 MSIL 指令。 </param>
<param name="labels">构成跳转表的标签对象的数组。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="labels"/> 为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
<summary>将指定的指令放到 Microsoft 中间语言 (MSIL) 流上，后跟给定局部变量的索引。</summary>
<param name="opcode">要发到流中的 MSIL 指令。 </param>
<param name="local">局部变量。 </param>
<exception cref="T:System.ArgumentException"><paramref name="local"/>参数的父方法与此 <see cref="T:System.Reflection.Emit.ILGenerator"/> 关联的方法不匹配。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="local"/> 为 null。 </exception>
      <exception cref="T:System.InvalidOperationException">
<paramref name="opcode"/> 是单字节指令，并且 <paramref name="local"/> 表示索引大于 Byte.MaxValue 的局部变量。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
<summary>将指定字段的指定指令和元数据标记放到 Microsoft 中间语言 (MSIL) 指令流上。</summary>
<param name="opcode">要发到流中的 MSIL 指令。 </param>
<param name="field"><paramref name="opcode"/> 的目标的字段。 </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
<summary>将指定的指令放到 Microsoft 中间语言 (MSIL) 流上，后跟给定方法的元数据标记。</summary>
<param name="opcode">要发到流中的 MSIL 指令。 </param>
<param name="meth"><paramref name="opcode"/> 的目标的方法。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="meth"/> 为 null。 </exception>
      <exception cref="T:System.NotSupportedException">
<paramref name="meth"/> 为泛型方法，其 <see cref="P:System.Reflection.MethodInfo.IsGenericMethodDefinition"/> 属性为 false。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)">
<summary>将指定的指令和字符参数放在 Microsoft 中间语言 (MSIL) 指令流上。</summary>
<param name="opcode">要放到流上的 MSIL 指令。 </param>
<param name="arg">紧接着该指令推到流中的字符参数。 </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)">
<summary>将指定的指令和数值参数放在 Microsoft 中间语言 (MSIL) 指令流上。</summary>
<param name="opcode">要放到流上的 MSIL 指令。 </param>
<param name="arg">紧接着该指令推到流中的 Single 参数。 </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)">
<summary>将指定的指令放到 Microsoft 中间语言 (MSIL) 流上，后跟给定字符串的元数据标记。</summary>
<param name="opcode">要发到流中的 MSIL 指令。 </param>
<param name="str"><paramref name="opcode"/> 的目标的字符串。 </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">
<summary>将指定的指令放到 Microsoft 中间语言 (MSIL) 流上，后跟给定类型的元数据标记。</summary>
<param name="opcode">要放到流上的 MSIL 指令。 </param>
<param name="cls"><paramref name="opcode"/>的目标的类型。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="cls"/> 为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
<summary>将 call 或 callvirt 指令放到 Microsoft 中间语言 (MSIL) 流上，以便调用 varargs 方法。</summary>
<param name="opcode">要发到流中的 MSIL 指令。必须为 <see cref="F:System.Reflection.Emit.OpCodes.Call"/>、<see cref="F:System.Reflection.Emit.OpCodes.Callvirt"/> 或 <see cref="F:System.Reflection.Emit.OpCodes.Newobj"/>。</param>
<param name="methodInfo">要调用的 varargs 方法。 </param>
<param name="optionalParameterTypes">如果该方法是 varargs 方法，则为可选参数的类型；否则为 null。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="opcode"/> 未指定方法调用。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="methodInfo"/> 为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)">
<summary>发出用给定局部变量调用<see cref="Overload:System.Console.WriteLine"/>所需的 Microsoft 中间语言 (MSIL)。</summary>
<param name="localBuilder">其值要被写到控制台的局部变量。 </param>
<exception cref="T:System.ArgumentException"><paramref name="localBuilder"/> 的类型为 <see cref="T:System.Reflection.Emit.TypeBuilder"/> 或 <see cref="T:System.Reflection.Emit.EnumBuilder"/>，这两种类型均不受支持。-或- 不存在接受 <paramref name="localBuilder"/> 的类型的 <see cref="Overload:System.Console.WriteLine"/> 重载。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="localBuilder"/> 为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)">
<summary>发出用给定字段调用 <see cref="Overload:System.Console.WriteLine"/> 所需的 Microsoft 中间语言 (MSIL)。</summary>
<param name="fld">其值要被写到控制台的字段。 </param>
<exception cref="T:System.ArgumentException">不存在接受指定字段类型的 <see cref="Overload:System.Console.WriteLine"/> 方法重载。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="fld"/> 为 null。 </exception>
<exception cref="T:System.NotSupportedException">字段的类型为 <see cref="T:System.Reflection.Emit.TypeBuilder"/> 或 <see cref="T:System.Reflection.Emit.EnumBuilder"/>，这两种类型均不受支持。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)">
<summary>发出 Microsoft 中间语言 (MSIL) 以使用字符串调用<see cref="Overload:System.Console.WriteLine"/>。</summary>
<param name="value">要打印的字符串。 </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EndExceptionBlock">
<summary>结束异常块。</summary>
<exception cref="T:System.InvalidOperationException">结束异常块在代码流中的意外位置出现。 </exception>
<exception cref="T:System.NotSupportedException">要生成的 Microsoft 中间语言 (MSIL) 当前不在异常块中。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EndScope">
<summary>结束词法范围。</summary>
<exception cref="T:System.NotSupportedException">此 <see cref="T:System.Reflection.Emit.ILGenerator"/> 属于某个 <see cref="T:System.Reflection.Emit.DynamicMethod"/>。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)">
<summary>用给定标签标记 Microsoft 中间语言 (MSIL) 流的当前位置。</summary>
<param name="loc">为其设置索引的标签。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="loc"/> 表示标签数组中的无效索引。-或- 已定义了 <paramref name="loc"/> 的索引。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>在 Microsoft 中间语言 (MSIL) 流中标记序列点。</summary>
<param name="document">为其定义序列点的文档。 </param>
<param name="startLine">序列点开始的行。 </param>
<param name="startColumn">序列点开始的行中的列。 </param>
<param name="endLine">序列点结束的行。 </param>
<param name="endColumn">序列点结束的行中的列。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startLine"/> 或 <paramref name="endLine"/> 为 &lt;= 0。 </exception>
<exception cref="T:System.NotSupportedException">此 <see cref="T:System.Reflection.Emit.ILGenerator"/> 属于某个 <see cref="T:System.Reflection.Emit.DynamicMethod"/>。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)">
<summary>发出指令以引发异常。</summary>
<param name="excType">要引发的异常类型的类。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="excType"/> 不是 <see cref="T:System.Exception"/> 类或 <see cref="T:System.Exception"/> 的派生类。-或- 此类型没有默认的构造函数。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="excType"/> 为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)">
<summary>指定用于计算当前活动词法范围的局部变量和监视值的命名空间。</summary>
<param name="usingNamespace">用于计算当前活动词法范围的局部变量和监视值的命名空间。 </param>
<exception cref="T:System.ArgumentException"><paramref name="usingNamespace"/> 的长度为零。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="usingNamespace"/> 为 null。 </exception>
<exception cref="T:System.NotSupportedException">此 <see cref="T:System.Reflection.Emit.ILGenerator"/> 属于某个 <see cref="T:System.Reflection.Emit.DynamicMethod"/>。</exception>
    </member>
    <member name="T:System.Reflection.Emit.Label">
<summary>表示指令流中的标签。Label 与 <see cref="T:System.Reflection.Emit.ILGenerator"/> 类一起使用。 </summary>
    </member>
    <member name="M:System.Reflection.Emit.Label.Equals(System.Object)">
<summary>检查给定对象是否为 Label 的实例且等于此实例。</summary>
<returns>如果 <paramref name="obj"/> 是 Labe 的实例并等于此对象，则返回 true；否则返回 false。</returns>
<param name="obj">与 Label 实例比较的对象。 </param>
    </member>
    <member name="M:System.Reflection.Emit.Label.Equals(System.Reflection.Emit.Label)">
<summary>指示当前实例是否等于指定的 <see cref="T:System.Reflection.Emit.Label"/>。</summary>
<returns>如果 <paramref name="obj"/> 的值等于当前实例的值，则为 true；否则为 false。</returns>
<param name="obj">要与当前实例进行比较的 <see cref="T:System.Reflection.Emit.Label"/>。</param>
    </member>
    <member name="M:System.Reflection.Emit.Label.GetHashCode">
<summary>生成此实例的哈希代码。</summary>
<returns>返回此实例的哈希代码。</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.op_Equality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)">
<summary>指示两个<see cref="T:System.Reflection.Emit.Label"/>结构是否相等。</summary>
<returns>如果 <paramref name="a"/> 等于 <paramref name="b"/>，则为 true；否则为 false。</returns>
<param name="a">要与 <paramref name="b"/> 进行比较的 <see cref="T:System.Reflection.Emit.Label"/>。</param>
<param name="b">要与 <paramref name="a"/> 进行比较的 <see cref="T:System.Reflection.Emit.Label"/>。</param>
    </member>
    <member name="M:System.Reflection.Emit.Label.op_Inequality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)">
<summary>指示两个 <see cref="T:System.Reflection.Emit.Label"/> 结构是否不相等。</summary>
<returns>如果 <paramref name="a"/> 不等于 <paramref name="b"/>，则为 true；否则为 false。</returns>
<param name="a">要与 <paramref name="b"/> 进行比较的 <see cref="T:System.Reflection.Emit.Label"/>。</param>
<param name="b">要与 <paramref name="a"/> 进行比较的 <see cref="T:System.Reflection.Emit.Label"/>。</param>
    </member>
    <member name="T:System.Reflection.Emit.LocalBuilder">
<summary>表示方法或构造函数内的局部变量。</summary>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.IsPinned">
<summary>获取一个值，该值指示局部变量引用的对象是否固定于内存中。</summary>
<returns>如果局部变量引用的对象固定于内存中，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.LocalIndex">
<summary>在方法体中获取局部变量的从零开始的索引。</summary>
<returns>一个整数值，表示方法体内局部变量的声明顺序。</returns>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.LocalType">
<summary>获取局部变量的类型。</summary>
<returns>局部变量的 <see cref="T:System.Type"/>。</returns>
    </member>
    <member name="M:System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(System.String)">
<summary>设置局部变量的名称。</summary>
<param name="name">局部变量的名称。 </param>
<exception cref="T:System.InvalidOperationException">已经用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/> 创建了该包含类型。-或- 没有为包含模块定义的符号编写器。 </exception>
<exception cref="T:System.NotSupportedException">此局部变量是使用动态方法（而不是动态类型的方法）来定义的。</exception>
    </member>
    <member name="M:System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(System.String,System.Int32,System.Int32)">
<summary>设置该局部变量的名称和词法范围。</summary>
<param name="name">局部变量的名称。 </param>
<param name="startOffset">局部变量词法范围的开始偏移量。 </param>
<param name="endOffset">局部变量词法范围的结束偏移量。 </param>
<exception cref="T:System.InvalidOperationException">已经用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/> 创建了该包含类型。-或- 没有为包含模块定义的符号编写器。 </exception>
<exception cref="T:System.NotSupportedException">此局部变量是使用动态方法（而不是动态类型的方法）来定义的。</exception>
    </member>
    <member name="T:System.Reflection.Emit.MethodBuilder">
<summary>定义并表示动态类的方法（或构造函数）。</summary>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Attributes">
<summary>获取该方法的属性。</summary>
<returns>该方法的 MethodAttributes 属性。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.CallingConvention">
<summary>返回该方法的调用约定。</summary>
<returns>该方法的调用约定。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ContainsGenericParameters">
<summary>不支持此类型。</summary>
<returns>不支持。</returns>
<exception cref="T:System.NotSupportedException">基类不支持所调用的方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)">
<summary>[SECURITY CRITICAL]使用所提供的 Microsoft 中间语言 (MSIL) 指令的字节数组创建方法体。</summary>
<param name="il">包含有效 MSIL 指令的数组。如果该参数为 null，则将清除此方法体。 </param>
<param name="count">MSIL 数组中的有效字节数。如果 MSIL 为 null，则忽略该值。 </param>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.DeclaringType">
<summary>返回声明此方法的类型。</summary>
<returns>声明此方法的类型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
<summary>设置当前方法的泛型类型参数的数目，指定这些参数的名称，并返回一个 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder"/> 对象的数组，这些对象可用于定义这些参数的约束。</summary>
<returns>一个表示泛型方法的类型参数 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder"/> 对象数组。</returns>
<param name="names">一个字符串数组，这些字符串表示泛型类型参数的名称。</param>
<exception cref="T:System.InvalidOperationException">已为此方法定义了泛型类型参数。-或- 该方法已经完成。-或- 已为当前方法调用了 <see cref="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)"/> 方法。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="names"/> 为 null。-或- <paramref name="names"/> 的一个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="names"/> 为空数组。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
<summary>设置参数属性以及此方法的参数名称或此方法返回值的名称。返回可用于应用自定义属性的 ParameterBuilder。   </summary>
<returns>返回一个 ParameterBuilder 对象，该对象表示此方法的参数或此方法的返回值。</returns>
<param name="position">该参数在参数列表中的位置。为参数编索引，第一个参数从数字 1 开始；数字 0 表示方法的返回值。 </param>
<param name="attributes">参数的参数属性。 </param>
<param name="strParamName">参数名。名称可以为 null 字符串。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">此方法没有参数。-或- <paramref name="position"/> 小于零。-或- <paramref name="position"/> 大于此方法的参数数目。 </exception>
<exception cref="T:System.InvalidOperationException">该包含类型是以前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/> 创建的。-或- 对于当前方法，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod"/> 属性为 true，而 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition"/> 属性为 false。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.Equals(System.Object)">
<summary>确定给定对象是否等于该实例。</summary>
<returns>如果 <paramref name="obj"/> 是 MethodBuilder 的一个实例并且等于此对象，则为 true；否则为 false。</returns>
<param name="obj">与此 MethodBuilder 实例进行比较的对象。 </param>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetBaseDefinition">
<summary>返回方法的基实现。</summary>
<returns>方法的基实现。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)">
<summary>返回为此方法定义的所有自定义属性。</summary>
<returns>表示此方法的所有自定义属性的对象数组。</returns>
<param name="inherit">指定是否搜索该成员的继承链以查找自定义属性。 </param>
<exception cref="T:System.NotSupportedException">目前不支持此方法。使用 <see cref="M:System.Type.GetMethod(System.String)"/> 在已完成的类型上检索此方法，然后对返回的 <see cref="T:System.Reflection.MethodInfo"/> 调用 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)"/>。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)">
<summary>返回由给定类型标识的自定义属性。</summary>
<returns><paramref name="attributeType"/>类型的对象的数组，这些对象表示此方法的属性。</returns>
<param name="attributeType">自定义属性类型。 </param>
<param name="inherit">如果搜索此成员的继承链以查找自定义属性，则为 true；否则为 false。 </param>
<exception cref="T:System.NotSupportedException">目前不支持此方法。使用 <see cref="M:System.Type.GetMethod(System.String)"/> 在已完成的类型上检索此方法，然后对返回的 <see cref="T:System.Reflection.MethodInfo"/> 调用 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)"/>。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetGenericArguments">
<summary>返回一个 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder"/> 对象的数组，这些对象表示方法的类型参数（如果该方法是泛型方法）。</summary>
<returns>如果该方法为泛型方法，则为表示类型参数的 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder"/> 对象的数组；如果该方法不是泛型，则为 null。 </returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition">
<summary>返回此方法。</summary>
<returns><see cref="T:System.Reflection.Emit.MethodBuilder"/> 的当前实例。 </returns>
<exception cref="T:System.InvalidOperationException">当前方法不是泛型。即，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod"/> 属性返回 false。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetHashCode">
<summary>获取该方法的哈希代码。</summary>
<returns>该方法的哈希代码。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetILGenerator">
<summary>为此方法返回具有 64 字节大小的默认 Microsoft 中间语言 (MSIL) 流的 ILGenerator。</summary>
<returns>此方法的一个 ILGenerator 对象。</returns>
<exception cref="T:System.InvalidOperationException">此方法不应有主体，这是由其 <see cref="T:System.Reflection.MethodAttributes"/> 或 <see cref="T:System.Reflection.MethodImplAttributes"/> 标志决定的，例如，它具有 <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl"/> 标志。-或- 此方法是泛型方法，但不是泛型方法定义。即，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod"/> 属性为 true，但 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition"/> 属性为 false。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)">
<summary>为此方法返回具有指定 Microsoft 中间语言 (MSIL) 流大小的 ILGenerator。</summary>
<returns>此方法的一个 ILGenerator 对象。</returns>
<param name="size">MSIL 流的大小，以字节为单位。 </param>
<exception cref="T:System.InvalidOperationException">此方法不应有主体，这是由其 <see cref="T:System.Reflection.MethodAttributes"/> 或 <see cref="T:System.Reflection.MethodImplAttributes"/> 标志决定的，例如，它具有 <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl"/> 标志。-或- 此方法是泛型方法，但不是泛型方法定义。即，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod"/> 属性为 true，但 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition"/> 属性为 false。   </exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags">
<summary>返回此方法的实现标志。</summary>
<returns>此方法的实现标志。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetModule">
<summary>返回对包含此方法的模块的引用。</summary>
<returns>包含此方法的模块。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetParameters">
<summary>返回此方法的参数。</summary>
<returns>表示此方法的参数的 ParameterInfo 对象数组。</returns>
<exception cref="T:System.NotSupportedException">目前不支持此方法。使用 <see cref="M:System.Type.GetMethod(System.String)"/> 在已完成的类型上检索此方法，然后对返回的 <see cref="T:System.Reflection.MethodInfo"/> 调用 GetParameters。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetToken">
<summary>返回表示此方法的标记的 MethodToken。</summary>
<returns>此方法的方法标记。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.InitLocals">
<summary>获取或设置一个布尔值，该值指定此方法中的局部变量是否初始化为零。此属性的默认值为 true。</summary>
<returns>如果应将此方法中的局部变量初始化为零，则为 true；否则为 false。</returns>
<exception cref="T:System.InvalidOperationException">对于当前方法，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod"/> 属性为 true，而 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition"/> 属性为 false。（获取或设置。）</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
<summary>在给定联编程序的约束下，对给定的对象动态调用此实例所反射的方法，并传递指定的参数。</summary>
<returns>包含调用方法的返回值的对象。</returns>
<param name="obj">对其调用指定方法的对象。如果此方法是静态的，则忽略此参数。 </param>
<param name="invokeAttr">这必须是来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志：InvokeMethod、NonPublic 等。 </param>
<param name="binder">一个启用绑定、参数类型强制、成员调用以及通过反射进行 MemberInfo 对象检索的对象。 如果 binder 为 null，则使用默认联编程序。有关详细信息，请参阅 <see cref="T:System.Reflection.Binder"/>。 </param>
<param name="parameters">参数列表。这是一个参数数组，这些参数与要调用的方法的参数具有相同的数目、顺序和类型。如果没有参数，则它应为 null。 </param>
<param name="culture">用于控制类型强制的 <see cref="T:System.Globalization.CultureInfo"/> 的实例。如果这是 null，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo"/>。（请注意，这对于某些转换很必要，例如，从表示 1000 的 <see cref="T:System.String"/> 转换为 <see cref="T:System.Double"/> 值，因为不同的区域性以不同的形式表示 1000。） </param>
<exception cref="T:System.NotSupportedException">目前不支持此方法。使用 <see cref="M:System.Type.GetMethod(System.String)"/> 在已完成的类型上检索此方法，然后使用 <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])"/> 方法；或者对已完成的类型调用 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/>。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)">
<summary>检查是否定义了指定的自定义属性类型。</summary>
<returns>如果定义了指定的自定义属性类型，则为 true；否则为 false。</returns>
<param name="attributeType">自定义属性类型。 </param>
<param name="inherit">指定是否搜索该成员的继承链以查找自定义属性。 </param>
<exception cref="T:System.NotSupportedException">目前不支持此方法。使用 <see cref="M:System.Type.GetMethod(System.String)"/> 在已完成的类型上检索此方法，然后对返回的 <see cref="T:System.Reflection.MethodInfo"/> 调用 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)"/>。 </exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod">
<summary>获取指示该方法是否为泛型方法的值。</summary>
<returns>如果该方法是泛型，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition">
<summary>获取一个值，该值指示当前 <see cref="T:System.Reflection.Emit.MethodBuilder"/> 对象是否表示泛型方法的定义。</summary>
<returns>如果当前 <see cref="T:System.Reflection.Emit.MethodBuilder"/> 对象表示泛型方法的定义，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])">
<summary>返回一个使用指定的泛型类型参数从当前泛型方法定义构造的泛型方法。</summary>
<returns>一个 <see cref="T:System.Reflection.MethodInfo"/>，表示使用指定的泛型类型参数从当前泛型方法定义构造的泛型方法。</returns>
<param name="typeArguments">一个 <see cref="T:System.Type"/> 对象的数组，这些对象表示泛型方法的类型参数。</param>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.MethodHandle">
<summary>检索此方法的内部句柄。使用此句柄访问基础元数据句柄。 </summary>
<returns>此方法的内部句柄。使用此句柄访问基础元数据句柄。</returns>
<exception cref="T:System.NotSupportedException">目前不支持此方法。使用 <see cref="M:System.Type.GetMethod(System.String)"/> 在已完成的类型上检索此方法，然后对返回的 <see cref="T:System.Reflection.MethodInfo"/> 调用 <see cref="P:System.Reflection.MethodBase.MethodHandle"/>。 </exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Module">
<summary>获取当前方法正在其中定义的模块。</summary>
<returns>正在定义的当前 <see cref="T:System.Reflection.MemberInfo"/> 所表示的成员所在的 <see cref="T:System.Reflection.Module"/>。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Name">
<summary>检索此方法的名称。</summary>
<returns>一个包含此方法的简单名称的字符串。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReflectedType">
<summary>检索在反射中用于获取此对象的类。</summary>
<returns>用于获取此方法的类型。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnParameter">
<summary>获取一个 <see cref="T:System.Reflection.ParameterInfo"/> 对象，该对象包含有关方法的返回类型的信息（例如返回类型是否具有自定义修饰符）。 </summary>
<returns>有关返回类型的信息。</returns>
<exception cref="T:System.InvalidOperationException">声明类型尚未创建。</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnType">
<summary>获取由此 <see cref="T:System.Reflection.Emit.MethodBuilder"/> 表示的方法的返回类型。</summary>
<returns>该方法的返回类型。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes">
<summary>返回此方法的返回类型的自定义属性。</summary>
<returns>此方法的返回类型的自定义属性。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
<summary>[SECURITY CRITICAL] 使用指定的自定义属性 Blob 设置自定义属性。</summary>
<param name="con">自定义属性的构造函数。 </param>
<param name="binaryAttribute">表示属性的字节 Blob。 </param>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
<summary>使用自定义属性生成器设置自定义属性。</summary>
<param name="customBuilder">说明自定义属性的帮助器类的实例。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="customBuilder"/> 为 null。 </exception>
<exception cref="T:System.InvalidOperationException">对于当前方法，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod"/> 属性为 true，而 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition"/> 属性为 false。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
<summary>设置此方法的实现标志。</summary>
<param name="attributes">要设置的实现标志。 </param>
<exception cref="T:System.InvalidOperationException">该包含类型是以前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/> 创建的。-或- 对于当前方法，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod"/> 属性为 true，而 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition"/> 属性为 false。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])">
<summary>为方法设置参数的数目和类型。 </summary>
<param name="parameterTypes">表示参数类型的 <see cref="T:System.Type"/> 对象的数组。</param>
<exception cref="T:System.InvalidOperationException">当前方法是泛型方法，但不是泛型方法定义。即，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod"/> 属性为 true，但 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition"/> 属性为 false。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)">
<summary>设置该方法的返回类型。</summary>
<param name="returnType">表示该方法的返回类型的 <see cref="T:System.Type"/> 对象。</param>
<exception cref="T:System.InvalidOperationException">当前方法是泛型方法，但不是泛型方法定义。即，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod"/> 属性为 true，但 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition"/> 属性为 false。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
<summary>设置方法的签名，包括返回类型、参数类型以及该返回类型和参数类型的必需的和可选的自定义修饰符。</summary>
<param name="returnType">该方法的返回类型。</param>
<param name="returnTypeRequiredCustomModifiers">一个类型数组，表示该方法的返回类型的必需的自定义修饰符（如 <see cref="T:System.Runtime.CompilerServices.IsConst"/>）。如果返回类型没有必需的自定义修饰符，请指定 null。</param>
<param name="returnTypeOptionalCustomModifiers">一个类型数组，表示该方法的返回类型的可选自定义修饰符（如 <see cref="T:System.Runtime.CompilerServices.IsConst"/>）。如果返回类型没有可选的自定义修饰符，请指定 null。</param>
<param name="parameterTypes">该方法的参数的类型。</param>
<param name="parameterTypeRequiredCustomModifiers">由类型数组组成的数组。每个类型数组均表示相应参数所必需的自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst"/>。如果某个特定参数没有必需的自定义修饰符，请指定 null，而不指定类型数组。如果没有参数具有必需的自定义修饰符，请指定 null，而不指定由数组构成的数组。</param>
<param name="parameterTypeOptionalCustomModifiers">由类型数组组成的数组。每个类型数组均表示相应参数的可选自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst"/>。如果某个特定参数没有可选的自定义修饰符，请指定 null，而不指定类型数组。如果没有参数具有可选的自定义修饰符，请指定 null，而不指定由数组构成的数组。</param>
<exception cref="T:System.InvalidOperationException">当前方法是泛型方法，但不是泛型方法定义。即，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod"/> 属性为 true，但 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition"/> 属性为 false。</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Signature">
<summary>检索方法的签名。</summary>
<returns>此 MethodBase 实例反映的方法的签名。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.ToString">
<summary>以字符串形式返回此 MethodBuilder 实例。</summary>
<returns>一个字符串，包含此方法的名称、属性、方法签名、异常和局部签名，后跟当前 Microsoft 中间语言 (MSIL) 流。</returns>
    </member>
    <member name="T:System.Reflection.Emit.MethodToken">
<summary>MethodToken 结构是表示方法的标记的对象表示形式。</summary>
    </member>
    <member name="F:System.Reflection.Emit.MethodToken.Empty">
<summary><see cref="P:System.Reflection.Emit.MethodToken.Token"/> 值为 0 的默认 MethodToken。</summary>
    </member>
    <member name="M:System.Reflection.Emit.MethodToken.Equals(System.Object)">
<summary>测试给定对象是否等于此 MethodToken 对象。</summary>
<returns>如果 <paramref name="obj"/> 是 MethodBuilder 的一个实例并且等于此对象，则为 true；否则为 false。</returns>
<param name="obj">与此对象进行比较的对象。 </param>
    </member>
    <member name="M:System.Reflection.Emit.MethodToken.Equals(System.Reflection.Emit.MethodToken)">
<summary>指示当前实例是否等于指定的 <see cref="T:System.Reflection.Emit.MethodToken"/>。</summary>
<returns>如果 <paramref name="obj"/> 的值等于当前实例的值，则为 true；否则为 false。</returns>
<param name="obj">要与当前实例进行比较的 <see cref="T:System.Reflection.Emit.MethodToken"/>。</param>
    </member>
    <member name="M:System.Reflection.Emit.MethodToken.GetHashCode">
<summary>返回为此方法生成的哈希代码。</summary>
<returns>返回此实例的哈希代码。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodToken.op_Equality(System.Reflection.Emit.MethodToken,System.Reflection.Emit.MethodToken)">
<summary>指示两个 <see cref="T:System.Reflection.Emit.MethodToken"/> 结构是否相等。</summary>
<returns>如果 <paramref name="a"/> 等于 <paramref name="b"/>，则为 true；否则为 false。</returns>
<param name="a">要与 <paramref name="b"/> 进行比较的 <see cref="T:System.Reflection.Emit.MethodToken"/>。</param>
<param name="b">要与 <paramref name="a"/> 进行比较的 <see cref="T:System.Reflection.Emit.MethodToken"/>。</param>
    </member>
    <member name="M:System.Reflection.Emit.MethodToken.op_Inequality(System.Reflection.Emit.MethodToken,System.Reflection.Emit.MethodToken)">
<summary>指示两个 <see cref="T:System.Reflection.Emit.MethodToken"/> 结构是否不相等。</summary>
<returns>如果 <paramref name="a"/> 不等于 <paramref name="b"/>，则为 true；否则为 false。</returns>
<param name="a">要与 <paramref name="b"/> 进行比较的 <see cref="T:System.Reflection.Emit.MethodToken"/>。</param>
<param name="b">要与 <paramref name="a"/> 进行比较的 <see cref="T:System.Reflection.Emit.MethodToken"/>。</param>
    </member>
    <member name="P:System.Reflection.Emit.MethodToken.Token">
<summary>返回此方法的元数据标记。</summary>
<returns>只读。返回此方法的元数据标记。</returns>
    </member>
    <member name="T:System.Reflection.Emit.ModuleBuilder">
<summary>定义和表示动态程序集中的模块。</summary>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.Assembly">
<summary>获取定义此 <see cref="T:System.Reflection.Emit.ModuleBuilder"/> 实例的动态程序集。</summary>
<returns>定义了当前动态模块的动态程序集。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions">
<summary>完成此动态模块的全局函数定义和全局数据定义。</summary>
<exception cref="T:System.InvalidOperationException">以前调用过此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
<summary>定义源代码的文档。</summary>
<returns>定义的文档。</returns>
<param name="url">文档的 URL。 </param>
<param name="language">标识文档语言的 GUID。它可以是 <see cref="F:System.Guid.Empty"/>。 </param>
<param name="languageVendor">标识文档语言供应商的 GUID。它可以是 <see cref="F:System.Guid.Empty"/>。 </param>
<param name="documentType">标识文档类型的 GUID。它可以是 <see cref="F:System.Guid.Empty"/>。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="url"/> 为 null。 </exception>
<exception cref="T:System.InvalidOperationException">对不是调试模块的动态模块调用此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)">
<summary>在此模块中定义枚举类型。</summary>
<returns>已定义的枚举。</returns>
<param name="name">枚举类型的全名，包括命名空间。<paramref name="name"/> 不能包含嵌入的 null 值。 </param>
<param name="visibility">枚举的类型属性，仅限于<see cref="F:System.Reflection.TypeAttributes.VisibilityMask"/> 中包含的值。. </param>
<param name="underlyingType">枚举的基础类型。此类型必须是一种内置的整数类型。 </param>
<exception cref="T:System.ArgumentException">提供的属性不是可见性属性。-或- 具有给定名称的枚举存在于此模块的父程序集中。-或- 可见性属性与该枚举的范围不匹配。例如，将 <paramref name="visibility"/> 指定为 <see cref="F:System.Reflection.TypeAttributes.NestedPublic"/>，但是枚举不是嵌套类型。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
<summary>定义一个具有指定的名称、属性、调用约定、返回类型和参数类型的全局方法。</summary>
<returns>已定义的全局方法。</returns>
<param name="name">方法名。<paramref name="name"/> 不能包含嵌入的 null 值。 </param>
<param name="attributes">该方法的属性。<paramref name="attributes"/> 必须包括 <see cref="F:System.Reflection.MethodAttributes.Static"/>。</param>
<param name="callingConvention">该方法的调用约定。 </param>
<param name="returnType">该方法的返回类型。 </param>
<param name="parameterTypes">方法参数的类型。 </param>
<exception cref="T:System.ArgumentException">该方法不是静态的。 也就是说，<paramref name="attributes"/> 不包括 <see cref="F:System.Reflection.MethodAttributes.Static"/>。-或- <see cref="T:System.Type"/> 数组中的一个元素为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
      <exception cref="T:System.InvalidOperationException">
以前调用过 <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions"/>。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
<summary>使用指定的名称、属性、调用约定、返回类型、返回类型的自定义修饰符、参数类型以及参数类型的自定义修饰符定义一个全局方法。</summary>
<returns>已定义的全局方法。</returns>
<param name="name">方法名。<paramref name="name"/> 不能包含嵌入的 null 字符。 </param>
<param name="attributes">该方法的属性。<paramref name="attributes"/> 必须包括 <see cref="F:System.Reflection.MethodAttributes.Static"/>。</param>
<param name="callingConvention">该方法的调用约定。 </param>
<param name="returnType">该方法的返回类型。 </param>
<param name="requiredReturnTypeCustomModifiers">一个表示返回类型必需的自定义修饰符的类型数组，（如 <see cref="T:System.Runtime.CompilerServices.IsConst"/> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed"/>）。如果返回类型没有必需的自定义修饰符，请指定 null。 </param>
<param name="optionalReturnTypeCustomModifiers">一个表示返回类型的可选自定义修饰符的类型数组，（如 <see cref="T:System.Runtime.CompilerServices.IsConst"/> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed"/>）。如果返回类型没有可选的自定义修饰符，请指定 null。 </param>
<param name="parameterTypes">方法参数的类型。 </param>
<param name="requiredParameterTypeCustomModifiers">由类型数组组成的数组。每个类型数组均表示全局方法的相应参数所必需的自定义修饰符。如果某个特定参数没有必需的自定义修饰符，请指定 null，而不指定类型数组。如果全局方法没有参数，或者所有参数都没有必需的自定义修饰符，请指定 null，而不要指定由数组组成的数组。</param>
<param name="optionalParameterTypeCustomModifiers">由类型数组组成的数组。每个类型数组均表示相应参数的可选自定义修饰符。如果某个特定参数没有可选的自定义修饰符，请指定 null，而不指定类型数组。如果全局方法没有参数，或者所有参数都没有可选的自定义修饰符，请指定 null，而不要指定由数组组成的数组。</param>
<exception cref="T:System.ArgumentException">该方法不是静态的。 也就是说，<paramref name="attributes"/> 不包括 <see cref="F:System.Reflection.MethodAttributes.Static"/>。-或- <see cref="T:System.Type"/> 数组中的一个元素为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
<exception cref="T:System.InvalidOperationException">此前已调用 <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions"/> 方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
<summary>定义一个具有指定的名称、属性、返回类型和参数类型的全局方法。</summary>
<returns>已定义的全局方法。</returns>
<param name="name">方法名。<paramref name="name"/> 不能包含嵌入的 null 值。 </param>
<param name="attributes">该方法的属性。<paramref name="attributes"/> 必须包括 <see cref="F:System.Reflection.MethodAttributes.Static"/>。 </param>
<param name="returnType">该方法的返回类型。 </param>
<param name="parameterTypes">方法参数的类型。 </param>
<exception cref="T:System.ArgumentException">该方法不是静态的。 也就是说，<paramref name="attributes"/> 不包括 <see cref="F:System.Reflection.MethodAttributes.Static"/>。-或- <paramref name="name"/> 的长度为零 ，-或- <see cref="T:System.Type"/> 数组中的一个元素为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
      <exception cref="T:System.InvalidOperationException">
以前调用过 <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions"/>。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)">
<summary>[SECURITY CRITICAL] 在可移植可执行 (PE) 文件的 .sdata 部分定义已初始化的数据字段。</summary>
<returns>引用这些数据的字段。</returns>
<param name="name">用于引用数据的名称。<paramref name="name"/> 不能包含嵌入的 null 值。 </param>
<param name="data">数据的二进制大对象 (BLOB)。 </param>
<param name="attributes">该字段的属性。默认为 Static。 </param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineManifestResource(System.String,System.IO.Stream,System.Reflection.ResourceAttributes)">
<summary>[SECURITY CRITICAL] 定义表示要在动态程序集中嵌入的清单资源的二进制大对象 (BLOB)。</summary>
<param name="name">资源的区分大小写的名称。</param>
<param name="stream">包含资源字节的流。</param>
<param name="attribute">一个枚举值，用于指定资源是公共资源还是私有资源。</param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
<summary>[SECURITY CRITICAL] 使用指定的名称、定义方法的 DLL 的名称、方法的属性、方法的调用约定、方法的返回类型、方法的参数类型以及 PInvoke 标志定义一个 PInvoke 方法。</summary>
<returns>已定义的 PInvoke方法。</returns>
<param name="name">PInvoke 方法的名称。<paramref name="name"/> 不能包含嵌入的 null 值。 </param>
<param name="dllName">在其中定义 PInvoke 方法的 DLL 的名称。 </param>
<param name="attributes">该方法的属性。 </param>
<param name="callingConvention">该方法的调用约定。 </param>
<param name="returnType">该方法的返回类型。 </param>
<param name="parameterTypes">方法参数的类型。 </param>
<param name="nativeCallConv">本机调用约定。 </param>
<param name="nativeCharSet">该方法的本机字符集。 </param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
<summary>[SECURITY CRITICAL] 使用指定的名称、定义方法的 DLL 的名称、方法的属性、方法的调用约定、方法的返回类型、方法的参数类型以及 PInvoke 标志定义一个 PInvoke 方法。</summary>
<returns>已定义的 PInvoke方法。</returns>
<param name="name">PInvoke 方法的名称。<paramref name="name"/> 不能包含嵌入的 null 值。 </param>
<param name="dllName">在其中定义 PInvoke 方法的 DLL 的名称。 </param>
<param name="entryName">DLL 中入口点的名称。 </param>
<param name="attributes">该方法的属性。 </param>
<param name="callingConvention">该方法的调用约定。 </param>
<param name="returnType">该方法的返回类型。 </param>
<param name="parameterTypes">方法参数的类型。 </param>
<param name="nativeCallConv">本机调用约定。 </param>
<param name="nativeCharSet">该方法的本机字符集。 </param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String)">
<summary>在此模块中用指定的名称定义一个私有类型。</summary>
<returns>具有指定名称的私有类型。</returns>
<param name="name">类型的全名，包括命名空间。<paramref name="name"/> 不能包含嵌入的 null 值。 </param>
<exception cref="T:System.ArgumentException">具有给定名称的类型存在于此模块的父程序集中。-或- 在未嵌套的类型上设置嵌套类型属性。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes)">
<summary>在此模块中用指定类型名称和属性定义一个类型。</summary>
<returns>具有指定名称和属性的类型。</returns>
<param name="name">类型的全名，包括命名空间。<paramref name="name"/> 不能包含嵌入的 null 值。 </param>
<param name="attr">已定义类型的属性。 </param>
<exception cref="T:System.ArgumentException">具有给定名称的类型存在于此模块的父程序集中。-或- 在未嵌套的类型上设置嵌套类型属性。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)">
<summary>在此模块中用指定类型名称，属性和基础类型定义一个类型。</summary>
<returns>具有指定特征的类型。</returns>
<param name="name">类型的全名，包括命名空间。<paramref name="name"/> 不能包含嵌入的 null 值。 </param>
<param name="attr">与此类型关联的属性。 </param>
<param name="parent">已定义类型扩展的类型。 </param>
<exception cref="T:System.ArgumentException">具有给定名称的类型存在于此模块的父程序集中。-或- 在未嵌套的类型上设置嵌套类型属性。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)">
<summary>[SECURITY CRITICAL]在此模块中用指定类型名称、属性、基础类型和总大小定义一个类型。</summary>
<returns>具有指定特征的类型。</returns>
<param name="name">类型的全名，包括命名空间。<paramref name="name"/> 不能包含嵌入的 null 值。 </param>
<param name="attr">已定义类型的属性。 </param>
<param name="parent">已定义类型扩展的类型。 </param>
<param name="typesize">类型的总大小。 </param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)">
<summary>[SECURITY CRITICAL] 在此模块中用指定类型名称、属性、基础类型和打包大小定义一个类型。</summary>
<returns>具有指定特征的类型。</returns>
<param name="name">类型的全名，包括命名空间。<paramref name="name"/> 不能包含嵌入的 null 值。 </param>
<param name="attr">已定义类型的属性。 </param>
<param name="parent">已定义类型扩展的类型。 </param>
<param name="packsize">类型的打包大小。 </param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)">
<summary>[SECURITY CRITICAL] 在此模块中用指定类型名称、属性、基础类型、打包大小和总大小定义一个类型。</summary>
<returns>具有指定特征的类型。</returns>
<param name="name">类型的全名，包括命名空间。<paramref name="name"/> 不能包含嵌入的 null 值。 </param>
<param name="attr">已定义类型的属性。 </param>
<param name="parent">已定义类型扩展的类型。 </param>
<param name="packingSize">类型的打包大小。 </param>
<param name="typesize">类型的总大小。 </param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
<summary>在此模块中用指定的类型名称、属性、基类型和实现的接口定义一个类型。</summary>
<returns>具有指定特征的类型。</returns>
<param name="name">类型的全名，包括命名空间。<paramref name="name"/> 不能包含嵌入的 null 值。 </param>
<param name="attr">已定义类型的属性。 </param>
<param name="parent">已定义类型扩展的类型。 </param>
<param name="interfaces">类型实现的接口列表。 </param>
<exception cref="T:System.ArgumentException">具有给定名称的类型存在于此模块的父程序集中。-或- 在未嵌套的类型上设置嵌套类型属性。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)">
<summary>[SECURITY CRITICAL] 在可移植可执行 (PE) 文件的 .sdata 部分定义未初始化的数据字段。</summary>
<returns>引用这些数据的字段。</returns>
<param name="name">用于引用数据的名称。<paramref name="name"/> 不能包含嵌入的 null 值。 </param>
<param name="size">该数据字段的大小。 </param>
<param name="attributes">该字段的属性。 </param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResource(System.Byte[])">
<summary>[SECURITY CRITICAL] 在给定不透明的字节二进制大对象 (BLOB) 的情况下，定义非托管嵌入资源。</summary>
<param name="resource">表示非托管资源的不透明 BLOB。 </param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResource(System.String)">
<summary>[SECURITY CRITICAL] 在给定 Win32 资源文件名称的情况下，定义非托管资源。</summary>
<param name="resourceFileName">非托管资源文件的名称。 </param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.Equals(System.Object)">
<summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
<returns>如果 <paramref name="obj"/> 等于此实例的类型和值，则为 true；否则为 false。</returns>
<param name="obj">要与此实例比较的对象，或 null。</param>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.FullyQualifiedName">
<summary>[SECURITY CRITICAL] 获取表示此模块的完全限定名和路径的字符串。</summary>
<returns>完全限定的模块名。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])">
<summary>返回数组类上的命名方法。</summary>
<returns>数组类上的命名方法。</returns>
<param name="arrayClass">数组类。 </param>
<param name="methodName">数组类上的方法的名称。 </param>
<param name="callingConvention">该方法的调用约定。 </param>
<param name="returnType">该方法的返回类型。 </param>
<param name="parameterTypes">方法参数的类型。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="arrayClass"/> 不是数组。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="arrayClass"/> 或 <paramref name="methodName"/> 为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])">
<summary>返回数组类上的命名方法的标记。</summary>
<returns>数组类上的命名方法的标记。</returns>
<param name="arrayClass">数组本身的类型，而不是数组包含的元素的类型。 </param>
<param name="methodName">方法的名称。 </param>
<param name="callingConvention">该方法的调用约定。 </param>
<param name="returnType">该方法的返回类型。 </param>
<param name="parameterTypes">该方法的参数的类型。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="arrayClass"/> 不是数组类型。-或- <paramref name="methodName"/> 的长度为零。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="arrayClass"/> 或 <paramref name="methodName"/> 为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetConstructorToken(System.Reflection.ConstructorInfo)">
<summary>返回用于标识此模块内的指定构造函数的标记。</summary>
<returns>用于标识此模块内的指定构造函数的标记。</returns>
<param name="con">要为其获取标记的构造函数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="con"/> 为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Boolean)">
<summary>返回已应用于当前 <see cref="T:System.Reflection.Emit.ModuleBuilder"/> 的所有自定义属性。</summary>
<returns>一个数组，其中包含自定义属性；如果没有属性，则该数组为空。</returns>
<param name="inherit">对于该类型的对象，该参数被忽略。</param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Type,System.Boolean)">
<summary>返回已应用于当前 <see cref="T:System.Reflection.Emit.ModuleBuilder"/> 且派生自指定的属性类型的所有自定义属性。</summary>
<returns>一个数组，其中包含从 <paramref name="attributeType"/> 以任何级别派生的自定义属性；如果没有这样的属性，则该数组为空。</returns>
<param name="attributeType">从中派生属性的基类。</param>
<param name="inherit">对于该类型的对象，该参数被忽略。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="attributeType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 不是一个由运行库提供的 <see cref="T:System.Type"/> 对象。例如，<paramref name="attributeType"/> 是一个 <see cref="T:System.Reflection.Emit.TypeBuilder"/> 对象。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetField(System.String,System.Reflection.BindingFlags)">
<summary>返回在可移植可执行 (PE) 文件的 .sdata 区域中定义的、具有指定名称和绑定属性的模块级字段。</summary>
<returns>一个具有指定名称及绑定属性的字段；或者如果该字段不存在，则为 null。</returns>
<param name="name">字段名。 </param>
<param name="bindingAttr">用于控制搜索的 BindingFlags 位标志的组合。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="name"/> 参数为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetFields(System.Reflection.BindingFlags)">
<summary>返回在可移植可执行 (PE) 文件的 .sdata 区域中定义的、与指定绑定标志匹配的所有字段。</summary>
<returns>与指定标志匹配的字段的数组；如果不存在这样的字段，则数组为空。</returns>
<param name="bindingFlags">用于控制搜索的 BindingFlags 位标志的组合。</param>
<exception cref="T:System.ArgumentNullException"><paramref name="name"/> 参数为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetFieldToken(System.Reflection.FieldInfo)">
<summary>返回用于标识此模块内的指定字段的标记。</summary>
<returns>用于标识此模块内的指定字段的标记。</returns>
<param name="field">要为其获取标记的字段。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="field"/> 为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
<summary>返回符合指定条件的模块级方法。</summary>
<returns>在模块级定义并符合指定条件的方法；如果不存在这样的方法，则为 null。</returns>
<param name="name">方法名。 </param>
<param name="bindingAttr">用于控制搜索的 BindingFlags 位标志的组合。 </param>
<param name="binder">实现 Binder 的对象，它包含与此方法相关的属性。 </param>
<param name="callConvention">该方法的调用约定。 </param>
<param name="types">该方法的参数类型。 </param>
<param name="modifiers">参数修饰符数组，用来与参数签名进行绑定，这些参数签名中的类型已经被修改。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null，<paramref name="types"/> 为 null，或者 <paramref name="types"/> 的某个元素为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetMethods(System.Reflection.BindingFlags)">
<summary>返回已在模块级别上为当前 <see cref="T:System.Reflection.Emit.ModuleBuilder"/> 定义并与指定的绑定标志匹配的所有方法。</summary>
<returns>一个数组，包含与 <paramref name="bindingFlags"/> 匹配的所有模块级方法。</returns>
<param name="bindingFlags">用于控制搜索的 BindingFlags 位标志的组合。</param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo)">
<summary>返回用于标识此模块内指定方法的标记。</summary>
<returns>用于标识此模块内的指定方法的标记。</returns>
<param name="method">要为其获取标记的方法。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="method"/> 为 null。 </exception>
<exception cref="T:System.InvalidOperationException">此方法的声明类型不在此模块内。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetSignatureToken(System.Byte[],System.Int32)">
<summary>为具有指定字符数组和签名长度的签名定义标记。</summary>
<returns>指定签名的标记。</returns>
<param name="sigBytes">签名二进制大对象 (BLOB)。 </param>
<param name="sigLength">签名 BLOB 的长度。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="sigBytes"/> 为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetSignatureToken(System.Reflection.Emit.SignatureHelper)">
<summary>为由指定的 <see cref="T:System.Reflection.Emit.SignatureHelper"/> 定义的签名定义标记。</summary>
<returns>已定义签名的标记。</returns>
<param name="sigHelper">签名。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="sigHelper"/> 为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetStringConstant(System.String)">
<summary>返回模块常量池中给定字符串的标记。</summary>
<returns>常量池中字符串的标记。</returns>
<param name="str">要添加到模块常数池中的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="str"/> 为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String)">
<summary>获取此模块中定义的命名类型。</summary>
<returns>如果已在此模块中定义了请求的类型，则为此类型；否则为 null。</returns>
<param name="className">要获取的 <see cref="T:System.Type"/> 的名称。 </param>
<exception cref="T:System.ArgumentException"><paramref name="className"/> 的长度为零或大于 1023。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="className"/> 为 null。 </exception>
<exception cref="T:System.Reflection.TargetInvocationException">调用类初始值设定项并引发异常。 </exception>
<exception cref="T:System.TypeLoadException">加载 <see cref="T:System.Type"/> 时遇到错误。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean)">
<summary>获取此模块中定义的命名类型，可以忽略类型名称的大小写。</summary>
<returns>如果已在此模块中定义了请求的类型，则为此类型；否则为 null。 </returns>
<param name="className">要获取的 <see cref="T:System.Type"/> 的名称。 </param>
<param name="ignoreCase">如果为 true，则搜索不区分大小写。如果为 false，则搜索区分大小写。 </param>
<exception cref="T:System.ArgumentException"><paramref name="className"/> 的长度为零或大于 1023。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="className"/> 为 null。 </exception>
<exception cref="T:System.Reflection.TargetInvocationException">调用类初始值设定项并引发异常。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean,System.Boolean)">
<summary>获取此模块中定义的命名类型，可以忽略类型名称的大小写。如果未找到该类型，则可选择引发异常。</summary>
<returns>如果已在此模块中定义了请求的类型，则为此类型；否则为 null。</returns>
<param name="className">要获取的 <see cref="T:System.Type"/> 的名称。 </param>
<param name="throwOnError">如果为 true，则在找不到该类型时引发异常；如果为 false，则返回 null。 </param>
<param name="ignoreCase">如果为 true，则搜索不区分大小写。如果为 false，则搜索区分大小写。 </param>
<exception cref="T:System.ArgumentException"><paramref name="className"/> 的长度为零或大于 1023。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="className"/> 为 null。 </exception>
<exception cref="T:System.Reflection.TargetInvocationException">调用类初始值设定项并引发异常。 </exception>
      <exception cref="T:System.TypeLoadException">
<paramref name="throwOnError"/> 为 true，未找到指定的类型。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetTypes">
<summary>返回在此模块内定义的所有类。</summary>
<returns>一个数组，包含在此实例反射的模块内定义的类。</returns>
<exception cref="T:System.Reflection.ReflectionTypeLoadException">未能加载模块中的一个或多个类。 </exception>
<exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetTypeToken(System.String)">
<summary>返回用于标识具有指定名称的类型的标记。</summary>
<returns>用于标识此模块内具有指定名称的类型的标记。</returns>
<param name="name">类的名称，包括命名空间。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="name"/> 为空字符串 ("")。-或- <paramref name="name"/> 表示 ByRef 类型。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。-或- 无法找到 <paramref name="name"/> 指定的类型。</exception>
<exception cref="T:System.InvalidOperationException">这是一个引用瞬态模块的非瞬态模块。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetTypeToken(System.Type)">
<summary>返回用于标识此模块内的指定类型的标记。</summary>
<returns>用于标识此模块内给定类型的标记。</returns>
<param name="type">表示类类型的类型对象。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="type"/> 是一种 ByRef 类型。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="type"/> 为 null。 </exception>
<exception cref="T:System.InvalidOperationException">这是一个引用瞬态模块的非瞬态模块。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.IsDefined(System.Type,System.Boolean)">
<summary>返回一个值，该值指示是否已将指定的属性类型应用于此模块。</summary>
<returns>如果一个或多个 <paramref name="attributeType"/> 实例已应用于此模块，则为 true；否则为 false。</returns>
<param name="attributeType">要测试的自定义属性的类型。</param>
<param name="inherit">对于该类型的对象，该参数被忽略。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="attributeType"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 不是一个由运行库提供的 <see cref="T:System.Type"/> 对象。例如，<paramref name="attributeType"/> 是一个 <see cref="T:System.Reflection.Emit.TypeBuilder"/> 对象。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.IsTransient">
<summary>返回一个值，该值指示此动态模块是否为瞬态的。</summary>
<returns>如果此动态模块是瞬态的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.MetadataToken">
<summary>获取一个标记，该标记用于标识元数据中的当前动态模块。</summary>
<returns>一个整数标记，用于标识元数据中的当前模块。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.Name">
<summary>一个字符串，指示这是内存中的模块。</summary>
<returns>指示这是内存中的模块的文本。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveMethod(System.Int32,System.Type[],System.Type[])">
<summary>在由指定的泛型类型参数定义的上下文中，返回由指定的元数据标记标识的方法或构造函数。 </summary>
<returns>一个 <see cref="T:System.Reflection.MethodBase"/> 对象，表示由指定的元数据标记标识的方法。</returns>
<param name="metadataToken">一个元数据标记，用于标识模块中的方法或构造函数。</param>
<param name="genericTypeArguments">一个 <see cref="T:System.Type"/> 对象数组，这些对象表示其标记在范围内的类型的泛型类型参数；如果该类型不是泛型类型，则为 null。 </param>
<param name="genericMethodArguments">一个 <see cref="T:System.Type"/> 对象数组，这些对象表示其标记在范围内的方法的泛型类型参数；如果该方法不是泛型类型，则为 null。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="metadataToken"/> 不是当前模块范围内的方法或构造函数的标记。-或- <paramref name="metadataToken"/> 是一个 MethodSpec，其签名包含元素类型 var（泛型类型的类型参数）或 mvar（泛型方法的类型参数），并且必要的泛型类型参数不是为 <paramref name="genericTypeArguments"/> 和/或 <paramref name="genericMethodArguments"/> 提供的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="metadataToken"/> 不是当前模块范围内的有效标记。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveString(System.Int32)">
<summary>返回由指定元数据标记标识的字符串。</summary>
<returns>一个 <see cref="T:System.String"/>，包含来自元数据字符串堆的一个字符串值。</returns>
<param name="metadataToken">一个元数据标记，用于标识模块的字符串堆中的一个字符串。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="metadataToken"/> 不是当前模块范围内的字符串的标记。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="metadataToken"/> 不是当前模块范围内的有效标记。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveType(System.Int32,System.Type[],System.Type[])">
<summary>在由指定的泛型类型参数定义的上下文中，返回由指定的元数据标记标识的类型。</summary>
<returns>一个 <see cref="T:System.Type"/> 对象，表示由指定的元数据标记标识的类型。</returns>
<param name="metadataToken">一个元数据标记，用于标识模块中的一个类型。</param>
<param name="genericTypeArguments">一个 <see cref="T:System.Type"/> 对象数组，这些对象表示其标记在范围内的类型的泛型类型参数；如果该类型不是泛型类型，则为 null。 </param>
<param name="genericMethodArguments">一个 <see cref="T:System.Type"/> 对象数组，这些对象表示其标记在范围内的方法的泛型类型参数；如果该方法不是泛型类型，则为 null。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="metadataToken"/> 不是当前模块范围内的类型的标记。-或- <paramref name="metadataToken"/> 是一个 TypeSpec，其签名包含元素类型 var（泛型类型的类型参数）或 mvar（泛型方法的类型参数），并且必要的泛型类型参数不是为 <paramref name="genericTypeArguments"/> 和/或 <paramref name="genericMethodArguments"/> 提供的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="metadataToken"/> 不是当前模块范围内的有效标记。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
<summary>[SECURITY CRITICAL] 使用表示自定义属性的指定二进制大对象 (BLOB) 向该模块应用该属性。</summary>
<param name="con">自定义属性的构造函数。 </param>
<param name="binaryAttribute">表示属性的字节 BLOB。 </param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
<summary>使用自定义属性生成器向此模块应用自定义属性。</summary>
<param name="customBuilder">帮助器类的实例，指定要应用的自定义属性。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="customBuilder"/> 为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetUserEntryPoint(System.Reflection.MethodInfo)">
<summary>[SECURITY CRITICAL] 设置用户入口点。</summary>
<param name="entryPoint">用户入口点。 </param>
    </member>
    <member name="T:System.Reflection.Emit.OpCode">
<summary>描述 Microsoft 中间语言 (MSIL) 指令。</summary>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.Equals(System.Object)">
<summary>测试给定对象是否等于此 Opcode。</summary>
<returns>如果 <paramref name="obj"/> 是 Opcode 的一个实例并且等于此对象，则为 true；否则为 false。</returns>
<param name="obj">与此对象进行比较的对象。 </param>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.Equals(System.Reflection.Emit.OpCode)">
<summary>指示当前实例是否等于指定的 <see cref="T:System.Reflection.Emit.OpCode"/>。</summary>
<returns>如果 <paramref name="obj"/> 的值等于当前实例的值，则为 true；否则为 false。</returns>
<param name="obj">要与当前实例进行比较的 <see cref="T:System.Reflection.Emit.OpCode"/>。</param>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.FlowControl">
<summary>Microsoft 中间语言 (MSIL) 指令的流控制属性。</summary>
<returns>只读。流控制的类型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.GetHashCode">
<summary>返回为此 Opcode 生成的哈希代码。</summary>
<returns>返回此实例的哈希代码。</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Name">
<summary>Microsoft 中间语言 (MSIL) 指令的名称。</summary>
<returns>只读。MSIL 指令的名称。</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.op_Equality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)">
<summary>指示两个 <see cref="T:System.Reflection.Emit.OpCode"/> 结构是否相等。</summary>
<returns>如果 <paramref name="a"/> 等于 <paramref name="b"/>，则为 true；否则为 false。</returns>
<param name="a">要与 <paramref name="b"/> 进行比较的 <see cref="T:System.Reflection.Emit.OpCode"/>。</param>
<param name="b">要与 <paramref name="a"/> 进行比较的 <see cref="T:System.Reflection.Emit.OpCode"/>。</param>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.op_Inequality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)">
<summary>指示两个 <see cref="T:System.Reflection.Emit.OpCode"/> 结构是否不相等。</summary>
<returns>如果 <paramref name="a"/> 不等于 <paramref name="b"/>，则为 true；否则为 false。</returns>
<param name="a">要与 <paramref name="b"/> 进行比较的 <see cref="T:System.Reflection.Emit.OpCode"/>。</param>
<param name="b">要与 <paramref name="a"/> 进行比较的 <see cref="T:System.Reflection.Emit.OpCode"/>。</param>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.OpCodeType">
<summary>Microsoft 中间语言 (MSIL) 指令的类型。</summary>
<returns>只读。Microsoft 中间语言 (MSIL) 指令的类型。</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.OperandType">
<summary>Microsoft 中间语言 (MSIL) 指令的操作数类型。</summary>
<returns>只读。MSIL 指令的操作数类型。</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Size">
<summary>Microsoft 中间语言 (MSIL) 指令的大小。</summary>
<returns>只读。MSIL 指令的大小。</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.StackBehaviourPop">
<summary>Microsoft 中间语言 (MSIL) 指令弹出堆栈的方式。</summary>
<returns>只读。MSIL 指令弹出堆栈的方式。</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.StackBehaviourPush">
<summary>Microsoft 中间语言 (MSIL) 指令将操作数推到堆栈上的方式。</summary>
<returns>只读。MSIL 指令将操作数推到堆栈上的方式。</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.ToString">
<summary>以 <see cref="T:System.String"/> 形式返回此 Opcode。</summary>
<returns>返回包含此 Opcode 的名称的 <see cref="T:System.String"/>。</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Value">
<summary>Microsoft 中间语言 (MSIL) 指令的直接操作数的值。</summary>
<returns>只读。MSIL 指令的直接操作数的值。</returns>
    </member>
    <member name="T:System.Reflection.Emit.OpCodes">
<summary>提供要由 <see cref="T:System.Reflection.Emit.ILGenerator"/> 类成员（例如 <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)"/>）发出的 Microsoft 中间语言 (MSIL) 指令的字段表示形式。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add">
<summary>将两个值相加并将结果推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add_Ovf">
<summary>将两个整数相加，执行溢出检查，并且将结果推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un">
<summary>将两个无符号整数值相加，执行溢出检查，并且将结果推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.And">
<summary>计算两个值的按位"与"并将结果推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Arglist">
<summary>返回指向当前方法的参数列表的非托管指针。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Beq">
<summary>如果两个值相等，则将控制转移到目标指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Beq_S">
<summary>如果两个值相等，则将控制转移到目标指令（短格式）。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge">
<summary>如果第一个值大于或等于第二个值，则将控制转移到目标指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_S">
<summary>如果第一个值大于或等于第二个值，则将控制转移到目标指令（短格式）。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_Un">
<summary>当比较无符号整数值或不可排序的浮点型值时，如果第一个值大于第二个值，则将控制转移到目标指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_Un_S">
<summary>当比较无符号整数值或不可排序的浮点型值时，如果第一个值大于第二个值，则将控制转移到目标指令（短格式）。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt">
<summary>如果第一个值大于第二个值，则将控制转移到目标指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_S">
<summary>如果第一个值大于第二个值，则将控制转移到目标指令（短格式）。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_Un">
<summary>当比较无符号整数值或不可排序的浮点型值时，如果第一个值大于第二个值，则将控制转移到目标指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_Un_S">
<summary>当比较无符号整数值或不可排序的浮点型值时，如果第一个值大于第二个值，则将控制转移到目标指令（短格式）。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble">
<summary>如果第一个值小于或等于第二个值，则将控制转移到目标指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_S">
<summary>如果第一个值小于或等于第二个值，则将控制转移到目标指令（短格式）。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_Un">
<summary>当比较无符号整数值或不可排序的浮点型值时，如果第一个值小于或等于第二个值，则将控制转移到目标指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_Un_S">
<summary>当比较无符号整数值或不可排序的浮点值时，如果第一个值小于或等于第二个值，则将控制权转移到目标指令（短格式）。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt">
<summary>如果第一个值小于第二个值，则将控制转移到目标指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_S">
<summary>如果第一个值小于第二个值，则将控制转移到目标指令（短格式）。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_Un">
<summary>当比较无符号整数值或不可排序的浮点型值时，如果第一个值小于第二个值，则将控制转移到目标指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_Un_S">
<summary>当比较无符号整数值或不可排序的浮点型值时，如果第一个值小于第二个值，则将控制转移到目标指令（短格式）。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bne_Un">
<summary>当两个无符号整数值或不可排序的浮点型值不相等时，将控制转移到目标指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bne_Un_S">
<summary>当两个无符号整数值或不可排序的浮点型值不相等时，将控制转移到目标指令（短格式）。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Box">
<summary>将值类转换为对象引用（O 类型）。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Br">
<summary>无条件地将控制转移到目标指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Br_S">
<summary>无条件地将控制转移到目标指令（短格式）。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Break">
<summary>向公共语言结构 (CLI) 发出信号以通知调试器已撞上了一个断点。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brfalse">
<summary>如果 <paramref name="value"/> 为 false、空引用（在 Visual Basic 中为 Nothing）或零，则将控制转移到目标指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brfalse_S">
<summary>如果 <paramref name="value"/> 为 false、空引用或零，则将控制转移到目标指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brtrue">
<summary>如果 <paramref name="value"/> 为 true、非空或非零，则将控制转移到目标指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brtrue_S">
<summary>如果 <paramref name="value"/> 为 true、非空或非零，则将控制转移到目标指令（短格式）。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Call">
<summary>调用由传递的方法说明符指示的方法。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Calli">
<summary>通过调用约定描述的参数调用在计算堆栈上指示的方法（作为指向入口点的指针）。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Callvirt">
<summary>对对象调用后期绑定方法，并且将返回值推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Castclass">
<summary>尝试将引用传递的对象转换为指定的类。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ceq">
<summary>比较两个值。如果这两个值相等，则将整数值 1 (int32) 推送到计算堆栈上；否则，将 0 (int32) 推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cgt">
<summary>比较两个值。如果第一个值大于第二个值，则将整数值 1 (int32) 推送到计算堆栈上；反之，将 0 (int32) 推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cgt_Un">
<summary>比较两个无符号的或不可排序的值。如果第一个值大于第二个值，则将整数值 1 (int32) 推送到计算堆栈上；反之，将 0 (int32) 推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ckfinite">
<summary>如果值不是有限数，则引发 <see cref="T:System.ArithmeticException"/>。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Clt">
<summary>比较两个值。如果第一个值小于第二个值，则将整数值 1 (int32) 推送到计算堆栈上；反之，将 0 (int32) 推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Clt_Un">
<summary>比较无符号的或不可排序的值 <paramref name="value1"/> 和 <paramref name="value2"/>。如果 <paramref name="value1"/> 小于 <paramref name="value2"/>，则将整数值 1 (int32) 推送到计算堆栈上；反之，将 0 (int32) 推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Constrained">
<summary>约束要对其进行虚方法调用的类型。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I">
<summary>将位于计算堆栈顶部的值转换为本机 int。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I1">
<summary>将位于计算堆栈顶部的值转换为 int8，然后将其扩展（填充）为 int32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I2">
<summary>将位于计算堆栈顶部的值转换为 int16，然后将其扩展（填充）为 int32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I4">
<summary>将位于计算堆栈顶部的值转换为 int32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I8">
<summary>将位于计算堆栈顶部的值转换为 int64。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I">
<summary>将位于计算堆栈顶部的有符号值转换为有符号本机 int，并在溢出时引发 <see cref="T:System.OverflowException"/>。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un">
<summary>将位于计算堆栈顶部的无符号值转换为有符号本机 int，并在溢出时引发 <see cref="T:System.OverflowException"/>。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1">
<summary>将位于计算堆栈顶部的有符号值转换为有符号 int8 并将其扩展为 int32，并在溢出时引发 <see cref="T:System.OverflowException"/>。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un">
<summary>将位于计算堆栈顶部的无符号值转换为有符号 int8 并将其扩展为 int32，并在溢出时引发 <see cref="T:System.OverflowException"/>。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2">
<summary>将位于计算堆栈顶部的有符号值转换为有符号 int16 并将其扩展为 int32，并在溢出时引发 <see cref="T:System.OverflowException"/>。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un">
<summary>将位于计算堆栈顶部的无符号值转换为有符号 int16 并将其扩展为 int32，并在溢出时引发 <see cref="T:System.OverflowException"/>。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4">
<summary>将位于计算堆栈顶部的有符号值转换为有符号 int32，并在溢出时引发 <see cref="T:System.OverflowException"/>。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un">
<summary>将位于计算堆栈顶部的无符号值转换为有符号 int32，并在溢出时引发 <see cref="T:System.OverflowException"/>。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8">
<summary>将位于计算堆栈顶部的有符号值转换为有符号 int64，并在溢出时引发 <see cref="T:System.OverflowException"/>。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un">
<summary>将位于计算堆栈顶部的无符号值转换为有符号 int64，并在溢出时引发 <see cref="T:System.OverflowException"/>。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U">
<summary>将位于计算堆栈顶部的有符号值转换为无符号本机 int，并在溢出时引发 <see cref="T:System.OverflowException"/>。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un">
<summary>将位于计算堆栈顶部的无符号值转换为无符号本机 int，并在溢出时引发 <see cref="T:System.OverflowException"/>。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1">
<summary>将位于计算堆栈顶部的有符号值转换为无符号 int8 并将其扩展为 int32，并在溢出时引发 <see cref="T:System.OverflowException"/>。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un">
<summary>将位于计算堆栈顶部的无符号值转换为无符号 int8 并将其扩展为 int32，并在溢出时引发 <see cref="T:System.OverflowException"/>。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2">
<summary>将位于计算堆栈顶部的有符号值转换为无符号 int16 并将其扩展为 int32，并在溢出时引发 <see cref="T:System.OverflowException"/>。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un">
<summary>将位于计算堆栈顶部的无符号值转换为无符号 int16 并将其扩展为 int32，并在溢出时引发 <see cref="T:System.OverflowException"/>。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4">
<summary>将位于计算堆栈顶部的有符号值转换为无符号 int32，并在溢出时引发 <see cref="T:System.OverflowException"/>。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un">
<summary>将位于计算堆栈顶部的无符号值转换为无符号 int32，并在溢出时引发 <see cref="T:System.OverflowException"/>。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8">
<summary>将位于计算堆栈顶部的有符号值转换为无符号 int64，并在溢出时引发 <see cref="T:System.OverflowException"/>。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un">
<summary>将位于计算堆栈顶部的无符号值转换为无符号 int64，并在溢出时引发 <see cref="T:System.OverflowException"/>。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R_Un">
<summary>将位于计算堆栈顶部的无符号整数值转换为 float32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R4">
<summary>将位于计算堆栈顶部的值转换为 float32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R8">
<summary>将位于计算堆栈顶部的值转换为 float64。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U">
<summary>将位于计算堆栈顶部的值转换为无符号本机 int，然后将其扩展为本机 int。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U1">
<summary>将位于计算堆栈顶部的值转换为无符号 int8，然后将其扩展为 int32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U2">
<summary>将位于计算堆栈顶部的值转换为无符号 int16，然后将其扩展为 int32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U4">
<summary>将位于计算堆栈顶部的值转换为无符号 int32，然后将其扩展为 int32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U8">
<summary>将位于计算堆栈顶部的值转换为无符号 int64，然后将其扩展为 int64。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cpblk">
<summary>将指定数目的字节从源地址复制到目标地址。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cpobj">
<summary>将位于对象（&amp;、* 或本机 int 类型）地址的值类型复制到目标对象（&amp;、* 或本机 int 类型）的地址。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Div">
<summary>将两个值相除并将结果作为浮点（F 类型）或商（int32 类型）推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Div_Un">
<summary>两个无符号整数值相除并将结果 (int32) 推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Dup">
<summary>复制计算堆栈上当前最顶端的值，然后将副本推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Endfilter">
<summary>将控制从异常的筛选子句转移回公共语言结构 (CLI) 异常处理程序。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Endfinally">
<summary>将控制从异常块的故障或 finally 子句转移回公共语言结构 (CLI) 异常处理程序。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Initblk">
<summary>将位于特定地址的内存的指定块初始化为给定大小和初始值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Initobj">
<summary>将位于指定地址的值类型的每个字段初始化为空引用或适当的基元类型的 0。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Isinst">
<summary>测试对象引用（O 类型）是否为特定类的实例。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Jmp">
<summary>退出当前方法并跳至指定方法。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg">
<summary>将参数（由指定索引值引用）加载到堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_0">
<summary>将索引为 0 的参数加载到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_1">
<summary>将索引为 1 的参数加载到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_2">
<summary>将索引为 2 的参数加载到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_3">
<summary>将索引为 3 的参数加载到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_S">
<summary>将参数（由指定的短格式索引引用）加载到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarga">
<summary>将参数地址加载到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarga_S">
<summary>以短格式将参数地址加载到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4">
<summary>将所提供的 int32 类型的值作为 int32 推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_0">
<summary>将整数值 0 作为 int32 推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_1">
<summary>将整数值 1 作为 int32 推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_2">
<summary>将整数值 2 作为 int32 推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_3">
<summary>将整数值 3 作为 int32 推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_4">
<summary>将整数值 4 作为 int32 推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_5">
<summary>将整数值 5 作为 int32 推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_6">
<summary>将整数值 6 作为 int32 推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_7">
<summary>将整数值 7 作为 int32 推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_8">
<summary>将整数值 8 作为 int32 推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1">
<summary>将整数值 -1 作为 int32 推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_S">
<summary>将提供的 int8 值作为 int32 推送到计算堆栈上（短格式）。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I8">
<summary>将所提供的 int64 类型的值作为 int64 推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_R4">
<summary>将所提供的 float32 类型的值作为 F 类型（浮点型）推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_R8">
<summary>将所提供的 float64 类型的值作为 F 类型（浮点型）推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem">
<summary>按照指令中指定的类型，将指定数组索引中的元素加载到计算堆栈的顶部。 </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I">
<summary>将位于指定数组索引处的本机 int 类型的元素作为本机 int 加载到计算堆栈的顶部。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I1">
<summary>将位于指定数组索引处的 int8 类型的元素作为 int32 加载到计算堆栈的顶部。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I2">
<summary>将位于指定数组索引处的 int16 类型的元素作为 int32 加载到计算堆栈的顶部。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I4">
<summary>将位于指定数组索引处的 int32 类型的元素作为 int32 加载到计算堆栈的顶部。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I8">
<summary>将位于指定数组索引处的 int64 类型的元素作为 int64 加载到计算堆栈的顶部。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_R4">
<summary>将位于指定数组索引处的 float32 类型的元素作为 F 类型（浮点型）加载到计算堆栈的顶部。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_R8">
<summary>将位于指定数组索引处的 float64 类型的元素作为 F 类型（浮点型）加载到计算堆栈的顶部。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_Ref">
<summary>将位于指定数组索引处的包含对象引用的元素作为 O 类型（对象引用）加载到计算堆栈的顶部。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U1">
<summary>将位于指定数组索引处的无符号 int8 类型的元素作为 int32 加载到计算堆栈的顶部。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U2">
<summary>将位于指定数组索引处的无符号 int16 类型的元素作为 int32 加载到计算堆栈的顶部。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U4">
<summary>将位于指定数组索引处的无符号 int32 类型的元素作为 int32 加载到计算堆栈的顶部。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelema">
<summary>将位于指定数组索引的数组元素的地址作为 &amp; 类型（托管指针）加载到计算堆栈的顶部。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldfld">
<summary>查找对象中其引用当前位于计算堆栈的字段的值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldflda">
<summary>查找对象中其引用当前位于计算堆栈的字段的地址。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldftn">
<summary>将指向实现特定方法的本机代码的非托管指针（本机 int 类型）推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I">
<summary>将本机 int 类型的值作为本机 int 间接加载到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I1">
<summary>将 int8 类型的值作为 int32 间接加载到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I2">
<summary>将 int16 类型的值作为 int32 间接加载到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I4">
<summary>将 int32 类型的值作为 int32 间接加载到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I8">
<summary>将 int64 类型的值作为 int64 间接加载到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_R4">
<summary>将 float32 类型的值作为 F 类型（浮点型）类型间接加载到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_R8">
<summary>将 float64 类型的值作为 F 类型（浮点型）类型间接加载到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_Ref">
<summary>将对象引用作为 O（对象引用）类型间接加载到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U1">
<summary>将无符号 int8 类型的值作为 int32 间接加载到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U2">
<summary>将无符号 int16 类型的值作为 int32 间接加载到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U4">
<summary>将无符号 int32 类型的值作为 int32 间接加载到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldlen">
<summary>将从零开始的、一维数组的元素的数目推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc">
<summary>将指定索引处的局部变量加载到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_0">
<summary>将索引 0 处的局部变量加载到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_1">
<summary>将索引 1 处的局部变量加载到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_2">
<summary>将索引 2 处的局部变量加载到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_3">
<summary>将索引 3 处的局部变量加载到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_S">
<summary>将特定索引处的局部变量加载到计算堆栈上（短格式）。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloca">
<summary>将位于特定索引处的局部变量的地址加载到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloca_S">
<summary>将位于特定索引处的局部变量的地址加载到计算堆栈上（短格式）。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldnull">
<summary>将空引用（O 类型）推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldobj">
<summary>将地址指向的值类型对象复制到计算堆栈的顶部。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldsfld">
<summary>将静态字段的值推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldsflda">
<summary>将静态字段的地址推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldstr">
<summary>推送对元数据中存储的字符串的新对象引用。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldtoken">
<summary>将元数据标记转换为其运行时表示形式，并将其推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldvirtftn">
<summary>将指向实现与指定对象关联的特定虚方法的本机代码的非托管指针（本机 int 类型）推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Leave">
<summary>退出受保护的代码区域，无条件将控制转移到特定目标指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Leave_S">
<summary>退出受保护的代码区域，无条件将控制转移到目标指令（缩写形式）。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Localloc">
<summary>从本地动态内存池分配特定数目的字节并将第一个分配的字节的地址（瞬态指针，* 类型）推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mkrefany">
<summary>将对特定类型实例的类型化引用推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul">
<summary>将两个值相乘并将结果推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul_Ovf">
<summary>将两个整数值相乘，执行溢出检查，并将结果推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un">
<summary>将两个无符号整数值相乘，执行溢出检查，并将结果推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Neg">
<summary>对一个值执行求反并将结果推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Newarr">
<summary>将对新的从零开始的一维数组（其元素属于特定类型）的对象引用推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Newobj">
<summary>创建一个值类型的新对象或新实例，并将对象引用（O 类型）推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Nop">
<summary>如果修补操作码，则填充空间。尽管可能消耗处理周期，但未执行任何有意义的操作。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Not">
<summary>计算堆栈顶部整数值的按位求补并将结果作为相同的类型推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Or">
<summary>计算位于堆栈顶部的两个整数值的按位求补并将结果推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Pop">
<summary>移除当前位于计算堆栈顶部的值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix1">
<summary>此指令为保留指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix2">
<summary>此指令为保留指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix3">
<summary>此指令为保留指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix4">
<summary>此指令为保留指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix5">
<summary>此指令为保留指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix6">
<summary>此指令为保留指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix7">
<summary>此指令为保留指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefixref">
<summary>此指令为保留指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Readonly">
<summary>指定后面的数组地址操作在运行时不执行类型检查，并且返回可变性受限的托管指针。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Refanytype">
<summary>检索嵌入在类型化引用内的类型标记。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Refanyval">
<summary>检索嵌入在类型化引用内的地址（&amp; 类型）。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rem">
<summary>将两个值相除并将余数推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rem_Un">
<summary>将两个无符号值相除并将余数推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ret">
<summary>从当前方法返回，并将返回值（如果存在）从调用方的计算堆栈推送到被调用方的计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rethrow">
<summary>再次引发当前异常。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shl">
<summary>将整数值左移（用零填充）指定的位数，并将结果推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shr">
<summary>将整数值右移（保留符号）指定的位数，并将结果推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shr_Un">
<summary>将无符号整数值右移（用零填充）指定的位数，并将结果推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sizeof">
<summary>将提供的值类型的大小（以字节为单位）推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Starg">
<summary>将位于计算堆栈顶部的值存储到位于指定索引的参数槽中。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Starg_S">
<summary>将位于计算堆栈顶部的值存储在参数槽中的指定索引处（短格式）。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem">
<summary>用计算堆栈中的值替换给定索引处的数组元素，其类型在指令中指定。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I">
<summary>用计算堆栈上的本机 int 值替换给定索引处的数组元素。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I1">
<summary>用计算堆栈上的 int8 值替换给定索引处的数组元素。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I2">
<summary>用计算堆栈上的 int16 值替换给定索引处的数组元素。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I4">
<summary>用计算堆栈上的 int32 值替换给定索引处的数组元素。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I8">
<summary>用计算堆栈上的 int64 值替换给定索引处的数组元素。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_R4">
<summary>用计算堆栈上的 float32 值替换给定索引处的数组元素。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_R8">
<summary>用计算堆栈上的 float64 值替换给定索引处的数组元素。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_Ref">
<summary>用计算堆栈上的对象 ref 值（O 类型）替换给定索引处的数组元素。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stfld">
<summary>用新值替换在对象引用或指针的字段中存储的值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I">
<summary>在所提供的地址存储本机 int 类型的值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I1">
<summary>在所提供的地址存储 int8 类型的值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I2">
<summary>在所提供的地址存储 int16 类型的值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I4">
<summary>在所提供的地址存储 int32 类型的值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I8">
<summary>在所提供的地址存储 int64 类型的值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_R4">
<summary>在所提供的地址存储 float32 类型的值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_R8">
<summary>在所提供的地址存储 float64 类型的值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_Ref">
<summary>存储所提供地址处的对象引用值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc">
<summary>从计算堆栈的顶部弹出当前值并将其存储到指定索引处的局部变量列表中。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_0">
<summary>从计算堆栈的顶部弹出当前值并将其存储到索引 0 处的局部变量列表中。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_1">
<summary>从计算堆栈的顶部弹出当前值并将其存储到索引 1 处的局部变量列表中。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_2">
<summary>从计算堆栈的顶部弹出当前值并将其存储到索引 2 处的局部变量列表中。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_3">
<summary>从计算堆栈的顶部弹出当前值并将其存储到索引 3 处的局部变量列表中。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_S">
<summary>从计算堆栈的顶部弹出当前值并将其存储在局部变量列表中的 <paramref name="index"/> 处（短格式）。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stobj">
<summary>将指定类型的值从计算堆栈复制到所提供的内存地址中。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stsfld">
<summary>用来自计算堆栈的值替换静态字段的值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub">
<summary>从其他值中减去一个值并将结果推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub_Ovf">
<summary>从另一值中减去一个整数值，执行溢出检查，并且将结果推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un">
<summary>从另一值中减去一个无符号整数值，执行溢出检查，并且将结果推送到计算堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Switch">
<summary>实现跳转表。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Tailcall">
<summary>执行后缀的方法调用指令，以便在执行实际调用指令前移除当前方法的堆栈帧。</summary>
    </member>
    <member name="M:System.Reflection.Emit.OpCodes.TakesSingleByteArgument(System.Reflection.Emit.OpCode)">
<summary>如果提供的操作码采用单字节参数则返回真或假。</summary>
<returns>true 或 false。</returns>
<param name="inst">Opcode 对象的实例。 </param>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Throw">
<summary>引发当前位于计算堆栈上的异常对象。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unaligned">
<summary>指示当前位于计算堆栈上的地址可能没有与紧接的 ldind、stind、ldfld、stfld、ldobj、stobj、initblk 或 cpblk 指令的自然大小对齐。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unbox">
<summary>将值类型的已装箱的表示形式转换为其未装箱的形式。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unbox_Any">
<summary>将指令中指定类型的已装箱的表示形式转换成未装箱形式。 </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Volatile">
<summary>指定当前位于计算堆栈顶部的地址可以是易失的，并且读取该位置的结果不能被缓存，或者对该地址的多个存储区不能被取消。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Xor">
<summary>计算位于计算堆栈顶部的两个值的按位异或，并且将结果推送到计算堆栈上。</summary>
    </member>
    <member name="T:System.Reflection.Emit.OpCodeType">
<summary>描述 Microsoft 中间语言 (MSIL) 指令的类型。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Macro">
<summary>这些是用作其他 MSIL 指令的同义词的 Microsoft 中间语言 (MSIL) 指令。例如，ldarg.0 表示参数为 0 的 ldarg 指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Nternal">
<summary>描述保留的 Microsoft 中间语言 (MSIL) 指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Objmodel">
<summary>描述应用于对象的 Microsoft 中间语言 (MSIL) 指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Prefix">
<summary>描述修改以下指令的行为的前缀指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Primitive">
<summary>描述内置指令。</summary>
    </member>
    <member name="T:System.Reflection.Emit.OperandType">
<summary>描述 Microsoft 中间语言 (MSIL) 指令的操作数类型。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineBrTarget">
<summary>该操作数为 32 位整数分支目标。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineField">
<summary>该操作数为 32 位元数据标记。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineI">
<summary>该操作数为 32 位整数。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineI8">
<summary>该操作数为 64 位整数。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineMethod">
<summary>该操作数为 32 位元数据标记。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineNone">
<summary>没有操作数。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineR">
<summary>该操作数为 64 位 IEEE 浮点数。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineSig">
<summary>该操作数为 32 位元数据签名标记。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineString">
<summary>该操作数为 32 位元数据字符串标记。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineSwitch">
<summary>该操作数为 switch 指令的 32 位整数参数。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineTok">
<summary>该操作数为 FieldRef、MethodRef 或 TypeRef 标记。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineType">
<summary>该操作数为 32 位元数据标记。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineVar">
<summary>该操作数为包含局部变量或参数的序号的 16 位整数。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineBrTarget">
<summary>该操作数为 8 位整数分支目标。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineI">
<summary>该操作数为 8 位整数。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineR">
<summary>该操作数为 32 位 IEEE 浮点数。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineVar">
<summary>该操作数为包含局部变量或参数的序号的 8 位整数。</summary>
    </member>
    <member name="T:System.Reflection.Emit.PackingSize">
<summary>指定在封送类型时用于确定字段的内存对齐方式的两个因数中的一个。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Unspecified">
<summary>未指定封装大小。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size1">
<summary>封装大小为 1 个字节。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size2">
<summary>封装大小为 2 个字节。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size4">
<summary>封装大小为 4 个字节。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size8">
<summary>封装大小为 8 个字节。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size16">
<summary>封装大小为 16 个字节。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size32">
<summary>封装大小为 32 个字节。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size64">
<summary>封装大小为 64 个字节。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size128">
<summary>封装大小为 128 个字节。</summary>
    </member>
    <member name="T:System.Reflection.Emit.ParameterBuilder">
<summary>创建或关联参数信息。</summary>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Attributes">
<summary>获取该参数的属性。</summary>
<returns>只读。检索此参数的属性。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.GetToken">
<summary>获取该参数的标记。</summary>
<returns>该参数的标记。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsIn">
<summary>获取一个值，该值指示这是否为输入参数。</summary>
<returns>检索这是否为输入参数。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsOptional">
<summary>获取一个值，该值指示此参数是否可选。</summary>
<returns>一个值，该值指示此参数是否可选。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsOut">
<summary>获取一个值，该值指示此参数是否为输出参数。</summary>
<returns>检索此参数是否为输出参数。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Name">
<summary>获取此参数的名称。</summary>
<returns>此参数的名称。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Position">
<summary>获取此参数的签名位置。</summary>
<returns>此参数的签名位置。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetConstant(System.Object)">
<summary>设置该参数的默认值。</summary>
<param name="defaultValue">该参数的默认值。 </param>
<exception cref="T:System.ArgumentException">该参数不是受支持类型之一。-或- <paramref name="defaultValue"/> 类型与该参数类型不匹配。-或- 该参数的类型为 <see cref="T:System.Object"/> 或其他引用类型，并且 <paramref name="defaultValue"/> 不为 null，该值无法赋给引用类型。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
<summary>[SECURITY CRITICAL] 使用指定的自定义属性 Blob 设置自定义属性。</summary>
<param name="con">自定义属性的构造函数。 </param>
<param name="binaryAttribute">表示属性的字节 Blob。 </param>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
<summary>使用自定义属性生成器设置自定义属性。</summary>
<param name="customBuilder">定义自定义属性的帮助器类的实例。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="con"/> 为 null。 </exception>
    </member>
    <member name="T:System.Reflection.Emit.ParameterToken">
<summary>ParameterToken 结构是由元数据返回以表示参数的标记的不透明表示形式。</summary>
    </member>
    <member name="F:System.Reflection.Emit.ParameterToken.Empty">
<summary><see cref="P:System.Reflection.Emit.ParameterToken.Token"/> 值为 0 的默认 ParameterToke。</summary>
    </member>
    <member name="M:System.Reflection.Emit.ParameterToken.Equals(System.Object)">
<summary>检查给定对象是否为 ParameterToken 的实例且等于此实例。</summary>
<returns>如果 <paramref name="obj"/> 是 ParameterToken 的实例并等于当前实例，则为 true；否则为 false。</returns>
<param name="obj">与此对象进行比较的对象。 </param>
    </member>
    <member name="M:System.Reflection.Emit.ParameterToken.Equals(System.Reflection.Emit.ParameterToken)">
<summary>指示当前实例是否等于指定的 <see cref="T:System.Reflection.Emit.ParameterToken"/>。</summary>
<returns>如果 <paramref name="obj"/> 的值等于当前实例的值，则为 true；否则为 false。</returns>
<param name="obj">要与当前实例进行比较的 <see cref="T:System.Reflection.Emit.ParameterToken"/>。</param>
    </member>
    <member name="M:System.Reflection.Emit.ParameterToken.GetHashCode">
<summary>生成该参数的哈希代码。</summary>
<returns>返回该参数的哈希代码。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ParameterToken.op_Equality(System.Reflection.Emit.ParameterToken,System.Reflection.Emit.ParameterToken)">
<summary>指示两个 <see cref="T:System.Reflection.Emit.ParameterToken"/> 结构是否相等。</summary>
<returns>如果 <paramref name="a"/> 等于 <paramref name="b"/>，则为 true；否则为 false。</returns>
<param name="a">要与 <paramref name="b"/> 进行比较的 <see cref="T:System.Reflection.Emit.ParameterToken"/>。</param>
<param name="b">要与 <paramref name="a"/> 进行比较的 <see cref="T:System.Reflection.Emit.ParameterToken"/>。</param>
    </member>
    <member name="M:System.Reflection.Emit.ParameterToken.op_Inequality(System.Reflection.Emit.ParameterToken,System.Reflection.Emit.ParameterToken)">
<summary>指示两个 <see cref="T:System.Reflection.Emit.ParameterToken"/> 结构是否不相等。</summary>
<returns>如果 <paramref name="a"/> 不等于 <paramref name="b"/>，则为 true；否则为 false。</returns>
<param name="a">要与 <paramref name="b"/> 进行比较的 <see cref="T:System.Reflection.Emit.ParameterToken"/>。</param>
<param name="b">要与 <paramref name="a"/> 进行比较的 <see cref="T:System.Reflection.Emit.ParameterToken"/>。</param>
    </member>
    <member name="P:System.Reflection.Emit.ParameterToken.Token">
<summary>检索此参数的元数据标记。</summary>
<returns>只读。检索此参数的元数据标记。</returns>
    </member>
    <member name="T:System.Reflection.Emit.PEFileKinds">
<summary>指定可移植可执行 (PE) 文件的类型。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PEFileKinds.Dll">
<summary>可移植可执行 (PE) 文件是 DLL。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PEFileKinds.ConsoleApplication">
<summary>该应用程序是控制台（不是基于 Windows 的）应用程序。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PEFileKinds.WindowApplication">
<summary>该应用程序是基于 Windows 的应用程序。</summary>
    </member>
    <member name="T:System.Reflection.Emit.PropertyBuilder">
<summary>为动态类型定义一个属性。</summary>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
<summary>添加可以与属性相关联的其中一个方法（而不是属性访问器）。</summary>
<param name="mdBuilder">一个表示另一个方法的 MethodBuilder 对象。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="mdBuilder"/> 为 null。 </exception>
      <exception cref="T:System.InvalidOperationException">
已对封闭类型调用了 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/>。 </exception>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Attributes">
<summary>获取此属性的特性。</summary>
<returns>此属性的特性，是由 <see cref="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])"/> 方法设置的。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanRead">
<summary>获取一个值，该值指示此属性是否有 get 访问器。</summary>
<returns>如果此属性有 get 访问器，并因此可以读取，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanWrite">
<summary>获取一个值，该值指示此属性是否有 set 访问器。</summary>
<returns>如果此属性有 set 访问器，并因此可以写入，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.DeclaringType">
<summary>获取声明该成员的类。</summary>
<returns>声明此成员的类型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)">
<summary>返回此属性的公共和非公共 get 和 set 的数组。不支持此方法。</summary>
<returns>一个包含匹配的 get 和 set 访问器的数组，如果此属性没有匹配的访问器，则为空数组。</returns>
<param name="nonPublic">如果为 true，则表示返回数组中的非公共方法；否则为 false。 </param>
<exception cref="T:System.NotSupportedException">不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)">
<summary>返回此属性的所有自定义属性的数组。不支持此方法。</summary>
<returns>一个包含所有自定义属性的数组。</returns>
<param name="inherit">如果为 true，则表示遍历此属性的继承链以查找自定义属性；否则为 false。 </param>
<exception cref="T:System.NotSupportedException">不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
<summary>返回由 <see cref="T:System.Type"/> 标识的自定义属性数组。不支持此方法。</summary>
<returns>在该反映成员上定义的自定义属性的数组，如果未在该成员上定义任何属性，则为 null。</returns>
<param name="attributeType">由类型标识的自定义属性数组。 </param>
<param name="inherit">如果为 true，则表示遍历此属性的继承链以查找自定义属性；否则为 false。 </param>
<exception cref="T:System.NotSupportedException">不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)">
<summary>返回此属性的公共或非公共 get 访问器。</summary>
<returns>如果 <paramref name="nonPublic"/> 为 true，则为此属性的 get 访问器。如果 <paramref name="nonPublic"/> 为 false 并且 get 访问器是非公共的，或者如果 <paramref name="nonPublic"/> 为 true 但不存在 get 访问器，则返回 null。</returns>
<param name="nonPublic">如果为 true，则返回非公共的访问器；否则为 false。 </param>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetIndexParameters">
<summary>返回此属性的所有索引参数的数组。不支持此方法。</summary>
<returns>一个包含索引的参数的数组。</returns>
<exception cref="T:System.NotSupportedException">不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
<summary>返回此属性的 set 访问器。</summary>
<returns>值 条件 此属性的 set 访问器。set 访问器是公共的。-或- <paramref name="nonPublic"/> 为 true 并且已为属性分配 set 访问器。null <paramref name="nonPublic"/> 为 false 并且 set 访问器不是公共的。-或- 没有 set 访问器，因为该属性为只读。  </returns>
<param name="nonPublic">如果为 true，则返回非公共的 set 访问器；否则为 false。 </param>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])">
<summary>通过调用索引化属性的 getter 方法来获取该属性的值。不支持此方法。</summary>
<returns>指定的索引化属性的值。</returns>
<param name="obj">将返回其属性值的对象。 </param>
<param name="index">索引化属性的可选索引值。对于非索引化属性，该值应为 null。 </param>
<exception cref="T:System.NotSupportedException">不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
<summary>获取属性的值，该属性具有指定的绑定、索引和 CultureInfo。不支持此方法。</summary>
<returns><paramref name="obj"/> 的属性值。</returns>
<param name="obj">将返回其属性值的对象。 </param>
<param name="invokeAttr">调用属性。这必须是来自 BindingFlags 的位标志：InvokeMethod、CreateInstance、Static、GetField、SetField、GetProperty 或 SetProperty。必须指定合适的调用属性。如果要调用静态成员，则必须设置 BindingFlags 的 Static 标志。 </param>
<param name="binder">一个启用绑定、参数类型强制、成员调用以及使用反射进行 MemberInfo 对象检索的对象。如果 <paramref name="binder"/> 为 null，则使用默认联编程序。 </param>
<param name="index">索引化属性的可选索引值。对于非索引化属性，该值应为 null。 </param>
<param name="culture">表示要为其本地化资源的区域性的 CultureInfo 对象。请注意，如果没有为此区域性本地化该资源，则在搜索匹配项的过程中将继续调用 CultureInfo.Parent 方法。如果该值为 null，则从 CultureInfo.CurrentUICulture 属性获得 CultureInfo。 </param>
<exception cref="T:System.NotSupportedException">不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)">
<summary>指示是否在此属性上定义一个或多个 <paramref name="attributeType"/> 的实例。不支持此方法。</summary>
<returns>如果对该属性定义了一个或多个 <paramref name="attributeType"/> 实例，则为 true；否则为 false。</returns>
<param name="attributeType">对其应用自定义属性的对象。 </param>
<param name="inherit">如果为 true，则表示遍历此属性的继承链以查找自定义属性；否则为 false。 </param>
<exception cref="T:System.NotSupportedException">不支持此方法。 </exception>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Module">
<summary>获取在其中定义了特定类型的模块，该类型即为声明当前属性的类型。</summary>
<returns>一个模块，在其中定义了声明当前属性的类型。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Name">
<summary>获取此成员的名称。</summary>
<returns>此成员的名称。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.PropertyToken">
<summary>获取该属性的标记。</summary>
<returns>该属性的标记。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.PropertyType">
<summary>获取属性的类型。</summary>
<returns>此属性的类型。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.ReflectedType">
<summary>获取在其上定义此属性的动态类型。</summary>
<returns>定义此属性的动态类型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
<summary>设置该属性的默认值。</summary>
<param name="defaultValue">该属性的默认值。 </param>
      <exception cref="T:System.InvalidOperationException">
已对封闭类型调用了 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/>。 </exception>
<exception cref="T:System.ArgumentException">该属性不是受支持类型之一。-或- <paramref name="defaultValue"/> 类型与该属性类型不匹配。-或- 该属性的类型为 <see cref="T:System.Object"/> 或其他引用类型，并且 <paramref name="defaultValue"/> 不为 null，该值无法赋给引用类型。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
<summary>[SECURITY CRITICAL] 使用表示自定义属性的指定二进制大对象 (BLOB) 应用该属性。</summary>
<param name="con">自定义属性的构造函数。 </param>
<param name="binaryAttribute">表示属性的字节 BLOB。 </param>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
<summary>使用自定义属性生成器应用自定义属性。</summary>
<param name="customBuilder">帮助器类的实例，用于定义要应用的自定义属性。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="customBuilder"/> 为 null。 </exception>
      <exception cref="T:System.InvalidOperationException">
已对封闭类型调用了 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/>。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)">
<summary>设置 get 访问器，该访问器是获取属性值的方法。</summary>
<param name="mdBuilder">获取属性值的方法。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="mdBuilder"/> 为 null。 </exception>
      <exception cref="T:System.InvalidOperationException">
已对封闭类型调用了 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/>。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)">
<summary>设置 set 访问器，该访问器是设置属性值的方法。</summary>
<param name="mdBuilder">用于设置属性值的方法。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="mdBuilder"/> 为 null。 </exception>
      <exception cref="T:System.InvalidOperationException">
已对封闭类型调用了 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/>。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])">
<summary>用索引属性的可选索引值设置该属性的值。不支持此方法。</summary>
<param name="obj">将设置其属性值的对象。 </param>
<param name="value">此属性的新值。 </param>
<param name="index">索引化属性的可选索引值。对于非索引化属性，该值应为 null。 </param>
<exception cref="T:System.NotSupportedException">不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
<summary>将给定对象的属性值设置为给定值。不支持此方法。</summary>
<param name="obj">将返回其属性值的对象。 </param>
<param name="value">此属性的新值。 </param>
<param name="invokeAttr">调用属性。这必须是来自 BindingFlags 的位标志：InvokeMethod、CreateInstance、Static、GetField、SetField、GetProperty 或 SetProperty。必须指定合适的调用属性。如果要调用静态成员，则必须设置 BindingFlags 的 Static 标志。 </param>
<param name="binder">一个启用绑定、参数类型强制、成员调用以及使用反射进行 MemberInfo 对象检索的对象。如果 <paramref name="binder"/> 为 null，则使用默认联编程序。 </param>
<param name="index">索引化属性的可选索引值。对于非索引化属性，该值应为 null。 </param>
<param name="culture">表示要为其本地化资源的区域性的 CultureInfo 对象。请注意，如果没有为此区域性本地化该资源，则在搜索匹配项的过程中将继续调用 CultureInfo.Parent 方法。如果该值为 null，则从 CultureInfo.CurrentUICulture 属性获得 CultureInfo。 </param>
<exception cref="T:System.NotSupportedException">不支持此方法。 </exception>
    </member>
    <member name="T:System.Reflection.Emit.PropertyToken">
<summary>PropertyToken 结构是由元数据返回以表示属性的 Token 的不透明表示形式。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PropertyToken.Empty">
<summary><see cref="P:System.Reflection.Emit.PropertyToken.Token"/> 值为 0 的默认 PropertyToken。</summary>
    </member>
    <member name="M:System.Reflection.Emit.PropertyToken.Equals(System.Object)">
<summary>检查给定对象是否为 PropertyToken 的实例且等于此实例。</summary>
<returns>如果 <paramref name="obj"/> 是 PropertyToken 的实例并等于当前实例，则为 true；否则为 false。</returns>
<param name="obj">该对象的对象。 </param>
    </member>
    <member name="M:System.Reflection.Emit.PropertyToken.Equals(System.Reflection.Emit.PropertyToken)">
<summary>指示当前实例是否等于指定的 <see cref="T:System.Reflection.Emit.PropertyToken"/>。</summary>
<returns>如果 <paramref name="obj"/> 的值等于当前实例的值，则为 true；否则为 false。</returns>
<param name="obj">要与当前实例进行比较的 <see cref="T:System.Reflection.Emit.PropertyToken"/>。</param>
    </member>
    <member name="M:System.Reflection.Emit.PropertyToken.GetHashCode">
<summary>生成此属性的哈希代码。</summary>
<returns>返回此属性的哈希代码。</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyToken.op_Equality(System.Reflection.Emit.PropertyToken,System.Reflection.Emit.PropertyToken)">
<summary>指示两个 <see cref="T:System.Reflection.Emit.PropertyToken"/> 结构是否相等。</summary>
<returns>如果 <paramref name="a"/> 等于 <paramref name="b"/>，则为 true；否则为 false。</returns>
<param name="a">要与 <paramref name="b"/> 进行比较的 <see cref="T:System.Reflection.Emit.PropertyToken"/>。</param>
<param name="b">要与 <paramref name="a"/> 进行比较的 <see cref="T:System.Reflection.Emit.PropertyToken"/>。</param>
    </member>
    <member name="M:System.Reflection.Emit.PropertyToken.op_Inequality(System.Reflection.Emit.PropertyToken,System.Reflection.Emit.PropertyToken)">
<summary>指示两个 <see cref="T:System.Reflection.Emit.PropertyToken"/> 结构是否不相等。</summary>
<returns>如果 <paramref name="a"/> 不等于 <paramref name="b"/>，则为 true；否则为 false。</returns>
<param name="a">要与 <paramref name="b"/> 进行比较的 <see cref="T:System.Reflection.Emit.PropertyToken"/>。</param>
<param name="b">要与 <paramref name="a"/> 进行比较的 <see cref="T:System.Reflection.Emit.PropertyToken"/>。</param>
    </member>
    <member name="P:System.Reflection.Emit.PropertyToken.Token">
<summary>检索此属性的元数据标记。</summary>
<returns>只读。检索此实例的元数据标记。</returns>
    </member>
    <member name="T:System.Reflection.Emit.SignatureHelper">
<summary>提供生成签名的方法。</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)">
<summary>为签名添加参数。</summary>
<param name="clsArgument">参数类型。 </param>
<exception cref="T:System.ArgumentException">已完成签名 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="clsArgument"/> 为 null。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Boolean)">
<summary>向签名添加指定类型的参数，指定该参数是否固定。</summary>
<param name="argument">参数类型。</param>
<param name="pinned">如果参数固定，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="argument"/> 为 null。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Type[],System.Type[])">
<summary>向签名添加具有指定自定义修饰符的参数。</summary>
<param name="argument">参数类型。</param>
<param name="requiredCustomModifiers">一个表示参数必需的自定义修饰符（例如 <see cref="T:System.Runtime.CompilerServices.IsConst"/> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed"/>）的类型数组。如果参数没有必需的自定义修饰符，请指定 null。。</param>
<param name="optionalCustomModifiers">一个表示参数可选的自定义修饰符（例如 <see cref="T:System.Runtime.CompilerServices.IsConst"/> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed"/>）的类型数组。如果参数没有可选的自定义修饰符，请指定 null。。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="argument"/> 为 null。-或- <paramref name="requiredCustomModifiers"/> 的一个元素或 <paramref name="optionalCustomModifiers"/> 为 null。</exception>
<exception cref="T:System.ArgumentException">已完成签名-或- 指定的自定义修饰符之一为数组类型。-或- 指定的自定义修饰符之一为开放泛型类型。也就是说，<see cref="P:System.Type.ContainsGenericParameters"/> 属性对于自定义修饰符为 true。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[],System.Type[][],System.Type[][])">
<summary>向签名添加具有指定自定义修饰符的一组参数。</summary>
<param name="arguments">要添加的参数的类型。</param>
<param name="requiredCustomModifiers">由类型数组组成的数组。每个类型数组均表示相应参数所必需的自定义修饰符，例如 <see cref="T:System.Runtime.CompilerServices.IsConst"/> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed"/>。如果某个特定参数没有必需的自定义修饰符，请指定 null，而不指定类型数组。如果没有参数具有必需的自定义修饰符，请指定 null，而不指定由数组构成的数组。</param>
<param name="optionalCustomModifiers">由类型数组组成的数组。每个类型数组均表示相应参数的可选自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst"/> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed"/>。如果某个特定参数没有可选的自定义修饰符，请指定 null，而不指定类型数组。如果没有参数具有可选的自定义修饰符，请指定 null，而不指定由数组构成的数组。</param>
<exception cref="T:System.ArgumentNullException"><paramref name="arguments"/> 的一个元素为 null。-或- 其中一个指定的自定义修饰符为 null。（但是，可以为任何参数的自定义修饰符的数组指定 null。）</exception>
<exception cref="T:System.ArgumentException">已完成签名-或- 指定的自定义修饰符之一为数组类型。-或- 指定的自定义修饰符之一为开放泛型类型。也就是说，<see cref="P:System.Type.ContainsGenericParameters"/> 属性对于自定义修饰符为 true。-或- <paramref name="requiredCustomModifiers"/> 或 <paramref name="optionalCustomModifiers"/> 的大小与 <paramref name="arguments"/> 的大小不相等。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddSentinel">
<summary>标记 vararg 固定部分的结尾。这仅在调用方创建 vararg 签名调用站点时使用。</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.Equals(System.Object)">
<summary>检查该实例是否等于给定对象。</summary>
<returns>如果给定对象是 SignatureHelper 并且表示同一签名，则为 true；否则为 false。</returns>
<param name="obj">应与此实例进行比较的对象。 </param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)">
<summary>返回字段的签名帮助器。</summary>
<returns>字段的 SignatureHelper 对象。</returns>
<param name="mod">包含为其请求 SignatureHelper 的字段的动态模块。 </param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetHashCode">
<summary>创建并返回此实例的哈希代码。</summary>
<returns>返回基于名称的哈希代码。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper">
<summary>返回局部变量的签名帮助器。</summary>
<returns>用于局部变量的 <see cref="T:System.Reflection.Emit.SignatureHelper"/>。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)">
<summary>返回局部变量的签名帮助器。</summary>
<returns>局部变量的 SignatureHelper 对象。</returns>
<param name="mod">包含为其请求 SignatureHelpe 的局部变量的动态模块。 </param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)">
<summary>已知方法的调用约定和返回类型，返回方法的签名帮助器。</summary>
<returns>方法的 SignatureHelper 对象。</returns>
<param name="callingConvention">该方法的调用约定。 </param>
<param name="returnType">方法的返回类型，对于 void 返回类型为 null（在 Visual Basic 中为 Sub 过程）。 </param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)">
<summary>已知方法的模块、调用约定和返回类型，返回方法的签名帮助器。</summary>
<returns>方法的 SignatureHelper 对象。</returns>
<param name="mod">包含为其请求 SignatureHelper 的方法的 <see cref="T:System.Reflection.Emit.ModuleBuilder"/>。 </param>
<param name="callingConvention">该方法的调用约定。 </param>
<param name="returnType">方法的返回类型，对于 void 返回类型为 null（在 Visual Basic 中为 Sub 过程）。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="mod"/> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="mod"/> 不是 <see cref="T:System.Reflection.Emit.ModuleBuilder"/>。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Runtime.InteropServices.CallingConvention,System.Type)">
<summary>已知方法的模块、非托管调用约定和返回类型，返回方法的签名帮助器。</summary>
<returns>方法的 SignatureHelper 对象。</returns>
<param name="mod">包含为其请求 SignatureHelper 的方法的 <see cref="T:System.Reflection.Emit.ModuleBuilder"/>。 </param>
<param name="unmanagedCallConv">此方法的非托管调用约定。 </param>
<param name="returnType">方法的返回类型，对于 void 返回类型为 null（在 Visual Basic 中为 Sub 过程）。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="mod"/> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="mod"/> 不是 <see cref="T:System.Reflection.Emit.ModuleBuilder"/>。-或- <paramref name="unmanagedCallConv"/> 是未知的非托管调用约定。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])">
<summary>在已知方法的模块、返回类型和参数类型的情况下，返回具有标准调用约定的方法的签名帮助器。</summary>
<returns>方法的 SignatureHelper 对象。</returns>
<param name="mod">包含为其请求 SignatureHelper 的方法的 <see cref="T:System.Reflection.Emit.ModuleBuilder"/>。 </param>
<param name="returnType">方法的返回类型，对于 void 返回类型为 null（在 Visual Basic 中为 Sub 过程）。 </param>
<param name="parameterTypes">方法的参数类型，如果方法没有参数，则为 null。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="mod"/> 为 null。-或- <paramref name="parameterTypes"/> 的一个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="mod"/> 不是 <see cref="T:System.Reflection.Emit.ModuleBuilder"/>。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Runtime.InteropServices.CallingConvention,System.Type)">
<summary>已知方法的非托管调用约定和返回类型，返回方法的签名帮助器。</summary>
<returns>方法的 SignatureHelper 对象。</returns>
<param name="unmanagedCallingConvention">此方法的非托管调用约定。 </param>
<param name="returnType">方法的返回类型，对于 void 返回类型为 null（在 Visual Basic 中为 Sub 过程）。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="unmanagedCallConv"/> 是未知的非托管调用约定。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])">
<summary>在已知包含属性、属性类型和属性参数的动态模块的情况下，返回属性的签名帮助器。</summary>
<returns>属性的 <see cref="T:System.Reflection.Emit.SignatureHelper"/> 对象。</returns>
<param name="mod">包含为其请求 <see cref="T:System.Reflection.Emit.SignatureHelper"/> 的属性的 <see cref="T:System.Reflection.Emit.ModuleBuilder"/>。</param>
<param name="returnType">属性类型。</param>
<param name="parameterTypes">参数类型，如果属性没有参数，则为 null。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="mod"/> 为 null。-或- <paramref name="parameterTypes"/> 的一个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="mod"/> 不是 <see cref="T:System.Reflection.Emit.ModuleBuilder"/>。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
<summary>在已知包含属性、属性类型、属性参数以及返回类型和参数的自定义修饰符的动态模块的情况下，返回属性的签名帮助器。</summary>
<returns>属性的 <see cref="T:System.Reflection.Emit.SignatureHelper"/> 对象。</returns>
<param name="mod">包含为其请求 <see cref="T:System.Reflection.Emit.SignatureHelper"/> 的属性的 <see cref="T:System.Reflection.Emit.ModuleBuilder"/>。</param>
<param name="returnType">属性类型。</param>
<param name="requiredReturnTypeCustomModifiers">一个表示返回类型必需的自定义修饰符的类型数组，（如 <see cref="T:System.Runtime.CompilerServices.IsConst"/> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed"/>）。如果返回类型没有必需的自定义修饰符，请指定 null。</param>
<param name="optionalReturnTypeCustomModifiers">一个表示返回类型的可选自定义修饰符的类型数组，（如 <see cref="T:System.Runtime.CompilerServices.IsConst"/> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed"/>）。如果返回类型没有可选的自定义修饰符，请指定 null。</param>
<param name="parameterTypes">属性的参数类型，如果属性没有参数，则为 null。</param>
<param name="requiredParameterTypeCustomModifiers">由类型数组组成的数组。每个类型数组均表示属性的相应参数所必需的自定义修饰符。如果某个特定参数没有必需的自定义修饰符，请指定 null，而不指定类型数组。如果属性没有参数，或者所有参数都没有必需的自定义修饰符，请指定 null，而不要指定由数组组成的数组。</param>
<param name="optionalParameterTypeCustomModifiers">由类型数组组成的数组。每个类型数组均表示属性的相应参数的可选自定义修饰符。如果某个特定参数没有可选的自定义修饰符，请指定 null，而不指定类型数组。如果属性没有参数，或者所有参数都没有可选的自定义修饰符，请指定 null，而不要指定由数组组成的数组。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="mod"/> 为 null。-或- <paramref name="parameterTypes"/> 的一个元素为 null。-或- 其中一个指定的自定义修饰符为 null。（但是，可以为任何参数的自定义修饰符的数组指定 null。）</exception>
<exception cref="T:System.ArgumentException">已完成签名-或- <paramref name="mod"/> 不是 <see cref="T:System.Reflection.Emit.ModuleBuilder"/>。-或- 指定的自定义修饰符之一为数组类型。-或- 指定的自定义修饰符之一为开放泛型类型。也就是说，<see cref="P:System.Type.ContainsGenericParameters"/> 属性对于自定义修饰符为 true。-或- <paramref name="requiredParameterTypeCustomModifiers"/> 或 <paramref name="optionalParameterTypeCustomModifiers"/> 的大小不等于 <paramref name="parameterTypes"/> 的大小。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetSignature">
<summary>在签名中添加结束标记并将签名标记为已完成，以便不能再添加更多的标记。</summary>
<returns>返回由完整签名组成的字节数组。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.ToString">
<summary>返回表示签名参数的字符串。</summary>
<returns>返回表示该签名的参数的字符串。</returns>
    </member>
    <member name="T:System.Reflection.Emit.SignatureToken">
<summary>表示由元数据返回以表示签名的 Token。</summary>
    </member>
    <member name="F:System.Reflection.Emit.SignatureToken.Empty">
<summary><see cref="P:System.Reflection.Emit.SignatureToken.Token"/> 值为 0 的默认 SignatureToken。</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureToken.Equals(System.Object)">
<summary>检查给定对象是否为 SignatureToken 的实例且等于此实例。</summary>
<returns>如果 <paramref name="obj"/> 是 SignatureToken 的一个实例并且等于此对象，则为 true；否则为 false。</returns>
<param name="obj">与此 SignatureToken 进行比较的对象。 </param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureToken.Equals(System.Reflection.Emit.SignatureToken)">
<summary>指示当前实例是否等于指定的 <see cref="T:System.Reflection.Emit.SignatureToken"/>。</summary>
<returns>如果 <paramref name="obj"/> 的值等于当前实例的值，则为 true；否则为 false。</returns>
<param name="obj">要与当前实例进行比较的 <see cref="T:System.Reflection.Emit.SignatureToken"/>。</param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureToken.GetHashCode">
<summary>生成该签名的哈希代码。</summary>
<returns>返回该签名的哈希代码。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureToken.op_Equality(System.Reflection.Emit.SignatureToken,System.Reflection.Emit.SignatureToken)">
<summary>指示两个 <see cref="T:System.Reflection.Emit.SignatureToken"/> 结构是否相等。</summary>
<returns>如果 <paramref name="a"/> 等于 <paramref name="b"/>，则为 true；否则为 false。</returns>
<param name="a">要与 <paramref name="b"/> 进行比较的 <see cref="T:System.Reflection.Emit.SignatureToken"/>。</param>
<param name="b">要与 <paramref name="a"/> 进行比较的 <see cref="T:System.Reflection.Emit.SignatureToken"/>。</param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureToken.op_Inequality(System.Reflection.Emit.SignatureToken,System.Reflection.Emit.SignatureToken)">
<summary>指示两个 <see cref="T:System.Reflection.Emit.SignatureToken"/> 结构是否不相等。</summary>
<returns>如果 <paramref name="a"/> 不等于 <paramref name="b"/>，则为 true；否则为 false。</returns>
<param name="a">要与 <paramref name="b"/> 进行比较的 <see cref="T:System.Reflection.Emit.SignatureToken"/>。</param>
<param name="b">要与 <paramref name="a"/> 进行比较的 <see cref="T:System.Reflection.Emit.SignatureToken"/>。</param>
    </member>
    <member name="P:System.Reflection.Emit.SignatureToken.Token">
<summary>检索此方法的局部变量签名的元数据标记。</summary>
<returns>只读。检索该签名的元数据标记。</returns>
    </member>
    <member name="T:System.Reflection.Emit.StackBehaviour">
<summary>描述如何将值推到堆栈上或从堆栈中弹出。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop0">
<summary>不从堆栈中弹出任何值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop1">
<summary>从堆栈中弹出一个值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop1_pop1">
<summary>对于第一个操作数，从堆栈中弹出 1 个值；对于第二个操作数，从堆栈中弹出 1 个值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi">
<summary>从堆栈中弹出一个 32 位整数。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_pop1">
<summary>对于第一个操作数，从堆栈中弹出一个 32 位整数；对于第二个操作数，从堆栈中弹出一个值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi">
<summary>对于第一个操作数，从堆栈中弹出一个 32 位整数；对于第二个操作数，从堆栈中弹出一个 32 位整数。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi8">
<summary>对于第一个操作数，从堆栈中弹出一个 32 位整数；对于第二个操作数，从堆栈中弹出一个 64 位整数。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi_popi">
<summary>对于第一个操作数，从堆栈中弹出一个 32 位整数；对于第二个操作数，从堆栈中弹出一个 32 位整数；对于第三个操作数，从堆栈中弹出一个 32 位整数。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popr4">
<summary>对于第一个操作数，从堆栈弹出一个 32 位整数，对于第二个操作数，从堆栈弹出一个 32 位浮点数。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popr8">
<summary>对于第一个操作数，从堆栈弹出一个 64 位整数，对于第二个操作数，从堆栈弹出一个 32 位浮点数。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref">
<summary>从堆栈中弹出一个引用。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_pop1">
<summary>对于第一个操作数，从堆栈中弹出一个引用；对于第二个操作数，从堆栈中弹出一个值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi">
<summary>对于第一个操作数，从堆栈中弹出一个引用；对于第二个操作数，从堆栈中弹出一个 32 位整数。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popi">
<summary>对于第一个操作数，从堆栈中弹出一个引用；对于第二个操作数，从堆栈中弹出一个值；对于第三个操作数，从堆栈中弹出一个值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popi8">
<summary>对于第一个操作数，从堆栈弹出一个引用，对于第二个操作数，从堆栈弹出一个值，对于第三个操作数，从堆栈弹出一个 64 位整数。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popr4">
<summary>对于第一个操作数，从堆栈弹出一个引用，对于第二个操作数，从堆栈弹出一个值，对于第三个操作数，从堆栈弹出一个 32 位整数。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popr8">
<summary>对于第一个操作数，从堆栈中弹出一个引用；对于第二个操作数，从堆栈中弹出一个值；对于第三个操作数，从堆栈中弹出一个 64 位浮点数。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popref">
<summary>对于第一个操作数，从堆栈中弹出一个引用；对于第二个操作数，从堆栈中弹出一个值；对于第三个操作数，从堆栈中弹出一个引用。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push0">
<summary>不将任何值推到堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push1">
<summary>将一个值推到堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push1_push1">
<summary>对于第一个操作数，将 1 个值推到堆栈上；对于第二个操作数，将 1 个值推到堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushi">
<summary>将一个 32 位整数推入堆栈中。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushi8">
<summary>将一个 64 位整数推入堆栈中。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushr4">
<summary>将一个 32 位浮点数推入堆栈中。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushr8">
<summary>将一个 64 位浮点数推入堆栈中。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushref">
<summary>将一个引用推到堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Varpop">
<summary>从堆栈中弹出一个变量。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Varpush">
<summary>将一个变量推到堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_pop1">
<summary>对于第一个操作数，从堆栈弹出一个引用，对于第二个操作数，从堆栈弹出一个值，对于第三个操作数，从堆栈弹出一个 32 位整数。</summary>
    </member>
    <member name="T:System.Reflection.Emit.StringToken">
<summary>表示用于表示字符串的标记。</summary>
    </member>
    <member name="M:System.Reflection.Emit.StringToken.Equals(System.Object)">
<summary>检查给定对象是否为 StringToken 的实例且等于此实例。</summary>
<returns>如果 <paramref name="obj"/> 是 StringToken 的一个实例并且等于此对象，则为 true；否则为 false。</returns>
<param name="obj">与此 StringToken 进行比较的对象。 </param>
    </member>
    <member name="M:System.Reflection.Emit.StringToken.Equals(System.Reflection.Emit.StringToken)">
<summary>指示当前实例是否等于指定的 <see cref="T:System.Reflection.Emit.StringToken"/>。</summary>
<returns>如果 <paramref name="obj"/> 的值等于当前实例的值，则为 true；否则为 false。</returns>
<param name="obj">要与当前实例进行比较的 <see cref="T:System.Reflection.Emit.StringToken"/>。</param>
    </member>
    <member name="M:System.Reflection.Emit.StringToken.GetHashCode">
<summary>返回该字符串的哈希代码。</summary>
<returns>返回基础字符串标记。</returns>
    </member>
    <member name="M:System.Reflection.Emit.StringToken.op_Equality(System.Reflection.Emit.StringToken,System.Reflection.Emit.StringToken)">
<summary>指示两个 <see cref="T:System.Reflection.Emit.StringToken"/> 结构是否相等。</summary>
<returns>如果 <paramref name="a"/> 等于 <paramref name="b"/>，则为 true；否则为 false。</returns>
<param name="a">要与 <paramref name="b"/> 进行比较的 <see cref="T:System.Reflection.Emit.StringToken"/>。</param>
<param name="b">要与 <paramref name="a"/> 进行比较的 <see cref="T:System.Reflection.Emit.StringToken"/>。</param>
    </member>
    <member name="M:System.Reflection.Emit.StringToken.op_Inequality(System.Reflection.Emit.StringToken,System.Reflection.Emit.StringToken)">
<summary>指示两个 <see cref="T:System.Reflection.Emit.StringToken"/> 结构是否不相等。</summary>
<returns>如果 <paramref name="a"/> 不等于 <paramref name="b"/>，则为 true；否则为 false。</returns>
<param name="a">要与 <paramref name="b"/> 进行比较的 <see cref="T:System.Reflection.Emit.StringToken"/>。</param>
<param name="b">要与 <paramref name="a"/> 进行比较的 <see cref="T:System.Reflection.Emit.StringToken"/>。</param>
    </member>
    <member name="P:System.Reflection.Emit.StringToken.Token">
<summary>检索该字符串的元数据标记。</summary>
<returns>只读。检索该字符串的元数据标记。</returns>
    </member>
    <member name="T:System.Reflection.Emit.TypeBuilder">
<summary>在运行时定义并创建类的新实例。</summary>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation(System.Type)">
<summary>添加此类型实现的接口。</summary>
<param name="interfaceType">此类型实现的接口。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="interfaceType"/> 为 null。 </exception>
<exception cref="T:System.InvalidOperationException">该类型是以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/> 创建的。 </exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Assembly">
<summary>获取包含此类型定义的动态程序集。</summary>
<returns>包含此类型定义的动态程序集。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName">
<summary>获取由程序集的显示名称限定的此类型的完整名称。</summary>
<returns>由程序集的显示名称限定的此类型的完整名称。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.BaseType">
<summary>获取此类型的基类型。</summary>
<returns>此类型的基类型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.CreateType">
<summary>创建类的 <see cref="T:System.Type"/> 对象。定义了类的字段和方法后，调用 CreateType 以加载其 Type 对象。</summary>
<returns>此类的新对象。</returns>
<exception cref="T:System.InvalidOperationException">尚未创建封闭类型。-或- 此类型是非抽象的并且包含抽象方法。-或- 此类型不是抽象类或接口，并且包含不带方法体的方法。 </exception>
<exception cref="T:System.NotSupportedException">此类型包含无效的 Microsoft 中间语言 (MSIL) 代码。-或- 分支目标是使用 1 字节的偏移量指定的，但是该目标与分支之间的距离大于 127 字节。 </exception>
<exception cref="T:System.TypeLoadException">无法加载该类型。例如，它包含一个具有调用约定 <see cref="F:System.Reflection.CallingConventions.HasThis"/> 的 static 方法，或者具有一个依赖于尚未创建的嵌套类型的字段。</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.DeclaringMethod">
<summary>获取当前泛型类型参数的声明方法。</summary>
<returns>如果当前类型是泛型类型参数，则为声明当前类型的方法；否则为 null。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.DeclaringType">
<summary>获取声明此类型的类型。</summary>
<returns>声明此类型的类型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[])">
<summary>用给定的属性和签名，向类型中添加新的构造函数。</summary>
<returns>已定义的构造函数。</returns>
<param name="attributes">构造函数的属性。 </param>
<param name="callingConvention">构造函数的调用约定。 </param>
<param name="parameterTypes">构造函数的参数类型。 </param>
<exception cref="T:System.InvalidOperationException">该类型是以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/> 创建的。-或- 对于当前动态类型，<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType"/> 属性为 true，而 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition"/> 属性为 false。-或- 当前类型为接口。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[],System.Type[][],System.Type[][])">
<summary>用给定的属性、签名和自定义修饰符，向类型中添加新的构造函数。</summary>
<returns>已定义的构造函数。</returns>
<param name="attributes">构造函数的属性。 </param>
<param name="callingConvention">构造函数的调用约定。 </param>
<param name="parameterTypes">构造函数的参数类型。 </param>
<param name="requiredCustomModifiers">由类型数组组成的数组。每个类型数组均表示相应参数所必需的自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst"/>。如果某个特定参数没有必需的自定义修饰符，请指定 null，而不指定类型数组。如果没有参数具有必需的自定义修饰符，请指定 null，而不指定由数组构成的数组。</param>
<param name="optionalCustomModifiers">由类型数组组成的数组。每个类型数组均表示相应参数的可选自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst"/>。如果某个特定参数没有可选的自定义修饰符，请指定 null，而不指定类型数组。如果没有参数具有可选的自定义修饰符，请指定 null，而不指定由数组构成的数组。</param>
<exception cref="T:System.ArgumentException"><paramref name="requiredCustomModifiers"/> 或 <paramref name="optionalCustomModifiers"/> 的大小与 <paramref name="parameterTypes"/> 的大小不相等。</exception>
<exception cref="T:System.InvalidOperationException">该类型是以前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/> 创建的。-或- 对于当前动态类型，<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType"/> 属性为 true，而 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition"/> 属性为 false。-或- 当前类型为接口。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)">
<summary>定义默认的构造函数。这里定义的构造函数只调用父类的默认构造函数。</summary>
<returns>已定义的构造函数。</returns>
<param name="attributes">MethodAttributes 对象，表示应用于构造函数的属性。 </param>
<exception cref="T:System.NotSupportedException">父类型（基类型）没有默认构造函数。 </exception>
<exception cref="T:System.InvalidOperationException">该类型是以前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/> 创建的。-或- 对于当前动态类型，<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType"/> 属性为 true，而 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition"/> 属性为 false。-或- 当前类型为接口。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineEvent(System.String,System.Reflection.EventAttributes,System.Type)">
<summary>用给定的名称、属性和事件类型，向类型中添加新事件。</summary>
<returns>已定义的事件。</returns>
<param name="name">事件名。<paramref name="name"/> 不能包含嵌入的 null 值。 </param>
<param name="attributes">事件的属性。 </param>
<param name="eventtype">事件的类型。 </param>
<exception cref="T:System.ArgumentException"><paramref name="name"/> 的长度为零。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。-或- <paramref name="eventtype"/> 为 null。 </exception>
<exception cref="T:System.InvalidOperationException">该类型是以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/> 创建的。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Reflection.FieldAttributes)">
<summary>用给定的名称、属性和字段类型，向类型中添加新字段。</summary>
<returns>定义的字段。</returns>
<param name="fieldName">字段名。<paramref name="fieldName"/> 不能包含嵌入的 null 值。 </param>
<param name="type">字段的类型 </param>
<param name="attributes">字段的属性。 </param>
<exception cref="T:System.ArgumentException"><paramref name="fieldName"/> 的长度为零。-或- <paramref name="type"/> 为 System.Void。-或- 为该字段的父类指定了总大小。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="fieldName"/> 为 null。 </exception>
<exception cref="T:System.InvalidOperationException">该类型是以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/> 创建的。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Type[],System.Type[],System.Reflection.FieldAttributes)">
<summary>用给定的名称、属性、字段类型和自定义修饰符，向类型中添加新字段。</summary>
<returns>定义的字段。</returns>
<param name="fieldName">字段名。<paramref name="fieldName"/> 不能包含嵌入的 null 值。 </param>
<param name="type">字段的类型 </param>
<param name="requiredCustomModifiers">一个表示字段所必需的自定义修饰符的类型数组，如 <see cref="T:System.Runtime.CompilerServices.IsConst"/>。</param>
<param name="optionalCustomModifiers">一个表示字段的可选自定义修饰符的类型数组，如 <see cref="T:System.Runtime.CompilerServices.IsConst"/>。</param>
<param name="attributes">字段的属性。 </param>
<exception cref="T:System.ArgumentException"><paramref name="fieldName"/> 的长度为零。-或- <paramref name="type"/> 为 System.Void。-或- 为该字段的父类指定了总大小。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="fieldName"/> 为 null。 </exception>
<exception cref="T:System.InvalidOperationException">该类型是以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/> 创建的。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])">
<summary>为当前类型定义泛型类型参数，指定参数的个数和名称，并返回一个 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder"/> 对象数组，这些对象可用于设置参数的约束。</summary>
<returns>对象的数组，这些对象可用于为当前类型定义泛型类型参数的约束。</returns>
<param name="names">泛型类型参数的名称数组。</param>
<exception cref="T:System.InvalidOperationException">已为此类型定义了泛型类型参数。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="names"/> 为 null。-或- <paramref name="names"/> 的一个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="names"/> 为空数组。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)">
<summary>[SECURITY CRITICAL] 在可移植可执行 (PE) 文件的 .sdata 部分定义已初始化的数据字段。</summary>
<returns>引用这些数据的字段。</returns>
<param name="name">用于引用数据的名称。<paramref name="name"/> 不能包含嵌入的 null 值。 </param>
<param name="data">数据的二进制大对象 (BLOB)。 </param>
<param name="attributes">该字段的属性。 </param>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes)">
<summary>使用指定的名称和方法属性向类型中添加新方法。</summary>
<returns>已定义的方法。</returns>
<param name="name">方法名。<paramref name="name"/> 不能包含嵌入的 null 值。 </param>
<param name="attributes">该方法的属性。 </param>
<exception cref="T:System.ArgumentException"><paramref name="name"/> 的长度为零。-或- 此方法的父级类型是一个接口，而且此方法不是虚拟的（Visual Basic 中为 Overridable）。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
<exception cref="T:System.InvalidOperationException">该类型是以前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/> 创建的。-或- 对于当前动态类型，<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType"/> 属性为 true，而 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition"/> 属性为 false。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions)">
<summary>使用指定名称、方法属性和调用约定向类型中添加新方法。</summary>
<returns>已定义的方法。</returns>
<param name="name">方法名。<paramref name="name"/> 不能包含嵌入的 null 值。 </param>
<param name="attributes">该方法的属性。 </param>
<param name="callingConvention">该方法的调用约定。 </param>
<exception cref="T:System.ArgumentException"><paramref name="name"/> 的长度为零。-或- 此方法的父级类型是一个接口，而且此方法不是虚拟的（Visual Basic 中为 Overridable）。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
<exception cref="T:System.InvalidOperationException">该类型是以前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/> 创建的。-或- 对于当前动态类型，<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType"/> 属性为 true，而 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition"/> 属性为 false。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
<summary>使用指定的名称、方法属性、调用约定和方法签名向类型中添加新方法。</summary>
<returns>已定义的方法。</returns>
<param name="name">方法名。<paramref name="name"/> 不能包含嵌入的 null 值。 </param>
<param name="attributes">该方法的属性。 </param>
<param name="callingConvention">该方法的调用约定。 </param>
<param name="returnType">该方法的返回类型。 </param>
<param name="parameterTypes">该方法的参数的类型。 </param>
<exception cref="T:System.ArgumentException"><paramref name="name"/> 的长度为零。-或- 此方法的父级类型是一个接口，而且此方法不是虚拟的（Visual Basic 中为 Overridable）。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
<exception cref="T:System.InvalidOperationException">该类型是以前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/> 创建的。-或- 对于当前动态类型，<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType"/> 属性为 true，而 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition"/> 属性为 false。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
<summary>使用指定的名称、方法属性、调用约定、方法签名和自定义修饰符向类型中添加新方法。</summary>
<returns>已定义的方法。</returns>
<param name="name">方法名。<paramref name="name"/> 不能包含嵌入的 null 值。 </param>
<param name="attributes">该方法的属性。 </param>
<param name="callingConvention">该方法的调用约定。 </param>
<param name="returnType">该方法的返回类型。 </param>
<param name="returnTypeRequiredCustomModifiers">一个类型数组，表示该方法的返回类型的必需的自定义修饰符（如 <see cref="T:System.Runtime.CompilerServices.IsConst"/>）。如果返回类型没有必需的自定义修饰符，请指定 null。</param>
<param name="returnTypeOptionalCustomModifiers">一个类型数组，表示该方法的返回类型的可选自定义修饰符（如 <see cref="T:System.Runtime.CompilerServices.IsConst"/>）。如果返回类型没有可选的自定义修饰符，请指定 null。</param>
<param name="parameterTypes">该方法的参数的类型。</param>
<param name="parameterTypeRequiredCustomModifiers">由类型数组组成的数组。每个类型数组均表示相应参数所必需的自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst"/>。如果某个特定参数没有必需的自定义修饰符，请指定 null，而不指定类型数组。如果没有参数具有必需的自定义修饰符，请指定 null，而不指定由数组构成的数组。</param>
<param name="parameterTypeOptionalCustomModifiers">由类型数组组成的数组。每个类型数组均表示相应参数的可选自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst"/>。如果某个特定参数没有可选的自定义修饰符，请指定 null，而不指定类型数组。如果没有参数具有可选的自定义修饰符，请指定 null，而不指定由数组构成的数组。</param>
<exception cref="T:System.ArgumentException"><paramref name="name"/> 的长度为零。-或- 此方法的父级类型是一个接口，而且此方法不是虚拟的（Visual Basic 中为 Overridable）。-或- <paramref name="parameterTypeRequiredCustomModifiers"/> 或 <paramref name="parameterTypeOptionalCustomModifiers"/> 的大小与 <paramref name="parameterTypes"/> 的大小不相等。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
<exception cref="T:System.InvalidOperationException">该类型是以前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/> 创建的。-或- 对于当前动态类型，<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType"/> 属性为 true，而 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition"/> 属性为 false。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
<summary>使用指定的名称、方法属性和调用约定向类型中添加新方法。</summary>
<returns>已定义的方法。</returns>
<param name="name">方法名。<paramref name="name"/> 不能包含嵌入的 null 值。 </param>
<param name="attributes">该方法的属性。 </param>
<param name="returnType">该方法的返回类型。 </param>
<param name="parameterTypes">该方法的参数的类型。 </param>
<exception cref="T:System.ArgumentException"><paramref name="name"/> 的长度为零。-或- 此方法的父级类型是一个接口，而且此方法不是虚拟的（Visual Basic 中为 Overridable）。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
<exception cref="T:System.InvalidOperationException">该类型是以前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/> 创建的。-或- 对于当前动态类型，<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType"/> 属性为 true，而 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition"/> 属性为 false。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethodOverride(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
<summary>指定实现给定方法声明的给定方法体，可能使用不同名称。</summary>
<param name="methodInfoBody">要使用的方法体。 </param>
<param name="methodInfoDeclaration">要使用其声明的方法。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="methodInfoBody"/> 不属于此类。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="methodInfoBody"/> 或 <paramref name="methodInfoDeclaration"/> 为 null。 </exception>
<exception cref="T:System.InvalidOperationException">该类型是以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/> 创建的。-或- <paramref name="methodInfoBody"/> 的声明类型不是由此 <see cref="T:System.Reflection.Emit.TypeBuilder"/> 表示的类型。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String)">
<summary>已知名称，定义嵌套类型。</summary>
<returns>已定义的嵌套类型。</returns>
<param name="name">类型的简称。<paramref name="name"/> 不能包含嵌入的空值。 </param>
<exception cref="T:System.ArgumentException"><paramref name="name"/> 的长度为零。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes)">
<summary>已知名称和属性，定义嵌套类型。</summary>
<returns>已定义的嵌套类型。</returns>
<param name="name">类型的简称。<paramref name="name"/> 不能包含嵌入的空值。 </param>
<param name="attr">该类型的属性。 </param>
<exception cref="T:System.ArgumentException">未指定嵌套属性。-或- 此类型是密封的。-或- 此类型是数组。-或- 此类型是接口，但嵌套类型不是接口。-或- <paramref name="name"/> 的长度为零。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)">
<summary>已知嵌套类型的名称、属性和它扩展的类型，定义嵌套类型。</summary>
<returns>已定义的嵌套类型。</returns>
<param name="name">类型的简称。<paramref name="name"/> 不能包含嵌入的空值。 </param>
<param name="attr">该类型的属性。 </param>
<param name="parent">嵌套类型扩展的类型。 </param>
<exception cref="T:System.ArgumentException">未指定嵌套属性。-或- 此类型是密封的。-或- 此类型是数组。-或- 此类型是接口，但嵌套类型不是接口。-或- <paramref name="name"/> 的长度为零。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)">
<summary>[SECURITY CRITICAL] 已知嵌套类型的名称、属性、类型的总大小和它扩展的类型，定义嵌套类型。</summary>
<returns>已定义的嵌套类型。</returns>
<param name="name">类型的简称。<paramref name="name"/> 不能包含嵌入的空值。 </param>
<param name="attr">该类型的属性。 </param>
<param name="parent">嵌套类型扩展的类型。 </param>
<param name="typeSize">类型的总大小。 </param>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)">
<summary>[SECURITY CRITICAL] 已知嵌套类型的名称、属性、它扩展的类型和包装大小，定义嵌套类型。</summary>
<returns>已定义的嵌套类型。</returns>
<param name="name">类型的简称。<paramref name="name"/> 不能包含嵌入的空值。 </param>
<param name="attr">该类型的属性。 </param>
<param name="parent">嵌套类型扩展的类型。 </param>
<param name="packSize">类型的打包大小。 </param>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
<summary>已知嵌套类型的名称、属性、它扩展的类型和它实现的接口，定义嵌套类型。</summary>
<returns>已定义的嵌套类型。</returns>
<param name="name">类型的简称。<paramref name="name"/> 不能包含嵌入的空值。 </param>
<param name="attr">该类型的属性。 </param>
<param name="parent">嵌套类型扩展的类型。 </param>
<param name="interfaces">嵌套类型实现的接口。 </param>
<exception cref="T:System.ArgumentException">未指定嵌套属性。-或- 此类型是密封的。-或- 此类型是数组。-或- 此类型是接口，但嵌套类型不是接口。-或- <paramref name="name"/> 的长度为零。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。-或- <paramref name="interfaces"/> 数组的一个元素为 null。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
<summary>[SECURITY CRITICAL] 在给定了方法名称、在其中定义方法的 DLL 的名称、方法的属性、方法的调用约定、方法的返回类型、方法的参数类型以及 PInvoke 标志的情况下，定义一个 PInvoke 方法。</summary>
<returns>已定义的 PInvoke方法。</returns>
<param name="name">PInvoke 方法的名称。<paramref name="name"/> 不能包含嵌入的 null 值。 </param>
<param name="dllName">在其中定义 PInvoke 方法的 DLL 的名称。 </param>
<param name="attributes">该方法的属性。 </param>
<param name="callingConvention">该方法的调用约定。 </param>
<param name="returnType">该方法的返回类型。 </param>
<param name="parameterTypes">方法参数的类型。 </param>
<param name="nativeCallConv">本机调用约定。 </param>
<param name="nativeCharSet">该方法的本机字符集。 </param>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
<summary>[SECURITY CRITICAL] 在给地你干了方法名称、在其中定义方法的 DLL 的名称、入口点的名称、方法的属性、方法的调用约定、方法的返回类型、方法的参数类型以及 PInvoke 标志的情况下，定义一个 PInvoke 方法。</summary>
<returns>已定义的 PInvoke方法。</returns>
<param name="name">PInvoke 方法的名称。<paramref name="name"/> 不能包含嵌入的 null 值。 </param>
<param name="dllName">在其中定义 PInvoke 方法的 DLL 的名称。 </param>
<param name="entryName">DLL 中入口点的名称。 </param>
<param name="attributes">该方法的属性。 </param>
<param name="callingConvention">该方法的调用约定。 </param>
<param name="returnType">该方法的返回类型。 </param>
<param name="parameterTypes">方法参数的类型。 </param>
<param name="nativeCallConv">本机调用约定。 </param>
<param name="nativeCharSet">该方法的本机字符集。 </param>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
<summary>[SECURITY CRITICAL] 在给定了方法名称、在其中定义方法的 DLL 的名称、入口点的名称、方法的属性、方法的调用约定、方法的返回类型、方法的参数类型、PInvoke 标志、方法和返回类型的自定义修饰符的情况下，定义一个 PInvoke 方法。</summary>
<returns>已定义的 PInvoke方法。</returns>
<param name="name">PInvoke 方法的名称。<paramref name="name"/> 不能包含嵌入的 null 值。 </param>
<param name="dllName">在其中定义 PInvoke 方法的 DLL 的名称。 </param>
<param name="entryName">DLL 中入口点的名称。 </param>
<param name="attributes">该方法的属性。 </param>
<param name="callingConvention">该方法的调用约定。 </param>
<param name="returnType">该方法的返回类型。 </param>
<param name="returnTypeRequiredCustomModifiers">一个类型数组，表示该方法的返回类型的必需的自定义修饰符（如 <see cref="T:System.Runtime.CompilerServices.IsConst"/>）。如果返回类型没有必需的自定义修饰符，请指定 null。</param>
<param name="returnTypeOptionalCustomModifiers">一个类型数组，表示该方法的返回类型的可选自定义修饰符（如 <see cref="T:System.Runtime.CompilerServices.IsConst"/>）。如果返回类型没有可选的自定义修饰符，请指定 null。</param>
<param name="parameterTypes">方法参数的类型。 </param>
<param name="parameterTypeRequiredCustomModifiers">由类型数组组成的数组。每个类型数组均表示相应参数所必需的自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst"/>。如果某个特定参数没有必需的自定义修饰符，请指定 null，而不指定类型数组。如果没有参数具有必需的自定义修饰符，请指定 null，而不指定由数组构成的数组。</param>
<param name="parameterTypeOptionalCustomModifiers">由类型数组组成的数组。每个类型数组均表示相应参数的可选自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst"/>。如果某个特定参数没有可选的自定义修饰符，请指定 null，而不指定类型数组。如果没有参数具有可选的自定义修饰符，请指定 null，而不指定由数组构成的数组。</param>
<param name="nativeCallConv">本机调用约定。 </param>
<param name="nativeCharSet">该方法的本机字符集。 </param>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])">
<summary>用给定的名称和属性签名，向类型中添加新属性。</summary>
<returns>已定义的属性。</returns>
<param name="name">属性名。<paramref name="name"/> 不能包含嵌入的 null 值。 </param>
<param name="attributes">属性的特性。 </param>
<param name="returnType">属性的返回类型。 </param>
<param name="parameterTypes">属性的参数类型。 </param>
<exception cref="T:System.ArgumentException"><paramref name="name"/> 的长度为零。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。-或- <paramref name="parameterTypes"/> 数组的任何元素都为 null。 </exception>
<exception cref="T:System.InvalidOperationException">该类型是以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/> 创建的。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
<summary>用给定的名称、属性签名和自定义修饰符，向类型中添加新属性。</summary>
<returns>已定义的属性。</returns>
<param name="name">属性名。<paramref name="name"/> 不能包含嵌入的 null 值。 </param>
<param name="attributes">属性的特性。 </param>
<param name="returnType">属性的返回类型。 </param>
<param name="returnTypeRequiredCustomModifiers">一个类型数组，表示该属性的返回类型的必需的自定义修饰符（如 <see cref="T:System.Runtime.CompilerServices.IsConst"/>）。如果返回类型没有必需的自定义修饰符，请指定 null。</param>
<param name="returnTypeOptionalCustomModifiers">一个类型数组，表示该属性的返回类型的可选自定义修饰符（如 <see cref="T:System.Runtime.CompilerServices.IsConst"/>）。如果返回类型没有可选的自定义修饰符，请指定 null。</param>
<param name="parameterTypes">属性的参数类型。 </param>
<param name="parameterTypeRequiredCustomModifiers">由类型数组组成的数组。每个类型数组均表示相应参数所必需的自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst"/>。如果某个特定参数没有必需的自定义修饰符，请指定 null，而不指定类型数组。如果没有参数具有必需的自定义修饰符，请指定 null，而不指定由数组构成的数组。</param>
<param name="parameterTypeOptionalCustomModifiers">由类型数组组成的数组。每个类型数组均表示相应参数的可选自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst"/>。如果某个特定参数没有可选的自定义修饰符，请指定 null，而不指定类型数组。如果没有参数具有可选的自定义修饰符，请指定 null，而不指定由数组构成的数组。</param>
<exception cref="T:System.ArgumentException"><paramref name="name"/> 的长度为零。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。-或- <paramref name="parameterTypes"/> 数组的任何元素都为 null。</exception>
<exception cref="T:System.InvalidOperationException">该类型是以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/> 创建的。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer">
<summary>为此类型定义初始值设定项。</summary>
<returns>类型初始值设定项。</returns>
<exception cref="T:System.InvalidOperationException">以前已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/> 创建了包含类型。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)">
<summary>[SECURITY CRITICAL] 在可移植可执行 (PE) 文件的 .sdata 部分定义未初始化的数据字段。</summary>
<returns>引用这些数据的字段。</returns>
<param name="name">用于引用数据的名称。<paramref name="name"/> 不能包含嵌入的 null 值。 </param>
<param name="size">该数据字段的大小。 </param>
<param name="attributes">该字段的属性。 </param>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.FullName">
<summary>获取此类型的完整路径。</summary>
<returns>此类型的完整路径。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GenericParameterAttributes">
<summary>获取一个值，该值指示当前泛型类型参数的协变和特殊约束。 </summary>
<returns>枚举值的按位组合，用于描述当前泛型类型参数的协变和特殊约束。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GenericParameterPosition">
<summary>获取某个类型参数在类型参数列表中的位置，该列表具有声明该参数的泛型类型。</summary>
<returns>如果当前的 <see cref="T:System.Reflection.Emit.TypeBuilder"/> 对象表示某个泛型类型参数，则为该类型参数在类型参数列表中的位置，该列表具有声明该参数的泛型类型；否则为未定义。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructor(System.Type,System.Reflection.ConstructorInfo)">
<summary>返回指定的构造泛型类型的构造函数，该函数对应于泛型类型定义的指定构造函数。 </summary>
<returns><paramref name="type"/> 的构造函数，该函数对应于 <paramref name="constructor"/>，用于指定一个属于 <paramref name="type"/> 泛型类型定义的构造函数。</returns>
<param name="type">返回其构造函数的构造泛型类型。</param>
<param name="constructor">泛型类型定义 <paramref name="type"/> 中的一个构造函数，用于指定要返回 <paramref name="type"/> 的哪一个构造函数。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="type"/> 不表示泛型类型。-或- <paramref name="type"/> 的类型不是 <see cref="T:System.Reflection.Emit.TypeBuilder"/>。-或- <paramref name="constructor"/> 的声明类型不是泛型类型定义。-或- <paramref name="constructor"/> 的声明类型不是 <paramref name="type"/> 的泛型类型定义。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructors(System.Reflection.BindingFlags)">
<summary>按照指定，返回 <see cref="T:System.Reflection.ConstructorInfo"/> 对象的数组，这些对象表示为此类定义的公共和非公共构造函数。</summary>
<returns>为此类定义的构造函数数组。如果未定义任何构造函数，则返回空数组。</returns>
<param name="bindingAttr">一个来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志，例如 InvokeMethod 或 NonPublic。 </param>
<exception cref="T:System.NotSupportedException">对于不完整的类型，不实现此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Boolean)">
<summary>返回为此类型定义的所有自定义属性。</summary>
<returns>针对当前类型定义的自定义属性的数组。</returns>
<param name="inherit">搜索此成员的继承链以查找这些属性，则为 true；否则为 false。 </param>
<exception cref="T:System.NotSupportedException">对于不完整类型，目前不支持此方法。对此 TypeBuilder 调用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/> 之后，对完成的 <see cref="T:System.Type"/> 调用 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)"/>。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Type,System.Boolean)">
<summary>返回当前类型的所有自定义属性，可以将这些属性分配给指定类型。</summary>
<returns>针对当前类型定义的自定义属性的数组。</returns>
<param name="attributeType">要搜索的属性类型。只返回可分配给此类型的属性。</param>
<param name="inherit">搜索此成员的继承链以查找这些属性，则为 true；否则为 false。 </param>
<exception cref="T:System.NotSupportedException">对于不完整类型，目前不支持此方法。对此 TypeBuilder 调用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/> 之后，对完成的 <see cref="T:System.Type"/> 调用 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)"/>。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="attributeType"/> 为 null。</exception>
<exception cref="T:System.ArgumentException">该类型必须是由基础运行时系统提供的类型。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetElementType">
<summary>调用此方法始终引发 <see cref="T:System.NotSupportedException"/>。</summary>
<returns>不支持此方法。不返回任何值。</returns>
<exception cref="T:System.NotSupportedException">不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
<summary>返回具有指定名称的事件。</summary>
<returns>由具有指定名称的类型声明或继承的事件；如果没有匹配项，则为 null。</returns>
<param name="name">要搜索的事件名称。 </param>
<param name="bindingAttr">用于限制搜索的值的按位组合。 </param>
<exception cref="T:System.NotSupportedException">对于不完整的类型，不实现此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents">
<summary>返回此类型声明或继承的公共事件。</summary>
<returns>此类型声明或继承的公共事件数组。如果没有公共事件，则返回空数组。</returns>
<exception cref="T:System.NotSupportedException">对于不完整的类型，不实现此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents(System.Reflection.BindingFlags)">
<summary>返回此类型声明的公共和非公共事件。</summary>
<returns>由此类型声明或继承的、与指定的绑定标志相匹配的事件数组。如果没有匹配的事件，则返回空数组。</returns>
<param name="bindingAttr">用于限制搜索的 <see cref="T:System.Reflection.BindingFlags"/> 值的按位组合。</param>
<exception cref="T:System.NotSupportedException">对于不完整的类型，不实现此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetField(System.String,System.Reflection.BindingFlags)">
<summary>返回由给定名称指定的字段。</summary>
<returns>此类型声明或继承的且具有指定名称和公共或非公共修饰符的字段。如果没有匹配项，则返回 null。</returns>
<param name="name">要获取的字段的名称。 </param>
<param name="bindingAttr">一个来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志，例如 InvokeMethod 或 NonPublic。 </param>
<exception cref="T:System.NotSupportedException">对于不完整的类型，不实现此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetField(System.Type,System.Reflection.FieldInfo)">
<summary>返回指定的构造泛型类型的字段，该字段对应于泛型类型定义的指定字段。 </summary>
<returns><paramref name="type"/> 的字段，对应于 <paramref name="field"/>，用于指定一个属于 <paramref name="type"/> 的泛型类型定义的字段。</returns>
<param name="type">返回其字段的构造泛型类型。</param>
<param name="field">泛型类型定义 <paramref name="type"/> 中的一个字段，用于指定要返回 <paramref name="type"/> 的哪一个字段。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="type"/> 不表示泛型类型。-或- <paramref name="type"/> 的类型不是 <see cref="T:System.Reflection.Emit.TypeBuilder"/>。-或- <paramref name="field"/> 的声明类型不是泛型类型定义。-或- <paramref name="field"/> 的声明类型不是 <paramref name="type"/> 的泛型类型定义。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetFields(System.Reflection.BindingFlags)">
<summary>返回此类型声明的公共和非公共字段。</summary>
<returns>此类型声明或继承的公共和非公共字段的数组。按照指定，如果没有任何字段，则返回空数组。</returns>
<param name="bindingAttr">一个来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志，例如 InvokeMethod 或 NonPublic。 </param>
<exception cref="T:System.NotSupportedException">对于不完整的类型，不实现此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetGenericArguments">
<summary>返回表示泛型类型的类型实际参数或泛型类型定义的类型形式参数的 <see cref="T:System.Type"/> 对象的数组。</summary>
<returns>表示泛型类型的类型实际参数或泛型类型定义的类型形式参数的对象的数组。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition">
<summary>返回表示可以从中获取当前类型的泛型类型定义的 <see cref="T:System.Type"/> 对象。</summary>
<returns>一个泛型类型定义，可以从该定义中获取当前类型。</returns>
<exception cref="T:System.InvalidOperationException">当前类型不是泛型类型。即 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType"/> 返回 false。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterface(System.String,System.Boolean)">
<summary>返回由此类直接或间接实现的接口，该接口具有与给定接口名匹配的完全限定名。</summary>
<returns>实现的接口。如果未找到名称匹配的接口，则返回空。</returns>
<param name="name">接口名。 </param>
<param name="ignoreCase">如果为 true，则搜索不区分大小写。如果为 false，则搜索区分大小写。 </param>
<exception cref="T:System.NotSupportedException">对于不完整的类型，不实现此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaceMap(System.Type)">
<summary>返回请求的接口的接口映射。</summary>
<returns>请求的接口映射。</returns>
<param name="interfaceType">为其检索映射的接口的 <see cref="T:System.Type"/>。 </param>
<exception cref="T:System.NotSupportedException">对于不完整的类型，不实现此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaces">
<summary>返回在此类型及其基类型上实现的所有接口的数组。</summary>
<returns>实现的接口的数组。如果一个都没有定义，则返回空数组。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
<summary>按照指定，返回此类型声明或继承的所有公共和非公共成员。</summary>
<returns>如果使用 <paramref name="nonPublic"/>，则返回在此类型上定义的公共和非公共成员的数组；否则，仅返回公共成员。</returns>
<param name="name">成员的名称。 </param>
<param name="type">返回的成员的类型。 </param>
<param name="bindingAttr">一个来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志，例如 InvokeMethod 或 NonPublic。 </param>
<exception cref="T:System.NotSupportedException">对于不完整的类型，不实现此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMembers(System.Reflection.BindingFlags)">
<summary>返回由此类型声明或继承的公共和非公共成员的成员。</summary>
<returns>由此类型声明或继承的公共和非公共成员的数组。如果没有匹配的成员，则返回空数组。</returns>
<param name="bindingAttr">一个来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志，例如 InvokeMethod 或 NonPublic。 </param>
<exception cref="T:System.NotSupportedException">对于不完整的类型，不实现此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethod(System.Type,System.Reflection.MethodInfo)">
<summary>返回指定的构造泛型类型的方法，该方法对应于泛型类型定义的指定字段。 </summary>
<returns><paramref name="type"/> 的方法，对应于 <paramref name="method"/>，用于指定一个属于 <paramref name="type"/> 的泛型类型定义的方法。</returns>
<param name="type">返回其方法的构造泛型类型。</param>
<param name="method">泛型类型定义 <paramref name="type"/> 中的一个方法，用于指定要返回 <paramref name="type"/> 的哪一个方法。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="method"/> 是非泛型方法定义的泛型方法。-或- <paramref name="type"/> 不表示泛型类型。-或- <paramref name="type"/> 的类型不是 <see cref="T:System.Reflection.Emit.TypeBuilder"/>。-或- <paramref name="method"/> 的声明类型不是泛型类型定义。-或- <paramref name="method"/> 的声明类型不是 <paramref name="type"/> 的泛型类型定义。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethods(System.Reflection.BindingFlags)">
<summary>按照指定，返回此类型声明或继承的所有公共和非公共方法。</summary>
<returns>如果使用 <paramref name="nonPublic"/>，则返回在此类型上定义的公共和非公共方法的数组；否则，仅返回公共方法。</returns>
<param name="bindingAttr">一个来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志，例如 InvokeMethod 或 NonPublic。 </param>
<exception cref="T:System.NotSupportedException">对于不完整的类型，不实现此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
<summary>返回此类型声明的公共和非公共嵌套类型。</summary>
<returns>符合指定要求的嵌套类型（如果找到的话）；否则为 null。</returns>
<param name="name">要获取的嵌套类型的名称。 </param>
<param name="bindingAttr">一个位屏蔽，它包括一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags"/>。-或- 零，表示对公共方法执行区分大小写的搜索。 </param>
<exception cref="T:System.NotSupportedException">对于不完整的类型，不实现此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
<summary>返回此类型声明或继承的公共和非公共嵌套类型。</summary>
<returns>嵌套在当前 <see cref="T:System.Type"/> 中的匹配指定绑定约束的类型的数组。如果当前 <see cref="T:System.Type"/> 中没有嵌套类型或没有嵌套的类型与绑定约束匹配，则为 <see cref="T:System.Type"/> 类型的空数组。</returns>
<param name="bindingAttr">一个来自 <see cref="T:System.Reflection.BindingFlags"/> 的位标志，例如 InvokeMethod 或 NonPublic。 </param>
<exception cref="T:System.NotSupportedException">对于不完整的类型，不实现此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetProperties(System.Reflection.BindingFlags)">
<summary>按照指定，返回此类型声明或继承的所有公共和非公共属性。</summary>
<returns>如果使用 <paramref name="nonPublic"/>，则返回在此类型上定义的公共和非公共属性的数组；否则，仅返回公共属性。</returns>
<param name="bindingAttr">此调用属性。这必须是 <see cref="T:System.Reflection.BindingFlags"/> 中的位标志，例如 InvokeMethod 或 NonPublic。 </param>
<exception cref="T:System.NotSupportedException">对于不完整的类型，不实现此方法。 </exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GUID">
<summary>获取此类型的 GUID。</summary>
<returns>此类型的 GUID。 </returns>
<exception cref="T:System.NotSupportedException">对于不完整类型，目前不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
<summary>调用指定的成员。在指定的联编程序和调用属性的约束下，要调用的方法必须是可访问的，并且必须提供与指定参数列表相符的最精确的匹配项。</summary>
<returns>被调用成员的返回值。</returns>
<param name="name">要调用的成员名。它可以是构造函数、方法、属性或字段。必须指定合适的调用属性。请注意，可以通过将空字符串作为成员名称传递来调用类的默认成员。 </param>
<param name="invokeAttr">调用属性。这必须是来自 BindingFlags 的位标志。 </param>
<param name="binder">一个启用绑定、参数类型强制、成员调用以及使用反射进行 MemberInfo 对象检索的对象。 如果 binder 为 null，则使用默认联编程序。请参阅 <see cref="T:System.Reflection.Binder"/>。 </param>
<param name="target">对其调用指定成员的对象。如果该成员是静态的，则忽略此参数。 </param>
<param name="args">参数列表。这是一个对象数组，包含要调用的成员的参数的数目、顺序和类型。如果没有参数，则它应为 null。 </param>
<param name="modifiers">与 <paramref name="args"/> 长度相同的数组，其元素表示与要调用的成员的参数相关联的属性。参数在元数据中有关联的属性。它们由各种交互操作服务使用。有关更多详细信息，请参阅元数据规范。 </param>
<param name="culture">用于控制类型强制的 CultureInfo 的实例。如果这是 null，则使用当前线程的 CultureInfo。（注意，这对于某些转换是必要的，例如，将表示 1000 的 String 转换为 Double 值，因为不同区域性的 1000 表示形式不同。） </param>
<param name="namedParameters"><paramref name="namedParameters"/> 数组中的每一个参数获取 <paramref name="args"/> 数组中相应元素中的值。如果 <paramref name="args"/> 的长度大于 <paramref name="namedParameters"/> 的长度，则按顺序传递剩余的参数值。 </param>
<exception cref="T:System.NotSupportedException">对于不完整类型，目前不支持此方法。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Type)">
<summary>确定当前的 <see cref="T:System.Type"/> 的实例是否可以从指定 Type 的实例分配。</summary>
<returns>如果 <paramref name="c"/> 参数和当前的 <see cref="T:System.Type"/> 表示同一类型，或者如果当前的 Type 在 <paramref name="c"/> 的继承层次结构中，或者如果当前的 Type 是 <paramref name="c"/> 所支持的接口，则为 true。如果这些条件都不成立，或者如果 <paramref name="c"/> 为空引用（在 Visual Basic 中为 Nothing），则为 false。</returns>
<param name="c">要与当前 Type 进行比较的 Type。 </param>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsCreated">
<summary>返回一个值，该值指示是否已创建当前动态类型。</summary>
<returns>如果已调用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/> 方法，则为 true；否则为 false。 </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsDefined(System.Type,System.Boolean)">
<summary>确定是否将自定义属性应用于当前类型。</summary>
<returns>如果该类型上定义了一个或多个 <paramref name="attributeType"/> 实例或从 <paramref name="attributeType"/> 派生的属性，则为 true；否则为 false。</returns>
<param name="attributeType">要搜索的属性类型。只返回可分配给此类型的属性。 </param>
<param name="inherit">搜索此成员的继承链以查找这些属性，则为 true；否则为 false。 </param>
<exception cref="T:System.NotSupportedException">对于不完整类型，目前不支持此方法。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="attributeType"/> 未定义。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="attributeType"/> 为 null。</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericParameter">
<summary>获取一个值，该值指示当前类型是否为泛型类型参数。</summary>
<returns>如果当前 <see cref="T:System.Reflection.Emit.TypeBuilder"/> 对象表示泛型类型参数，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericType">
<summary>获取一个值，该值指示当前类型是否为泛型类型。 </summary>
<returns>如果当前 <see cref="T:System.Reflection.Emit.TypeBuilder"/> 对象表示的类型为泛型，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition">
<summary>获取一个值，该值指示当前 <see cref="T:System.Reflection.Emit.TypeBuilder"/> 是否表示可以用来构造其他泛型类型的泛型类型定义。</summary>
<returns>如果此 <see cref="T:System.Reflection.Emit.TypeBuilder"/> 对象表示泛型类型定义，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsSubclassOf(System.Type)">
<summary>确定此类型是否从指定的类型派生而来。</summary>
<returns>如果此类型与 <paramref name="c"/> 类型相同，或是 <paramref name="c"/> 类型的子类型，则为 true；否则为 false。</returns>
<param name="c">要检查的 <see cref="T:System.Type"/>。 </param>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeArrayType">
<summary>返回一个表示当前类型的一维数组（下限为零）的 <see cref="T:System.Type"/> 对象。</summary>
<returns>一个一维数组类型（下限为零），其元素类型为当前类型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeArrayType(System.Int32)">
<summary>返回表示当前类型的指定维数的数组的 <see cref="T:System.Type"/> 对象。</summary>
<returns>当前类型的一维数组。</returns>
<param name="rank">数组的维数。 </param>
      <exception cref="T:System.IndexOutOfRangeException">
<paramref name="rank"/> 不是有效的数组维数。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeByRefType">
<summary>返回表示作为 ref 参数（在 Visual Basic 中为 ByRef）传递时的当前类型的 <see cref="T:System.Type"/> 对象。</summary>
<returns>作为 ref 参数（在 Visual Basic 中为 ByRef）传递的当前类型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])">
<summary>用一个类型数组的元素取代当前泛型类型定义的类型参数，然后返回结果构造类型。</summary>
<returns>通过用 <paramref name="typeArguments"/> 的元素取代当前泛型类型的类型参数而形成的构造类型。 </returns>
<param name="typeArguments">一个类型数组，用于取代当前泛型类型定义的类型参数。</param>
<exception cref="T:System.InvalidOperationException">当前类型不表示泛型类型的定义。即 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition"/> 返回 false。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="typeArguments"/> 为 null。-或- <paramref name="typeArguments"/> 的任何元素都为 null。 </exception>
<exception cref="T:System.ArgumentException"><paramref name="typeArguments"/> 的所有元素都不满足为当前泛型类型的对应类型参数指定的约束。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakePointerType">
<summary>返回一个 <see cref="T:System.Type"/> 对象，该对象表示指向当前类型的非托管指针的类型。</summary>
<returns>指向当前类型的非托管指针的类型。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Module">
<summary>获取包含此类型定义的动态模块。</summary>
<returns>包含此类型定义的动态模块。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Name">
<summary>获取此类型的名称。</summary>
<returns>此类型的名称。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Namespace">
<summary>获取定义此 TypeBuilder 的命名空间。</summary>
<returns>定义此 TypeBuilder 的命名空间。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.PackingSize">
<summary>获取此类型的封装大小。</summary>
<returns>此类型的封装大小。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.ReflectedType">
<summary>获取用于获取此类型的类型。</summary>
<returns>用于获取此类型的类型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
<summary>[SECURITY CRITICAL] 使用指定的自定义属性 Blob 设置自定义属性。</summary>
<param name="con">自定义属性的构造函数。 </param>
<param name="binaryAttribute">表示属性的字节 Blob。 </param>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
<summary>使用自定义属性生成器设置自定义属性。</summary>
<param name="customBuilder">定义自定义属性的帮助器类的实例。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="customBuilder"/> 为 null。 </exception>
<exception cref="T:System.InvalidOperationException">对于当前动态类型，<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType"/> 属性为 true，而 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition"/> 属性为 false。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetParent(System.Type)">
<summary>为当前构造中的类型设置基类型。</summary>
<param name="parent">新的基类型。 </param>
<exception cref="T:System.InvalidOperationException">该类型是以前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/> 创建的。-或- <paramref name="parent"/> 为 null，当前的实例表示一个接口，该接口的属性不包括 <see cref="F:System.Reflection.TypeAttributes.Abstract"/>。-或- 对于当前动态类型，<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType"/> 属性为 true，而 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition"/> 属性为 false。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="parent"/> 是一个接口。 </exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Size">
<summary>获取类型的总大小。</summary>
<returns>类型的总大小。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.ToString">
<summary>返回不包括命名空间的类型名称。</summary>
<returns>不包括命名空间的类型名称。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.TypeHandle">
<summary>在动态模块中不支持。</summary>
<returns>只读。</returns>
<exception cref="T:System.NotSupportedException">在动态模块中不支持。 </exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.TypeToken">
<summary>获取此类型的类型标记。</summary>
<returns>该类型的类型标记。</returns>
<exception cref="T:System.InvalidOperationException">该类型是以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/> 创建的。</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.UnderlyingSystemType">
<summary>获取该 TypeBuilder 的基础系统类型。</summary>
<returns>基础系统类型。</returns>
<exception cref="T:System.InvalidOperationException">此类型是枚举，但是没有基础系统类型。 </exception>
    </member>
    <member name="F:System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize">
<summary>表示不指定此类型的总大小。</summary>
    </member>
    <member name="T:System.Reflection.Emit.TypeToken">
<summary>表示由元数据返回以表示类型的 Token。</summary>
    </member>
    <member name="F:System.Reflection.Emit.TypeToken.Empty">
<summary><see cref="P:System.Reflection.Emit.TypeToken.Token"/> 值为 0 的默认 TypeToken。</summary>
    </member>
    <member name="M:System.Reflection.Emit.TypeToken.Equals(System.Object)">
<summary>检查给定对象是否为 TypeToken 的实例且等于此实例。</summary>
<returns>如果 <paramref name="obj"/> 是 TypeToken 的一个实例并且等于此对象，则为 true；否则为 false。</returns>
<param name="obj">与此 TypeToken 进行比较的对象。 </param>
    </member>
    <member name="M:System.Reflection.Emit.TypeToken.Equals(System.Reflection.Emit.TypeToken)">
<summary>指示当前实例是否等于指定的 <see cref="T:System.Reflection.Emit.TypeToken"/>。</summary>
<returns>如果 <paramref name="obj"/> 的值等于当前实例的值，则为 true；否则为 false。</returns>
<param name="obj">要与当前实例进行比较的 <see cref="T:System.Reflection.Emit.TypeToken"/>。</param>
    </member>
    <member name="M:System.Reflection.Emit.TypeToken.GetHashCode">
<summary>生成该类型的哈希代码。</summary>
<returns>返回该类型的哈希代码。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeToken.op_Equality(System.Reflection.Emit.TypeToken,System.Reflection.Emit.TypeToken)">
<summary>指示两个 <see cref="T:System.Reflection.Emit.TypeToken"/> 结构是否相等。</summary>
<returns>如果 <paramref name="a"/> 等于 <paramref name="b"/>，则为 true；否则为 false。</returns>
<param name="a">要与 <paramref name="b"/> 进行比较的 <see cref="T:System.Reflection.Emit.TypeToken"/>。</param>
<param name="b">要与 <paramref name="a"/> 进行比较的 <see cref="T:System.Reflection.Emit.TypeToken"/>。</param>
    </member>
    <member name="M:System.Reflection.Emit.TypeToken.op_Inequality(System.Reflection.Emit.TypeToken,System.Reflection.Emit.TypeToken)">
<summary>指示两个 <see cref="T:System.Reflection.Emit.TypeToken"/> 结构是否不相等。</summary>
<returns>如果 <paramref name="a"/> 不等于 <paramref name="b"/>，则为 true；否则为 false。</returns>
<param name="a">要与 <paramref name="b"/> 进行比较的 <see cref="T:System.Reflection.Emit.TypeToken"/>。</param>
<param name="b">要与 <paramref name="a"/> 进行比较的 <see cref="T:System.Reflection.Emit.TypeToken"/>。</param>
    </member>
    <member name="P:System.Reflection.Emit.TypeToken.Token">
<summary>检索此类的元数据标记。</summary>
<returns>只读。检索此类型的元数据标记。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
<summary>[SECURITY CRITICAL] 创建匿名承载的动态方法，指定方法名称、返回类型、参数类型，并指定是否应针对动态方法的 Microsoft 中间语言 (MSIL) 访问的类型和成员跳过实时 (JIT) 可见性检查。</summary>
<param name="name">动态方法的名称。可以是长度为零的字符串，但不能为 null。 </param>
<param name="returnType">一个 <see cref="T:System.Type"/> 对象，它指定动态方法的返回类型；如果方法没有返回类型，则为 null。 </param>
<param name="parameterTypes">一个 <see cref="T:System.Type"/> 对象数组，它指定动态方法的参数的类型；如果方法没有参数，则为 null。 </param>
<param name="restrictedSkipVisibility">要针对动态方法的 MSIL 所访问的类型和成员跳过 JIT 可见性检查，则为 true；否则为 false。 </param>
    </member>
    <member name="F:System.Reflection.Emit.ILGenerator.syncObj">
<summary>获取一个对象，可用于同步对此对象的访问。</summary>
    </member>
    <member name="T:System.Resources.IResourceReader">
<summary>提供从资源文件读取数据的基功能。</summary>
    </member>
    <member name="M:System.Resources.IResourceReader.Close">
<summary>释放与资源阅读器关联的所有资源后将该阅读器关闭。</summary>
    </member>
    <member name="M:System.Resources.IResourceReader.GetEnumerator">
<summary>返回此阅读器的资源的 <see cref="T:System.Collections.IDictionaryEnumerator"/>。</summary>
<returns>此阅读器的资源的字典枚举器。</returns>
    </member>
    <member name="T:System.Resources.MissingManifestResourceException">
<summary>在以下情况下引发该异常：主程序集不包含非特定区域性的资源，而由于缺少相应的附属程序集，这些资源又是必需的。</summary>
    </member>
    <member name="M:System.Resources.MissingManifestResourceException.#ctor">
<summary>使用默认属性初始化 <see cref="T:System.Resources.MissingManifestResourceException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Resources.MissingManifestResourceException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.Resources.MissingManifestResourceException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
    </member>
    <member name="M:System.Resources.MissingManifestResourceException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Resources.MissingManifestResourceException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="inner">导致当前异常的异常。如果 <paramref name="inner"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="T:System.Resources.NeutralResourcesLanguageAttribute">
<summary>向 <see cref="T:System.Resources.ResourceManager"/> 通知程序集的非特定区域性。无法继承此类。</summary>
    </member>
    <member name="M:System.Resources.NeutralResourcesLanguageAttribute.#ctor(System.String)">
<summary>初始化 <see cref="T:System.Resources.NeutralResourcesLanguageAttribute"/> 类的新实例。</summary>
<param name="cultureName">用其编写的当前程序集的非特定语言资源的区域性的名称。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="cultureName"/> 参数为 null。 </exception>
    </member>
    <member name="M:System.Resources.NeutralResourcesLanguageAttribute.#ctor(System.String,System.Resources.UltimateResourceFallbackLocation)">
<summary>使用指定的最终资源后备位置初始化 <see cref="T:System.Resources.NeutralResourcesLanguageAttribute"/> 类的新实例。</summary>
<param name="cultureName">用其编写的当前程序集的非特定语言资源的区域性的名称。</param>
<param name="location">枚举值之一，指示检索非特定后备资源的位置。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="cultureName"/> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="location"/> 不是 <see cref="T:System.Resources.UltimateResourceFallbackLocation"/> 的成员。</exception>
    </member>
    <member name="P:System.Resources.NeutralResourcesLanguageAttribute.CultureName">
<summary>获取区域性名称。</summary>
<returns>主程序集的默认区域性的名称。</returns>
    </member>
    <member name="P:System.Resources.NeutralResourcesLanguageAttribute.Location">
<summary>获取 <see cref="T:System.Resources.ResourceManager"/> 类的位置，该类用于通过 URI 后备进程检索非特定资源，如“资源文件”中所述。</summary>
<returns>枚举值之一，指示从中检索非特定资源的位置（主程序集或附属程序集）。</returns>
    </member>
    <member name="T:System.Resources.ResourceManager">
<summary>提供在运行时方便地访问区域性特定资源的途径。</summary>
    </member>
    <member name="M:System.Resources.ResourceManager.#ctor">
<summary>使用默认值初始化 <see cref="T:System.Resources.ResourceManager"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
<summary>初始化 <see cref="T:System.Resources.ResourceManager"/> 类的新实例，该实例使用给定的 <see cref="T:System.Reflection.Assembly"/> 查找从指定根名称导出的文件中包含的资源。</summary>
<param name="baseName">资源文件的根名称，不带其扩展名，但包括完全限定的命名空间名称。例如，名为“MyApplication.MyResource.en-US.resources”的资源文件的根名称为“MyApplication.MyResource”。 </param>
<param name="assembly">资源的主程序集。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="baseName"/> 或 <paramref name="assembly"/> 参数为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="assembly"/> 不是运行时对象。 </exception>
    </member>
    <member name="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)">
<summary>初始化 <see cref="T:System.Resources.ResourceManager"/> 类的新实例，该实例使用给定的 <see cref="T:System.Reflection.Assembly"/> 查找从指定根名称导出的文件中包含的资源。</summary>
<param name="baseName">资源文件的根名称，不带其扩展名，但包括完全限定的命名空间名称。例如，名为“MyApplication.MyResource.en-US.resources”的资源文件的根名称为“MyApplication.MyResource”。 </param>
<param name="assembly">资源的主程序集。 </param>
<param name="usingResourceSet">要使用的自定义 <see cref="T:System.Resources.ResourceSet"/> 的类型。如果为 null，则使用默认的运行时 <see cref="T:System.Resources.ResourceSet"/> 对象。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="usingResourceset"/> 不是 <see cref="T:System.Resources.ResourceSet"/> 的派生类。 </exception>
<exception cref="T:System.ArgumentNullException"><paramref name="baseName"/> 或 <paramref name="assembly"/> 参数为 null。 </exception>
    </member>
    <member name="M:System.Resources.ResourceManager.#ctor(System.Type)">
<summary>创建一个 <see cref="T:System.Resources.ResourceManager"/>，它根据指定的 <see cref="T:System.Type"/> 中的信息在附属程序集内查找资源。</summary>
<param name="resourceSource">一个类型，<see cref="T:System.Resources.ResourceManager"/> 从其中派生所有用于查找 .resources 文件的信息。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="resourceSource"/> 参数为 null。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="assembly"/> 不是运行时对象。 </exception>
    </member>
    <member name="P:System.Resources.ResourceManager.BaseName">
<summary>获取 <see cref="T:System.Resources.ResourceManager"/> 从其中搜索资源的资源文件的根名称。</summary>
<returns><see cref="T:System.Resources.ResourceManager"/> 从其中搜索资源的资源文件的根名称。</returns>
    </member>
    <member name="F:System.Resources.ResourceManager.BaseNameField">
<summary>指示 <see cref="T:System.Resources.ResourceManager"/> 从其中搜索资源的资源文件的根名称。</summary>
    </member>
    <member name="M:System.Resources.ResourceManager.GetNeutralResourcesLanguage(System.Reflection.Assembly)">
<summary>通过读取指定的 <see cref="T:System.Reflection.Assembly"/> 上的 <see cref="T:System.Resources.NeutralResourcesLanguageAttribute"/> 的值，为主程序集的非特定资源返回 <see cref="T:System.Globalization.CultureInfo"/>。</summary>
<returns>如果找到的话，则为 <see cref="T:System.Resources.NeutralResourcesLanguageAttribute"/> 中的区域性；否则为 <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>。</returns>
<param name="a">要为其返回 <see cref="T:System.Globalization.CultureInfo"/> 的程序集。 </param>
    </member>
    <member name="M:System.Resources.ResourceManager.GetObject(System.String)">
<summary>返回指定的 <see cref="T:System.Object"/> 资源的值。</summary>
<returns>针对调用方的当前区域性设置而本地化的资源的值。如果不可能有匹配项，则返回 null。资源值可以为 null。</returns>
<param name="name">要获取的资源名。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="name"/> 参数为 null。 </exception>
<exception cref="T:System.Resources.MissingManifestResourceException">未找到可用的资源集，并且没有非特定区域性的资源。 </exception>
<exception cref="T:System.NotSupportedException">资源依赖于序列化。</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
<summary>获取为指定区域性本地化的 <see cref="T:System.Object"/> 资源的值。</summary>
<returns>为指定区域性本地化的资源的值。如果不可能有“最佳匹配”，则返回 null。</returns>
<param name="name">要获取的资源名。 </param>
<param name="culture">要针对其本地化资源的区域性。注意，如果尚未为该区域性本地化此资源，则查找将使用区域性的 <see cref="P:System.Globalization.CultureInfo.Parent"/> 属性回退，并在签入非特定语言区域性后停止。如果该值为 null，则使用区域性的 <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/> 属性获取 <see cref="T:System.Globalization.CultureInfo"/>。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="name"/> 参数为 null。 </exception>
<exception cref="T:System.Resources.MissingManifestResourceException">未找到可用的资源集，并且没有非特定区域性的资源。 </exception>
<exception cref="T:System.NotSupportedException">资源依赖于序列化。</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetResourceFileName(System.Globalization.CultureInfo)">
<summary>生成给定的 <see cref="T:System.Globalization.CultureInfo"/> 的资源文件的名称。</summary>
<returns>可用于给定的 <see cref="T:System.Globalization.CultureInfo"/> 的资源文件的名称。</returns>
<param name="culture">为其构造资源文件名的区域性。 </param>
    </member>
    <member name="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
<summary>获取特定的区域性的 <see cref="T:System.Resources.ResourceSet"/>。</summary>
<returns>指定的资源集。</returns>
<param name="culture">要查找的区域性。 </param>
<param name="createIfNotExists">如果尚未加载 <see cref="T:System.Resources.ResourceSet"/> 时要加载它，则为 true；否则为 false。 </param>
<param name="tryParents">如果为 true，则在无法加载 <see cref="T:System.Resources.ResourceSet"/> 时，尝试父 <see cref="T:System.Globalization.CultureInfo"/> 对象，看它们是否存在；否则为 false。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="culture"/> 参数为 null。 </exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetSatelliteContractVersion(System.Reflection.Assembly)">
<summary>返回给定的程序集内的 <see cref="T:System.Resources.SatelliteContractVersionAttribute"/> 属性指定的 <see cref="T:System.Version"/>。</summary>
<returns>给定程序集的附属合同 <see cref="T:System.Version"/>；如果未找到任何版本，则为 null。</returns>
<param name="a">要查找其 <see cref="T:System.Resources.SatelliteContractVersionAttribute"/> 属性的程序集。 </param>
<exception cref="T:System.ArgumentException">程序集 <paramref name="a"/> 中找到的 <see cref="T:System.Version"/> 无效。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="a"/> 为 null。</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetStream(System.String)">
<summary>从指定的资源返回 <see cref="T:System.IO.UnmanagedMemoryStream"/> 对象。</summary>
<returns>非托管内存流。</returns>
<param name="name">资源的名称。</param>
<exception cref="T:System.InvalidOperationException">指定资源的值不是 <see cref="T:System.IO.MemoryStream"/> 对象。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。</exception>
<exception cref="T:System.Resources.MissingManifestResourceException">未找到可用的资源集，并且没有非特定资源。</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)">
<summary>使用指定的区域性从指定的资源返回 <see cref="T:System.IO.UnmanagedMemoryStream"/> 对象。</summary>
<returns>非托管内存流。</returns>
<param name="name">资源的名称。</param>
<param name="culture">用于资源查找的区域性。如果 <paramref name="culture"/> 为 null，则使用当前线程的区域性。</param>
<exception cref="T:System.InvalidOperationException">指定资源的值不是 <see cref="T:System.IO.MemoryStream"/> 对象。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。</exception>
<exception cref="T:System.Resources.MissingManifestResourceException">未找到可用的资源集，并且没有非特定资源。</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetString(System.String)">
<summary>返回指定的 <see cref="T:System.String"/> 资源的值。</summary>
<returns>针对调用方的当前区域性设置而本地化的资源的值。如果不可能有匹配项，则返回 null。</returns>
<param name="name">要获取的资源名。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="name"/> 参数为 null。 </exception>
<exception cref="T:System.InvalidOperationException">指定资源的值不是字符串。 </exception>
<exception cref="T:System.Resources.MissingManifestResourceException">未找到可用的资源集，并且没有非特定区域性的资源。 </exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
<summary>获取为指定区域性本地化的 <see cref="T:System.String"/> 资源的值。</summary>
<returns>为指定区域性本地化的资源的值。如果不可能有最佳匹配，则返回 null。</returns>
<param name="name">要获取的资源名。 </param>
<param name="culture">要针对其本地化资源的区域性。注意，如果尚未为该区域性本地化此资源，则查找将使用区域性的 <see cref="P:System.Globalization.CultureInfo.Parent"/> 属性回退，并在查看非特定语言区域性后停止。如果该值为 null，则使用区域性的 <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/> 属性获取 <see cref="T:System.Globalization.CultureInfo"/>。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="name"/> 参数为 null。 </exception>
<exception cref="T:System.InvalidOperationException">指定资源的值不是 <see cref="T:System.String"/>。 </exception>
<exception cref="T:System.Resources.MissingManifestResourceException">未找到可用的资源集，并且没有非特定区域性的资源。 </exception>
    </member>
    <member name="F:System.Resources.ResourceManager.HeaderVersionNumber">
<summary>一个常数 readonly 值，它指示 <see cref="T:System.Resources.ResourceManager"/> 的当前实现可解释和产生的资源文件头的版本。</summary>
    </member>
    <member name="P:System.Resources.ResourceManager.IgnoreCase">
<summary>获取或设置布尔值，该值指示 ResourceManager 的当前实例是否允许在 <see cref="M:System.Resources.ResourceManager.GetString(System.String)"/> 和 <see cref="M:System.Resources.ResourceManager.GetObject(System.String)"/> 方法中进行不区分大小写的资源查找。</summary>
<returns>一个布尔值，它指示是否应忽略资源名称的大小写。</returns>
    </member>
    <member name="M:System.Resources.ResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
<summary>提供用于查找 <see cref="T:System.Resources.ResourceSet"/> 的实现。</summary>
<returns>指定的资源集。</returns>
<param name="culture">要查找的区域性。 </param>
<param name="createIfNotExists">如果尚未加载 <see cref="T:System.Resources.ResourceSet"/> 时要加载它，则为 true；否则为 false。 </param>
<param name="tryParents">如果为 true，则在无法加载 <see cref="T:System.Resources.ResourceSet"/> 时，尝试父 <see cref="T:System.Globalization.CultureInfo"/> 对象，看它们是否存在；否则为 false。 </param>
<exception cref="T:System.Resources.MissingManifestResourceException">主程序集不包含 .resources 文件，但查找资源需要此文件。 </exception>
<exception cref="T:System.ExecutionEngineException">运行时中存在内部错误。</exception>
    </member>
    <member name="F:System.Resources.ResourceManager.MagicNumber">
<summary>保留用于标识资源文件的数字。</summary>
    </member>
    <member name="F:System.Resources.ResourceManager.MainAssembly">
<summary>指示包含这些资源的主 <see cref="T:System.Reflection.Assembly"/>。</summary>
    </member>
    <member name="M:System.Resources.ResourceManager.ReleaseAllResources">
<summary>通知 <see cref="T:System.Resources.ResourceManager"/> 对所有 <see cref="T:System.Resources.ResourceSet"/> 对象调用 <see cref="M:System.Resources.ResourceSet.Close"/>，并释放所有资源。</summary>
    </member>
    <member name="P:System.Resources.ResourceManager.ResourceSetType">
<summary>获取 <see cref="T:System.Resources.ResourceManager"/> 用于构造 <see cref="T:System.Resources.ResourceSet"/> 的对象的 <see cref="T:System.Resources.ResourceSet"/> 的 <see cref="T:System.Type"/>。</summary>
<returns><see cref="T:System.Resources.ResourceManager"/> 用来构造 <see cref="T:System.Resources.ResourceSet"/> 对象的 <see cref="T:System.Resources.ResourceSet"/> 的 <see cref="T:System.Type"/>。</returns>
    </member>
    <member name="T:System.Resources.ResourceSet">
<summary>存储已针对某个特定区域性进行了本地化的所有资源，忽略所有其他区域性（包括任何代用规则）。</summary>
    </member>
    <member name="M:System.Resources.ResourceSet.#ctor">
<summary>使用默认属性初始化 <see cref="T:System.Resources.ResourceSet"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Resources.ResourceSet.#ctor(System.IO.Stream)">
<summary>[SECURITY CRITICAL] 创建从给定流中读取资源的 <see cref="T:System.Resources.ResourceSet"/> 类的新实例。</summary>
<param name="stream">要读取的资源的 <see cref="T:System.IO.Stream"/>。流应引用现有的资源文件。 </param>
    </member>
    <member name="M:System.Resources.ResourceSet.#ctor(System.Resources.IResourceReader)">
<summary>使用指定的资源阅读器创建 <see cref="T:System.Resources.ResourceSet"/> 类的新实例。</summary>
<param name="reader">将使用的阅读器。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="reader"/> 参数为 null。 </exception>
    </member>
    <member name="M:System.Resources.ResourceSet.#ctor(System.String)">
<summary>[SECURITY CRITICAL] 创建从给定文件中打开和读取资源的 <see cref="T:System.Resources.ResourceSet"/> 类的新实例。</summary>
<param name="fileName">要读取的资源文件。 </param>
    </member>
    <member name="M:System.Resources.ResourceSet.Close">
<summary>通过此 <see cref="T:System.Resources.ResourceSet"/> 来关闭和释放所有资源。</summary>
    </member>
    <member name="M:System.Resources.ResourceSet.Dispose">
<summary>处置由 <see cref="T:System.Resources.ResourceSet"/> 的当前实例使用的资源（内存除外）。</summary>
    </member>
    <member name="M:System.Resources.ResourceSet.Dispose(System.Boolean)">
<summary>释放与当前实例关联的资源（内存除外），并关闭内部托管对象（如果请求这样做）。</summary>
<param name="disposing">指示是否应显式关闭当前实例中包含的对象。 </param>
    </member>
    <member name="M:System.Resources.ResourceSet.GetDefaultReader">
<summary>返回此类 <see cref="T:System.Resources.ResourceSet"/> 的首选资源阅读器类。</summary>
<returns>返回这类 <see cref="T:System.Resources.ResourceSet"/> 的首选资源阅读器的 <see cref="T:System.Type"/>。</returns>
    </member>
    <member name="M:System.Resources.ResourceSet.GetEnumerator">
<summary>返回可循环访问 <see cref="T:System.Resources.ResourceSet"/> 的 <see cref="T:System.Collections.IDictionaryEnumerator"/>。</summary>
<returns>该 <see cref="T:System.Resources.ResourceSet"/> 的 <see cref="T:System.Collections.IDictionaryEnumerator"/>。</returns>
<exception cref="T:System.InvalidOperationException">此 <see cref="T:System.Resources.ResourceSet"/> 已关闭。 </exception>
    </member>
    <member name="M:System.Resources.ResourceSet.GetObject(System.String)">
<summary>搜索具有指定名称的资源对象。</summary>
<returns>所请求的资源。</returns>
<param name="name">要搜索的资源的区分大小写的名称。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="name"/> 参数为 null。 </exception>
<exception cref="T:System.InvalidOperationException">此 <see cref="T:System.Resources.ResourceSet"/> 已关闭。 </exception>
<exception cref="T:System.ObjectDisposedException">此对象已释放。</exception>
    </member>
    <member name="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
<summary>如果请求的话，按照不区分大小写的方式搜索具有指定名称的资源对象。</summary>
<returns>所请求的资源。</returns>
<param name="name">要搜索的资源的名称。 </param>
<param name="ignoreCase">指示是否应忽略指定名称的大小写。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="name"/> 参数为 null。 </exception>
<exception cref="T:System.InvalidOperationException">此 <see cref="T:System.Resources.ResourceSet"/> 已关闭。 </exception>
<exception cref="T:System.ObjectDisposedException">此对象已释放。</exception>
    </member>
    <member name="M:System.Resources.ResourceSet.GetString(System.String)">
<summary>搜索具有指定名称的 <see cref="T:System.String"/> 资源。</summary>
<returns>当值是 <see cref="T:System.String"/> 时为资源的值。</returns>
<param name="name">要搜索的资源的名称。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="name"/> 参数为 null。 </exception>
<exception cref="T:System.InvalidOperationException">具有指定名称的资源不是 <see cref="T:System.String"/>，或者当前 <see cref="T:System.Resources.ResourceSet"/> 已关闭。 </exception>
<exception cref="T:System.ObjectDisposedException">此对象已释放。</exception>
    </member>
    <member name="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
<summary>如果请求的话，按照不区分大小写的方式搜索具有指定名称的 <see cref="T:System.String"/> 资源。</summary>
<returns>当值是 <see cref="T:System.String"/> 时为资源的值。</returns>
<param name="name">要搜索的资源的名称。 </param>
<param name="ignoreCase">指示是否应忽略指定名称的大小写。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="name"/> 参数为 null。 </exception>
<exception cref="T:System.InvalidOperationException">具有指定名称的资源不是 <see cref="T:System.String"/>，或者当前 <see cref="T:System.Resources.ResourceSet"/> 已关闭。 </exception>
<exception cref="T:System.ObjectDisposedException">此对象已释放。</exception>
    </member>
    <member name="F:System.Resources.ResourceSet.Reader">
<summary>指示用于读取资源的 <see cref="T:System.Resources.IResourceReader"/>。</summary>
    </member>
    <member name="M:System.Resources.ResourceSet.ReadResources">
<summary>读取所有资源。</summary>
    </member>
    <member name="M:System.Resources.ResourceSet.System#Collections#IEnumerable#GetEnumerator">
<summary>返回 <see cref="T:System.Collections.IEnumerator"/>，以便使用 Dispose 来避免争用状态。不应直接在您的代码中使用此成员。</summary>
<returns>该 <see cref="T:System.Resources.ResourceSet"/> 的 <see cref="T:System.Collections.IDictionaryEnumerator"/>。</returns>
    </member>
    <member name="T:System.Resources.SatelliteContractVersionAttribute">
<summary>指示 <see cref="T:System.Resources.ResourceManager"/> 要求附属程序集的特定版本以简化应用程序的主程序集的更新。</summary>
    </member>
    <member name="M:System.Resources.SatelliteContractVersionAttribute.#ctor(System.String)">
<summary>初始化 <see cref="T:System.Resources.SatelliteContractVersionAttribute"/> 类的新实例。</summary>
<param name="version">一个 <see cref="T:System.String"/>，具有要加载的附属程序集的版本。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="version"/> 参数为 null。 </exception>
    </member>
    <member name="P:System.Resources.SatelliteContractVersionAttribute.Version">
<summary>获取具有所需资源的附属程序集的版本。</summary>
<returns>一个 <see cref="T:System.String"/>，它包含具有所需资源的附属程序集的版本。</returns>
    </member>
    <member name="T:System.Resources.UltimateResourceFallbackLocation">
<summary>指定使用后备进程检索非特定资源时 <see cref="T:System.Resources.ResourceManager"/> 类将使用的程序集。 </summary>
    </member>
    <member name="F:System.Resources.UltimateResourceFallbackLocation.MainAssembly">
<summary>回退资源位于主程序集中。</summary>
    </member>
    <member name="F:System.Resources.UltimateResourceFallbackLocation.Satellite">
<summary>回退资源位于由 <see cref="P:System.Resources.NeutralResourcesLanguageAttribute.Location"/> 属性指定的位置中的附属程序集中。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute">
<summary>指定访问属性化字段的属性的名称。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.#ctor(System.String)">
<summary>使用在访问属性化字段时所用属性的名称初始化 AccessedThroughPropertyAttribute 类的新实例。</summary>
<param name="propertyName">用于访问属性化字段的属性的名称。 </param>
    </member>
    <member name="P:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.PropertyName">
<summary>获取用于访问属性化字段的属性的名称。</summary>
<returns>用于访问属性化字段的属性的名称。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilationRelaxations">
<summary>指定一些参数，这些参数控制由公共语言运行时的实时 (JIT) 编译器生成的代码的严格性。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning">
<summary>将程序集标记为不需要字符串暂留。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute">
<summary>控制由公共语言运行时的实时 (JIT) 编译器生成的代码的严格性。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.#ctor(System.Int32)">
<summary>使用指定的编译松弛法初始化 <see cref="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute"/> 类的新实例。</summary>
<param name="relaxations">编译松弛法。 </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.#ctor(System.Runtime.CompilerServices.CompilationRelaxations)">
<summary>使用指定的 <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations"/> 值初始化 <see cref="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute"/> 类的新实例。 </summary>
<param name="relaxations">其中一个 <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations"/> 值。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.CompilationRelaxations">
<summary>获取构造当前对象时指定的编译松弛法。</summary>
<returns>构造当前对象时指定的编译松弛法。将 <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations"/> 枚举与 <see cref="P:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.CompilationRelaxations"/> 属性一起使用。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute">
<summary>区分编译器生成的元素与用户生成的元素。无法继承此类。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilerGeneratedAttribute.#ctor">
<summary>初始化 <see cref="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute"/> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
<summary>使编译器可以将对象字段动态附加到托管对象。</summary>
<typeparam name="TKey">字段所附加到的引用类型。 </typeparam>
<typeparam name="TValue">字段的类型。此类型必须是引用类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor">
<summary>初始化 <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)">
<summary>将键添加到表中。</summary>
<param name="key">要添加的键。<paramref name="key"/> 表示属性所附加到的对象。</param>
<param name="value">该键的属性值。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="key"/> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="key"/> 已存在。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)">
<summary>以原子方式在表中搜索指定键，并返回对应的值。如果表中不存在该键，此方法将调用表示表值的类的默认构造函数，以创建绑定到指定键的值。 </summary>
<returns>如果表中已存在 <paramref name="key"/>，则为对应于 <paramref name="key"/> 的值；否则为 <paramref name="TValue"/> 范型类型参数定义的类的默认构造函数创建的新值。</returns>
<param name="key">要搜索的键。<paramref name="key"/> 表示属性所附加到的对象。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="key"/> 为 null。</exception>
<exception cref="T:System.MissingMethodException">表示表中值的类未定义默认构造函数。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)">
<summary>以原子方式在表中搜索指定键，并返回对应的值。如果表中不存在该键，此方法将调用一个回调方法来创建绑定到指定键的值。</summary>
<returns>如果表中已存在 <paramref name="key"/>，则为附加到 <paramref name="key"/> 的值；否则为 <paramref name="createValueCallback"/> 委托返回的新值。</returns>
<param name="key">要搜索的键。<paramref name="key"/> 表示属性所附加到的对象。</param>
<param name="createValueCallback">可以为给定 <paramref name="key"/> 创建值的方法的委托。它只有一个 <paramref name="TKey"/> 类型的参数，并返回一个 <paramref name="TValue"/> 类型的值。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="key"/> 或 <paramref name="createValueCallback"/> 为 null。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)">
<summary>从表中移除某个键及其值。</summary>
<returns>如果找到并移除该键，则为 true；否则为 false。</returns>
<param name="key">要移除的键。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="key"/> 为 null。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)">
<summary>获取指定键的值。</summary>
<returns>如果找到 <paramref name="key"/>，则为 true；否则为 false。</returns>
<param name="key">一个键，表示具有所附加的属性的对象。</param>
<param name="value">此方法返回时，将包含所附加的属性值。如果找不到 <paramref name="key"/>，则 <paramref name="value"/> 包含默认值。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="key"/> 为 null。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback">
<summary>表示一个方法，该方法用于创建非默认值以将其作为键/值对组成部分添加到 <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2"/> 对象。 </summary>
<returns>表示要附加到指定键的值的引用类型实例。</returns>
<param name="key">属于要创建的值的键。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CustomConstantAttribute">
<summary>定义一个编译器可以为字段或方法参数永久保存的常数值。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CustomConstantAttribute.#ctor">
<summary>初始化 <see cref="T:System.Runtime.CompilerServices.CustomConstantAttribute"/> 类的新实例。 </summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CustomConstantAttribute.Value">
<summary>获取该属性存储的常数值。</summary>
<returns>该属性存储的常数值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DateTimeConstantAttribute">
<summary>为字段或参数永久保存一个 8 字节的 <see cref="T:System.DateTime"/> 常数。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DateTimeConstantAttribute.#ctor(System.Int64)">
<summary>用表示此实例日期和时间的以 100 毫微秒为单位的数字初始化 DateTimeConstantAttribute 类的新实例。</summary>
<param name="ticks">表示此实例日期和时间的以 100 毫微秒为单位的数字。 </param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DateTimeConstantAttribute.Value">
<summary>获取表示此实例日期和时间的以 100 毫微秒为单位的数字。</summary>
<returns>表示此实例日期和时间的以 100 毫微秒为单位的数字。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DecimalConstantAttribute">
<summary>在元数据中存储 <see cref="T:System.Decimal"/> 常数的值。无法继承此类。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)">
<summary>使用指定的无符号整数值初始化 <see cref="T:System.Runtime.CompilerServices.DecimalConstantAttribute"/> 类的新实例。</summary>
<param name="scale">以 10 次幂表示的比例系数，它指示小数点右边的位数。有效值为从 0 到 28（含）。 </param>
<param name="sign">值 0 指示正值，值 1 指示负值。 </param>
<param name="hi">96 位 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value"/> 的高 32 位。 </param>
<param name="mid">96 位 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value"/> 的中间 32 位。 </param>
<param name="low">96 位 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value"/> 的低 32 位。 </param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value">
<summary>获取存储在此属性中的十进制常数。</summary>
<returns>存储在此属性中的十进制常数。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute">
<summary>在静态值类型字段的整个生存期内固定其地址。无法继承此类。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute.#ctor">
<summary>初始化 <see cref="T:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute"/> 类的新实例。 </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.FixedBufferAttribute">
<summary>指示字段应被视为包含指定基元类型的固定数目的元素。无法继承此类。 </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.FixedBufferAttribute.#ctor(System.Type,System.Int32)">
<summary>初始化 <see cref="T:System.Runtime.CompilerServices.FixedBufferAttribute"/> 类的新实例。 </summary>
<param name="elementType">缓冲区中包含的元素的类型。</param>
<param name="length">缓冲区中元素的数目。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.FixedBufferAttribute.ElementType">
<summary>获取固定缓冲区中包含的元素的类型。 </summary>
<returns>元素的类型。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.FixedBufferAttribute.Length">
<summary>获取缓冲区中元素的数目。 </summary>
<returns>固定缓冲区中元素的数目。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IndexerNameAttribute">
<summary>指示使索引器在不直接支持索引器的编程语言中已知的名称。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IndexerNameAttribute.#ctor(System.String)">
<summary>初始化 <see cref="T:System.Runtime.CompilerServices.IndexerNameAttribute"/> 类的新实例。</summary>
<param name="indexerName">显示给其他语言的索引器名称。 </param>
    </member>
    <member name="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
<summary>指定通常仅在当前程序集中可见的类型对另一个程序集是可见的。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
<summary>用指定的友元程序集的名称初始化 <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute"/> 类的新实例。 </summary>
<param name="assemblyName">友元程序集的名称。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible">
<summary>指定当前程序集中的所有类型都对其他程序集是可见的。</summary>
<returns>此方法不返回值。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName">
<summary>获取友元程序集的名称，采用内部关键字标记的所有类型和类型成员对该程序集均为可见。 </summary>
<returns>友元程序集的名称。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsBoxed">
<summary>指示修饰的引用类型是装箱的值类型。无法继承此类。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsByValue">
<summary>指示修饰的方法参数应解释为具有按值传递对象的语义。此修饰符应用于引用类型。无法继承此类。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsConst">
<summary>指示修饰的类型有一个 const 修饰符。无法继承此类。 </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsExplicitlyDereferenced">
<summary>指示托管指针表示某方法签名内的指针参数。无法继承此类。 </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced">
<summary>指示修饰的垃圾回收引用表示某方法签名内的引用参数。无法继承此类。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsLong">
<summary>指示修饰的整数是标准 C++ 长值。无法继承此类。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsSignUnspecifiedByte">
<summary>指示修饰符既非有符号，也非无符号。无法继承此类。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsUdtReturn">
<summary>指示返回类型是用户定义的类型。无法继承此类。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsVolatile">
<summary>将字段标记为易失。无法继承此类。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodCodeType">
<summary>定义如何实现方法。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.IL">
<summary>指定此方法实现是用 Microsoft 中间语言 (MSIL) 编写的。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.Native">
<summary>指定此方法是用本机代码实现的。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.OPTIL">
<summary>指定此方法实现是用优化中间语言 (OPTIL) 编写的。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.Runtime">
<summary>指定此方法实现由运行时提供。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodImplAttribute">
<summary>指定如何实现某方法的详细信息。无法继承此类。 </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor">
<summary>初始化 MethodImplAttribute 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor(System.Int16)">
<summary>使用指定的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions"/> 值初始化 MethodImplAttribute 类的新实例。</summary>
<param name="value">一个位屏蔽，表示所需的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions"/> 值，该值指定属性化方法的属性。 </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor(System.Runtime.CompilerServices.MethodImplOptions)">
<summary>使用指定的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions"/> 值初始化 MethodImplAttribute 类的新实例。</summary>
<param name="methodImplOptions">一个 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions"/> 值，该值指定特性化方法的属性。 </param>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplAttribute.MethodCodeType">
<summary>一个 <see cref="T:System.Runtime.CompilerServices.MethodCodeType"/> 值，指示为此方法提供了哪种类型的实现。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.MethodImplAttribute.Value">
<summary>获取描述属性化方法的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions"/> 值。 </summary>
<returns>描述属性化方法的值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodImplOptions">
<summary>定义如何实现某方法的详细信息。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.Unmanaged">
<summary>指定此方法是以非托管代码实现的。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.ForwardRef">
<summary>指定声明该方法，但其实现在其他地方提供。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.PreserveSig">
<summary>指定此方法签名完全按声明的样子导出。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.InternalCall">
<summary>指定一个内部调用。内部调用是对在公共语言运行时本身内部实现的方法的调用。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.Synchronized">
<summary>指定同时只能由一个线程执行该方法。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoInlining">
<summary>指定此方法不能内联。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining">
<summary>如果可能的话，应内联该方法。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoOptimization">
<summary>指定不用实时 (JIT) 编译器优化该方法。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.NativeCppClassAttribute">
<summary>将指示类型为非托管类型的元数据应用到程序集。无法继承此类。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.NativeCppClassAttribute.#ctor">
<summary>初始化 <see cref="T:System.Runtime.CompilerServices.NativeCppClassAttribute"/> 类的新实例。 </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute">
<summary>将某个程序集标识为包含元数据而非可执行代码。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.#ctor">
<summary>初始化 <see cref="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute"/> 类的新实例。 </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.#ctor(System.String)">
<summary>使用指定的说明初始化 <see cref="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute"/> 类的新实例。 </summary>
<param name="description">引用程序集的说明。 </param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.Description">
<summary>获取引用程序集的说明。</summary>
<returns>引用程序集的说明。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute">
<summary>指定是否包装不是从 <see cref="T:System.Exception"/> 派生的异常。无法继承此类。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.#ctor">
<summary>初始化 <see cref="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute"/> 类的新实例。 </summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows">
<summary>获取或设置一个值，该值指示是否包装不是从 <see cref="T:System.Exception"/> 类派生的异常。</summary>
<returns>如果应包装不是从 <see cref="T:System.Exception"/> 类派生的异常，则返回 true；否则为 false。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeHelpers">
<summary>提供一组为编译器提供支持的静态方法和属性。无法继承此类。 </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)">
<summary>用作特定类型的哈希函数，适合在哈希算法和数据结构（如哈希表）中使用。</summary>
<returns><paramref name="o"/> 参数标识的 <see cref="T:System.Object"/> 的哈希代码。</returns>
<param name="o">要检索其哈希代码的 <see cref="T:System.Object"/>。 </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetObjectValue(System.Object)">
<summary>将值类型装箱。</summary>
<returns>如果 <paramref name="obj"/> 为值类，则返回它的装箱副本；否则返回 <paramref name="obj"/> 本身。</returns>
<param name="obj">要装箱的值类型。 </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.InitializeArray(System.Array,System.RuntimeFieldHandle)">
<summary>提供从存储在模块中的数据初始化数组的快速方法。</summary>
<param name="array">要初始化的数组。 </param>
<param name="fldHandle">指定用于初始化数组的数据位置的 <see cref="T:System.RuntimeFieldHandle"/>。 </param>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeHelpers.OffsetToStringData">
<summary>获取给定字符串中数据的偏移量（以字节为单位）。</summary>
<returns>字节偏移量，从 <see cref="T:System.String"/> 对象的起始位置到字符串中的第一个字符。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(System.RuntimeTypeHandle)">
<summary>运行指定的类构造函数方法。</summary>
<param name="type">指定要运行的类构造函数方法的 <see cref="T:System.RuntimeTypeHandle"/>。 </param>
    </member>
    <member name="T:System.Runtime.CompilerServices.SpecialNameAttribute">
<summary>指示类型或成员由运行库或工具以一种特殊的方式进行处理。无法继承此类。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.SpecialNameAttribute.#ctor">
<summary>初始化 <see cref="T:System.Runtime.CompilerServices.SpecialNameAttribute"/> 类的新实例。 </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.TypeForwardedFromAttribute">
<summary>指定另一个程序集中的源 <see cref="T:System.Type"/>。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TypeForwardedFromAttribute.#ctor(System.String)">
<summary>初始化 <see cref="T:System.Runtime.CompilerServices.TypeForwardedFromAttribute"/> 类的新实例。 </summary>
<param name="assemblyFullName">另一个程序集中的源 <see cref="T:System.Type"/>。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="assemblyFullName"/> 为 null 或为空。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.TypeForwardedFromAttribute.AssemblyFullName">
<summary>获取源类型的程序集限定名称。</summary>
<returns>源类型的程序集限定名称。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.TypeForwardedToAttribute">
<summary>指定另一个程序集中的目标 <see cref="T:System.Type"/>。无法继承此类。 </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TypeForwardedToAttribute.#ctor(System.Type)">
<summary>初始化指定目标 <see cref="T:System.Type"/> 的 <see cref="T:System.Runtime.CompilerServices.TypeForwardedToAttribute"/> 类的新实例。 </summary>
<param name="destination">另一个程序集中的目标 <see cref="T:System.Type"/>。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.TypeForwardedToAttribute.Destination">
<summary>获取另一个程序集中的目标 <see cref="T:System.Type"/>。</summary>
<returns>另一个程序集中的目标 <see cref="T:System.Type"/>。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.UnsafeValueTypeAttribute">
<summary>指定某个类型包含可能溢出的非托管数组。无法继承此类。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.UnsafeValueTypeAttribute.#ctor">
<summary>初始化 <see cref="T:System.Runtime.CompilerServices.UnsafeValueTypeAttribute"/> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject">
<summary>确保派生类中的所有终止代码均标记为关键。</summary>
    </member>
    <member name="M:System.Runtime.ConstrainedExecution.CriticalFinalizerObject.#ctor">
<summary>初始化 <see cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.ConstrainedExecution.CriticalFinalizerObject.Finalize">
<summary>释放由 <see cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject"/> 类使用的所有资源。</summary>
    </member>
    <member name="T:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute">
<summary>启用托管代码以处理用于指示损坏的进程状态的异常。</summary>
    </member>
    <member name="M:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute.#ctor">
<summary>初始化 <see cref="T:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute"/> 类的新实例。 </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute">
<summary>允许非托管方法调用托管方法。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute.#ctor">
<summary>初始化 <see cref="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute"/> 类的新实例。 </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CallingConvention">
<summary>指定调用在非托管代码中实现的方法所需的调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Winapi">
<summary>此成员实际上不是调用约定，而是使用了默认平台调用约定。例如，在 Windows 上默认为 <see cref="F:System.Runtime.InteropServices.CallingConvention.StdCall"/>，在 Windows CE.NET 上默认为 <see cref="F:System.Runtime.InteropServices.CallingConvention.Cdecl"/>。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Cdecl">
<summary>调用方清理堆栈。这使您能够调用具有 varargs 的函数（如 Printf），使之可用于接受可变数目的参数的方法。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.StdCall">
<summary>被调用方清理堆栈。这是使用平台 invoke 调用非托管函数的默认约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.ThisCall">
<summary>第一个参数是 this 指针，它存储在寄存器 ECX 中。其他参数被推送到堆栈上。此调用约定用于对从非托管 DLL 导出的类调用方法。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.FastCall">
<summary>不支持此调用约定。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CharSet">
<summary>规定封送字符串应使用何种字符集。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.None">
<summary>此值已过时，它与 <see cref="F:System.Runtime.InteropServices.CharSet.Ansi"/> 具有相同的行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Ansi">
<summary>以多字节字符串的形式封送字符串。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Unicode">
<summary>以 Unicode 2 字节字符的形式封送字符串。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Auto">
<summary>针对目标操作系统适当地自动封送字符串。在 Windows NT、Windows 2000、Windows XP 和 Windows Server 2003 系列上，默认值为 <see cref="F:System.Runtime.InteropServices.CharSet.Unicode"/>；在 Windows 98 和 Windows Me 上，默认值为 <see cref="F:System.Runtime.InteropServices.CharSet.Ansi"/>。尽管公共语言运行时默认值为 <see cref="F:System.Runtime.InteropServices.CharSet.Auto"/>，但使用语言可重写此默认值。例如，默认情况下，C# 将所有方法和类型都标记为 <see cref="F:System.Runtime.InteropServices.CharSet.Ansi"/>。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
<summary>为公开给 COM 的类指定要生成的类接口的类型（如果有接口生成）。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)">
<summary>使用指定的 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType"/> 枚举值初始化 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute"/> 类的新实例。</summary>
<param name="classInterfaceType">描述为类生成的接口的类型。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Runtime.InteropServices.ClassInterfaceType)">
<summary>使用指定的 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType"/> 枚举成员初始化 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute"/> 类的新实例。</summary>
<param name="classInterfaceType"><see cref="T:System.Runtime.InteropServices.ClassInterfaceType"/> 值之一，描述为类生成的接口的类型。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ClassInterfaceAttribute.Value">
<summary>获取 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType"/> 值，该值描述应该为该类生成哪种类型的接口。</summary>
<returns>描述应该为该类生成哪种类型的接口的 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType"/> 值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceType">
<summary>标识为某个类生成的类接口的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.None">
<summary>不为类生成类接口。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch">
<summary>该类只支持 COM 客户端的后期绑定。 </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDual">
<summary>自动为类生成双重类接口并向 COM 公开。 </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CoClassAttribute">
<summary>指定从类型库中导入的 coclass 的类标识符。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CoClassAttribute.#ctor(System.Type)">
<summary>用原始 coclass 的类标识符初始化 <see cref="T:System.Runtime.InteropServices.CoClassAttribute"/> 的新实例。</summary>
<param name="coClass">一个 <see cref="T:System.Type"/>，它包含原始 coclass 的类标识符。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices.CoClassAttribute.CoClass">
<summary>获取原始 coclass 的类标识符。</summary>
<returns>一个 <see cref="T:System.Type"/>，它包含原始 coclass 的类标识符。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute">
<summary>指定要向 COM 公开的默认接口。无法继承此类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.#ctor(System.Type)">
<summary>以指定的 <see cref="T:System.Type"/> 对象作为向 COM 公开的默认接口初始化 <see cref="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute"/> 类的新实例。</summary>
<param name="defaultInterface">一个 <see cref="T:System.Type"/> 值，指示要向 COM 公开的默认接口。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.Value">
<summary>获取 <see cref="T:System.Type"/> 对象，该对象指定要向 COM 公开的默认接口。</summary>
<returns>指定要向 COM 公开的默认接口的 <see cref="T:System.Type"/> 对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.COMException">
<summary>当从 COM 方法调用返回无法识别的 HRESULT 时引发的异常。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.ToString">
<summary>将异常的内容转换为字符串。</summary>
<returns>包含异常的 <see cref="P:System.Exception.HResult"/>、<see cref="P:System.Exception.Message"/>、<see cref="P:System.Exception.InnerException"/> 和 <see cref="P:System.Exception.StackTrace"/> 属性的字符串。 </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComImportAttribute">
<summary>指示该属性化类型是以前在 COM 中定义的。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComImportAttribute.#ctor">
<summary>初始化 <see cref="T:System.Runtime.InteropServices.ComImportAttribute"/> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComInterfaceType">
<summary>标识如何向 COM 公开接口。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual">
<summary>指示接口将作为双重接口向 COM 公开，这将启用早期绑定和后期绑定。<see cref="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual"/> 为默认值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown">
<summary>指示接口将作为 IUnknown 派生接口向 COM 公开，这将仅启用早期绑定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch">
<summary>指示接口将作为调度接口向 COM 公开，这将仅启用后期绑定。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComVisibleAttribute">
<summary>控制程序集中个别托管类型、成员或所有类型对 COM 的可访问性。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean)">
<summary>初始化 ComVisibleAttribute 类的新实例。</summary>
<param name="visibility">为 true，指示该类型对于 COM 可见；否则为 false。默认值为 true。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComVisibleAttribute.Value">
<summary>获取一个值，该值指示 COM 类型是否可见。</summary>
<returns>如果该类型可见，则为 true；否则为 false。默认值为 true。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CriticalHandle">
<summary>[SECURITY CRITICAL] 表示句柄资源的包装类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.#ctor(System.IntPtr)">
<summary>[SECURITY CRITICAL] 使用指定的无效句柄值初始化 <see cref="T:System.Runtime.InteropServices.CriticalHandle"/> 类的新实例。</summary>
<param name="invalidHandleValue">无效句柄的值（通常为 0 或 -1）。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Close">
<summary>[SECURITY CRITICAL] 标记句柄，以便释放资源。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Dispose">
<summary>[SECURITY CRITICAL] 释放由 <see cref="T:System.Runtime.InteropServices.CriticalHandle"/> 使用的所有资源。 </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Dispose(System.Boolean)">
<summary>[SECURITY CRITICAL] 释放由 <see cref="T:System.Runtime.InteropServices.CriticalHandle"/> 类使用的未托管资源，并指定是否执行常规处置操作。 </summary>
<param name="disposing">如果进行常规处置操作，则为 true；如果终结句柄，则为 false。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Finalize">
<summary>[SECURITY CRITICAL] 释放与句柄关联的所有资源。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CriticalHandle.handle">
<summary>[SECURITY CRITICAL] 指定要包装的句柄。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.CriticalHandle.IsClosed">
<summary>[SECURITY CRITICAL] 获取一个值，该值指示句柄是否已关闭。</summary>
<returns>如果该句柄已关闭，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.CriticalHandle.IsInvalid">
<summary>[SECURITY CRITICAL] 在派生类中重写后，获取一个值，该值指示句柄值是否无效。</summary>
<returns>如果该句柄有效，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.ReleaseHandle">
<summary>[SECURITY CRITICAL] 如果在派生类中重写，执行释放句柄所需的代码。</summary>
<returns>如果句柄释放成功，则为 true；如果出现灾难性故障，则为 false。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.SetHandle(System.IntPtr)">
<summary>[SECURITY CRITICAL] 将句柄设置为预先存在的指定句柄。</summary>
<param name="handle">要使用的预先存在的句柄。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.SetHandleAsInvalid">
<summary>[SECURITY CRITICAL] 将句柄标记为无效。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultCharSetAttribute">
<summary>指定 <see cref="T:System.Runtime.InteropServices.CharSet"/> 枚举的值。无法继承此类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultCharSetAttribute.#ctor(System.Runtime.InteropServices.CharSet)">
<summary>使用指定的 <see cref="T:System.Runtime.InteropServices.CharSet"/> 值初始化 <see cref="T:System.Runtime.InteropServices.DefaultCharSetAttribute"/> 类的新实例。</summary>
<param name="charSet">其中一个 <see cref="T:System.Runtime.InteropServices.CharSet"/> 值。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultCharSetAttribute.CharSet">
<summary>获取对 <see cref="T:System.Runtime.InteropServices.DllImportAttribute"/> 的任何调用的 <see cref="T:System.Runtime.InteropServices.CharSet"/> 的默认值。</summary>
<returns>对 <see cref="T:System.Runtime.InteropServices.DllImportAttribute"/> 的任何调用的 <see cref="T:System.Runtime.InteropServices.CharSet"/> 的默认值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispIdAttribute">
<summary>指定方法、字段或属性的 COM 调度标识符 (DISPID)。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispIdAttribute.#ctor(System.Int32)">
<summary>用指定的 DISPID 初始化 DispIdAttribute 类的新实例。</summary>
<param name="dispId">成员的 DISPID。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices.DispIdAttribute.Value">
<summary>获取成员的 DISPID。</summary>
<returns>成员的 DISPID。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportAttribute">
<summary>指示该属性化方法由非托管动态链接库 (DLL) 作为静态入口点公开。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
<summary>使用包含要导入的方法的 DLL 的名称初始化 <see cref="T:System.Runtime.InteropServices.DllImportAttribute"/> 类的新实例。</summary>
<param name="dllName">包含非托管方法的 DLL 的名称。如果 DLL 包含在某个程序集中，则可以包含程序集显示名称。</param>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
<summary>将 Unicode 字符转换为 ANSI 字符时，启用或禁用最佳映射行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
<summary>指示入口点的调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
<summary>指示如何向方法封送字符串参数，并控制名称重整。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
<summary>指示要调用的 DLL 入口点的名称或序号。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
<summary>控制 <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet"/> 字段是否使公共语言运行时在非托管 DLL 中搜索指定名称以外的入口点名称。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
<summary>指示是否直接转换具有 HRESULT 或 retval 返回值的非托管方法，或是否自动将 HRESULT 或 retval 返回值转换为异常。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
<summary>指示被调用方在从属性化方法返回之前是否调用 SetLastError Win32 API 函数。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.DllImportAttribute.Value">
<summary>获取包含入口点的 DLL 文件的名称。</summary>
<returns>包含入口点的 DLL 文件的名称。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ExternalException">
<summary>所有 COM 互操作异常和结构化异常处理 (SEH) 异常的异常基类型。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor">
<summary>使用默认属性初始化 ExternalException 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 ExternalException 类的新实例。</summary>
<param name="message">指定异常原因的错误消息。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.ExternalException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="inner">导致当前异常的异常。如果 <paramref name="inner"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ExternalException.ErrorCode">
<summary>获取错误的 HRESULT。</summary>
<returns>错误的 HRESULT。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.FieldOffsetAttribute">
<summary>指示字段在类或结构的托管和非托管表示形式内的物理位置。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.FieldOffsetAttribute.#ctor(System.Int32)">
<summary>使用结构内到字段开始的偏移量初始化 <see cref="T:System.Runtime.InteropServices.FieldOffsetAttribute"/> 类的新实例。</summary>
<param name="offset">从结构开始处到字段开始处的偏移量（以字节为单位）。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices.FieldOffsetAttribute.Value">
<summary>获取从结构开始到字段开始的偏移量。</summary>
<returns>从结构开始到字段开始的偏移量。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.GCHandle">
<summary>提供从非托管内存访问托管对象的方法。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
<summary>[SECURITY CRITICAL] 在 <see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned"/> 句柄中检索对象的地址。</summary>
<returns><see cref="T:System.IntPtr"/> 形式的 Pinned 对象地址。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
<summary>[SECURITY CRITICAL] 为指定的对象分配 <see cref="F:System.Runtime.InteropServices.GCHandleType.Normal"/> 句柄。</summary>
<returns>一个新的 <see cref="T:System.Runtime.InteropServices.GCHandle"/>，它保护对象不被垃圾回收。当不再需要 <see cref="T:System.Runtime.InteropServices.GCHandle"/> 时，必须通过 <see cref="M:System.Runtime.InteropServices.GCHandle.Free"/> 将其释放。</returns>
<param name="value">使用 <see cref="T:System.Runtime.InteropServices.GCHandle"/> 的对象。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
<summary>[SECURITY CRITICAL] 为指定的对象分配指定类型的句柄。</summary>
<returns>指定的类型的新 <see cref="T:System.Runtime.InteropServices.GCHandle"/>。当不再需要 <see cref="T:System.Runtime.InteropServices.GCHandle"/> 时，必须通过 <see cref="M:System.Runtime.InteropServices.GCHandle.Free"/> 将其释放。</returns>
<param name="value">使用 <see cref="T:System.Runtime.InteropServices.GCHandle"/> 的对象。 </param>
<param name="type"><see cref="T:System.Runtime.InteropServices.GCHandleType"/> 值之一，指示要创建的 <see cref="T:System.Runtime.InteropServices.GCHandle"/> 的类型。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Equals(System.Object)">
<summary>确定指定的 <see cref="T:System.Runtime.InteropServices.GCHandle"/> 对象是否等于当前 <see cref="T:System.Runtime.InteropServices.GCHandle"/> 对象。</summary>
<returns>如果指定 <see cref="T:System.Runtime.InteropServices.GCHandle"/> 对象与当前 <see cref="T:System.Runtime.InteropServices.GCHandle"/> 对象相等，则为 true；否则为 false。</returns>
<param name="o">要与当前 <see cref="T:System.Runtime.InteropServices.GCHandle"/> 对象进行比较的 <see cref="T:System.Runtime.InteropServices.GCHandle"/> 对象。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Free">
<summary>[SECURITY CRITICAL] 释放 <see cref="T:System.Runtime.InteropServices.GCHandle"/>。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.GetHashCode">
<summary>返回当前 <see cref="T:System.Runtime.InteropServices.GCHandle"/> 对象的标识符。</summary>
<returns>当前 <see cref="T:System.Runtime.InteropServices.GCHandle"/> 对象的标识符。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.GCHandle.IsAllocated">
<summary>获取一个值，该值指示是否分配了句柄。</summary>
<returns>如果该句柄已分配，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle">
<summary>[SECURITY CRITICAL] <see cref="T:System.Runtime.InteropServices.GCHandle"/> 以内部整数表示形式存储。</summary>
<returns><see cref="T:System.Runtime.InteropServices.GCHandle"/>。</returns>
<param name="value">一个 <see cref="T:System.IntPtr"/>，它指示需要该转换的句柄。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr">
<summary><see cref="T:System.Runtime.InteropServices.GCHandle"/> 以内部整数表示形式存储。</summary>
<returns>整数值。</returns>
<param name="value">需要该整数的 <see cref="T:System.Runtime.InteropServices.GCHandle"/>。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices.GCHandle.Target">
<summary>[SECURITY CRITICAL] 获取或设置该句柄表示的对象。</summary>
<returns>该句柄表示的对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.GCHandleType">
<summary>表示 <see cref="T:System.Runtime.InteropServices.GCHandle"/> 类可以分配的句柄的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Weak">
<summary>此句柄类型用于跟踪对象，但允许回收该对象。当回收某个对象时，<see cref="T:System.Runtime.InteropServices.GCHandle"/> 的内容归零。在终结器运行之前，弱引用归零，因此即使终结器使该对象复活，弱引用仍然是归零的。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.WeakTrackResurrection">
<summary>该句柄类型类似于 <see cref="F:System.Runtime.InteropServices.GCHandleType.Weak"/>，但如果对象在终结过程中复活，此句柄不归零。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Normal">
<summary>此句柄类型表示不透明句柄，这意味着无法通过此句柄解析固定对象的地址。可以使用此类型跟踪对象，并防止它被垃圾回收器回收。当非托管客户端持有对托管对象的唯一引用（从垃圾回收器检测不到该引用）时，此枚举成员很有用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Pinned">
<summary>此句柄类型类似于 <see cref="F:System.Runtime.InteropServices.GCHandleType.Normal"/>，但允许使用固定对象的地址。这将防止垃圾回收器移动对象，因此将降低垃圾回收器的效率。使用 <see cref="M:System.Runtime.InteropServices.GCHandle.Free"/> 方法可尽快释放已分配的句柄。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.GuidAttribute">
<summary>当不需要自动 GUID 时提供显式的 <see cref="T:System.Guid"/>。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GuidAttribute.#ctor(System.String)">
<summary>使用指定的 GUID 初始化 <see cref="T:System.Runtime.InteropServices.GuidAttribute"/> 类的新实例。</summary>
<param name="guid">要分配的 <see cref="T:System.Guid"/>。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices.GuidAttribute.Value">
<summary>获取该类的 <see cref="T:System.Guid"/>。</summary>
<returns>类的 <see cref="T:System.Guid"/>。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InAttribute">
<summary>指示应将数据从调用方封送到被调用方，而不返回到调用方。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InAttribute.#ctor">
<summary>初始化 <see cref="T:System.Runtime.InteropServices.InAttribute"/> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.InterfaceTypeAttribute">
<summary>指示向 COM 公开时，托管接口是双重的、仅支持调度的、还是仅支持 IUnknown 的。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Int16)">
<summary>使用指定的 <see cref="T:System.Runtime.InteropServices.ComInterfaceType"/> 枚举成员初始化 <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute"/> 类的新实例。</summary>
<param name="interfaceType">描述应如何向 COM 客户端公开接口。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Runtime.InteropServices.ComInterfaceType)">
<summary>使用指定的 <see cref="T:System.Runtime.InteropServices.ComInterfaceType"/> 枚举成员初始化 <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute"/> 类的新实例。</summary>
<param name="interfaceType"><see cref="T:System.Runtime.InteropServices.ComInterfaceType"/> 值之一，指定如何向 COM 客户端公开接口。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices.InterfaceTypeAttribute.Value">
<summary>获取 <see cref="T:System.Runtime.InteropServices.ComInterfaceType"/> 值，该值描述应如何向 COM 公开接口。</summary>
<returns><see cref="T:System.Runtime.InteropServices.ComInterfaceType"/> 值，该值描述应如何向 COM 公开接口。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.LayoutKind">
<summary>控制当导出到非托管代码时对象的布局。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Sequential">
<summary>对象的成员按照它们在导出到非托管内存时出现的顺序依次布局。这些成员根据在 <see cref="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack"/> 中指定的封装进行布局，并且可以是不连续的。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Explicit">
<summary>对象的各个成员在非托管内存中的精确位置被显式控制。每个成员必须使用 <see cref="T:System.Runtime.InteropServices.FieldOffsetAttribute"/> 指示该字段在类型中的位置。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Auto">
<summary>运行库自动为非托管内存中的对象的成员选择适当的布局。使用此枚举成员定义的对象不能在托管代码的外部公开。尝试这样做将引发异常。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshal">
<summary>[SECURITY CRITICAL] 提供了一个方法集，这些方法用于分配非托管内存、复制非托管内存块、将托管类型转换为非托管类型，此外还提供了在与非托管代码交互时使用的其他杂项方法。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)">
<summary>[SECURITY CRITICAL] 将一维的托管 8 位无符号整数数组中的数据复制到非托管内存指针。</summary>
<param name="source">从中进行复制的一维数组。 </param>
<param name="startIndex">数组中复制开始位置的从零开始的索引。 </param>
<param name="destination">要复制到的内存指针。 </param>
<param name="length">要复制的数组元素的数目。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)">
<summary>[SECURITY CRITICAL] 将数据从一维的托管字符数组复制到非托管内存指针。</summary>
<param name="source">从中进行复制的一维数组。 </param>
<param name="startIndex">数组中复制开始位置的从零开始的索引。 </param>
<param name="destination">要复制到的内存指针。 </param>
<param name="length">要复制的数组元素的数目。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)">
<summary>[SECURITY CRITICAL] 将数据从一维的托管双精度浮点数组复制到非托管内存指针。</summary>
<param name="source">从中进行复制的一维数组。 </param>
<param name="startIndex">数组中复制开始位置的从零开始的索引。 </param>
<param name="destination">要复制到的内存指针。 </param>
<param name="length">要复制的数组元素的数目。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)">
<summary>[SECURITY CRITICAL] 将一维的托管 16 位带符号整数数组中的数据复制到非托管内存指针。</summary>
<param name="source">从中进行复制的一维数组。 </param>
<param name="startIndex">数组中复制开始位置的从零开始的索引。 </param>
<param name="destination">要复制到的内存指针。 </param>
<param name="length">要复制的数组元素的数目。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)">
<summary>[SECURITY CRITICAL] 将一维的托管 32 位带符号整数数组中的数据复制到非托管内存指针。</summary>
<param name="source">从中进行复制的一维数组。 </param>
<param name="startIndex">数组中复制开始位置的从零开始的索引。 </param>
<param name="destination">要复制到的内存指针。 </param>
<param name="length">要复制的数组元素的数目。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)">
<summary>[SECURITY CRITICAL] 将一维的托管 64 位带符号整数数组中的数据复制到非托管内存指针。</summary>
<param name="source">从中进行复制的一维数组。 </param>
<param name="startIndex">数组中复制开始位置的从零开始的索引。 </param>
<param name="destination">要复制到的内存指针。 </param>
<param name="length">要复制的数组元素的数目。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
<summary>[SECURITY CRITICAL] 将数据从非托管内存指针复制到托管 8 位无符号整数数组。</summary>
<param name="source">内存指针，从中进行复制。 </param>
<param name="destination">要复制到的数组。 </param>
<param name="startIndex">数组中复制开始位置的从零开始的索引。 </param>
<param name="length">要复制的数组元素的数目。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)">
<summary>[SECURITY CRITICAL] 将数据从非托管内存指针复制到托管字符数组。</summary>
<param name="source">内存指针，从中进行复制。 </param>
<param name="destination">要复制到的数组。 </param>
<param name="startIndex">数组中复制开始位置的从零开始的索引。 </param>
<param name="length">要复制的数组元素的数目。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)">
<summary>[SECURITY CRITICAL] 将数据从非托管内存指针复制到托管双精度浮点数组。</summary>
<param name="source">内存指针，从中进行复制。 </param>
<param name="destination">要复制到的数组。 </param>
<param name="startIndex">数组中复制开始位置的从零开始的索引。 </param>
<param name="length">要复制的数组元素的数目。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)">
<summary>[SECURITY CRITICAL] 将数据从非托管内存指针复制到托管 16 位带符号整数数组。</summary>
<param name="source">内存指针，从中进行复制。 </param>
<param name="destination">要复制到的数组。 </param>
<param name="startIndex">数组中复制开始位置的从零开始的索引。 </param>
<param name="length">要复制的数组元素的数目。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)">
<summary>[SECURITY CRITICAL] 将数据从非托管内存指针复制到托管 32 位带符号整数数组。</summary>
<param name="source">内存指针，从中进行复制。 </param>
<param name="destination">要复制到的数组。 </param>
<param name="startIndex">数组中复制开始位置的从零开始的索引。 </param>
<param name="length">要复制的数组元素的数目。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)">
<summary>[SECURITY CRITICAL] 将数据从非托管内存指针复制到托管 64 位带符号整数数组。</summary>
<param name="source">内存指针，从中进行复制。 </param>
<param name="destination">要复制到的数组。 </param>
<param name="startIndex">数组中复制开始位置的从零开始的索引。 </param>
<param name="length">要复制的数组元素的数目。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)">
<summary>[SECURITY CRITICAL] 将数据从非托管内存指针复制到托管单精度浮点数组。</summary>
<param name="source">内存指针，从中进行复制。 </param>
<param name="destination">要复制到的数组。 </param>
<param name="startIndex">数组中复制开始位置的从零开始的索引。 </param>
<param name="length">要复制的数组元素的数目。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)">
<summary>[SECURITY CRITICAL] 将数据从一维的托管单精度浮点数组复制到非托管内存指针。</summary>
<param name="source">从中进行复制的一维数组。 </param>
<param name="startIndex">数组中复制开始位置的从零开始的索引。 </param>
<param name="destination">要复制到的内存指针。 </param>
<param name="length">要复制的数组元素的数目。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)">
<summary>[SECURITY CRITICAL] 将非托管函数指针转换为委托。</summary>
<returns>委托实例，可强制转换为适当的委托类型。</returns>
<param name="ptr"><see cref="T:System.IntPtr"/> 类型，该参数是要转换的非托管函数指针。 </param>
<param name="t">要返回的委托的类型。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)">
<summary>[SECURITY CRITICAL] 将指定的 HRESULT 错误代码转换为对应的 <see cref="T:System.Exception"/> 对象。</summary>
<returns><see cref="T:System.Exception"/> 对象，表示转换后的 HRESULT。</returns>
<param name="errorCode">要转换的 HRESULT。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)">
<summary>[SECURITY CRITICAL] 将委托转换为可从非托管代码调用的函数指针。</summary>
<returns>可传递给非托管代码的 <see cref="T:System.IntPtr"/> 值，非托管代码使用该值来调用基础托管委托。</returns>
<param name="d">要传递给非托管代码的委托。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)">
<summary>[SECURITY CRITICAL] 将指定异常转换为 HRESULT。</summary>
<returns>映射到所提供的异常的 HRESULT。</returns>
<param name="e">要转换为 HRESULT 的 <see cref="T:System.Exception"/>。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error">
<summary>[SECURITY CRITICAL] 返回由上一个非托管函数返回的错误代码，该函数是使用设置了 <see cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError"/> 标志的平台调用来调用的。</summary>
<returns>通过调用 Win32 SetLastError API 方法设置的最后一个错误代码。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)">
<summary>[SECURITY CRITICAL] 在不调用方法的情况下执行一次性方法设置任务。</summary>
<param name="m">用于标识要检查的方法的 <see cref="T:System.Reflection.MethodInfo"/>。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)">
<summary>[SECURITY CRITICAL] 对类上的所有方法执行预链接检查。</summary>
<param name="c">标识要检查其方法的类的 <see cref="T:System.Type"/>。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)">
<summary>[SECURITY CRITICAL] 将非托管 ANSI 字符串中第一个空值之前的所有字符复制到托管 <see cref="T:System.String"/>。将每个 ANSI 字符扩展为 Unicode 字符。</summary>
<returns>托管 <see cref="T:System.String"/> 对象，包含非托管 ANSI 字符串的副本。如果 <paramref name="ptr"/> 为 null，则该方法返回空字符串。</returns>
<param name="ptr">非托管字符串第一个字符的地址。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)">
<summary>[SECURITY CRITICAL] 分配托管 <see cref="T:System.String"/>，然后从非托管 ANSI 字符串向其复制指定数目的字符，并将每个 ANSI 字符扩展为 Unicode 字符。</summary>
<returns>如果 <paramref name="ptr"/> 参数的值不是 null，则为包含本机 ANSI 字符串副本的托管 <see cref="T:System.String"/>；否则，此方法返回 null。</returns>
<param name="ptr">非托管字符串第一个字符的地址。 </param>
<param name="len">要复制的输入字符串的字节数。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)">
<summary>[SECURITY CRITICAL] 分配托管 <see cref="T:System.String"/>，并从非托管 Unicode 字符串向其复制第一个空字符之前的所有字符。</summary>
<returns>如果 <paramref name="ptr"/> 参数的值不是 null，则为包含本机字符串副本的托管字符串；否则，此方法返回 null。</returns>
<param name="ptr">非托管字符串第一个字符的地址。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)">
<summary>[SECURITY CRITICAL] 将指定数目的字符从存储在本机堆中的 Unicode 字符串复制到托管 <see cref="T:System.String"/>。</summary>
<returns>如果 <paramref name="ptr"/> 参数的值不是 null，则为包含本机字符串副本的托管字符串；否则，此方法返回 null。</returns>
<param name="ptr">非托管字符串第一个字符的地址。 </param>
<param name="len">要复制的 Unicode 字符数。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)">
<summary>[SECURITY CRITICAL] 将数据从非托管内存块封送到托管对象。</summary>
<param name="ptr">指向非托管内存块的指针。 </param>
<param name="structure">将数据复制到其中的对象。这必须是格式化类的实例。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)">
<summary>[SECURITY CRITICAL] 将数据从非托管内存块封送到新分配的指定类型的托管对象。</summary>
<returns>一个托管对象，包含 <paramref name="ptr"/> 参数指向的数据。</returns>
<param name="ptr">指向非托管内存块的指针。 </param>
<param name="structureType">要创建的对象的 <see cref="T:System.Type"/>。此类型对象必须表示格式化类或结构。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)">
<summary>[SECURITY CRITICAL] 从非托管指针读取单个字节。</summary>
<returns>从 <paramref name="ptr"/> 参数中读取的字节。</returns>
<param name="ptr">非托管内存中开始读取的地址。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)">
<summary>[SECURITY CRITICAL] 从非托管指针按给定的偏移量（或索引）读取单个字节。</summary>
<returns>从 <paramref name="ptr"/> 参数中读取的字节。</returns>
<param name="ptr">非托管内存中开始读取的基址。 </param>
<param name="ofs">额外的字节偏移量，在读取前添加到 <paramref name="ptr"/> 中。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)">
<summary>[SECURITY CRITICAL] 从非托管内存中读取一个 16 位带符号整数。</summary>
<returns>从 <paramref name="ptr"/> 参数中读取的 16 位带符号整数。</returns>
<param name="ptr">非托管内存中开始读取的地址。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)">
<summary>[SECURITY CRITICAL] 从非托管内存中读取一个 16 位带符号整数。</summary>
<returns>从 <paramref name="ptr"/> 读取的 16 位带符号整数。</returns>
<param name="ptr">非托管内存中开始读取的基址。</param>
<param name="ofs">额外的字节偏移量，在读取前添加到 <paramref name="ptr"/> 中。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)">
<summary>[SECURITY CRITICAL] 从非托管内存中读取一个 32 位带符号整数。</summary>
<returns>从 <paramref name="ptr"/> 参数中读取的 32 位带符号整数。</returns>
<param name="ptr">非托管内存中开始读取的地址。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)">
<summary>[SECURITY CRITICAL] 从非托管内存中读取一个 32 位带符号整数。</summary>
<returns>从 <paramref name="ptr"/> 参数中读取的 32 位带符号整数。</returns>
<param name="ptr">非托管内存中开始读取的基址。 </param>
<param name="ofs">额外的字节偏移量，在读取前添加到 <paramref name="ptr"/> 中。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)">
<summary>[SECURITY CRITICAL] 从非托管内存中读取一个 64 位带符号整数。</summary>
<returns>从 <paramref name="ptr"/> 参数中读取的 64 位带符号整数。</returns>
<param name="ptr">非托管内存中开始读取的地址。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)">
<summary>[SECURITY CRITICAL] 从非托管内存中读取一个 64 位带符号整数。</summary>
<returns>从 <paramref name="ptr"/> 参数中读取的 64 位带符号整数。</returns>
<param name="ptr">非托管内存中开始读取的基址。 </param>
<param name="ofs">额外的字节偏移量，在读取前添加到 <paramref name="ptr"/> 中。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)">
<summary>[SECURITY CRITICAL] 从非托管内存中读取处理器本机大小的整数。</summary>
<returns>从 <paramref name="ptr"/> 参数中读取的 IntPtr。</returns>
<param name="ptr">非托管内存中开始读取的地址。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)">
<summary>[SECURITY CRITICAL] 返回对象的非托管大小（以字节为单位）。</summary>
<returns>非托管代码中的 <paramref name="structure"/> 参数的大小。</returns>
<param name="structure">要返回其大小的对象。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Type)">
<summary>[SECURITY CRITICAL] 返回字节的非托管大小（以字节为单位）。</summary>
<returns>非托管代码中的 <paramref name="structure"/> 参数的大小。</returns>
<param name="t">要返回其大小的 <see cref="T:System.Type"/>。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)">
<summary>[SECURITY CRITICAL] 将数据从托管对象封送到非托管内存块。</summary>
<param name="structure">托管对象，包含要封送的数据。该对象必须是格式化类的实例。 </param>
<param name="ptr">指向非托管内存块的指针，必须在调用此方法之前分配该指针。 </param>
<param name="fDeleteOld">如果值为 true，则将在执行此方法之前释放 <paramref name="ptr"/> 参数指向的内存。请注意，传递 false 可导致内存泄漏。 </param>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize">
<summary>[SECURITY CRITICAL] 表示系统上的默认字符大小；Unicode 系统上默认值为 2，ANSI 系统上默认值为 1。此字段为只读。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)">
<summary>[SECURITY CRITICAL] 用特定的失败 HRESULT 值引发异常。</summary>
<param name="errorCode">与所需异常相对应的 HRESULT。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)">
<summary>[SECURITY CRITICAL] 用特定的失败 HRESULT 引发异常。</summary>
<param name="errorCode">与所需异常相对应的 HRESULT。 </param>
<param name="errorInfo">指向 COM 对象所提供的 IErrorInfo 接口的指针。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)">
<summary>[SECURITY CRITICAL] 将单个字节值写入到非托管内存。</summary>
<param name="ptr">非托管内存中要写入的地址。 </param>
<param name="val">要写入的值。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)">
<summary>[SECURITY CRITICAL] 将单个字节值写入到非托管内存。</summary>
<param name="ptr">非托管内存中要写入的基址。 </param>
<param name="ofs">额外的字节偏移量，在写入前添加到 <paramref name="ptr"/> 参数中。 </param>
<param name="val">要写入的值。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)">
<summary>[SECURITY CRITICAL] 将 16 位整数值写入非托管内存。</summary>
<param name="ptr">非托管内存中要写入的地址。 </param>
<param name="val">要写入的值。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)">
<summary>[SECURITY CRITICAL] 将 16 位带符号整数值写入非托管内存。</summary>
<param name="ptr">非托管内存中要写入的基址。 </param>
<param name="ofs">额外的字节偏移量，在写入前添加到 <paramref name="ptr"/> 参数中。 </param>
<param name="val">要写入的值。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)">
<summary>[SECURITY CRITICAL] 将 32 位带符号整数值写入非托管内存。</summary>
<param name="ptr">非托管内存中要写入的地址。 </param>
<param name="val">要写入的值。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)">
<summary>[SECURITY CRITICAL] 将 32 位带符号整数值写入非托管内存。</summary>
<param name="ptr">非托管内存中要写入的基址。 </param>
<param name="ofs">额外的字节偏移量，在写入前添加到 <paramref name="ptr"/> 参数中。 </param>
<param name="val">要写入的值。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)">
<summary>[SECURITY CRITICAL] 将 64 位带符号整数值写入非托管内存。</summary>
<param name="ptr">非托管内存中要写入的基址。 </param>
<param name="ofs">额外的字节偏移量，在写入前添加到 <paramref name="ptr"/> 参数中。 </param>
<param name="val">要写入的值。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)">
<summary>[SECURITY CRITICAL] 将 64 位带符号整数值写入非托管内存。</summary>
<param name="ptr">非托管内存中要写入的地址。 </param>
<param name="val">要写入的值。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)">
<summary>[SECURITY CRITICAL] 将处理器本机大小的整数值写入非托管内存。</summary>
<param name="ptr">非托管内存中要写入的地址。 </param>
<param name="val">要写入的值。 </param>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalAsAttribute">
<summary>指示如何在托管代码和非托管代码之间封送数据。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Int16)">
<summary>使用指定的 <see cref="T:System.Runtime.InteropServices.UnmanagedType"/> 值初始化 <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute"/> 类的新实例。</summary>
<param name="unmanagedType">数据将封送为的 <see cref="T:System.Runtime.InteropServices.UnmanagedType"/> 值。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)">
<summary>使用指定的 <see cref="T:System.Runtime.InteropServices.UnmanagedType"/> 枚举成员初始化 <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute"/> 类的新实例。</summary>
<param name="unmanagedType">数据将封送为的 <see cref="T:System.Runtime.InteropServices.UnmanagedType"/> 值。 </param>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType">
<summary>指定非托管 <see cref="F:System.Runtime.InteropServices.UnmanagedType.LPArray"/> 或 <see cref="F:System.Runtime.InteropServices.UnmanagedType.ByValArray"/> 的元素类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie">
<summary>向自定义封送拆收器提供附加信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType">
<summary>指定自定义封送拆收器的完全限定名。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef">
<summary>将 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType"/> 作为类型实现。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst">
<summary>指示固定长度数组中的元素数，或要导入的字符串中的字符（不是字节）数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex">
<summary>指示哪个参数包含数组元素的计数（与 COM 中的 size_is 极为相似），并且从零开始。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.MarshalAsAttribute.Value">
<summary>获取数据将封送为的 <see cref="T:System.Runtime.InteropServices.UnmanagedType"/> 值。</summary>
<returns>数据将封送为的值。 </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalDirectiveException">
<summary>当封送拆收器遇到它不支持的 <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute"/> 时由该封送拆收器引发的异常。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.OptionalAttribute">
<summary>指示参数是可选的。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OptionalAttribute.#ctor">
<summary>使用默认值初始化 OptionalAttribute 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.OutAttribute">
<summary>指示应将数据从被调用方封送回调用方。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OutAttribute.#ctor">
<summary>初始化 <see cref="T:System.Runtime.InteropServices.OutAttribute"/> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PreserveSigAttribute">
<summary>指示应取消在 COM 互操作调用期间发生的 HRESULT 或 retval 签名转换。 </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PreserveSigAttribute.#ctor">
<summary>初始化 <see cref="T:System.Runtime.InteropServices.PreserveSigAttribute"/> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeHandle">
<summary>[SECURITY CRITICAL] 表示操作系统句柄的包装类。必须继承此类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.#ctor">
<summary>[SECURITY CRITICAL] 使用系统默认值初始化 <see cref="T:System.Runtime.InteropServices.SafeHandle"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
<summary>[SECURITY CRITICAL] 使用指定的无效句柄值初始化 <see cref="T:System.Runtime.InteropServices.SafeHandle"/> 类的新实例。</summary>
<param name="invalidHandleValue">无效句柄的值（通常为 0 或 -1）。<see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid"/> 的实现应对此值返回 true。</param>
<param name="ownsHandle">在终止阶段使 <see cref="T:System.Runtime.InteropServices.SafeHandle"/> 可靠地释放句柄，则为 true；否则为 false（不建议使用）。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Close">
<summary>[SECURITY CRITICAL] 标记句柄，以便释放资源。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
<summary>[SECURITY CRITICAL] 手动递增 <see cref="T:System.Runtime.InteropServices.SafeHandle"/> 实例中的引用计数器。 </summary>
<param name="success">如果成功递增引用计数器，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
<summary>[SECURITY CRITICAL] 返回 <see cref="F:System.Runtime.InteropServices.SafeHandle.handle"/> 字段的值。</summary>
<returns>一个 IntPtr，表示 <see cref="F:System.Runtime.InteropServices.SafeHandle.handle"/> 字段的值。如果句柄已使用 <see cref="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid"/> 标记为无效，此方法仍返回原来的句柄值，该值可能已失效。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease">
<summary>[SECURITY CRITICAL] 手动递减 <see cref="T:System.Runtime.InteropServices.SafeHandle"/> 实例中的引用计数器。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Dispose">
<summary>[SECURITY CRITICAL] 释放由 <see cref="T:System.Runtime.InteropServices.SafeHandle"/> 类使用的所有资源。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)">
<summary>[SECURITY CRITICAL] 释放由 <see cref="T:System.Runtime.InteropServices.SafeHandle"/> 类使用的非托管资源，并指定是否执行常规处置操作。 </summary>
<param name="disposing">如果进行常规处置操作，则为 true；如果终结句柄，则为 false。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Finalize">
<summary>[SECURITY CRITICAL] 释放与句柄关联的所有资源。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.SafeHandle.handle">
<summary>[SECURITY CRITICAL] 指定要包装的句柄。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeHandle.IsClosed">
<summary>[SECURITY CRITICAL] 获取一个值，该值指示句柄是否已关闭。</summary>
<returns>如果该句柄已关闭，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
<summary>[SECURITY CRITICAL] 在派生类中重写后，获取一个值，该值指示句柄值是否无效。</summary>
<returns>如果句柄值无效，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
<summary>[SECURITY CRITICAL] 如果在派生类中重写，执行释放句柄所需的代码。</summary>
<returns>如果句柄释放成功，则为 true；如果出现灾难性故障，则为 false。 </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)">
<summary>[SECURITY CRITICAL] 将句柄设置为预先存在的指定句柄。</summary>
<param name="handle">要使用的预先存在的句柄。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid">
<summary>[SECURITY CRITICAL] 将句柄标记为不再使用。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.SEHException">
<summary>表示结构化异常处理程序 (SEH) 错误。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.StructLayoutAttribute">
<summary>StructLayoutAttribute 类使用户可以控制类或结构的数据字段的物理布局。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)">
<summary>使用指定的 <see cref="T:System.Runtime.InteropServices.LayoutKind"/> 枚举成员初始化 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute"/> 类的新实例。</summary>
<param name="layoutKind"><see cref="T:System.Runtime.InteropServices.LayoutKind"/> 值之一，它指定类或结构的排列方式。 </param>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet">
<summary>指示在默认情况下应如何将类中的字符串数据字段作为 LPWSTR 或 LPSTR 进行封送处理。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
<summary>控制类或结构的数据字段在内存中的对齐方式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.Size">
<summary>指示类或结构的绝对大小。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.StructLayoutAttribute.Value">
<summary>获取 <see cref="T:System.Runtime.InteropServices.LayoutKind"/> 值，该值指定如何排列类或结构。</summary>
<returns><see cref="T:System.Runtime.InteropServices.LayoutKind"/> 值，该值指定如何排列类或结构。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute">
<summary>控制作为非托管函数指针传入或传出非托管代码的委托签名的封送行为。无法继承此类。 </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)">
<summary>使用指定的调用约定初始化 <see cref="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute"/> 类的新实例。 </summary>
<param name="callingConvention">指定的调用约定。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CallingConvention">
<summary>获取调用约定的值。</summary>
<returns><see cref="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)"/> 构造函数指定的调用约定的值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedType">
<summary>指定如何将参数或字段封送到非托管代码。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Bool">
<summary>4 字节布尔值（true != 0、false = 0）。这是 Win32 BOOL 类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I1">
<summary>1 字节带符号整数。可使用此成员将布尔值转换为 1 字节、C 样式的布尔（true = 1、false = 0 ）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U1">
<summary>1 字节无符号整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I2">
<summary>2 字节带符号整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U2">
<summary>2 字节无符号整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I4">
<summary>4 字节带符号整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U4">
<summary>4 字节无符号整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I8">
<summary>8 字节带符号整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U8">
<summary>8 字节无符号整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R4">
<summary>4 字节浮点数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R8">
<summary>8 字节浮点数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Currency">
<summary>在 <see cref="T:System.Decimal"/> 上使用，以将十进制数值作为 COM 货币类型而不是 Decimal 封送。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStr">
<summary>单字节、空终止的 ANSI 字符串。可在 <see cref="T:System.String"/> 或 <see cref="T:System.Text.StringBuilder"/> 数据类型上使用此成员</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPWStr">
<summary>一个 2 字节、空终止的 Unicode 字符串。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPTStr">
<summary>与平台相关的字符串：在 Windows 98 上为 ANSI，在 Windows NT 和 Windows XP 上为 Unicode。该值仅对平台调用受支持，而对 COM 互操作则不受支持，原因是不支持导出 LPTStr 类型的字符串。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValTStr">
<summary>用于在结构中出现的内联定长字符数组。与 <see cref="F:System.Runtime.InteropServices.UnmanagedType.ByValTStr"/> 一起使用的字符类型由应用于包含结构的 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute"/> 的 <see cref="T:System.Runtime.InteropServices.CharSet"/> 参数确定。应始终使用 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst"/> 字段来指示数组的大小。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IUnknown">
<summary>一个 COM IUnknown 指针。可以在 <see cref="T:System.Object"/> 数据类型上使用此成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Struct">
<summary>一个用于封送托管格式化类和值类型的 VARIANT。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValArray">
<summary>当 <see cref="P:System.Runtime.InteropServices.MarshalAsAttribute.Value"/> 设置为 ByValArray 时，必须设置 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst"/> 以指示数组中的元素数。当需要区分字符串类型时，<see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType"/> 字段可以选择包含数组元素的 <see cref="T:System.Runtime.InteropServices.UnmanagedType"/>。此 <see cref="T:System.Runtime.InteropServices.UnmanagedType"/> 只可用于作为结构中的字段的数组。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysInt">
<summary>与平台相关的带符号整数。在 32 位 Windows 上为 4 字节，在 64 位 Windows 上为 8 字节。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysUInt">
<summary>与平台相关的无符号整数。在 32 位 Windows 上为 4 字节，在 64 位 Windows 上为 8 字节。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.FunctionPtr">
<summary>一个可用作 C 样式函数指针的整数。可将此成员用于 <see cref="T:System.Delegate"/> 数据类型或从 <see cref="T:System.Delegate"/> 继承的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AsAny">
<summary>一个动态类型，将在运行时确定对象的类型，并将该对象作为所确定的类型进行封送处理。仅对平台调用方法有效。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPArray">
<summary>指向 C 样式数组的第一个元素的指针。当从托管到非托管进行封送处理时，该数组的长度由托管数组的长度确定。当从非托管到托管进行封送处理时，将根据 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst"/> 和 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex"/> 字段确定该数组的长度，当需要区分字符串类型时，还可以后跟数组中元素的非托管类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStruct">
<summary>一个指针，它指向用于封送托管格式化类的 C 样式结构。仅对平台调用方法有效。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Error">
<summary>此与 <see cref="F:System.Runtime.InteropServices.UnmanagedType.I4"/> 或 <see cref="F:System.Runtime.InteropServices.UnmanagedType.U4"/> 关联的本机类型将导致参数作为导出类型库中的 HRESULT 导出。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.BStr">
<summary>长度前缀为双字节的 Unicode 字符串。可以在 <see cref="T:System.String"/> 数据类型上使用此成员（它是 COM 中的默认字符串）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IDispatch">
<summary>一个 COM IDispatch 指针（在 Microsoft Visual Basic 6.0 中为 Object）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Interface">
<summary>一个 COM 接口指针。从类元数据获得接口的 <see cref="T:System.Guid"/>。如果将此成员应用于类，则可以使用该成员指定确切的接口类型或默认的接口类型。当应用于 <see cref="T:System.Object"/> 数据类型时，此成员将产生 <see cref="F:System.Runtime.InteropServices.UnmanagedType.IUnknown"/> 行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SafeArray">
<summary>SafeArray 是自我描述的数组，它带有关联数组数据的类型、秩和界限。 </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VBByRefStr">
<summary>允许 Visual Basic 2005 在非托管代码中更改字符串，并将结果在托管代码中反映出来。该值仅对平台调用受支持。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AnsiBStr">
<summary>长度前缀为单字节的 ANSI 字符串。可以在 <see cref="T:System.String"/> 数据类型上使用此成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.TBStr">
<summary>一个有长度前缀的与平台相关的 char 字符串。在 Windows 98 上为 ANSI，在 Windows NT 上为 Unicode。很少用到这个类似于 BSTR 的成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VariantBool">
<summary>2 字节、OLE 定义的 VARIANT_BOOL 类型（true = -1、false = 0）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler">
<summary>当与 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType"/> 或 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef"/> 一起使用时，指定自定义封送拆收器类。<see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie"/> 字段可用于将附加信息传递给自定义封送拆收器。可以在任何引用类型上使用此成员。</summary>
    </member>
    <member name="T:System.Runtime.Serialization.OnDeserializedAttribute">
<summary>当应用于某方法时，指定在对象反序列化后立即调用此方法。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.OnDeserializedAttribute.#ctor">
<summary>初始化 <see cref="T:System.Runtime.Serialization.OnDeserializedAttribute"/> 类的新实例。 </summary>
    </member>
    <member name="T:System.Runtime.Serialization.OnDeserializingAttribute">
<summary>当应用至方法时，指定反序列化对象时调用的方法。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.OnDeserializingAttribute.#ctor">
<summary>初始化 <see cref="T:System.Runtime.Serialization.OnDeserializingAttribute"/> 类的新实例。 </summary>
    </member>
    <member name="T:System.Runtime.Serialization.OnSerializedAttribute">
<summary>如果将对象图应用于某方法，则应指定在序列化该对象图后是否调用该方法。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.OnSerializedAttribute.#ctor">
<summary>初始化 <see cref="T:System.Runtime.Serialization.OnSerializedAttribute"/> 类的新实例。 </summary>
    </member>
    <member name="T:System.Runtime.Serialization.OnSerializingAttribute">
<summary>当应用于某个方法时，指定在对象序列化前调用此方法。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.OnSerializingAttribute.#ctor">
<summary>初始化 <see cref="T:System.Runtime.Serialization.OnSerializingAttribute"/> 类的新实例。 </summary>
    </member>
    <member name="T:System.Runtime.Serialization.SerializationException">
<summary>在序列化或反序列化期间出错时所引发的异常。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationException.#ctor">
<summary>使用默认属性初始化 <see cref="T:System.Runtime.Serialization.SerializationException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationException.#ctor(System.String)">
<summary>使用指定的消息初始化 <see cref="T:System.Runtime.Serialization.SerializationException"/> 类的新实例。</summary>
<param name="message">发生异常的原因。 </param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.Serialization.SerializationException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="T:System.Runtime.Serialization.StreamingContext">
<summary>描述给定的序列化流的源和目标，并提供一个由调用方定义的附加上下文。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.StreamingContext.#ctor(System.Runtime.Serialization.StreamingContextStates)">
<summary>使用给定的上下文状态初始化 <see cref="T:System.Runtime.Serialization.StreamingContext"/> 类的新实例。</summary>
<param name="state">指定此 <see cref="T:System.Runtime.Serialization.StreamingContext"/> 的源或目标上下文的 <see cref="T:System.Runtime.Serialization.StreamingContextStates"/> 值的按位组合。 </param>
    </member>
    <member name="M:System.Runtime.Serialization.StreamingContext.#ctor(System.Runtime.Serialization.StreamingContextStates,System.Object)">
<summary>使用给定的上下文状态以及一些附加信息来初始化 <see cref="T:System.Runtime.Serialization.StreamingContext"/> 类的新实例。</summary>
<param name="state">指定此 <see cref="T:System.Runtime.Serialization.StreamingContext"/> 的源或目标上下文的 <see cref="T:System.Runtime.Serialization.StreamingContextStates"/> 值的按位组合。 </param>
<param name="additional">任何与 <see cref="T:System.Runtime.Serialization.StreamingContext"/> 关联的附加信息。此信息对所有实现 <see cref="T:System.Runtime.Serialization.ISerializable"/> 或任何序列化代理项的对象均可用。大多数用户无需设置此参数。 </param>
    </member>
    <member name="P:System.Runtime.Serialization.StreamingContext.Context">
<summary>获取指定为附加上下文一部分的上下文。</summary>
<returns>指定为附加上下文一部分的上下文。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.StreamingContext.Equals(System.Object)">
<summary>确定两个 <see cref="T:System.Runtime.Serialization.StreamingContext"/> 实例是否包含相同的值。</summary>
<returns>如果指定对象是 <see cref="T:System.Runtime.Serialization.StreamingContext"/> 的实例且等于当前实例的值，则为 true；否则为 false。</returns>
<param name="obj">与当前实例进行比较的对象。 </param>
    </member>
    <member name="M:System.Runtime.Serialization.StreamingContext.GetHashCode">
<summary>返回该对象的哈希代码。</summary>
<returns><see cref="T:System.Runtime.Serialization.StreamingContextStates"/> 值，它包含为此 <see cref="T:System.Runtime.Serialization.StreamingContext"/> 进行序列化的源或目标。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.StreamingContext.State">
<summary>获取传输数据的源或目标。</summary>
<returns>在序列化过程中为传输数据的目标。在反序列化过程中为数据的源。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.StreamingContextStates">
<summary>定义一个标记集，用于在序列化过程中指定流的源或目标上下文。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.CrossProcess">
<summary>指定源或目标上下文是同一计算机上的另外一个进程。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.CrossMachine">
<summary>指定源或目标上下文是另外一台计算机。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.File">
<summary>指定源或目标上下文是文件。用户可以假定文件的持续时间长于创建它们的进程，并且文件以特定方式将对象序列化，此方式不会使反序列化进程要求访问当前进程中的任何数据。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.Persistence">
<summary>指定源或目的上下文是持续的存储区，它可以包括数据库、文件或其他后备存储区。用户可以假定持续数据的持续时间长于创建数据的进程，并且持续数据以特定方式将对象序列化，此方式不会使反序列化进程要求访问当前进程中的任何数据。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.Remoting">
<summary>指定数据在未知位置的上下文中进行远程处理。用户无法假定它是否在同一台计算机上。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.Other">
<summary>指定序列化上下文未知。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.Clone">
<summary>指定对象图形正在进行克隆。用户可以假定克隆图形将继续在同一进程中存在，可以安全地访问句柄或其他对非托管资源的引用。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.CrossAppDomain">
<summary>指定源或目标上下文是另外一个 AppDomain。有关 AppDomains 的信息，请参阅“应用程序域”。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.All">
<summary>指定可以向其他任何上下文传输（或从其他任何上下文接收）序列化数据。</summary>
    </member>
    <member name="T:System.Runtime.Versioning.ComponentGuaranteesAttribute">
<summary>定义可以跨多个版本的组件、类型或类型成员的兼容性保证。</summary>
    </member>
    <member name="M:System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)">
<summary>使用一个指示某个库、类型或成员保证的跨多个版本的兼容性级别的值初始化 <see cref="T:System.Runtime.Versioning.ComponentGuaranteesAttribute"/> 类的新实例。</summary>
<param name="guarantees">用于指定保证的跨多个版本的兼容性级别的枚举值之一</param>
    </member>
    <member name="P:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees">
<summary>获取一个值，该值指示保证的跨多个版本的库、类型或类型成员的兼容性级别。</summary>
<returns>用于指定保证的跨多个版本的兼容性级别的枚举值之一。</returns>
    </member>
    <member name="T:System.Runtime.Versioning.ComponentGuaranteesOptions">
<summary>指示可以跨多个版本的组件、类型或类型成员的兼容性保证。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.None">
<summary>开发人员不保证版本间的兼容性。组件、类型或成员的使用者可以预期将来版本会中断现有客户端。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange">
<summary>开发人员保证该类型具有多版本交换兼容性。该类型的使用者可以预期将来版本间的兼容性，并可以在其所有接口中使用这些类型。并行执行不能解决任何版本控制问题。 </summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable">
<summary>开发人员保证版本间的稳定兼容性。使用者可以预期将来版本不会中断现有客户端。不过，如果将来版本中断客户端，并且客户端未在其接口中使用该类型，则客户端也许能够使用并行执行来解决问题。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide">
<summary>该组件已经过测试，它能够在将程序集的多个版本加载到同一应用程序域时工作。将来的版本可能会破坏兼容性。但是，当进行此类破坏性更改时，不会修改旧版本，而是旧版本继续与新版本共存。</summary>
    </member>
    <member name="T:System.Runtime.Versioning.ResourceExposureAttribute">
<summary>指定类的成员的资源公开范围。无法继承此类。</summary>
    </member>
    <member name="M:System.Runtime.Versioning.ResourceExposureAttribute.#ctor(System.Runtime.Versioning.ResourceScope)">
<summary>用指定的公开级别初始化 <see cref="T:System.Runtime.Versioning.ResourceExposureAttribute"/> 类的新实例。</summary>
<param name="exposureLevel">资源的范围。</param>
    </member>
    <member name="P:System.Runtime.Versioning.ResourceExposureAttribute.ResourceExposureLevel">
<summary>获取资源公开范围。</summary>
<returns>一个 <see cref="T:System.Runtime.Versioning.ResourceScope"/> 对象。</returns>
    </member>
    <member name="T:System.Runtime.Versioning.ResourceScope">
<summary>标识可共享资源的范围。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.None">
<summary>没有共享的状态。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Machine">
<summary>该状态由计算机中的对象共享。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Process">
<summary>该状态在进程内共享。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.AppDomain">
<summary>该状态由 <see cref="T:System.AppDomain"/> 中的对象共享。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Library">
<summary>该状态由库中的对象共享。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Private">
<summary>该资源仅对该类型可见。</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Assembly">
<summary>该资源在程序集范围内可见。</summary>
    </member>
    <member name="T:System.Runtime.Versioning.TargetFrameworkAttribute">
<summary>标识某个特定程序集编译时针对 .NET Framework 的版本。</summary>
    </member>
    <member name="M:System.Runtime.Versioning.TargetFrameworkAttribute.#ctor(System.String)">
<summary>通过指定一个程序集在生成时针对的 .NET Framework 版本，初始化 <see cref="T:System.Runtime.Versioning.TargetFrameworkAttribute"/> 类的实例。</summary>
<param name="frameworkName">生成该程序集时针对的 .NET Framework 的版本。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="frameworkName"/> 为 null。</exception>
    </member>
    <member name="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkDisplayName">
<summary>获取生成某个程序集时针对的 .NET Framework 版本的显示名称。</summary>
<returns>.NET Framework 版本的显示名称。</returns>
    </member>
    <member name="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName">
<summary>获取编译某个特定程序集时针对的 .NET Framework 版本的名称。</summary>
<returns>编译该程序集时针对的 .NET Framework 版本的名称。</returns>
    </member>
    <member name="T:System.Runtime.Versioning.VersioningHelper">
<summary>提供方法以帮助开发人员编写版本安全的代码。无法继承此类。</summary>
    </member>
    <member name="M:System.Runtime.Versioning.VersioningHelper.MakeVersionSafeName(System.String,System.Runtime.Versioning.ResourceScope,System.Runtime.Versioning.ResourceScope)">
<summary>根据指定的资源名称和目标资源占用源返回版本安全的名称。</summary>
<returns>版本安全的名称。</returns>
<param name="name">资源名。</param>
<param name="from">资源的范围。</param>
<param name="to">所需的资源占用范围。</param>
    </member>
    <member name="M:System.Runtime.Versioning.VersioningHelper.MakeVersionSafeName(System.String,System.Runtime.Versioning.ResourceScope,System.Runtime.Versioning.ResourceScope,System.Type)">
<summary>根据指定的资源名称、目标资源占用源以及使用资源的类型返回版本安全的名称。</summary>
<returns>版本安全的名称。</returns>
<param name="name">资源名。</param>
<param name="from">范围的开始。</param>
<param name="to">范围的结束。</param>
<param name="type">资源的 <see cref="T:System.Type"/>。</param>
<exception cref="T:System.ArgumentException"><paramref name="from"/> 和 <paramref name="to"/> 的值无效。<see cref="T:System.Runtime.Versioning.ResourceScope"/> 枚举中的资源类型正从更严格的资源类型变为更普通的资源类型。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="type"/> 为 null。</exception>
    </member>
    <member name="T:System.Security.SecurityCriticalAttribute">
<summary>指定代码或程序集执行安全性关键型操作。</summary>
    </member>
    <member name="M:System.Security.SecurityCriticalAttribute.#ctor">
<summary>用默认范围初始化 <see cref="T:System.Security.SecurityCriticalAttribute"/> 类的新实例。 </summary>
    </member>
    <member name="T:System.Security.SecurityException">
<summary>检测到安全性错误时引发的异常。</summary>
    </member>
    <member name="M:System.Security.SecurityException.#ctor">
<summary>使用默认属性初始化 <see cref="T:System.Security.SecurityException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.Security.SecurityException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String,System.Exception)">
<summary>使用指定的错误消息和对导致此异常的内部异常的引用来初始化 <see cref="T:System.Security.SecurityException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="inner">引发当前异常的异常。如果 <paramref name="inner"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="M:System.Security.SecurityException.ToString">
<summary>返回当前 <see cref="T:System.Security.SecurityException"/> 的表示形式。</summary>
<returns>当前 <see cref="T:System.Security.SecurityException"/> 的字符串表示形式。</returns>
    </member>
    <member name="T:System.Security.SecuritySafeCriticalAttribute">
<summary>将类型或成员标识为安全关键并且可供透明代码安全访问。 </summary>
    </member>
    <member name="M:System.Security.SecuritySafeCriticalAttribute.#ctor">
<summary>初始化 <see cref="T:System.Security.SecuritySafeCriticalAttribute"/> 类的新实例。 </summary>
    </member>
    <member name="T:System.Security.SecurityState">
<summary>[SECURITY CRITICAL] 提供一个基类，用于从 <see cref="T:System.AppDomainManager"/> 对象中请求操作的安全状态。</summary>
    </member>
    <member name="M:System.Security.SecurityState.#ctor">
<summary>[SECURITY CRITICAL] 初始化 <see cref="T:System.Security.SecurityState"/> 类的新实例。 </summary>
    </member>
    <member name="M:System.Security.SecurityState.EnsureState">
<summary>[SECURITY CRITICAL] 在派生类中重写时，确保由 <see cref="T:System.Security.SecurityState"/> 表示的状态在宿主上可用。</summary>
    </member>
    <member name="M:System.Security.SecurityState.IsStateAvailable">
<summary>[SECURITY CRITICAL] 获取一个值，该值指示 <see cref="T:System.Security.SecurityState"/> 类的此实现的状态是否在当前宿主上可用。</summary>
<returns>如果状态可见，则为 true；否则为 false。 </returns>
    </member>
    <member name="T:System.Security.SecurityTransparentAttribute">
<summary>指定程序集无法访问受保护的资源或功能。 </summary>
    </member>
    <member name="M:System.Security.SecurityTransparentAttribute.#ctor">
<summary>初始化 <see cref="T:System.Security.SecurityTransparentAttribute"/> 类的新实例。 </summary>
    </member>
    <member name="T:System.Security.UnverifiableCodeAttribute">
<summary>标记包含无法验证的代码的模块。无法继承此类。</summary>
    </member>
    <member name="M:System.Security.UnverifiableCodeAttribute.#ctor">
<summary>初始化 <see cref="T:System.Security.UnverifiableCodeAttribute"/> 类的新实例。 </summary>
    </member>
    <member name="T:System.Security.VerificationException">
<summary>在以下情况引发的异常：安全策略要求代码为类型安全的代码，但验证过程无法验证该代码是否为类型安全的代码。</summary>
    </member>
    <member name="M:System.Security.VerificationException.#ctor">
<summary>使用默认属性初始化 <see cref="T:System.Security.VerificationException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.VerificationException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.Security.VerificationException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。</param>
    </member>
    <member name="M:System.Security.VerificationException.#ctor(System.String,System.Exception)">
<summary>使用指定的错误消息和对导致此异常的内部异常的引用来初始化 <see cref="T:System.Security.VerificationException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="innerException">引发当前异常的异常。如果 <paramref name="innerException"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="T:System.Security.Cryptography.Aes">
<summary>表示高级加密标准 (AES) 的所有实现都必须从中继承的抽象基类。 </summary>
    </member>
    <member name="M:System.Security.Cryptography.Aes.#ctor">
<summary>初始化 <see cref="T:System.Security.Cryptography.Aes"/> 类的新实例。 </summary>
    </member>
    <member name="T:System.Security.Cryptography.CryptographicException">
<summary>当加密操作过程中发生错误时引发的异常。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor">
<summary>使用默认属性初始化 <see cref="T:System.Security.Cryptography.CryptographicException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.Int32)">
<summary>使用指定的 HRESULT 错误代码初始化 <see cref="T:System.Security.Cryptography.CryptographicException"/> 类的新实例。</summary>
<param name="hr">HRESULT 错误代码。 </param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.Security.Cryptography.CryptographicException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Security.Cryptography.CryptographicException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="inner">导致当前异常的异常。如果 <paramref name="inner"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.String,System.String)">
<summary>以指定格式使用指定的错误消息来初始化 <see cref="T:System.Security.Cryptography.CryptographicException"/> 类的新实例。</summary>
<param name="format">用于输出错误消息的格式。 </param>
<param name="insert">解释异常原因的错误消息。 </param>
    </member>
    <member name="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
<summary>当加密操作过程中发生意外操作时引发的异常。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CryptoStream">
<summary>定义将数据流链接到加密转换的流。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)">
<summary>用目标数据流、要使用的转换和流的模式初始化 <see cref="T:System.Security.Cryptography.CryptoStream"/> 类的新实例。</summary>
<param name="stream">对其执行加密转换的流。 </param>
<param name="transform">要对流执行的加密转换。 </param>
<param name="mode">用于指定是读取还是写入加密流的枚举值之一。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="stream"/> 不可读。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="stream"/> 不可写。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="stream"/> 无效。</exception>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.CanRead">
<summary>获取一个值，该值指示当前的 <see cref="T:System.Security.Cryptography.CryptoStream"/> 是否可读。</summary>
<returns>如果当前流可读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.CanSeek">
<summary>获取一个值，该值指示您是否可以在当前 <see cref="T:System.Security.Cryptography.CryptoStream"/> 中搜索。</summary>
<returns>始终为 false。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.CanWrite">
<summary>获取一个值，该值指示当前的 <see cref="T:System.Security.Cryptography.CryptoStream"/> 是否可写。</summary>
<returns>如果当前流可写，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Clear">
<summary>释放由 <see cref="T:System.Security.Cryptography.CryptoStream"/> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)">
<summary>释放由 <see cref="T:System.Security.Cryptography.CryptoStream"/> 使用的未托管的资源，并且可以选择释放托管的资源。</summary>
<param name="disposing">如果释放托管和未托管资源，则为 true；如果只释放未托管资源，则为 false。 </param>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Flush">
<summary>清除此流的所有缓冲区并导致所有缓冲数据都写入基础设备中。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.FlushFinalBlock">
<summary>用缓冲区的当前状态更新基础数据源或储存库，随后清除缓冲区。</summary>
<exception cref="T:System.Security.Cryptography.CryptographicException">密钥已损坏，它可能会导致流的填充无效。 </exception>
<exception cref="T:System.NotSupportedException">当前流不可写。-或- 最后一个块已被转换。 </exception>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.Length">
<summary>获取用字节表示的流长度。</summary>
<returns>不支持此属性。</returns>
<exception cref="T:System.NotSupportedException">不支持此属性。 </exception>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.Position">
<summary>获取或设置当前流中的位置。</summary>
<returns>不支持此属性。</returns>
<exception cref="T:System.NotSupportedException">不支持此属性。 </exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)">
<summary>从当前 <see cref="T:System.Security.Cryptography.CryptoStream"/> 中读取字节序列，并将流中的位置提升读取的字节数。</summary>
<returns>读入缓冲区中的总字节数。如果当前可用的字节数没有请求的字节数那么多，则总字节数可能小于请求的字节数；如果已到达流的末尾，则为零。</returns>
<param name="buffer">一个字节数组。从当前流中读取最多的 <paramref name="count"/> 个字节，并将它们存储在 <paramref name="buffer"/> 中。 </param>
<param name="offset"><paramref name="buffer"/> 中的字节偏移量，从该偏移量开始存储从当前流中读取的数据。 </param>
<param name="count">要从当前流读取的最大字节数。 </param>
<exception cref="T:System.NotSupportedException">与当前 <see cref="T:System.Security.Cryptography.CryptoStream"/> 对象关联的 <see cref="T:System.Security.Cryptography.CryptoStreamMode"/> 与基础流不匹配。例如，对只写的基础流使用 <see cref="F:System.Security.Cryptography.CryptoStreamMode.Read"/> 时会引发此异常。  </exception>
<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> 参数小于零。-或- <paramref name="count"/> 参数小于零。 </exception>
<exception cref="T:System.ArgumentException"><paramref name="count"/> 参数和 <paramref name="offset"/> 参数的和比缓冲区的长度长。 </exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)">
<summary>在所有情况下均引发 <see cref="T:System.NotSupportedException"/>。</summary>
<returns>一个 <see cref="T:System.NotSupportedException"/>。 </returns>
<param name="offset">相对于<paramref name="origin"/>参数的字节偏移量。 </param>
<param name="origin">用于获取新位置的参考点。 </param>
<exception cref="T:System.NotSupportedException">在所有情况下。 </exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.SetLength(System.Int64)">
<summary>在所有情况下均引发 <see cref="T:System.NotSupportedException"/>。</summary>
<param name="value">当前流需要的字节长度。 </param>
<exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)">
<summary>将一个字节序列写入当前 <see cref="T:System.Security.Cryptography.CryptoStream"/>，并将流中的当前位置提升写入的字节数。</summary>
<param name="buffer">一个字节数组。此方法将 <paramref name="count"/> 个字节从 <paramref name="buffer"/> 复制到当前流。 </param>
<param name="offset"><paramref name="buffer"/> 中的字节偏移量，从此偏移量开始将字节复制到当前流。 </param>
<param name="count">要写入当前流的字节数。 </param>
<exception cref="T:System.NotSupportedException">与当前 <see cref="T:System.Security.Cryptography.CryptoStream"/> 对象关联的 <see cref="T:System.Security.Cryptography.CryptoStreamMode"/> 与基础流不匹配。例如，对只读的基础流使用 <see cref="F:System.Security.Cryptography.CryptoStreamMode.Write"/> 时会引发此异常。  </exception>
<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> 参数小于零。-或- <paramref name="count"/> 参数小于零。 </exception>
<exception cref="T:System.ArgumentException"><paramref name="count"/> 参数和 <paramref name="offset"/> 参数的和比缓冲区的长度长。 </exception>
    </member>
    <member name="T:System.Security.Cryptography.CryptoStreamMode">
<summary>指定加密流的模式。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CryptoStreamMode.Read">
<summary>对加密流的读访问。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CryptoStreamMode.Write">
<summary>对加密流的写访问。</summary>
    </member>
    <member name="T:System.Security.Cryptography.DeriveBytes">
<summary>表示抽象基类，导出指定长度字节序列的所有类都从该基类继承。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.#ctor">
<summary>初始化 <see cref="T:System.Security.Cryptography.DeriveBytes"/> 类的新实例。 </summary>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.GetBytes(System.Int32)">
<summary>当在派生类中被重写时，返回伪随机密钥字节。</summary>
<returns>由伪随机密钥字节组成的字节数组。</returns>
<param name="cb">要生成的伪随机密钥字节数。 </param>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.Reset">
<summary>当在派生类中被重写时，重置操作的状态。</summary>
    </member>
    <member name="T:System.Security.Cryptography.HashAlgorithm">
<summary>表示所有加密哈希算法实现均必须从中派生的基类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.#ctor">
<summary>初始化 <see cref="T:System.Security.Cryptography.HashAlgorithm"/> 类的新实例。</summary>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.CanReuseTransform">
<summary>获取一个值，该值指示是否可重复使用当前转换。</summary>
<returns>始终为 true。</returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks">
<summary>当在派生类中重写时，获取一个值，该值指示是否可以转换多个块。</summary>
<returns>如果可以转换多个块，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Clear">
<summary>释放由 <see cref="T:System.Security.Cryptography.HashAlgorithm"/> 类使用的所有资源。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])">
<summary>计算指定字节数组的哈希值。</summary>
<returns>计算所得的哈希代码。</returns>
<param name="buffer">要计算其哈希代码的输入。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="buffer"/> 为 null。</exception>
<exception cref="T:System.ObjectDisposedException">此对象已释放。</exception>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)">
<summary>计算指定字节数组的指定区域的哈希值。</summary>
<returns>计算所得的哈希代码。</returns>
<param name="buffer">要计算其哈希代码的输入。 </param>
<param name="offset">字节数组中的偏移量，从该位置开始使用数据。 </param>
<param name="count">数组中用作数据的字节数。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="count"/> 为无效值。-或- <paramref name="buffer"/> 长度无效。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="buffer"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="offset"/>超出范围。此参数需要非负数。</exception>
<exception cref="T:System.ObjectDisposedException">此对象已释放。</exception>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)">
<summary>计算指定 <see cref="T:System.IO.Stream"/> 对象的哈希值。</summary>
<returns>计算所得的哈希代码。</returns>
<param name="inputStream">要计算其哈希代码的输入。 </param>
<exception cref="T:System.ObjectDisposedException">此对象已释放。</exception>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)">
<summary>释放由 <see cref="T:System.Security.Cryptography.HashAlgorithm"/> 使用的未托管的资源，并且可以选择释放托管的资源。</summary>
<param name="disposing">如果释放托管和未托管资源，则为 true；如果只释放未托管资源，则为 false。 </param>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.Hash">
<summary>获取计算所得的哈希代码的值。</summary>
<returns>计算所得的哈希代码的当前值。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
<see cref="F:System.Security.Cryptography.HashAlgorithm.HashValue"/> 为 null。 </exception>
<exception cref="T:System.ObjectDisposedException">此对象已释放。</exception>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)">
<summary>当在派生类中重写时，将写入对象的数据路由到哈希算法以计算哈希值。</summary>
<param name="array">要计算其哈希代码的输入。 </param>
<param name="ibStart">字节数组中的偏移量，从该位置开始使用数据。 </param>
<param name="cbSize">字节数组中用作数据的字节数。 </param>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.HashFinal">
<summary>当在派生类中重写时，在加密流对象处理完最后的数据后完成哈希计算。</summary>
<returns>计算所得的哈希代码。</returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.HashSize">
<summary>获取计算所得的哈希代码的大小（以位为单位）。</summary>
<returns>计算所得的哈希代码的大小（以位为单位）。</returns>
    </member>
    <member name="F:System.Security.Cryptography.HashAlgorithm.HashSizeValue">
<summary>表示计算所得的哈希代码的大小（以位为单位）。</summary>
    </member>
    <member name="F:System.Security.Cryptography.HashAlgorithm.HashValue">
<summary>表示计算所得的哈希代码的值。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Initialize">
<summary>初始化 <see cref="T:System.Security.Cryptography.HashAlgorithm"/> 类的实现。</summary>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.InputBlockSize">
<summary>当在派生类中重写时，获取输入块的大小。</summary>
<returns>输入块的大小。</returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.OutputBlockSize">
<summary>当在派生类中重写时，获取输出块的大小。</summary>
<returns>输出块的大小。</returns>
    </member>
    <member name="F:System.Security.Cryptography.HashAlgorithm.State">
<summary>表示哈希计算的状态。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.System#IDisposable#Dispose">
<summary>释放由 <see cref="T:System.Security.Cryptography.HashAlgorithm"/> 使用的未托管的资源，并且可以选择释放托管的资源。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
<summary>计算输入字节数组指定区域的哈希值，并将计算所得的哈希值复制到输出字节数组的指定区域。</summary>
<returns>写入的字节数。</returns>
<param name="inputBuffer">要计算其哈希代码的输入。 </param>
<param name="inputOffset">输入字节数组中的偏移量，从该位置开始使用数据。 </param>
<param name="inputCount">输入字节数组中用作数据的字节数。 </param>
<param name="outputBuffer">用于计算哈希代码的部分输入数组的副本。 </param>
<param name="outputOffset">输出字节数组中的偏移量，从该位置开始写入数据。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="inputCount"/> 使用无效值。-或- <paramref name="inputBuffer"/> 具有无效长度。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="inputBuffer"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="inputOffset"/> 超出范围。此参数需要非负数。</exception>
<exception cref="T:System.ObjectDisposedException">此对象已释放。</exception>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
<summary>计算指定字节数组的指定区域的哈希值。</summary>
<returns>一个数组，该数组是输入中计算了哈希值的部分的副本。</returns>
<param name="inputBuffer">要计算其哈希代码的输入。 </param>
<param name="inputOffset">字节数组中的偏移量，从该位置开始使用数据。 </param>
<param name="inputCount">字节数组中用作数据的字节数。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="inputCount"/> 使用无效值。-或- <paramref name="inputBuffer"/> 具有无效偏移量长度。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="inputBuffer"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="inputOffset"/> 超出范围。此参数不能为非负数。</exception>
<exception cref="T:System.ObjectDisposedException">此对象已释放。</exception>
    </member>
    <member name="T:System.Security.Cryptography.HMAC">
<summary>表示基于哈希的消息验证代码 (HMAC) 的所有实现必须从中派生的抽象类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.#ctor">
<summary>初始化 <see cref="T:System.Security.Cryptography.HMAC"/> 类的新实例。 </summary>
    </member>
    <member name="P:System.Security.Cryptography.HMAC.BlockSizeValue">
<summary>获取或设置哈希值中使用的块大小。</summary>
<returns>哈希值中使用的块大小。</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.Dispose(System.Boolean)">
<summary>密钥更改合法时释放由 <see cref="T:System.Security.Cryptography.HMAC"/> 类使用的未托管资源，并且可以选择释放托管资源。</summary>
<param name="disposing">如果释放托管和未托管资源，则为 true；如果只释放未托管资源，则为 false。 </param>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)">
<summary>当在派生类中重写时，将写入对象的数据路由给默认 <see cref="T:System.Security.Cryptography.HMAC"/> 哈希算法以计算哈希值。</summary>
<param name="rgb">输入数据。 </param>
<param name="ib">字节数组中的偏移量，从该位置开始使用数据。 </param>
<param name="cb">数组中用作数据的字节数。 </param>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.HashFinal">
<summary>当在派生类中重写时，在加密流对象处理完最后的数据后完成哈希计算。</summary>
<returns>字节数组中计算所得的哈希代码。</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMAC.HashName">
<summary>获取或设置用于哈希计算的哈希算法的名称。</summary>
<returns>哈希算法的名称。</returns>
<exception cref="T:System.Security.Cryptography.CryptographicException">无法更改当前的哈希算法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.Initialize">
<summary>初始化默认 <see cref="T:System.Security.Cryptography.HMAC"/> 实现的实例。</summary>
    </member>
    <member name="P:System.Security.Cryptography.HMAC.Key">
<summary>获取或设置用于哈希算法的密钥。</summary>
<returns>用于哈希算法的密钥。</returns>
<exception cref="T:System.Security.Cryptography.CryptographicException">试图在哈希计算开始后更改 <see cref="P:System.Security.Cryptography.HMAC.Key"/> 属性。 </exception>
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA1">
<summary>使用 <see cref="T:System.Security.Cryptography.SHA1"/> 哈希函数计算基于哈希值的消息验证代码 (HMAC)。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor">
<summary>使用随机生成的密钥初始化 <see cref="T:System.Security.Cryptography.HMACSHA1"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
<summary>使用指定的密钥数据初始化 <see cref="T:System.Security.Cryptography.HMACSHA1"/> 类的新实例。</summary>
<param name="key"><see cref="T:System.Security.Cryptography.HMACSHA1"/> 加密的机密密钥。密钥的长度不限，但如果超过 64 个字节，就会对其进行哈希计算（使用 SHA-1），以派生一个 64 个字节的密钥。因此，建议的密钥大小为 64 个字节。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="key"/> 参数为 null。 </exception>
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA256">
<summary>使用 <see cref="T:System.Security.Cryptography.SHA256"/> 哈希函数计算基于哈希值的消息验证代码 (HMAC)。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.#ctor">
<summary>使用随机生成的密钥初始化 <see cref="T:System.Security.Cryptography.HMACSHA256"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])">
<summary>使用指定的密钥数据初始化 <see cref="T:System.Security.Cryptography.HMACSHA256"/> 类的新实例。</summary>
<param name="key"><see cref="T:System.Security.Cryptography.HMACSHA256"/> 加密的机密密钥。密钥的长度不限，但如果超过 64 个字节，就会对其进行哈希计算（使用 SHA-1），以派生一个 64 个字节的密钥。因此，建议的密钥大小为 64 个字节。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="key"/> 参数为 null。 </exception>
    </member>
    <member name="T:System.Security.Cryptography.ICryptoTransform">
<summary>定义基本的加密转换运算。</summary>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.CanReuseTransform">
<summary>获取一个值，该值指示是否可重复使用当前转换。</summary>
<returns>如果重复使用当前转换，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks">
<summary>获取一个值，该值指示是否可以转换多个块。</summary>
<returns>如果可以转换多个块，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.InputBlockSize">
<summary>获取输入块大小。</summary>
<returns>输入数据块的大小（以字节为单位）。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.OutputBlockSize">
<summary>获取输出块大小。</summary>
<returns>输出数据块的大小（以字节为单位）。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
<summary>转换输入字节数组的指定区域，并将所得到的转换复制到输出字节数组的指定区域。</summary>
<returns>写入的字节数。</returns>
<param name="inputBuffer">要为其计算转换的输入。 </param>
<param name="inputOffset">输入字节数组中的偏移量，从该位置开始使用数据。 </param>
<param name="inputCount">输入字节数组中用作数据的字节数。 </param>
<param name="outputBuffer">将转换写入的输出。 </param>
<param name="outputOffset">输出字节数组中的偏移量，从该位置开始写入数据。 </param>
    </member>
    <member name="M:System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
<summary>转换指定字节数组的指定区域。</summary>
<returns>计算所得的转换。</returns>
<param name="inputBuffer">要为其计算转换的输入。 </param>
<param name="inputOffset">字节数组中的偏移量，从该位置开始使用数据。 </param>
<param name="inputCount">字节数组中用作数据的字节数。 </param>
    </member>
    <member name="T:System.Security.Cryptography.KeyedHashAlgorithm">
<summary>显示所有加密哈希算法实现均必须从中派生的抽象类。 </summary>
    </member>
    <member name="M:System.Security.Cryptography.KeyedHashAlgorithm.#ctor">
<summary>初始化 <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)">
<summary>释放由 <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/> 使用的未托管的资源，并且可以选择释放托管的资源。</summary>
<param name="disposing">如果释放托管和未托管资源，则为 true；如果只释放未托管资源，则为 false。 </param>
    </member>
    <member name="P:System.Security.Cryptography.KeyedHashAlgorithm.Key">
<summary>获取或设置用于哈希算法的密钥。</summary>
<returns>用于哈希算法的密钥。</returns>
<exception cref="T:System.Security.Cryptography.CryptographicException">试图在哈希计算过程中更改 <see cref="P:System.Security.Cryptography.KeyedHashAlgorithm.Key"/> 属性。 </exception>
    </member>
    <member name="F:System.Security.Cryptography.KeyedHashAlgorithm.KeyValue">
<summary>用于哈希算法的密钥。</summary>
    </member>
    <member name="T:System.Security.Cryptography.KeySizes">
<summary>确定对称加密算法的有效密钥大小设置。</summary>
    </member>
    <member name="M:System.Security.Cryptography.KeySizes.#ctor(System.Int32,System.Int32,System.Int32)">
<summary>使用指定的密钥值初始化 <see cref="T:System.Security.Cryptography.KeySizes"/> 类的新实例。</summary>
<param name="minSize">最小有效密钥大小。 </param>
<param name="maxSize">最大有效密钥大小。 </param>
<param name="skipSize">有效密钥大小之间的间隔。 </param>
    </member>
    <member name="P:System.Security.Cryptography.KeySizes.MaxSize">
<summary>指定最大密钥大小（以位为单位）。</summary>
<returns>最大密钥大小（以位为单位）。</returns>
    </member>
    <member name="P:System.Security.Cryptography.KeySizes.MinSize">
<summary>指定最小密钥大小（以位为单位）。</summary>
<returns>最小密钥大小（以位为单位）。</returns>
    </member>
    <member name="P:System.Security.Cryptography.KeySizes.SkipSize">
<summary>指定有效密钥大小之间的间隔（以位为单位）。</summary>
<returns>有效密钥大小之间的间隔（以位为单位）。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RandomNumberGenerator">
<summary>表示加密随机数生成器的所有实现均从中派生的抽象类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.#ctor">
<summary>初始化 <see cref="T:System.Security.Cryptography.RandomNumberGenerator"/> 的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])">
<summary>当在派生类中重写时，用加密型强随机值序列填充字节数组。</summary>
<param name="data">用加密型强随机字节填充的数组。 </param>
    </member>
    <member name="T:System.Security.Cryptography.Rfc2898DeriveBytes">
<summary>通过使用基于 <see cref="T:System.Security.Cryptography.HMACSHA1"/> 的伪随机数生成器，实现基于密码的密钥派生功能 (PBKDF2)。</summary>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)">
<summary>通过使用密码、salt 值和迭代次数派生密钥，初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes"/> 类的新实例。</summary>
<param name="password">用于派生密钥的密码。 </param>
<param name="salt">用于派生密钥的密钥 salt。</param>
<param name="iterations">操作的迭代数。 </param>
<exception cref="T:System.ArgumentException">指定的 salt 大小小于 8 字节或迭代次数小于 1。 </exception>
<exception cref="T:System.ArgumentNullException">密码或 salt 为 null。 </exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])">
<summary>通过使用密码和 salt 值派生密钥，初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes"/> 类的新实例。</summary>
<param name="password">用于派生密钥的密码。 </param>
<param name="salt">用于派生密钥的密钥 salt。 </param>
<exception cref="T:System.ArgumentException">指定的 salt 大小小于 8 字节或迭代次数小于 1。 </exception>
<exception cref="T:System.ArgumentNullException">密码或 salt 为 null。 </exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)">
<summary>通过使用密码、salt 值和迭代次数派生密钥，初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes"/> 类的新实例。</summary>
<param name="password">用于派生密钥的密码。 </param>
<param name="salt">用于派生密钥的密钥 salt。 </param>
<param name="iterations">操作的迭代数。 </param>
<exception cref="T:System.ArgumentException">指定的 salt 大小小于 8 字节或迭代次数小于 1。 </exception>
<exception cref="T:System.ArgumentNullException">密码或 salt 为 null。 </exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)">
<summary>用密码、salt 值和迭代次数返回伪随机密钥。</summary>
<returns>由伪随机密钥字节组成的字节数组。</returns>
<param name="cb">要生成的伪随机密钥字节数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="cb "/>超出范围。此参数需要非负数。</exception>
    </member>
    <member name="P:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount">
<summary>获取或设置操作的迭代数。</summary>
<returns>操作的迭代数。</returns>
<exception cref="T:System.ArgumentOutOfRangeException">迭代次数小于 1。 </exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.Reset">
<summary>重置操作的状态。</summary>
    </member>
    <member name="P:System.Security.Cryptography.Rfc2898DeriveBytes.Salt">
<summary>获取或设置操作的密钥 salt 值。</summary>
<returns>操作的密钥 salt 值。</returns>
<exception cref="T:System.ArgumentException">指定的 salt 大小小于 8 字节。 </exception>
<exception cref="T:System.ArgumentNullException">salt 为 null。 </exception>
    </member>
    <member name="T:System.Security.Cryptography.RNGCryptoServiceProvider">
<summary>使用加密服务提供程序 (CSP) 提供的实现来实现加密随机数生成器 (RNG)。无法继承此类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RNGCryptoServiceProvider.#ctor">
<summary>初始化 <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes(System.Byte[])">
<summary>用经过加密的强随机值序列填充字节数组。</summary>
<param name="data">用经过加密的强随机值序列填充的数组。 </param>
<exception cref="T:System.Security.Cryptography.CryptographicException">无法获取加密服务提供程序 (CSP)。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="data"/> 为 null。</exception>
    </member>
    <member name="T:System.Security.Cryptography.SHA1">
<summary>计算输入数据的 <see cref="T:System.Security.Cryptography.SHA1"/> 哈希值。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.#ctor">
<summary>初始化 <see cref="T:System.Security.Cryptography.SHA1"/> 的新实例。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA1Managed">
<summary>使用托管库计算输入数据的 <see cref="T:System.Security.Cryptography.SHA1"/> 哈希值。 </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.#ctor">
<summary>初始化 <see cref="T:System.Security.Cryptography.SHA1Managed"/> 类的新实例。</summary>
<exception cref="T:System.InvalidOperationException">此类与联邦信息处理标准 (FIPS) 算法不兼容。</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
<summary>将写入对象的数据路由到 <see cref="T:System.Security.Cryptography.SHA1Managed"/> 哈希算法以计算哈希值。</summary>
<param name="rgb">输入数据。 </param>
<param name="ibStart">字节数组中的偏移量，从该位置开始使用数据。 </param>
<param name="cbSize">数组中用作数据的字节数。 </param>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.HashFinal">
<summary>将所有数据都写入对象后，返回计算所得的 <see cref="T:System.Security.Cryptography.SHA1"/> 哈希值。</summary>
<returns>计算所得的哈希代码。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.Initialize">
<summary>初始化或重新初始化哈希算法的实例。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA256">
<summary>计算输入数据的 <see cref="T:System.Security.Cryptography.SHA256"/> 哈希值。 </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.#ctor">
<summary>初始化 <see cref="T:System.Security.Cryptography.SHA256"/> 的新实例。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA256Managed">
<summary>使用托管库计算输入数据的 <see cref="T:System.Security.Cryptography.SHA256"/> 哈希值。 </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.#ctor">
<summary>使用托管库初始化 <see cref="T:System.Security.Cryptography.SHA256Managed"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
<summary>当在派生类中重写时，将写入对象的数据路由到 <see cref="T:System.Security.Cryptography.SHA256"/> 哈希算法以计算哈希值。</summary>
<param name="rgb">输入数据。 </param>
<param name="ibStart">字节数组中的偏移量，从该位置开始使用数据。 </param>
<param name="cbSize">数组中用作数据的字节数。 </param>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.HashFinal">
<summary>当在派生类中重写时，在加密流对象处理完最后的数据后完成哈希计算。</summary>
<returns>计算所得的哈希代码。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.Initialize">
<summary>初始化 <see cref="T:System.Security.Cryptography.SHA256Managed"/> 的实例。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SymmetricAlgorithm">
<summary>表示所有对称算法的实现都必须从中继承的抽象基类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.#ctor">
<summary>初始化 <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/> 类的新实例。</summary>
<exception cref="T:System.Security.Cryptography.CryptographicException">从对称算法派生的类的实现无效。</exception>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.BlockSize">
<summary>获取或设置加密操作的块大小（以位为单位）。</summary>
<returns>块大小（以位为单位）。</returns>
<exception cref="T:System.Security.Cryptography.CryptographicException">块大小无效。 </exception>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue">
<summary>表示加密操作的块大小（以位为单位）。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.Clear">
<summary>释放由 <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/> 类使用的所有资源。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor">
<summary>用当前的 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key"/> 属性和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV"/>) 创建对称解密器对象。</summary>
<returns>对称解密器对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])">
<summary>当在派生类中重写时，用指定的 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key"/> 属性和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV"/>) 创建对称解密器对象。</summary>
<returns>对称解密器对象。</returns>
<param name="rgbKey">用于对称算法的密钥。 </param>
<param name="rgbIV">用于对称算法的初始化向量。 </param>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor">
<summary>用当前的 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key"/> 属性和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV"/>) 创建对称加密器对象。</summary>
<returns>对称加密器对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])">
<summary>当在派生类中重写时，用指定的 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key"/> 属性和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV"/>) 创建对称加密器对象。</summary>
<returns>对称加密器对象。</returns>
<param name="rgbKey">用于对称算法的密钥。 </param>
<param name="rgbIV">用于对称算法的初始化向量。 </param>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)">
<summary>释放由 <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/> 使用的未托管的资源，并且可以选择释放托管的资源。</summary>
<param name="disposing">如果释放托管和未托管资源，则为 true；如果只释放未托管资源，则为 false。 </param>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV">
<summary>当在派生类中重写时，生成用于该算法的随机初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV"/>)。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey">
<summary>当在派生类中重写时，生成用于该算法的随机密钥 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key"/>)。</summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.IV">
<summary>获取或设置对称算法的初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV"/>)。</summary>
<returns>初始化向量。</returns>
<exception cref="T:System.ArgumentNullException">试图将初始化向量设置为 null。 </exception>
<exception cref="T:System.Security.Cryptography.CryptographicException">试图将初始化向量设置为无效大小。 </exception>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.IVValue">
<summary>表示对称算法的初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV"/>)。</summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.Key">
<summary>获取或设置对称算法的密钥。</summary>
<returns>用于对称算法的密钥。</returns>
<exception cref="T:System.ArgumentNullException">试图将密钥设置为 null。 </exception>
<exception cref="T:System.Security.Cryptography.CryptographicException">密钥大小无效。</exception>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.KeySize">
<summary>获取或设置对称算法所用密钥的大小（以位为单位）。</summary>
<returns>对称算法所用密钥的大小（以位为单位）。</returns>
<exception cref="T:System.Security.Cryptography.CryptographicException">密钥大小无效。 </exception>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue">
<summary>表示对称算法使用的密钥的大小（以位为单位）。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.KeyValue">
<summary>表示对称算法的密钥。</summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes">
<summary>获取对称算法支持的块大小（以位为单位）。</summary>
<returns>一个数组，包含此算法支持的块大小。</returns>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue">
<summary>指定对称算法支持的块大小（以位为单位）。</summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes">
<summary>获取对称算法支持的密钥大小（以位为单位）。</summary>
<returns>一个数组，包含此算法支持的密钥大小。</returns>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue">
<summary>指定对称算法支持的密钥大小（以位为单位）。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.System#IDisposable#Dispose">
<summary>释放由 <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/> 使用的未托管的资源，并且可以选择释放托管的资源。 </summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)">
<summary>确定指定的密钥大小对当前算法是否有效。</summary>
<returns>如果指定的密钥大小对当前算法有效，则为 true；否则为 false。</returns>
<param name="bitLength">用于检查有效密钥大小的长度（以位为单位）。 </param>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509Certificate">
<summary>提供帮助使用 X.509 版本 3 证书的方法。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor">
<summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> 类的新实例。 </summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Byte[])">
<summary>初始化从表示 X.509 版本 3 证书的字节序列定义的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> 类的新实例。</summary>
<param name="data">一个包含 X.509 证书数据的字节数组。</param>
<exception cref="T:System.Security.Cryptography.CryptographicException">发生了与证书有关的错误。例如：证书文件不存在。证书无效。证书的密码不正确。</exception>
<exception cref="T:System.ArgumentException"><paramref name="rawData"/> 参数为 null。-或- <paramref name="rawData"/> 参数的长度为 0。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Byte[],System.String)">
<summary>使用一个字节数组和一个密码初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> 类的新实例。</summary>
<param name="rawData">一个包含 X.509 证书数据的字节数组。</param>
<param name="password">访问 X.509 证书数据所需的密码。</param>
<exception cref="T:System.Security.Cryptography.CryptographicException">发生了与证书有关的错误。例如：证书文件不存在。证书无效。证书的密码不正确。</exception>
<exception cref="T:System.ArgumentException"><paramref name="rawData"/> 参数为 null。-或- <paramref name="rawData"/> 参数的长度为 0。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
<summary>使用一个字节数组、一个密码和一个密钥存储标志初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> 类的新实例。</summary>
<param name="rawData">一个包含 X.509 证书数据的字节数组。 </param>
<param name="password">访问 X.509 证书数据所需的密码。 </param>
<param name="keyStorageFlags">枚举值之一。 </param>
<exception cref="T:System.Security.Cryptography.CryptographicException">发生了与证书有关的错误。例如：证书文件不存在。证书无效。证书的密码不正确。</exception>
<exception cref="T:System.ArgumentException"><paramref name="rawData"/> 参数为 null。-或- <paramref name="rawData"/> 参数的长度为 0。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.IntPtr)">
<summary>[SECURITY CRITICAL] 使用非托管 PCCERT_CONTEXT 结构的句柄初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> 类的一个新实例。</summary>
<param name="handle">非托管 PCCERT_CONTEXT 结构的一个句柄。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)">
<summary>使用另一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> 类初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> 类的新实例。</summary>
<param name="cert">从中初始化此类的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> 类。 </param>
<exception cref="T:System.Security.Cryptography.CryptographicException">发生了与证书有关的错误。例如：证书文件不存在。证书无效。证书的密码不正确。</exception>
<exception cref="T:System.ArgumentNullException"><paramref name="cert"/> 参数的值为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.String)">
<summary>[SECURITY CRITICAL] 使用证书文件名初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> 类的一个新实例。 </summary>
<param name="fileName">一个证书文件的名称。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.String,System.String)">
<summary>[SECURITY CRITICAL] 使用一个证书文件名和一个用于访问该证书的密码初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> 类的新实例。</summary>
<param name="fileName">一个证书文件的名称。 </param>
<param name="password">访问 X.509 证书数据所需的密码。 </param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
<summary>[SECURITY CRITICAL] 使用一个证书文件名、一个用于访问该证书的密码和一个密钥存储标志初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> 类的新实例。 </summary>
<param name="fileName">一个证书文件的名称。 </param>
<param name="password">访问 X.509 证书数据所需的密码。 </param>
<param name="keyStorageFlags">枚举值之一。 </param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.CreateFromCertFile(System.String)">
<summary>[SECURITY CRITICAL] 依据指定的证书文件创建 X.509 版本 3 证书。</summary>
<returns>新创建的 X.509 证书。</returns>
<param name="filename">创建 X.509 证书所依据的证书文件的路径。 </param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Object)">
<summary>比较两个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> 对象是否相等。</summary>
<returns>如果当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> 对象与 <paramref name="other"/> 参数指定的对象相等，则为 true；否则为 false。</returns>
<param name="obj">与当前对象进行比较的对象。 </param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)">
<summary>比较两个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> 对象是否相等。</summary>
<returns>如果当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> 对象与 <paramref name="other"/> 参数指定的对象相等，则为 true；否则为 false。</returns>
<param name="other">与当前对象进行比较的对象。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType)">
<summary>以 <see cref="T:System.Security.Cryptography.X509Certificates.X509ContentType"/> 值之一所描述的格式将当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> 对象导出到字节数组。 </summary>
<returns>表示当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> 对象的字节数组。</returns>
<param name="contentType">描述如何设置输出数据格式的枚举值之一。 </param>
<exception cref="T:System.Security.Cryptography.CryptographicException">将 <see cref="F:System.Security.Cryptography.X509Certificates.X509ContentType.Cert"/> 之外的值传递给了 <paramref name="contentType"/> 参数。-或- 无法导出证书。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)">
<summary>使用指定的密码，以 <see cref="T:System.Security.Cryptography.X509Certificates.X509ContentType"/> 值之一所描述的格式将当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> 对象导出到字节数组。</summary>
<returns>表示当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> 对象的字节数组。</returns>
<param name="contentType">描述如何设置输出数据格式的枚举值之一。</param>
<param name="password">访问 X.509 证书数据所需的密码。</param>
<exception cref="T:System.Security.Cryptography.CryptographicException">将 <see cref="F:System.Security.Cryptography.X509Certificates.X509ContentType.Cert"/> 之外的值传递给了 <paramref name="contentType"/> 参数。-或- 无法导出证书。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash">
<summary>将 X.509 版本 3 证书的哈希值作为字节数组返回。</summary>
<returns>X.509 证书的哈希值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHashString">
<summary>将 X.509 版本 3 证书的哈希值作为十六进制字符串返回。</summary>
<returns>X.509 证书哈希值的十六进制字符串表示形式。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetEffectiveDateString">
<summary>返回此 X.509 版本 3 证书的有效日期。</summary>
<returns>该 X.509 证书的有效日期。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetExpirationDateString">
<summary>返回此 X.509 版本 3 证书的到期日期。</summary>
<returns>该 X.509 证书的到期日期。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat">
<summary>返回此 X.509 版本 3 证书的格式的名称。</summary>
<returns>该 X.509 证书的格式。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode">
<summary>返回整数形式的 X.509 版本 3 证书的哈希代码。</summary>
<returns>整数形式的 X.509 证书的哈希代码。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm">
<summary>返回该 X.509 版本 3 证书的密钥算法信息。</summary>
<returns>字符串形式的 X.509 证书的密钥算法信息。</returns>
<exception cref="T:System.Security.Cryptography.CryptographicException">证书上下文无效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters">
<summary>返回 X.509 版本 3 证书的密钥算法参数。</summary>
<returns>字节数组形式的 X.509 证书的密钥算法参数。</returns>
<exception cref="T:System.Security.Cryptography.CryptographicException">证书上下文无效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString">
<summary>返回 X.509 版本 3 证书的密钥算法参数。</summary>
<returns>十六进制字符串形式的 X.509 证书的密钥算法参数。</returns>
<exception cref="T:System.Security.Cryptography.CryptographicException">证书上下文无效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey">
<summary>返回 X.509 版本 3 证书的公钥。</summary>
<returns>字节数组形式的 X.509 证书的公钥。</returns>
<exception cref="T:System.Security.Cryptography.CryptographicException">证书上下文无效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKeyString">
<summary>返回 X.509 版本 3 证书的公钥。</summary>
<returns>十六进制字符串形式的 X.509 证书的公钥。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetRawCertData">
<summary>返回整个 X.509 版本 3 证书的原始数据。</summary>
<returns>一个包含 X.509 证书数据的字节数组。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetRawCertDataString">
<summary>返回整个 X.509 版本 3 证书的原始数据。</summary>
<returns>十六进制字符串形式的 X.509 证书数据。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber">
<summary>返回 X.509 版本 3 证书的序列号。</summary>
<returns>字节数组形式的 X.509 证书的序列号。</returns>
<exception cref="T:System.Security.Cryptography.CryptographicException">证书上下文无效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumberString">
<summary>返回 X.509 版本 3 证书的序列号。</summary>
<returns>十六进制字符串形式的 X.509 证书的序列号。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate.Handle">
<summary>[SECURITY CRITICAL] 获取非托管 PCCERT_CONTEXT 结构所描述的 Microsoft Cryptographic API 证书上下文的句柄。 </summary>
<returns>表示非托管 PCCERT_CONTEXT 结构的 <see cref="T:System.IntPtr"/>。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.Import(System.Byte[])">
<summary>使用字节数组中的数据填充 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> 对象。</summary>
<param name="rawData">一个包含 X.509 证书数据的字节数组。 </param>
<exception cref="T:System.ArgumentException"><paramref name="rawData"/> 参数为 null。-或- <paramref name="rawData"/> 参数的长度为 0。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.Import(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
<summary>使用一个字节数组中的数据、一个密码和用于确定如何导入私钥的标志填充 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> 对象。</summary>
<param name="rawData">一个包含 X.509 证书数据的字节数组。 </param>
<param name="password">访问 X.509 证书数据所需的密码。 </param>
<param name="keyStorageFlags">枚举值之一，控制在何处导入私钥以及如何导入私钥。 </param>
<exception cref="T:System.ArgumentException"><paramref name="rawData"/> 参数为 null。-或- <paramref name="rawData"/> 参数的长度为 0。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.Import(System.String)">
<summary>[SECURITY CRITICAL] 使用证书文件中的信息填充 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> 对象。</summary>
<param name="fileName">以字符串形式表示的证书文件的名称。 </param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.Import(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
<summary>[SECURITY CRITICAL] 使用一个证书文件中的信息、一个密码和一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags"/> 值填充 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> 对象。</summary>
<param name="fileName">以字符串形式表示的证书文件的名称。 </param>
<param name="password">访问 X.509 证书数据所需的密码。 </param>
<param name="keyStorageFlags">枚举值之一，控制在何处导入私钥以及如何导入私钥。 </param>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate.Issuer">
<summary>获取颁发该 X.509 版本 3 证书的证书颁发机构的名称。</summary>
<returns>颁发该 X.509 版本 3 证书的证书颁发机构的名称。</returns>
<exception cref="T:System.Security.Cryptography.CryptographicException">证书句柄无效。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate.Subject">
<summary>获取证书的主题可分辨名称。</summary>
<returns>证书的主题可分辨名称。</returns>
<exception cref="T:System.Security.Cryptography.CryptographicException">证书句柄无效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.ToString">
<summary>返回当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> 对象的字符串表示形式。</summary>
<returns>当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> 对象的字符串表示形式。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.ToString(System.Boolean)">
<summary>返回当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> 对象的字符串表示形式，如果指定，带有其他信息。</summary>
<returns>当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> 对象的字符串表示形式。</returns>
<param name="fVerbose">为 true，则生成字符串表示形式的详细形式；否则为 false。 </param>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509ContentType">
<summary>指定 X.509 证书的格式。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ContentType.Unknown">
<summary>未知 X.509 证书。  </summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ContentType.Cert">
<summary>单个 X.509 证书。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags">
<summary>定义将 X.509 证书的私钥导出到何处以及如何导出。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags.DefaultKeySet">
<summary>使用默认的密钥集。用户密钥集通常为默认值。 </summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.CreateHexString(System.Byte[])">
<summary>基于指定的字节数组创建十六进制字符串。</summary>
<returns>十六进制字符串。</returns>
<param name="sArray">字节数组。</param>
    </member>
    <member name="T:System.Security.Permissions.CodeAccessSecurityAttribute">
<summary>为代码访问安全性指定基属性类。</summary>
    </member>
    <member name="M:System.Security.Permissions.CodeAccessSecurityAttribute.#ctor(System.Security.Permissions.SecurityAction)">
<summary>用指定的 <see cref="T:System.Security.Permissions.SecurityAction"/> 初始化 <see cref="T:System.Security.Permissions.CodeAccessSecurityAttribute"/> 的新实例。</summary>
<param name="action">枚举值之一。 </param>
    </member>
    <member name="T:System.Security.Permissions.SecurityAction">
<summary>指定可以使用声明安全性执行的安全操作。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Demand">
<summary>要求调用堆栈中的所有高级调用方都已被授予了当前权限对象所指定的权限。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Assert">
<summary>调用代码能访问当前权限对象所标识的资源，即使堆栈中的高级调用方未被授权访问该资源。 </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Deny">
<summary>即使调用方已被授予访问当前权限对象所指定资源的权限，调用方访问该资源的能力仍被拒绝。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.PermitOnly">
<summary>即使代码已被授予访问其他资源的权限，也只能访问此权限对象所指定的资源。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.LinkDemand">
<summary>要求直接调用方已被授予了指定的权限。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
<summary>要求继承此类或重写某一方法的派生类已被授予指定的权限。 </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestMinimum">
<summary>请求使代码运行所需的最小权限。此操作只能在程序集范围内使用。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestOptional">
<summary>请求可选的附加权限（并非代码运行所必需的权限）。此请求隐式拒绝未明确请求的所有其他权限。此操作只能在程序集范围内使用。 </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestRefuse">
<summary>请求不将可能被误用的权限授予调用代码。此操作只能在程序集范围内使用。</summary>
    </member>
    <member name="T:System.Security.Permissions.SecurityAttribute">
<summary>为 <see cref="T:System.Security.Permissions.CodeAccessSecurityAttribute"/> 属性派生自的声明安全性指定基属性类。</summary>
    </member>
    <member name="M:System.Security.Permissions.SecurityAttribute.#ctor(System.Security.Permissions.SecurityAction)">
<summary>使用指定的 <see cref="T:System.Security.Permissions.SecurityAction"/> 初始化 <see cref="T:System.Security.Permissions.SecurityAttribute"/> 类的新实例。</summary>
<param name="action">枚举值之一。 </param>
    </member>
    <member name="P:System.Security.Permissions.SecurityAttribute.Action">
<summary>获取或设置安全性操作。</summary>
<returns>枚举值之一。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityAttribute.Unrestricted">
<summary>获取或设置一个值，该值指示是否声明了对受该属性保护的资源拥有完全（无限制的）权限。</summary>
<returns>如果声明了对受保护资源的完全权限，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Security.Permissions.SecurityPermissionAttribute">
<summary>允许使用声明安全性将安全操作应用到代码中。无法继承此类。</summary>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
<summary>使用指定的 <see cref="T:System.Security.Permissions.SecurityAction"/> 初始化 <see cref="T:System.Security.Permissions.SecurityPermissionAttribute"/> 类的新实例。</summary>
<param name="action">枚举值之一。 </param>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlAppDomain">
<summary>获取或设置一个值，该值指示是否声明了操作 <see cref="T:System.AppDomain"/> 的权限。</summary>
<returns>如果声明了操作 <see cref="T:System.AppDomain"/> 的权限，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlDomainPolicy">
<summary>获取或设置一个值，该值指示是否声明了改变或操作域安全策略的权限。</summary>
<returns>如果声明了在应用程序域中改变或操作安全策略的权限，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlEvidence">
<summary>获取或设置一个值，该值指示是否声明了改变或操作证据的权限。</summary>
<returns>如果声明了改变或操作证据的能力，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlPolicy">
<summary>获取或设置一个值，该值指示是否声明了查看并操作安全策略的权限。</summary>
<returns>如果声明了操作安全策略的权限，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlThread">
<summary>获取或设置一个值，该值指示是否声明了操作线程的权限。</summary>
<returns>如果声明了操作线程的权限，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Flags">
<summary>获取或设置在 <see cref="T:System.Security.Permissions.SecurityPermissionFlag"/> 枚举中指定的所有权限标志。</summary>
<returns>一个或多个使用按位 OR 组合在一起的枚举值。</returns>
<exception cref="T:System.ArgumentException">试图将此属性设置为无效值。要查阅有效值，请参阅 <see cref="T:System.Security.Permissions.SecurityPermissionFlag"/>。 </exception>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.SkipVerification">
<summary>获取或设置一个值，该值指示是否声明了跳过代码验证的权限。</summary>
<returns>如果声明了跳过代码验证的权限，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode">
<summary>获取或设置一个值，该值指示是否声明了调用非托管代码的权限。</summary>
<returns>如果声明了调用非托管代码的权限，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Security.Permissions.SecurityPermissionFlag">
<summary>为安全权限对象指定访问标志。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.NoFlags">
<summary>无安全性访问。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Assertion">
<summary>断言此代码的所有调用方均有该操作所需的权限的能力。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode">
<summary>能够调用非托管代码。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.SkipVerification">
<summary>能够跳过此程序集内对代码的验证。如果授予此权限，则可以运行无法验证的代码。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Execution">
<summary>使代码运行的权限。如果没有此权限，则托管代码不会执行。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread">
<summary>能够在线程上使用某些高级操作。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence">
<summary>能够提供证据，包括能够更改公共语言运行时所提供的证据。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy">
<summary>能够查看并修改策略。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter">
<summary>能够提供序列化服务。该标志由序列化格式化程序使用。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlDomainPolicy">
<summary>能够指定域策略。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal">
<summary>能够操控用户对象。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain">
<summary>能够创建和操控 <see cref="T:System.AppDomain"/>。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration">
<summary>用于配置远程处理类型和信道的权限。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure">
<summary>用于将代码插入公共语言运行时结构的权限，如添加远程处理上下文接收器、特使接收器和动态接收器。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.BindingRedirects">
<summary>在应用程序配置文件中执行显式绑定重定向所需的权限。其中包括对某些 .NET Framework 程序集的重定向，这些程序集和 .NET Framework 外的其他程序集都已经被统一。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.AllFlags">
<summary>权限的无限制状态。</summary>
    </member>
    <member name="T:System.Security.Principal.IIdentity">
<summary>定义标识对象的基本功能。</summary>
    </member>
    <member name="P:System.Security.Principal.IIdentity.AuthenticationType">
<summary>获取所使用的身份验证的类型。</summary>
<returns>用于标识用户的身份验证的类型。</returns>
    </member>
    <member name="P:System.Security.Principal.IIdentity.IsAuthenticated">
<summary>获取一个值，该值指示是否验证了用户。</summary>
<returns>如果用户已经过验证，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Security.Principal.IIdentity.Name">
<summary>获取当前用户的名称。</summary>
<returns>用户名，代码当前即以该用户的名义运行。</returns>
    </member>
    <member name="T:System.Security.Principal.IPrincipal">
<summary>定义用户对象的基本功能。</summary>
    </member>
    <member name="P:System.Security.Principal.IPrincipal.Identity">
<summary>获取当前用户的标识。</summary>
<returns>与当前用户关联的 <see cref="T:System.Security.Principal.IIdentity"/> 对象。</returns>
    </member>
    <member name="M:System.Security.Principal.IPrincipal.IsInRole(System.String)">
<summary>确定当前用户是否属于指定的角色。</summary>
<returns>如果当前用户是指定角色的成员，则为 true；否则为 false。</returns>
<param name="role">要检查其成员资格的角色的名称。 </param>
    </member>
    <member name="T:System.Text.Decoder">
<summary>将一个编码字节序列转换为一组字符。</summary>
    </member>
    <member name="M:System.Text.Decoder.#ctor">
<summary>初始化 <see cref="T:System.Text.Decoder"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
<summary>[SECURITY CRITICAL] 将已编码字节的缓冲区转换为 Unicode 字符，然后将结果存储在另一个缓冲区中。</summary>
<param name="bytes">包含要转换的字节序列的缓冲区地址。</param>
<param name="byteCount">要转换的 <paramref name="bytes"/> 中的字节数。</param>
<param name="chars">要存储已转换字符的缓冲区地址。</param>
<param name="charCount">要在转换中使用的 <paramref name="chars"/> 中的最大字符数。</param>
<param name="flush">如果不再进一步转换数据，则为 true；否则为 false。</param>
<param name="bytesUsed">此方法在返回时包含转换所产生的字节数。该参数未经初始化即被传递。</param>
<param name="charsUsed">此方法在返回时包含用于转换的 <paramref name="chars"/> 中的字符数。该参数未经初始化即被传递。</param>
<param name="completed">此方法返回时，如果 <paramref name="byteCount"/> 指定的所有字符均已转换，则包含 true；否则包含 false。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
<summary>将已编码字节的数组转换为 Unicode 字符，然后将结果存储在字节数组中。</summary>
<param name="bytes">要转换的字节数组。</param>
<param name="byteIndex">要转换的 <paramref name="bytes"/> 的第一个元素的从零开始的索引。</param>
<param name="byteCount">要转换的 <paramref name="bytes"/> 的元素数。</param>
<param name="chars">一个数组，存储已转换的字符。</param>
<param name="charIndex">存储数据的 <paramref name="chars"/> 的第一个元素的从零开始的索引。</param>
<param name="charCount">要在转换中使用的 <paramref name="chars"/> 的最大元素数。</param>
<param name="flush">如果不再进一步转换数据，则为 true；否则为 false。</param>
<param name="bytesUsed">此方法在返回时包含用于转换的字节数。该参数未经初始化即被传递。</param>
<param name="charsUsed">此方法在返回时包含转换产生的 <paramref name="chars"/> 中的字符数。该参数未经初始化即被传递。</param>
<param name="completed">此方法返回时，如果 <paramref name="byteCount"/> 指定的所有字符均已转换，则包含 true；否则包含 false。该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="chars"/> 或 <paramref name="bytes"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="charIndex"/>、<paramref name="charCount"/>、<paramref name="byteIndex"/> 或 <paramref name="byteCount"/> 小于零。-或- <paramref name="chars"/> 的长度 - <paramref name="charIndex"/> 小于 <paramref name="charCount"/>。-或- <paramref name="bytes"/> 的长度 - <paramref name="byteIndex"/> 小于 <paramref name="byteCount"/>。</exception>
<exception cref="T:System.ArgumentException">输出缓冲区太小，无法包含任何已转换的输入。输出缓冲区应大于或等于 <see cref="Overload:System.Text.Decoder.GetCharCount"/> 方法指示的大小。</exception>
<exception cref="T:System.Text.DecoderFallbackException">发生回退（请参阅“了解编码”以获得更详细的解释）。</exception>
    </member>
    <member name="M:System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)">
<summary>[SECURITY CRITICAL] 在派生类中重写时，计算对字节序列（从指定的字节指针开始）进行解码所产生的字符数。一个参数指示计算后是否要清除解码器的内部状态。</summary>
<returns>对指定的字节序列和内部缓冲区中的任何字节进行解码所产生的字符数。</returns>
<param name="bytes">指向第一个要解码的字节的指针。 </param>
<param name="count">要解码的字节数。 </param>
<param name="flush">如果要在计算后模拟编码器内部状态的清除过程，则为 true；否则为 false。 </param>
    </member>
    <member name="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
<summary>在派生类中重写时，计算对字节序列（从指定字节数组开始）进行解码所产生的字符数。</summary>
<returns>对指定的字节序列和内部缓冲区中的任何字节进行解码所产生的字符数。</returns>
<param name="bytes">包含要解码的字节序列的字节数组。 </param>
<param name="index">要解码的第一个字节的从零开始的索引。 </param>
<param name="count">要解码的字节数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="bytes"/> 为 null (Nothing)。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 或 <paramref name="count"/> 小于零。-或- <paramref name="index"/> 和 <paramref name="count"/> 不表示 <paramref name="bytes"/> 中的有效范围。 </exception>
<exception cref="T:System.Text.DecoderFallbackException">发生回退（请参阅“了解编码”以获得更详细的解释）。</exception>
    </member>
    <member name="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)">
<summary>在派生类中重写时，计算对字节序列（从指定字节数组开始）进行解码所产生的字符数。一个参数指示计算后是否要清除解码器的内部状态。</summary>
<returns>对指定的字节序列和内部缓冲区中的任何字节进行解码所产生的字符数。</returns>
<param name="bytes">包含要解码的字节序列的字节数组。 </param>
<param name="index">要解码的第一个字节的从零开始的索引。 </param>
<param name="count">要解码的字节数。 </param>
<param name="flush">如果要在计算后模拟编码器内部状态的清除过程，则为 true；否则为 false。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="bytes"/> 为 null (Nothing)。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 或 <paramref name="count"/> 小于零。-或- <paramref name="index"/> 和 <paramref name="count"/> 不表示 <paramref name="bytes"/> 中的有效范围。 </exception>
<exception cref="T:System.Text.DecoderFallbackException">发生回退（请参阅“了解编码”以获得更详细的解释）。</exception>
    </member>
    <member name="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
<summary>[SECURITY CRITICAL] 在派生类中重写时，将字节序列（从指定的字节指针处开始）和内部缓冲区中的任何字节解码为一组从指定字符指针开始存储的字符。一个参数指示转换后是否要清除解码器的内部状态。</summary>
<returns>在由 <paramref name="chars"/> 参数指示的位置处写入的实际字符数。</returns>
<param name="bytes">指向第一个要解码的字节的指针。 </param>
<param name="byteCount">要解码的字节数。 </param>
<param name="chars">一个指针，指向开始写入所产生的字符集的位置。 </param>
<param name="charCount">要写入的最大字符数。 </param>
<param name="flush">如果要在转换后清除解码器的内部状态，则为 true；否则为 false。 </param>
    </member>
    <member name="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
<summary>在派生类中重写时，将指定字节数组的字节序列和内部缓冲区中的任何字节解码为指定的字符数组。</summary>
<returns>写入 <paramref name="chars"/> 的实际字符数。</returns>
<param name="bytes">包含要解码的字节序列的字节数组。 </param>
<param name="byteIndex">要解码的第一个字节的从零开始的索引。 </param>
<param name="byteCount">要解码的字节数。 </param>
<param name="chars">要用于包含所产生的字符集的字符数组。 </param>
<param name="charIndex">开始写入所产生的一组字符的从零开始的索引。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="bytes"/> 为 null。-或- <paramref name="chars"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="byteIndex"/> 或 <paramref name="byteCount"/> 或 <paramref name="charIndex"/> 小于零。-或- <paramref name="byteindex"/> 和 <paramref name="byteCount"/> 不表示 <paramref name="bytes"/> 中的有效范围。-或- <paramref name="charIndex"/> 不是 <paramref name="chars"/> 中的有效索引。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="chars"/> 中从 <paramref name="charIndex"/> 到数组结尾没有足够容量来容纳所产生的字符。 </exception>
<exception cref="T:System.Text.DecoderFallbackException">发生回退（请参阅“了解编码”以获得更详细的解释）。</exception>
    </member>
    <member name="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
<summary>在派生类中重写时，将指定字节数组的字节序列和内部缓冲区中的任何字节解码为指定的字符数组。一个参数指示转换后是否要清除解码器的内部状态。</summary>
<returns>写入 <paramref name="chars"/> 数组的实际字符数。</returns>
<param name="bytes">包含要解码的字节序列的字节数组。 </param>
<param name="byteIndex">要解码的第一个字节的从零开始的索引。 </param>
<param name="byteCount">要解码的字节数。 </param>
<param name="chars">要用于包含所产生的字符集的字符数组。 </param>
<param name="charIndex">开始写入所产生的一组字符的从零开始的索引。 </param>
<param name="flush">如果要在转换后清除解码器的内部状态，则为 true；否则为 false。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="bytes"/> 为 null。-或- <paramref name="chars"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="byteIndex"/> 或 <paramref name="byteCount"/> 或 <paramref name="charIndex"/> 小于零。-或- <paramref name="byteindex"/> 和 <paramref name="byteCount"/> 不表示 <paramref name="bytes"/> 中的有效范围。-或- <paramref name="charIndex"/> 不是 <paramref name="chars"/> 中的有效索引。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="chars"/> 中从 <paramref name="charIndex"/> 到数组结尾没有足够容量来容纳所产生的字符。 </exception>
<exception cref="T:System.Text.DecoderFallbackException">发生回退（请参阅“了解编码”以获得更详细的解释）。</exception>
    </member>
    <member name="M:System.Text.Decoder.Reset">
<summary>在派生类中重写时，将解码器设置回它的初始状态。</summary>
    </member>
    <member name="T:System.Text.DecoderFallbackException">
<summary>解码器回退操作失败时引发的异常。无法继承此类。</summary>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor">
<summary>初始化 <see cref="T:System.Text.DecoderFallbackException"/> 类的新实例。 </summary>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor(System.String)">
<summary>初始化 <see cref="T:System.Text.DecoderFallbackException"/> 类的新实例。一个参数指定错误消息。</summary>
<param name="message">错误消息。</param>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor(System.String,System.Byte[],System.Int32)">
<summary>初始化 <see cref="T:System.Text.DecoderFallbackException"/> 类的新实例。参数指定错误消息、被解码的字节数组和无法被解码的字节的索引。</summary>
<param name="message">错误消息。</param>
<param name="bytesUnknown">输入字节数组。</param>
<param name="index">无法解码的字节在 <paramref name="bytesUnknown"/> 中的索引位置。</param>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor(System.String,System.Exception)">
<summary>初始化 <see cref="T:System.Text.DecoderFallbackException"/> 类的新实例。参数指定错误消息和导致此异常的内部异常。</summary>
<param name="message">错误消息。</param>
<param name="innerException">导致此异常的异常。</param>
    </member>
    <member name="P:System.Text.DecoderFallbackException.BytesUnknown">
<summary>获取导致异常的输入字节序列。</summary>
<returns>无法解码的输入字节数组。 </returns>
    </member>
    <member name="P:System.Text.DecoderFallbackException.Index">
<summary>获取导致异常的字节在输入字节序列中的索引位置。</summary>
<returns>无法成功解码的最后一个字节在输入字节数组中的索引位置。索引位置是从零开始的。如果第一个字节无法解码，则方法将返回 -1。</returns>
    </member>
    <member name="T:System.Text.Encoder">
<summary>将一组字符转换为一个字节序列。</summary>
    </member>
    <member name="M:System.Text.Encoder.#ctor">
<summary>初始化 <see cref="T:System.Text.Encoder"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
<summary>[SECURITY CRITICAL] 将 Unicode 字符的缓冲区转换为编码的字节序列，然后将结果存储在另一个缓冲区中。</summary>
<param name="chars">要转换的 UTF-16 编码字符的字符串地址。</param>
<param name="charCount">要转换的 <paramref name="chars"/> 中的字符数。</param>
<param name="bytes">用来存储已转换字节的缓冲区的地址。</param>
<param name="byteCount">要在转换中使用的 <paramref name="bytes"/> 中的最大字节数。</param>
<param name="flush">如果不再进一步转换数据，则为 true；否则为 false。</param>
<param name="charsUsed">此方法在返回时包含用于转换的 <paramref name="chars"/> 中的字符数。该参数未经初始化即被传递。</param>
<param name="bytesUsed">此方法在返回时包含用于转换的字节数。该参数未经初始化即被传递。</param>
<param name="completed">此方法返回时，如果 <paramref name="charCount"/> 指定的所有字符均已转换，则包含 true；否则包含 false。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
<summary>将 Unicode 字符数组转换为编码的字节序列并将结果存储在字节数组中。</summary>
<param name="chars">要转换的字符数组。</param>
<param name="charIndex">要转换的 <paramref name="chars"/> 的第一个元素的从零开始的索引。</param>
<param name="charCount">要转换的 <paramref name="chars"/> 的元素数。</param>
<param name="bytes">一个数组，其中存储已转换的字节。</param>
<param name="byteIndex">存储数据的 <paramref name="bytes"/> 的第一个元素的从零开始的索引。</param>
<param name="byteCount">要在转换中使用的 <paramref name="bytes"/> 的最大元素数。</param>
<param name="flush">如果不再进一步转换数据，则为 true；否则为 false。</param>
<param name="charsUsed">此方法在返回时包含用于转换的 <paramref name="chars"/> 中的字符数。该参数未经初始化即被传递。</param>
<param name="bytesUsed">此方法在返回时包含转换所产生的字节数。该参数未经初始化即被传递。</param>
<param name="completed">此方法返回时，如果 <paramref name="charCount"/> 指定的所有字符均已转换，则包含 true；否则包含 false。该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="chars"/> 或 <paramref name="bytes"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="charIndex"/>、<paramref name="charCount"/>、<paramref name="byteIndex"/> 或 <paramref name="byteCount"/> 小于零。-或- <paramref name="chars"/> 的长度 - <paramref name="charIndex"/> 小于 <paramref name="charCount"/>。-或- <paramref name="bytes"/> 的长度 - <paramref name="byteIndex"/> 小于 <paramref name="byteCount"/>。</exception>
<exception cref="T:System.ArgumentException">输出缓冲区太小，无法包含任何已转换的输入。输出缓冲区应大于或等于 <see cref="Overload:System.Text.Encoder.GetByteCount"/> 方法指示的大小。</exception>
<exception cref="T:System.Text.EncoderFallbackException">发生回退（请参阅“了解编码”以获得更详细的解释）。</exception>
    </member>
    <member name="M:System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)">
<summary>[SECURITY CRITICAL] 在派生类中重写时，计算对一组字符（从指定的字符指针处开始）进行编码所产生的字节数。一个参数指示计算后是否要清除编码器的内部状态。</summary>
<returns>通过对指定字符和内部缓冲区中的所有字符进行编码而产生的字节数。</returns>
<param name="chars">指向第一个要编码的字符的指针。 </param>
<param name="count">要编码的字符数。 </param>
<param name="flush">如果要在计算后模拟编码器内部状态的清除过程，则为 true；否则为 false。 </param>
    </member>
    <member name="M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
<summary>在派生类中重写时，计算对指定字符数组中的一组字符进行编码所产生的字节数。一个参数指示计算后是否要清除编码器的内部状态。</summary>
<returns>通过对指定字符和内部缓冲区中的所有字符进行编码而产生的字节数。</returns>
<param name="chars">包含要编码的字符集的字符数组。 </param>
<param name="index">第一个要编码的字符的从零开始的索引。 </param>
<param name="count">要编码的字符数。 </param>
<param name="flush">如果要在计算后模拟编码器内部状态的清除过程，则为 true；否则为 false。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="chars"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 或 <paramref name="count"/> 小于零。-或- <paramref name="index"/> 和 <paramref name="count"/> 不表示 <paramref name="chars"/> 中的有效范围。 </exception>
<exception cref="T:System.Text.EncoderFallbackException">发生回退（请参阅“了解编码”以获得更详细的解释）。</exception>
    </member>
    <member name="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
<summary>[SECURITY CRITICAL] 在派生类中重写时，将一组字符（从指定的字符指针处开始）和内部缓冲区中的任何字符编码为从指定字节指针开始存储的字节序列。一个参数指示转换后是否清除编码器的内部状态。</summary>
<returns>在由 <paramref name="bytes"/> 参数指示的位置处写入的实际字节数。</returns>
<param name="chars">指向第一个要编码的字符的指针。 </param>
<param name="charCount">要编码的字符数。 </param>
<param name="bytes">一个指针，指向开始写入所产生的字节序列的位置。 </param>
<param name="byteCount">要写入的最大字节数。 </param>
<param name="flush">如果要在转换后清除编码器的内部状态，则为 true；否则为 false。 </param>
    </member>
    <member name="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
<summary>在派生类中重写时，将指定字符数组中的一组字符和内部缓冲区中的任何字符编码到指定的字节数组中。一个参数指示转换后是否清除编码器的内部状态。</summary>
<returns>写入 <paramref name="bytes"/> 的实际字节数。</returns>
<param name="chars">包含要编码的字符集的字符数组。 </param>
<param name="charIndex">第一个要编码的字符的从零开始的索引。 </param>
<param name="charCount">要编码的字符数。 </param>
<param name="bytes">要包含所产生的字节序列的字节数组。 </param>
<param name="byteIndex">开始写入所产生的字节序列的从零开始的索引。 </param>
<param name="flush">如果要在转换后清除编码器的内部状态，则为 true；否则为 false。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="chars"/> 为 null。-或- <paramref name="bytes"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="charIndex"/> 或 <paramref name="charCount"/> 或 <paramref name="byteIndex"/> 小于零。-或- <paramref name="charIndex"/> 和 <paramref name="charCount"/> 不表示 <paramref name="chars"/> 中的有效范围。-或- <paramref name="byteIndex"/> 不是 <paramref name="bytes"/> 中的有效索引。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="bytes"/> 中从 <paramref name="byteIndex"/> 到数组结尾没有足够的容量来容纳所产生的字节。 </exception>
<exception cref="T:System.Text.EncoderFallbackException">发生回退（请参阅“了解编码”以获得更详细的解释）。</exception>
    </member>
    <member name="T:System.Text.EncoderFallbackException">
<summary>编码器回退操作失败时引发的异常。无法继承此类。</summary>
    </member>
    <member name="M:System.Text.EncoderFallbackException.#ctor">
<summary>初始化 <see cref="T:System.Text.EncoderFallbackException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.EncoderFallbackException.#ctor(System.String)">
<summary>初始化 <see cref="T:System.Text.EncoderFallbackException"/> 类的新实例。一个参数指定错误消息。</summary>
<param name="message">错误消息。</param>
    </member>
    <member name="M:System.Text.EncoderFallbackException.#ctor(System.String,System.Exception)">
<summary>初始化 <see cref="T:System.Text.EncoderFallbackException"/> 类的新实例。参数指定错误消息和导致此异常的内部异常。</summary>
<param name="message">错误消息。</param>
<param name="innerException">导致此异常的异常。</param>
    </member>
    <member name="P:System.Text.EncoderFallbackException.CharUnknown">
<summary>获取导致异常的输入字符。</summary>
<returns>无法编码的字符。</returns>
    </member>
    <member name="P:System.Text.EncoderFallbackException.CharUnknownHigh">
<summary>获取导致异常的代理项对的高组件字符。</summary>
<returns>无法编码的代理项对的高组件字符。</returns>
    </member>
    <member name="P:System.Text.EncoderFallbackException.CharUnknownLow">
<summary>获取导致异常的代理项对的低组件字符。</summary>
<returns>无法编码的代理项对的低组件字符。</returns>
    </member>
    <member name="P:System.Text.EncoderFallbackException.Index">
<summary>获取导致异常的字符在输入缓冲区中的索引位置。</summary>
<returns>无法编码的字符在输入缓冲区中的索引位置。</returns>
    </member>
    <member name="M:System.Text.EncoderFallbackException.IsUnknownSurrogate">
<summary>指示导致异常的输入是否为代理项对。</summary>
<returns>如果输入是代理项对，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Text.Encoding">
<summary>表示字符编码。</summary>
    </member>
    <member name="M:System.Text.Encoding.#ctor">
<summary>初始化 <see cref="T:System.Text.Encoding"/> 类的新实例。</summary>
    </member>
    <member name="P:System.Text.Encoding.BigEndianUnicode">
<summary>获取使用 Big-Endian 字节顺序的 UTF-16 格式的编码。</summary>
<returns>使用 Big-Endian 字节顺序的 UTF-16 格式的编码。</returns>
    </member>
    <member name="M:System.Text.Encoding.Clone">
<summary>当在派生类中重写时，创建当前 <see cref="T:System.Text.Encoding"/> 对象的一个浅表副本。</summary>
<returns>当前 <see cref="T:System.Text.Encoding"/> 对象的副本。</returns>
    </member>
    <member name="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
<summary>将整个字节数组从一种编码转换为另一种编码。</summary>
<returns>一个字节数组，包含将 <paramref name="bytes"/> 从 <paramref name="srcEncoding"/> 转换为 <paramref name="dstEncoding"/> 的结果。</returns>
<param name="srcEncoding"><paramref name="bytes"/> 的编码格式。 </param>
<param name="dstEncoding">目标编码格式。 </param>
<param name="bytes">要转换的字节。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="srcEncoding"/> 为 null。-或-<paramref name="dstEncoding"/> 为 null。-或-<paramref name="bytes"/> 为 null。 </exception>
<exception cref="T:System.Text.DecoderFallbackException">发生回退（请参阅“了解编码”以获得完整的解释）。</exception>
<exception cref="T:System.Text.EncoderFallbackException">发生回退（请参阅“了解编码”以获得完整的解释）。</exception>
    </member>
    <member name="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
<summary>将字节数组内某个范围的字节从一种编码转换为另一种编码。</summary>
<returns><see cref="T:System.Byte"/> 类型的数组包含将 <paramref name="bytes"/> 中某个范围的字节从 <paramref name="srcEncoding"/> 转换为 <paramref name="dstEncoding"/> 的结果。</returns>
<param name="srcEncoding">源数组 <paramref name="bytes"/> 的编码。 </param>
<param name="dstEncoding">输出数组的编码。 </param>
<param name="bytes">要转换的字节数组。 </param>
<param name="index">要转换的 <paramref name="bytes"/> 的第一个元素的从零开始的索引。 </param>
<param name="count">要转换的字节数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="srcEncoding"/> 为 null。-或-<paramref name="dstEncoding"/> 为 null。-或-<paramref name="bytes"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 和 <paramref name="count"/> 不指定字节数组中的有效范围。 </exception>
<exception cref="T:System.Text.DecoderFallbackException">发生回退（请参阅“了解编码”以获得完整的解释）。</exception>
<exception cref="T:System.Text.EncoderFallbackException">发生回退（请参阅“了解编码”以获得完整的解释）。</exception>
    </member>
    <member name="M:System.Text.Encoding.Equals(System.Object)">
<summary>确定指定的 <see cref="T:System.Object"/> 是否等于当前实例。</summary>
<returns>如果 <paramref name="value"/> 是 <see cref="T:System.Text.Encoding"/> 的一个实例并且等于当前实例，则为 true；否则为 false。 </returns>
<param name="value">与当前实例进行比较的 <see cref="T:System.Object"/>。 </param>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.Char[])">
<summary>在派生类中重写时，计算对指定字符数组中的所有字符进行编码所产生的字节数。</summary>
<returns>对指定字符数组中的所有字符进行编码后产生的字节数。</returns>
<param name="chars">包含要编码的字符的字符数组。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="chars"/> 为 null。 </exception>
<exception cref="T:System.Text.EncoderFallbackException">发生回退（请参阅“了解编码”以获得完整的解释）。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
<summary>在派生类中重写时，计算对指定字符数组中的一组字符进行编码所产生的字节数。</summary>
<returns>对指定字符进行编码后生成的字节数。</returns>
<param name="chars">包含要编码的字符集的字符数组。 </param>
<param name="index">第一个要编码的字符的从零开始的索引。 </param>
<param name="count">要编码的字符数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="chars"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 或 <paramref name="count"/> 小于零。-或- <paramref name="index"/> 和 <paramref name="count"/> 不表示 <paramref name="chars"/> 中的有效范围。 </exception>
<exception cref="T:System.Text.EncoderFallbackException">发生回退（请参阅“了解编码”以获得完整的解释）。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.String)">
<summary>在派生类中重写时，计算对指定字符串中的字符进行编码所产生的字节数。</summary>
<returns>对指定字符进行编码后生成的字节数。</returns>
<param name="s">包含要编码的字符集的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
<exception cref="T:System.Text.EncoderFallbackException">发生回退（请参阅“了解编码”以获得完整的解释）。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
<summary>[SECURITY CRITICAL] 在派生类中重写时，将一组字符（从指定的字符指针开始）编码为一个字节序列，并从指定的字节指针开始存储该字节序列。</summary>
<returns>在由 <paramref name="bytes"/> 参数指示的位置处写入的实际字节数。</returns>
<param name="chars">指向第一个要编码的字符的指针。 </param>
<param name="charCount">要编码的字符数。 </param>
<param name="bytes">一个指针，指向开始写入所产生的字节序列的位置。 </param>
<param name="byteCount">要写入的最大字节数。 </param>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char[])">
<summary>在派生类中重写时，将指定字符数组中的所有字符编码为一个字节序列。</summary>
<returns>一个字节数组，包含对指定的字符集进行编码的结果。</returns>
<param name="chars">包含要编码的字符的字符数组。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="chars"/> 为 null。 </exception>
<exception cref="T:System.Text.EncoderFallbackException">发生回退（请参阅“了解编码”以获得完整的解释）。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
<summary>在派生类中重写时，将指定字符数组中的一组字符编码为一个字节序列。</summary>
<returns>一个字节数组，包含对指定的字符集进行编码的结果。</returns>
<param name="chars">包含要编码的字符集的字符数组。 </param>
<param name="index">第一个要编码的字符的从零开始的索引。 </param>
<param name="count">要编码的字符数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="chars"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 或 <paramref name="count"/> 小于零。-或- <paramref name="index"/> 和 <paramref name="count"/> 不表示 <paramref name="chars"/> 中的有效范围。 </exception>
<exception cref="T:System.Text.EncoderFallbackException">发生回退（请参阅“了解编码”以获得完整的解释）。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
<summary>在派生类中重写时，将指定字符数组中的一组字符编码为指定的字节数组。</summary>
<returns>写入 <paramref name="bytes"/> 的实际字节数。</returns>
<param name="chars">包含要编码的字符集的字符数组。 </param>
<param name="charIndex">第一个要编码的字符的从零开始的索引。 </param>
<param name="charCount">要编码的字符数。 </param>
<param name="bytes">要包含所产生的字节序列的字节数组。 </param>
<param name="byteIndex">开始写入所产生的字节序列的从零开始的索引。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="chars"/> 为 null。-或- <paramref name="bytes"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="charIndex"/> 或 <paramref name="charCount"/> 或 <paramref name="byteIndex"/> 小于零。-或- <paramref name="charIndex"/> 和 <paramref name="charCount"/> 不表示 <paramref name="chars"/> 中的有效范围。-或- <paramref name="byteIndex"/> 不是 <paramref name="bytes"/> 中的有效索引。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="bytes"/> 中从 <paramref name="byteIndex"/> 到数组结尾没有足够的容量来容纳所产生的字节。 </exception>
<exception cref="T:System.Text.EncoderFallbackException">发生回退（请参阅“了解编码”以获得完整的解释）。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.String)">
<summary>在派生类中重写时，将指定字符串中的所有字符编码为一个字节序列。</summary>
<returns>一个字节数组，包含对指定的字符集进行编码的结果。</returns>
<param name="s">包含要编码的字符的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。 </exception>
<exception cref="T:System.Text.EncoderFallbackException">发生回退（请参阅“了解编码”以获得完整的解释）。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
<summary>在派生类中重写时，将指定字符串中的一组字符编码为指定的字节数组。</summary>
<returns>写入 <paramref name="bytes"/> 的实际字节数。</returns>
<param name="s">包含要编码的字符集的字符串。 </param>
<param name="charIndex">第一个要编码的字符的从零开始的索引。 </param>
<param name="charCount">要编码的字符数。 </param>
<param name="bytes">要包含所产生的字节序列的字节数组。 </param>
<param name="byteIndex">开始写入所产生的字节序列的从零开始的索引。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。-或- <paramref name="bytes"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="charIndex"/> 或 <paramref name="charCount"/> 或 <paramref name="byteIndex"/> 小于零。-或- <paramref name="charIndex"/> 和 <paramref name="charCount"/> 不表示 <paramref name="chars"/> 中的有效范围。-或- <paramref name="byteIndex"/> 不是 <paramref name="bytes"/> 中的有效索引。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="bytes"/> 中从 <paramref name="byteIndex"/> 到数组结尾没有足够的容量来容纳所产生的字节。 </exception>
<exception cref="T:System.Text.EncoderFallbackException">发生回退（请参阅“了解编码”以获得完整的解释）。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetCharCount(System.Byte[])">
<summary>在派生类中重写时，计算对指定字节数组中的所有字节进行解码所产生的字符数。</summary>
<returns>对指定字节序列进行解码所产生的字符数。</returns>
<param name="bytes">包含要解码的字节序列的字节数组。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="bytes"/> 为 null。 </exception>
<exception cref="T:System.Text.DecoderFallbackException">发生回退（请参阅“了解编码”以获得完整的解释）。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
<summary>在派生类中重写时，计算对字节序列（从指定字节数组开始）进行解码所产生的字符数。</summary>
<returns>对指定字节序列进行解码所产生的字符数。</returns>
<param name="bytes">包含要解码的字节序列的字节数组。 </param>
<param name="index">要解码的第一个字节的从零开始的索引。 </param>
<param name="count">要解码的字节数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="bytes"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 或 <paramref name="count"/> 小于零。-或- <paramref name="index"/> 和 <paramref name="count"/> 不表示 <paramref name="bytes"/> 中的有效范围。 </exception>
<exception cref="T:System.Text.DecoderFallbackException">发生回退（请参阅“了解编码”以获得完整的解释）。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte[])">
<summary>在派生类中重写时，将指定字节数组中的所有字节解码为一组字符。</summary>
<returns>一个字节数组，包含对指定的字节序列进行解码的结果。</returns>
<param name="bytes">包含要解码的字节序列的字节数组。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="bytes"/> 为 null。 </exception>
<exception cref="T:System.Text.DecoderFallbackException">发生回退（请参阅“了解编码”以获得完整的解释）。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
<summary>在派生类中重写时，将指定字节数组中的一个字节序列解码为一组字符。</summary>
<returns>一个字节数组，包含对指定的字节序列进行解码的结果。</returns>
<param name="bytes">包含要解码的字节序列的字节数组。 </param>
<param name="index">要解码的第一个字节的从零开始的索引。 </param>
<param name="count">要解码的字节数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="bytes"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 或 <paramref name="count"/> 小于零。-或- <paramref name="index"/> 和 <paramref name="count"/> 不表示 <paramref name="bytes"/> 中的有效范围。 </exception>
<exception cref="T:System.Text.DecoderFallbackException">发生回退（请参阅“了解编码”以获得完整的解释）。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
<summary>在派生类中重写时，将指定字节数组中的字节序列解码为指定的字符数组。</summary>
<returns>写入 <paramref name="chars"/> 的实际字符数。</returns>
<param name="bytes">包含要解码的字节序列的字节数组。 </param>
<param name="byteIndex">要解码的第一个字节的从零开始的索引。 </param>
<param name="byteCount">要解码的字节数。 </param>
<param name="chars">要用于包含所产生的字符集的字符数组。 </param>
<param name="charIndex">开始写入所产生的一组字符的从零开始的索引。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="bytes"/> 为 null。-或- <paramref name="chars"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="byteIndex"/> 或 <paramref name="byteCount"/> 或 <paramref name="charIndex"/> 小于零。-或- <paramref name="byteindex"/> 和 <paramref name="byteCount"/> 不表示 <paramref name="bytes"/> 中的有效范围。-或- <paramref name="charIndex"/> 不是 <paramref name="chars"/> 中的有效索引。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="chars"/> 中从 <paramref name="charIndex"/> 到数组结尾没有足够容量来容纳所产生的字符。 </exception>
<exception cref="T:System.Text.DecoderFallbackException">发生回退（请参阅“了解编码”以获得完整的解释）。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetDecoder">
<summary>在派生类中重写时，获取一个解码器，该解码器将已编码的字节序列转换为字符序列。</summary>
<returns>一个 <see cref="T:System.Text.Decoder"/>，它将已编码的字节序列转换为字符序列。</returns>
    </member>
    <member name="M:System.Text.Encoding.GetEncoder">
<summary>在派生类中重写时，获取一个解码器，该解码器将 Unicode 字符序列转换为已编码的字节序列。</summary>
<returns>一个 <see cref="T:System.Text.Encoder"/>，它将 Unicode 字符序列转换为已编码的字节序列。</returns>
    </member>
    <member name="M:System.Text.Encoding.GetEncoding(System.String)">
<summary>返回与指定名称关联的编码。</summary>
<returns>与指定名称相关联的对象。</returns>
<param name="name">首选编码的名称。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="name"/> 不是有效编码的名称。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetHashCode">
<summary>返回当前实例的哈希代码。</summary>
<returns>当前实例的哈希代码。</returns>
    </member>
    <member name="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
<summary>在派生类中重写时，计算对指定数目的字符进行编码所产生的最大字节数。</summary>
<returns>对指定数目的字符进行编码所产生的最大字节数。</returns>
<param name="charCount">要编码的字符数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="charCount"/> 小于零。 </exception>
<exception cref="T:System.Text.EncoderFallbackException">发生回退（请参阅“了解编码”以获得完整的解释）。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
<summary>在派生类中重写时，计算对指定数目的字节进行解码时所产生的最大字符数。</summary>
<returns>对指定数目的字节进行解码时所产生的最大字符数。</returns>
<param name="byteCount">要解码的字节数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="byteCount"/> 小于零。 </exception>
<exception cref="T:System.Text.DecoderFallbackException">发生回退（请参阅“了解编码”以获得完整的解释）。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetPreamble">
<summary>在派生类中重写时，返回指定所用编码的字节序列。</summary>
<returns>一个字节数组，包含指定所用编码的字节序列。-或- 长度为零的字节数组（如果不需要前导码）。</returns>
    </member>
    <member name="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
<summary>在派生类中重写时，将指定字节数组中的一个字节序列解码为一个字符串。</summary>
<returns>包含指定字节序列解码结果的 <see cref="T:System.String"/>。</returns>
<param name="bytes">包含要解码的字节序列的字节数组。 </param>
<param name="index">要解码的第一个字节的从零开始的索引。 </param>
<param name="count">要解码的字节数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="bytes"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 或 <paramref name="count"/> 小于零。-或- <paramref name="index"/> 和 <paramref name="count"/> 不表示 <paramref name="bytes"/> 中的有效范围。 </exception>
<exception cref="T:System.Text.DecoderFallbackException">发生回退（请参阅“了解编码”以获得完整的解释）。</exception>
    </member>
    <member name="P:System.Text.Encoding.Unicode">
<summary>获取使用 Little-Endian 字节顺序的 UTF-16 格式的编码。</summary>
<returns>使用 Little-Endian 字节顺序的 UTF-16 格式的 <see cref="T:System.Text.Encoding"/>。</returns>
    </member>
    <member name="P:System.Text.Encoding.UTF8">
<summary>获取 UTF-8 格式的编码。</summary>
<returns>UTF-8 格式的编码。</returns>
    </member>
    <member name="P:System.Text.Encoding.WebName">
<summary>在派生类中重写时，获取在 Internet 编号分配管理机构 (IANA) 注册的当前编码的名称。</summary>
<returns>当前 <see cref="T:System.Text.Encoding"/> 的 IANA 名称。</returns>
    </member>
    <member name="T:System.Text.StringBuilder">
<summary>表示可变字符字符串。无法继承此类。</summary>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor">
<summary>初始化 <see cref="T:System.Text.StringBuilder"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.Int32)">
<summary>使用指定的容量初始化 <see cref="T:System.Text.StringBuilder"/> 类的新实例。</summary>
<param name="capacity">此实例的建议起始大小。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="capacity"/> 小于零。 </exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)">
<summary>初始化 <see cref="T:System.Text.StringBuilder"/> 类的新实例，该类起始于指定容量并且可增长到指定的最大容量。</summary>
<param name="capacity"><see cref="T:System.Text.StringBuilder"/> 的建议起始大小。 </param>
<param name="maxCapacity">当前字符串可包含的最大字符数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="maxCapacity"/> 小于一，<paramref name="capacity"/> 小于零，或 <paramref name="capacity"/> 大于 <paramref name="maxCapacity"/>。 </exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String)">
<summary>使用指定的字符串初始化 <see cref="T:System.Text.StringBuilder"/> 类的新实例。</summary>
<param name="value">用于初始化实例值的字符串。如果 <paramref name="value"/> 为 null，则新的 <see cref="T:System.Text.StringBuilder"/> 将包含空字符串（即包含 <see cref="F:System.String.Empty"/>）。 </param>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32)">
<summary>使用指定的字符串和容量初始化 <see cref="T:System.Text.StringBuilder"/> 类的新实例。</summary>
<param name="value">用于初始化实例值的字符串。如果 <paramref name="value"/> 为 null，则新的 <see cref="T:System.Text.StringBuilder"/> 将包含空字符串（即包含 <see cref="F:System.String.Empty"/>）。 </param>
<param name="capacity"><see cref="T:System.Text.StringBuilder"/> 的建议起始大小。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="capacity"/> 小于零。 </exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
<summary>用指定的子字符串和容量初始化 <see cref="T:System.Text.StringBuilder"/> 类的新实例。</summary>
<param name="value">字符串，包含用于初始化此实例值的子字符串。如果 <paramref name="value"/> 为 null，则新的 <see cref="T:System.Text.StringBuilder"/> 将包含空字符串（即包含 <see cref="F:System.String.Empty"/>）。 </param>
<param name="startIndex"><paramref name="value"/> 中子字符串开始的位置。 </param>
<param name="length">子字符串中的字符数。 </param>
<param name="capacity"><see cref="T:System.Text.StringBuilder"/> 的建议起始大小。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="capacity"/> 小于零。-或- <paramref name="startIndex"/> 加上 <paramref name="length"/> 不是 <paramref name="value"/> 中的位置。 </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Boolean)">
<summary>在此实例的结尾追加指定的布尔值的字符串表示形式。</summary>
<returns>完成追加操作后对此实例的引用。</returns>
<param name="value">要追加的布尔值。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值会超过它的最大容量。 </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Byte)">
<summary>在此实例的结尾追加指定的 8 位无符号整数的字符串表示形式。</summary>
<returns>完成追加操作后对此实例的引用。</returns>
<param name="value">要追加的值。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值会超过它的最大容量。 </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char)">
<summary>在此实例的结尾追加指定 Unicode 字符的字符串表示形式。</summary>
<returns>完成追加操作后对此实例的引用。</returns>
<param name="value">要追加的 Unicode 字符。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值会超过它的最大容量。 </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char,System.Int32)">
<summary>在此实例的结尾追加 Unicode 字符的字符串表示形式指定数目的副本。</summary>
<returns>完成追加操作后对此实例的引用。</returns>
<param name="value">要追加的字符。 </param>
<param name="repeatCount">追加 <paramref name="value"/> 的次数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="repeatCount"/> 小于零。-或- 增大此实例的值会超过它的最大容量。 </exception>
<exception cref="T:System.OutOfMemoryException">内存不足。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char[])">
<summary>在此实例的结尾追加指定数组中的 Unicode 字符的字符串表示形式。</summary>
<returns>完成追加操作后对此实例的引用。</returns>
<param name="value">要追加的字符数组。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值会超过它的最大容量。 </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)">
<summary>在此实例的结尾追加指定的 Unicode 字符子数组的字符串表示形式。</summary>
<returns>完成追加操作后对此实例的引用。</returns>
<param name="value">字符数组。 </param>
<param name="startIndex"><paramref name="value"/> 中的起始位置。 </param>
<param name="charCount">要追加的字符数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null，并且 <paramref name="startIndex"/> 和 <paramref name="charCount"/> 不为零。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="charCount"/> 小于零。-或- <paramref name="startIndex"/> 小于零。-或- <paramref name="startIndex"/> + <paramref name="charCount"/> 小于 <paramref name="value"/> 的长度。-或- 增大此实例的值会超过它的最大容量。 </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Double)">
<summary>在此实例的结尾追加指定的双精度浮点数的字符串表示形式。</summary>
<returns>完成追加操作后对此实例的引用。</returns>
<param name="value">要追加的值。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值会超过它的最大容量。 </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int16)">
<summary>在此实例的结尾追加指定的 16 位带符号整数的字符串表示形式。</summary>
<returns>完成追加操作后对此实例的引用。</returns>
<param name="value">要追加的值。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值会超过它的最大容量。 </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int32)">
<summary>在此实例的结尾追加指定的 32 位带符号整数的字符串表示形式。</summary>
<returns>完成追加操作后对此实例的引用。</returns>
<param name="value">要追加的值。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值会超过它的最大容量。 </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int64)">
<summary>在此实例的结尾追加指定的 64 位带符号整数的字符串表示形式。</summary>
<returns>完成追加操作后对此实例的引用。</returns>
<param name="value">要追加的值。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值会超过它的最大容量。 </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Object)">
<summary>在此实例的结尾追加指定对象的字符串表示形式。</summary>
<returns>完成追加操作后对此实例的引用。</returns>
<param name="value">要追加的对象。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值会超过它的最大容量。 </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.SByte)">
<summary>在此实例的结尾追加指定的 8 位带符号整数的字符串表示形式。</summary>
<returns>完成追加操作后对此实例的引用。</returns>
<param name="value">要追加的值。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值会超过它的最大容量。 </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Single)">
<summary>在此实例的结尾追加指定的单精度浮点数的字符串表示形式。</summary>
<returns>完成追加操作后对此实例的引用。</returns>
<param name="value">要追加的值。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值会超过它的最大容量。 </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.String)">
<summary>在此实例的结尾追加指定字符串的副本。</summary>
<returns>完成追加操作后对此实例的引用。</returns>
<param name="value">要追加的 <see cref="T:System.String"/>。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值会超过它的最大容量。 </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)">
<summary>在此实例的结尾追加指定子字符串的副本。</summary>
<returns>完成追加操作后对此实例的引用。</returns>
<param name="value">包含要追加的子字符串的 <see cref="T:System.String"/>。 </param>
<param name="startIndex"><paramref name="value"/> 中子字符串开始的位置。 </param>
<param name="count"><paramref name="value"/> 中要追加的字符数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null，并且 <paramref name="startIndex"/> 和 <paramref name="count"/> 不为零。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="count"/> 小于零。-或- <paramref name="startIndex"/> 小于零。-或- <paramref name="startIndex"/> + <paramref name="count"/> 大于 <paramref name="value"/> 的长度。-或- 增大此实例的值会超过它的最大容量。 </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt16)">
<summary>在此实例的结尾追加指定的 16 位无符号整数的字符串表示形式。</summary>
<returns>完成追加操作后对此实例的引用。</returns>
<param name="value">要追加的值。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值会超过它的最大容量。 </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt32)">
<summary>在此实例的结尾追加指定的 32 位无符号整数的字符串表示形式。</summary>
<returns>完成追加操作后对此实例的引用。</returns>
<param name="value">要追加的值。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值会超过它的最大容量。 </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt64)">
<summary>在此实例的结尾追加指定的 64 位无符号整数的字符串表示形式。</summary>
<returns>完成追加操作后对此实例的引用。</returns>
<param name="value">要追加的值。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值会超过它的最大容量。 </exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])">
<summary>向此实例追加通过处理组合格式字符串（包含零个或更多格式项）而返回的字符串。每个格式项都使用指定的格式提供程序由参数数组中相应参数的字符串表示形式替换。</summary>
<returns>完成追加操作后对此实例的引用。完成追加操作后，此实例将包含执行该操作之前已存在的任何数据，并且有一个 <paramref name="format"/> 的副本作为后缀，其中每个格式项都由相应对象参数的字符串表示形式替换。</returns>
<param name="provider">一个提供区域性特定的格式设置信息的对象。 </param>
<param name="format">复合格式字符串（请参阅“备注”）。 </param>
<param name="args">要设置其格式的对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="format"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="format"/> 无效。-或- 格式项的索引小于 0（零）或大于等于 <paramref name="args"/> 数组的长度。 </exception>
<exception cref="T:System.ArgumentOutOfRangeException">展开的字符串的长度将超过此实例的最大容量。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])">
<summary>向此实例追加通过处理组合格式字符串（包含零个或更多格式项）而返回的字符串。每个格式项都由参数数组中相应参数的字符串表示形式替换。</summary>
<returns>对追加了 <paramref name="format"/> 的此实例的引用。<paramref name="format"/> 中的每个格式项都由相应的对象参数的字符串表示形式替换。</returns>
<param name="format">复合格式字符串（请参阅“备注”）。 </param>
<param name="args">要设置其格式的对象的数组。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="format"/> 或 <paramref name="args"/> 为 null。 </exception>
      <exception cref="T:System.FormatException">
<paramref name="format"/> 无效。-或- 格式项的索引小于 0（零）或大于等于 <paramref name="args"/> 数组的长度。</exception>
<exception cref="T:System.ArgumentOutOfRangeException">展开的字符串的长度将超过此实例的最大容量。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendLine">
<summary>将默认的行终止符追加到当前 <see cref="T:System.Text.StringBuilder"/> 对象的末尾。</summary>
<returns>完成追加操作后对此实例的引用。</returns>
<exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值会超过它的最大容量。 </exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendLine(System.String)">
<summary>将指定字符串的副本和默认的行终止符追加到当前 <see cref="T:System.Text.StringBuilder"/> 对象的末尾。</summary>
<returns>完成追加操作后对此实例的引用。</returns>
<param name="value">要追加的 <see cref="T:System.String"/>。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值会超过它的最大容量。 </exception>
    </member>
    <member name="P:System.Text.StringBuilder.Capacity">
<summary>获取或设置可包含在当前实例所分配的内存中的最大字符数。</summary>
<returns>可包含在当前实例所分配的内存中的最大字符数。</returns>
<exception cref="T:System.ArgumentOutOfRangeException">为设置操作指定的值小于此实例的当前长度。-或- 为设置操作指定的值大于最大容量。 </exception>
    </member>
    <member name="P:System.Text.StringBuilder.Chars(System.Int32)">
<summary>获取或设置此实例中指定字符位置处的字符。</summary>
<returns><paramref name="index"/> 位置处的 Unicode 字符。</returns>
<param name="index">字符的位置。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
在设置一个字符时 <paramref name="index"/> 在此实例的范围之外。 </exception>
      <exception cref="T:System.IndexOutOfRangeException">
在获取一个字符时 <paramref name="index"/> 在此实例的范围之外。 </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Clear">
<summary>从当前 <see cref="T:System.Text.StringBuilder"/> 实例中移除所有字符。</summary>
<returns>其 <see cref="P:System.Text.StringBuilder.Length"/> 为 0（零）的对象。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.EnsureCapacity(System.Int32)">
<summary>确保 <see cref="T:System.Text.StringBuilder"/> 的此实例的容量至少是指定值。</summary>
<returns>此实例的新容量。</returns>
<param name="capacity">要确保的最小容量。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="capacity"/> 小于零。-或- 增大此实例的值会超过它的最大容量。 </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Equals(System.Text.StringBuilder)">
<summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
<returns>如果此实例和 <paramref name="sb"/> 具有相等的字符串、最大容量和 <see cref="P:System.Text.StringBuilder.Capacity"/> 值，则为 true；否则，为 false。</returns>
<param name="sb">要与此实例比较的对象或 null。 </param>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[])">
<summary>将指定的 Unicode 字符数组的字符串表示形式插入到此实例中的指定字符位置。</summary>
<returns>完成插入操作后对此实例的引用。</returns>
<param name="index">此实例中开始插入的位置。 </param>
<param name="value">要插入的字符数组。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零或大于此实例的长度。-或- 增大此实例的值会超过它的最大容量。 </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)">
<summary>将指定的 Unicode 字符子数组的字符串表示形式插入到此实例中的指定字符位置。</summary>
<returns>完成插入操作后对此实例的引用。</returns>
<param name="index">此实例中开始插入的位置。 </param>
<param name="value">字符数组。 </param>
<param name="startIndex"><paramref name="value"/> 内的起始索引。 </param>
<param name="charCount">要插入的字符数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="value"/> 为 null，并且 <paramref name="startIndex"/> 和 <paramref name="charCount"/> 不为零。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/>、<paramref name="startIndex"/> 或 <paramref name="charCount"/> 小于零。-或- <paramref name="index"/> 大于此实例的长度。-或- <paramref name="startIndex"/> 加上 <paramref name="charCount"/> 不是 <paramref name="value"/> 中的位置。-或- 增大此实例的值会超过它的最大容量。 </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String)">
<summary>将字符串插入到此实例中的指定字符位置。</summary>
<returns>完成插入操作后对此实例的引用。</returns>
<param name="index">此实例中开始插入的位置。 </param>
<param name="value">要插入的字符串。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零或大于此实例的当前长度。-或- 该 <see cref="T:System.Text.StringBuilder"/> 对象的当前长度加上 <paramref name="value"/> 的长度将超过此实例的最大容量。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)">
<summary>将指定字符串的一个或更多副本插入到此实例中的指定字符位置。</summary>
<returns>完成插入后对此实例的引用。</returns>
<param name="index">此实例中开始插入的位置。 </param>
<param name="value">要插入的字符串。 </param>
<param name="count">插入 <paramref name="value"/> 的次数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零或大于此实例的当前长度。-或- <paramref name="count"/> 小于零。 </exception>
<exception cref="T:System.OutOfMemoryException">此 <see cref="T:System.Text.StringBuilder"/> 对象的当前长度加上 <paramref name="value"/> 的长度乘以 <paramref name="count"/> 的值超过此实例的最大容量。</exception>
    </member>
    <member name="P:System.Text.StringBuilder.Length">
<summary>获取或设置当前 <see cref="T:System.Text.StringBuilder"/> 对象的长度。</summary>
<returns>此实例的长度。</returns>
<exception cref="T:System.ArgumentOutOfRangeException">为设置操作指定的值小于零或大于此实例的最大容量。 </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)">
<summary>将指定范围的字符从此实例中移除。</summary>
<returns>切除操作完成后对此实例的引用。</returns>
<param name="startIndex">此实例中开始移除操作的从零开始的位置。 </param>
<param name="length">要移除的字符数。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">如果 <paramref name="startIndex"/> 或 <paramref name="length"/> 小于零，或者 <paramref name="startIndex"/>+<paramref name="length"/> 大于此实例的长度。 </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char)">
<summary>将此实例中所有的指定字符替换为其他指定字符。</summary>
<returns>对此实例的引用，其中 <paramref name="oldChar"/> 被 <paramref name="newChar"/> 替换。</returns>
<param name="oldChar">要替换的字符。 </param>
<param name="newChar">替换 <paramref name="oldChar"/> 的字符。 </param>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)">
<summary>将此实例的子字符串中所有指定字符的匹配项替换为其他指定字符。</summary>
<returns>对此实例的引用，其中从 <paramref name="startIndex"/> 到 <paramref name="startIndex"/> + <paramref name="count"/> -1 范围内的 <paramref name="oldChar"/> 被 <paramref name="newChar"/> 替换。</returns>
<param name="oldChar">要替换的字符。 </param>
<param name="newChar">替换 <paramref name="oldChar"/> 的字符。 </param>
<param name="startIndex">此实例中子字符串开始的位置。 </param>
<param name="count">子字符串的长度。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> + <paramref name="count"/> 大于此实例值的长度。-或- <paramref name="startIndex"/> 或 <paramref name="count"/> 小于零。 </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.String,System.String)">
<summary>将此实例中所有指定字符串的匹配项替换为其他指定字符串。</summary>
<returns>对此实例的引用，其中 <paramref name="oldValue"/> 的所有实例被 <paramref name="newValue"/> 替换。</returns>
<param name="oldValue">要替换的字符串。 </param>
<param name="newValue">替换 <paramref name="oldValue"/> 的字符串或 null。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="oldValue"/> 为 null。 </exception>
<exception cref="T:System.ArgumentException"><paramref name="oldvalue"/> 的长度为零。 </exception>
<exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值会超过它的最大容量。 </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)">
<summary>将此实例的子字符串中所有指定字符串的匹配项替换为其他指定字符串。</summary>
<returns>对此实例的引用，其中从 <paramref name="startIndex"/> 到 <paramref name="startIndex"/>+<paramref name="count"/>- 1 的范围内 <paramref name="oldValue"/> 的所有实例被 <paramref name="newValue"/> 替换。</returns>
<param name="oldValue">要替换的字符串。 </param>
<param name="newValue">替换 <paramref name="oldValue"/> 的字符串或 null。 </param>
<param name="startIndex">此实例中子字符串开始的位置。 </param>
<param name="count">子字符串的长度。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="oldValue"/> 为 null。 </exception>
<exception cref="T:System.ArgumentException"><paramref name="oldvalue"/> 的长度为零。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 或 <paramref name="count"/> 小于零。-或- <paramref name="startIndex"/> 加上 <paramref name="count"/> 之和指示一个不在此实例内的字符位置。-或- 增大此实例的值会超过它的最大容量。 </exception>
    </member>
    <member name="M:System.Text.StringBuilder.ToString">
<summary>将此实例的值转换为 <see cref="T:System.String"/>。</summary>
<returns>其值与此实例相同的字符串。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.ToString(System.Int32,System.Int32)">
<summary>将此实例中子字符串的值转换为 <see cref="T:System.String"/>。</summary>
<returns>一个字符串，其值与此实例的指定子字符串相同。</returns>
<param name="startIndex">此实例内子字符串的起始位置。 </param>
<param name="length">子字符串的长度。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startIndex"/> 或 <paramref name="length"/> 小于零。-或- <paramref name="startIndex"/> 与 <paramref name="length"/> 的和大于当前实例的长度。 </exception>
    </member>
    <member name="T:System.Text.UnicodeEncoding">
<summary>表示 Unicode 字符的 UTF-16 编码。</summary>
    </member>
    <member name="M:System.Text.UnicodeEncoding.#ctor">
<summary>初始化 <see cref="T:System.Text.UnicodeEncoding"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)">
<summary>初始化 <see cref="T:System.Text.UnicodeEncoding"/> 类的新实例。参数指定是否使用 Big-Endian 字节顺序以及是否提供 Unicode 字节顺序标记。</summary>
<param name="bigEndian">如果为 true；则使用 Big-endian 字节顺序（从最高有效字节开始）；如果为 false，则使用 Little-endian 字节顺序（从最低有效字节开始）。 </param>
<param name="byteOrderMark">如果为 true，则指定提供 Unicode 字节顺序标记；否则为 false。 </param>
    </member>
    <member name="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
<summary>初始化 <see cref="T:System.Text.UnicodeEncoding"/> 类的新实例。参数指定是否使用 Big-Endian 字节顺序，是否提供 Unicode 字节顺序标记，以及当检测到无效编码时是否引发异常。</summary>
<param name="bigEndian">如果为 true，则使用 Big-endian 字节顺序（从最高有效字节开始）；如果为 false，则使用 Little-endian 字节顺序（从最低有效字节开始）。 </param>
<param name="byteOrderMark">如果为 true，则指定提供 Unicode 字节顺序标记；否则为 false。 </param>
<param name="throwOnInvalidBytes">如果为 true，则指定在检测到无效的编码时应当引发异常；否则为 false。 </param>
    </member>
    <member name="M:System.Text.UnicodeEncoding.Equals(System.Object)">
<summary>确定指定的 <see cref="T:System.Object"/> 是否等于当前的 <see cref="T:System.Text.UnicodeEncoding"/> 对象。</summary>
<returns>如果 <paramref name="value"/> 是 <see cref="T:System.Text.UnicodeEncoding"/> 的一个实例并且等于当前对象，则为 true；否则为 false。</returns>
<param name="value">将与当前对象进行比较的 <see cref="T:System.Object"/>。 </param>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
<summary>计算对指定字符数组中的一组字符进行编码时产生的字节数。</summary>
<returns>对指定字符进行编码后生成的字节数。</returns>
<param name="chars">包含要编码的字符集的字符数组。 </param>
<param name="index">第一个要编码的字符的从零开始的索引。 </param>
<param name="count">要编码的字符数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="chars"/> 为 null (Nothing)。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 或 <paramref name="count"/> 小于零。-或- <paramref name="index"/> 和 <paramref name="count"/> 不表示 <paramref name="chars"/> 中的有效范围。-或- 产生的字节数超过了作为一个整数返回时允许的最大字节数。 </exception>
<exception cref="T:System.ArgumentException">启用了错误检测，检测到 <paramref name="chars"/> 包含无效字符序列。 </exception>
<exception cref="T:System.Text.EncoderFallbackException">发生回退（请参阅“了解编码”以获得更详细的解释）。</exception>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
<summary>计算对指定字符串中的字符进行编码时产生的字节数。</summary>
<returns>对指定字符进行编码后生成的字节数。</returns>
<param name="s">包含要编码的字符集的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null (Nothing)。 </exception>
<exception cref="T:System.ArgumentOutOfRangeException">产生的字节数超过了作为一个整数返回时允许的最大字节数。 </exception>
<exception cref="T:System.ArgumentException">启用了错误检测，检测到 <paramref name="s"/> 包含无效字符序列。 </exception>
<exception cref="T:System.Text.EncoderFallbackException">发生回退（请参阅“了解编码”以获得更详细的解释）。</exception>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
<summary>[SECURITY CRITICAL] 将从指定的字符指针开始的一组字符编码为一个字节序列，并从指定的字节指针开始存储该字节序列。</summary>
<returns>在由 <paramref name="bytes"/> 参数指示的位置处写入的实际字节数。</returns>
<param name="chars">指向第一个要编码的字符的指针。 </param>
<param name="charCount">要编码的字符数。 </param>
<param name="bytes">一个指针，指向开始写入所产生的字节序列的位置。 </param>
<param name="byteCount">要写入的最大字节数。 </param>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
<summary>将指定字符数组中的一组字符编码到指定的字节数组中。</summary>
<returns>写入 <paramref name="bytes"/> 的实际字节数。</returns>
<param name="chars">包含要编码的字符集的字符数组。 </param>
<param name="charIndex">第一个要编码的字符的从零开始的索引。 </param>
<param name="charCount">要编码的字符数。 </param>
<param name="bytes">要包含所产生的字节序列的字节数组。 </param>
<param name="byteIndex">开始写入所产生的字节序列的从零开始的索引。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="chars"/> 为 null (Nothing)。-或- <paramref name="bytes"/> 为 null (Nothing)。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="charIndex"/> 或 <paramref name="charCount"/> 或 <paramref name="byteIndex"/> 小于零。-或- <paramref name="charIndex"/> 和 <paramref name="charCount"/> 不表示 <paramref name="chars"/> 中的有效范围。-或- <paramref name="byteIndex"/> 不是 <paramref name="bytes"/> 中的有效索引。 </exception>
<exception cref="T:System.ArgumentException">启用了错误检测，检测到 <paramref name="chars"/> 包含无效字符序列。-或- <paramref name="bytes"/> 中从 <paramref name="byteIndex"/> 到数组结尾没有足够的容量来容纳所产生的字节。 </exception>
<exception cref="T:System.Text.EncoderFallbackException">发生回退（请参阅“了解编码”以获得更详细的解释）。</exception>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
<summary>将指定 <see cref="T:System.String"/> 中的一组字符编码到指定的字节数组中。</summary>
<returns>写入 <paramref name="bytes"/> 的实际字节数。</returns>
<param name="s">包含要编码的字符集的 <see cref="T:System.String"/>。 </param>
<param name="charIndex">第一个要编码的字符的从零开始的索引。 </param>
<param name="charCount">要编码的字符数。 </param>
<param name="bytes">要包含所产生的字节序列的字节数组。 </param>
<param name="byteIndex">开始写入所产生的字节序列的从零开始的索引。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null (Nothing)。-或- <paramref name="bytes"/> 为 null (Nothing)。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="charIndex"/> 或 <paramref name="charCount"/> 或 <paramref name="byteIndex"/> 小于零。-或- <paramref name="charIndex"/> 和 <paramref name="charCount"/> 不表示 <paramref name="chars"/> 中的有效范围。-或- <paramref name="byteIndex"/> 不是 <paramref name="bytes"/> 中的有效索引。 </exception>
<exception cref="T:System.ArgumentException">启用了错误检测，检测到 <paramref name="s"/> 包含无效字符序列。-或- <paramref name="bytes"/> 中从 <paramref name="byteIndex"/> 到数组结尾没有足够的容量来容纳所产生的字节。 </exception>
<exception cref="T:System.Text.EncoderFallbackException">发生回退（请参阅“了解编码”以获得更详细的解释）。</exception>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
<summary>计算对指定字节数组中的一个字节序列进行解码所产生的字符数。</summary>
<returns>对指定字节序列进行解码所产生的字符数。</returns>
<param name="bytes">包含要解码的字节序列的字节数组。 </param>
<param name="index">要解码的第一个字节的从零开始的索引。 </param>
<param name="count">要解码的字节数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="bytes"/> 为 null (Nothing)。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 或 <paramref name="count"/> 小于零。-或- <paramref name="index"/> 和 <paramref name="count"/> 不表示 <paramref name="bytes"/> 中的有效范围。-或- 产生的字节数超过了作为一个整数返回时允许的最大字节数。 </exception>
<exception cref="T:System.ArgumentException">启用了错误检测，检测到 <paramref name="bytes"/> 包含无效字节序列。 </exception>
<exception cref="T:System.Text.DecoderFallbackException">发生回退（请参阅“了解编码”以获得更详细的解释）。</exception>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
<summary>将指定字节数组中的一个字节序列解码为指定的字符数组。</summary>
<returns>写入 <paramref name="chars"/> 的实际字符数。</returns>
<param name="bytes">包含要解码的字节序列的字节数组。 </param>
<param name="byteIndex">要解码的第一个字节的从零开始的索引。 </param>
<param name="byteCount">要解码的字节数。 </param>
<param name="chars">要用于包含所产生的字符集的字符数组。 </param>
<param name="charIndex">开始写入所产生的一组字符的从零开始的索引。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="bytes"/> 为 null (Nothing)。-或- <paramref name="chars"/> 为 null (Nothing)。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="byteIndex"/> 或 <paramref name="byteCount"/> 或 <paramref name="charIndex"/> 小于零。-或- <paramref name="byteindex"/> 和 <paramref name="byteCount"/> 不表示 <paramref name="bytes"/> 中的有效范围。-或- <paramref name="charIndex"/> 不是 <paramref name="chars"/> 中的有效索引。 </exception>
<exception cref="T:System.ArgumentException">启用了错误检测，检测到 <paramref name="bytes"/> 包含无效字节序列。-或- <paramref name="chars"/> 中从 <paramref name="charIndex"/> 到数组结尾没有足够的容量来容纳所产生的字符。 </exception>
<exception cref="T:System.Text.DecoderFallbackException">发生回退（请参阅“了解编码”以获得更详细的解释）。</exception>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetDecoder">
<summary>获取可以将 UTF-16 编码的字节序列转换为 Unicode 字符序列的解码器。</summary>
<returns><see cref="T:System.Text.Decoder"/> 用于将 UTF-16 编码的字节序列转换为 Unicode 字符序列。</returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetEncoder">
<summary>获取可将 Unicode 字符序列转换为 UTF-16 编码的字节序列的编码器。</summary>
<returns>可将 Unicode 字符序列转换为 UTF-16 编码字节序列的对象。</returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetHashCode">
<summary>返回当前实例的哈希代码。</summary>
<returns>当前 <see cref="T:System.Text.UnicodeEncoding"/> 对象的哈希代码。</returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
<summary>计算对指定数目的字符进行编码时产生的最大字节数。</summary>
<returns>对指定数目的字符进行编码所产生的最大字节数。</returns>
<param name="charCount">要编码的字符数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="charCount"/> 小于零。-或- 产生的字节数超过了作为一个整数返回时允许的最大字节数。 </exception>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
<summary>计算对指定数目的字节进行解码时产生的最大字符数。</summary>
<returns>对指定数目的字节进行解码时所产生的最大字符数。</returns>
<param name="byteCount">要解码的字节数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="byteCount"/> 小于零。-或- 产生的字节数超过了作为一个整数返回时允许的最大字节数。 </exception>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetPreamble">
<summary>返回用 UTF-16 格式编码的 Unicode 字节顺序标记。</summary>
<returns>如果此实例的构造函数请求一个字节顺序标记，则将返回一个包含 Unicode 字节顺序标记的字节数组。否则，此方法将返回一个长度为零的字节数组。</returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
<summary>将字节数组中某个范围的字节解码为一个字符串。</summary>
<returns>包含指定字节序列解码结果的字符串对象。</returns>
<param name="bytes">包含要解码的字节序列的字节数组。 </param>
<param name="index">要解码的第一个字节的从零开始的索引。 </param>
<param name="count">要解码的字节数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="bytes"/> 为 null (Nothing)。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 或 <paramref name="count"/> 小于零。-或- <paramref name="index"/> 和 <paramref name="count"/> 不表示 <paramref name="bytes"/> 中的有效范围。 </exception>
<exception cref="T:System.ArgumentException">启用了错误检测，检测到 <paramref name="bytes"/> 包含无效字节序列。 </exception>
<exception cref="T:System.Text.DecoderFallbackException">发生回退（请参阅“了解编码”以获得更详细的解释）。</exception>
    </member>
    <member name="T:System.Text.UTF8Encoding">
<summary>表示 Unicode 字符的 UTF-8 编码。</summary>
    </member>
    <member name="M:System.Text.UTF8Encoding.#ctor">
<summary>初始化 <see cref="T:System.Text.UTF8Encoding"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.UTF8Encoding.#ctor(System.Boolean)">
<summary>初始化 <see cref="T:System.Text.UTF8Encoding"/> 类的新实例。参数指定是否提供一个 Unicode 字节顺序标记。</summary>
<param name="encoderShouldEmitUTF8Identifier">如果为 true，则指定提供 Unicode 字节顺序标记；否则为 false。 </param>
    </member>
    <member name="M:System.Text.UTF8Encoding.#ctor(System.Boolean,System.Boolean)">
<summary>初始化 <see cref="T:System.Text.UTF8Encoding"/> 类的新实例。参数指定是否提供 Unicode 字节顺序标记，以及是否在检测到无效的编码时引发异常。</summary>
<param name="encoderShouldEmitUTF8Identifier">如果为 true，则指定提供 Unicode 字节顺序标记；否则为 false。 </param>
<param name="throwOnInvalidBytes">如果为 true，则指定在检测到无效的编码时应当引发异常；否则为 false。 </param>
    </member>
    <member name="M:System.Text.UTF8Encoding.Equals(System.Object)">
<summary>确定指定的 <see cref="T:System.Object"/> 是否等于当前的 <see cref="T:System.Text.UTF8Encoding"/> 对象。</summary>
<returns>如果 <paramref name="value"/> 是 <see cref="T:System.Text.UTF8Encoding"/> 的一个实例并且等于当前对象，则为 true；否则为 false。</returns>
<param name="value">与当前实例进行比较的 <see cref="T:System.Object"/>。 </param>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
<summary>计算对指定字符数组中的一组字符进行编码时将产生的字节数。</summary>
<returns>对指定字符进行编码后生成的字节数。</returns>
<param name="chars">包含要编码的字符集的字符数组。 </param>
<param name="index">第一个要编码的字符的从零开始的索引。 </param>
<param name="count">要编码的字符数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="chars"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 或 <paramref name="count"/> 小于零。-或- <paramref name="index"/> 和 <paramref name="count"/> 不表示 <paramref name="chars"/> 中的有效范围。-或- 产生的字节数超过了作为一个整数返回时允许的最大字节数。 </exception>
<exception cref="T:System.ArgumentException">启用了错误检测，检测到 <paramref name="chars"/> 包含无效字符序列。 </exception>
<exception cref="T:System.Text.EncoderFallbackException">发生回退（请参阅“了解编码”以获得完整的解释）。</exception>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetByteCount(System.String)">
<summary>计算对指定 <see cref="T:System.String"/> 中的字符进行编码将产生的字节数。</summary>
<returns>对指定字符进行编码将产生的字节数。</returns>
<param name="chars">包含要编码的字符集的 <see cref="T:System.String"/>。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="chars"/> 为 null。 </exception>
<exception cref="T:System.ArgumentOutOfRangeException">产生的字节数超过了作为一个整数返回时允许的最大字节数。 </exception>
<exception cref="T:System.ArgumentException">启用了错误检测，检测到 <paramref name="chars"/> 包含无效字符序列。 </exception>
<exception cref="T:System.Text.EncoderFallbackException">发生回退（请参阅“了解编码”以获得完整的解释）。</exception>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
<summary>[SECURITY CRITICAL] 将从指定的字符指针开始的一组字符编码为一个字节序列，并从指定的字节指针开始存储该字节序列。</summary>
<returns>在由 <paramref name="bytes"/> 指示的位置处写入的实际字节数。</returns>
<param name="chars">指向第一个要编码的字符的指针。 </param>
<param name="charCount">要编码的字符数。 </param>
<param name="bytes">一个指针，指向开始写入所产生的字节序列的位置。 </param>
<param name="byteCount">要写入的最大字节数。 </param>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
<summary>将指定字符数组中的一组字符编码到指定的字节数组中。</summary>
<returns>写入 <paramref name="bytes"/> 的实际字节数。</returns>
<param name="chars">包含要编码的字符集的字符数组。 </param>
<param name="charIndex">第一个要编码的字符的从零开始的索引。 </param>
<param name="charCount">要编码的字符数。 </param>
<param name="bytes">要包含所产生的字节序列的字节数组。 </param>
<param name="byteIndex">开始写入所产生的字节序列的从零开始的索引。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="chars"/> 为 null。-或- <paramref name="bytes"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="charIndex"/> 或 <paramref name="charCount"/> 或 <paramref name="byteIndex"/> 小于零。-或- <paramref name="charIndex"/> 和 <paramref name="charCount"/> 不表示 <paramref name="chars"/> 中的有效范围。-或- <paramref name="byteIndex"/> 不是 <paramref name="bytes"/> 中的有效索引。 </exception>
<exception cref="T:System.ArgumentException">启用了错误检测，检测到 <paramref name="chars"/> 包含无效字符序列。-或- <paramref name="bytes"/> 中从 <paramref name="byteIndex"/> 到数组结尾没有足够的容量来容纳所产生的字节。 </exception>
<exception cref="T:System.Text.EncoderFallbackException">发生回退（请参阅“了解编码”以获得完整的解释）。</exception>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
<summary>将指定字符串中的一组字符编码到指定的字节数组中。</summary>
<returns>写入 <paramref name="bytes"/> 的实际字节数。</returns>
<param name="s">包含要编码的字符集的字符串。 </param>
<param name="charIndex">第一个要编码的字符的从零开始的索引。 </param>
<param name="charCount">要编码的字符数。 </param>
<param name="bytes">要包含所产生的字节序列的字节数组。 </param>
<param name="byteIndex">开始写入所产生的字节序列的从零开始的索引。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="s"/> 为 null。-或- <paramref name="bytes"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="charIndex"/> 或 <paramref name="charCount"/> 或 <paramref name="byteIndex"/> 小于零。-或- <paramref name="charIndex"/> 和 <paramref name="charCount"/> 不表示 <paramref name="chars"/> 中的有效范围。-或- <paramref name="byteIndex"/> 不是 <paramref name="bytes"/> 中的有效索引。 </exception>
<exception cref="T:System.ArgumentException">启用了错误检测，检测到 <paramref name="s"/> 包含无效字符序列。-或- <paramref name="bytes"/> 中从 <paramref name="byteIndex"/> 到数组结尾没有足够的容量来容纳所产生的字节。 </exception>
<exception cref="T:System.Text.EncoderFallbackException">发生回退（请参阅“了解编码”以获得完整的解释）。</exception>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
<summary>计算对指定字节数组中的一个字节序列进行解码所产生的字符数。</summary>
<returns>对指定字节序列进行解码所产生的字符数。</returns>
<param name="bytes">包含要解码的字节序列的字节数组。 </param>
<param name="index">要解码的第一个字节的从零开始的索引。 </param>
<param name="count">要解码的字节数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="bytes"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 或 <paramref name="count"/> 小于零。-或- <paramref name="index"/> 和 <paramref name="count"/> 不表示 <paramref name="bytes"/> 中的有效范围。-或- 产生的字节数超过了作为一个整数返回时允许的最大字节数。 </exception>
<exception cref="T:System.ArgumentException">启用了错误检测，检测到 <paramref name="bytes"/> 包含无效字节序列。 </exception>
<exception cref="T:System.Text.DecoderFallbackException">发生回退（请参阅“了解编码”以获得完整的解释）。</exception>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
<summary>将指定字节数组中的一个字节序列解码为指定的字符数组。</summary>
<returns>写入 <paramref name="chars"/> 的实际字符数。</returns>
<param name="bytes">包含要解码的字节序列的字节数组。 </param>
<param name="byteIndex">要解码的第一个字节的从零开始的索引。 </param>
<param name="byteCount">要解码的字节数。 </param>
<param name="chars">要用于包含所产生的字符集的字符数组。 </param>
<param name="charIndex">开始写入所产生的一组字符的从零开始的索引。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="bytes"/> 为 null。-或- <paramref name="chars"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="byteIndex"/> 或 <paramref name="byteCount"/> 或 <paramref name="charIndex"/> 小于零。-或- <paramref name="byteindex"/> 和 <paramref name="byteCount"/> 不表示 <paramref name="bytes"/> 中的有效范围。-或- <paramref name="charIndex"/> 不是 <paramref name="chars"/> 中的有效索引。 </exception>
<exception cref="T:System.ArgumentException">启用了错误检测，检测到 <paramref name="bytes"/> 包含无效字节序列。-或- <paramref name="chars"/> 中从 <paramref name="charIndex"/> 到数组结尾没有足够的容量来容纳所产生的字符。 </exception>
<exception cref="T:System.Text.DecoderFallbackException">发生回退（请参阅“了解编码”以获得完整的解释）。</exception>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetDecoder">
<summary>获取可以将 UTF-8 编码的字节序列转换为 Unicode 字符序列的解码器。</summary>
<returns><see cref="T:System.Text.Decoder"/> 用于将 UTF-8 编码的字节序列转换为 Unicode 字符序列。</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetEncoder">
<summary>获取可将 Unicode 字符序列转换为 UTF-8 编码的字节序列的编码器。</summary>
<returns>可将 Unicode 字符序列转换为 UTF-8 编码字节序列的对象。</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetHashCode">
<summary>返回当前实例的哈希代码。</summary>
<returns>当前实例的哈希代码。</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)">
<summary>计算对指定数目的字符进行编码时产生的最大字节数。</summary>
<returns>对指定数目的字符进行编码所产生的最大字节数。</returns>
<param name="charCount">要编码的字符数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="charCount"/> 小于零。-或- 产生的字节数超过了作为一个整数返回时允许的最大字节数。 </exception>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)">
<summary>计算对指定数目的字节进行解码时产生的最大字符数。</summary>
<returns>对指定数目的字节进行解码时所产生的最大字符数。</returns>
<param name="byteCount">要解码的字节数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="byteCount"/> 小于零。-或- 产生的字节数超过了作为一个整数返回时允许的最大字节数。 </exception>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetPreamble">
<summary>返回用 UTF-8 格式编码的 Unicode 字节顺序标记。</summary>
<returns>如果此实例的构造函数请求一个字节顺序标记，则将返回一个包含 Unicode 字节顺序标记的字节数组。否则，此方法将返回一个长度为零的字节数组。</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
<summary>将字节数组中某个范围的字节解码为一个字符串。</summary>
<returns>包含指定字节序列解码结果的字符串。</returns>
<param name="bytes">包含要解码的字节序列的字节数组。 </param>
<param name="index">要解码的第一个字节的从零开始的索引。 </param>
<param name="count">要解码的字节数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="bytes"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 或 <paramref name="count"/> 小于零。-或- <paramref name="index"/> 和 <paramref name="count"/> 不表示 <paramref name="bytes"/> 中的有效范围。 </exception>
<exception cref="T:System.ArgumentException">启用了错误检测，检测到 <paramref name="bytes"/> 包含无效字节序列。 </exception>
<exception cref="T:System.Text.DecoderFallbackException">发生回退（请参阅“了解编码”以获得完整的解释）。</exception>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetBytes(System.String)">
<summary>将指定的 <see cref="T:System.String"/> 中的所有字符编码为一个字节序列。</summary>
<returns>一个字节数组，包含对指定的字符集进行编码的结果。</returns>
<param name="s">包含要编码的字符的 <see cref="T:System.String"/>。 </param>
    </member>
    <member name="T:System.Threading.AutoResetEvent">
<summary>通知正在等待的线程已发生事件。无法继承此类。 </summary>
    </member>
    <member name="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
<summary>用一个指示是否将初始状态设置为收到信号的布尔值初始化 <see cref="T:System.Threading.AutoResetEvent"/> 类的新实例。</summary>
<param name="initialState">若要将初始状态设置为收到信号，则为 true；若要将初始状态设置为未收到信号，则为 false。 </param>
    </member>
    <member name="T:System.Threading.EventWaitHandle">
<summary>表示一个线程同步事件。</summary>
    </member>
    <member name="M:System.Threading.EventWaitHandle.Reset">
<summary>将事件状态设置为未收到信号状态，从而导致线程受阻。</summary>
<returns>如果该操作成功，则为 true；否则为 false。</returns>
<exception cref="T:System.ObjectDisposedException">以前在此 <see cref="T:System.Threading.EventWaitHandle"/> 上调用过 <see cref="M:System.Threading.EventWaitHandle.Close"/> 方法。</exception>
    </member>
    <member name="M:System.Threading.EventWaitHandle.Set">
<summary>将事件状态设置为收到信号状态，从而允许继续执行一个或多个等待线程。</summary>
<returns>如果该操作成功，则为 true；否则为 false。</returns>
<exception cref="T:System.ObjectDisposedException">以前在此 <see cref="T:System.Threading.EventWaitHandle"/> 上调用过 <see cref="M:System.Threading.EventWaitHandle.Close"/> 方法。</exception>
    </member>
    <member name="T:System.Threading.Interlocked">
<summary>为多个线程共享的变量提供原子操作。 </summary>
    </member>
    <member name="M:System.Threading.Interlocked.Add(System.Int32@,System.Int32)">
<summary>对两个 32 位整数进行求和并用和替换第一个整数，上述操作作为一个原子操作完成。</summary>
<returns>存储在 <paramref name="location1"/> 处的新值。</returns>
<param name="location1">一个变量，包含要求和的第一个值。两个值的和存储在 <paramref name="location1"/> 中。</param>
<param name="value">要添加到整数中的 <paramref name="location1"/> 位置的值。</param>
<exception cref="T:System.NullReferenceException"><paramref name="location1"/> 的地址为空指针。 </exception>
    </member>
    <member name="M:System.Threading.Interlocked.Add(System.Int64@,System.Int64)">
<summary>对两个 64 位整数进行求和并用和替换第一个整数，上述操作作为一个原子操作完成。</summary>
<returns>存储在 <paramref name="location1"/> 处的新值。</returns>
<param name="location1">一个变量，包含要求和的第一个值。两个值的和存储在 <paramref name="location1"/> 中。</param>
<param name="value">要添加到整数中的 <paramref name="location1"/> 位置的值。</param>
<exception cref="T:System.NullReferenceException"><paramref name="location1"/> 的地址为空指针。 </exception>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)">
<summary>比较两个 32 位带符号整数是否相等，如果相等，则替换其中一个值。</summary>
<returns><paramref name="location1"/> 中的原始值。</returns>
<param name="location1">其值将与 <paramref name="comparand"/> 进行比较并且可能被替换的目标。 </param>
<param name="value">比较结果相等时替换目标值的值。 </param>
<param name="comparand">与位于 <paramref name="location1"/> 处的值进行比较的值。 </param>
<exception cref="T:System.NullReferenceException"><paramref name="location1"/> 的地址为空指针。 </exception>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)">
<summary>比较两个 64 位带符号整数是否相等，如果相等，则替换其中一个值。</summary>
<returns><paramref name="location1"/> 中的原始值。</returns>
<param name="location1">其值将与 <paramref name="comparand"/> 进行比较并且可能被替换的目标。 </param>
<param name="value">比较结果相等时替换目标值的值。 </param>
<param name="comparand">与位于 <paramref name="location1"/> 处的值进行比较的值。 </param>
<exception cref="T:System.NullReferenceException"><paramref name="location1"/> 的地址为空指针。 </exception>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)">
<summary>比较两个对象是否相等，如果相等，则替换其中一个对象。</summary>
<returns><paramref name="location1"/> 中的原始值。</returns>
<param name="location1">其值与 <paramref name="comparand"/> 进行比较并且可能被替换的目标对象。 </param>
<param name="value">在比较结果相等时替换目标对象的对象。 </param>
<param name="comparand">与位于 <paramref name="location1"/> 处的对象进行比较的对象。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="location1"/> 的地址为空指针。 </exception>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)">
<summary>比较指定的引用类型 <paramref name="T"/> 的两个实例是否相等，如果相等，则替换其中一个。</summary>
<returns><paramref name="location1"/> 中的原始值。</returns>
<param name="location1">其值将与 <paramref name="comparand"/> 进行比较并且可能被替换的目标。这是一个引用参数（在 C# 中是 ref，在 Visual Basic 中是 ByRef）。 </param>
<param name="value">比较结果相等时替换目标值的值。 </param>
<param name="comparand">与位于 <paramref name="location1"/> 处的值进行比较的值。 </param>
<typeparam name="T">用于 <paramref name="location1"/>、<paramref name="value"/> 和 <paramref name="comparand"/> 的类型。此类型必须是引用类型。</typeparam>
<exception cref="T:System.NullReferenceException"><paramref name="location1"/> 的地址为空指针。 </exception>
    </member>
    <member name="M:System.Threading.Interlocked.Decrement(System.Int32@)">
<summary>递减指定的 32 位带符号整数变量并存储结果，并且上述操作作为一个原子操作完成。</summary>
<returns>递减的值。</returns>
<param name="location">其值要递减的变量。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="location"/> 的地址为空指针。 </exception>
    </member>
    <member name="M:System.Threading.Interlocked.Decrement(System.Int64@)">
<summary>递减指定的 64 位带符号整数变量并存储结果，并且上述操作作为一个原子操作完成。</summary>
<returns>递减的值。</returns>
<param name="location">其值要递减的变量。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="location"/> 的地址为空指针。 </exception>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.Int32@,System.Int32)">
<summary>将 32 位带符号整数设置为指定的值并返回原始值，上述操作作为一个原子操作完成。</summary>
<returns><paramref name="location1"/> 的原始值。</returns>
<param name="location1">要设置为指定值的变量。 </param>
<param name="value"><paramref name="location1"/> 参数被设置为的值。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="location1"/> 的地址为空指针。 </exception>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.Int64@,System.Int64)">
<summary>将 64 位带符号整数设置为指定的值并返回原始值，上述操作作为一个原子操作完成。</summary>
<returns><paramref name="location1"/> 的原始值。</returns>
<param name="location1">要设置为指定值的变量。 </param>
<param name="value"><paramref name="location1"/> 参数被设置为的值。 </param>
<exception cref="T:System.NullReferenceException"><paramref name="location1"/> 的地址为空指针。 </exception>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange``1(``0@,``0)">
<summary>以原子操作的形式，将指定类型 <paramref name="T"/> 的变量设置为指定的值并返回原始值。</summary>
<returns><paramref name="location1"/> 的原始值。</returns>
<param name="location1">要设置为指定值的变量。这是一个引用参数（在 C# 中是 ref，在 Visual Basic 中是 ByRef）。 </param>
<param name="value"><paramref name="location1"/> 参数被设置为的值。 </param>
<typeparam name="T">用于 <paramref name="location1"/> 和 <paramref name="value"/> 的类型。此类型必须是引用类型。</typeparam>
<exception cref="T:System.NullReferenceException"><paramref name="location1"/> 的地址为空指针。 </exception>
    </member>
    <member name="M:System.Threading.Interlocked.Increment(System.Int32@)">
<summary>递增指定的 32 位有符号变量并存储结果，并且上述操作作为一个原子操作完成。</summary>
<returns>递增的值。</returns>
<param name="location">其值要递增的变量。 </param>
<exception cref="T:System.NullReferenceException"><paramref name="location"/> 的地址为空指针。 </exception>
    </member>
    <member name="M:System.Threading.Interlocked.Increment(System.Int64@)">
<summary>递减指定的 64 位带符号整数变量并存储结果，并且上述操作作为一个原子操作完成。</summary>
<returns>递增的值。</returns>
<param name="location">其值要递增的变量。 </param>
<exception cref="T:System.NullReferenceException"><paramref name="location"/> 的地址为空指针。 </exception>
    </member>
    <member name="T:System.Threading.IOCompletionCallback">
<summary>[SECURITY CRITICAL] 当 I/O 操作在线程池上完成时接收错误代码、字节数和重叠值类型。</summary>
<param name="errorCode">错误代码。 </param>
<param name="numBytes">传输的字节数。 </param>
<param name="pOVERLAP"><see cref="T:System.Threading.NativeOverlapped"/>，表示指向本机重叠值类型的非托管指针。 </param>
    </member>
    <member name="T:System.Threading.ManualResetEvent">
<summary>通知一个或多个正在等待的线程已发生事件。无法继承此类。 </summary>
    </member>
    <member name="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)">
<summary>用一个指示是否将初始状态设置为收到信号的布尔值初始化 <see cref="T:System.Threading.ManualResetEvent"/> 类的新实例。</summary>
<param name="initialState">若要将初始状态设置为收到信号，则为 true；若要将初始状态设置为未收到信号，则为 false。 </param>
    </member>
    <member name="T:System.Threading.Monitor">
<summary>提供同步访问对象的机制。</summary>
    </member>
    <member name="M:System.Threading.Monitor.Enter(System.Object)">
<summary>在指定对象上获取排他锁。</summary>
<param name="obj">在其上获取监视器锁的对象。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="obj"/> 参数为 null。 </exception>
    </member>
    <member name="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
<summary>获取指定对象上的排他锁，并自动设置一个值，指示是否获取了该锁。</summary>
<param name="obj">要在其上等待的对象。 </param>
<param name="lockTaken">尝试获取锁的结果，通过引用传递。输入必须为 false。如果已获取锁，则输出为 true；否则输出为 false。即使在尝试获取锁的过程中发生异常，也会设置输出。</param>
<exception cref="T:System.ArgumentException">对 <paramref name="lockTaken"/> 的输入是 true。</exception>
<exception cref="T:System.ArgumentNullException"><paramref name="obj"/> 参数为 null。 </exception>
    </member>
    <member name="M:System.Threading.Monitor.Exit(System.Object)">
<summary>释放指定对象上的排他锁。</summary>
<param name="obj">在其上释放锁的对象。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="obj"/> 参数为 null。 </exception>
<exception cref="T:System.Threading.SynchronizationLockException">当前线程不拥有指定对象的锁。 </exception>
    </member>
    <member name="M:System.Threading.Monitor.IsEntered(System.Object)">
<summary>确定当前线程是否在指定对象上包含锁。 </summary>
<returns>如果当前线程在 <paramref name="obj"/> 上包含锁，则为 true；否则为 false。 </returns>
<param name="obj">要测试的对象。</param>
    </member>
    <member name="M:System.Threading.Monitor.Pulse(System.Object)">
<summary>通知等待队列中的线程锁定对象状态的更改。</summary>
<param name="obj">线程正在等待的对象。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="obj"/> 参数为 null。 </exception>
<exception cref="T:System.Threading.SynchronizationLockException">调用线程不拥有指定对象的锁。 </exception>
    </member>
    <member name="M:System.Threading.Monitor.PulseAll(System.Object)">
<summary>通知所有的等待线程对象状态的更改。</summary>
<param name="obj">发送脉冲的对象。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="obj"/> 参数为 null。 </exception>
<exception cref="T:System.Threading.SynchronizationLockException">调用线程不拥有指定对象的锁。 </exception>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object)">
<summary>试图获取指定对象的排他锁。</summary>
<returns>如果当前线程获取该锁，则为 true；否则为 false。</returns>
<param name="obj">在其上获取锁的对象。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="obj"/> 参数为 null。 </exception>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
<summary>尝试获取指定对象上的排他锁，并自动设置一个值，指示是否得到了该锁。</summary>
<param name="obj">在其上获取锁的对象。 </param>
<param name="lockTaken">尝试获取锁的结果，通过引用传递。输入必须为 false。如果已获取锁，则输出为 true；否则输出为 false。即使在尝试获取锁的过程中发生异常，也会设置输出。</param>
<exception cref="T:System.ArgumentException">对 <paramref name="lockTaken"/> 的输入是 true。</exception>
<exception cref="T:System.ArgumentNullException"><paramref name="obj"/> 参数为 null。 </exception>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
<summary>在指定的毫秒数内尝试获取指定对象上的排他锁。</summary>
<returns>如果当前线程获取该锁，则为 true；否则为 false。</returns>
<param name="obj">在其上获取锁的对象。 </param>
<param name="millisecondsTimeout">等待锁所需的毫秒数。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="obj"/> 参数为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="millisecondsTimeout"/> 为负且不等于 <see cref="F:System.Threading.Timeout.Infinite"/>。 </exception>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
<summary>在指定的毫秒数中，尝试获取指定对象上的排他锁，并自动设置一个值，指示是否得到了该锁。</summary>
<param name="obj">在其上获取锁的对象。 </param>
<param name="millisecondsTimeout">等待锁所需的毫秒数。 </param>
<param name="lockTaken">尝试获取锁的结果，通过引用传递。输入必须为 false。如果已获取锁，则输出为 true；否则输出为 false。即使在尝试获取锁的过程中发生异常，也会设置输出。</param>
<exception cref="T:System.ArgumentException">对 <paramref name="lockTaken"/> 的输入是 true。</exception>
<exception cref="T:System.ArgumentNullException"><paramref name="obj"/> 参数为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="millisecondsTimeout"/> 为负且不等于 <see cref="F:System.Threading.Timeout.Infinite"/>。 </exception>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
<summary>在指定的时间量内尝试获取指定对象上的排他锁。</summary>
<returns>如果当前线程在不阻止的情况下获取该锁，则为 true；否则为 false。</returns>
<param name="obj">在其上获取锁的对象。 </param>
<param name="timeout"><see cref="T:System.TimeSpan"/>，表示等待锁所需的时间量。值为 -1 毫秒表示指定无限期等待。</param>
<exception cref="T:System.ArgumentNullException"><paramref name="obj"/> 参数为 null。 </exception>
<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> 值（以毫秒为单位）为负且不等于 <see cref="F:System.Threading.Timeout.Infinite"/>（-1 毫秒），或者大于 <see cref="F:System.Int32.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
<summary>在指定的一段时间内，尝试获取指定对象上的排他锁，并自动设置一个值，指示是否得到了该锁。</summary>
<param name="obj">在其上获取锁的对象。 </param>
<param name="timeout">用于等待锁的时间。值为 -1 毫秒表示指定无限期等待。</param>
<param name="lockTaken">尝试获取锁的结果，通过引用传递。输入必须为 false。如果已获取锁，则输出为 true；否则输出为 false。即使在尝试获取锁的过程中发生异常，也会设置输出。</param>
<exception cref="T:System.ArgumentException">对 <paramref name="lockTaken"/> 的输入是 true。</exception>
<exception cref="T:System.ArgumentNullException"><paramref name="obj"/> 参数为 null。 </exception>
<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> 值（以毫秒为单位）为负且不等于 <see cref="F:System.Threading.Timeout.Infinite"/>（-1 毫秒），或者大于 <see cref="F:System.Int32.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object)">
<summary>释放对象上的锁并阻止当前线程，直到它重新获取该锁。</summary>
<returns>如果调用由于调用方重新获取了指定对象的锁而返回，则为 true。如果未重新获取该锁，则此方法不会返回。</returns>
<param name="obj">要在其上等待的对象。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="obj"/> 参数为 null。 </exception>
<exception cref="T:System.Threading.SynchronizationLockException">调用线程不拥有指定对象的锁。 </exception>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
<summary>释放对象上的锁并阻止当前线程，直到它重新获取该锁。如果指定的超时间隔已过，则线程进入就绪队列。</summary>
<returns>如果在指定的时间过期之前重新获取该锁，则为 true；如果在指定的时间过期之后重新获取该锁，则为 false。此方法只有在重新获取该锁后才会返回。</returns>
<param name="obj">要在其上等待的对象。 </param>
<param name="millisecondsTimeout">线程进入就绪队列之前等待的毫秒数。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="obj"/> 参数为 null。 </exception>
<exception cref="T:System.Threading.SynchronizationLockException">调用线程不拥有指定对象的锁。 </exception>
<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout"/> 参数值为负且不等于 <see cref="F:System.Threading.Timeout.Infinite"/>。 </exception>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
<summary>释放对象上的锁并阻止当前线程，直到它重新获取该锁。如果指定的超时间隔已过，则线程进入就绪队列。</summary>
<returns>如果在指定的时间过期之前重新获取该锁，则为 true；如果在指定的时间过期之后重新获取该锁，则为 false。此方法只有在重新获取该锁后才会返回。</returns>
<param name="obj">要在其上等待的对象。 </param>
<param name="timeout"><see cref="T:System.TimeSpan"/>，表示线程进入就绪队列之前等待的时间量。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="obj"/> 参数为 null。 </exception>
<exception cref="T:System.Threading.SynchronizationLockException">调用线程不拥有指定对象的锁。 </exception>
<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> 参数值（以毫秒为单位）为负且不表示 <see cref="F:System.Threading.Timeout.Infinite"/>（-1 毫秒），或者大于 <see cref="F:System.Int32.MaxValue"/>。 </exception>
    </member>
    <member name="T:System.Threading.NativeOverlapped">
<summary>提供一种显式布局，它在非托管代码中可见，并将具有与 Win32 OVERLAPPED 结构相同的布局且在结尾有附加保留的字段。</summary>
    </member>
    <member name="F:System.Threading.NativeOverlapped.EventHandle">
<summary>指定在操作完成后设置为收到信号状态的事件句柄。调用进程必须在调用任何重叠函数之前将此成员设置为零或有效事件句柄。</summary>
    </member>
    <member name="F:System.Threading.NativeOverlapped.InternalHigh">
<summary>指定传输的数据长度。保留给操作系统使用。</summary>
    </member>
    <member name="F:System.Threading.NativeOverlapped.InternalLow">
<summary>指定系统相关的状态。保留给操作系统使用。</summary>
    </member>
    <member name="F:System.Threading.NativeOverlapped.OffsetHigh">
<summary>指定开始传输的字节偏移量中的高字。</summary>
    </member>
    <member name="F:System.Threading.NativeOverlapped.OffsetLow">
<summary>指定开始传输的文件位置。</summary>
    </member>
    <member name="T:System.Threading.Overlapped">
<summary>提供一个 Win32 OVERLAPPED 结构的托管表示形式，包括将信息从 <see cref="T:System.Threading.Overlapped"/> 实例传输到 <see cref="T:System.Threading.NativeOverlapped"/> 结构的方法。</summary>
    </member>
    <member name="M:System.Threading.Overlapped.#ctor">
<summary>初始化 <see cref="T:System.Threading.Overlapped"/> 类的新空实例。</summary>
    </member>
    <member name="P:System.Threading.Overlapped.AsyncResult">
<summary>获取或设置提供 I/O 操作的状态信息的对象。</summary>
<returns>实现 <see cref="T:System.IAsyncResult"/> 接口的对象。</returns>
    </member>
    <member name="M:System.Threading.Overlapped.Free(System.Threading.NativeOverlapped*)">
<summary>[SECURITY CRITICAL] 释放与 <see cref="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback,System.Object)"/> 方法分配的本机重叠结构关联的非托管内存。</summary>
<param name="nativeOverlappedPtr">指向要释放的 <see cref="T:System.Threading.NativeOverlapped"/> 结构的指针。</param>
    </member>
    <member name="P:System.Threading.Overlapped.OffsetHigh">
<summary>获取或设置启动传输的文件位置的高序位字。文件位置是距文件起始处的字节偏移量。</summary>
<returns>表示文件位置高位字的 <see cref="T:System.Int32"/> 值。</returns>
    </member>
    <member name="P:System.Threading.Overlapped.OffsetLow">
<summary>获取或设置启动传输的文件位置的低序位字。文件位置是距文件起始处的字节偏移量。</summary>
<returns>表示文件位置低位字的 <see cref="T:System.Int32"/> 值。</returns>
    </member>
    <member name="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback,System.Object)">
<summary>[SECURITY CRITICAL] 将当前实例打包为一个 <see cref="T:System.Threading.NativeOverlapped"/> 结构，并指定当异步 I/O 操作完成时调用的委托，以及作为缓冲区的托管对象。</summary>
<returns>指向 <see cref="T:System.Threading.NativeOverlapped"/> 结构的非托管指针。 </returns>
<param name="iocb">一个 <see cref="T:System.Threading.IOCompletionCallback"/> 委托，表示在异步 I/O 操作完成时调用的回调方法。</param>
<param name="userData">对象或对象的数组，表示用于该操作的输入或输出缓冲区。每个对象都表示一个缓冲区，例如字节数组。</param>
    </member>
    <member name="M:System.Threading.Overlapped.Unpack(System.Threading.NativeOverlapped*)">
<summary>[SECURITY CRITICAL] 将指定的非托管 <see cref="T:System.Threading.NativeOverlapped"/> 结构解压缩为 <see cref="T:System.Threading.Overlapped"/> 对象。 </summary>
<returns>一个 <see cref="T:System.Threading.Overlapped"/> 对象，包含从本机结构解压缩的信息。</returns>
<param name="nativeOverlappedPtr">指向 <see cref="T:System.Threading.NativeOverlapped"/> 结构的非托管指针。</param>
    </member>
    <member name="T:System.Threading.ParameterizedThreadStart">
<summary>表示在 <see cref="T:System.Threading.Thread"/> 上执行的方法。</summary>
<param name="obj">包含该线程过程的数据的对象。</param>
    </member>
    <member name="T:System.Threading.RegisteredWaitHandle">
<summary>表示在调用 <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)"/> 时已注册的句柄。无法继承此类。 </summary>
    </member>
    <member name="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
<summary>取消由 <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)"/> 方法发出的已注册等待操作。</summary>
<returns>如果函数成功，则为 true；否则为 false。</returns>
<param name="waitObject">将收到信号的 <see cref="T:System.Threading.WaitHandle"/>。 </param>
    </member>
    <member name="T:System.Threading.SendOrPostCallback">
<summary>表示在消息即将被调度到同步上下文时要调用的方法。  </summary>
<param name="state">传递给委托的对象。</param>
    </member>
    <member name="T:System.Threading.SynchronizationContext">
<summary>提供在各种同步模型中传播同步上下文的基本功能。 </summary>
    </member>
    <member name="M:System.Threading.SynchronizationContext.#ctor">
<summary>创建 <see cref="T:System.Threading.SynchronizationContext"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Threading.SynchronizationContext.CreateCopy">
<summary>当在派生类中重写时，创建同步上下文的一个副本。  </summary>
<returns>一个新的 <see cref="T:System.Threading.SynchronizationContext"/> 对象。</returns>
    </member>
    <member name="P:System.Threading.SynchronizationContext.Current">
<summary>获取当前线程的同步上下文。</summary>
<returns>一个 <see cref="T:System.Threading.SynchronizationContext"/> 对象，它表示当前同步上下文。</returns>
    </member>
    <member name="M:System.Threading.SynchronizationContext.OperationCompleted">
<summary>当在派生类中重写时，响应操作已完成的通知。</summary>
    </member>
    <member name="M:System.Threading.SynchronizationContext.OperationStarted">
<summary>当在派生类中重写时，响应操作已开始的通知。</summary>
    </member>
    <member name="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
<summary>当在派生类中重写时，将异步消息调度到一个同步上下文。</summary>
<param name="d">要调用的 <see cref="T:System.Threading.SendOrPostCallback"/> 委托。</param>
<param name="state">传递给委托的对象。</param>
    </member>
    <member name="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
<summary>当在派生类中重写时，将一个同步消息调度到一个同步上下文。</summary>
<param name="d">要调用的 <see cref="T:System.Threading.SendOrPostCallback"/> 委托。</param>
<param name="state">传递给委托的对象。</param>
    </member>
    <member name="M:System.Threading.SynchronizationContext.SetSynchronizationContext(System.Threading.SynchronizationContext)">
<summary>[SECURITY CRITICAL] 设置当前同步上下文。</summary>
<param name="syncContext">要设置的 <see cref="T:System.Threading.SynchronizationContext"/> 对象。</param>
    </member>
    <member name="T:System.Threading.SynchronizationLockException">
<summary>当某个方法请求调用方拥有给定 Monitor 上的锁时将引发该异常，而且由不拥有该锁的调用方调用此方法。</summary>
    </member>
    <member name="T:System.Threading.Thread">
<summary>创建和控制线程，并获取其状态。</summary>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)">
<summary>初始化 <see cref="T:System.Threading.Thread"/> 类的新实例，指定允许对象在线程启动时传递给线程的委托。</summary>
<param name="start">一个委托，它表示此线程开始执行时要调用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="start"/> 为 null。 </exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)">
<summary>初始化 <see cref="T:System.Threading.Thread"/> 类的新实例。</summary>
<param name="start">一个委托，它表示此线程开始执行时要调用的方法。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="start"/> 参数为 null。 </exception>
    </member>
    <member name="M:System.Threading.Thread.Abort">
<summary>[SECURITY CRITICAL] 在调用此方法的线程上引发 <see cref="T:System.Threading.ThreadAbortException"/>，以开始终止此线程的过程。调用此方法通常会终止线程。</summary>
    </member>
    <member name="P:System.Threading.Thread.CurrentCulture">
<summary>获取或设置当前线程的区域性。</summary>
<returns>当前线程的区域性。</returns>
<exception cref="T:System.ArgumentNullException">该属性设置为 null。</exception>
<exception cref="T:System.ArgumentException">此属性被设置为不能用于定位资源文件的区域性。 </exception>
    </member>
    <member name="P:System.Threading.Thread.CurrentThread">
<summary>获取当前正在运行的线程。</summary>
<returns>当前正在运行的线程。</returns>
    </member>
    <member name="P:System.Threading.Thread.CurrentUICulture">
<summary>获取或设置资源管理器使用的当前区域性以便在运行时查找区域性特定的资源。</summary>
<returns>当前区域性。</returns>
<exception cref="T:System.ArgumentNullException">该属性设置为 null。 </exception>
<exception cref="T:System.ArgumentException">此属性被设置为不能用于定位资源文件的区域性。 </exception>
    </member>
    <member name="M:System.Threading.Thread.GetDomain">
<summary>返回当前线程正在其中运行的当前域。</summary>
<returns>正在运行的线程的当前应用程序域。</returns>
    </member>
    <member name="M:System.Threading.Thread.GetHashCode">
<summary>返回当前线程的哈希代码。</summary>
<returns>整数哈希代码值。</returns>
    </member>
    <member name="P:System.Threading.Thread.IsAlive">
<summary>获取一个值，该值指示当前线程的执行状态。</summary>
<returns>如果此线程已启动并且尚未正常终止或中止，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Threading.Thread.IsBackground">
<summary>获取或设置一个值，该值指示某个线程是否为后台线程。</summary>
<returns>如果此线程是后台线程或即将成为后台线程，则为 true；否则为 false。</returns>
<exception cref="T:System.Threading.ThreadStateException">已经终止线程的执行。 </exception>
    </member>
    <member name="M:System.Threading.Thread.Join">
<summary>在继续执行标准的 COM 和 SendMessage 消息泵处理期间，阻塞调用线程，直到某个线程终止为止。</summary>
<exception cref="T:System.Threading.ThreadStateException">调用方试图联接一个处于 <see cref="F:System.Threading.ThreadState.Unstarted"/> 状态的线程。 </exception>
    </member>
    <member name="M:System.Threading.Thread.Join(System.Int32)">
<summary>在继续执行标准的 COM 和 SendMessage 消息泵处理期间，阻塞调用线程，直到某个线程终止或经过了指定时间为止。</summary>
<returns>如果线程已终止，则为 true；如果线程在经过了 <paramref name="millisecondsTimeout"/> 参数指定的时间量后未终止，则为 false。</returns>
<param name="millisecondsTimeout">等待线程终止的毫秒数。 </param>
<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout"/> 的值为负且不等于 <see cref="F:System.Threading.Timeout.Infinite"/>（以毫秒为单位）。 </exception>
<exception cref="T:System.Threading.ThreadStateException">该线程尚未启动。 </exception>
    </member>
    <member name="P:System.Threading.Thread.ManagedThreadId">
<summary>获取当前托管线程的唯一标识符。</summary>
<returns>此托管线程的唯一标识符。</returns>
    </member>
    <member name="M:System.Threading.Thread.MemoryBarrier">
<summary>确保在程序顺序中排在对 <see cref="M:System.Threading.Thread.MemoryBarrier"/> 的调用之前的内存访问不会在对 <see cref="M:System.Threading.Thread.MemoryBarrier"/> 的调用之后执行，排在对 <see cref="M:System.Threading.Thread.MemoryBarrier"/> 的调用之后的内存访问不会在该调用之前执行。</summary>
    </member>
    <member name="P:System.Threading.Thread.Name">
<summary>获取或设置线程的名称。</summary>
<returns>一个包含线程名称的字符串，如果未设置名称，则为 null。</returns>
<exception cref="T:System.InvalidOperationException">请求设置操作，但已设置了 Name 属性。 </exception>
    </member>
    <member name="M:System.Threading.Thread.Sleep(System.Int32)">
<summary>将当前线程挂起指定的时间。</summary>
<param name="millisecondsTimeout">线程被阻塞的毫秒数。指定一 (1) 以使其他可能正在等待的线程能够执行。（我们建议等待时间为 1 毫秒，而非 0。）指定 <see cref="F:System.Threading.Timeout.Infinite"/> 可以无限期阻止线程。 </param>
<exception cref="T:System.ArgumentOutOfRangeException">超时值为负且不等于 <see cref="F:System.Threading.Timeout.Infinite"/>。 </exception>
    </member>
    <member name="M:System.Threading.Thread.Sleep(System.TimeSpan)">
<summary>将当前线程阻塞指定的时间。</summary>
<param name="timeout">设置为线程被阻塞的时间量的 <see cref="T:System.TimeSpan"/>。指定持续时间为 1 毫秒可以使其他可能正在等待的线程能够执行。（我们建议等待时间为 1 毫秒，而非 0。）指定持续时间为 -1 毫秒可以无限期阻止线程。 </param>
<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> 的值为负，而且不等于 -1 毫秒，或者大于 <see cref="F:System.Int32.MaxValue"/> 毫秒。 </exception>
    </member>
    <member name="M:System.Threading.Thread.SpinWait(System.Int32)">
<summary>导致线程等待由 <paramref name="iterations"/> 参数定义的时间量。</summary>
<param name="iterations">一个 32 位带符号整数，定义线程应等待的时间。 </param>
    </member>
    <member name="M:System.Threading.Thread.Start">
<summary>导致操作系统将当前实例的状态更改为 <see cref="F:System.Threading.ThreadState.Running"/>。</summary>
<exception cref="T:System.Threading.ThreadStateException">线程已启动。 </exception>
<exception cref="T:System.OutOfMemoryException">没有足够的可用内存来启动此线程。 </exception>
    </member>
    <member name="M:System.Threading.Thread.Start(System.Object)">
<summary>使操作系统将当前实例的状态更改为 <see cref="F:System.Threading.ThreadState.Running"/>，还可以选择提供一个对象，该对象包含线程执行的方法要使用的数据。</summary>
<param name="parameter">一个对象，包含线程执行的方法要使用的数据。</param>
<exception cref="T:System.Threading.ThreadStateException">线程已启动。 </exception>
<exception cref="T:System.OutOfMemoryException">没有足够的可用内存来启动此线程。 </exception>
<exception cref="T:System.InvalidOperationException">此线程是使用 <see cref="T:System.Threading.ThreadStart"/> 委托（而不是 <see cref="T:System.Threading.ParameterizedThreadStart"/> 委托）创建的。</exception>
    </member>
    <member name="P:System.Threading.Thread.ThreadState">
<summary>获取一个值，该值包含当前线程的状态。</summary>
<returns>指示当前线程的状态的枚举值之一。初始值为 Unstarted。</returns>
    </member>
    <member name="T:System.Threading.ThreadAbortException">
<summary>当对 <see cref="M:System.Threading.Thread.Abort"/> 方法发出调用时引发的异常。无法继承此类。</summary>
    </member>
    <member name="T:System.Threading.ThreadPool">
<summary>提供一个线程池，该线程池可用于发送工作项、处理异步 I/O、代表其他线程等待以及处理计时器。</summary>
    </member>
    <member name="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
<summary>[SECURITY CRITICAL] 将操作系统句柄绑定到 <see cref="T:System.Threading.ThreadPool"/>。</summary>
<returns>如果绑定了句柄，则为 true；否则为 false。</returns>
<param name="osHandle">包装操作系统句柄的对象。在非托管端必须为重叠 I/O 打开该句柄。</param>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
<summary>检索可以同时处于活动状态的线程池请求的数目。所有大于此数目的请求将保持排队状态，直到线程池线程变为可用。</summary>
<param name="workerThreads">线程池中辅助线程的最大数目。 </param>
<param name="completionPortThreads">线程池中异步 I/O 线程的最大数目。 </param>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
<summary>检索线程池在新请求预测中维护的空闲线程数。</summary>
<param name="workerThreads">当前由线程池维护的空闲辅助线程的最小数目。 </param>
<param name="completionPortThreads">当前由线程池维护的空闲异步 I/O 线程的最小数目。 </param>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
<summary>将方法排入队列以便执行。此方法在有线程池线程变得可用时执行。</summary>
<returns>如果此方法成功排队，则为 true；如果无法将该工作项排队，则引发 <see cref="T:System.NotSupportedException"/>。</returns>
<param name="callBack">要执行的方法。 </param>
<exception cref="T:System.NotSupportedException">承载公共语言运行时 (CLR) 的宿主不支持此操作。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="callBack"/> 为 null。</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
<summary>将方法排入队列以便执行，并指定包含该方法所用数据的对象。此方法在有线程池线程变得可用时执行。</summary>
<returns>如果此方法成功排队，则为 true；如果无法将该工作项排队，则引发 <see cref="T:System.NotSupportedException"/>。</returns>
<param name="callBack">要执行的方法。 </param>
<param name="state">包含方法所用数据的对象。 </param>
<exception cref="T:System.NotSupportedException">承载公共语言运行时 (CLR) 的宿主不支持此操作。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="callBack"/> 为 null。</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
<summary>注册一个等待 <see cref="T:System.Threading.WaitHandle"/> 的委托，并指定一个 32 位带符号整数来表示超时值（以毫秒为单位）。</summary>
<returns>已注册的等待句柄。</returns>
<param name="waitObject">要注册的等待句柄。</param>
<param name="callBack"><paramref name="waitObject"/> 参数信号发出时调用的委托。 </param>
<param name="state">传递给委托的对象。 </param>
<param name="millisecondsTimeOutInterval">以毫秒为单位的超时。如果 <paramref name="millisecondsTimeOutInterval"/> 参数为 0（零），函数将测试对象的状态并立即返回。如果 <paramref name="millisecondsTimeOutInterval"/> 为 -1，则函数的超时间隔永远不过期。 </param>
<param name="executeOnlyOnce">如果为 true，表示在调用了委托后，线程将不再在 <paramref name="waitObject"/> 参数上等待；如果为 false，表示每次完成等待操作后都重置计时器，直到注销等待。 </param>
<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeOutInterval"/> 参数小于 -1。 </exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
<summary>注册一个等待 <see cref="T:System.Threading.WaitHandle"/> 的委托，并指定一个 64 位带符号整数来表示超时值（以毫秒为单位）。</summary>
<returns>已注册的等待句柄。</returns>
<param name="waitObject">要注册的等待句柄。</param>
<param name="callBack"><paramref name="waitObject"/> 参数信号发出时调用的委托。 </param>
<param name="state">传递给委托的对象。 </param>
<param name="millisecondsTimeOutInterval">以毫秒为单位的超时。如果 <paramref name="millisecondsTimeOutInterval"/> 参数为 0（零），函数将测试对象的状态并立即返回。如果 <paramref name="millisecondsTimeOutInterval"/> 为 -1，则函数的超时间隔永远不过期。 </param>
<param name="executeOnlyOnce">如果为 true，表示在调用了委托后，线程将不再在 <paramref name="waitObject"/> 参数上等待；如果为 false，表示每次完成等待操作后都重置计时器，直到注销等待。 </param>
<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeOutInterval"/> 参数小于 -1。 </exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
<summary>注册一个等待 <see cref="T:System.Threading.WaitHandle"/> 的委托，并指定一个 <see cref="T:System.TimeSpan"/> 值来表示超时时间。</summary>
<returns>已注册的等待句柄。</returns>
<param name="waitObject">要注册的等待句柄。</param>
<param name="callBack"><paramref name="waitObject"/> 参数信号发出时调用的委托。 </param>
<param name="state">传递给委托的对象。 </param>
<param name="timeout"><see cref="T:System.TimeSpan"/> 表示的超时时间。如果 <paramref name="timeout"/> 为 0（零），则函数将测试对象的状态并立即返回。如果 <paramref name="timeout"/> 为 -1，则函数的超时间隔永远不过期。 </param>
<param name="executeOnlyOnce">如果为 true，表示在调用了委托后，线程将不再在 <paramref name="waitObject"/> 参数上等待；如果为 false，表示每次完成等待操作后都重置计时器，直到注销等待。 </param>
<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> 参数小于 -1。 </exception>
<exception cref="T:System.NotSupportedException"><paramref name="timeout"/> 参数大于 <see cref="F:System.Int32.MaxValue"/>。 </exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
<summary>注册一个等待 <see cref="T:System.Threading.WaitHandle"/> 的委托，并指定一个 32 位无符号整数来表示超时值（以毫秒为单位）。</summary>
<returns>已注册的等待句柄。</returns>
<param name="waitObject">要注册的等待句柄。 </param>
<param name="callBack"><paramref name="waitObject"/> 参数信号发出时调用的委托。 </param>
<param name="state">传递给委托的对象。 </param>
<param name="millisecondsTimeOutInterval">以毫秒为单位的超时。如果 <paramref name="millisecondsTimeOutInterval"/> 参数为 0（零），函数将测试对象的状态并立即返回。如果 <paramref name="millisecondsTimeOutInterval"/> 为 -1，则函数的超时间隔永远不过期。 </param>
<param name="executeOnlyOnce">如果为 true，表示在调用了委托后，线程将不再在 <paramref name="waitObject"/> 参数上等待；如果为 false，表示每次完成等待操作后都重置计时器，直到注销等待。 </param>
<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeOutInterval"/> 参数小于 -1。 </exception>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
<summary>[SECURITY CRITICAL] 设置可以同时处于活动状态的线程池的请求数目。所有大于此数目的请求将保持排队状态，直到线程池线程变为可用。</summary>
<returns>如果更改成功，则为 true；否则为 false。</returns>
<param name="workerThreads">线程池中辅助线程的最大数目。 </param>
<param name="completionPortThreads">线程池中异步 I/O 线程的最大数目。 </param>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
<summary>[SECURITY CRITICAL] 设置线程池在新请求预测中维护的空闲线程数。</summary>
<returns>如果更改成功，则为 true；否则为 false。</returns>
<param name="workerThreads">要由线程池维护的新的最小空闲辅助线程数。 </param>
<param name="completionPortThreads">要由线程池维护的新的最小空闲异步 I/O 线程数。 </param>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
<summary>[SECURITY CRITICAL] 将重叠的 I/O 操作排队以便执行。</summary>
<returns>如果成功地将此操作排队到 I/O 完成端口，则为 true；否则为 false。</returns>
<param name="overlapped">要排队的 <see cref="T:System.Threading.NativeOverlapped"/> 结构。</param>
    </member>
    <member name="T:System.Threading.ThreadStart">
<summary>表示在 <see cref="T:System.Threading.Thread"/> 上执行的方法。</summary>
    </member>
    <member name="T:System.Threading.ThreadStartException">
<summary>当基础操作系统线程已启动但该线程尚未准备好执行用户代码前，托管线程中出现错误，则会引发异常。 </summary>
    </member>
    <member name="T:System.Threading.ThreadState">
<summary>指定 <see cref="T:System.Threading.Thread"/> 的执行状态。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Running">
<summary>线程已启动，它未被阻塞，并且没有挂起的 <see cref="T:System.Threading.ThreadAbortException"/>。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.StopRequested">
<summary>正在请求线程停止。这仅用于内部。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.SuspendRequested">
<summary>该线程已被标记为挂起。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Background">
<summary>线程正作为后台线程执行（相对于前台线程而言）。此状态可以通过设置 <see cref="P:System.Threading.Thread.IsBackground"/> 属性来控制。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Unstarted">
<summary>尚未对线程调用 <see cref="M:System.Threading.Thread.Start"/> 方法。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Stopped">
<summary>线程已停止。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.WaitSleepJoin">
<summary>线程已被阻止。这可能是因为：调用 <see cref="M:System.Threading.Thread.Sleep(System.Int32)"/> 或 <see cref="M:System.Threading.Thread.Join"/>、请求锁定（例如通过调用 <see cref="M:System.Threading.Monitor.Enter(System.Object)"/> 或 <see cref="M:System.Threading.Monitor.Wait(System.Object,System.Int32)"/>）或等待线程同步对象（例如 <see cref="T:System.Threading.ManualResetEvent"/>）。 </summary>
    </member>
    <member name="F:System.Threading.ThreadState.Suspended">
<summary>线程已挂起。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.AbortRequested">
<summary>已对线程调用了 <see cref="M:System.Threading.Thread.Abort"/> 方法，但线程尚未收到试图终止它的挂起的 <see cref="T:System.Threading.ThreadAbortException"/>。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Aborted">
<summary>线程状态包括 <see cref="F:System.Threading.ThreadState.AbortRequested"/> 并且该线程现在已终止，但其状态尚未更改为 <see cref="F:System.Threading.ThreadState.Stopped"/>。</summary>
    </member>
    <member name="T:System.Threading.ThreadStateException">
<summary>当 <see cref="T:System.Threading.Thread"/> 处于对方法调用无效的 <see cref="P:System.Threading.Thread.ThreadState"/> 时引发的异常。</summary>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor">
<summary>使用默认属性初始化 <see cref="T:System.Threading.ThreadStateException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.String)">
<summary>使用指定的错误消息初始化 <see cref="T:System.Threading.ThreadStateException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.String,System.Exception)">
<summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Threading.ThreadStateException"/> 类的新实例。</summary>
<param name="message">解释异常原因的错误消息。 </param>
<param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="T:System.Threading.Timeout">
<summary>包含用于指定无限长的时间的常量。无法继承此类。 </summary>
    </member>
    <member name="F:System.Threading.Timeout.Infinite">
<summary>用于指定无限长等待时间的常数。此字段为常量。</summary>
    </member>
    <member name="T:System.Threading.Timer">
<summary>提供以指定的时间间隔执行方法的机制。无法继承此类。</summary>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)">
<summary>使用新创建的 <see cref="T:System.Threading.Timer"/> 对象作为状态对象，用一个无限间隔和一个无限到期时间初始化 <see cref="T:System.Threading.Timer"/> 类的新实例。 </summary>
<param name="callback">一个表示要执行的方法的委托。</param>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
<summary>使用 32 位的带符号整数指定时间间隔，初始化 <see cref="T:System.Threading.Timer"/> 类的新实例。</summary>
<param name="callback">一个表示要执行的方法的委托。 </param>
<param name="state">包含回调方法要使用的信息的对象，或者 null。 </param>
<param name="dueTime">调用 <paramref name="callback"/> 之前延迟的时间量（以毫秒为单位）。指定 <see cref="F:System.Threading.Timeout.Infinite"/> 可防止启动计时器。指定零 (0) 可立即启动计时器。 </param>
<param name="period">调用 <paramref name="callback"/> 的时间间隔（以毫秒为单位）。指定 <see cref="F:System.Threading.Timeout.Infinite"/> 可以禁用定期终止。 </param>
<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime"/> 或 <paramref name="period"/> 参数为负，并且不等于 <see cref="F:System.Threading.Timeout.Infinite"/>。 </exception>
<exception cref="T:System.ArgumentNullException"><paramref name="callback"/> 参数为 null。 </exception>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)">
<summary>用 64 位带符号整数来度量时间间隔，以初始化 <see cref="T:System.Threading.Timer"/> 类的新实例。</summary>
<param name="callback">一个表示要执行的方法的委托。 </param>
<param name="state">包含回调方法要使用的信息的对象，或者 null。 </param>
<param name="dueTime">调用 <paramref name="callback"/> 之前延迟的时间量（以毫秒为单位）。指定 <see cref="F:System.Threading.Timeout.Infinite"/> 可防止启动计时器。指定零 (0) 可立即启动计时器。 </param>
<param name="period">调用 <paramref name="callback"/> 的时间间隔（以毫秒为单位）。指定 <see cref="F:System.Threading.Timeout.Infinite"/> 可以禁用定期终止。 </param>
<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime"/> 或 <paramref name="period"/> 参数为负，并且不等于 <see cref="F:System.Threading.Timeout.Infinite"/>。-或- <paramref name="dueTime"/> 或 <paramref name="period"/> 参数大于 4294967294 (<see cref="F:System.UInt32.MaxValue"/> - 1)。</exception>
<exception cref="T:System.ArgumentNullException"><paramref name="callback"/> 参数为 null。 </exception>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
<summary>初始化 <see cref="T:System.Threading.Timer"/> 类的新实例，使用 <see cref="T:System.TimeSpan"/> 值来度量时间间隔。</summary>
<param name="callback">一个表示要执行的方法的委托。 </param>
<param name="state">包含回调方法要使用的信息的对象，或者 null。 </param>
<param name="dueTime">调用 <paramref name="callback"/> 之前延迟的时间。指定 -1（负一）毫秒可防止启动计时器。指定零 (0) 可立即启动计时器。 </param>
<param name="period">调用 <paramref name="callback"/> 的时间间隔。指定 -1（负一）毫秒可禁用定期终止。 </param>
<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime"/> 或 <paramref name="period"/> 参数为负，并且不等于 -1（负一）毫秒。-或- <paramref name="dueTime"/> 或 <paramref name="period"/> 参数大于 4294967294 (<see cref="F:System.UInt32.MaxValue"/> - 1) 毫秒。 </exception>
<exception cref="T:System.ArgumentNullException"><paramref name="callback"/> 参数为 null。 </exception>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)">
<summary>用 32 位无符号整数来度量时间间隔，以初始化 <see cref="T:System.Threading.Timer"/> 类的新实例。</summary>
<param name="callback">一个表示要执行的方法的委托。 </param>
<param name="state">包含回调方法要使用的信息的对象，或者 null。 </param>
<param name="dueTime">调用 <paramref name="callback"/> 之前延迟的时间量（以毫秒为单位）。指定 <see cref="F:System.UInt32.MaxValue"/> 可防止启动计时器。指定零 (0) 可立即启动计时器。 </param>
<param name="period">调用 <paramref name="callback"/> 的时间间隔（以毫秒为单位）。指定 <see cref="F:System.UInt32.MaxValue"/> 可以禁用定期终止。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="callback"/> 参数为 null。 </exception>
    </member>
    <member name="M:System.Threading.Timer.Change(System.Int32,System.Int32)">
<summary>更改计时器的启动时间和方法调用之间的间隔，用 32 位带符号整数度量时间间隔。</summary>
<returns>如果成功更新了计时器，则为 true；否则为 false。</returns>
<param name="dueTime">在调用构造 <see cref="T:System.Threading.Timer"/> 时指定的回调方法之前的延迟时间（以毫秒为单位）。指定 <see cref="F:System.Threading.Timeout.Infinite"/> 可防止重新启动计时器。指定 0（零）可立即重新启动计时器。 </param>
<param name="period">调用构造 <see cref="T:System.Threading.Timer"/> 时指定的回调方法的时间间隔（以毫秒为单位）。指定 <see cref="F:System.Threading.Timeout.Infinite"/> 可以禁用定期终止。 </param>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer"/> 已被释放。 </exception>
<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime"/> 或 <paramref name="period"/> 参数为负，并且不等于 <see cref="F:System.Threading.Timeout.Infinite"/>。 </exception>
    </member>
    <member name="M:System.Threading.Timer.Change(System.Int64,System.Int64)">
<summary>更改计时器的启动时间和方法调用之间的间隔，用 64 位带符号整数度量时间间隔。</summary>
<returns>如果成功更新了计时器，则为 true；否则为 false。</returns>
<param name="dueTime">在调用构造 <see cref="T:System.Threading.Timer"/> 时指定的回调方法之前的延迟时间（以毫秒为单位）。指定 <see cref="F:System.Threading.Timeout.Infinite"/> 可防止重新启动计时器。指定 0（零）可立即重新启动计时器。 </param>
<param name="period">调用构造 <see cref="T:System.Threading.Timer"/> 时指定的回调方法的时间间隔（以毫秒为单位）。指定 <see cref="F:System.Threading.Timeout.Infinite"/> 可以禁用定期终止。 </param>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer"/> 已被释放。 </exception>
<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime"/> 或 <paramref name="period"/> 参数为负，并且不等于 <see cref="F:System.Threading.Timeout.Infinite"/>。-或- <paramref name="dueTime"/> 或 <paramref name="period"/> 参数大于 4294967294 (<see cref="F:System.UInt32.MaxValue"/> - 1)。</exception>
    </member>
    <member name="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)">
<summary>更改计时器的启动时间和方法调用之间的时间间隔，使用 <see cref="T:System.TimeSpan"/> 值度量时间间隔。</summary>
<returns>如果成功更新了计时器，则为 true；否则为 false。</returns>
<param name="dueTime">在调用构造 <see cref="T:System.Threading.Timer"/> 时指定的回调方法之前的延迟时间。指定 -1（负一）毫秒可防止计时器重新启动。指定 0（零）可立即重新启动计时器。 </param>
<param name="period">调用构造 <see cref="T:System.Threading.Timer"/> 时指定的回调方法的时间间隔。指定 -1（负一）毫秒可禁用定期终止。 </param>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer"/> 已被释放。 </exception>
<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime"/> 或 <paramref name="period"/> 参数为负，并且不等于 -1（负一）毫秒。-或- <paramref name="dueTime"/> 或 <paramref name="period"/> 参数大于 4294967294 (<see cref="F:System.UInt32.MaxValue"/> - 1) 毫秒。</exception>
    </member>
    <member name="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)">
<summary>更改计时器的启动时间和方法调用之间的间隔，用 32 位无符号整数度量时间间隔。</summary>
<returns>如果成功更新了计时器，则为 true；否则为 false。</returns>
<param name="dueTime">在调用构造 <see cref="T:System.Threading.Timer"/> 时指定的回调方法之前的延迟时间（以毫秒为单位）。指定 <see cref="F:System.UInt32.MaxValue"/> 可防止重新启动计时器。指定 0（零）可立即重新启动计时器。 </param>
<param name="period">调用构造 <see cref="T:System.Threading.Timer"/> 时指定的回调方法的时间间隔（以毫秒为单位）。指定 <see cref="F:System.UInt32.MaxValue"/> 可以禁用定期终止。 </param>
<exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer"/> 已被释放。 </exception>
    </member>
    <member name="M:System.Threading.Timer.Dispose">
<summary>释放由 <see cref="T:System.Threading.Timer"/> 的当前实例使用的所有资源。</summary>
    </member>
    <member name="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)">
<summary>释放 <see cref="T:System.Threading.Timer"/> 的当前实例使用的所有资源并在释放完计时器时发出信号。</summary>
<returns>如果函数成功，则为 true；否则为 false。</returns>
<param name="notifyObject">释放完计时器时将收到信号的 <see cref="T:System.Threading.WaitHandle"/>。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="notifyObject"/> 参数为 null。 </exception>
    </member>
    <member name="T:System.Threading.TimerCallback">
<summary>表示处理来自 <see cref="T:System.Threading.Timer"/> 的调用的方法。</summary>
<param name="state">一个对象，包含与该委托所调用的方法相关的特定于应用程序的信息。-或- 空引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="T:System.Threading.Volatile">
<summary>包含用于执行可变内存操作的方法。</summary>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.Boolean@)">
<summary>读取指定字段的值。在需要它的系统上，插入一个阻止处理器对内存操作重新排序的内存屏障，如下所示：如果读取或写入出现在代码中位于此方法之后，则在此方法之前处理器无法将其移动。 </summary>
<returns>读取的值。无论处理器数量或处理器缓存状态如何，该值都是计算机中任何处理器最新写入的值。 </returns>
<param name="location">要读取的字段。</param>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.Byte@)">
<summary>读取指定字段的值。在需要它的系统上，插入一个阻止处理器对内存操作重新排序的内存屏障，如下所示：如果读取或写入出现在代码中位于此方法之后，则在此方法之前处理器无法将其移动。</summary>
<returns>读取的值。无论处理器数量或处理器缓存状态如何，该值都是计算机中任何处理器最新写入的值。 </returns>
<param name="location">要读取的字段。</param>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.Double@)">
<summary>读取指定字段的值。在需要它的系统上，插入一个阻止处理器对内存操作重新排序的内存屏障，如下所示：如果读取或写入出现在代码中位于此方法之后，则在此方法之前处理器无法将其移动。</summary>
<returns>读取的值。无论处理器数量或处理器缓存状态如何，该值都是计算机中任何处理器最新写入的值。 </returns>
<param name="location">要读取的字段。</param>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.Int16@)">
<summary>读取指定字段的值。在需要它的系统上，插入一个阻止处理器对内存操作重新排序的内存屏障，如下所示：如果读取或写入出现在代码中位于此方法之后，则在此方法之前处理器无法将其移动。</summary>
<returns>读取的值。无论处理器数量或处理器缓存状态如何，该值都是计算机中任何处理器最新写入的值。 </returns>
<param name="location">要读取的字段。</param>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.Int32@)">
<summary>读取指定字段的值。在需要它的系统上，插入一个阻止处理器对内存操作重新排序的内存屏障，如下所示：如果读取或写入出现在代码中位于此方法之后，则在此方法之前处理器无法将其移动。</summary>
<returns>读取的值。无论处理器数量或处理器缓存状态如何，该值都是计算机中任何处理器最新写入的值。 </returns>
<param name="location">要读取的字段。</param>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.Int64@)">
<summary>读取指定字段的值。在需要它的系统上，插入一个阻止处理器对内存操作重新排序的内存屏障，如下所示：如果读取或写入出现在代码中位于此方法之后，则在此方法之前处理器无法将其移动。</summary>
<returns>读取的值。无论处理器数量或处理器缓存状态如何，该值都是计算机中任何处理器最新写入的值。 </returns>
<param name="location">要读取的字段。</param>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.IntPtr@)">
<summary>读取指定字段的值。在需要它的系统上，插入一个阻止处理器对内存操作重新排序的内存屏障，如下所示：如果读取或写入出现在代码中位于此方法之后，则在此方法之前处理器无法将其移动。</summary>
<returns>读取的值。无论处理器数量或处理器缓存状态如何，该值都是计算机中任何处理器最新写入的值。 </returns>
<param name="location">要读取的字段。</param>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.SByte@)">
<summary>读取指定字段的值。在需要它的系统上，插入一个阻止处理器对内存操作重新排序的内存屏障，如下所示：如果读取或写入出现在代码中位于此方法之后，则在此方法之前处理器无法将其移动。</summary>
<returns>读取的值。无论处理器数量或处理器缓存状态如何，该值都是计算机中任何处理器最新写入的值。 </returns>
<param name="location">要读取的字段。</param>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.Single@)">
<summary>读取指定字段的值。在需要它的系统上，插入一个阻止处理器对内存操作重新排序的内存屏障，如下所示：如果读取或写入出现在代码中位于此方法之后，则在此方法之前处理器无法将其移动。</summary>
<returns>读取的值。无论处理器数量或处理器缓存状态如何，该值都是计算机中任何处理器最新写入的值。 </returns>
<param name="location">要读取的字段。</param>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.UInt16@)">
<summary>读取指定字段的值。在需要它的系统上，插入一个阻止处理器对内存操作重新排序的内存屏障，如下所示：如果读取或写入出现在代码中位于此方法之后，则在此方法之前处理器无法将其移动。</summary>
<returns>读取的值。无论处理器数量或处理器缓存状态如何，该值都是计算机中任何处理器最新写入的值。</returns>
<param name="location">要读取的字段。</param>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.UInt32@)">
<summary>读取指定字段的值。在需要它的系统上，插入一个阻止处理器对内存操作重新排序的内存屏障，如下所示：如果读取或写入出现在代码中位于此方法之后，则在此方法之前处理器无法将其移动。</summary>
<returns>读取的值。无论处理器数量或处理器缓存状态如何，该值都是计算机中任何处理器最新写入的值。</returns>
<param name="location">要读取的字段。</param>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.UInt64@)">
<summary>读取指定字段的值。在需要它的系统上，插入一个阻止处理器对内存操作重新排序的内存屏障，如下所示：如果读取或写入出现在代码中位于此方法之后，则在此方法之前处理器无法将其移动。</summary>
<returns>读取的值。无论处理器数量或处理器缓存状态如何，该值都是计算机中任何处理器最新写入的值。 </returns>
<param name="location">要读取的字段。</param>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.UIntPtr@)">
<summary>读取指定字段的值。在需要它的系统上，插入一个阻止处理器对内存操作重新排序的内存屏障，如下所示：如果读取或写入出现在代码中位于此方法之后，则在此方法之前处理器无法将其移动。</summary>
<returns>读取的值。无论处理器数量或处理器缓存状态如何，该值都是计算机中任何处理器最新写入的值。 </returns>
<param name="location">要读取的字段。</param>
    </member>
    <member name="M:System.Threading.Volatile.Read``1(``0@)">
<summary>从指定的字段读取对象引用。在需要它的系统上，插入一个阻止处理器对内存操作重新排序的内存屏障，如下所示：如果读取或写入出现在代码中位于此方法之后，则在此方法之前处理器无法将其移动。</summary>
<returns>对已读取的 <paramref name="T"/> 的引用。无论处理器数量或处理器缓存状态如何，该引用都是计算机中任何处理器最新写入的引用。 </returns>
<param name="location">要读取的字段。</param>
<typeparam name="T">要读取的字段的类型。此类型必须是引用类型，而不是值类型。</typeparam>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.Boolean@,System.Boolean)">
<summary>向指定字段中写入指定值。在需要它的系统上，插入一个阻止处理器对内存操作重新排序的内存屏障，如下所示：如果读取或写入出现在代码中位于此方法之前，则在此方法之后处理器无法将其移动。</summary>
<param name="location">其中写入值的字段。</param>
<param name="value">要写入的值。立即写入值，以便该值对于计算机中的所有处理器都可见。 </param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.Byte@,System.Byte)">
<summary>向指定字段中写入指定值。在需要它的系统上，插入一个阻止处理器对内存操作重新排序的内存屏障，如下所示：如果读取或写入出现在代码中位于此方法之前，则在此方法之后处理器无法将其移动。</summary>
<param name="location">其中写入值的字段。</param>
<param name="value">要写入的值。立即写入值，以便该值对于计算机中的所有处理器都可见。</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.Double@,System.Double)">
<summary>向指定字段中写入指定值。在需要它的系统上，插入一个阻止处理器对内存操作重新排序的内存屏障，如下所示：如果读取或写入出现在代码中位于此方法之前，则在此方法之后处理器无法将其移动。</summary>
<param name="location">其中写入值的字段。</param>
<param name="value">要写入的值。立即写入值，以便该值对于计算机中的所有处理器都可见。</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.Int16@,System.Int16)">
<summary>向指定字段中写入指定值。在需要它的系统上，插入一个阻止处理器对内存操作重新排序的内存屏障，如下所示：如果读取或写入出现在代码中位于此方法之前，则在此方法之后处理器无法将其移动。</summary>
<param name="location">其中写入值的字段。</param>
<param name="value">要写入的值。立即写入值，以便该值对于计算机中的所有处理器都可见。</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.Int32@,System.Int32)">
<summary>向指定字段中写入指定值。在需要它的系统上，插入一个阻止处理器对内存操作重新排序的内存屏障，如下所示：如果读取或写入出现在代码中位于此方法之前，则在此方法之后处理器无法将其移动。</summary>
<param name="location">其中写入值的字段。</param>
<param name="value">要写入的值。立即写入值，以便该值对于计算机中的所有处理器都可见。</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.Int64@,System.Int64)">
<summary>向指定字段中写入指定值。在需要它的系统上，插入一个阻止处理器对内存操作重新排序的内存屏障，如下所示：如果内存操作出现在代码中位于此方法之前，则在此方法之后处理器无法将其移动。</summary>
<param name="location">其中写入值的字段。</param>
<param name="value">要写入的值。立即写入值，以便该值对于计算机中的所有处理器都可见。</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.IntPtr@,System.IntPtr)">
<summary>向指定字段中写入指定值。在需要它的系统上，插入一个阻止处理器对内存操作重新排序的内存屏障，如下所示：如果读取或写入出现在代码中位于此方法之前，则在此方法之后处理器无法将其移动。</summary>
<param name="location">其中写入值的字段。</param>
<param name="value">要写入的值。立即写入值，以便该值对于计算机中的所有处理器都可见。</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.SByte@,System.SByte)">
<summary>向指定字段中写入指定值。在需要它的系统上，插入一个阻止处理器对内存操作重新排序的内存屏障，如下所示：如果读取或写入出现在代码中位于此方法之前，则在此方法之后处理器无法将其移动。</summary>
<param name="location">其中写入值的字段。</param>
<param name="value">要写入的值。立即写入值，以便该值对于计算机中的所有处理器都可见。</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.Single@,System.Single)">
<summary>向指定字段中写入指定值。在需要它的系统上，插入一个阻止处理器对内存操作重新排序的内存屏障，如下所示：如果读取或写入出现在代码中位于此方法之前，则在此方法之后处理器无法将其移动。</summary>
<param name="location">其中写入值的字段。</param>
<param name="value">要写入的值。立即写入值，以便该值对于计算机中的所有处理器都可见。</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.UInt16@,System.UInt16)">
<summary>向指定字段中写入指定值。在需要它的系统上，插入一个阻止处理器对内存操作重新排序的内存屏障，如下所示：如果读取或写入出现在代码中位于此方法之前，则在此方法之后处理器无法将其移动。</summary>
<param name="location">其中写入值的字段。</param>
<param name="value">要写入的值。立即写入值，以便该值对于计算机中的所有处理器都可见。</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.UInt32@,System.UInt32)">
<summary>向指定字段中写入指定值。在需要它的系统上，插入一个阻止处理器对内存操作重新排序的内存屏障，如下所示：如果读取或写入出现在代码中位于此方法之前，则在此方法之后处理器无法将其移动。</summary>
<param name="location">其中写入值的字段。</param>
<param name="value">要写入的值。立即写入值，以便该值对于计算机中的所有处理器都可见。</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.UInt64@,System.UInt64)">
<summary>向指定字段中写入指定值。在需要它的系统上，插入一个阻止处理器对内存操作重新排序的内存屏障，如下所示：如果读取或写入出现在代码中位于此方法之前，则在此方法之后处理器无法将其移动。</summary>
<param name="location">其中写入值的字段。</param>
<param name="value">要写入的值。立即写入值，以便该值对于计算机中的所有处理器都可见。</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.UIntPtr@,System.UIntPtr)">
<summary>向指定字段中写入指定值。在需要它的系统上，插入一个阻止处理器对内存操作重新排序的内存屏障，如下所示：如果读取或写入出现在代码中位于此方法之前，则在此方法之后处理器无法将其移动。</summary>
<param name="location">其中写入值的字段。</param>
<param name="value">要写入的值。立即写入值，以便该值对于计算机中的所有处理器都可见。</param>
    </member>
    <member name="M:System.Threading.Volatile.Write``1(``0@,``0)">
<summary>向指定字段中写入指定对象引用。在需要它的系统上，插入一个阻止处理器对内存操作重新排序的内存屏障，如下所示：如果读取或写入出现在代码中位于此方法之前，则在此方法之后处理器无法将其移动。 </summary>
<param name="location">其中写入对象引用的字段。</param>
<param name="value">要写入的对象引用。立即写入引用，以便该值对于计算机中的所有处理器都可见。</param>
<typeparam name="T">要写入的字段的类型。此类型必须是引用类型，而不是值类型。 </typeparam>
    </member>
    <member name="T:System.Threading.WaitCallback">
<summary>表示线程池线程要执行的回调方法。 </summary>
<param name="state">包含回调方法要使用的信息的对象。 </param>
    </member>
    <member name="T:System.Threading.WaitHandle">
<summary>封装等待对共享资源的独占访问的操作系统特定的对象。</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.#ctor">
<summary>初始化 <see cref="T:System.Threading.WaitHandle"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Close">
<summary>在派生类中被重写时，释放由当前 <see cref="T:System.Threading.WaitHandle"/> 持有的所有资源。</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Dispose">
<summary>释放由 <see cref="T:System.Threading.WaitHandle"/> 类的当前实例使用的所有资源。</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Dispose(System.Boolean)">
<summary>在派生类中被重写时，释放由 <see cref="T:System.Threading.WaitHandle"/> 使用的未托管的资源，并且可以选择释放托管的资源。 </summary>
<param name="explicitDisposing">如果释放托管和未托管资源，则为 true；如果只释放未托管资源，则为 false。 </param>
    </member>
    <member name="F:System.Threading.WaitHandle.InvalidHandle">
<summary>表示无效的本机操作系统句柄。此字段为只读。</summary>
    </member>
    <member name="P:System.Threading.WaitHandle.SafeWaitHandle">
<summary>[SECURITY CRITICAL] 获取或设置本机操作系统句柄。</summary>
<returns>本机操作系统句柄。</returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
<summary>等待指定数组中的所有元素都收到信号。</summary>
<returns>如果 <paramref name="waitHandles"/> 中的每个元素都已收到信号，则返回 true；否则该方法永不返回。</returns>
<param name="waitHandles">一个数组，包含当前实例将等待的对象。此数组不能包含对同一对象的多个引用。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="waitHandles"/> 参数为 null。-或- <paramref name="waitHandles"/> 数组中的一个或多个对象为 null。 </exception>
<exception cref="T:System.ArgumentException"><paramref name="waitHandles"/> 数组包含重复的元素。-或- <paramref name="waitHandles"/> 是不含任何元素的数组。</exception>
<exception cref="T:System.NotSupportedException"><paramref name="waitHandles"/> 中对象的数目大于系统允许的数目。 </exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
<summary>等待指定数组中的所有元素收到信号，使用 <see cref="T:System.Int32"/> 值指定时间间隔，并指定是否在等待之前退出同步域。</summary>
<returns>如果 <paramref name="waitHandles"/> 中的每个元素都已收到信号，则为 true；否则为 false。</returns>
<param name="waitHandles">一个数组，包含当前实例将等待的对象。此数组不能包含对同一对象的多个引用。 </param>
<param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite"/> (-1)，表示无限期等待。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="waitHandles"/> 参数为 null。-或- <paramref name="waitHandles"/> 数组中的一个或多个对象为 null。 </exception>
<exception cref="T:System.ArgumentException"><paramref name="waitHandles"/> 数组包含重复的元素。-或- <paramref name="waitHandles"/> 是不含任何元素的数组。</exception>
<exception cref="T:System.NotSupportedException"><paramref name="waitHandles"/> 中对象的数目大于系统允许的数目。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="millisecondsTimeout"/> 是一个非 -1 的负数，而 -1 表示无限期超时。 </exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
<summary>等待指定数组中的所有元素接收信号，同时使用 <see cref="T:System.TimeSpan"/> 值指定时间间隔。</summary>
<returns>如果 <paramref name="waitHandles"/> 中的每个元素都已收到信号，则为 true；否则为 false。</returns>
<param name="waitHandles">一个数组，包含当前实例将等待的对象。此数组不能包含对同一对象的多个引用。 </param>
<param name="timeout">一个 <see cref="T:System.TimeSpan"/>，表示等待的毫秒数；或者一个 <see cref="T:System.TimeSpan"/>，表示 -1 毫秒（无限期等待）。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="waitHandles"/> 参数为 null。-或- <paramref name="waitHandles"/> 数组中的一个或多个对象为 null。 </exception>
<exception cref="T:System.ArgumentException"><paramref name="waitHandles"/> 数组包含重复的元素。-或- <paramref name="waitHandles"/> 是不含任何元素的数组。</exception>
<exception cref="T:System.NotSupportedException"><paramref name="waitHandles"/> 中对象的数目大于系统允许的数目。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="timeout"/> 是一个非 -1 毫秒的负数，而 -1 表示无限期超时。-或- <paramref name="timeout"/> 大于 <see cref="F:System.Int32.MaxValue"/>。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
<summary>等待指定数组中的任一元素收到信号。</summary>
<returns>满足等待的对象的数组索引。</returns>
<param name="waitHandles">一个数组，包含当前实例将等待的对象。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="waitHandles"/> 参数为 null。-或- <paramref name="waitHandles"/> 数组中的一个或多个对象为 null。 </exception>
<exception cref="T:System.NotSupportedException"><paramref name="waitHandles"/> 中对象的数目大于系统允许的数目。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="waitHandles"/> 是不含任何元素的数组。 </exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
<summary>等待指定数组中的任意元素接收信号，同时使用 32 位带符号整数指定时间间隔。</summary>
<returns>满足等待的对象的数组索引；如果没有任何对象满足等待，并且等效于 <paramref name="millisecondsTimeout"/> 的时间间隔已过，则为 <see cref="F:System.Threading.WaitHandle.WaitTimeout"/>。</returns>
<param name="waitHandles">一个数组，包含当前实例将等待的对象。 </param>
<param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite"/> (-1)，表示无限期等待。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="waitHandles"/> 参数为 null。-或- <paramref name="waitHandles"/> 数组中的一个或多个对象为 null。 </exception>
<exception cref="T:System.NotSupportedException"><paramref name="waitHandles"/> 中对象的数目大于系统允许的数目。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="millisecondsTimeout"/> 是一个非 -1 的负数，而 -1 表示无限期超时。 </exception>
      <exception cref="T:System.ArgumentException">
<paramref name="waitHandles"/> 是不含任何元素的数组。 </exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
<summary>等待指定数组中的任何元素接收信号，同时使用 <see cref="T:System.TimeSpan"/> 指定时间间隔。</summary>
<returns>满足等待的对象的数组索引；如果没有任何对象满足等待，并且等效于 <paramref name="timeout"/> 的时间间隔已过，则为 <see cref="F:System.Threading.WaitHandle.WaitTimeout"/>。</returns>
<param name="waitHandles">一个数组，包含当前实例将等待的对象。 </param>
<param name="timeout">一个 <see cref="T:System.TimeSpan"/>，表示等待的毫秒数；或者一个 <see cref="T:System.TimeSpan"/>，表示 -1 毫秒（无限期等待）。 </param>
<exception cref="T:System.ArgumentNullException"><paramref name="waitHandles"/> 参数为 null。-或- <paramref name="waitHandles"/> 数组中的一个或多个对象为 null。 </exception>
<exception cref="T:System.NotSupportedException"><paramref name="waitHandles"/> 中对象的数目大于系统允许的数目。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="timeout"/> 是一个非 -1 毫秒的负数，而 -1 表示无限期超时。-或- <paramref name="timeout"/> 大于 <see cref="F:System.Int32.MaxValue"/>。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="waitHandles"/> 是不含任何元素的数组。 </exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne">
<summary>阻止当前线程，直到当前 <see cref="T:System.Threading.WaitHandle"/> 收到信号。</summary>
<returns>如果当前实例收到信号，则为 true。如果当前实例永远收不到信号，则 <see cref="M:System.Threading.WaitHandle.WaitOne"/> 永不返回。</returns>
<exception cref="T:System.ObjectDisposedException">当前实例已被释放。 </exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.Int32)">
<summary>阻止当前线程，直到当前 <see cref="T:System.Threading.WaitHandle"/> 收到信号，同时使用 32 位带符号整数指定时间间隔。</summary>
<returns>如果当前实例收到信号，则为 true；否则为 false。</returns>
<param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite"/> (-1)，表示无限期等待。 </param>
<exception cref="T:System.ObjectDisposedException">当前实例已被释放。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="millisecondsTimeout"/> 是一个非 -1 的负数，而 -1 表示无限期超时。 </exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)">
<summary>阻止当前线程，直到当前实例收到信号，同时使用 <see cref="T:System.TimeSpan"/> 指定时间间隔。</summary>
<returns>如果当前实例收到信号，则为 true；否则为 false。</returns>
<param name="timeout">一个 <see cref="T:System.TimeSpan"/>，表示等待的毫秒数；或者一个 <see cref="T:System.TimeSpan"/>，表示 -1 毫秒（无限期等待）。 </param>
<exception cref="T:System.ObjectDisposedException">当前实例已被释放。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="timeout"/> 是一个非 -1 毫秒的负数，而 -1 表示无限期超时。-或- <paramref name="timeout"/> 大于 <see cref="F:System.Int32.MaxValue"/>。 </exception>
    </member>
    <member name="F:System.Threading.WaitHandle.WaitTimeout">
<summary>指示在任何等待句柄收到信号之前 <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])"/> 操作已超时。此字段为常量。</summary>
    </member>
    <member name="T:System.Threading.WaitOrTimerCallback">
<summary>表示当 <see cref="T:System.Threading.WaitHandle"/> 超时或收到信号时要调用的方法。</summary>
<param name="state">一个对象，包含回调方法在每次执行时要使用的信息。 </param>
<param name="timedOut">如果 <see cref="T:System.Threading.WaitHandle"/> 超时，则为 true；如果已向其发出了信号，则为 false。 </param>
    </member>
    <member name="M:System.Threading.SynchronizationContext.SetThreadStaticContext(System.Threading.SynchronizationContext)">
<summary>[SECURITY CRITICAL] 设置线程静态数据的当前上下文。</summary>
<param name="syncContext">要设置的上下文。</param>
    </member>
    <member name="M:System.Threading.EventWaitHandle.WaitOne">
<summary>阻止当前线程，直到当前 <see cref="T:System.Threading.EventWaitHandle"/> 收到信号。 </summary>
<returns>如果当前实例收到信号，则为 true。如果当前实例永远收不到信号，则 <see cref="M:System.Threading.EventWaitHandle.WaitOne"/> 永不返回。</returns>
    </member>
    <member name="M:System.Threading.Thread.SetProcessorAffinity(System.Int32[])">
<summary>在 .NET Compact Framework for Xbox 360 中，为托管线程设置处理器关联。处理器关联确定在其上运行线程的处理器。</summary>
<param name="cpus">一个标识符数组，它指定允许在其上运行托管线程的硬件线程。对于 Xbox 360，只能指定一个硬件线程 — CPU 数组应该只包含一个元素。硬件线程数必须在 0 到 5 的范围内。XNA Game Studio Express 游戏不应该使用硬件线程 0 或 2；请参阅“备注”。 </param>
<exception cref="T:System.InvalidOperationException">向方法传递了无效的值。 </exception>
    </member>
  </members>
</doc>