<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) Microsoft Corporation.  All rights reserved. -->
<doc>
  <assembly>
    <name>Microsoft.Phone.Reactive</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Phone.Reactive.AsyncLock">
<summary>一次最多运行一个操作。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.AsyncLock.#ctor">
<summary>创建 <see cref="T:Microsoft.Phone.Reactive.AsyncLock"/> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.AsyncLock.Wait(System.Action)">
<summary>设置要运行的操作。</summary>
    </member>
    <member name="T:Microsoft.Phone.Reactive.AsyncSubject`1">
<summary>表示异步操作的结果。</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.AsyncSubject`1.#ctor">
<summary>创建只能接收一个值的主题，并且缓存该值以便将来查看。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.AsyncSubject`1.#ctor(Microsoft.Phone.Reactive.IScheduler)">
<summary>创建只能接收一个值的主题，并且缓存该值以便将来查看。 </summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.AsyncSubject`1.OnCompleted">
<summary>通知所有订阅的观察者序列结束。 </summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.AsyncSubject`1.OnError(System.Exception)">
<summary>通知所有订阅的观察者发生异常。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.AsyncSubject`1.OnNext(`0)">
<summary>通知所有订阅的观察者得到值。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.AsyncSubject`1.Subscribe(System.IObserver{`0})">
<summary>订阅该主题的观察者。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
    </member>
    <member name="T:Microsoft.Phone.Reactive.BehaviorSubject`1">
<summary>表示随时间发生更改的值。</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.BehaviorSubject`1.#ctor(`0)">
<summary>创建一个主题，该主题缓存它的最后一个值并以指定的值开始。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.BehaviorSubject`1.#ctor(`0,Microsoft.Phone.Reactive.IScheduler)">
<summary>创建一个主题，该主题缓存它的最后一个值并以指定的值开始。</summary>
    </member>
    <member name="T:Microsoft.Phone.Reactive.BooleanDisposable">
<summary>表示可以检查状态的 IDisposable。 </summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.BooleanDisposable.#ctor">
<summary> 构造一个新的未释放的 BooleanDisposable。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.BooleanDisposable.Dispose">
<summary> 将状态设置为“已释放”。</summary>
    </member>
    <member name="P:Microsoft.Phone.Reactive.BooleanDisposable.IsDisposed">
<summary>获取一个值，该值指示是否已释放该对象。 </summary>
<returns>返回 <see cref="T:System.Boolean"/>。</returns>
    </member>
    <member name="T:Microsoft.Phone.Reactive.CompositeDisposable">
<summary>表示一起释放的一组 Disposable。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.CompositeDisposable.#ctor(System.IDisposable[])">
<summary>从一组可释放对象中构造一个 GroupDisposable。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.CompositeDisposable.Add(System.IDisposable)">
<summary>向 GroupDisposable 中添加一个可释放对象或释放可释放对象（如果 GroupDisposable 已被释放）。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.CompositeDisposable.Clear">
<summary>从 GroupDisposable 中移除并释放所有可释放对象，但不释放 GroupDisposable。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.CompositeDisposable.Contains(System.IDisposable)">
<summary>确定 GroupDisposable 是否包含特定的可释放对象。</summary>
<returns>返回 <see cref="T:System.Boolean"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.CompositeDisposable.CopyTo(System.IDisposable[],System.Int32)">
<summary>将 GroupDisposable 中包含的可释放对象复制到 Array，从特定的 Array 索引开始。</summary>
    </member>
    <member name="P:Microsoft.Phone.Reactive.CompositeDisposable.Count">
<summary>获取 GroupDisposable 中包含的可释放对象的数量。</summary>
<returns>返回 <see cref="T:System.Int32"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.CompositeDisposable.Dispose">
<summary>释放组中所有可释放的对象并将其从该组中移除。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.CompositeDisposable.GetEnumerator">
<summary>返回迭代 GroupDisposable 的枚举器。</summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.IEnumerator`1"/>。</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.CompositeDisposable.IsReadOnly">
<summary>始终返回 false。</summary>
<returns>返回 <see cref="T:System.Boolean"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.CompositeDisposable.Remove(System.IDisposable)">
<summary>移除并释放 GroupDisposable 中第一次出现的可释放对象。</summary>
<returns>返回 <see cref="T:System.Boolean"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.CompositeDisposable.System#Collections#IEnumerable#GetEnumerator">
<summary>返回迭代 GroupDisposable 的枚举器。</summary>
<returns>返回 IEnumerator。</returns>
    </member>
    <member name="T:Microsoft.Phone.Reactive.ConnectableObservable`1">
<summary>表示一个可观察对象，该对象可以连接其源并且可以断开与其源的连接。</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ConnectableObservable`1.#ctor(System.IObservable{`0})">
<summary>创建一个可观察对象，该对象可以连接其源并且可以断开与其源的连接。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ConnectableObservable`1.#ctor(System.IObservable{`0},Microsoft.Phone.Reactive.ISubject{`0})">
<summary>创建一个可观察对象，该对象可以连接其源并且可以断开与其源的连接。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ConnectableObservable`1.Connect">
<summary>将可观察对象连接到其源。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ConnectableObservable`1.Subscribe(System.IObserver{`0})">
<summary>订阅可观察序列的观察者。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
    </member>
    <member name="T:Microsoft.Phone.Reactive.ContextDisposable">
<summary>表示线程仿射的 IDisposable。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ContextDisposable.#ctor(System.Threading.SynchronizationContext,System.IDisposable)">
<summary>构造一个 ContextDisposable，它在其上使用 SynchronziationContext 来释放可释放对象。</summary>
    </member>
    <member name="P:Microsoft.Phone.Reactive.ContextDisposable.Context">
<summary>获取提供的 SynchronizationContext。</summary>
<returns>返回 <see cref="T:System.Threading.SynchronizationContext"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ContextDisposable.Dispose">
<summary>在提供的 SynchronizationContext 上释放包装的可释放对象。</summary>
    </member>
    <member name="T:Microsoft.Phone.Reactive.CurrentThreadScheduler">
<summary>表示一个对象，该对象在当前线程上计划工作单位。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.CurrentThreadScheduler.EnsureTrampoline(System.Action)">
<summary>确保操作周围有蹦床。</summary>
    </member>
    <member name="P:Microsoft.Phone.Reactive.CurrentThreadScheduler.Now">
<summary>获取计划程序的当前时间概念。</summary>
<returns>返回 <see cref="T:System.DateTimeOffset"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.CurrentThreadScheduler.Schedule(System.Action)">
<summary>计划要执行的操作。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.CurrentThreadScheduler.Schedule(System.Action,System.TimeSpan)">
<summary>计划要在指定的时间间隔后执行的操作。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
    </member>
    <member name="T:Microsoft.Phone.Reactive.DispatcherObservableExtensions">
<summary>提供一组用于使用调度程序订阅 IObservables 的静态方法。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.DispatcherObservableExtensions.ObserveOn``1(System.IObservable{``0},System.Windows.Threading.Dispatcher)">
<summary>使用调度程序异步通知观察者。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.DispatcherObservableExtensions.SubscribeOn``1(System.IObservable{``0},System.Windows.Threading.Dispatcher)">
<summary>使用调度程序异步订阅和取消订阅观察者。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="T:Microsoft.Phone.Reactive.DispatcherScheduler">
<summary>表示一个对象，该对象在调度程序上计划工作单位。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.DispatcherScheduler.#ctor(System.Windows.Threading.Dispatcher)">
<summary>构造一个 DispatcherScheduler，它在调度程序上计划工作单位。</summary>
    </member>
    <member name="P:Microsoft.Phone.Reactive.DispatcherScheduler.Dispatcher">
<summary>获取与 DispatcherScheduler 关联的调度程序。</summary>
<returns>返回 <see cref="T:System.Windows.Threading.Dispatcher"/>。</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.DispatcherScheduler.Now">
<summary>获取计划程序的当前时间概念。</summary>
<returns>返回 <see cref="T:System.DateTimeOffset"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.DispatcherScheduler.Schedule(System.Action)">
<summary>计划要在调度程序上执行的操作。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.DispatcherScheduler.Schedule(System.Action,System.TimeSpan)">
<summary>计划要在指定的时间范围后在调度程序上执行的操作。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Disposable">
<summary>提供一组用于创建可释放对象的静态方法。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Disposable.Create(System.Action)">
<summary>创建释放时调用 dispose 的可释放对象。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Disposable.Empty">
<summary>表示释放时什么也不做的可释放对象。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Event">
<summary>提供一组用于创建事件的静态方法。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Event.Create``1(System.Object,``0)">
<summary>创建 IEvent 接口的实例。</summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.IEvent`1"/>。</returns>
      <typeparam name="TEventArgs"></typeparam>
    </member>
    <member name="T:Microsoft.Phone.Reactive.ExceptionExtensions">
<summary>提供一组用于异常的静态方法。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ExceptionExtensions.PrepareForRethrow(System.Exception)">
<summary>再次引发时保留调用堆栈。</summary>
<returns>返回 <see cref="T:System.Exception"/>。</returns>
    </member>
    <member name="T:Microsoft.Phone.Reactive.IConnectableObservable`1">
<summary>表示可连接也可断开连接的可观察对象。</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.IConnectableObservable`1.Connect">
<summary>连接可观察对象。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
    </member>
    <member name="T:Microsoft.Phone.Reactive.IEvent`1">
<summary>表示 .NET 事件的 Sender 和 EventArg 值。 </summary>
      <typeparam name="TEventArgs"></typeparam>
    </member>
    <member name="P:Microsoft.Phone.Reactive.IEvent`1.EventArgs">
<summary> 获取事件的事件参数值。</summary>
    </member>
    <member name="P:Microsoft.Phone.Reactive.IEvent`1.Sender">
<summary>获取事件的发送方值。 </summary>
<returns>返回 <see cref="T:System.Object"/>。</returns>
    </member>
    <member name="T:Microsoft.Phone.Reactive.IGroupedObservable`2">
<summary> 表示拥有一个通用键的可观察值序列。</summary>
      <typeparam name="TKey"></typeparam>
      <typeparam name="TElement"></typeparam>
    </member>
    <member name="P:Microsoft.Phone.Reactive.IGroupedObservable`2.Key">
<summary>获取通用键。</summary>
    </member>
    <member name="T:Microsoft.Phone.Reactive.ImmediateScheduler">
<summary>表示一个对象，该对象计划工作单位以在当前线程上立即运行。</summary>
    </member>
    <member name="P:Microsoft.Phone.Reactive.ImmediateScheduler.Now">
<summary>获取计划程序的当前时间概念。</summary>
<returns>返回 <see cref="T:System.DateTimeOffset"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ImmediateScheduler.Schedule(System.Action)">
<summary>计划要执行的操作。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ImmediateScheduler.Schedule(System.Action,System.TimeSpan)">
<summary>计划要在指定的时间间隔后执行的操作。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
    </member>
    <member name="T:Microsoft.Phone.Reactive.IObserver`2">
<summary>支持通过可观察序列的推式迭代。</summary>
      <typeparam name="TValue"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.IObserver`2.OnCompleted">
<summary>通知观察者序列结束。</summary>
<returns>返回 <see cref="{0}"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.IObserver`2.OnError(System.Exception)">
<summary>通知观察者发生异常。</summary>
<returns>返回 <see cref="{0}"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.IObserver`2.OnNext(`0)">
<summary>通知观察者序列中的新值。</summary>
<returns>返回 <see cref="{0}"/>。</returns>
    </member>
    <member name="T:Microsoft.Phone.Reactive.IScheduler">
<summary>表示计划工作单位的对象。</summary>
    </member>
    <member name="P:Microsoft.Phone.Reactive.IScheduler.Now">
<summary>获取计划程序的当前时间概念。</summary>
<returns>返回 <see cref="T:System.DateTimeOffset"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.IScheduler.Schedule(System.Action)">
<summary>计划要执行的操作。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.IScheduler.Schedule(System.Action,System.TimeSpan)">
<summary>计划要在指定的时间间隔后执行的操作。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
    </member>
    <member name="T:Microsoft.Phone.Reactive.ISubject`1">
<summary>表示一个对象，该对象既是可观察序列也是一个观察者。</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:Microsoft.Phone.Reactive.ISubject`2">
<summary>表示一个对象，该对象既是可观察序列也是一个观察者。</summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
    </member>
    <member name="T:Microsoft.Phone.Reactive.MutableDisposable">
<summary>表示一个可释放对象，可以将其基础可释放对象交换为另一个可释放对象。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.MutableDisposable.#ctor">
<summary>构造一个不包含当前基础可释放对象的新 MutableDisposable。</summary>
    </member>
    <member name="P:Microsoft.Phone.Reactive.MutableDisposable.Disposable">
<summary>获取一个值，该值指示 MutableDisposable 是否具有基础可释放对象。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.MutableDisposable.Dispose">
<summary>释放基础可释放对象以及所有将来的替换内容。</summary>
    </member>
    <member name="T:Microsoft.Phone.Reactive.NewThreadScheduler">
<summary>表示一个对象，该对象在当前线程上计划工作单位。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.NewThreadScheduler.#ctor">
<summary>创建 <see cref="T:Microsoft.Phone.Reactive.NewThreadScheduler"/> 类的新实例。</summary>
    </member>
    <member name="P:Microsoft.Phone.Reactive.NewThreadScheduler.Now">
<summary>获取计划程序的当前时间概念。</summary>
<returns>返回 <see cref="T:System.DateTimeOffset"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.NewThreadScheduler.Schedule(System.Action)">
<summary>计划要执行的操作。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.NewThreadScheduler.Schedule(System.Action,System.TimeSpan)">
<summary>计划要在指定的时间间隔后执行的操作。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Notification">
<summary>表示向观察者发送的消息。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification.ToObservable``1(Microsoft.Phone.Reactive.Notification{``0})">
<summary>将 <see cref="T:Microsoft.Phone.Reactive.Notification"/> 转换为 <see cref="T:Microsoft.Phone.Reactive.Observable"/>。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification.ToObservable``1(Microsoft.Phone.Reactive.Notification{``0},Microsoft.Phone.Reactive.IScheduler)">
<summary>将 <see cref="T:Microsoft.Phone.Reactive.Notification"/> 转换为 <see cref="T:Microsoft.Phone.Reactive.Observable"/>。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Notification`1">
<summary> 表示观察者的通知。</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.Accept``1(Microsoft.Phone.Reactive.IObserver{`0,``0})">
<summary>调用与通知相对应的观察者的方法并返回生成的结果。</summary>
<returns>N/A</returns>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.Accept(System.Action{`0},System.Action{System.Exception},System.Action)">
<summary>调用与通知相对应的委托。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.Accept``1(System.Func{`0,``0},System.Func{System.Exception,``0},System.Func{``0})">
<summary>调用与通知相对应的委托并返回生成的结果。</summary>
<returns>N/A</returns>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.Accept(System.IObserver{`0})">
<summary>调用与通知相对应的观察者的方法。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.Equals(Microsoft.Phone.Reactive.Notification{`0})">
<summary>指示此实例和其他实例是否相等。</summary>
<returns>返回 <see cref="T:System.Boolean"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.Equals(System.Object)">
<summary>指示此实例与指定对象是否相等。 </summary>
<returns>返回 <see cref="T:System.Boolean"/>。</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.Exception">
<summary> 返回 OnError 通知的异常或返回 null。</summary>
<returns>返回 <see cref="T:System.Exception"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>返回 <see cref="T:System.Int32"/>。</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.HasValue">
<summary> 返回通知是否具有值。</summary>
<returns>返回 <see cref="T:System.Boolean"/>。</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.Kind">
<summary> 获取所表示的通知种类。</summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.NotificationKind"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.op_Equality(Microsoft.Phone.Reactive.Notification{`0},Microsoft.Phone.Reactive.Notification{`0})">
<summary>指示左右是否相等。</summary>
<returns>返回 <see cref="T:System.Boolean"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.op_Inequality(Microsoft.Phone.Reactive.Notification{`0},Microsoft.Phone.Reactive.Notification{`0})">
<summary>指示左右是否不等。</summary>
<returns>返回 <see cref="T:System.Boolean"/>。</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.Value">
<summary>返回 OnNext 通知的值或引发异常。 </summary>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Notification`1.OnCompleted">
<summary>表示观察者的 OnCompleted 通知。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnCompleted.#ctor">
<summary>构造序列结束的通知。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnCompleted.Accept``1(Microsoft.Phone.Reactive.IObserver{`0,``0})">
<summary>调用与通知相对应的观察者的方法并返回生成的结果。（从 <see cref="T:Microsoft.Phone.Reactive.Notification`1"/> 继承）</summary>
<returns>返回 <see cref="{0}"/>。</returns>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnCompleted.Accept(System.Action{`0},System.Action{System.Exception},System.Action)">
<summary>调用与通知相对应的观察者的方法或委托。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnCompleted.Accept``1(System.Func{`0,``0},System.Func{System.Exception,``0},System.Func{``0})">
<summary>调用与通知相对应的委托并返回生成的结果。（从 <see cref="T:Microsoft.Phone.Reactive.Notification`1"/> 继承）</summary>
<returns>返回 <see cref="{0}"/>。</returns>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnCompleted.Accept(System.IObserver{`0})">
<summary>调用与通知相对应的观察者的方法。（从 <see cref="T:Microsoft.Phone.Reactive.Notification`1"/> 继承）</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnCompleted.Equals(Microsoft.Phone.Reactive.Notification{`0})">
<summary>指示此实例和其他实例是否相等。（从 <see cref="T:Microsoft.Phone.Reactive.Notification`1"/> 继承）</summary>
<returns>返回 <see cref="T:System.Boolean"/>。</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.OnCompleted.Exception">
<summary>返回 null。</summary>
<returns>返回 <see cref="T:System.Exception"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnCompleted.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>返回 <see cref="T:System.Int32"/>。</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.OnCompleted.HasValue">
<summary>返回 false。</summary>
<returns>返回 <see cref="T:System.Boolean"/>。</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.OnCompleted.Kind">
<summary>返回 <see cref="F:Microsoft.Phone.Reactive.NotificationKind.OnCompleted"/>。</summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.NotificationKind"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnCompleted.ToString">
<summary>返回此实例的字符串表示形式。</summary>
<returns>返回 <see cref="T:System.String"/>。</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.OnCompleted.Value">
<summary>引发 InvalidOperationException。</summary>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Notification`1.OnError">
<summary>表示观察者的 OnError 通知。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnError.#ctor(System.Exception)">
<summary>构造一个异常的通知。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnError.Accept``1(Microsoft.Phone.Reactive.IObserver{`0,``0})">
<summary>调用与通知相对应的观察者的方法并返回生成的结果。（从 <see cref="T:Microsoft.Phone.Reactive.Notification`1"/> 继承）</summary>
<returns>返回 <see cref="{0}"/>。</returns>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnError.Accept(System.Action{`0},System.Action{System.Exception},System.Action)">
<summary>调用与通知相对应的委托。（从 <see cref="T:Microsoft.Phone.Reactive.Notification`1"/> 继承）</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnError.Accept``1(System.Func{`0,``0},System.Func{System.Exception,``0},System.Func{``0})">
<summary>调用与通知相对应的委托并返回生成的结果。（从 <see cref="T:Microsoft.Phone.Reactive.Notification`1"/> 继承）</summary>
<returns>返回 <see cref="{0}"/>。</returns>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnError.Accept(System.IObserver{`0})">
<summary>调用与通知相对应的观察者的方法。（从 <see cref="T:Microsoft.Phone.Reactive.Notification`1"/> 继承）</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnError.Equals(Microsoft.Phone.Reactive.Notification{`0})">
<summary>指示此实例和其他实例是否相等</summary>
<returns>返回 <see cref="T:System.Boolean"/>。</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.OnError.Exception">
<summary>返回异常。</summary>
<returns>返回 <see cref="T:System.Exception"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnError.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>返回 <see cref="T:System.Int32"/>。</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.OnError.HasValue">
<summary>返回 false。</summary>
<returns>返回 <see cref="T:System.Boolean"/>。</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.OnError.Kind">
<summary>返回 <see cref="F:Microsoft.Phone.Reactive.NotificationKind.OnError"/>。</summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.NotificationKind"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnError.ToString">
<summary>返回此实例的字符串表示形式。</summary>
<returns>返回 <see cref="T:System.String"/>。</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.OnError.Value">
<summary>引发异常。</summary>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Notification`1.OnNext">
<summary>表示观察者的 OnNext 通知。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnNext.#ctor(`0)">
<summary>构造新值的通知。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnNext.Accept``1(Microsoft.Phone.Reactive.IObserver{`0,``0})">
<summary>调用与通知相对应的观察者的方法并返回生成的结果。（从 <see cref="T:Microsoft.Phone.Reactive.Notification`1"/> 继承）</summary>
<returns>返回 <see cref="{0}"/>。</returns>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnNext.Accept(System.Action{`0},System.Action{System.Exception},System.Action)">
<summary>调用与通知相对应的委托。（从 <see cref="T:Microsoft.Phone.Reactive.Notification`1"/> 继承）</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnNext.Accept``1(System.Func{`0,``0},System.Func{System.Exception,``0},System.Func{``0})">
<summary>调用与通知相对应的委托并返回生成的结果。（从 <see cref="T:Microsoft.Phone.Reactive.Notification`1"/> 继承）</summary>
<returns>返回 <see cref="{0}"/>。</returns>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnNext.Accept(System.IObserver{`0})">
<summary>调用与通知相对应的观察者的方法。（从 <see cref="T:Microsoft.Phone.Reactive.Notification`1"/> 继承）</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnNext.Equals(Microsoft.Phone.Reactive.Notification{`0})">
<summary>指示此实例和其他实例是否相等。</summary>
<returns>返回 <see cref="T:System.Boolean"/>。</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.OnNext.Exception">
<summary>返回 null。</summary>
<returns>返回 <see cref="T:System.Exception"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnNext.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>返回 <see cref="T:System.Int32"/>。</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.OnNext.HasValue">
<summary>返回 true。</summary>
<returns>返回 <see cref="T:System.Boolean"/>。</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.OnNext.Kind">
<summary>返回 <see cref="F:Microsoft.Phone.Reactive.NotificationKind.OnNext"/>。</summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.NotificationKind"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnNext.ToString">
<summary>返回此实例的字符串表示形式。</summary>
<returns>返回 <see cref="T:System.String"/>。</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.OnNext.Value">
<summary>返回 <see cref="F:Microsoft.Phone.Reactive.NotificationKind.OnNext"/>。</summary>
    </member>
    <member name="T:Microsoft.Phone.Reactive.NotificationKind">
<summary>枚举可能调用的通知种类。</summary>
    </member>
    <member name="F:Microsoft.Phone.Reactive.NotificationKind.OnNext">
<summary>OnNext 通知。</summary>
    </member>
    <member name="F:Microsoft.Phone.Reactive.NotificationKind.OnError">
<summary>OnError 通知。</summary>
    </member>
    <member name="F:Microsoft.Phone.Reactive.NotificationKind.OnCompleted">
<summary>OnCompleted 通知。</summary>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Observable">
<summary>为可观察序列上的查询操作提供一组静态方法。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Aggregate``1(System.IObservable{``0},System.Func{``0,``0,``0})">
<summary>在可观察序列上应用累加器函数。指定的种子值用作初始的累加器值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Aggregate``2(System.IObservable{``0},``1,System.Func{``1,``0,``1})">
<summary>在可观察序列上应用累加器函数。指定的种子值用作初始的累加器值。  </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TAccumulate"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.All``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
<summary> 确定可观察序列的所有值是否满足某个条件。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Amb``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
<summary>返回第一个作出响应的可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})">
<summary>返回第一个作出响应的可观察序列。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Amb``1(System.IObservable{``0}[])">
<summary>返回第一个作出响应的可观察序列。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.And``2(System.IObservable{``0},System.IObservable{``1})">
<summary>当两个可观察序列都具有可用值时匹配。  </summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.Pattern`2"/>。</returns>
      <typeparam name="TLeft"></typeparam>
      <typeparam name="TRight"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Any``1(System.IObservable{``0})">
<summary>  确定可观察序列是否包含任何值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Any``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
<summary>  确定可观察序列是否包含任何值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.AsObservable``1(System.IObservable{``0})">
<summary>隐藏可观察序列的身份。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Average(System.IObservable{System.Decimal})">
<summary>计算值的可观察序列的平均值。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Average(System.IObservable{System.Double})">
<summary>计算值的可观察序列的平均值。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Average(System.IObservable{System.Int32})">
<summary>计算值的可观察序列的平均值。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Average(System.IObservable{System.Int64})">
<summary>计算值的可观察序列的平均值。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Average(System.IObservable{System.Nullable{System.Decimal}})">
<summary>计算值的可观察序列的平均值。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Average(System.IObservable{System.Nullable{System.Double}})">
<summary>计算值的可观察序列的平均值。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Average(System.IObservable{System.Nullable{System.Int32}})">
<summary>计算值的可观察序列的平均值。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Average(System.IObservable{System.Nullable{System.Int64}})">
<summary>计算值的可观察序列的平均值。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Average(System.IObservable{System.Nullable{System.Single}})">
<summary>计算值的可观察序列的平均值。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Average(System.IObservable{System.Single})">
<summary>计算值的可观察序列的平均值。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.BufferWithCount``1(System.IObservable{``0},System.Int32)">
<summary>将可观察序列的每个值投射到缓冲区中。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.BufferWithCount``1(System.IObservable{``0},System.Int32,System.Int32)">
<summary>将可观察序列的每个值投射到缓冲区中。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.BufferWithTime``1(System.IObservable{``0},System.TimeSpan)">
<summary>   将可观察序列的每个值投射到缓冲区中。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.BufferWithTime``1(System.IObservable{``0},System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
<summary>  将可观察序列的每个值投射到缓冲区中。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.BufferWithTime``1(System.IObservable{``0},System.TimeSpan,System.TimeSpan)">
<summary>   将可观察序列的每个值投射到缓冲区中。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.BufferWithTime``1(System.IObservable{``0},System.TimeSpan,System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
<summary>   将可观察序列的每个值投射到缓冲区中。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.BufferWithTimeOrCount``1(System.IObservable{``0},System.TimeSpan,System.Int32)">
<summary>将可观察序列的每个值投射到缓冲区中，当缓冲区已满或者经过了给定的时间时发送出去。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.BufferWithTimeOrCount``1(System.IObservable{``0},System.TimeSpan,System.Int32,Microsoft.Phone.Reactive.IScheduler)">
<summary>将可观察序列的每个值投射到缓冲区中，当缓冲区已满或者经过了给定的时间时发送出去。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Case``2(System.Func{``0},System.Collections.Generic.IDictionary{``0,System.IObservable{``1}})">
<summary>使用选择器来确定要使用源中的哪个源，如果找不到匹配项，则使用空源。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TValue"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Case``2(System.Func{``0},System.Collections.Generic.IDictionary{``0,System.IObservable{``1}},Microsoft.Phone.Reactive.IScheduler)">
<summary>使用选择器来确定要使用源中的哪个源，如果找不到匹配项，则使用空源。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TValue"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Case``2(System.Func{``0},System.Collections.Generic.IDictionary{``0,System.IObservable{``1}},System.IObservable{``1})">
<summary>使用选择器来确定要使用源中的哪个源，如果找不到匹配项，则使用指定的默认源。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TValue"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Cast``1(System.IObservable{System.Object})">
<summary>  将值强制转换为给定的类型。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Catch``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
<summary>继续可观察序列，下一个可观察序列出现异常时终止该序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Catch``2(System.IObservable{``0},System.Func{``1,System.IObservable{``0}})">
<summary> 继续可观察序列，下一个可观察序列出现异常时终止该序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TException"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Catch``1(System.IObservable{``0},System.IObservable{``0})">
<summary> 继续可观察序列，下一个可观察序列出现异常时终止该序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Catch``1(System.IObservable{``0}[])">
<summary> 继续可观察序列，下一个可观察序列出现异常时终止该序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.CombineLatest``3(System.IObservable{``0},System.IObservable{``1},System.Func{``0,``1,``2})">
<summary>  通过使用选择器函数将两个可观察序列合并成一个可观察序列（只要其中一个可观察序列具有新值）。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TLeft"></typeparam>
      <typeparam name="TRight"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Concat``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
<summary>连接所有可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Concat``1(System.IObservable{``0},System.IObservable{``0})">
<summary> 连接两个可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Concat``1(System.IObservable{``0}[])">
<summary> 连接所有可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Contains``1(System.IObservable{``0},``0)">
<summary> 使用默认的比较器确定可观察序列是否包含指定的值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Contains``1(System.IObservable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
<summary>使用指定的比较器确定可观察序列是否包含指定的值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Count``1(System.IObservable{``0})">
<summary> 返回可观察序列中元素的个数。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Create``1(System.Func{System.IObserver{``0},System.Action})">
<summary>从订阅实现中创建可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.CreateWithDisposable``1(System.Func{System.IObserver{``0},System.IDisposable})">
<summary>  从订阅实现中创建可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Defer``1(System.Func{System.IObservable{``0}})">
<summary>返回一个可观察序列，只要新的观察者订阅，该序列就会调用 observableFactory 函数。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Delay``1(System.IObservable{``0},System.DateTimeOffset)">
<summary>将可观察序列的时间移位指定的时间间隔。保留值之间的相对时间间隔。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Delay``1(System.IObservable{``0},System.DateTimeOffset,Microsoft.Phone.Reactive.IScheduler)">
<summary>将可观察序列的时间移位指定的时间间隔。保留值之间的相对时间间隔。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Delay``1(System.IObservable{``0},System.TimeSpan)">
<summary>将可观察序列的时间移位指定的时间间隔。保留值之间的相对时间间隔。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Delay``1(System.IObservable{``0},System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
<summary>将可观察序列的时间移位指定的时间间隔。保留值之间的相对时间间隔。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Dematerialize``1(System.IObservable{Microsoft.Phone.Reactive.Notification{``0}})">
<summary>  将可观察序列的显式通知值非物质化为隐式通知。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.DistinctUntilChanged``1(System.IObservable{``0})">
<summary>返回一个可观察序列，它只包含独特的连续值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.DistinctUntilChanged``1(System.IObservable{``0},System.Collections.Generic.IEqualityComparer{``0})">
<summary>返回一个可观察序列，根据比较器它只包含独特的连续值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.DistinctUntilChanged``2(System.IObservable{``0},System.Func{``0,``1})">
<summary>返回一个可观察序列，根据 keySelector 它只包含独特的连续值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TKey"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.DistinctUntilChanged``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
<summary>返回一个可观察序列，根据 keySelector 和比较器它只包含独特的连续值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TKey"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Do``1(System.IObservable{``0},System.Action{``0})">
<summary>调用该操作以便对可观察序列中的每个值产生它的副作用</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Do``1(System.IObservable{``0},System.Action{``0},System.Action)">
<summary>调用该操作以便对可观察序列中的每个值产生它的副作用。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Do``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception})">
<summary>   调用该操作以便对可观察序列中的每个值产生它的副作用。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Do``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
<summary>调用该操作以便对可观察序列中的每个值产生它的副作用。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Do``1(System.IObservable{``0},System.IObserver{``0})">
<summary>   调用该操作以便对可观察序列中的每个值产生它的副作用。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.DoWhile``1(System.Func{System.Boolean},System.IObservable{``0})">
<summary>只要条件包含就重复源。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Empty``1">
<summary>返回空的可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Empty``1(Microsoft.Phone.Reactive.IScheduler)">
<summary>返回空的可观察序列。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Finally``1(System.IObservable{``0},System.Action)">
<summary> 在源可观察序列正常终止或由于异常终止之后调用 finallyAction。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.First``1(System.IObservable{``0})">
<summary> 返回可观察序列的第一个值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.FirstOrDefault``1(System.IObservable{``0})">
<summary>返回可观察序列的第一个值，如果未找到值，则返回默认值。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.For``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.IObservable{``1}})">
<summary>连接通过对源中每个元素运行指定结果选择器获得的可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ForkJoin``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
<summary>并行运行所有可观察序列并组合其最后的值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ForkJoin``3(System.IObservable{``0},System.IObservable{``1},System.Func{``0,``1,``2})">
<summary> 并行运行所有可观察序列并组合其最后的值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TLeft"></typeparam>
      <typeparam name="TRight"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ForkJoin``1(System.IObservable{``0}[])">
<summary>并行运行所有可观察序列并组合其第一个值。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.FromAsyncPattern(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
<summary> 将 Begin/End 调用函数对转换为异步函数。</summary>
<returns>返回 <see cref="T:System.Func`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.FromAsyncPattern``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0})">
<summary> 将 Begin/End 调用函数对转换为异步函数。</summary>
<returns>返回 <see cref="T:System.Func`1"/>。</returns>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.FromAsyncPattern``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
<summary> 将 Begin/End 调用函数对转换为异步函数。</summary>
<returns>返回 <see cref="T:System.Func`2"/>。</returns>
      <typeparam name="T1"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.FromAsyncPattern``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1})">
<summary> 将 Begin/End 调用函数对转换为异步函数。</summary>
<returns>返回 <see cref="T:System.Func`2"/>。</returns>
      <typeparam name="T1"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.FromAsyncPattern``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
<summary> 将 Begin/End 调用函数对转换为异步函数。</summary>
<returns>返回 <see cref="T:System.Func`3"/>。</returns>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.FromAsyncPattern``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2})">
<summary> 将 Begin/End 调用函数对转换为异步函数。</summary>
<returns>返回 <see cref="T:System.Func`3"/>。</returns>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.FromEvent``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}})">
<summary> 返回一个可观察序列，该序列包含基础 .NET 事件的值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TEventArgs"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.FromEvent``2(System.Func{System.EventHandler{``1},``0},System.Action{``0},System.Action{``0})">
<summary> 返回一个可观察序列，该序列包含基础 .NET 事件的值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TDelegate"></typeparam>
      <typeparam name="TEventArgs"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.FromEvent``1(System.Object,System.String)">
<summary> 返回一个可观察序列，该序列包含基础 .NET 事件的值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TEventArgs"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``1},System.Func{``0,``0})">
<summary>通过从初始状态迭代状态直到条件失败生成一个可观察序列。  </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TState"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``1},System.Func{``0,``0},Microsoft.Phone.Reactive.IScheduler)">
<summary>通过从初始状态迭代状态直到条件失败生成一个可观察序列。  </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TState"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.GenerateWithTime``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``1},System.Func{``0,System.DateTimeOffset},System.Func{``0,``0})">
<summary>通过从初始状态迭代状态直到条件失败生成一个可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TState"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.GenerateWithTime``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``1},System.Func{``0,System.DateTimeOffset},System.Func{``0,``0},Microsoft.Phone.Reactive.IScheduler)">
<summary>通过从初始状态迭代状态直到条件失败生成一个可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TState"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.GenerateWithTime``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``1},System.Func{``0,System.TimeSpan},System.Func{``0,``0})">
<summary>通过从初始状态迭代状态直到条件失败生成一个可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TState"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.GenerateWithTime``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``1},System.Func{``0,System.TimeSpan},System.Func{``0,``0},Microsoft.Phone.Reactive.IScheduler)">
<summary>通过从初始状态迭代状态直到条件失败生成一个可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TState"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.GetEnumerator``1(System.IObservable{``0})">
<summary> 返回枚举可观察序列的所有值的枚举器。</summary>
<returns>返回 IEnumerator。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.GroupBy``2(System.IObservable{``0},System.Func{``0,``1})">
<summary>根据指定的键选择器函数对可观察序列的元素进行分组。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TKey"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.GroupBy``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
<summary>根据指定的键选择器函数和比较器对可观察序列的元素进行分组。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TKey"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.GroupBy``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2})">
<summary>  对可观察序列的元素进行分组，并使用指定的函数选择所得到的元素。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TKey"></typeparam>
      <typeparam name="TElement"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.GroupBy``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
<summary>根据指定的键选择器函数和比较器对可观察序列的元素进行分组，并使用指定的函数选择所得到的元素。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TKey"></typeparam>
      <typeparam name="TElement"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.If``1(System.Func{System.Boolean},System.IObservable{``0},System.IObservable{``0})">
<summary>确定可观察集合是否包含值。  </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Interval(System.TimeSpan)">
<summary> 返回每段时间之后产生值的可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Interval(System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
<summary> 返回每段时间之后产生值的可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.IsEmpty``1(System.IObservable{``0})">
<summary>确定可观察集合是否为空。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Join``1(Microsoft.Phone.Reactive.Plan{``0}[])">
<summary>将来自多个模式的结果联接到一起。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Join``1(System.Collections.Generic.IEnumerable{Microsoft.Phone.Reactive.Plan{``0}})">
<summary>将来自多个模式的结果联接到一起。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Last``1(System.IObservable{``0})">
<summary>返回可观察序列的最后一个值。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.LastOrDefault``1(System.IObservable{``0})">
<summary>返回可观察序列的最后一个值，如果未找到值，则返回默认值。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Latest``1(System.IObservable{``0})">
<summary>对可观察序列中最近的值（使用最多的缓冲区）进行取样。 </summary>
<returns>返回 IEnumerable。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Let``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}})">
<summary>将源绑定到参数，而不共享订阅副作用。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Let``2(``0,System.Func{``0,System.IObservable{``1}})">
<summary>将源绑定到参数，而不共享订阅副作用。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TValue"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.LongCount``1(System.IObservable{``0})">
<summary>返回一个 Int64，它表示可观察序列中值的总数。返回一个 Int64，它表示可观察序列中值的总数。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Materialize``1(System.IObservable{``0})">
<summary>将可观察序列的隐式通知具体化为显式通知值。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Max(System.IObservable{System.Decimal})">
<summary>返回 System.Decimal 的可观察序列中的最大值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Max(System.IObservable{System.Double})">
<summary>返回 System.Double 值的可观察序列中的最大值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Max(System.IObservable{System.Int32})">
<summary>返回 System.Int32 值的可观察序列中的最大值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Max(System.IObservable{System.Int64})">
<summary>  返回 System.Int64 值的可观察序列中的最大值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Max(System.IObservable{System.Nullable{System.Decimal}})">
<summary>  返回可为 null 的 System.Decimal 值的可观察序列中的最大值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Max(System.IObservable{System.Nullable{System.Double}})">
<summary>  返回可为 null 的 System.Double 值的可观察序列中的最大值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Max(System.IObservable{System.Nullable{System.Int32}})">
<summary>  返回可为 null 的 System.Int32 值的可观察序列中的最大值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Max(System.IObservable{System.Nullable{System.Int64}})">
<summary>  返回可为 null 的 System.Int64 值的可观察序列中的最大值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Max(System.IObservable{System.Nullable{System.Single}})">
<summary>  返回 System.Float 值的可观察序列中的最大值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Max(System.IObservable{System.Single})">
<summary>  返回可观察序列中的最大值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Max``1(System.IObservable{``0})">
<summary>  返回可观察序列中的最大值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Max``1(System.IObservable{``0},System.Collections.Generic.IComparer{``0})">
<summary>  返回可观察序列中由指定比较器函数确定的最大值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.MaxBy``2(System.IObservable{``0},System.Func{``0,``1})">
<summary>返回可观察序列中具有最大键值的元素。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TKey"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.MaxBy``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
<summary>返回可观察序列中具有最大键值的元素。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TKey"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Merge``1(Microsoft.Phone.Reactive.IScheduler,System.IObservable{``0}[])">
<summary> 将可观察序列的可观察序列合并到一个可观察序列中。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Merge``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
<summary>将可观察序列的可观察序列合并到一个可观察序列中。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Merge``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}},Microsoft.Phone.Reactive.IScheduler)">
<summary>将可观察序列的可观察序列合并到一个可观察序列中。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Merge``1(System.IObservable{System.IObservable{``0}})">
<summary> 将可观察序列的可观察序列合并到一个可观察序列中。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Merge``1(System.IObservable{``0},System.IObservable{``0})">
<summary> 将可观察序列的可观察序列合并到一个可观察序列中。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Merge``1(System.IObservable{``0},System.IObservable{``0},Microsoft.Phone.Reactive.IScheduler)">
<summary> 将可观察序列的可观察序列合并到一个可观察序列中。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Merge``1(System.IObservable{``0}[])">
<summary>将可观察序列的可观察序列合并到一个可观察序列中。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Min(System.IObservable{System.Decimal})">
<summary>  返回 System.Decimal 值的可观察序列中的最小值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Min(System.IObservable{System.Double})">
<summary>  返回 System.Double 值的可观察序列中的最小值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Min(System.IObservable{System.Int32})">
<summary>  返回 System.Int32 值的可观察序列中的最小值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Min(System.IObservable{System.Int64})">
<summary>  返回 System.Int64 值的可观察序列中的最小值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Min(System.IObservable{System.Nullable{System.Decimal}})">
<summary>  返回可为 null 的 System.Decimal 值的可观察序列中的最小值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Min(System.IObservable{System.Nullable{System.Double}})">
<summary>  返回可为 null 的 System.Double 值的可观察序列中的最小值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Min(System.IObservable{System.Nullable{System.Int32}})">
<summary>  返回可为 null 的 System.Int32 值的可观察序列中的最小值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Min(System.IObservable{System.Nullable{System.Int64}})">
<summary>  返回可为 null 的 System.Int64 值的可观察序列中的最小值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Min(System.IObservable{System.Nullable{System.Single}})">
<summary>  返回可观察序列中的最小值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Min(System.IObservable{System.Single})">
<summary>  返回可观察序列中的最小值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Min``1(System.IObservable{``0})">
<summary>  返回可观察序列中的最小值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Min``1(System.IObservable{``0},System.Collections.Generic.IComparer{``0})">
<summary>  返回可观察序列中由指定比较器函数确定的最小值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.MinBy``2(System.IObservable{``0},System.Func{``0,``1})">
<summary>返回可观察序列中具有最小键值的元素。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TKey"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.MinBy``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
<summary>返回可观察序列中具有最小键值的元素。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TKey"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.MostRecent``1(System.IObservable{``0},``0)">
<summary> 对可观察序列中最近的值（未使用最多的缓冲区）进行取样。</summary>
<returns>返回 IEnumerable。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Never``1">
<summary> 返回一个非终止的可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Next``1(System.IObservable{``0})">
<summary> 从可观察序列中对下一个值（无缓冲阻止）进行取样。</summary>
<returns>返回 IEnumerable。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ObserveOn``1(System.IObservable{``0},Microsoft.Phone.Reactive.DispatcherScheduler)">
<summary> 使用计划程序异步通知观察者。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ObserveOn``1(System.IObservable{``0},Microsoft.Phone.Reactive.IScheduler)">
<summary> 使用计划程序异步通知观察者。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ObserveOn``1(System.IObservable{``0},System.Threading.SynchronizationContext)">
<summary> 在同步上下文中异步通知观察者。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ObserveOnDispatcher``1(System.IObservable{``0})">
<summary>使用当前调度程序异步通知观察者。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.OfType``1(System.IObservable{System.Object})">
<summary> 筛选给定类型的值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.OnErrorResumeNext``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
<summary>继续可观察序列，该序列正常终止或者在下一个可观察序列出现异常时终止。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.OnErrorResumeNext``1(System.IObservable{``0},System.IObservable{``0})">
<summary>继续可观察序列，该序列正常终止或者在下一个可观察序列出现异常时终止。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.OnErrorResumeNext``1(System.IObservable{``0}[])">
<summary>继续可观察序列，该序列正常终止或者在下一个可观察序列出现异常时终止。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Prune``1(System.IObservable{``0})">
<summary>返回一个可连接的可观察序列，它共享对只包含最后一个通知的基础源的单一订阅。</summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.IConnectableObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Prune``1(System.IObservable{``0},Microsoft.Phone.Reactive.IScheduler)">
<summary>返回一个可连接的可观察序列，它共享对只包含最后一个通知的基础源的单一订阅。</summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.IConnectableObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Prune``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}})">
<summary>返回一个可观察序列，该序列是对可连接的可观察序列调用选择器的结果，同时该可连接的可观察序列共享对只包含最后一个通知的基础源的单一订阅。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Prune``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},Microsoft.Phone.Reactive.IScheduler)">
<summary>返回一个可观察序列，该序列是对可连接的可观察序列调用选择器的结果，同时该可连接的可观察序列共享对只包含最后一个通知的基础源的单一订阅。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Publish``1(System.IObservable{``0})">
<summary>返回一个可连接的可观察序列，该序列共享对基础源的单一订阅。</summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.IConnectableObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Publish``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}})">
<summary>返回一个可观察序列，该序列是对可连接的可观察序列调用选择器的结果，同时该可连接的可观察序列共享对基础源的单一订阅。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Publish``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},``0)">
<summary>返回一个可观察序列，该序列是对可连接的可观察序列调用选择器的结果，同时该可连接的可观察序列共享对基础源的单一订阅并以 initialValue 开始。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Publish``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},``0,Microsoft.Phone.Reactive.IScheduler)">
<summary>返回一个可观察序列，该序列是对可连接的可观察序列调用选择器的结果，同时该可连接的可观察序列共享对基础源的单一订阅并以 initialValue 开始。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Publish``1(System.IObservable{``0},``0)">
<summary>返回一个可连接的可观察序列，该序列共享对基础源的单一订阅并以 initialValue 开始。</summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.IConnectableObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Publish``1(System.IObservable{``0},``0,Microsoft.Phone.Reactive.IScheduler)">
<summary>返回一个可连接的可观察序列，该序列共享对基础源的单一订阅并以 initialValue 开始。 </summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.IConnectableObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Range(System.Int32,System.Int32)">
<summary>在指定的范围内生成整数的可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Range(System.Int32,System.Int32,Microsoft.Phone.Reactive.IScheduler)">
<summary>在指定的范围内生成整数的可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.RefCount``1(Microsoft.Phone.Reactive.IConnectableObservable{``0})">
<summary>返回一个可观察序列，只要至少存在一个可观察序列的订阅，该序列就保持与源的连接。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.RemoveTimeInterval``1(System.IObservable{Microsoft.Phone.Reactive.TimeInterval{``0}})">
<summary>从可观察序列的每个值中移除时间戳。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.RemoveTimestamp``1(System.IObservable{Microsoft.Phone.Reactive.Timestamped{``0}})">
<summary>从可观察序列的每个值中移除时间戳。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Repeat``1(System.IObservable{``0})">
<summary>无限重复可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Repeat``1(System.IObservable{``0},System.Int32)">
<summary>重复指定次数的可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Repeat``1(``0)">
<summary>生成含一个重复值的可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Repeat``1(``0,Microsoft.Phone.Reactive.IScheduler)">
<summary>生成含一个重复值的可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Repeat``1(``0,System.Int32)">
<summary>生成含一个重复值的可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Repeat``1(``0,System.Int32,Microsoft.Phone.Reactive.IScheduler)">
<summary>生成含一个重复值的可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``1(System.IObservable{``0})">
<summary>返回一个可连接的可观察序列，该序列共享对基础源（重新播放所有通知）的单一订阅。</summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.IConnectableObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``1(System.IObservable{``0},Microsoft.Phone.Reactive.IScheduler)">
<summary>返回一个可连接的可观察序列，该序列共享对基础源（重新播放所有通知）的单一订阅。</summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.IConnectableObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}})">
<summary>返回一个可观察序列，该序列是对可连接的可观察序列调用选择器的结果，同时该可连接的可观察序列共享对基础源（重新播放所有通知）的单一订阅。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},Microsoft.Phone.Reactive.IScheduler)">
<summary>返回一个可观察序列，该序列是对可连接的可观察序列调用选择器的结果，同时该可连接的可观察序列共享对基础源（重新播放所有通知）的单一订阅。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Int32)">
<summary>返回一个可观察序列，该序列是对可连接的可观察序列调用选择器的结果，同时该可连接的可观察序列共享对基础源（重新播放 bufferSize 通知）的单一订阅。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Int32,Microsoft.Phone.Reactive.IScheduler)">
<summary>返回一个可观察序列，该序列是对可连接的可观察序列调用选择器的结果，同时该可连接的可观察序列共享对基础源（重新播放 bufferSize 通知）的单一订阅。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Int32,System.TimeSpan)">
<summary>返回一个可观察序列，该序列是对可连接的可观察序列调用选择器的结果，同时该可连接的可观察序列共享对基础源（在窗口中重新播放 bufferSize 通知）的单一订阅。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Int32,System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
<summary>返回一个可观察序列，该序列是对可连接的可观察序列调用选择器的结果，同时该可连接的可观察序列共享对基础源（在窗口中重新播放 bufferSize 通知）的单一订阅。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.TimeSpan)">
<summary>返回一个可观察序列，该序列是对可连接的可观察序列调用选择器的结果，同时该可连接的可观察序列共享对基础源（在窗口中重新播放所有通知）的单一订阅。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
<summary>返回一个可观察序列，该序列是对可连接的可观察序列调用选择器的结果，同时该可连接的可观察序列共享对基础源（在窗口中重新播放所有通知）的单一订阅。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``1(System.IObservable{``0},System.Int32)">
<summary>返回一个可连接的可观察序列，该序列共享对基础源（重新播放 bufferSize 通知）的单一订阅。 </summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.IConnectableObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``1(System.IObservable{``0},System.Int32,Microsoft.Phone.Reactive.IScheduler)">
<summary>返回一个可连接的可观察序列，该序列共享对基础源（在窗口中重新播放 bufferSize 通知）的单一订阅。</summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.IConnectableObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``1(System.IObservable{``0},System.Int32,System.TimeSpan)">
<summary>返回一个可连接的可观察序列，该序列共享对基础源（在窗口中重新播放 bufferSize 通知）的单一订阅。</summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.IConnectableObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``1(System.IObservable{``0},System.Int32,System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
<summary>返回一个可连接的可观察序列，该序列共享对基础源（在窗口中重新播放 bufferSize 通知）的单一订阅。 </summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.IConnectableObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``1(System.IObservable{``0},System.TimeSpan)">
<summary>返回一个可连接的可观察序列，该序列共享对基础源（在窗口中重新播放所有通知）的单一订阅。 </summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.IConnectableObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``1(System.IObservable{``0},System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
<summary>返回一个可连接的可观察序列，该序列共享对基础源（在窗口中重新播放所有通知）的单一订阅。 </summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.IConnectableObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Retry``1(System.IObservable{``0})">
<summary>重复源可观察序列，直到它成功终止为止。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Retry``1(System.IObservable{``0},System.Int32)">
<summary>重复源可观察序列 retryCount 次或者直到它成功终止为止。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Return``1(``0)">
<summary>返回包含一个值的可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Return``1(``0,Microsoft.Phone.Reactive.IScheduler)">
<summary>返回包含一个值的可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Run``1(System.IObservable{``0})">
<summary>调用可观察序列以便实现其副作用并在序列终止之前阻止。</summary>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Run``1(System.IObservable{``0},System.Action{``0})">
<summary>调用该操作以实现可观察序列中每个值的副作用并在序列终止之前阻止。</summary>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Run``1(System.IObservable{``0},System.Action{``0},System.Action)">
<summary>调用该操作以实现可观察序列中每个值的副作用并在序列终止之前阻止。</summary>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Run``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception})">
<summary>调用该操作以实现可观察序列中每个值的副作用并在序列终止之前阻止。</summary>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Run``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
<summary>调用该操作以实现可观察序列中每个值的副作用并在序列终止之前阻止。</summary>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Run``1(System.IObservable{``0},System.IObserver{``0})">
<summary>调用该操作以实现可观察序列中每个值的副作用并在序列终止之前阻止。</summary>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Sample``1(System.IObservable{``0},System.TimeSpan)">
<summary>每隔一段时间就对可观察序列进行取样。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Sample``1(System.IObservable{``0},System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
<summary>每隔一段时间就对可观察序列进行取样。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Scan``1(System.IObservable{``0},System.Func{``0,``0,``0})">
<summary>对可观察序列应用累加器函数并返回每个中间结果。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Scan``2(System.IObservable{``0},``1,System.Func{``1,``0,``1})">
<summary>对可观察序列应用累加器函数并返回每个中间结果。指定的种子值用作初始的累加器值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TAccumulate"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Scan0``2(System.IObservable{``0},``1,System.Func{``1,``0,``1})">
<summary>对可观察序列应用累加器函数并返回每个中间结果。消息传来时将指定的种子值置于序列前面。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TAccumulate"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Select``2(System.IObservable{``0},System.Func{``0,``1})">
<summary>将可观察序列的每个值投射到新表格中。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Select``2(System.IObservable{``0},System.Func{``0,System.Int32,``1})">
<summary>通过合并元素的索引将可观察序列的每个值投射到新表格中。 </summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
<summary>将可观察序列的每个值投射到可观察序列中，并将所得到的可观察序列展开为一个可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.SelectMany``3(System.IObservable{``0},System.Func{``0,System.IObservable{``1}},System.Func{``0,``1,``2})">
<summary>将可观察序列的每个值投射到一个可观察序列，并将所得到的可观察序列展开为一个可观察序列，并在此处的每个值上调用结果选择器函数。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TCollection"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.IObservable{``1}})">
<summary>将可观察序列的每个值投射到可观察序列中，并将所得到的可观察序列展开为一个可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.IObservable{``1}},System.Func{System.Exception,System.IObservable{``1}},System.Func{System.IObservable{``1}})">
<summary>将可观察序列的每个值投射到一个可观察序列，并将所得到的可观察序列展开为一个可观察序列，并在此处的每个值上调用结果选择器函数。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.SelectMany``2(System.IObservable{``0},System.IObservable{``1})">
<summary>将可观察序列的每个值投射到可观察序列中，并将所得到的可观察序列展开为一个可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TOther"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Single``1(System.IObservable{``0})">
<summary>返回可观察序列的唯一值，如果可观察序列中不只是一个值，则引发异常。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.SingleOrDefault``1(System.IObservable{``0})">
<summary>返回可观察序列的唯一值，如果可观察序列为空，则返回默认值；如果可观察序列中有多个值，则此方法引发异常。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Skip``1(System.IObservable{``0},System.Int32)">
<summary>忽略可观察序列中指定数量的值，然后返回剩余的值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.SkipLast``1(System.IObservable{``0},System.Int32)">
<summary>忽略可观察序列结尾处指定数量的值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.SkipUntil``2(System.IObservable{``0},System.IObservable{``1})">
<summary>仅在其他可观察序列产生值之后，才返回源可观察序列的值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TOther"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.SkipWhile``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
<summary>只要指定的条件为 true，就忽略可观察序列中的值，然后返回剩余的值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Start(System.Action)">
<summary>异步调用操作。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Start(System.Action,Microsoft.Phone.Reactive.IScheduler)">
<summary>异步调用操作。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Start``1(System.Func{``0})">
<summary>异步调用函数。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Start``1(System.Func{``0},Microsoft.Phone.Reactive.IScheduler)">
<summary>异步调用函数。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.StartWith``1(System.IObservable{``0},Microsoft.Phone.Reactive.IScheduler,``0[])">
<summary>将一个序列值置于可观察序列前面。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.StartWith``1(System.IObservable{``0},``0[])">
<summary>将一个序列值置于可观察序列前面。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Subscribe``1(System.Collections.Generic.IEnumerable{``0},System.IObserver{``0})">
<summary>订阅可枚举序列的观察者。返回一个对象，该对象可用于取消订阅可枚举序列的观察者。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Subscribe``1(System.Collections.Generic.IEnumerable{``0},System.IObserver{``0},Microsoft.Phone.Reactive.IScheduler)">
<summary>订阅可枚举序列的观察者。返回一个对象，该对象可用于取消订阅可枚举序列的观察者。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.SubscribeOn``1(System.IObservable{``0},Microsoft.Phone.Reactive.DispatcherScheduler)">
<summary>使用计划程序异步订阅和取消订阅观察者。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.SubscribeOn``1(System.IObservable{``0},Microsoft.Phone.Reactive.IScheduler)">
<summary>使用计划程序异步订阅和取消订阅观察者。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.SubscribeOn``1(System.IObservable{``0},System.Threading.SynchronizationContext)">
<summary>在同步上下文上异步订阅和取消订阅观察者。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.SubscribeOnDispatcher``1(System.IObservable{``0})">
<summary>使用当前调度程序异步订阅和取消订阅观察者。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Sum(System.IObservable{System.Decimal})">
<summary>计算 System.Decimal 值序列的和。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Sum(System.IObservable{System.Double})">
<summary>计算 System.Double 值序列的和。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Sum(System.IObservable{System.Int32})">
<summary>计算 System.Int32 值序列的和。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Sum(System.IObservable{System.Int64})">
<summary>计算 System.Int64 值序列的和。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Sum(System.IObservable{System.Nullable{System.Decimal}})">
<summary>计算可为 null 的 System.Decimal 值序列的和。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Sum(System.IObservable{System.Nullable{System.Double}})">
<summary>计算可为 null 的 System.Double 值序列的和。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Sum(System.IObservable{System.Nullable{System.Int32}})">
<summary>计算可为 null 的 System.Int32 值序列的和。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Sum(System.IObservable{System.Nullable{System.Int64}})">
<summary>计算可为 null 的 System.Int64 值序列的和。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Sum(System.IObservable{System.Nullable{System.Single}})">
<summary>计算可为 null 的 System.Float 值序列的和。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Sum(System.IObservable{System.Single})">
<summary>计算 System.Float 值序列的和。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Switch``1(System.IObservable{System.IObservable{``0}})">
<summary>将可观察序列的可观察序列转换为仅从最近的可观察序列中产生值的可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Synchronize``1(System.IObservable{``0})">
<summary>同步可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Synchronize``1(System.IObservable{``0},System.Object)">
<summary>同步可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Take``1(System.IObservable{``0},System.Int32)">
<summary>从可观察序列的开始返回指定数量的连续值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Take``1(System.IObservable{``0},System.Int32,Microsoft.Phone.Reactive.IScheduler)">
<summary>从可观察序列的开始返回指定数量的连续值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.TakeLast``1(System.IObservable{``0},System.Int32)">
<summary>从可观察序列的结尾返回指定数量的连续值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.TakeUntil``2(System.IObservable{``0},System.IObservable{``1})">
<summary>在其他可观察序列产生值之前，返回源可观察序列的值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TOther"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.TakeWhile``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
<summary>只要指定的条件为 true，就返回可观察序列中的值，然后跳过剩余的值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Then``2(System.IObservable{``0},System.Func{``0,``1})">
<summary>当可观察序列具有可用值并且投射该值时匹配。</summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.Plan`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Throttle``1(System.IObservable{``0},System.TimeSpan)">
<summary>忽略可观察序列中的一个值，其后是指定时间间隔之前的另一个值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Throttle``1(System.IObservable{``0},System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
<summary>忽略可观察序列中的一个值，其后是指定时间间隔之前的另一个值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Throw``1(System.Exception)">
<summary>返回一个终止并出现异常的可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Throw``1(System.Exception,Microsoft.Phone.Reactive.IScheduler)">
<summary>返回一个终止并出现异常的可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.TimeInterval``1(System.IObservable{``0})">
<summary>记录可观察序列中每个值的时间间隔。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.TimeInterval``1(System.IObservable{``0},Microsoft.Phone.Reactive.IScheduler)">
<summary>记录可观察序列中每个值的时间间隔。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset)">
<summary>返回可观察序列，或者如果经过了 dueTime，则返回 TimeoutException。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset,Microsoft.Phone.Reactive.IScheduler)">
<summary>返回可观察序列，或者如果经过了 dueTime，则返回 TimeoutException。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset,System.IObservable{``0})">
<summary>返回源可观察序列，或者如果经过了 dueTime，则返回其他可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset,System.IObservable{``0},Microsoft.Phone.Reactive.IScheduler)">
<summary>返回源可观察序列，或者如果经过了 dueTime，则返回其他可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan)">
<summary>返回可观察序列，或者如果经过了 dueTime，则返回 TimeoutException。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
<summary>返回可观察序列，或者如果经过了 dueTime，则返回 TimeoutException。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan,System.IObservable{``0})">
<summary>返回源可观察序列，或者如果经过了 dueTime，则返回其他可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan,System.IObservable{``0},Microsoft.Phone.Reactive.IScheduler)">
<summary>返回源可观察序列，或者如果经过了 dueTime，则返回其他可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timer(System.DateTimeOffset)">
<summary>返回在 dueTime 时生成值的可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timer(System.DateTimeOffset,Microsoft.Phone.Reactive.IScheduler)">
<summary>返回在经过 dueTime 之后生成值的可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timer(System.DateTimeOffset,System.TimeSpan)">
<summary>返回在 dueTime 时以及每段时间之后生成值的可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timer(System.DateTimeOffset,System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
<summary>返回在 dueTime 时以及每段时间之后生成值的可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timer(System.TimeSpan)">
<summary>返回在经过 dueTime 之后生成值的可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timer(System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
<summary>返回在经过 dueTime 之后生成值的可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timer(System.TimeSpan,System.TimeSpan)">
<summary>返回在经过 dueTime 之后以及每段时间之后生成值的可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timer(System.TimeSpan,System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
<summary>返回在经过 dueTime 之后以及每段时间之后生成值的可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timestamp``1(System.IObservable{``0})">
<summary>记录可观察序列中每个值的时间戳。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timestamp``1(System.IObservable{``0},Microsoft.Phone.Reactive.IScheduler)">
<summary>记录可观察序列中每个值的时间戳。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync(System.Action)">
<summary>将操作转换为异步函数。</summary>
<returns>返回 <see cref="T:System.Func`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync(System.Action,Microsoft.Phone.Reactive.IScheduler)">
<summary>将操作转换为异步函数。</summary>
<returns>返回 <see cref="T:System.Func`1"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``1(System.Action{``0})">
<summary>将操作转换为异步函数。</summary>
<returns>返回 <see cref="T:System.Func`2"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``1(System.Action{``0},Microsoft.Phone.Reactive.IScheduler)">
<summary>将操作转换为异步函数。</summary>
<returns>返回 <see cref="T:System.Func`2"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``2(System.Action{``0,``1})">
<summary>将操作转换为异步函数。</summary>
<returns>返回 <see cref="T:System.Func`3"/>。</returns>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``2(System.Action{``0,``1},Microsoft.Phone.Reactive.IScheduler)">
<summary>将操作转换为异步函数。</summary>
<returns>返回 <see cref="T:System.Func`3"/>。</returns>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``3(System.Action{``0,``1,``2})">
<summary>将操作转换为异步函数。</summary>
<returns>返回 <see cref="T:System.Func`4"/>。</returns>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="T3"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``3(System.Action{``0,``1,``2},Microsoft.Phone.Reactive.IScheduler)">
<summary>将操作转换为异步函数。</summary>
<returns>返回 <see cref="T:System.Func`4"/>。</returns>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="T3"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``4(System.Action{``0,``1,``2,``3})">
<summary>将操作转换为异步函数。</summary>
<returns>返回 <see cref="T:System.Func`5"/>。</returns>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="T3"></typeparam>
      <typeparam name="T4"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``4(System.Action{``0,``1,``2,``3},Microsoft.Phone.Reactive.IScheduler)">
<summary>将操作转换为异步函数。</summary>
<returns>返回 <see cref="T:System.Func`5"/>。</returns>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="T3"></typeparam>
      <typeparam name="T4"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``1(System.Func{``0})">
<summary>将函数转换为异步函数。</summary>
<returns>返回 <see cref="T:System.Func`1"/>。</returns>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``1(System.Func{``0},Microsoft.Phone.Reactive.IScheduler)">
<summary>将函数转换为异步函数。</summary>
<returns>返回 <see cref="T:System.Func`1"/>。</returns>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``2(System.Func{``0,``1})">
<summary>将函数转换为异步函数。</summary>
<returns>返回 <see cref="T:System.Func`2"/>。</returns>
      <typeparam name="T"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``2(System.Func{``0,``1},Microsoft.Phone.Reactive.IScheduler)">
<summary>将函数转换为异步函数。</summary>
<returns>返回 <see cref="T:System.Func`2"/>。</returns>
      <typeparam name="T"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``3(System.Func{``0,``1,``2})">
<summary>将函数转换为异步函数。</summary>
<returns>返回 <see cref="T:System.Func`3"/>。</returns>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``3(System.Func{``0,``1,``2},Microsoft.Phone.Reactive.IScheduler)">
<summary>将函数转换为异步函数。</summary>
<returns>返回 <see cref="T:System.Func`3"/>。</returns>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``4(System.Func{``0,``1,``2,``3})">
<summary>将函数转换为异步函数。</summary>
<returns>返回 <see cref="T:System.Func`4"/>。</returns>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="T3"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``4(System.Func{``0,``1,``2,``3},Microsoft.Phone.Reactive.IScheduler)">
<summary>将函数转换为异步函数。</summary>
<returns>返回 <see cref="T:System.Func`4"/>。</returns>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="T3"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``5(System.Func{``0,``1,``2,``3,``4})">
<summary>将函数转换为异步函数。</summary>
<returns>返回 <see cref="T:System.Func`5"/>。</returns>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="T3"></typeparam>
      <typeparam name="T4"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``5(System.Func{``0,``1,``2,``3,``4},Microsoft.Phone.Reactive.IScheduler)">
<summary>将函数转换为异步函数。</summary>
<returns>返回 <see cref="T:System.Func`5"/>。</returns>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="T3"></typeparam>
      <typeparam name="T4"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToEnumerable``1(System.IObservable{``0})">
<summary>将可观察序列转换为可枚举序列。</summary>
<returns>返回 IEnumerable。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToObservable``1(System.Collections.Generic.IEnumerable{``0})">
<summary>将可枚举序列转换为可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToObservable``1(System.Collections.Generic.IEnumerable{``0},Microsoft.Phone.Reactive.IScheduler)">
<summary>将可枚举序列转换为可观察序列。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Using``2(System.Func{``1},System.Func{``1,System.IObservable{``0}})">
<summary>从 resourceSelector 中检索资源，以便在 resourceUsage 中使用，并在所得到的可观察序列终止后释放该资源。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Where``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
<summary>基于谓词筛选可观察序列的值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Where``1(System.IObservable{``0},System.Func{``0,System.Int32,System.Boolean})">
<summary>通过合并元素的索引基于谓词筛选可观察序列的值。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.While``1(System.Func{System.Boolean},System.IObservable{``0})">
<summary>只要条件包含就重复源。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Zip``3(System.IObservable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
<summary>使用选择器函数将可观察序列和可枚举序列合并到一个可观察序列中。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TLeft"></typeparam>
      <typeparam name="TRight"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Zip``3(System.IObservable{``0},System.IObservable{``1},System.Func{``0,``1,``2})">
<summary>使用选择器函数将两个可观察序列合并到一个可观察序列中。</summary>
<returns>返回 <see cref="T:System.IObservable`1"/>。</returns>
      <typeparam name="TLeft"></typeparam>
      <typeparam name="TRight"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="T:Microsoft.Phone.Reactive.ObservableExtensions">
<summary>提供一组用于订阅可观察序列的委托的静态方法。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ObservableExtensions.Subscribe``1(System.IObservable{``0})">
<summary>对可观察序列求值。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0})">
<summary>订阅可观察序列的值处理程序。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action)">
<summary>订阅可观察序列的值处理程序和完成处理程序。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception})">
<summary>订阅可观察序列的值处理程序和异常处理程序。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
<summary>订阅可观察序列的值处理程序、异常处理程序和完成处理程序。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Observer">
<summary>提供一组用于创建观察者的静态方法。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observer.AsObserver``1(System.IObserver{``0})">
<summary>隐藏观察者的身份。</summary>
<returns>返回 <see cref="T:System.IObserver`1"/>。</returns>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observer.Create``1(System.Action{``0})">
<summary>从指定的 OnNext 操作创建一个观察者。</summary>
<returns>返回 <see cref="T:System.IObserver`1"/>。</returns>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observer.Create``1(System.Action{``0},System.Action)">
<summary>从指定的 OnNext 和 OnCompleted 操作创建一个观察者。</summary>
<returns>返回 <see cref="T:System.IObserver`1"/>。</returns>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observer.Create``1(System.Action{``0},System.Action{System.Exception})">
<summary>从指定的 OnNext 和 OnError 操作创建一个观察者。</summary>
<returns>返回 <see cref="T:System.IObserver`1"/>。</returns>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observer.Create``1(System.Action{``0},System.Action{System.Exception},System.Action)">
<summary>从指定的 OnNext、OnError 和 OnCompleted 操作创建一个观察者。</summary>
<returns>返回 <see cref="T:System.IObserver`1"/>。</returns>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observer.ToNotifier``1(System.IObserver{``0})">
<summary>从观察者创建一个通知回调。</summary>
<returns>返回 <see cref="T:System.Action`1"/>。</returns>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observer.ToObserver``1(System.Action{Microsoft.Phone.Reactive.Notification{``0}})">
<summary>从通知回调创建一个观察者。</summary>
<returns>返回 <see cref="T:System.IObserver`1"/>。</returns>
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Pattern">
<summary>表示一个联接模式。</summary>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Pattern`2">
<summary>表示一个联接模式。</summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Pattern`2.And``1(System.IObservable{``0})">
<summary>当所有可观察序列都具有可用值时匹配。</summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.Pattern`3"/>。</returns>
      <typeparam name="T3"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Pattern`2.Then``1(System.Func{`0,`1,``0})">
<summary>当所有可观察序列都具有可用值并且投射这些值时匹配。</summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.Plan`1"/>。</returns>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Pattern`3">
<summary>表示一个联接模式。</summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="T3"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Pattern`3.And``1(System.IObservable{``0})">
<summary>当所有可观察序列都具有可用值时匹配。</summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.Pattern`4"/>。</returns>
      <typeparam name="T4"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Pattern`3.Then``1(System.Func{`0,`1,`2,``0})">
<summary>当所有可观察序列都具有可用值并且投射这些值时匹配。</summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.Plan`1"/>。</returns>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Pattern`4">
<summary>表示一个联接模式。</summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="T3"></typeparam>
      <typeparam name="T4"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Pattern`4.Then``1(System.Func{`0,`1,`2,`3,``0})">
<summary>当所有可观察序列都具有可用值并且投射这些值时匹配。</summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.Plan`1"/>。</returns>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Plan`1">
<summary>表示联接模式的执行计划。</summary>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="T:Microsoft.Phone.Reactive.RefCountDisposable">
<summary>表示一个可释放对象，当已释放所有依赖的可释放对象时，该对象只释放其基础可释放对象。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.RefCountDisposable.#ctor(System.IDisposable)">
<summary>创建一个可释放对象，当已释放所有依赖的可释放对象时，该对象只释放其基础可释放对象</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.RefCountDisposable.Dispose">
<summary>仅当已释放所有依赖的可释放对象时，才释放基础可释放对象。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.RefCountDisposable.GetDisposable">
<summary>返回一个可释放对象，释放该对象时会减少基础可释放对象上的引用计数。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
    </member>
    <member name="T:Microsoft.Phone.Reactive.ReplaySubject`1">
<summary>表示一个对象，该对象既是可观察序列也是一个观察者。</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ReplaySubject`1.#ctor">
<summary>创建一个可重新播放的主题。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ReplaySubject`1.#ctor(Microsoft.Phone.Reactive.IScheduler)">
<summary>创建一个可重新播放的主题。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ReplaySubject`1.#ctor(System.Int32)">
<summary>创建一个可重新播放的主题。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ReplaySubject`1.#ctor(System.Int32,Microsoft.Phone.Reactive.IScheduler)">
<summary>创建一个可重新播放的主题。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ReplaySubject`1.#ctor(System.Int32,System.TimeSpan)">
<summary>创建一个可重新播放的主题。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ReplaySubject`1.#ctor(System.Int32,System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
<summary>创建一个可重新播放的主题。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ReplaySubject`1.#ctor(System.TimeSpan)">
<summary>创建一个可重新播放的主题。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ReplaySubject`1.#ctor(System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
<summary>创建一个可重新播放的主题。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ReplaySubject`1.OnCompleted">
<summary>通知所有订阅的观察者序列结束。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ReplaySubject`1.OnError(System.Exception)">
<summary>通知所有订阅的观察者发生异常。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ReplaySubject`1.OnNext(`0)">
<summary>通知所有订阅的观察者得到值。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ReplaySubject`1.Subscribe(System.IObserver{`0})">
<summary>订阅该主题的观察者。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
    </member>
    <member name="T:Microsoft.Phone.Reactive.ScheduledDisposable">
<summary>表示一个对象，该对象在提供的计划程序上计划工作单位。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ScheduledDisposable.#ctor(Microsoft.Phone.Reactive.IScheduler,System.IDisposable)">
<summary>构造一个 ScheduledDisposable，它在其上使用计划程序来释放可释放对象。</summary>
    </member>
    <member name="P:Microsoft.Phone.Reactive.ScheduledDisposable.Disposable">
<summary>获取一个值，该值指示基础可释放对象。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ScheduledDisposable.Dispose">
<summary>在提供的计划程序上释放包装的可释放对象。</summary>
    </member>
    <member name="P:Microsoft.Phone.Reactive.ScheduledDisposable.Scheduler">
<summary>获取一个值，该值指示计划程序。</summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.IScheduler"/>。</returns>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Scheduler">
<summary>提供一组用于创建计划程序的静态方法。 </summary>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Scheduler.CurrentThread">
<summary> 返回一个 CurrentThreadScheduler 对象，该对象会尽快计划处理工作。</summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.CurrentThreadScheduler"/>。</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Scheduler.Dispatcher">
<summary> 获取在当前 Dispatcher 上计划工作的计划程序。</summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.DispatcherScheduler"/>。</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Scheduler.Immediate">
<summary> 返回一个 ImmediateScheduler 对象，该对象在当前线程上计划即时处理工作。</summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.ImmediateScheduler"/>。</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Scheduler.NewThread">
<summary> 获取在新线程上计划工作的计划程序。</summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.NewThreadScheduler"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Scheduler.Schedule(Microsoft.Phone.Reactive.IScheduler,System.Action,System.DateTimeOffset)">
<summary>计划在 <paramref name="dueTime"/> 时要递归执行的 <paramref name="action"/>。 </summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Scheduler.Schedule(Microsoft.Phone.Reactive.IScheduler,System.Action{System.Action{System.DateTimeOffset}},System.DateTimeOffset)">
<summary>计划在每个指定的时间间隔 <paramref name="dueTime"/> 要递归执行的操作。  </summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Scheduler.Schedule(Microsoft.Phone.Reactive.IScheduler,System.Action{System.Action{System.TimeSpan}},System.TimeSpan)">
<summary>计划在每个指定的时间间隔 <paramref name="dueTime"/> 之后要递归执行的操作。 </summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Scheduler.Schedule(Microsoft.Phone.Reactive.IScheduler,System.Action{System.Action})">
<summary>计划要递归执行的 <paramref name="action"/>。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Scheduler.ThreadPool">
<summary> 获取在 ThreadPool 上计划工作的计划程序。</summary>
<returns>返回 <see cref="T:Microsoft.Phone.Reactive.ThreadPoolScheduler"/>。</returns>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Subject`1">
<summary>表示一个对象，该对象既是可观察序列也是一个观察者。</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Subject`1.#ctor">
<summary>创建一个主题。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Subject`1.OnCompleted">
<summary>通知所有订阅的观察者序列结束。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Subject`1.OnError(System.Exception)">
<summary>通知所有订阅的观察者发生异常。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Subject`1.OnNext(`0)">
<summary>通知所有订阅的观察者得到值。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Subject`1.Subscribe(System.IObserver{`0})">
<summary>订阅该主题的观察者。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
    </member>
    <member name="T:Microsoft.Phone.Reactive.SynchronizationContextScheduler">
<summary>表示一个对象，该对象在提供的 SynchronizationContext 上计划工作单位。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.SynchronizationContextScheduler.#ctor(System.Threading.SynchronizationContext)">
<summary>创建一个对象，该对象在提供的 SynchronizationContext 上计划工作单位。</summary>
    </member>
    <member name="P:Microsoft.Phone.Reactive.SynchronizationContextScheduler.Now">
<summary>获取计划程序的当前时间概念。</summary>
<returns>返回 <see cref="T:System.DateTimeOffset"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.SynchronizationContextScheduler.Schedule(System.Action)">
<summary>计划要执行的操作。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.SynchronizationContextScheduler.Schedule(System.Action,System.TimeSpan)">
<summary>计划要在指定的时间间隔后执行的操作。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
    </member>
    <member name="T:Microsoft.Phone.Reactive.TaskObservableExtensions">
<summary>提供一组用于将任务转换为 IObservables 的静态方法。</summary>
    </member>
    <member name="T:Microsoft.Phone.Reactive.ThreadPoolScheduler">
<summary>表示一个对象，该对象在 threadpool 上计划工作单位。</summary>
    </member>
    <member name="P:Microsoft.Phone.Reactive.ThreadPoolScheduler.Now">
<summary>获取计划程序的当前时间概念。</summary>
<returns>返回 <see cref="T:System.DateTimeOffset"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ThreadPoolScheduler.Schedule(System.Action)">
<summary>计划要执行的操作。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ThreadPoolScheduler.Schedule(System.Action,System.TimeSpan)">
<summary>计划要执行的操作。</summary>
<returns>返回 <see cref="T:System.IDisposable"/>。</returns>
    </member>
    <member name="T:Microsoft.Phone.Reactive.TimeInterval`1">
<summary> 表示一个时间间隔值。</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.TimeInterval`1.#ctor(`0,System.TimeSpan)">
<summary>构造一个时间间隔值。 </summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.TimeInterval`1.Equals(System.Object)">
<summary>确定指定的对象是否等于当前的 <see cref="T:Microsoft.Phone.Reactive.TimeInterval`1"/>。</summary>
<returns>返回 <see cref="T:System.Boolean"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.TimeInterval`1.GetHashCode">
<summary>返回此对象的哈希代码。</summary>
<returns>返回 <see cref="T:System.Int32"/>。</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.TimeInterval`1.Interval">
<summary> 获取间隔。</summary>
<returns>返回 <see cref="T:System.TimeSpan"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.TimeInterval`1.op_Equality(Microsoft.Phone.Reactive.TimeInterval{`0},Microsoft.Phone.Reactive.TimeInterval{`0})">
<summary>如果时间间隔 <paramref name="first"/> 等于时间间隔 <paramref name="second"/>，则返回 true；否则返回 false。</summary>
<returns>返回 <see cref="T:System.Boolean"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.TimeInterval`1.op_Inequality(Microsoft.Phone.Reactive.TimeInterval{`0},Microsoft.Phone.Reactive.TimeInterval{`0})">
<summary>如果时间间隔 <paramref name="first"/> 不等于时间间隔 <paramref name="second"/>，则返回 true；否则返回 false。</summary>
<returns>返回 <see cref="T:System.Boolean"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.TimeInterval`1.ToString">
<summary>返回此对象的字符串表示形式。</summary>
<returns>返回 <see cref="T:System.String"/>。</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.TimeInterval`1.Value">
<summary>获取值。 </summary>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Timestamped`1">
<summary>  表示一个带有时间戳的值。</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Timestamped`1.#ctor(`0,System.DateTimeOffset)">
<summary> 构造一个带有时间戳的值。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Timestamped`1.Equals(System.Object)">
<summary>确定指定的对象是否等于这个对象。</summary>
<returns>返回 <see cref="T:System.Boolean"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Timestamped`1.GetHashCode">
<summary>获取此对象的哈希代码。</summary>
<returns>返回 <see cref="T:System.Int32"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Timestamped`1.op_Equality(Microsoft.Phone.Reactive.Timestamped{`0},Microsoft.Phone.Reactive.Timestamped{`0})">
<summary>如果带有时间戳的值 <paramref name="first"/> 等于带有时间戳的值 <paramref name=" second"/>，则为 true；否则为 false。</summary>
<returns>返回 <see cref="T:System.Boolean"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Timestamped`1.op_Inequality(Microsoft.Phone.Reactive.Timestamped{`0},Microsoft.Phone.Reactive.Timestamped{`0})">
<summary>如果带有时间戳的值 <paramref name="first"/> 不等于带有时间戳的值 <paramref name=" second"/>，则为 true；否则为 false。</summary>
<returns>返回 <see cref="T:System.Boolean"/>。</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Timestamped`1.Timestamp">
<summary>获取时间戳。 </summary>
<returns>返回 <see cref="T:System.DateTimeOffset"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Timestamped`1.ToString">
<summary>返回此对象的字符串表示形式。</summary>
<returns>返回 <see cref="T:System.String"/>。</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Timestamped`1.Value">
<summary> 获取值。</summary>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Unit">
<summary> 表示 void。</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Unit.Equals(Microsoft.Phone.Reactive.Unit)">
<summary> 确定实例是否相等。</summary>
<returns>返回 <see cref="T:System.Boolean"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Unit.Equals(System.Object)">
<summary> 确定实例是否相等。</summary>
<returns>返回 <see cref="T:System.Boolean"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Unit.GetHashCode">
<summary>返回此对象的哈希代码。</summary>
<returns>返回 <see cref="T:System.Int32"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Unit.op_Equality(Microsoft.Phone.Reactive.Unit,Microsoft.Phone.Reactive.Unit)">
<summary> 始终返回 true。</summary>
<returns>返回 <see cref="T:System.Boolean"/>。</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Unit.op_Inequality(Microsoft.Phone.Reactive.Unit,Microsoft.Phone.Reactive.Unit)">
<summary>始终返回 false。 </summary>
<returns>返回 <see cref="T:System.Boolean"/>。</returns>
    </member>
  </members>
</doc>