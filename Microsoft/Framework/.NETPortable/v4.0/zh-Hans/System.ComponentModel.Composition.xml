<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ComponentModel.Composition</name>
  </assembly>
  <members>
    <member name="T:System.Lazy`2">
      <summary>提供对对象及其关联的元数据的延迟间接引用，以供 Managed Extensibility Framework 使用。</summary>
      <typeparam name="T">所引用对象的类型。</typeparam>
      <typeparam name="TMetadata">元数据的类型。</typeparam>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1)">
      <summary>使用指定的元数据初始化 <see cref="T:System.Lazy`2" /> 类的新实例，该实例使用指定函数来获取所引用对象。</summary>
      <param name="valueFactory">返回所引用对象的函数。</param>
      <param name="metadata">与引用的对象关联的元数据。</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Boolean)">
      <summary>使用指定的元数据和线程安全值初始化 <see cref="T:System.Lazy`2" /> 类的新实例，该实例使用指定函数来获取所引用对象。</summary>
      <param name="valueFactory">返回所引用对象的函数。</param>
      <param name="metadata">与引用的对象关联的元数据。</param>
      <param name="isThreadSafe">指示创建的 <see cref="T:System.Lazy`2" /> 对象是否是线程安全的。</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Threading.LazyThreadSafetyMode)">
      <summary>使用指定的元数据和线程同步模式初始化 <see cref="T:System.Lazy`2" /> 类的新实例，该实例使用指定函数来获取所引用对象。</summary>
      <param name="valueFactory">返回所引用对象的函数</param>
      <param name="metadata">与引用的对象关联的元数据。</param>
      <param name="mode">线程同步模式</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1)">
      <summary>使用指定的元数据初始化 <see cref="T:System.Lazy`2" /> 类的新实例。</summary>
      <param name="metadata">与引用的对象关联的元数据。</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1,System.Boolean)">
      <summary>使用指定的元数据和线程安全值初始化 <see cref="T:System.Lazy`2" /> 类的新实例。</summary>
      <param name="metadata">与引用的对象关联的元数据。</param>
      <param name="isThreadSafe">指示创建的 <see cref="T:System.Lazy`2" /> 对象是否是线程安全的。</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1,System.Threading.LazyThreadSafetyMode)">
      <summary>使用指定的元数据和线程同步模式初始化 <see cref="T:System.Lazy`2" /> 类的新实例。</summary>
      <param name="metadata">与引用的对象关联的元数据。</param>
      <param name="mode">线程同步模式。</param>
    </member>
    <member name="P:System.Lazy`2.Metadata">
      <summary>获取与引用的对象关联的元数据。</summary>
      <returns>与引用的对象关联的元数据。</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.AttributedModelServices">
      <summary>包含可将 MEF 特性化的编程模型与组合一起使用的帮助器方法。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,System.String,``0)">
      <summary>从指定的值创建一个部件，并将该部件添加到具有指定协定名称的指定批。</summary>
      <returns>新部件。</returns>
      <param name="batch">要添加到的批。</param>
      <param name="contractName">导出的协定名称。</param>
      <param name="exportedValue">要添加的值。</param>
      <typeparam name="T">新部件的类型。</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,``0)">
      <summary>从指定的值创建一个部件，并将该部件添加到指定的批。</summary>
      <returns>新部件。</returns>
      <param name="batch">要添加到的批。</param>
      <param name="exportedValue">要添加的值。</param>
      <typeparam name="T">新部件的类型。</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.AddPart(System.ComponentModel.Composition.Hosting.CompositionBatch,System.Object)">
      <summary>从指定的特性化对象创建一个可组合部件，并将该部件添加到指定的组合批。</summary>
      <returns>新部件。</returns>
      <param name="batch">要添加到的批。</param>
      <param name="attributedPart">要添加的对象。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,System.String,``0)">
      <summary>从指定协定名称下的指定对象创建一个部件，并在指定的组合容器中组合该部件。</summary>
      <param name="container">要在其中执行组合的组合容器。</param>
      <param name="contractName">要在其下导出部件的协定名称。</param>
      <param name="exportedValue">要组合的值。</param>
      <typeparam name="T">新部件的类型。</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,``0)">
      <summary>从指定的值创建一个部件，并在指定的组合容器中组合该部件。</summary>
      <param name="container">要在其中执行组合的组合容器。</param>
      <param name="exportedValue">要组合的值。</param>
      <typeparam name="T">新部件的类型。</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.ComposeParts(System.ComponentModel.Composition.Hosting.CompositionContainer,System.Object[])">
      <summary>从特性化对象的数组创建可组合部件，并在指定的组合容器中组合这些部件。</summary>
      <param name="container">要在其中执行组合的组合容器。</param>
      <param name="attributedParts">要组合的特性化对象的数组。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.CreatePart(System.Object)">
      <summary>从指定的特性化对象创建一个可组合部件。</summary>
      <returns>创建的部件。</returns>
      <param name="attributedPart">特性化对象。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.CreatePartDefinition(System.Type,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>使用指定类型和源创建部件定义。</summary>
      <returns>新部件定义。</returns>
      <param name="type">定义的类型。</param>
      <param name="origin">定义的源。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.CreatePartDefinition(System.Type,System.ComponentModel.Composition.Primitives.ICompositionElement,System.Boolean)">
      <summary>使用指定类型和源创建部件定义。</summary>
      <returns>新部件定义。</returns>
      <param name="type">定义的类型。</param>
      <param name="origin">定义的源。</param>
      <param name="ensureIsDiscoverable">一个值，指示新定义是否应是可发现的。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.GetContractName(System.Type)">
      <summary>获取指定类型的规范协定名称。</summary>
      <returns>从指定类型创建的协定名称。</returns>
      <param name="type">要使用的类型。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.GetMetadataView``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>从松散元数据的字典中获取元数据视图对象。</summary>
      <returns>包含指定元数据的元数据视图。</returns>
      <param name="metadata">松散元数据的集合。</param>
      <typeparam name="TMetadataView">要获取的元数据视图对象的类型。</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Reflection.MethodInfo)">
      <summary>获取指定方法的唯一标识符。</summary>
      <returns>该方法的唯一标识符。</returns>
      <param name="method">要检查的方法。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Type)">
      <summary>获取指定类型的唯一标识符。</summary>
      <returns>该类型的唯一标识符。</returns>
      <param name="type">要检查的类型。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object)">
      <summary>通过使用指定的组合服务并禁用重新组合来组合指定的部件。</summary>
      <returns>已组合的部件。</returns>
      <param name="compositionService">要使用的组合服务。</param>
      <param name="attributedPart">要组合的部件。</param>
    </member>
    <member name="T:System.ComponentModel.Composition.ChangeRejectedException">
      <summary>一个指示部件在组合期间是否已遭拒绝的异常。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor">
      <summary>使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.ComponentModel.Composition.ChangeRejectedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.CompositionError})">
      <summary>使用组合错误的列表初始化 <see cref="T:System.ComponentModel.Composition.ChangeRejectedException" /> 类的新实例。</summary>
      <param name="errors">组合期间发生的错误的集合。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.ComponentModel.Composition.ChangeRejectedException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.ComponentModel.Composition.ChangeRejectedException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="P:System.ComponentModel.Composition.ChangeRejectedException.Message">
      <summary>获取或设置与组件拒绝关联的消息。</summary>
      <returns>与组件拒绝关联的消息。</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.CompositionContractMismatchException">
      <summary>在 <see cref="T:System.Lazy`1" /> 或 <see cref="T:System.Lazy`2" /> 对象的基础导出值或元数据不能分别强制转换为 T 或 TMetadataView 时引发的异常。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor">
      <summary>使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.ComponentModel.Composition.CompositionContractMismatchException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.ComponentModel.Composition.CompositionContractMismatchException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.ComponentModel.Composition.CompositionContractMismatchException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.ComponentModel.Composition.CompositionError">
      <summary>表示组合期间发生的错误。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 类的新实例。</summary>
      <param name="message">一条描述 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 的消息，若要将 <see cref="P:System.ComponentModel.Composition.CompositionError.Description" /> 属性设置为空字符串 ("")，则为 null。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>使用指定的错误消息和导致出现组合错误的组合元素来初始化 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 类的新实例。</summary>
      <param name="message">一条描述 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 的消息，若要将 <see cref="P:System.ComponentModel.Composition.CompositionError.Description" /> 属性设置为空字符串 ("")，则为 null。</param>
      <param name="element">导致出现 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 的组合元素，或为 null 以将 <see cref="P:System.ComponentModel.Composition.CompositionError.Element" /> 属性设置为 null。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement,System.Exception)">
      <summary>使用指定的错误消息以及导致出现组合错误的组合元素和异常来初始化 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 类的新实例。</summary>
      <param name="message">一条描述 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 的消息，若要将 <see cref="P:System.ComponentModel.Composition.CompositionError.Description" /> 属性设置为空字符串 ("")，则为 null。</param>
      <param name="element">导致出现 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 的组合元素，或为 null 以将 <see cref="P:System.ComponentModel.Composition.CompositionError.Element" /> 属性设置为 null。</param>
      <param name="exception">作为导致出现 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 的根本原因的 <see cref="P:System.ComponentModel.Composition.CompositionError.Exception" />，或为 null 以将 <see cref="P:System.ComponentModel.Composition.CompositionError.Exception" /> 属性设置为 null。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和导致出现组合错误的异常来初始化 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 类的新实例。</summary>
      <param name="message">一条描述 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 的消息，若要将 <see cref="P:System.ComponentModel.Composition.CompositionError.Description" /> 属性设置为空字符串 ("")，则为 null。</param>
      <param name="exception">作为导致出现 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 的根本原因的 <see cref="P:System.ComponentModel.Composition.CompositionError.Exception" />，或为 null 以将 <see cref="P:System.ComponentModel.Composition.CompositionError.Exception" /> 属性设置为 null。</param>
    </member>
    <member name="P:System.ComponentModel.Composition.CompositionError.Description">
      <summary>获取对组合错误的描述。</summary>
      <returns>一条描述 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 的消息。</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.CompositionError.Element">
      <summary>获取导致出现错误的组合元素。</summary>
      <returns>导致出现 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 的组合元素。 默认值为 null。</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.CompositionError.Exception">
      <summary>获取作为导致出现组合错误的根本原因的异常。</summary>
      <returns>作为导致出现 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 的根本原因的异常。 默认值为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionError.ToString">
      <summary>返回组合错误的字符串表示形式。</summary>
      <returns>一个包含 <see cref="P:System.ComponentModel.Composition.CompositionError.Description" /> 属性的字符串。</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.CompositionException">
      <summary>表示在 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象中进行组合期间发生一个或多个错误时引发的异常。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionException.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.CompositionException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionException.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.CompositionError})">
      <summary>使用指定的组合错误集合初始化 <see cref="T:System.ComponentModel.Composition.CompositionException" /> 类的新实例。</summary>
      <param name="errors">一个表示组合期间出现的问题的 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 对象集合。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.ComponentModel.Composition.CompositionException" /> 类的新实例。</summary>
      <param name="message">一条描述 <see cref="T:System.ComponentModel.Composition.CompositionException" /> 的消息，或为 null 以将 <see cref="P:System.Exception.Message" /> 属性设置为其默认值。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和导致出现此异常的异常来初始化 <see cref="T:System.ComponentModel.Composition.CompositionException" /> 类的新实例。</summary>
      <param name="message">一条描述 <see cref="T:System.ComponentModel.Composition.CompositionException" /> 的消息，或为 null 以将 <see cref="P:System.Exception.Message" /> 属性设置为其默认值。</param>
      <param name="innerException">作为导致出现 <see cref="T:System.ComponentModel.Composition.CompositionException" /> 的根本原因的异常，或为 null 以将 <see cref="P:System.Exception.InnerException" /> 属性设置为 null。</param>
    </member>
    <member name="P:System.ComponentModel.Composition.CompositionException.Errors">
      <summary>获取或设置描述与 <see cref="T:System.ComponentModel.Composition.CompositionException" /> 关联的错误的 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 对象集合。</summary>
      <returns>一个描述与 <see cref="T:System.ComponentModel.Composition.CompositionException" /> 关联的错误的 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 对象集合。</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.CompositionException.Message">
      <summary>获取描述异常的消息。</summary>
      <returns>一条描述 <see cref="T:System.ComponentModel.Composition.CompositionException" /> 的消息。</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.CreationPolicy">
      <summary>指定何时以及如何实例化部件。</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.CreationPolicy.Any">
      <summary>指定 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 将为部件使用给定当前上下文中最适当的 <see cref="T:System.ComponentModel.Composition.CreationPolicy" />。 这是默认的 <see cref="T:System.ComponentModel.Composition.CreationPolicy" />。 默认情况下，除非 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 或导入程序请求 <see cref="F:System.ComponentModel.Composition.CreationPolicy.NonShared" />，否则 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 将使用 <see cref="F:System.ComponentModel.Composition.CreationPolicy.Shared" />。</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.CreationPolicy.NonShared">
      <summary>指定将由 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 为每个请求者创建一个关联的 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 的新的非共享实例。</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.CreationPolicy.Shared">
      <summary>指定将由 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 创建关联的 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 的单个共享实例，并由所有请求者共享该实例。</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.ExportAttribute">
      <summary>指定某个类型、属性、字段或方法提供特定的导出。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportAttribute.#ctor">
      <summary>通过在默认协定名称下导出使用此特性标记的类型或成员，初始化 <see cref="T:System.ComponentModel.Composition.ExportAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.String)">
      <summary>通过在指定的协定名称下导出用此属性标记的类型或成员，来初始化 <see cref="T:System.ComponentModel.Composition.ExportAttribute" /> 类的新实例。</summary>
      <param name="contractName">用于导出使用此特性标记的类型或成员的协定名称，或 null 或空字符串 ("") 以使用默认协定名称。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.String,System.Type)">
      <summary>通过在指定协定名称下导出指定类型，初始化 <see cref="T:System.ComponentModel.Composition.ExportAttribute" /> 类的新实例。</summary>
      <param name="contractName">用于导出使用此特性标记的类型或成员的协定名称，或 null 或空字符串 ("") 以使用默认协定名称。</param>
      <param name="contractType">要导出的类型。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.Type)">
      <summary>通过在派生自指定类型的协定名称下导出使用此特性标记的类型或成员，初始化 <see cref="T:System.ComponentModel.Composition.ExportAttribute" /> 类的新实例。</summary>
      <param name="contractType">从中派生用于导出使用此特性标记的类型或成员的协定名称的类型，或 null 以使用默认协定名称。</param>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportAttribute.ContractName">
      <summary>获取用于导出使用此特性标记的类型或成员的协定名称。</summary>
      <returns>用于导出使用此特性标记的类型或成员的协定名称。 默认值为空字符串 ("")。</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportAttribute.ContractType">
      <summary>获取由此特性附加到的成员导出的协定类型。</summary>
      <returns>提供的导出的类型。 默认值为 null，这表示将通过查看此导出附加到的成员上的类型来获取类型。</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.ExportMetadataAttribute">
      <summary>指定带有 <see cref="T:System.ComponentModel.Composition.ExportAttribute" /> 标记的类型、属性、字段或方法的元数据。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportMetadataAttribute.#ctor(System.String,System.Object)">
      <summary>使用指定的名称和元数据值初始化 <see cref="T:System.ComponentModel.Composition.ExportMetadataAttribute" /> 的新实例。</summary>
      <param name="name">一个包含元数据值的名称的字符串，或为 null 以将 <see cref="P:System.ComponentModel.Composition.ExportMetadataAttribute.Name" /> 属性设置为一个空字符串 ("")。</param>
      <param name="value">包含元数据值的对象。 它可以是 null。</param>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportMetadataAttribute.IsMultiple">
      <summary>获取或设置一个值，该值指示此项是否用此特性多次标记。</summary>
      <returns>如果多次对此项进行标记，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportMetadataAttribute.Name">
      <summary>获取元数据值的名称。</summary>
      <returns>一个包含元数据值的名称的字符串。</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportMetadataAttribute.Value">
      <summary>获取元数据值。</summary>
      <returns>包含元数据值的对象。</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.ICompositionService">
      <summary>提供满足现有部件实例上的导入的方法。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ICompositionService.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>在禁用重新组合和验证的情况下组合指定的部件。</summary>
      <param name="part">要组合的部件。</param>
    </member>
    <member name="T:System.ComponentModel.Composition.ImportAttribute">
      <summary>指定属性、字段或参数值应由 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象提供。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportAttribute.#ctor">
      <summary>通过导入具有默认协定名称的导出，初始化 <see cref="T:System.ComponentModel.Composition.ImportAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportAttribute.#ctor(System.String)">
      <summary>通过导入具有指定协定名称的导出，初始化 <see cref="T:System.ComponentModel.Composition.ImportAttribute" /> 类的新实例。</summary>
      <param name="contractName">要导入的导出结果的协定名称，或 null 或空字符串 ("") 以使用默认协定名称。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportAttribute.#ctor(System.String,System.Type)">
      <summary>通过导入具有指定协定名称和类型的导出，初始化 <see cref="T:System.ComponentModel.Composition.ImportAttribute" /> 类的新实例。</summary>
      <param name="contractName">要导入的导出结果的协定名称，或 null 或空字符串 ("") 以使用默认协定名称。</param>
      <param name="contractType">要导入的导出结果的类型。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportAttribute.#ctor(System.Type)">
      <summary>通过导入具有派生自指定类型的协定名称的导出，初始化 <see cref="T:System.ComponentModel.Composition.ImportAttribute" /> 类的新实例。</summary>
      <param name="contractType">要从中派生导出的协定名称的类型，或 null 以使用默认协定名称。</param>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportAttribute.AllowDefault">
      <summary>获取或设置一个值，该值指示在容器中不存在具有协定名称的导出时，是否将属性、字段或参数设置为其类型的默认值。</summary>
      <returns>如果在 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 中不存在具有 <see cref="P:System.ComponentModel.Composition.ImportAttribute.ContractName" /> 的导出时，将属性、字段或参数设置为其类型的默认值，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportAttribute.AllowRecomposition">
      <summary>获取或设置一个值，该值指示在容器中具有匹配协定的导出发生更改时，是否将重新组合属性或字段。</summary>
      <returns>如果在 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 中添加或移除具有匹配的 <see cref="P:System.ComponentModel.Composition.ImportAttribute.ContractName" /> 的导出时，允许重新组合属性或字段，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportAttribute.ContractName">
      <summary>获取要导入的导出结果的协定名称。</summary>
      <returns>要导入的导出结果的协定名称。 默认值为空字符串 ("")。</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportAttribute.ContractType">
      <summary>获取要导入的导出结果的类型。</summary>
      <returns>要导入的导出结果的类型。</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportAttribute.RequiredCreationPolicy">
      <summary>获取或设置一个值，该值指示导入程序需要导出结果的特定 <see cref="T:System.ComponentModel.Composition.CreationPolicy" /> 以满足此导入。</summary>
      <returns>下列值之一： 如果导入程序不需要特定 <see cref="T:System.ComponentModel.Composition.CreationPolicy" />，则为 <see cref="F:System.ComponentModel.Composition.CreationPolicy.Any" />。 这是默认设置。 若要求容器中的所有部件共享所有已使用的导出，则为 <see cref="F:System.ComponentModel.Composition.CreationPolicy.Shared" />。 若要求所有已使用的导出在容器中不共享，则为 <see cref="F:System.ComponentModel.Composition.CreationPolicy.NonShared" />。 在此情况下，每个部件都会收到各自的实例。</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
      <summary>当导入的基数与匹配的导出的基数不一致时引发的异常。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor">
      <summary>使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" /> 类的新实例。</summary>
      <param name="message">一条描述 <see cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" /> 的消息，或 null 以将 <see cref="P:System.Exception.Message" /> 属性设置为其默认值。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.ComponentModel.Composition.ImportingConstructorAttribute">
      <summary>指定在创建部件时应使用哪一个构造函数。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportingConstructorAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.ImportingConstructorAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.ImportManyAttribute">
      <summary>指定属性、字段或参数应通过 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象用所有匹配的导出进行填充。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor">
      <summary>通过导入具有默认协定名称的导出集，初始化 <see cref="T:System.ComponentModel.Composition.ImportManyAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor(System.String)">
      <summary>通过导入具有指定协定名称的导出集，初始化 <see cref="T:System.ComponentModel.Composition.ImportManyAttribute" /> 类的新实例。</summary>
      <param name="contractName">要导入的导出结果的协定名称，或 null 或空字符串 ("") 以使用默认协定名称。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor(System.String,System.Type)">
      <summary>通过导入具有指定协定名称和协定类型的导出集，初始化 <see cref="T:System.ComponentModel.Composition.ImportManyAttribute" /> 类的新实例。</summary>
      <param name="contractName">要导入的导出结果的协定名称，或 null 或空字符串 ("") 以使用默认协定名称。</param>
      <param name="contractType">要导入的导出结果的类型。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor(System.Type)">
      <summary>通过导入具有派生自指定类型的协定名称的导出集，初始化 <see cref="T:System.ComponentModel.Composition.ImportManyAttribute" /> 类的新实例。</summary>
      <param name="contractType">用于派生要导入的导出结果的协定名称的类型，或 null 以使用默认协定名称。</param>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportManyAttribute.AllowRecomposition">
      <summary>获取或设置一个值，该值指示在提供匹配协定的导出发生更改时，是否将重新组合经过修饰的属性或字段。</summary>
      <returns>如果在 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 中添加或移除提供同一 <see cref="P:System.ComponentModel.Composition.ImportManyAttribute.ContractName" /> 的导出时，允许重新组合属性或字段，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportManyAttribute.ContractName">
      <summary>获取要导入的导出结果的协定名称。</summary>
      <returns>要导入的导出结果的协定名称。 默认值为空字符串 ("")。</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportManyAttribute.ContractType">
      <summary>获取要导入的导出结果的协定类型。</summary>
      <returns>此导入期望的导出的类型。 默认值为 null，这表示将通过查看此导入附加到的成员上的类型来获取类型。 如果该类型为 <see cref="T:System.Object" />，则导入将匹配任何导出的类型。</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportManyAttribute.RequiredCreationPolicy">
      <summary>获取或设置一个值，该值指示导入程序需要导出结果的特定 <see cref="T:System.ComponentModel.Composition.CreationPolicy" /> 以满足此导入。</summary>
      <returns>下列值之一： 如果导入程序不需要特定 <see cref="T:System.ComponentModel.Composition.CreationPolicy" />，则为 <see cref="F:System.ComponentModel.Composition.CreationPolicy.Any" />。 这是默认设置。 若要求容器中的所有部件共享所有已使用的导出，则为 <see cref="F:System.ComponentModel.Composition.CreationPolicy.Shared" />。 若要求所有已使用的导出在容器中不共享，则为 <see cref="F:System.ComponentModel.Composition.CreationPolicy.NonShared" />。 在此情况下，每个部件都会收到各自的实例。</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.InheritedExportAttribute">
      <summary>指定某个类型提供特定导出，并指定此类型的子类也提供该导出。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.InheritedExportAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.String)">
      <summary>使用指定的协定名称初始化 <see cref="T:System.ComponentModel.Composition.InheritedExportAttribute" /> 类的新实例。</summary>
      <param name="contractName">协定的名称。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.String,System.Type)">
      <summary>使用指定的协定名称和类型初始化 <see cref="T:System.ComponentModel.Composition.InheritedExportAttribute" /> 类的新实例。</summary>
      <param name="contractName">协定的名称。</param>
      <param name="contractType">协定的类型。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.Type)">
      <summary>使用指定的协定类型初始化 <see cref="T:System.ComponentModel.Composition.InheritedExportAttribute" /> 类的新实例。</summary>
      <param name="contractType">协定的类型。</param>
    </member>
    <member name="T:System.ComponentModel.Composition.IPartImportsSatisfiedNotification">
      <summary>在满足部件的导入时通知部件。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.IPartImportsSatisfiedNotification.OnImportsSatisfied">
      <summary>在满足部件的导入并可安全使用时调用。</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.MetadataAttributeAttribute">
      <summary>指定自定义特性的属性应为应用于同一类型、属性、字段或方法的导出提供元数据。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.MetadataAttributeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.MetadataAttributeAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.PartCreationPolicyAttribute">
      <summary>指定部件的 <see cref="P:System.ComponentModel.Composition.PartCreationPolicyAttribute.CreationPolicy" />。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.PartCreationPolicyAttribute.#ctor(System.ComponentModel.Composition.CreationPolicy)">
      <summary>使用指定的创建策略初始化 <see cref="T:System.ComponentModel.Composition.PartCreationPolicyAttribute" /> 类的新实例。</summary>
      <param name="creationPolicy">要使用的创建策略。</param>
    </member>
    <member name="P:System.ComponentModel.Composition.PartCreationPolicyAttribute.CreationPolicy">
      <summary>获取或设置一个值，该值指示特性化部件的创建策略。</summary>
      <returns>
        <see cref="P:System.ComponentModel.Composition.PartCreationPolicyAttribute.CreationPolicy" /> 值之一，指示特性化部件的创建策略。 默认值为 <see cref="F:System.ComponentModel.Composition.CreationPolicy.Any" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.PartMetadataAttribute">
      <summary>指定部件的元数据。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.PartMetadataAttribute.#ctor(System.String,System.Object)">
      <summary>使用指定的名称和元数据值初始化 <see cref="T:System.ComponentModel.Composition.PartMetadataAttribute" /> 类的新实例。</summary>
      <param name="name">一个包含元数据值的名称的字符串，或为 null 以使用一个空字符串 ("")。</param>
      <param name="value">包含元数据值的对象。 它可以是 null。</param>
    </member>
    <member name="P:System.ComponentModel.Composition.PartMetadataAttribute.Name">
      <summary>获取元数据值的名称。</summary>
      <returns>一个包含元数据值的名称的字符串。</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.PartMetadataAttribute.Value">
      <summary>获取元数据值。</summary>
      <returns>包含元数据值的对象。</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.PartNotDiscoverableAttribute">
      <summary>指定此类型的导出不包含在 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 中。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.PartNotDiscoverableAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.PartNotDiscoverableAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.AggregateCatalog">
      <summary>合并 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 对象元素的目录。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartCatalog})">
      <summary>使用指定的目录初始化 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> 类的新实例。</summary>
      <param name="catalogs">要添加到 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> 中的 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 对象的集合，或为 null 以创建一个空的 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="catalogs" /> 包含为 null 的元素。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog[])">
      <summary>使用指定的目录初始化 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> 类的新实例。</summary>
      <param name="catalogs">要添加到 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> 中的 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="catalogs" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="catalogs" /> 包含为 null 的元素。</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AggregateCatalog.Catalogs">
      <summary>获取 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> 对象的基础目录。</summary>
      <returns>以 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> 对象为基础的 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 对象的集合。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> 对象已被释放。</exception>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.AggregateCatalog.Changed">
      <summary>在 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> 对象的内容更改后发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.AggregateCatalog.Changing">
      <summary>在 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> 对象的内容正在更改时发生。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>获取与指定的定义所表示的约束相匹配的导出定义。</summary>
      <returns>
        <see cref="T:System.Tuple`2" /> 的集合，其中包含与 <paramref name="definition" /> 指定的约束相匹配的对象的 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 对象及其关联的 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 对象。</returns>
      <param name="definition">要返回的 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 对象的条件。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> 对象已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)">
      <summary>引发 <see cref="E:System.ComponentModel.Composition.Hosting.AggregateCatalog.Changed" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" /> 对象。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)">
      <summary>引发 <see cref="E:System.ComponentModel.Composition.Hosting.AggregateCatalog.Changing" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" /> 对象。</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AggregateCatalog.Parts">
      <summary>获取目录中包含的部件定义。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> 对象中包含的 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 对象。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> 已被释放。</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider">
      <summary>检索由 <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> 对象的集合提供的导出。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Hosting.ExportProvider})">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> 类的新实例。</summary>
      <param name="providers">按优先级排列的导出提供程序的列表。 将按提供程序的提供顺序来使用它们。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="providers" /> 的一个或多个元素为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> 类的新实例。</summary>
      <param name="providers">按优先级排列的导出提供程序的列表。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Dispose">
      <summary>释放由 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> 类的当前实例占用的所有资源。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Dispose(System.Boolean)">
      <summary>释放 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> 类使用的非托管资源，并可以选择释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>获取与指定的导入条件匹配的所有导出。</summary>
      <returns>一个包含与指定的条件匹配的所有导出的集合。</returns>
      <param name="definition">要返回的 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的条件。</param>
      <param name="atomicComposition">组合的事务性容器。</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Providers">
      <summary>获取一个集合，该集合包含 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> 对象聚合的提供程序。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> 聚合的 <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> 对象的集合。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> 对象已被释放。</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog">
      <summary>在托管代码程序集中发现特性化部件。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.Reflection.Assembly)">
      <summary>使用指定的程序集初始化 <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> 类的新实例。</summary>
      <param name="assembly">包含要添加到 <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> 对象中的特性化 <see cref="T:System.Type" /> 对象的程序集。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assembly" /> 为 null。 - 或 - <paramref name="assembly" /> 是在只反射上下文中加载的。</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.Assembly">
      <summary>获取其特性化类型包含在程序集目录中的程序集。</summary>
      <returns>其特性化 <see cref="T:System.Type" /> 对象包含在 <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> 中的程序集。</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>获取与导入定义所指定的条件相匹配的导出的集合。</summary>
      <returns>与 <paramref name="definition" /> 所指定的条件相匹配的导出的集合。</returns>
      <param name="definition">指定相匹配的导出的条件。</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.Parts">
      <summary>获取程序集目录中包含的部件定义。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> 中包含的 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 对象。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> 对象已被释放。</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName">
      <summary>获取 <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> 对象的显示名称。</summary>
      <returns>一个表示此 <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> 对象的类型和程序集的字符串。</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin">
      <summary>获取此元素源自于的组合元素。</summary>
      <returns>始终为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.ToString">
      <summary>获取程序集目录的字符串表示形式。</summary>
      <returns>程序集目录的表示形式。</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.AtomicComposition">
      <summary>表示事务性组合的单个组合操作。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor(System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>使用指定的父级 <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> 初始化 <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> 类的新实例。</summary>
      <param name="outerAtomicComposition">此组合操作的父级。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.AddCompleteAction(System.Action)">
      <summary>添加一个要在整个组合操作成功完成时执行的操作。</summary>
      <param name="completeAction">要执行的操作。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.AddRevertAction(System.Action)">
      <summary>添加一个要在整个组合操作失败时执行的操作。</summary>
      <param name="revertAction">要执行的操作。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Complete">
      <summary>将此组合操作标记为已完成。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose">
      <summary>释放由 <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> 类的当前实例占用的所有资源，并将此组合操作标记为已失败。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(System.Object,System.Object)">
      <summary>保存事务中的键值对以跟踪暂定状态。</summary>
      <param name="key">要保存的键。</param>
      <param name="value">要保存的值。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue``1(System.Object,System.Boolean,``0@)">
      <summary>获取一个由 <see cref="M:System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(System.Object,System.Object)" /> 方法保存的值，也可以选择不搜索父事务。</summary>
      <returns>如果该值已成功检索，则为 true；否则为 false。</returns>
      <param name="key">要从中检索的键。</param>
      <param name="localAtomicCompositionOnly">要排除父事务，则为 true；否则为 false。</param>
      <param name="value">检索到的值。</param>
      <typeparam name="T">要检索的值的类型。</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue``1(System.Object,``0@)">
      <summary>获取一个由 <see cref="M:System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(System.Object,System.Object)" /> 方法保存的值。</summary>
      <returns>如果该值已成功检索，则为 true；否则为 false。</returns>
      <param name="key">要从中检索的键。</param>
      <param name="value">检索到的值。</param>
      <typeparam name="T">要检索的值的类型。</typeparam>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider">
      <summary>从目录中检索导出。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)">
      <summary>使用指定的目录初始化 <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> 类的新实例。</summary>
      <param name="catalog">
        <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> 用于生成 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的目录。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="catalog" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Boolean)">
      <summary>使用指定的目录和线程安全模式（可选）初始化 <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> 类的新实例。</summary>
      <param name="catalog">
        <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> 用于生成 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的目录。</param>
      <param name="isThreadSafe">如果此对象必须是线程安全的，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="catalog" /> 为 null。</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Catalog">
      <summary>获取用于提供导出的目录。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> 用于生成 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的目录。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 已被释放。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Dispose">
      <summary>释放由 <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> 类的当前实例占用的所有资源。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>返回与指定的导入条件匹配的所有导出。</summary>
      <returns>一个包含与指定的条件匹配的所有导出的集合。</returns>
      <param name="definition">要返回的 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的条件。</param>
      <param name="atomicComposition">要使用的组合事务，或为 null 以禁用事务性组合。</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CatalogExportProvider.SourceProvider">
      <summary>获取或设置向其他导出提供提供访问的导出提供程序。</summary>
      <returns>提供对其他 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的 <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> 访问的导出提供程序。 默认值为 null。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">已设置此属性。 - 或 - <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> 对象的方法已经被访问。</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changed" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartDefinition},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartDefinition},System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>使用指定的更改初始化 <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" /> 类的新实例。</summary>
      <param name="addedDefinitions">已添加到目录中的部件定义。</param>
      <param name="removedDefinitions">已从目录中移除的部件定义。</param>
      <param name="atomicComposition">要使用的组合事务，或为 null 以禁用事务性组合。</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.AddedDefinitions">
      <summary>获取添加到此更改的 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 中的定义的集合。</summary>
      <returns>添加到目录中的定义的集合。</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.AtomicComposition">
      <summary>获取此更改的组合事务。</summary>
      <returns>此更改的组合事务。</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.RemovedDefinitions">
      <summary>获取此更改从 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 中移除的定义的集合。</summary>
      <returns>此更改从目录中移除的定义的集合。</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider">
      <summary>检索来自某个部件的导出。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> 类的新实例，可以选择是否使用线程安全模式。</summary>
      <param name="isThreadSafe">如果 <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> 对象必须是线程安全的，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)">
      <summary>对指定的批执行组合。</summary>
      <param name="batch">要对其执行组合的批。</param>
      <exception cref="T:System.InvalidOperationException">该容器已在组合的过程中。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Dispose">
      <summary>释放由 <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> 类的当前实例占用的所有资源。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>获取此提供程序中与指定导入的条件匹配的所有导出的集合。</summary>
      <returns>此提供程序中与指定条件匹配的所有导出的集合。</returns>
      <param name="definition">定义要获取的 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 条件的 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />。</param>
      <param name="atomicComposition">要使用的组合事务，或为 null 以禁用事务性组合。</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.SourceProvider">
      <summary>获取或设置提供对其他 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的访问的导出提供程序。</summary>
      <returns>一个提供对 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的 <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> 访问的提供程序。 默认值为 null。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">已设置此属性。 - 或 - <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> 的方法已经被访问。</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.CompositionBatch">
      <summary>表示一组将添加至一个事务性组合的容器中或从容器中移除的 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionBatch.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionBatch.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePart},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePart})">
      <summary>使用要添加和移除的指定部件初始化 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> 类的新实例。</summary>
      <param name="partsToAdd">要添加的 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象的集合。</param>
      <param name="partsToRemove">要移除的 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象的集合。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="partsToAdd" /> 为 null。 - 或 - <paramref name="partsToRemove" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionBatch.AddExport(System.ComponentModel.Composition.Primitives.Export)">
      <summary>向 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> 对象中添加指定的导出。</summary>
      <returns>所添加的部件。</returns>
      <param name="export">要添加到 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> 对象中的导出。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="export" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionBatch.AddPart(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>向 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> 对象中添加指定的部件。</summary>
      <param name="part">要添加的部件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="part" /> 为 null。</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CompositionBatch.PartsToAdd">
      <summary>获取要添加的 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象的集合。</summary>
      <returns>要添加的部件的集合。</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CompositionBatch.PartsToRemove">
      <summary>获取要移除的 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象的集合。</summary>
      <returns>要移除的部件的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionBatch.RemovePart(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>将指定的部件放置在要移除的部件列表上。</summary>
      <param name="part">要移除的部件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="part" /> 为 null。</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.CompositionConstants">
      <summary>包含由组合系统使用的静态元数据密钥。</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Hosting.CompositionConstants.ExportTypeIdentityMetadataName">
      <summary>为组合系统创建的元数据指定密钥，以用唯一标识符标记部件。</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Hosting.CompositionConstants.PartCreationPolicyMetadataName">
      <summary>为组合系统创建的元数据指定密钥，以用创建策略标记部件。</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
      <summary>管理部件的组合。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <summary>使用指定的导出提供程序初始化 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 类的新实例。</summary>
      <param name="providers">提供对 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 访问的 <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> 对象的数组，或为 null 以将 <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> 设置为空的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="providers" /> 包含为 null 的元素。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Boolean,System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <summary>使用指定的目录、线程安全模式和导出提供程序初始化 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 类的新实例。</summary>
      <param name="catalog">向 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 提供 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的目录。</param>
      <param name="isThreadSafe">如果此 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象必须是线程安全的，则为 true；否则为 false。</param>
      <param name="providers">提供对 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 访问的 <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> 对象的数组，或为 null 以将 <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> 属性设置为空的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="providers" /> 的一个或多个元素为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <summary>使用指定的目录和导出提供程序初始化 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 类的新实例。</summary>
      <param name="catalog">向 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 提供 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的目录。</param>
      <param name="providers">提供对 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 访问的 <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> 对象的数组，或为 null 以将 <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> 设置为空的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="providers" /> 包含为 null 的元素。</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Catalog">
      <summary>获取提供对 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的容器访问的 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />。</summary>
      <returns>提供对从 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象生成的导出的 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 访问的目录。 默认值为 null。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已被释放。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)">
      <summary>在容器中添加或移除指定的 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> 中的部件并执行组合。</summary>
      <param name="batch">组合期间要包括的对 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 的更改。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose">
      <summary>释放由 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 类的当前实例占用的所有资源。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>返回与指定的 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 对象中的条件相匹配的所有导出的集合。</summary>
      <returns>此 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象中与 <paramref name="definition" /> 指定的条件相匹配的所有 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的集合。</returns>
      <param name="definition">定义要获取的 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的条件的对象。</param>
      <param name="atomicComposition">要使用的组合事务，或为 null 以禁用事务性组合。</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers">
      <summary>获取提供对其他 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 对象的容器访问的导出提供程序。</summary>
      <returns>提供对其他 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 访问的 <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> 对象的集合。 默认值为空 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 已被释放。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport(System.ComponentModel.Composition.Primitives.Export)">
      <summary>从 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 中释放指定的 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象。</summary>
      <param name="export">需要释放的 <see cref="T:System.ComponentModel.Composition.Primitives.Export" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="export" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport``1(System.Lazy{``0})">
      <summary>从组合中移除指定的导出并释放其资源（如果可能）。</summary>
      <param name="export">对要移除的导出的间接引用。</param>
      <typeparam name="T">导出的类型。</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export})">
      <summary>从 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 中释放一组 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象。</summary>
      <param name="exports">将释放的 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exports" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="exports" /> 包含为 null 的元素。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``1(System.Collections.Generic.IEnumerable{System.Lazy{``0}})">
      <summary>从组合中移除导出的集合并释放其资源（如果可能）。</summary>
      <param name="exports">对要移除的导出的间接引用的集合。</param>
      <typeparam name="T">导出的类型。</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}})">
      <summary>从组合中移除导出的集合并释放其资源（如果可能）。</summary>
      <param name="exports">对要移除的导出及其元数据的间接引用的集合。</param>
      <typeparam name="T">导出的类型。</typeparam>
      <typeparam name="TMetadataView">导出的元数据视图的类型。</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>满足指定的 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象的导入，而无需注册该对象以进行重新组合。</summary>
      <param name="part">要满足其导入的部件。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="part" /> 为 null。</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">组合期间发生错误。 <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> 将包含所发生错误的集合。</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ExportProvider">
      <summary>检索与指定的 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 对象相匹配的导出。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> 类的新实例。</summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged">
      <summary>当 <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> 中的导出更改时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging">
      <summary>当提供的导出正在更改时发生。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2">
      <summary>返回具有从指定的类型参数派生的协定名称的导出。 如果不是正好有一个匹配的导出，则将引发异常。</summary>
      <returns>System.Lazy`2</returns>
      <typeparam name="T">要返回的 <see cref="T:System.Lazy`2" /> 对象的类型参数。 协定名称也派生自此类型参数。</typeparam>
      <typeparam name="TMetadataView">要返回的 <see cref="T:System.Lazy`2" /> 对象的元数据视图的类型。</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">有零个 <see cref="T:System.Lazy`2" /> 对象具有从 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象中的 <paramref name="T" /> 派生的协定名称。 - 或 - 有多个 <see cref="T:System.Lazy`2" /> 对象具有从 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象中的 <paramref name="T" /> 派生的协定名称。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="TMetadataView" /> 不是有效的元数据视图类型。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1">
      <summary>返回具有从指定的类型参数派生的协定名称的导出。 如果不是正好有一个匹配的导出，则将引发异常。</summary>
      <returns>具有从指定的类型参数派生的协定名称的导出。</returns>
      <typeparam name="T">要返回的 <see cref="T:System.Lazy`1" /> 对象的类型参数。 协定名称也派生自此类型参数。</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">有零个 <see cref="T:System.Lazy`1" /> 对象具有从 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象中的 <paramref name="T" /> 派生的协定名称。 - 或 - 有多个 <see cref="T:System.Lazy`1" /> 对象具有从 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象中的 <paramref name="T" /> 派生的协定名称。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已被释放。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2(System.String)">
      <summary>返回具有指定的协定名称的导出。 如果不是正好有一个匹配的导出，则将引发异常。</summary>
      <returns>具有指定的协定名称的导出。</returns>
      <param name="contractName">要返回的 <see cref="T:System.Lazy`2" /> 对象的协定名称，或者为 null 或空字符串 ("") 以使用默认的协定名称。</param>
      <typeparam name="T">要返回的 <see cref="T:System.Lazy`2" /> 对象的类型参数。</typeparam>
      <typeparam name="TMetadataView">要返回的 <see cref="T:System.Lazy`2" /> 对象的元数据视图的类型。</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">有零个 <see cref="T:System.Lazy`2" /> 对象具有从 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象中的 <paramref name="T" /> 派生的协定名称。 - 或 - 有多个 <see cref="T:System.Lazy`2" /> 对象具有从 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象中的 <paramref name="T" /> 派生的协定名称。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="TMetadataView" /> 不是有效的元数据视图类型。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1(System.String)">
      <summary>返回具有指定的协定名称的导出。 如果不是正好有一个匹配的导出，则将引发异常。</summary>
      <returns>具有指定的协定名称的导出。</returns>
      <param name="contractName">要返回的 <see cref="T:System.Lazy`1" /> 对象的协定名称，或者为 null 或空字符串 ("") 以使用默认的协定名称。</param>
      <typeparam name="T">要返回的 <see cref="T:System.Lazy`1" /> 对象的类型参数。</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">有零个 <see cref="T:System.Lazy`1" /> 对象具有从 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象中的 <paramref name="T" /> 派生的协定名称。 - 或 - 有多个 <see cref="T:System.Lazy`1" /> 对象具有从 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象中的 <paramref name="T" /> 派生的协定名称。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已被释放。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1">
      <summary>返回具有从指定的类型参数派生的协定名称的已导出对象。 如果不是正好有一个匹配的已导出对象，则将引发异常。</summary>
      <returns>具有从指定的类型参数派生的协定名称的已导出对象。</returns>
      <typeparam name="T">要返回的已导出对象的类型。 协定名称也派生自此类型参数。</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">有零个已导出对象具有从 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 中的 <paramref name="T" /> 派生的协定名称。 - 或 - 有多个已导出对象具有从 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 中的 <paramref name="T" /> 派生的协定名称。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已被释放。</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">不能将基础导出对象强制转换为 <paramref name="T" />。</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">组合期间发生错误。 <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> 将包含所发生错误的集合。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1(System.String)">
      <summary>返回具有指定的协定名称的已导出对象。 如果不是正好有一个匹配的已导出对象，则将引发异常。</summary>
      <returns>具有指定的协定名称的已导出对象。</returns>
      <param name="contractName">要返回的已导出对象的协定名称，或者为 null 或空字符串 ("") 以使用默认的协定名称。</param>
      <typeparam name="T">要返回的已导出对象的类型。</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">有零个已导出对象具有从 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 中的 <paramref name="T" /> 派生的协定名称。 - 或 - 有多个已导出对象具有从 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 中的 <paramref name="T" /> 派生的协定名称。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已被释放。</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">不能将基础导出对象强制转换为 <paramref name="T" />。</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">组合期间发生错误。 <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> 将包含所发生错误的集合。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1">
      <summary>获取具有从指定的类型参数派生的协定名称的已导出对象或指定类型的默认值，如果有多个匹配的已导出对象，则引发异常。</summary>
      <returns>如果找到匹配项，则为具有从 <paramref name="T" /> 派生的协定名称的已导出对象；否则为 <paramref name="T" /> 的默认值。</returns>
      <typeparam name="T">要返回的已导出对象的类型。 协定名称也派生自此类型参数。</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">有多个已导出对象具有从 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 中的 <paramref name="T" /> 派生的协定名称。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已被释放。</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">不能将基础导出对象强制转换为 <paramref name="T" />。</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">组合期间发生错误。 <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> 将包含所发生错误的集合。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1(System.String)">
      <summary>获取具有指定的协定名称的已导出对象或指定类型的默认值，如果有多个匹配的已导出对象，则引发异常。</summary>
      <returns>如果找到匹配项，则为具有指定的协定名称的已导出对象；否则为 <paramref name="T" /> 的默认值。</returns>
      <param name="contractName">要返回的已导出对象的协定名称，或者为 null 或空字符串 ("") 以使用默认的协定名称。</param>
      <typeparam name="T">要返回的已导出对象的类型。</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
        <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 中，有多个具有指定的协定名称的已导出对象。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已被释放。</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">不能将基础导出对象强制转换为 <paramref name="T" />。</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">组合期间发生错误。 <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> 将包含所发生错误的集合。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1">
      <summary>获取具有从指定的类型参数派生的协定名称的所有已导出对象。</summary>
      <returns>如果找到匹配项，则为具有从指定的类型参数派生的协定名称的已导出对象；否则为空的 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 对象。</returns>
      <typeparam name="T">要返回的已导出对象的类型。 协定名称也派生自此类型参数。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已被释放。</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">一个或多个基础导出对象不能强制转换为 <paramref name="T" />。</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">组合期间发生错误。 <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> 将包含所发生错误的集合。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1(System.String)">
      <summary>获取具有指定的协定名称的所有已导出对象。</summary>
      <returns>如果找到匹配项，则为具有指定的协定名称的已导出对象；否则为空的 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 对象。</returns>
      <param name="contractName">要返回的已导出对象的协定名称；或者为 null 或空字符串 ("") 以使用默认的协定名称。</param>
      <typeparam name="T">要返回的已导出对象的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已被释放。</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">一个或多个基础导出值不能强制转换为 <paramref name="T" />。</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">组合期间发生错误。 <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> 将包含所发生错误的集合。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1">
      <summary>获取具有从指定的类型参数派生的协定名称的所有导出。</summary>
      <returns>如果找到匹配项，则为具有从 <paramref name="T" /> 派生的协定名称的 <see cref="T:System.Lazy`1" /> 对象；否则为空的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象。</returns>
      <typeparam name="T">要返回的 <see cref="T:System.Lazy`1" /> 对象的类型参数。 协定名称也派生自此类型参数。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已被释放。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2">
      <summary>获取具有从指定的类型参数派生的协定名称的所有导出。</summary>
      <returns>如果找到匹配项，则为具有从 <paramref name="T" /> 派生的协定名称的 <see cref="T:System.Lazy`2" /> 对象；否则为空的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象。</returns>
      <typeparam name="T">要返回的 <see cref="T:System.Lazy`2" /> 对象的类型参数。 协定名称也派生自此类型参数。</typeparam>
      <typeparam name="TMetadataView">要返回的 <see cref="T:System.Lazy`2" /> 对象的元数据视图的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="TMetadataView" /> 不是有效的元数据视图类型。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>获取与指定的导入定义条件匹配的所有导出。</summary>
      <returns>与 <paramref name="definition" /> 指定的条件匹配的所有 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的集合。</returns>
      <param name="definition">定义要获取的 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的条件的对象。</param>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
        <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> 为 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" />，且没有任何 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象与指定的 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 的条件匹配。 - 或 - <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> 为 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> 或 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" />，且有多个 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象与指定的 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 的条件匹配。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>获取与指定的导入定义和组合条件匹配的所有导出。</summary>
      <returns>与 <paramref name="definition" /> 和 <paramref name="atomicComposition" /> 指定的条件匹配的所有 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的集合。</returns>
      <param name="definition">定义要获取的 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的条件的对象。</param>
      <param name="atomicComposition">组合的事务性容器。</param>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
        <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> 为 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" />，且没有任何 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象与指定的 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 的条件匹配。 - 或 - <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> 为 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> 或 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" />，且有多个 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象与指定的 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 的条件匹配。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> 为 null。 - 或 - <paramref name="atomicComposition" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2(System.String)">
      <summary>获取具有指定的协定名称的所有导出。</summary>
      <returns>如果找到匹配项，则为具有指定的协定名称的 <see cref="T:System.Lazy`2" /> 对象；否则为空的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象。</returns>
      <param name="contractName">要返回的 <see cref="T:System.Lazy`2" /> 对象的协定名称，或者为 null 或空字符串 ("") 以使用默认的协定名称。</param>
      <typeparam name="T">要返回的 <see cref="T:System.Lazy`2" /> 对象的类型参数。 协定名称也派生自此类型参数。</typeparam>
      <typeparam name="TMetadataView">要返回的 <see cref="T:System.Lazy`2" /> 对象的元数据视图的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="TMetadataView" /> 不是有效的元数据视图类型。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1(System.String)">
      <summary>获取具有指定的协定名称的所有导出。</summary>
      <returns>如果找到匹配项，则为具有指定的协定名称的 <see cref="T:System.Lazy`1" /> 对象；否则为空的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象。</returns>
      <param name="contractName">要返回的 <see cref="T:System.Lazy`1" /> 对象的协定名称，或者为 null 或空字符串 ("") 以使用默认的协定名称。</param>
      <typeparam name="T">要返回的 <see cref="T:System.Lazy`1" /> 对象的类型参数。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已被释放。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.Type,System.Type,System.String)">
      <summary>获取具有指定的协定名称的所有导出。</summary>
      <returns>匹配 <paramref name="contractName" /> 的协定的所有 <see cref="T:System.Lazy`2" /> 对象的集合。</returns>
      <param name="type">要返回的 <see cref="T:System.Lazy`2" /> 对象的类型参数。</param>
      <param name="metadataViewType">要返回的 <see cref="T:System.Lazy`2" /> 对象的元数据视图的类型。</param>
      <param name="contractName">要返回的 <see cref="T:System.Lazy`2" /> 对象的协定名称，或者为 null 或空字符串 ("") 以使用默认的协定名称。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="metadataViewType" /> 不是有效的元数据视图类型。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>获取与指定的定义所定义的约束匹配的所有导出。</summary>
      <returns>一个包含与指定的条件匹配的所有导出的集合。</returns>
      <param name="definition">定义要返回的 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的条件的对象。</param>
      <param name="atomicComposition">组合的事务性容器。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanged(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)">
      <summary>引发 <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" /> 事件。</summary>
      <param name="e">一个 <see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" />，其中包含事件数据。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanging(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)">
      <summary>引发 <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" /> 事件。</summary>
      <param name="e">一个 <see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" />，其中包含事件数据。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.TryGetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export}@)">
      <summary>获取与指定的导入条件匹配的所有导出。</summary>
      <returns>如果 <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> 为 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> 或 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrMore" /> 并且没有与指定的 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 的条件匹配的 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象，则为 true；如果 <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> 为 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> 或 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> 并且只有一个与指定的 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 条件匹配的 <see cref="T:System.ComponentModel.Composition.Primitives.Export" />，则为 true；否则，为 false。</returns>
      <param name="definition">定义要获取的 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的条件的对象。</param>
      <param name="atomicComposition">组合的事务性容器。</param>
      <param name="exports">如果找到匹配项，则此方法返回时将包含与 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 定义的条件匹配的 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的集合；否则为空的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> 为 null。</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" /> 和 <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ExportDefinition},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ExportDefinition},System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" /> 类的新实例。</summary>
      <param name="addedExports">已添加的事件。</param>
      <param name="removedExports">已移除的事件。</param>
      <param name="atomicComposition">包含更改的组合事务。</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.AddedExports">
      <summary>获取在此更改中添加的导出。</summary>
      <returns>已添加的导出的集合。</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.AtomicComposition">
      <summary>获取此更改的组合事务（如果有的话）。</summary>
      <returns>一个对与此更改关联的组合事务的引用，如果未使用任何事务，则为 null。</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.ChangedContractNames">
      <summary>获取在此更改中修改的协定名称。</summary>
      <returns>修改的协定名称的集合。</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.RemovedExports">
      <summary>获取在此更改中移除的导出。</summary>
      <returns>移除的导出的集合。</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ImportEngine">
      <summary>对容器执行组合。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider)">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> 类的新实例。</summary>
      <param name="sourceProvider">提供对 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的 <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> 访问的 <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" />。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider,System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> 类的新实例，可选择使用线程安全模式。</summary>
      <param name="sourceProvider">提供对 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的 <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> 访问的 <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" />。</param>
      <param name="isThreadSafe">如果线程安全是必需的，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.Dispose">
      <summary>释放由 <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> 类的当前实例占用的所有资源。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.PreviewImports(System.ComponentModel.Composition.Primitives.ComposablePart,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>预览指定部件的所有必需的导入，从而不用实际设置导入，就确定可以满足这些导入。</summary>
      <param name="part">要预览其导入的部件。</param>
      <param name="atomicComposition">要使用的组合事务，或为 null 表示没有组合事务。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.ReleaseImports(System.ComponentModel.Composition.Primitives.ComposablePart,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>释放用于满足指定部件的导入的所有导出。</summary>
      <param name="part">要释放其导入的部件。</param>
      <param name="atomicComposition">要使用的组合事务，或为 null 表示没有组合事务。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.SatisfyImports(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>满足指定部件的导入。</summary>
      <param name="part">要满足其导入的部件。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>满足指定部件的导入，而无需注册这些导入以进行重新组合。</summary>
      <param name="part">要满足其导入的部件。</param>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged">
      <summary>当 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 更改时提供通知。</summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changed">
      <summary>在 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 更改后发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changing">
      <summary>在 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 正在更改时发生。</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.TypeCatalog">
      <summary>从类型集合发现特性化部件。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>使用指定的类型初始化 <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> 类的新实例。</summary>
      <param name="types">要添加到 <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> 对象中的特性化 <see cref="T:System.Type" /> 对象的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 包含为 null 的元素。 - 或 - <paramref name="types" /> 包含在只反射上下文中加载的元素。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor(System.Type[])">
      <summary>使用指定的类型初始化 <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> 类的新实例。</summary>
      <param name="types">要添加到 <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> 对象中的特性化 <see cref="T:System.Type" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 包含为 null 的元素。 - 或 - <paramref name="types" /> 包含在只反射上下文中加载的元素。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>获取与导入定义所指定的条件相匹配的导出的集合。</summary>
      <returns>与 <paramref name="definition" /> 所指定的条件相匹配的导出的集合。</returns>
      <param name="definition">指定相匹配的导出的条件。</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.TypeCatalog.Parts">
      <summary>获取目录中包含的部件定义。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> 对象中包含的 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 对象。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> 对象已被释放。</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.TypeCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName">
      <summary>获取类型目录的显示名称。</summary>
      <returns>一个包含 <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> 的可读显示名称的字符串。</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.TypeCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin">
      <summary>获取类型目录源自于的组合元素。</summary>
      <returns>始终为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.ToString">
      <summary>返回类型目录的字符串表示形式。</summary>
      <returns>类型目录的字符串表示形式。</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ComposablePart">
      <summary>定义用于导入对象和生成已导出对象的可组合部件的抽象基类。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePart.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePart.Activate">
      <summary>在已设置部件的所有导入并可检索导出之后调用。</summary>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePart.ExportDefinitions">
      <summary>获取 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 对象的集合，这些对象描述由此部件提供的已导出对象。</summary>
      <returns>描述由 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 提供的已导出对象的 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 对象集合。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象已被释放。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePart.GetExportedValue(System.ComponentModel.Composition.Primitives.ExportDefinition)">
      <summary>获取由指定的 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 对象描述的已导出对象。</summary>
      <returns>由 <paramref name="definition" /> 描述的已导出对象。</returns>
      <param name="definition">
        <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 对象之一，这些对象来自描述要返回的已导出对象的 <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePart.ExportDefinitions" /> 属性。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> 为 null。</exception>
      <exception cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException">获取由 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 描述的导出对象时出错。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="definition" /> 不来自于 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 的 <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePart.ExportDefinitions" /> 属性。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.IsPrerequisite" /> 指示的一个或多个系统必备导入尚未设置。</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePart.ImportDefinitions">
      <summary>获取 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 对象的集合，这些对象描述此部件所需的已导入对象。</summary>
      <returns>描述 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 所需的已导入对象的 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 对象集合。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象已被释放。</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePart.Metadata">
      <summary>获取 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象的元数据。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象的元数据。 默认为一个空的只读 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象已被释放。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePart.SetImport(System.ComponentModel.Composition.Primitives.ImportDefinition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export})">
      <summary>将由指定的 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 对象描述的导入设置为由指定的导出来满足。</summary>
      <param name="definition">来自 <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePart.ImportDefinitions" /> 属性的对象之一，该属性指定要设置的导入。</param>
      <param name="exports">要设置由 <paramref name="definition" /> 描述的导入的 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象集合。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> 为 null。  - 或 - <paramref name="exports" /> 为 null。</exception>
      <exception cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException">设置由 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 对象描述的导入时出错。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="definition" /> 不来自于 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 的 <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePart.ImportDefinitions" /> 属性。  - 或 - <paramref name="exports" /> 包含为 null 的元素。  - 或 - <paramref name="exports" /> 为空，且 <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> 为 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" />。  - 或 - <paramref name="exports" /> 包含多个元素，且 <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> 为 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> 或 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.ComponentModel.Composition.Primitives.ComposablePart.SetImport(System.ComponentModel.Composition.Primitives.ImportDefinition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export})" /> 以前已被调用，且 <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.IsRecomposable" /> 为 false。</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog">
      <summary>表示收集并返回 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 对象的可组合部件目录的抽象基类。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose">
      <summary>释放由 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 占用的所有资源。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>获取与指定的 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 对象所定义的约束相匹配的导出定义的列表。</summary>
      <returns>
        <see cref="T:System.Tuple`2" /> 的集合，其中包含与 <paramref name="definition" /> 指定的约束相匹配的对象的 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 对象及其关联的 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 对象。</returns>
      <param name="definition">要返回的 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 对象的条件。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 对象已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> 为 null。</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Parts">
      <summary>获取目录中包含的部件定义。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 中包含的 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 对象已被释放。</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition">
      <summary>定义可组合部件定义的抽象基类，可组合部件定义可描述和启用 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象的创建。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartDefinition.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartDefinition.CreatePart">
      <summary>创建 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 描述的部件的一个新实例。</summary>
      <returns>创建的部件。</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePartDefinition.ExportDefinitions">
      <summary>获取 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 对象的集合，这些对象描述由此 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 对象定义的部件导出的对象。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 对象的集合，这些对象描述 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 创建的 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象所提供的已导出对象。</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePartDefinition.ImportDefinitions">
      <summary>获取 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 对象的集合，这些对象描述此 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 对象定义的部件所需要的导入。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 对象的集合，这些对象描述 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 创建的 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象所需要的导入。</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePartDefinition.Metadata">
      <summary>获取此 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 对象的元数据的集合。</summary>
      <returns>一个包含 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 的元数据的集合。 默认为一个空的只读 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象。</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ComposablePartException">
      <summary>在对 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象调用方法时，发生错误的情况下引发的异常。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> 类的新实例。</summary>
      <param name="message">一条描述 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> 的消息，或为 null 以将 <see cref="P:System.Exception.Message" /> 属性设置为其默认值。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>使用指定的错误消息和导致异常的组合元素初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> 类的新实例。</summary>
      <param name="message">一条描述 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> 的消息，或为 null 以将 <see cref="P:System.Exception.Message" /> 属性设置为其默认值。</param>
      <param name="element">导致 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> 的组合元素，或为 null 以将 <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePartException.Element" /> 属性设置为 null。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement,System.Exception)">
      <summary>使用指定的错误消息以及导致此异常的组合元素和异常初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> 类的新实例。</summary>
      <param name="message">一条描述 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> 的消息，或为 null 以将 <see cref="P:System.Exception.Message" /> 属性设置为其默认值。</param>
      <param name="element">导致 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> 的组合元素，或为 null 以将 <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePartException.Element" /> 属性设置为 null。</param>
      <param name="innerException">作为导致 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> 的根本原因的异常，或为 null 以将 <see cref="P:System.Exception.InnerException" /> 属性设置为 null。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和导致出现此异常的异常来初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> 类的新实例。</summary>
      <param name="message">一条描述 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> 的消息，或为 null 以将 <see cref="P:System.Exception.Message" /> 属性设置为其默认值。</param>
      <param name="innerException">作为导致 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> 的根本原因的异常，或为 null 以将 <see cref="P:System.Exception.InnerException" /> 属性设置为 null。</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePartException.Element">
      <summary>获取导致异常的组合元素。</summary>
      <returns>导致 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> 的组合元素。 默认值为 null。</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition">
      <summary>表示 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象必需的且可以指定协定名称和元数据的导入。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.Boolean,System.ComponentModel.Composition.CreationPolicy)">
      <summary>使用指定的协定名称、必需的类型标识、必须的元数据、基数、创建策略、指示导入定义是否可重新组合或是必备组件，初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" /> 类的新实例。</summary>
      <param name="contractName">导入定义所需的 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的协定名称。</param>
      <param name="requiredTypeIdentity">期望的导出类型的类型标识。 可使用 <see cref="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Type)" /> 方法生成给定类型的类型标识。 如果不需要特定类型，则使用 null。</param>
      <param name="requiredMetadata">一个键/值对的集合，其中包含导入定义所需要的元数据名称和类型；或为 null 以将 <see cref="P:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredMetadata" /> 属性设置为空的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合。</param>
      <param name="cardinality">指示导入定义所需要的 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的基数的枚举值之一。</param>
      <param name="isRecomposable">若指定在  <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象的整个生存期内可以多次满足导入定义，则为 true；否则为 false。</param>
      <param name="isPrerequisite">若指定需要在 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 可以开始生成导出对象前先满足该导入定义，则为 true，否则为  false。</param>
      <param name="requiredCreationPolicy">一个值，该值指示导入程序需要导出结果的特定创建策略以满足此导入。 如果不需要特定的创建策略，则默认值为 <see cref="F:System.ComponentModel.Composition.CreationPolicy.Any" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contractName" /> 为空字符串 ("")。 - 或 - <paramref name="requiredMetadata" /> 包含为 null 的元素。 - 或 - <paramref name="cardinality" /> 不是 <see cref="T:System.ComponentModel.Composition.Primitives.ImportCardinality" /> 值之一。</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.Constraint">
      <summary>获取一个表达式，该表达式定义为了满足此导入定义所描述的导入而必须符合的条件。</summary>
      <returns>一个包含 <see cref="T:System.Func`2" /> 对象的表达式，该对象定义 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 为满足 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 而必须符合的条件。</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.IsConstraintSatisfiedBy(System.ComponentModel.Composition.Primitives.ExportDefinition)">
      <summary>返回一个值，该值指示给定的导出定义所表示的导出是否满足此对象所表示的约束。</summary>
      <returns>如果满足约束，则为 true；否则为 false。</returns>
      <param name="exportDefinition">要测试的导出定义。</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredCreationPolicy">
      <summary>获取或设置一个值，该值指示导入程序需要导出结果的特定 <see cref="T:System.ComponentModel.Composition.CreationPolicy" /> 以满足此导入。</summary>
      <returns>下列值之一： 如果导入程序不需要特定 <see cref="T:System.ComponentModel.Composition.CreationPolicy" />，则为 <see cref="F:System.ComponentModel.Composition.CreationPolicy.Any" />。 若要求使用的所有导出应由容器中的所有导入程序共享，则为 <see cref="F:System.ComponentModel.Composition.CreationPolicy.Shared" />。 若要求使用的所有导出不应在容器中共享，则为 <see cref="F:System.ComponentModel.Composition.CreationPolicy.NonShared" />。 在此情况下，每个导入程序都会收到一个单独的实例。</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredMetadata">
      <summary>获取导入定义所需要的导出的元数据名称。</summary>
      <returns>
        <see cref="T:System.String" /> 对象的集合，这些对象包含 <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" /> 所需要的 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的元数据名称。 默认为空 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合。</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredTypeIdentity">
      <summary>获取与此 <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" /> 相匹配的导出的期望类型。</summary>
      <returns>一个字符串，该字符串通过对此导入期望的类型调用 <see cref="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Type)" /> 方法生成。 如果值为 null，则此导入不需要特定类型。</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.Export">
      <summary>表示一个导出，它是由延迟创建的已导出对象和描述该对象的元数据组成的类型。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.Export.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.Export.#ctor(System.ComponentModel.Composition.Primitives.ExportDefinition,System.Func{System.Object})">
      <summary>使用指定的导出定义和导出的对象 getter 初始化 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 类的新实例。</summary>
      <param name="definition">一个对象，该对象描述 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象所满足的协定。</param>
      <param name="exportedValueGetter">一个方法，可调用该方法来创建 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 的导出对象。 这会将创建该对象的操作延迟到调用 <see cref="P:System.ComponentModel.Composition.Primitives.Export.Value" /> 属性时。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> 为 null。 - 或 - <paramref name="exportedObjectGetter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.Export.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Func{System.Object})">
      <summary>使用指定的协定名称、元数据和导出的值 getter 初始化 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 类的新实例。</summary>
      <param name="contractName">
        <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的协定名称。</param>
      <param name="metadata">
        <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的元数据，或为 null 以将 <see cref="P:System.ComponentModel.Composition.Primitives.Export.Metadata" /> 属性设置为空的只读 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象。</param>
      <param name="exportedValueGetter">一个方法，可调用该方法来创建 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 的导出对象。 这会将创建该对象的操作延迟到调用 <see cref="P:System.ComponentModel.Composition.Primitives.Export.Value" /> 方法时。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractName" /> 为 null。 - 或 - <paramref name="exportedObjectGetter" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contractName" /> 为空字符串 ("")。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.Export.#ctor(System.String,System.Func{System.Object})">
      <summary>使用指定的协定名称和导出的值 getter 初始化 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 类的新实例。</summary>
      <param name="contractName">
        <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的协定名称。</param>
      <param name="exportedValueGetter">一个方法，可调用该方法来创建 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 的导出对象。 这会将创建该对象的操作延迟到调用 <see cref="P:System.ComponentModel.Composition.Primitives.Export.Value" /> 方法时。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractName" /> 为 null。 - 或 - <paramref name="exportedObjectGetter" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contractName" /> 为空字符串 ("")。</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.Export.Definition">
      <summary>获取描述导出所满足的协定的定义。</summary>
      <returns>一个定义，该定义描述 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象所满足的协定。</returns>
      <exception cref="T:System.NotImplementedException">此属性未由派生类重写。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.Export.GetExportedValueCore">
      <summary>返回导出提供的已导出对象。</summary>
      <returns>导出提供的已导出对象。</returns>
      <exception cref="T:System.NotImplementedException">
        <see cref="M:System.ComponentModel.Composition.Primitives.Export.GetExportedValueCore" /> 方法不被派生类重写。</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">组合期间发生错误。 <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> 将包含所发生错误的集合。</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.Export.Metadata">
      <summary>获取导出的元数据。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 的元数据。</returns>
      <exception cref="T:System.NotImplementedException">
        <see cref="P:System.ComponentModel.Composition.Primitives.Export.Definition" /> 属性未由派生类重写。</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.Export.Value">
      <summary>提供此导出表示的对象。</summary>
      <returns>此导出表示的对象。</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ExportDefinition">
      <summary>描述特定 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象所满足的协定。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportDefinition.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportDefinition.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>使用指定的协定名称和元数据初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 类的新实例。</summary>
      <param name="contractName">
        <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 对象的协定名称。</param>
      <param name="metadata">
        <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 的元数据，或为 null 以将 <see cref="P:System.ComponentModel.Composition.Primitives.ExportDefinition.Metadata" /> 属性设置为空的只读 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contractName" /> 为空字符串 ("")。</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ExportDefinition.ContractName">
      <summary>获取协定名称。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 对象的协定名称。</returns>
      <exception cref="T:System.NotImplementedException">该属性未由派生类重写。</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ExportDefinition.Metadata">
      <summary>获取协定元数据。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 的元数据。 默认为一个空的只读 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象。</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportDefinition.ToString">
      <summary>返回导出定义的字符串表示形式。</summary>
      <returns>导出定义的字符串表示形式。</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ExportedDelegate">
      <summary>表示一个由 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 导出的函数。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportedDelegate.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ExportedDelegate" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportedDelegate.CreateDelegate(System.Type)">
      <summary>获取指定类型的委托。</summary>
      <returns>指定类型的委托；如果无法创建此类委托，则为 null。</returns>
      <param name="delegateType">要返回的委托的类型。</param>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ICompositionElement">
      <summary>表示一个参与组合的元素。</summary>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ICompositionElement.DisplayName">
      <summary>获取组合元素的显示名称。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Composition.Primitives.ICompositionElement" /> 的可读显示名称。</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ICompositionElement.Origin">
      <summary>获取当前组合元素源自于的组合元素。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.Composition.Primitives.ICompositionElement" /> 源自于的组合元素；如果 <see cref="T:System.ComponentModel.Composition.Primitives.ICompositionElement" /> 是根组合元素，则为 null。</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ImportCardinality">
      <summary>指示 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 所需的 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的基数。</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne">
      <summary>
        <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 恰好需要一个 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象。</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrMore">
      <summary>
        <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 需要零个或多个 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象。</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne">
      <summary>
        <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 需要零个或一个 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象。</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ImportDefinition">
      <summary>表示 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象所需要的导入。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ImportDefinition.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ImportDefinition.#ctor(System.Linq.Expressions.Expression{System.Func{System.ComponentModel.Composition.Primitives.ExportDefinition,System.Boolean}},System.String,System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.Boolean)">
      <summary>使用指定的协定、协定名称、基数和指示导入定义是否可重新组合或是必备组件，初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 类的新实例。</summary>
      <param name="constraint">一个包含 <see cref="T:System.Func`2" /> 对象的表达式，该对象定义 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 若要满足导入定义必须匹配的条件。</param>
      <param name="contractName">协定名称。</param>
      <param name="cardinality">指示导入定义所需要的 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的基数的枚举值之一。</param>
      <param name="isRecomposable">若指定在  <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象的整个生存期内可以多次满足导入定义，则为 true；否则为 false。</param>
      <param name="isPrerequisite">若指定必须在满足导入定义后 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 才能开始生成导出的对象，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constraint" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="cardinality" /> 不是 <see cref="T:System.ComponentModel.Composition.Primitives.ImportCardinality" /> 值中的一个。</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality">
      <summary>获取导入定义所需要的导出的基数。</summary>
      <returns>指示 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 所需要的 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象的基数的枚举值之一。 默认值为 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Constraint">
      <summary>获取一个表达式，该表达式定义导入若要与导入定义相匹配而必须满足的条件。</summary>
      <returns>一个包含 <see cref="T:System.Func`2" /> 对象的表达式，该对象定义 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 若要与 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 相匹配而必须满足的条件。</returns>
      <exception cref="T:System.NotImplementedException">该属性未由派生类重写。</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ImportDefinition.ContractName">
      <summary>获取协定的名称。</summary>
      <returns>协定名称。</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ImportDefinition.IsConstraintSatisfiedBy(System.ComponentModel.Composition.Primitives.ExportDefinition)">
      <summary>获取一个值，该值指示指定的定义所表示的导出是否满足此导入定义的约束。</summary>
      <returns>如果满足约束，则为 true；否则为 false。</returns>
      <param name="exportDefinition">要测试的导出定义。</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ImportDefinition.IsPrerequisite">
      <summary>获取一个值，该值指示是否必须先满足导入定义，然后部件才能开始生成导出的对象。</summary>
      <returns>如果必须先满足 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />，然后 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象才能开始生成导出的对象，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ImportDefinition.IsRecomposable">
      <summary>获取一个值，该值指示是否可以多次满足导入定义。</summary>
      <returns>如果在 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象的整个生存期内可以多次满足 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ImportDefinition.ToString">
      <summary>返回导入定义的字符串表示形式。</summary>
      <returns>导入定义的字符串表示形式。</returns>
    </member>
  </members>
</doc>