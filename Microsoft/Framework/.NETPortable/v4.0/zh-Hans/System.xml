<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System</name>
  </assembly>
  <members>
    <member name="T:System.Uri">
      <summary>提供统一资源标识符 (URI) 的对象表示形式和对 URI 各部分的轻松访问。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.#ctor(System.String)">
      <summary>用指定的 URI 初始化 <see cref="T:System.Uri" /> 类的新实例。</summary>
      <param name="uriString">一个 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> 为 null。</exception>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.FormatException" />。 <paramref name="uriString" /> 为空。 - 或 - <paramref name="uriString" /> 中指定的方案形式不正确。 请参见 <see cref="M:System.Uri.CheckSchemeName(System.String)" />。 - 或 - <paramref name="uriString" /> 包含太多斜杠。 - 或 - <paramref name="uriString" /> 中指定的密码无效。 - 或 - <paramref name="uriString" /> 中指定的主机名无效。 - 或 - <paramref name="uriString" /> 中指定的文件名无效。 - 或 - <paramref name="uriString" /> 中指定的用户名无效。 - 或 - <paramref name="uriString" /> 中指定的主机名或证书颁发机构名不能以反斜杠结尾。 - 或 - <paramref name="uriString" /> 中指定的端口号无效或无法分析。 - 或 - <paramref name="uriString" /> 的长度超过 65519 个字符。 - 或 - <paramref name="uriString" /> 中指定的方案的长度超过 1023 个字符。 - 或 - <paramref name="uriString" /> 中存在无效的字符序列。 - 或 - <paramref name="uriString" /> 中指定的 MS-DOS 路径必须以 c:\\ 开头。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.String,System.UriKind)">
      <summary>用指定的 URI 初始化 <see cref="T:System.Uri" /> 类的新实例。 此构造函数允许您指定 URI 字符串是相对 URI、绝对 URI 还是不确定。</summary>
      <param name="uriString">标识将由 <see cref="T:System.Uri" /> 实例表示的资源的字符串。</param>
      <param name="uriKind">指定 URI 字符串是相对 URI、绝对 URI 还是不确定。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="uriKind" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> 为 null。</exception>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.FormatException" />。 <paramref name="uriString" /> 包含相对 URI，而 <paramref name="uriKind" /> 为 <see cref="F:System.UriKind.Absolute" />。 或 <paramref name="uriString" /> 包含绝对 URI，而 <paramref name="uriKind" /> 为 <see cref="F:System.UriKind.Relative" />。 或 <paramref name="uriString" /> 为空。 - 或 - <paramref name="uriString" /> 中指定的方案形式不正确。 请参见 <see cref="M:System.Uri.CheckSchemeName(System.String)" />。 - 或 - <paramref name="uriString" /> 包含太多斜杠。 - 或 - <paramref name="uriString" /> 中指定的密码无效。 - 或 - <paramref name="uriString" /> 中指定的主机名无效。 - 或 - <paramref name="uriString" /> 中指定的文件名无效。 - 或 - <paramref name="uriString" /> 中指定的用户名无效。 - 或 - <paramref name="uriString" /> 中指定的主机名或证书颁发机构名不能以反斜杠结尾。 - 或 - <paramref name="uriString" /> 中指定的端口号无效或无法分析。 - 或 - <paramref name="uriString" /> 的长度超过 65519 个字符。 - 或 - <paramref name="uriString" /> 中指定的方案的长度超过 1023 个字符。 - 或 - <paramref name="uriString" /> 中存在无效的字符序列。 - 或 - <paramref name="uriString" /> 中指定的 MS-DOS 路径必须以 c:\\ 开头。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.String)">
      <summary>根据指定的基 URI 和相对 URI 字符串，初始化 <see cref="T:System.Uri" /> 类的新实例。</summary>
      <param name="baseUri">基 URI。</param>
      <param name="relativeUri">要添加到基 URI 的相对 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" /> 不是绝对的 <see cref="T:System.Uri" /> 实例。</exception>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.FormatException" />。 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 是空的或只包含空格。 - 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的方案无效。 - 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合所形成的 URI 包含太多的斜杠。 - 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的密码无效。 - 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的主机名无效。 - 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的文件名无效。 - 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的用户名无效。 - 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的主机名或证书颁发机构名不能以反斜杠结尾。 - 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的端口号无效或无法分析。 - 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 的长度超过 65519 个字符。 - 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的方案的长度超过 1023 个字符。 - 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中存在无效的字符序列。 - 或 - <paramref name="uriString" /> 中指定的 MS-DOS 路径必须以 c:\\ 开头。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.Uri)">
      <summary>根据指定的基 <see cref="T:System.Uri" /> 实例和相对 <see cref="T:System.Uri" /> 实例的组合，初始化 <see cref="T:System.Uri" /> 类的新实例。</summary>
      <param name="baseUri">作为新 <see cref="T:System.Uri" /> 实例的基的绝对 <see cref="T:System.Uri" />。</param>
      <param name="relativeUri">与 <see cref="T:System.Uri" /> 组合的相对 <paramref name="baseUri" /> 实例。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="baseUri" /> 不是绝对的 <see cref="T:System.Uri" /> 实例。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" /> 不是绝对的 <see cref="T:System.Uri" /> 实例。</exception>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.FormatException" />。 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 是空的或只包含空格。 - 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的方案无效。 - 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合所形成的 URI 包含太多的斜杠。 - 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的密码无效。 - 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的主机名无效。 - 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的文件名无效。 - 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的用户名无效。 - 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的主机名或证书颁发机构名不能以反斜杠结尾。 - 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的端口号无效或无法分析。 - 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 的长度超过 65519 个字符。 - 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的方案的长度超过 1023 个字符。 - 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中存在无效的字符序列。 - 或 - <paramref name="uriString" /> 中指定的 MS-DOS 路径必须以 c:\\ 开头。</exception>
    </member>
    <member name="P:System.Uri.AbsolutePath">
      <summary>获取 URI 的绝对路径。</summary>
      <returns>包含资源的绝对路径的 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.AbsoluteUri">
      <summary>获取绝对 URI。</summary>
      <returns>包含整个 URI 的 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Authority">
      <summary>获取服务器的域名系统 (DNS) 主机名或 IP 地址和端口号。</summary>
      <returns>包含此实例所表示的 URI 的证书颁发机构部分的 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.CheckHostName(System.String)">
      <summary>确定指定的主机名是否为有效的 DNS 名称。</summary>
      <returns>指示主机名类型的 <see cref="T:System.UriHostNameType" />。 如果无法确定主机名的类型，或者主机名为 null 或零长度字符串，则此方法返回 <see cref="F:System.UriHostNameType.Unknown" />。</returns>
      <param name="name">要验证的主机名。 可以是 IPv4 或 IPv6 地址或 Internet 主机名。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.CheckSchemeName(System.String)">
      <summary>确定指定的方案名是否有效。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果方案名有效，则该值为 true；否则为 false。</returns>
      <param name="schemeName">要验证的方案名。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.Compare(System.Uri,System.Uri,System.UriComponents,System.UriFormat,System.StringComparison)">
      <summary>使用指定的比较规则比较两个 URI 的指定部分。</summary>
      <returns>一个 <see cref="T:System.Int32" /> 值，指示进行比较的 <see cref="T:System.Uri" /> 部分之间的词法关系。 值 含义 小于零 <paramref name="uri1" /> 小于 <paramref name="uri2" />。 零 <paramref name="uri1" /> 等于 <paramref name="uri2" />。 大于零 <paramref name="uri1" /> 大于 <paramref name="uri2" />。</returns>
      <param name="uri1">第一个 <see cref="T:System.Uri" />。</param>
      <param name="uri2">第二个 <see cref="T:System.Uri" />。</param>
      <param name="partsToCompare">
        <see cref="T:System.UriComponents" /> 值的按位组合，它指定要比较的 <paramref name="uri1" /> 和 <paramref name="uri2" /> 的部分。</param>
      <param name="compareFormat">
        <see cref="T:System.UriFormat" /> 值中的一个，它指定在比较 URI 部分时使用的字符转义。</param>
      <param name="comparisonType">
        <see cref="T:System.StringComparison" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Uri.DnsSafeHost">
      <summary>获得可安全用于 DNS 解析的未转义主机名。</summary>
      <returns>一个包含适用于 DNS 解析的未转义 URI 主机部分的 <see cref="T:System.String" />；或者，如果原始的未转义主机字符串已适用于解析，则为原始的未转义主机字符串。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.Equals(System.Object)">
      <summary>比较两个 <see cref="T:System.Uri" /> 实例是否相等。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果两个实例表示相同的 URI，则该值为 true；否则为 false。</returns>
      <param name="comparand">与当前实例相比较的 <see cref="T:System.Uri" /> 实例或 URI 标识符。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Uri.EscapeDataString(System.String)">
      <summary>将字符串转换为它的转义表示形式。</summary>
      <returns>一个 <see cref="T:System.String" />，包含 <paramref name="stringToEscape" /> 的转义表示形式。</returns>
      <param name="stringToEscape">要转义的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToEscape" /> 为 null。</exception>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.FormatException" />。 <paramref name="stringToEscape" /> 的长度超过 32766 个字符。</exception>
    </member>
    <member name="M:System.Uri.EscapeUriString(System.String)">
      <summary>将 URI 字符串转换为它的转义表示形式。</summary>
      <returns>一个 <see cref="T:System.String" />，包含 <paramref name="stringToEscape" /> 的转义表示形式。</returns>
      <param name="stringToEscape">要转义的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToEscape" /> 为 null。</exception>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.FormatException" />。 <paramref name="stringToEscape" /> 的长度超过 32766 个字符。</exception>
    </member>
    <member name="P:System.Uri.Fragment">
      <summary>获取转义 URI 片段。</summary>
      <returns>一个包含任意 URI 片段信息的 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.GetComponents(System.UriComponents,System.UriFormat)">
      <summary>使用特殊字符的指定转义，获取当前实例的指定部分。</summary>
      <returns>一个包含这些部分的 <see cref="T:System.String" />。</returns>
      <param name="components">
        <see cref="T:System.UriComponents" /> 值的按位组合，它指定当前实例中要返回到调用方的部分。</param>
      <param name="format">
        <see cref="T:System.UriFormat" /> 值中的一个，它控制如何转义特殊字符。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="uriComponents" /> 不是有效 <see cref="T:System.UriComponents" /> 值的组合。</exception>
      <exception cref="T:System.InvalidOperationException">当前 <see cref="T:System.Uri" /> 不是绝对 URI。 相对 URI 不能和此方法一起使用。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.GetHashCode">
      <summary>获取 URI 的哈希代码。</summary>
      <returns>一个 <see cref="T:System.Int32" />，其中包含为此 URI 生成的哈希值。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Host">
      <summary>获取此实例的主机部分。</summary>
      <returns>一个包含主机名的 <see cref="T:System.String" />。 这通常是服务器的 DNS 主机名或 IP 地址。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.HostNameType">
      <summary>获取 URI 中指定的主机名的类型。</summary>
      <returns>
        <see cref="T:System.UriHostNameType" /> 枚举的成员。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.IsAbsoluteUri">
      <summary>获取一个值，该值指示 <see cref="T:System.Uri" /> 实例是否为绝对 URI。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果 <see cref="T:System.Uri" /> 实例是绝对 URI，则该值为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.IsBaseOf(System.Uri)">
      <summary>确定当前的 <see cref="T:System.Uri" /> 实例是否为指定 <see cref="T:System.Uri" /> 实例的基。</summary>
      <returns>如果当前 <see cref="T:System.Uri" /> 实例是 <paramref name="uri" /> 的基，则为 true；否则，为 false。</returns>
      <param name="uri">要测试的指定 <see cref="T:System.Uri" /> 实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.IsDefaultPort">
      <summary>获取一个值，该值指示 URI 的端口值是否为此方案的默认值。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果 <see cref="P:System.Uri.Port" /> 属性中的值是此方案的默认端口，则该值为 true；否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.IsFile">
      <summary>获取一个值，该值指示指定的 <see cref="T:System.Uri" /> 是否为文件 URI。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果 <see cref="T:System.Uri" /> 是文件 URI，则该值为 true；否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.IsLoopback">
      <summary>获取一个值，该值指示指定的 <see cref="T:System.Uri" /> 是否引用了本地主机。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果此 <see cref="T:System.Uri" /> 引用了本地主机，则该值为 true；否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.IsUnc">
      <summary>获取一个值，该值指示指定的 <see cref="T:System.Uri" /> 是否为统一命名约定 (UNC) 路径。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果 <see cref="T:System.Uri" /> 是 UNC 路径，则该值为 true；否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.IsWellFormedOriginalString">
      <summary>指示用于构造此 <see cref="T:System.Uri" /> 的字符串是否格式良好，以及它是否不需要进一步转义。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果该字符串格式正确，则该值为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)">
      <summary>通过尝试用字符串构造一个 URI 来指示字符串是否为格式良好的，并确保字符串不需要进一步转义。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果该字符串格式正确，则该值为 true ；否则为 false。</returns>
      <param name="uriString">用于尝试构造 <see cref="T:System.Uri" /> 的字符串。</param>
      <param name="uriKind">
        <paramref name="uriString" /> 中的 <see cref="T:System.Uri" /> 的类型。</param>
    </member>
    <member name="P:System.Uri.LocalPath">
      <summary>获取文件名的本地操作系统表示形式。</summary>
      <returns>一个 <see cref="T:System.String" />，包含文件名的本地操作系统表示形式。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.MakeRelativeUri(System.Uri)">
      <summary>确定两个 <see cref="T:System.Uri" /> 实例之间的差异。</summary>
      <returns>如果此 URI 实例与<paramref name="uri" />的主机名和方案相同，则此方法返回一个相对 <see cref="T:System.Uri" />。若将此相对 URI 追加到当前 URI 实例，就可以得到 <paramref name="uri" />。 如果主机名或方案不同，则此方法返回一个表示 <paramref name="uri" /> 参数的 <see cref="T:System.Uri" />。</returns>
      <param name="uri">与当前 URI 进行比较的 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
    </member>
    <member name="M:System.Uri.op_Equality(System.Uri,System.Uri)">
      <summary>确定两个 <see cref="T:System.Uri" /> 实例是否具有相同的值。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果这两个 <see cref="T:System.Uri" /> 实例是等效的，则该值为 true；否则为 false。</returns>
      <param name="uri1">要与 <paramref name="uri2" /> 比较的 <see cref="T:System.Uri" /> 实例。</param>
      <param name="uri2">要与 <paramref name="uri1" /> 进行比较的 <see cref="T:System.Uri" /> 实例。</param>
      <filterpriority>3</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.op_Inequality(System.Uri,System.Uri)">
      <summary>确定两个 <see cref="T:System.Uri" /> 实例是否具有不同的值。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果两个 <see cref="T:System.Uri" /> 实例不相等，则该值为 true；否则为 false。 如果两者中任意一个参数为 null，则此方法返回 true。</returns>
      <param name="uri1">要与 <paramref name="uri2" /> 比较的 <see cref="T:System.Uri" /> 实例。</param>
      <param name="uri2">要与 <paramref name="uri1" /> 进行比较的 <see cref="T:System.Uri" /> 实例。</param>
      <filterpriority>3</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.OriginalString">
      <summary>获取传递给 <see cref="T:System.Uri" /> 构造函数的原始 URI 字符串。</summary>
      <returns>包含构造此实例时指定的同一 URI，则为 <see cref="T:System.String" />；否则，为 <see cref="F:System.String.Empty" />。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.PathAndQuery">
      <summary>获取用问号 (?) 分隔的 <see cref="P:System.Uri.AbsolutePath" /> 和 <see cref="P:System.Uri.Query" /> 属性。</summary>
      <returns>一个 <see cref="T:System.String" />，它包含用问号 (?) 分隔的 <see cref="P:System.Uri.AbsolutePath" /> 和 <see cref="P:System.Uri.Query" /> 属性。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Port">
      <summary>获取此 URI 的端口号。</summary>
      <returns>一个包含此 URI 的端口号的 <see cref="T:System.Int32" /> 值。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Query">
      <summary>获取指定 URI 中包括的任何查询信息。</summary>
      <returns>一个 <see cref="T:System.String" />，包含指定 URI 中包括的任何查询信息。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Scheme">
      <summary>获取此 URI 的方案名称。</summary>
      <returns>一个 <see cref="T:System.String" />，包含此 URI 的方案（已转换为小写形式）。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Segments">
      <summary>获取包含构成指定 URI 的路径段的数组。</summary>
      <returns>一个 <see cref="T:System.String" /> 数组，包含构成指定 URI 的路径段。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.ToString">
      <summary>获取指定的 <see cref="T:System.Uri" /> 实例的规范化字符串表示形式。</summary>
      <returns>一个 <see cref="T:System.String" /> 实例，它包含 <see cref="T:System.Uri" /> 实例的非转义规范化表示形式。 除了 #、? 和 %，所有字符均为非转义字符。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.TryCreate(System.String,System.UriKind,System.Uri@)">
      <summary>使用指定的 <see cref="T:System.String" /> 实例和 <see cref="T:System.UriKind" /> 创建一个新的 <see cref="T:System.Uri" />。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果成功创建了 <see cref="T:System.Uri" />，则该值为 true；否则为 false。</returns>
      <param name="uriString">表示 <see cref="T:System.Uri" /> 的 <see cref="T:System.String" />。</param>
      <param name="uriKind">URI 的类型。</param>
      <param name="result">此方法返回时，包含构造的 <see cref="T:System.Uri" />。</param>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.String,System.Uri@)">
      <summary>使用指定的基和相对 <see cref="T:System.Uri" /> 实例创建一个新的 <see cref="T:System.String" />。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果成功创建了 <see cref="T:System.Uri" />，则该值为 true；否则为 false。</returns>
      <param name="baseUri">基 <see cref="T:System.Uri" />。</param>
      <param name="relativeUri">要添加到基 <see cref="T:System.Uri" /> 的相对 <see cref="T:System.Uri" />（表示为 <see cref="T:System.String" />）。</param>
      <param name="result">此方法返回时，包含从 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 构造的 <see cref="T:System.Uri" />。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.Uri,System.Uri@)">
      <summary>使用指定基和相对 <see cref="T:System.Uri" /> 实例创建一个新的 <see cref="T:System.Uri" />。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果成功创建了 <see cref="T:System.Uri" />，则该值为 true；否则为 false。</returns>
      <param name="baseUri">基 <see cref="T:System.Uri" />。</param>
      <param name="relativeUri">要添加到基 <see cref="T:System.Uri" /> 的相对 <see cref="T:System.Uri" />。</param>
      <param name="result">此方法返回时，包含从 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 构造的 <see cref="T:System.Uri" />。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> 为 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.UnescapeDataString(System.String)">
      <summary>将字符串转换为它的非转义表示形式。</summary>
      <returns>一个 <see cref="T:System.String" />，包含 <paramref name="stringToUnescape" /> 的非转义表示形式。</returns>
      <param name="stringToUnescape">要恢复原义的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToUnescape" /> 为 null。</exception>
    </member>
    <member name="P:System.Uri.UserEscaped">
      <summary>指示 URI 字符串在创建 <see cref="T:System.Uri" /> 实例之前已被完全转义。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果在创建 <see cref="T:System.Uri" /> 实例时 <paramref name="dontEscape" /> 参数设置为 true，则该值为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Uri.UserInfo">
      <summary>获取用户名、密码或其他与指定 URI 关联的特定于用户的信息。</summary>
      <returns>一个 <see cref="T:System.String" />，包含与该 URI 关联的用户信息。 返回值不包括“@”字符，该字符是一个保留字符，用于分隔 URI 的用户信息部分。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.UriBuilder">
      <summary>为统一资源标识符 (URI) 提供自定义构造函数，并修改 <see cref="T:System.Uri" /> 类的 URI。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UriBuilder.#ctor">
      <summary>初始化 <see cref="T:System.UriBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String)">
      <summary>用指定的 URI 初始化 <see cref="T:System.UriBuilder" /> 类的新实例。</summary>
      <param name="uri">URI 字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 null。</exception>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.FormatException" />。 <paramref name="uri" /> 为零长度字符串或只包含空格。 - 或 - 分析例程检测到方案的格式无效。 - 或 - 分析器检测到不使用"文件"方案的 URI 中有多于两个的连续斜线。 - 或 - <paramref name="uri" /> 不是有效 URI。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String)">
      <summary>用指定的方案和主机初始化 <see cref="T:System.UriBuilder" /> 类的新实例。</summary>
      <param name="schemeName">Internet 访问协议。</param>
      <param name="hostName">DNS 样式的域名或 IP 地址。</param>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32)">
      <summary>用指定的方案、主机和端口初始化 <see cref="T:System.UriBuilder" /> 类的新实例。</summary>
      <param name="scheme">Internet 访问协议。</param>
      <param name="host">DNS 样式的域名或 IP 地址。</param>
      <param name="portNumber">服务的 IP 端口号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="portNumber" /> 小于 -1 或大于 65,535。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String)">
      <summary>用指定的方案、主机、端口号和路径初始化 <see cref="T:System.UriBuilder" /> 类的新实例。</summary>
      <param name="scheme">Internet 访问协议。</param>
      <param name="host">DNS 样式的域名或 IP 地址。</param>
      <param name="port">服务的 IP 端口号。</param>
      <param name="pathValue">Internet 资源的路径。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 小于 -1 或大于 65,535。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String,System.String)">
      <summary>用指定的方案、主机、端口号、路径和查询字符串或段标识符初始化 <see cref="T:System.UriBuilder" /> 类的新实例。</summary>
      <param name="scheme">Internet 访问协议。</param>
      <param name="host">DNS 样式的域名或 IP 地址。</param>
      <param name="port">服务的 IP 端口号。</param>
      <param name="path">Internet 资源的路径。</param>
      <param name="extraValue">查询字符串或段标识符。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="extraValue" /> 既不是 null 也不是 <see cref="F:System.String.Empty" />，既不是以井号 (#) 开始的有效段标识符，也不是以问号 (?) 开始的有效查询字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 小于 -1 或大于 65,535。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.Uri)">
      <summary>用指定的 <see cref="T:System.Uri" /> 实例初始化 <see cref="T:System.UriBuilder" /> 类的新实例。</summary>
      <param name="uri">
        <see cref="T:System.Uri" /> 类的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 null。</exception>
    </member>
    <member name="M:System.UriBuilder.Equals(System.Object)">
      <summary>比较现有 <see cref="T:System.Uri" /> 实例与 <see cref="T:System.UriBuilder" /> 的内容是否相等。</summary>
      <returns>如果 <paramref name="rparam" /> 表示的 <see cref="T:System.Uri" /> 与此 <see cref="T:System.UriBuilder" /> 实例构造的 <see cref="T:System.Uri" /> 相同，则为 true；否则为 false。</returns>
      <param name="rparam">要与当前实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.UriBuilder.Fragment">
      <summary>获取或设置 URI 的段部分。</summary>
      <returns>URI 的段部分。 段标识符 ("#") 添加到段的开头。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UriBuilder.GetHashCode">
      <summary>返回 URI 的哈希代码。</summary>
      <returns>为 URI 生成的哈希代码。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.UriBuilder.Host">
      <summary>获取或设置服务器的域名系统 (DNS) 主机名或 IP 地址。</summary>
      <returns>服务器的域名系统 (DNS) 主机名或 IP 地址。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.UriBuilder.Password">
      <summary>获取或设置与访问 URI 的用户关联的密码。</summary>
      <returns>访问 URI 的用户的密码。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.UriBuilder.Path">
      <summary>获取或设置 URI 引用的资源的路径。</summary>
      <returns>URI 引用的资源的路径。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.UriBuilder.Port">
      <summary>获取或设置 URI 的端口号。</summary>
      <returns>URI 的端口号。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">不能将此端口设为小于 1 或大于 65,535 的值。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.UriBuilder.Query">
      <summary>获取或设置 URI 中包括的任何查询信息。</summary>
      <returns>URI 中包括的查询信息。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.UriBuilder.Scheme">
      <summary>获取或设置 URI 的方案名称。</summary>
      <returns>URI 的方案。</returns>
      <exception cref="T:System.ArgumentException">不能将该方案设为无效的方案名称。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UriBuilder.ToString">
      <summary>返回指定 <see cref="T:System.UriBuilder" /> 实例的显示字符串。</summary>
      <returns>包含 <see cref="T:System.UriBuilder" /> 的非转义显示字符串的字符串。</returns>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.FormatException" />。 <see cref="T:System.UriBuilder" /> 实例有不良密码。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.UriBuilder.Uri">
      <summary>获取由指定 <see cref="T:System.UriBuilder" /> 实例构造的 <see cref="T:System.Uri" /> 实例。</summary>
      <returns>
        <see cref="T:System.Uri" />，包含由 <see cref="T:System.UriBuilder" /> 构造的 URI。</returns>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.FormatException" />。 由 <see cref="T:System.UriBuilder" /> 属性构造的 URI 无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.UriBuilder.UserName">
      <summary>与访问 URI 的用户关联的用户名。</summary>
      <returns>访问 URI 的用户的用户名。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.UriComponents">
      <summary>指定 <see cref="T:System.Uri" /> 的各个部分。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UriComponents.AbsoluteUri">
      <summary>
        <see cref="P:System.Uri.Scheme" />、<see cref="P:System.Uri.UserInfo" />、<see cref="P:System.Uri.Host" />、<see cref="P:System.Uri.Port" />、<see cref="P:System.Uri.LocalPath" />、<see cref="P:System.Uri.Query" /> 和 <see cref="P:System.Uri.Fragment" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.Fragment">
      <summary>
        <see cref="P:System.Uri.Fragment" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.Host">
      <summary>
        <see cref="P:System.Uri.Host" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.HostAndPort">
      <summary>
        <see cref="P:System.Uri.Host" /> 和 <see cref="P:System.Uri.Port" /> 数据。 如果在 Uri 中没有端口数据并且已为 <see cref="P:System.Uri.Scheme" /> 分配了一个默认端口，则返回该默认端口。 如果没有默认端口，则返回 -1。</summary>
    </member>
    <member name="F:System.UriComponents.HttpRequestUrl">
      <summary>
        <see cref="P:System.Uri.Scheme" />、<see cref="P:System.Uri.Host" />、<see cref="P:System.Uri.Port" />、<see cref="P:System.Uri.LocalPath" /> 和 <see cref="P:System.Uri.Query" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.KeepDelimiter">
      <summary>指定应包含分隔符。</summary>
    </member>
    <member name="F:System.UriComponents.Path">
      <summary>
        <see cref="P:System.Uri.LocalPath" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.PathAndQuery">
      <summary>
        <see cref="P:System.Uri.LocalPath" /> 和 <see cref="P:System.Uri.Query" /> 数据。 另外，请参见 <see cref="P:System.Uri.PathAndQuery" />。</summary>
    </member>
    <member name="F:System.UriComponents.Port">
      <summary>
        <see cref="P:System.Uri.Port" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.Query">
      <summary>
        <see cref="P:System.Uri.Query" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.Scheme">
      <summary>
        <see cref="P:System.Uri.Scheme" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.SchemeAndServer">
      <summary>
        <see cref="P:System.Uri.Scheme" />、<see cref="P:System.Uri.Host" /> 和 <see cref="P:System.Uri.Port" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.SerializationInfoString">
      <summary>URI 序列化程序所需的完整 <see cref="T:System.Uri" /> 上下文。 此上下文包括 IPv6 范围。</summary>
    </member>
    <member name="F:System.UriComponents.StrongAuthority">
      <summary>
        <see cref="P:System.Uri.UserInfo" />、<see cref="P:System.Uri.Host" /> 和 <see cref="P:System.Uri.Port" /> 数据。 如果在 <see cref="T:System.Uri" /> 中没有端口数据并且已为 <see cref="P:System.Uri.Scheme" /> 分配了一个默认端口，则返回该默认端口。 如果没有默认端口，则返回 -1。</summary>
    </member>
    <member name="F:System.UriComponents.StrongPort">
      <summary>
        <see cref="P:System.Uri.Port" /> 数据。 如果在 <see cref="T:System.Uri" /> 中没有端口数据并且已为 <see cref="P:System.Uri.Scheme" /> 分配了一个默认端口，则返回该默认端口。 如果没有默认端口，则返回 -1。</summary>
    </member>
    <member name="F:System.UriComponents.UserInfo">
      <summary>
        <see cref="P:System.Uri.UserInfo" /> 数据。</summary>
    </member>
    <member name="T:System.UriFormat">
      <summary>控制 URI 信息的转义方式。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UriFormat.SafeUnescaped">
      <summary>在请求的 URI 组成部分中具有保留意义的字符将仍然进行转义。 所有其他字符不进行转义。 请参见"备注"。</summary>
    </member>
    <member name="F:System.UriFormat.Unescaped">
      <summary>未执行任何转义。</summary>
    </member>
    <member name="F:System.UriFormat.UriEscaped">
      <summary>根据 RFC 2396 中的规则执行转义。</summary>
    </member>
    <member name="T:System.UriHostNameType">
      <summary>为 <see cref="M:System.Uri.CheckHostName(System.String)" /> 方法定义主机名类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.UriHostNameType.Basic">
      <summary>设置主机，但无法确定类型。</summary>
    </member>
    <member name="F:System.UriHostNameType.Dns">
      <summary>主机名是域名系统 (DNS) 样式主机名。</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv4">
      <summary>主机名是网际协议 (IP) 第 4 版主机地址。</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv6">
      <summary>主机名是网际协议 (IP) 第 6 版主机地址。</summary>
    </member>
    <member name="F:System.UriHostNameType.Unknown">
      <summary>不提供主机名的类型。</summary>
    </member>
    <member name="T:System.UriKind">
      <summary>定义 <see cref="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)" /> 的 <see cref="T:System.Uri" /> 的类型和几种 <see cref="Overload:System.Uri.#ctor" /> 方法。</summary>
    </member>
    <member name="F:System.UriKind.Absolute">
      <summary>此 Uri 是绝对 Uri。</summary>
    </member>
    <member name="F:System.UriKind.Relative">
      <summary>此 Uri 是相对 Uri。</summary>
    </member>
    <member name="F:System.UriKind.RelativeOrAbsolute">
      <summary>此 Uri 的类型不确定。</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratedCodeAttribute">
      <summary>标识由工具生成的代码。 此类不能被继承。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.GeneratedCodeAttribute.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.GeneratedCodeAttribute" /> 类的新实例，并在初始化时指定生成代码的工具的名称和版本。</summary>
      <param name="tool">生成代码的工具的名称。</param>
      <param name="version">生成代码的工具的版本。</param>
    </member>
    <member name="P:System.CodeDom.Compiler.GeneratedCodeAttribute.Tool">
      <summary>获取生成代码的工具的名称。</summary>
      <returns>生成代码的工具的名称。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.GeneratedCodeAttribute.Version">
      <summary>获取生成代码的工具的版本。</summary>
      <returns>生成代码的工具的版本。</returns>
    </member>
    <member name="T:System.Collections.Concurrent.BlockingCollection`1">
      <summary>为实现 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 的线程安全集合提供阻塞和限制功能。</summary>
      <typeparam name="T">集合中的元素类型。</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 类的新实例，该实例没有上限。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})">
      <summary>初始化 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 类的新实例，该实例没有上限，并使用提供的 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 作为其基础数据存储区。</summary>
      <param name="collection">要用作基础数据存储区的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 类的新实例，该实例具有指定的上限，并使用提供的 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 作为其基础数据存储区。</summary>
      <param name="collection">要用作基础数据存储区的集合。</param>
      <param name="boundedCapacity">集合的限制大小。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="boundedCapacity" /> 不是一个正值。</exception>
      <exception cref="T:System.ArgumentException">所提供 <paramref name="collection" /> 包含的值比 <paramref name="boundedCapacity" /> 允许的值多。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 类的新实例，该实例具有指定的上限。</summary>
      <param name="boundedCapacity">集合的限制大小。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="boundedCapacity" /> 不是一个正值。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Add(`0)">
      <summary>向 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中添加项。</summary>
      <param name="item">要添加到该集合的项。 该值可以是 null 引用。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已标记为已完成添加操作。 - 或 - 基础集合未接受该项。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)">
      <summary>向 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中添加项。</summary>
      <param name="item">要添加到该集合的项。 该值可以是 null 引用。</param>
      <param name="cancellationToken">要观察的取消标记。</param>
      <exception cref="T:System.OperationCanceledException">如果 <see cref="T:System.Threading.CancellationToken" />已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已被释放，或拥有 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已标记为已完成添加操作。 - 或 - 基础集合未接受该项。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)">
      <summary>向任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中添加指定的项。</summary>
      <returns>将项添加到的集合在 <paramref name="collections" /> 数组中的索引。</returns>
      <param name="collections">集合的数组。</param>
      <param name="item">要添加到某个集合的项。</param>
      <exception cref="T:System.ObjectDisposedException">至少其中一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collections" /> 的计数大于最大的大小（STA 为 62，MTA 为 63）。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组，或者包含 null 元素，或者至少其中一个集合已标记为已完成添加。</exception>
      <exception cref="T:System.InvalidOperationException">至少一个基础集合未接受该项。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)">
      <summary>向任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中添加指定的项。</summary>
      <returns>将项添加到的集合在 <paramref name="collections" /> 数组中的索引。</returns>
      <param name="collections">集合的数组。</param>
      <param name="item">要添加到某个集合的项。</param>
      <param name="cancellationToken">要观察的取消标记。</param>
      <exception cref="T:System.OperationCanceledException">如果 <see cref="T:System.Threading.CancellationToken" />已取消。</exception>
      <exception cref="T:System.InvalidOperationException">至少一个基础集合未接受该项。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collections" /> 的计数大于最大的大小（STA 为 62，MTA 为 63）。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组，或者包含 null 元素，或者至少其中一个集合已标记为已完成添加。</exception>
      <exception cref="T:System.ObjectDisposedException">至少一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已被释放的实例或创建 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity">
      <summary>获取此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例的限定容量。</summary>
      <returns>此集合的限定容量；如果未提供限定，则为 int.MaxValue。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已被释放。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding">
      <summary>将 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例标记为不再接受任何添加。</summary>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已被释放。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.CopyTo(`0[],System.Int32)">
      <summary>将 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中的所有项复制到兼容的一维数组中，复制从目标数组的指定索引处开始。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例复制的元素的目标的一维数组。 该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 参数等于或大于 <paramref name="array" /> 的长度。 目标数组太小，不能容纳所有 BlockingCcollection 元素。 数组秩不匹配。 数组类型与 BlockingCollection 元素不兼容。</exception>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.Count">
      <summary>获取 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中包含的项数。</summary>
      <returns>
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中包含的项数。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已被释放。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Dispose">
      <summary>释放由 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 类的当前实例占用的所有资源。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例占用的资源。</summary>
      <param name="disposing">是显式释放 (true)，还是由终结器释放 (false)。</param>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable">
      <summary>为集合中的项提供一个使用 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</summary>
      <returns>从集合中移除并返回项的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已被释放。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable(System.Threading.CancellationToken)">
      <summary>为集合中的项提供一个使用 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</summary>
      <returns>从集合中移除并返回项的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="cancellationToken">要观察的取消标记。</param>
      <exception cref="T:System.OperationCanceledException">如果 <see cref="T:System.Threading.CancellationToken" />已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已被释放，或创建 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放</exception>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted">
      <summary>获取此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 是否已标记为已完成添加。</summary>
      <returns>此集合是否已标记为已完成添加。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已被释放。</exception>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.IsCompleted">
      <summary>获取一个值，该值指示此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 是否已标记为已完成添加并且为空。</summary>
      <returns>此集合是否已标记为已完成添加并且为空。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已被释放。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>为集合中的项提供一个 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</summary>
      <returns>集合中的项的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已被释放。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>将 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中的所有项复制到兼容的一维数组中，复制从目标数组的指定索引处开始。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例复制的元素的目标的一维数组。 该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 参数等于或大于 <paramref name="array" /> 的长度，该数组是多维的，或集合的类型参数无法自动强制转换为目标数组的类型。</exception>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，通过该值指示对 <see cref="T:System.Collections.ICollection" /> 的访问是否同步。</summary>
      <returns>始终返回 false。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已被释放。</exception>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。 不支持此属性。</summary>
      <returns>返回 null。</returns>
      <exception cref="T:System.NotSupportedException">不支持 SyncRoot 属性。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>为集合中的项提供一个 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>集合中的项的 <see cref="T:System.Collections.IEnumerator" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已被释放。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Take">
      <summary>从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中获取一项。</summary>
      <returns>从该集合中移除的项。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">基础集合在此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例外修改，或 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 为空，并且集合已经标记为可完整地用于添加。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)">
      <summary>从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中获取一项。</summary>
      <returns>从该集合中移除的项。</returns>
      <param name="cancellationToken">可用于取消获取操作的对象。</param>
      <exception cref="T:System.OperationCanceledException">
        <see cref="T:System.Threading.CancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已被释放，或创建该标记的 <see cref="T:System.Threading.CancellationTokenSource" /> 被取消。</exception>
      <exception cref="T:System.InvalidOperationException">基础集合在此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例外修改，或该 BlockingCollection 被标记为已完成添加，或 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 为空。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)">
      <summary>从任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中获取一项。</summary>
      <returns>从中移除项的集合在 <paramref name="collections" /> 数组中的索引。</returns>
      <param name="collections">集合的数组。</param>
      <param name="item">从某个集合中移除的项。</param>
      <exception cref="T:System.ObjectDisposedException">至少其中一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collections" /> 的计数大于最大的大小（STA 为 62，MTA 为 63）。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组，或包含 null 元素，或 <see cref="M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding" /> 在集合上已被调用。</exception>
      <exception cref="T:System.InvalidOperationException">至少一个基础集合已在其 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例之外进行了修改。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)">
      <summary>观察指定的取消标记时从任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中获取一项。</summary>
      <returns>从中移除项的集合在 <paramref name="collections" /> 数组中的索引。</returns>
      <param name="collections">集合的数组。</param>
      <param name="item">从某个集合中移除的项。</param>
      <param name="cancellationToken">要观察的取消标记。</param>
      <exception cref="T:System.OperationCanceledException">如果 <see cref="T:System.Threading.CancellationToken" />已取消。</exception>
      <exception cref="T:System.InvalidOperationException">至少一个基础集合已在其 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例之外进行了修改。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collections" /> 的计数大于最大的大小（STA 为 62，MTA 为 63）。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组，或包含 null 元素，或 <see cref="M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding" /> 在集合上已被调用。</exception>
      <exception cref="T:System.ObjectDisposedException">至少其中一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已释放。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.ToArray">
      <summary>将项从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例复制到新数组中。</summary>
      <returns>包含集合元素的副本的数组。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已被释放。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0)">
      <summary>尝试将指定的项添加到 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中。</summary>
      <returns>true（如果可以添加 <paramref name="item" />）；否则为 false。 如果该项是重复的，并且基础集合不会接受重复项，则会引发 <see cref="T:System.InvalidOperationException" />。</returns>
      <param name="item">要添加到该集合的项。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已标记为已完成添加操作。 - 或 - 基础集合未接受该项。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32)">
      <summary>尝试在指定的时间内将指定的项添加到 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</summary>
      <returns>如果在指定的时间内可以将 <paramref name="item" /> 添加到集合中，则为 true；否则为 false。 如果该项是重复的，并且基础集合不会接受重复项，则会引发 <see cref="T:System.InvalidOperationException" />。</returns>
      <param name="item">要添加到该集合的项。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已标记为已完成添加操作。 - 或 - 基础集合未接受该项。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32,System.Threading.CancellationToken)">
      <summary>在观察取消标记时，尝试在指定的时间内将指定的项添加到 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</summary>
      <returns>如果在指定的时间内可以将 <paramref name="item" /> 添加到集合中，则为 true；否则为 false。 如果该项是重复的，并且基础集合不会接受重复项，则会引发 <see cref="T:System.InvalidOperationException" />。</returns>
      <param name="item">要添加到该集合的项。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <param name="cancellationToken">要观察的取消标记。</param>
      <exception cref="T:System.OperationCanceledException">如果 <see cref="T:System.Threading.CancellationToken" />已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已被释放，或基础 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已标记为已完成添加操作。 - 或 - 基础集合未接受该项。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.TimeSpan)">
      <summary>尝试将指定的项添加到 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中。</summary>
      <returns>如果在指定的时间跨度内可以将 <paramref name="item" /> 添加到集合中，则为 true；否则为 false。</returns>
      <param name="item">要添加到该集合的项。</param>
      <param name="timeout">表示等待的毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是 -1 毫秒之外的负数，表示无限超时或者超时大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已标记为已完成添加操作。 - 或 - 基础集合未接受该项。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)">
      <summary>尝试将指定的项添加到任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中。</summary>
      <returns>将项添加到的集合在 <paramref name="collections" /> 数组中的索引；如果未能添加项，则为 -1。</returns>
      <param name="collections">集合的数组。</param>
      <param name="item">要添加到某个集合的项。</param>
      <exception cref="T:System.ObjectDisposedException">至少其中一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collections" /> 的计数大于最大的大小（STA 为 62，MTA 为 63）。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组，或者包含 null 元素，或者至少其中一个集合已标记为已完成添加。</exception>
      <exception cref="T:System.InvalidOperationException">至少一个基础集合未接受该项。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)">
      <summary>尝试将指定的项添加到任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中。</summary>
      <returns>将项添加到的集合在 <paramref name="collections" /> 数组中的索引；如果未能添加项，则为 -1。</returns>
      <param name="collections">集合的数组。</param>
      <param name="item">要添加到某个集合的项。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <exception cref="T:System.ObjectDisposedException">至少其中一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。 - 或 - <paramref name="collections" /> 的计数大于最大的大小（STA 为 62，MTA 为 63）。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组，或者包含 null 元素，或者至少其中一个集合已标记为已完成添加。</exception>
      <exception cref="T:System.InvalidOperationException">至少一个基础集合未接受该项。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)">
      <summary>尝试将指定的项添加到任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中。</summary>
      <returns>将项添加到的集合在 <paramref name="collections" /> 数组中的索引；如果未能添加项，则为 -1。</returns>
      <param name="collections">集合的数组。</param>
      <param name="item">要添加到某个集合的项。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <param name="cancellationToken">要观察的取消标记。</param>
      <exception cref="T:System.OperationCanceledException">如果 <see cref="T:System.Threading.CancellationToken" />已取消。</exception>
      <exception cref="T:System.InvalidOperationException">至少一个基础集合未接受该项。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。 - 或 - <paramref name="collections" /> 的计数大于最大的大小（STA 为 62，MTA 为 63）。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组，或者包含 null 元素，或者至少其中一个集合已标记为已完成添加。</exception>
      <exception cref="T:System.ObjectDisposedException">至少其中一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已释放。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)">
      <summary>在观察指定的取消标记时，将指定的项添加到任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中。</summary>
      <returns>将项添加到的集合在 <paramref name="collections" /> 数组中的索引；如果未能添加项，则为 -1。</returns>
      <param name="collections">集合的数组。</param>
      <param name="item">要添加到某个集合的项。</param>
      <param name="timeout">表示等待的毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <exception cref="T:System.ObjectDisposedException">至少一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例或创建 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是 -1 毫秒之外的负数，表示无限超时或者超时大于 <see cref="F:System.Int32.MaxValue" />。 - 或 - <paramref name="collections" /> 的计数大于最大的大小（STA 为 62，MTA 为 63）。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组，或者包含 null 元素，或者至少其中一个集合已标记为已完成添加。</exception>
      <exception cref="T:System.InvalidOperationException">至少一个基础集合未接受该项。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@)">
      <summary>尝试从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中移除某个项。</summary>
      <returns>如果可以移除某个项，则为 true。</returns>
      <param name="item">从该集合中移除的项。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">基础集合已在此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例外部进行了修改。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32)">
      <summary>尝试在指定的时间内从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中移除某个项。</summary>
      <returns>如果在指定的时间内可以从集合中移除某个项，则为 true；否则为 false。</returns>
      <param name="item">从该集合中移除的项。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.InvalidOperationException">基础集合已在此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例外部进行了修改。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32,System.Threading.CancellationToken)">
      <summary>在观察取消标记时，尝试在指定的时间内从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中移除某个项。</summary>
      <returns>如果在指定的时间内可以从集合中移除某个项，则为 true；否则为 false。</returns>
      <param name="item">从该集合中移除的项。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <param name="cancellationToken">要观察的取消标记。</param>
      <exception cref="T:System.OperationCanceledException">如果 <see cref="T:System.Threading.CancellationToken" />已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已被释放，或基础 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.InvalidOperationException">基础集合已在此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例外部进行了修改。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.TimeSpan)">
      <summary>尝试在指定的时间内从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中移除某个项。</summary>
      <returns>如果在指定的时间内可以从集合中移除某个项，则为 true；否则为 false。</returns>
      <param name="item">从该集合中移除的项。</param>
      <param name="timeout">表示等待的毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是 -1 毫秒之外的负数，表示无限超时或者超时大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.InvalidOperationException">基础集合已在此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例外部进行了修改。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)">
      <summary>尝试从任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中移除某个项。</summary>
      <returns>从中移除相应项的集合在 <paramref name="collections" /> 数组中的索引；如果未能移除某个项，则为 -1。</returns>
      <param name="collections">集合的数组。</param>
      <param name="item">从某个集合中移除的项。</param>
      <exception cref="T:System.ObjectDisposedException">至少其中一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collections" /> 的计数大于最大的大小（STA 为 62，MTA 为 63）。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组，或包含 null 元素。</exception>
      <exception cref="T:System.InvalidOperationException">至少一个基础集合已在其 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例之外进行了修改。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)">
      <summary>尝试从任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中移除某个项。</summary>
      <returns>从中移除相应项的集合在 <paramref name="collections" /> 数组中的索引；如果未能移除某个项，则为 -1。</returns>
      <param name="collections">集合的数组。</param>
      <param name="item">从某个集合中移除的项。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <exception cref="T:System.ObjectDisposedException">至少其中一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。 - 或 - <paramref name="collections" /> 的计数大于最大的大小（STA 为 62，MTA 为 63）。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组，或包含 null 元素。</exception>
      <exception cref="T:System.InvalidOperationException">至少一个基础集合已在其 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例之外进行了修改。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)">
      <summary>尝试从任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中移除某个项。</summary>
      <returns>从中移除相应项的集合在 <paramref name="collections" /> 数组中的索引；如果未能移除某个项，则为 -1。</returns>
      <param name="collections">集合的数组。</param>
      <param name="item">从某个集合中移除的项。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <param name="cancellationToken">要观察的取消标记。</param>
      <exception cref="T:System.OperationCanceledException">如果 <see cref="T:System.Threading.CancellationToken" />已取消。</exception>
      <exception cref="T:System.InvalidOperationException">至少一个基础集合已在其 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例之外进行了修改。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。 - 或 - <paramref name="collections" /> 的计数大于最大的大小（STA 为 62，MTA 为 63）。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组，或包含 null 元素。</exception>
      <exception cref="T:System.ObjectDisposedException">至少其中一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已释放。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)">
      <summary>尝试从任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中移除某个项。</summary>
      <returns>从中移除相应项的集合在 <paramref name="collections" /> 数组中的索引；如果未能移除某个项，则为 -1。</returns>
      <param name="collections">集合的数组。</param>
      <param name="item">从某个集合中移除的项。</param>
      <param name="timeout">表示等待的毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <exception cref="T:System.ObjectDisposedException">至少其中一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是 -1 毫秒之外的负数，表示无限超时或者超时大于 <see cref="F:System.Int32.MaxValue" />。 - 或 - <paramref name="collections" /> 的计数大于最大的大小（STA 为 62，MTA 为 63）。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组，或包含 null 元素。</exception>
      <exception cref="T:System.InvalidOperationException">至少一个基础集合已在其 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例之外进行了修改。</exception>
    </member>
    <member name="T:System.Collections.Concurrent.ConcurrentBag`1">
      <summary>表示对象的线程安全的无序集合。</summary>
      <typeparam name="T">要存储在集合中的元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>初始化 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 类的新实例，该类包含从指定集合中复制的元素。</summary>
      <param name="collection">其元素被复制到新的 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.Add(`0)">
      <summary>将对象添加到 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中。</summary>
      <param name="item">要添加到 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 的对象。 该值对于引用类型可以是空引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.CopyTo(`0[],System.Int32)">
      <summary>从指定数组索引开始将 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 元素复制到现有一维 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，用作从 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 所复制的元素的目标数组。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度 - 或 - 源 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中的元素数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 结尾的可用空间。</exception>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentBag`1.Count">
      <summary>获取 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中包含的元素数。</summary>
      <returns>
        <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中包含的元素个数。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 的枚举数。</summary>
      <returns>可枚举 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 的内容的枚举器。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentBag`1.IsEmpty">
      <summary>获取一个指示 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 是否为空的值。</summary>
      <returns>如果 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 为空，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)">
      <summary>尝试将一个对象添加到 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中。</summary>
      <returns>始终返回 true</returns>
      <param name="item">要添加到 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 的对象。 该值对于引用类型可以是空引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的 <see cref="T:System.Array" /> 索引处开始，将 <see cref="T:System.Collections.ICollection" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，用作从 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 所复制的元素的目标数组。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。 - 或 -<paramref name="array" /> 没有从零开始的索引。 - 或 - <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度 - 或 - 源 <see cref="T:System.Collections.ICollection" /> 中的元素数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 结尾的可用空间。 - 或 - 源 <see cref="T:System.Collections.ICollection" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示对 <see cref="T:System.Collections.ICollection" /> 的访问是否与 SyncRoot 保持同步。</summary>
      <returns>如果对 <see cref="T:System.Collections.ICollection" /> 的访问与 SyncRoot 保持同步，则为 true；否则为 false。 对于 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。 不支持此属性。</summary>
      <returns>返回 null（在 Visual Basic 中为 Nothing）。</returns>
      <exception cref="T:System.NotSupportedException">不支持 SyncRoot 属性。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 的枚举数。</summary>
      <returns>可枚举 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 的内容的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.ToArray">
      <summary>将 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 元素复制到新数组。</summary>
      <returns>一个新数组，其中包含从 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 复制的元素的快照。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.TryPeek(`0@)">
      <summary>尝试从 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 返回一个对象但不移除该对象。</summary>
      <returns>如果成功返回了对象，则为 true；否则为 false。</returns>
      <param name="result">此方法返回时，<paramref name="result" /> 包含 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中的对象；如果操作失败，则返回 <paramref name="T" /> 的默认值。</param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.TryTake(`0@)">
      <summary>尝试从 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中移除并返回对象。</summary>
      <returns>如果成功移除了对象，则为 true；否则为 false。</returns>
      <param name="result">此方法返回时，<paramref name="result" /> 包含从 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中移除的对象；如果包为空，则返回 <paramref name="T" /> 的默认值。</param>
    </member>
    <member name="T:System.Collections.Generic.ISet`1">
      <summary>提供用于集的抽象化的基接口。</summary>
      <typeparam name="T">集内元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Add(`0)">
      <summary>向当前集内添加元素，并返回一个指示是否已成功添加元素的值。</summary>
      <returns>如果该元素已添加到集内，则为 true；如果该元素已在集内，则为 false。</returns>
      <param name="item">要添加到集中的元素。</param>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>从当前集内移除指定集合中的所有元素。</summary>
      <param name="other">要从集内移除的项的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前集，使该集仅包含指定集合中也存在的元素。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集是否为指定集合的正确的（严格）子集。</summary>
      <returns>如果当前集是 <paramref name="other" /> 的正确子集，则为 true；否则为 false。</returns>
      <param name="other">要与当前集进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集是否为指定集合的正确的（严格）超集。</summary>
      <returns>如果当前集是 <paramref name="other" /> 的正确超集，则为 true；否则为 false。</returns>
      <param name="other">要与当前集进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定一个集是否为指定集合的子集。</summary>
      <returns>如果当前集是 <paramref name="other" /> 的子集，则为 true；否则为 false。</returns>
      <param name="other">要与当前集进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集是否为指定集合的超集。</summary>
      <returns>如果当前集是 <paramref name="other" /> 的超集，则为 true；否则为 false。</returns>
      <param name="other">要与当前集进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集是否与指定的集合重叠。</summary>
      <returns>如果当前集与 <paramref name="other" /> 至少共享一个通用元素，则为 true；否则为 false。</returns>
      <param name="other">要与当前集进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集与指定的集合中是否包含相同的元素。</summary>
      <returns>如果当前集等于 <paramref name="other" />，则为 true；否则为 false。</returns>
      <param name="other">要与当前集进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前集，使该集仅包含当前集或指定集合中存在的元素（但不可包含两者共有的元素）。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前集，使该集包含当前集或指定集合中存在的所有元素。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1">
      <summary>表示双向链接列表。</summary>
      <typeparam name="T">指定链表的元素类型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor">
      <summary>初始化为空的 <see cref="T:System.Collections.Generic.LinkedList`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.LinkedList`1" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.IEnumerable" /> 中复制的元素并且其容量足以容纳所复制的元素数。</summary>
      <param name="collection">
        <see cref="T:System.Collections.IEnumerable" />，其元素被复制到新的 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary>在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中指定的现有节点后添加指定的新节点。</summary>
      <param name="node">要在其后插入 <paramref name="newNode" /> 的 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <param name="newNode">要添加到 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 为 null。 - 或 - <paramref name="newNode" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 不在当前 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中。 - 或 - <paramref name="newNode" /> 属于另一个 <see cref="T:System.Collections.Generic.LinkedList`1" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary>在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中指定的现有节点后添加包含指定值的新节点。</summary>
      <returns>包含 <paramref name="value" /> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</returns>
      <param name="node">要在其后插入包含 <paramref name="value" /> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 的 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <param name="value">要添加到 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 不在当前 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary>在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中指定的现有节点前添加指定的新节点。</summary>
      <param name="node">要在其前插入 <paramref name="newNode" /> 的 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <param name="newNode">要添加到 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 为 null。 - 或 - <paramref name="newNode" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 不在当前 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中。 - 或 - <paramref name="newNode" /> 属于另一个 <see cref="T:System.Collections.Generic.LinkedList`1" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary>在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中指定的现有节点前添加包含指定值的新节点。</summary>
      <returns>包含 <paramref name="value" /> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</returns>
      <param name="node">要在其前插入包含 <paramref name="value" /> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 的 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <param name="value">要添加到 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 不在当前 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
      <summary>在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的开头处添加指定的新节点。</summary>
      <param name="node">要在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的开头处添加的新 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 属于另一个 <see cref="T:System.Collections.Generic.LinkedList`1" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
      <summary>在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的开头处添加包含指定值的新节点。</summary>
      <returns>包含 <paramref name="value" /> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</returns>
      <param name="value">要在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的开头处添加的值。</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
      <summary>在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的结尾处添加指定的新节点。</summary>
      <param name="node">要添加至 <see cref="T:System.Collections.Generic.LinkedList`1" /> 结尾的新 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 属于另一个 <see cref="T:System.Collections.Generic.LinkedList`1" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
      <summary>在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的结尾处添加包含指定值的新节点。</summary>
      <returns>包含 <paramref name="value" /> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</returns>
      <param name="value">要添加到 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的末尾的值。</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Clear">
      <summary>从 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中移除所有节点。</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
      <summary>确定某值是否在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中。</summary>
      <returns>如果在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中找到 <paramref name="value" />，则为 true；否则为 false。</returns>
      <param name="value">要在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中定位的值。 对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
      <summary>从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.Generic.LinkedList`1" /> 复制到兼容的一维 <see cref="T:System.Array" />。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.Generic.LinkedList`1" /> 复制的元素的目标位置的一维 <see cref="T:System.Array" />。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Count">
      <summary>获取 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中实际包含的节点数。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 中实际包含的节点数。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Find(`0)">
      <summary>查找包含指定值的第一个节点。</summary>
      <returns>如果找到，则为包含指定值的第一个 <see cref="T:System.Collections.Generic.LinkedListNode`1" />；否则为 null。</returns>
      <param name="value">要在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中定位的值。</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
      <summary>查找包含指定值的最后一个节点。</summary>
      <returns>如果找到，则为包含指定值的最后一个 <see cref="T:System.Collections.Generic.LinkedListNode`1" />；否则为 null。</returns>
      <param name="value">要在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中定位的值。</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.First">
      <summary>获取 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的第一个节点。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 的第一个 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的枚举数。</summary>
      <returns>用于 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的 <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Last">
      <summary>获取 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的最后一个节点。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 的最后一个 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
      <summary>从 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中移除指定的节点。</summary>
      <param name="node">要从 <see cref="T:System.Collections.Generic.LinkedList`1" /> 移除的 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 不在当前 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
      <summary>从 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中移除指定值的第一个匹配项。</summary>
      <returns>如果成功移除包含 <paramref name="value" /> 的元素，则为 true；否则为 false。 如果在原始 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中没有找到 <paramref name="value" />，此方法也会返回 false。</returns>
      <param name="value">要从 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中移除的值。</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveFirst">
      <summary>移除位于 <see cref="T:System.Collections.Generic.LinkedList`1" /> 开头处的节点。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 为空。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveLast">
      <summary>移除位于 <see cref="T:System.Collections.Generic.LinkedList`1" /> 结尾处的节点。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 为空。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>将项添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 的结尾处。</summary>
      <param name="value">要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 的结尾处添加的值。</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读，则为 true；否则为 false。 在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回一个循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的 <see cref="T:System.Array" /> 索引处开始，将 <see cref="T:System.Collections.ICollection" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标的一维 <see cref="T:System.Array" />。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。 - 或 - <paramref name="array" /> 没有从零开始的索引。 - 或 - 源 <see cref="T:System.Collections.ICollection" /> 中的元素数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 结尾处之间的可用空间。 - 或 - 源 <see cref="T:System.Collections.ICollection" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。 在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。 在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的默认实现中，此属性始终返回当前实例。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个将链表作为集合进行循环访问的枚举数。</summary>
      <returns>可用于将链表作为集合循环访问的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1.Enumerator`0">
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator`0.Current">
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator`0.Dispose">
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator`0.MoveNext">
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator`0.System#Collections#IEnumerator#Current">
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator`0.System#Collections#IEnumerator#Reset">
    </member>
    <member name="T:System.Collections.Generic.LinkedListNode`1">
      <summary>表示 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中的节点。 此类不能被继承。</summary>
      <typeparam name="T">指定链表的元素类型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.LinkedListNode`1.#ctor(`0)">
      <summary>初始化 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 类的新实例，该实例包含指定的值。</summary>
      <param name="value">要在 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 中包含的值。</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.List">
      <summary>获取 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 所属的 <see cref="T:System.Collections.Generic.LinkedList`1" />。</summary>
      <returns>对 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 所属的 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的引用；或者如果 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 未链接，则为 null。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Next">
      <summary>获取 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中的下一个节点。</summary>
      <returns>对 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中的下一个节点的引用；或者如果当前节点是 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的最后一个元素 (<see cref="P:System.Collections.Generic.LinkedList`1.Last" />)，则为 null。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Previous">
      <summary>获取 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中的上一个节点。</summary>
      <returns>对 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中的上一个节点的引用；或者如果当前节点是 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的第一个元素 (<see cref="P:System.Collections.Generic.LinkedList`1.First" />)，则为 null。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Value">
      <summary>获取节点中包含的值。</summary>
      <returns>节点中包含的值。</returns>
    </member>
    <member name="T:System.Collections.Generic.Queue`1">
      <summary>表示对象的先进先出集合。</summary>
      <typeparam name="T">指定队列中元素的类型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Generic.Queue`1" /> 类的新实例，该实例为空并且具有默认初始容量。</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.Queue`1" /> 类的新实例，该实例包含从指定集合复制的元素并且具有足够的容量来容纳所复制的元素。</summary>
      <param name="collection">其元素被复制到新的 <see cref="T:System.Collections.Generic.Queue`1" /> 中的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.Generic.Queue`1" /> 类的新实例，该实例为空并且具有指定的初始容量。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.Queue`1" /> 可包含的初始元素数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Clear">
      <summary>从 <see cref="T:System.Collections.Generic.Queue`1" /> 中移除所有对象。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Contains(`0)">
      <summary>确定某元素是否在 <see cref="T:System.Collections.Generic.Queue`1" /> 中。</summary>
      <returns>如果在 <see cref="T:System.Collections.Generic.Queue`1" /> 中找到 <paramref name="item" />，则为 true，否则为 false。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.Queue`1" /> 中定位的对象。 对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)">
      <summary>从指定数组索引开始将 <see cref="T:System.Collections.Generic.Queue`1" /> 元素复制到现有一维 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.Generic.Queue`1" /> 复制的元素的目标位置的一维 <see cref="T:System.Array" />。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.Generic.Queue`1" /> 中的元素数目大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Count">
      <summary>获取 <see cref="T:System.Collections.Generic.Queue`1" /> 中包含的元素数。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1" /> 中包含的元素个数。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Dequeue">
      <summary>移除并返回位于 <see cref="T:System.Collections.Generic.Queue`1" /> 开始处的对象。</summary>
      <returns>从 <see cref="T:System.Collections.Generic.Queue`1" /> 的开头移除的对象。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Queue`1" /> 为空。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
      <summary>将对象添加到 <see cref="T:System.Collections.Generic.Queue`1" /> 的结尾处。</summary>
      <param name="item">要添加到 <see cref="T:System.Collections.Generic.Queue`1" /> 的对象。 对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Generic.Queue`1" /> 的枚举数。</summary>
      <returns>用于 <see cref="T:System.Collections.Generic.Queue`1" /> 的 <see cref="T:System.Collections.Generic.Queue`1.Enumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Peek">
      <summary>返回位于 <see cref="T:System.Collections.Generic.Queue`1" /> 开始处的对象但不将其移除。</summary>
      <returns>位于 <see cref="T:System.Collections.Generic.Queue`1" /> 的开头的对象。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Queue`1" /> 为空。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回一个循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的 <see cref="T:System.Array" /> 索引处开始，将 <see cref="T:System.Collections.ICollection" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标的一维 <see cref="T:System.Array" />。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。 - 或 - <paramref name="array" /> 没有从零开始的索引。 - 或 - 源 <see cref="T:System.Collections.ICollection" /> 中的元素数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 结尾处之间的可用空间。 - 或 - 源 <see cref="T:System.Collections.ICollection" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。 在 <see cref="T:System.Collections.Generic.Queue`1" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。 在 <see cref="T:System.Collections.Generic.Queue`1" /> 的默认实现中，此属性始终返回当前实例。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.ToArray">
      <summary>将 <see cref="T:System.Collections.Generic.Queue`1" /> 元素复制到新数组。</summary>
      <returns>包含从 <see cref="T:System.Collections.Generic.Queue`1" /> 复制的元素的新数组。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TrimExcess">
      <summary>如果元素数小于当前容量的 90%，将容量设置为 <see cref="T:System.Collections.Generic.Queue`1" /> 中的实际元素数。</summary>
    </member>
    <member name="T:System.Collections.Generic.Queue`1.Enumerator`0">
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator`0.Current">
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator`0.Dispose">
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator`0.MoveNext">
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator`0.System#Collections#IEnumerator#Current">
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator`0.System#Collections#IEnumerator#Reset">
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2">
      <summary>表示根据键进行排序的键/值对的集合。</summary>
      <typeparam name="TKey">字典中的键的类型。</typeparam>
      <typeparam name="TValue">字典中的值的类型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 类的一个新实例，该实例为空并对键类型使用默认 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 类的一个新实例，该实例为空并使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现来比较键。</summary>
      <param name="comparer">比较键时要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现，或者为 null，以便为键类型使用默认的 <see cref="T:System.Collections.Generic.Comparer`1" />。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>初始化 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中复制的元素，并使用键类型的默认 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现。</summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.IDictionary`2" />，其元素被复制到新的 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> 包含一个或多个重复键。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中复制的元素，并使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现来比较键。</summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.IDictionary`2" />，其元素被复制到新的 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中。</param>
      <param name="comparer">比较键时要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现，或者为 null，以便为键类型使用默认的 <see cref="T:System.Collections.Generic.Comparer`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> 包含一个或多个重复键。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Add(`0,`1)">
      <summary>将带有指定键和值的元素添加到 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中。</summary>
      <param name="key">要添加的元素的键。</param>
      <param name="value">要添加的元素的值。 对于引用类型，该值可以为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中已存在具有相同键的元素。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Clear">
      <summary>从 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中移除所有元素。</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Comparer">
      <summary>获取用于对 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的元素进行排序的 <see cref="T:System.Collections.Generic.IComparer`1" />。</summary>
      <returns>用于对 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的元素进行排序的 <see cref="T:System.Collections.Generic.IComparer`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsKey(`0)">
      <summary>确定 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 是否包含具有指定键的元素。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 包含具有指定键的元素，则为 true；否则为 false。</returns>
      <param name="key">要在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中定位的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsValue(`1)">
      <summary>确定 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 是否包含具有指定值的元素。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 包含具有指定值的元素，则为 true；否则为 false。</returns>
      <param name="value">要在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中定位的值。 对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>从指定的索引处开始，将 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的元素复制到指定的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 结构的数组中。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 结构的一维数组，它是从当前 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中复制的元素的目标。该数组必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Count">
      <summary>获取包含在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的键/值对的数目。</summary>
      <returns>包含在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的键/值对的数目。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的枚举数。</summary>
      <returns>用于 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的 <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Item(`0)">
      <summary>获取或设置与指定的键相关联的值。</summary>
      <returns>与指定的键相关联的值。 如果找不到指定的键，get 操作便会引发 <see cref="T:System.Collections.Generic.KeyNotFoundException" />，而 set 操作会创建一个具有指定键的新元素。</returns>
      <param name="key">要获取或设置的值的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">已检索该属性，并且集合中不存在 <paramref name="key" />。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Keys">
      <summary>获取包含 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的键的集合。</summary>
      <returns>包含 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的键的 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Remove(`0)">
      <summary>从 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中移除带有指定键的元素。</summary>
      <returns>如果该元素已成功移除，则为 true；否则为 false。 如果在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中没有找到 <paramref name="key" />，此方法也会返回 false。</returns>
      <param name="key">要移除的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>将某项添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 中。</summary>
      <param name="keyValuePair">要添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 中的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 结构。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyValuePair" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中已存在具有相同键的元素。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>确定 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含特定的键和值。</summary>
      <returns>如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中找到 <paramref name="keyValuePair" />，则为 true；否则为 false。</returns>
      <param name="keyValuePair">要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中查找的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 结构。</param>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读，则为 true；否则为 false。 在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除指定元素的第一个匹配项。</summary>
      <returns>如果已从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中成功移除 <paramref name="keyValuePair" />，则为 true；否则为 false。 如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中没有找到 <paramref name="keyValuePair" />，该方法也会返回 false。</returns>
      <param name="keyValuePair">要从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 结构。</param>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>获取包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的键的 <see cref="T:System.Collections.Generic.ICollection`1" />。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的键。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>获取包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值的 <see cref="T:System.Collections.Generic.ICollection`1" />。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回一个循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从指定的数组索引开始，将 <see cref="T:System.Collections.Generic.ICollection`1" /> 中的元素复制到一个数组中。</summary>
      <param name="array">一维数组，它是从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。 - 或 - <paramref name="array" /> 没有从零开始的索引。 - 或 - 源 <see cref="T:System.Collections.Generic.ICollection`1" /> 中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。 - 或 - 源 <see cref="T:System.Collections.Generic.ICollection`1" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。 在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>在 <see cref="T:System.Collections.IDictionary" /> 中添加一个带有所提供的键和值的元素。</summary>
      <param name="key">用作要添加的元素的键的对象。</param>
      <param name="value">作为要添加的元素的值的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 属于不能分配给 <see cref="T:System.Collections.IDictionary" /> 的键类型 <paramref name="TKey" /> 的类型。 - 或 - <paramref name="value" /> 属于不能分配给 <see cref="T:System.Collections.IDictionary" /> 的值类型 <paramref name="TValue" /> 的类型。 - 或 - <see cref="T:System.Collections.IDictionary" /> 中已存在具有相同键的元素。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IDictionary" /> 是否包含具有指定键的元素。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 包含带有该键的元素，则为 true；否则为 false。</returns>
      <param name="key">要在 <see cref="T:System.Collections.IDictionary" /> 中查找的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.IDictionary" /> 的 <see cref="T:System.Collections.IDictionaryEnumerator" />。</summary>
      <returns>用于 <see cref="T:System.Collections.IDictionary" /> 的 <see cref="T:System.Collections.IDictionaryEnumerator" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 是否具有固定大小。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 具有固定大小，则为 true；否则为 false。 在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 是只读的，则为 true；否则为 false。 在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>获取或设置具有指定键的元素。</summary>
      <returns>具有指定键的元素，如果 <paramref name="key" /> 不在词典中或者 <paramref name="key" /> 属于不能分配给 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的键类型 <paramref name="TKey" /> 的类型，则为 null。</returns>
      <param name="key">要获取的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">正在分配值，并且 <paramref name="key" /> 属于不能分配给 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的键类型 <paramref name="TKey" /> 的类型。 - 或 - 正在分配值，并且 <paramref name="value" /> 属于不能分配给 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的值类型 <paramref name="TValue" /> 的类型。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary>获取包含 <see cref="T:System.Collections.IDictionary" /> 的键的 <see cref="T:System.Collections.ICollection" />。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 的键。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IDictionary" /> 中移除带有指定键的元素。</summary>
      <param name="key">要移除的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Values">
      <summary>获取包含 <see cref="T:System.Collections.IDictionary" /> 中的值的 <see cref="T:System.Collections.ICollection" />。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 中的值。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.TryGetValue(`0,`1@)">
      <summary>获取与指定的键相关联的值。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 包含具有指定键的元素，则为 true；否则为 false。</returns>
      <param name="key">要获取的值的键。</param>
      <param name="value">当此方法返回时，如果找到指定键，则返回与该键相关联的值；否则，将返回 <paramref name="value" /> 参数的类型的默认值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Values">
      <summary>获取包含 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的值的集合。</summary>
      <returns>包含 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的值的 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />。</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.Enumerator`0">
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator`0.Current">
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator`0.Dispose">
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator`0.MoveNext">
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator`0.System#Collections#IDictionaryEnumerator#Entry">
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator`0.System#Collections#IDictionaryEnumerator#Key">
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator`0.System#Collections#IDictionaryEnumerator#Value">
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator`0.System#Collections#IEnumerator#Current">
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator`0.System#Collections#IEnumerator#Reset">
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection`0">
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection`0.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection`0.CopyTo(`0[],System.Int32)">
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection`0.Count">
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection`0.GetEnumerator">
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection`0.System#Collections#Generic#ICollection{T}#Add(`0)">
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection`0.System#Collections#Generic#ICollection{T}#Clear">
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection`0.System#Collections#Generic#ICollection{T}#Contains(`0)">
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection`0.System#Collections#Generic#ICollection{T}#IsReadOnly">
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection`0.System#Collections#Generic#ICollection{T}#Remove(`0)">
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection`0.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection`0.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection`0.System#Collections#ICollection#IsSynchronized">
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection`0.System#Collections#ICollection#SyncRoot">
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection`0.System#Collections#IEnumerable#GetEnumerator">
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection`0.Enumerator`0">
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection`0.Enumerator`0.Current">
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection`0.Enumerator`0.Dispose">
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection`0.Enumerator`0.MoveNext">
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection`0.Enumerator`0.System#Collections#IEnumerator#Current">
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection`0.Enumerator`0.System#Collections#IEnumerator#Reset">
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection`0">
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection`0.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection`0.CopyTo(`1[],System.Int32)">
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection`0.Count">
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection`0.GetEnumerator">
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection`0.System#Collections#Generic#ICollection{T}#Add(`1)">
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection`0.System#Collections#Generic#ICollection{T}#Clear">
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection`0.System#Collections#Generic#ICollection{T}#Contains(`1)">
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection`0.System#Collections#Generic#ICollection{T}#IsReadOnly">
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection`0.System#Collections#Generic#ICollection{T}#Remove(`1)">
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection`0.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection`0.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection`0.System#Collections#ICollection#IsSynchronized">
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection`0.System#Collections#ICollection#SyncRoot">
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection`0.System#Collections#IEnumerable#GetEnumerator">
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection`0.Enumerator`0">
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection`0.Enumerator`0.Current">
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection`0.Enumerator`0.Dispose">
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection`0.Enumerator`0.MoveNext">
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection`0.Enumerator`0.System#Collections#IEnumerator#Current">
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection`0.Enumerator`0.System#Collections#IEnumerator#Reset">
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1">
      <summary>表示按排序顺序保持的对象的集合。</summary>
      <typeparam name="T">集内元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Generic.SortedSet`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>初始化使用指定比较器的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 类的新实例。</summary>
      <param name="comparer">用于比较对象的默认比较器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.SortedSet`1" /> 类的新实例，该实例包含从指定的可枚举集合中复制的元素。</summary>
      <param name="collection">要复制的可枚举集合。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.SortedSet`1" /> 类的新实例，该实例包含从指定的可枚举集合中复制的元素并使用指定的比较器。</summary>
      <param name="collection">要复制的可枚举集合。</param>
      <param name="comparer">用于比较对象的默认比较器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Add(`0)">
      <summary>向集内添加元素，并返回一个指示是否已成功添加元素的值。</summary>
      <returns>如果将 <paramref name="item" /> 添加到集内，则为 true；否则为 false。</returns>
      <param name="item">要添加到集中的元素。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Clear">
      <summary>从集内移除所有元素。</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Comparer">
      <summary>获取用于确定 <see cref="T:System.Collections.Generic.SortedSet`1" /> 中的值是否相等的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对象。</summary>
      <returns>用于确定 <see cref="T:System.Collections.Generic.SortedSet`1" /> 中的值是否相等的比较器。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Contains(`0)">
      <summary>确定集是否包含特定元素。</summary>
      <returns>如果集包含 <paramref name="item" />，则为 true；否则为 false。</returns>
      <param name="item">要在集内查找的元素。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[])">
      <summary>将整个 <see cref="T:System.Collections.Generic.SortedSet`1" /> 复制到兼容的一维数组中（从目标数组的开头开始复制）。</summary>
      <param name="array">一个一维数组，它是从 <see cref="T:System.Collections.Generic.SortedSet`1" /> 复制的元素的目标。</param>
      <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.Generic.SortedSet`1" /> 中的元素数大于目标数组可包含的元素数。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32)">
      <summary>将整个 <see cref="T:System.Collections.Generic.SortedSet`1" /> 复制到兼容的一维目标数组（从指定的数组索引处开始复制）。</summary>
      <param name="array">一个一维数组，它是从 <see cref="T:System.Collections.Generic.SortedSet`1" /> 复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentException">源数组中的元素数大于从 <paramref name="index" /> 到目标数组末尾处的可用空间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>将指定数量的元素从 <see cref="T:System.Collections.Generic.SortedSet`1" /> 复制到兼容的一维数组中（从指定的数组索引处开始复制）。</summary>
      <param name="array">一个一维数组，它是从 <see cref="T:System.Collections.Generic.SortedSet`1" /> 复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <param name="count">要复制的元素数。</param>
      <exception cref="T:System.ArgumentException">源数组中的元素数大于从 <paramref name="index" /> 到目标数组末尾处的可用空间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。 - 或 - <paramref name="count" /> 小于零。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Count">
      <summary>获取 <see cref="T:System.Collections.Generic.SortedSet`1" /> 中元素的数目。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 中元素的数目。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>从当前 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象中移除指定集合中的所有元素。</summary>
      <param name="other">要从 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象中移除的项的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Generic.SortedSet`1" /> 的枚举数。</summary>
      <returns>返回一个按顺序循环访问 <see cref="T:System.Collections.Generic.SortedSet`1" /> 的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetViewBetween(`0,`0)">
      <summary>返回 <see cref="T:System.Collections.Generic.SortedSet`1" /> 中的子集的视图。</summary>
      <returns>仅包含指定范围内的值的子集视图。</returns>
      <param name="lowerValue">视图中所需的最小值。</param>
      <param name="upperValue">视图中所需的最大值。</param>
      <exception cref="T:System.ArgumentException">根据比较器，<paramref name="lowerValue" /> 大于 <paramref name="upperValue" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">在视图上尝试的操作超出了 <paramref name="lowerValue" /> 和 <paramref name="upperValue" /> 指定的范围。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象，使该对象仅包含指定集合中也存在的元素。</summary>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象是否为指定集合的真子集。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象是 <paramref name="other" /> 的真子集，则为 true；否则为 false。</returns>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象是否为指定集合的真超集。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象是 <paramref name="other" /> 的真超集，则为 true；否则为 false。</returns>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象是否为指定集合的子集。</summary>
      <returns>如果当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象为 <paramref name="other" /> 的子集，则为 true；否则为 false。</returns>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象是否为指定集合的超集。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象是 <paramref name="other" /> 的超集，则为 true；否则为 false。</returns>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Max">
      <summary>按照比较器的定义，获取 <see cref="T:System.Collections.Generic.SortedSet`1" /> 中的最大值。</summary>
      <returns>集内的最大值。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Min">
      <summary>按照比较器的定义，获取 <see cref="T:System.Collections.Generic.SortedSet`1" /> 中的最小值。</summary>
      <returns>集内的最小值。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象和指定的集合是否共享常见元素。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象与 <paramref name="other" /> 至少共享一个公共元素，则为 true；否则为 false。</returns>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Remove(`0)">
      <summary>从 <see cref="T:System.Collections.Generic.SortedSet`1" /> 中移除指定的项。</summary>
      <returns>如果成功找到并移除该元素，则为 true；否则为 false。</returns>
      <param name="item">要移除的元素。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>从 <see cref="T:System.Collections.Generic.SortedSet`1" /> 中移除与指定的谓词所定义的条件相匹配的所有元素。</summary>
      <returns>已从 <see cref="T:System.Collections.Generic.SortedSet`1" /> 集合中移除的元素的数目。</returns>
      <param name="match">一个委托，用于定义要移除的元素应满足的条件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Reverse">
      <summary>返回一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它按相反的顺序循环访问 <see cref="T:System.Collections.Generic.SortedSet`1" />。</summary>
      <returns>一个枚举器，它按相反的顺序循环访问 <see cref="T:System.Collections.Generic.SortedSet`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象与指定的集合中是否包含相同的元素。</summary>
      <returns>如果当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象等于 <paramref name="other" />，则为 true；否则为 false。</returns>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象，使该对象仅包含当前对象或指定集合中存在的元素（但不可包含两者共有的元素）。</summary>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>向 <see cref="T:System.Collections.Generic.ICollection`1" /> 对象添加一个项。</summary>
      <param name="item">要添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 对象中的对象。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.ICollection" /> 是否为只读。</summary>
      <returns>如果该集合为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回一个循环访问集合的枚举数。</summary>
      <returns>一个可用于循环访问集合的枚举数。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>将整个 <see cref="T:System.Collections.Generic.SortedSet`1" /> 复制到兼容的一维目标数组（从指定的数组索引处开始复制）。</summary>
      <param name="array">一个一维数组，它是从 <see cref="T:System.Collections.Generic.SortedSet`1" /> 复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentException">源数组中的元素数大于从 <paramref name="index" /> 到目标数组末尾处的可用空间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果同步对 <see cref="T:System.Collections.ICollection" /> 的访问，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。 在 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 的默认实现中，此属性始终返回当前实例。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举数。</summary>
      <returns>一个可用于循环访问集合的枚举数。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象，使该对象包含当前对象或指定集合中存在的所有元素。</summary>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1.Enumerator`0">
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator`0.Current">
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator`0.Dispose">
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator`0.MoveNext">
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator`0.System#Collections#IEnumerator#Current">
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator`0.System#Collections#IEnumerator#Reset">
    </member>
    <member name="T:System.Collections.Generic.Stack`1">
      <summary>表示相同任意类型的实例的可变大小的后进先出 (LIFO) 集合。</summary>
      <typeparam name="T">指定堆栈中的元素的类型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Generic.Stack`1" /> 类的新实例，该实例为空并且具有默认初始容量。</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.Stack`1" /> 类的新实例，该实例包含从指定集合复制的元素并且具有足够的容量来容纳所复制的元素。</summary>
      <param name="collection">从其中复制元素的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.Generic.Stack`1" /> 类的新实例，该实例为空并且具有指定的初始容量或默认初始容量（这两个容量中的较大者）。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.Stack`1" /> 可包含的初始元素数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Clear">
      <summary>从 <see cref="T:System.Collections.Generic.Stack`1" /> 中移除所有对象。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Contains(`0)">
      <summary>确定某元素是否在 <see cref="T:System.Collections.Generic.Stack`1" /> 中。</summary>
      <returns>如果在 <see cref="T:System.Collections.Generic.Stack`1" /> 中找到 <paramref name="item" />，则为 true，否则为 false。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.Stack`1" /> 中定位的对象。 对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
      <summary>从指定数组索引开始将 <see cref="T:System.Collections.Generic.Stack`1" /> 复制到现有一维 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.Generic.Stack`1" /> 复制的元素的目标位置的一维 <see cref="T:System.Array" />。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.Generic.Stack`1" /> 中的元素数目大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Count">
      <summary>获取 <see cref="T:System.Collections.Generic.Stack`1" /> 中包含的元素数。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1" /> 中包含的元素个数。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.Generic.Stack`1" /> 的一个枚举数。</summary>
      <returns>用于 <see cref="T:System.Collections.Generic.Stack`1" /> 的 <see cref="T:System.Collections.Generic.Stack`1.Enumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Peek">
      <summary>返回位于 <see cref="T:System.Collections.Generic.Stack`1" /> 顶部的对象但不将其移除。</summary>
      <returns>位于 <see cref="T:System.Collections.Generic.Stack`1" /> 顶部的对象。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Stack`1" /> 为空。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Pop">
      <summary>移除并返回位于 <see cref="T:System.Collections.Generic.Stack`1" /> 顶部的对象。</summary>
      <returns>从 <see cref="T:System.Collections.Generic.Stack`1" /> 的顶部移除的对象。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Stack`1" /> 为空。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Push(`0)">
      <summary>将对象插入 <see cref="T:System.Collections.Generic.Stack`1" /> 的顶部。</summary>
      <param name="item">要推入到 <see cref="T:System.Collections.Generic.Stack`1" /> 中的对象。 对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的 <see cref="T:System.Array" /> 索引处开始，将 <see cref="T:System.Collections.ICollection" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标的一维 <see cref="T:System.Array" />。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。 - 或 - <paramref name="array" /> 没有从零开始的索引。 - 或 - 源 <see cref="T:System.Collections.ICollection" /> 中的元素数目大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。 - 或 - 源 <see cref="T:System.Collections.ICollection" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。 在 <see cref="T:System.Collections.Generic.Stack`1" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。 在 <see cref="T:System.Collections.Generic.Stack`1" /> 的默认实现中，此属性始终返回当前实例。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.ToArray">
      <summary>将 <see cref="T:System.Collections.Generic.Stack`1" /> 复制到新数组中。</summary>
      <returns>新数组，包含 <see cref="T:System.Collections.Generic.Stack`1" /> 的元素的副本。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TrimExcess">
      <summary>如果元素数小于当前容量的 90%，将容量设置为 <see cref="T:System.Collections.Generic.Stack`1" /> 中的实际元素数。</summary>
    </member>
    <member name="T:System.Collections.Generic.Stack`1.Enumerator`0">
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator`0.Current">
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator`0.Dispose">
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator`0.MoveNext">
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator`0.System#Collections#IEnumerator#Current">
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator`0.System#Collections#IEnumerator#Reset">
    </member>
    <member name="T:System.ComponentModel.AsyncCompletedEventArgs">
      <summary>为 MethodNameCompleted 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
      <summary>初始化 <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> 类的新实例。</summary>
      <param name="error">在异步操作期间发生的任何错误。</param>
      <param name="cancelled">一个指示异步操作是否已被取消的值。</param>
      <param name="userState">传递给 <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" /> 方法的、用户提供的可选状态对象。</param>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
      <summary>获取一个值，该值指示异步操作是否已被取消。</summary>
      <returns>如果后台操作已被取消，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
      <summary>获取一个值，该值指示异步操作期间发生的错误。</summary>
      <returns>如果异步操作期间发生错误，则为 <see cref="T:System.Exception" /> 实例；否则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
      <summary>如果异步操作失败，则引发用户提供的异常。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> 属性为 true。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">该 <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> 属性已由异步操作设置。 <see cref="P:System.Exception.InnerException" /> 属性持有对 <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> 的引用。</exception>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">
      <summary>获取异步任务的唯一标识符。</summary>
      <returns>唯一标识异步任务的对象引用；如果未设置任何值，则为 null。</returns>
    </member>
    <member name="T:System.ComponentModel.AsyncCompletedEventHandler">
      <summary>表示将要处理异步操作的 MethodNameCompleted 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">一个 <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />，其中包含事件数据。</param>
    </member>
    <member name="T:System.ComponentModel.CancelEventArgs">
      <summary>为可取消的事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.CancelEventArgs.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.CancelEventArgs" /> 类的新实例，其 <see cref="P:System.ComponentModel.CancelEventArgs.Cancel" /> 属性设置为 false。</summary>
    </member>
    <member name="M:System.ComponentModel.CancelEventArgs.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.CancelEventArgs" /> 类的新实例，其 <see cref="P:System.ComponentModel.CancelEventArgs.Cancel" /> 属性设置为给定值。</summary>
      <param name="cancel">要取消事件时为 true；否则为 false。</param>
    </member>
    <member name="P:System.ComponentModel.CancelEventArgs.Cancel">
      <summary>获取或设置指示是否应取消事件的值。</summary>
      <returns>如果应取消事件，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultValueAttribute">
      <summary>指定属性的默认值。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Boolean)">
      <summary>使用 <see cref="T:System.Boolean" /> 值初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例。</summary>
      <param name="value">
        <see cref="T:System.Boolean" />，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Byte)">
      <summary>使用 8 位无符号整数初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例。</summary>
      <param name="value">8 位无符号整数，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Char)">
      <summary>使用 Unicode 字符初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例。</summary>
      <param name="value">Unicode 字符，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Double)">
      <summary>使用双精度浮点数字初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例。</summary>
      <param name="value">双精度浮点数字，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int16)">
      <summary>使用 16 位有符号整数初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的实例。</summary>
      <param name="value">16 位有符号整数，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int32)">
      <summary>使用 32 位有符号整数初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的实例。</summary>
      <param name="value">32 位有符号整数，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int64)">
      <summary>使用 64 位有符号整数初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的实例。</summary>
      <param name="value">64 位有符号整数，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Object)">
      <summary>初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例。</summary>
      <param name="value">表示默认值的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Single)">
      <summary>使用单精度浮点数字初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例。</summary>
      <param name="value">单精度浮点数字，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.String)">
      <summary>使用 <see cref="T:System.String" /> 初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例。</summary>
      <param name="value">
        <see cref="T:System.String" />，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Type,System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例，将指定的值转换为指定的类型，并将固定区域性作为翻译上下文。</summary>
      <param name="type">表示要将值转换为的类型的 <see cref="T:System.Type" />。</param>
      <param name="value">可以通过该类型的 <see cref="T:System.ComponentModel.TypeConverter" /> 和美国英语转换为该类型的 <see cref="T:System.String" /> 。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.DefaultValueAttribute" />。</summary>
      <returns>如果给定对象的值等于当前对象的值，则为 true；否则为 false。</returns>
      <param name="obj">要进行值的相等性测试的对象。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.GetHashCode">
    </member>
    <member name="P:System.ComponentModel.DefaultValueAttribute.Value">
      <summary>获取此属性 (Attribute) 绑定到的属性 (Property) 的默认值。</summary>
      <returns>表示此属性 (Attribute) 绑定到的属性 (Property) 的默认值的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableAttribute">
      <summary>指定某一属性或方法在编辑器中可见。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor(System.ComponentModel.EditorBrowsableState)">
      <summary>使用 <see cref="T:System.ComponentModel.EditorBrowsableState" /> 初始化 <see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> 类的新实例。</summary>
      <param name="state">要将 <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State" /> 设置成的 <see cref="T:System.ComponentModel.EditorBrowsableState" />。</param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.EditorBrowsableAttribute" />。</summary>
      <returns>如果给定对象的值等于当前对象的值，则为 true；否则为 false。</returns>
      <param name="obj">要进行值的相等性测试的对象。</param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.GetHashCode">
    </member>
    <member name="P:System.ComponentModel.EditorBrowsableAttribute.State">
      <summary>获取属性或方法的可浏览状态。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.EditorBrowsableState" />，它是属性或方法的可浏览状态。</returns>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableState">
      <summary>在编辑器中指定属性或方法的可浏览状态。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Advanced">
      <summary>该属性或方法是只有高级用户才可以看到的功能。 编辑器可以显示或隐藏这些属性。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Always">
      <summary>该属性或方法在编辑器中始终是可浏览的。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Never">
      <summary>该属性或方法始终不能在编辑器中浏览。</summary>
    </member>
    <member name="T:System.ComponentModel.IChangeTracking">
      <summary>定义查询对象更改以及重置更改后的状态的机制。</summary>
    </member>
    <member name="M:System.ComponentModel.IChangeTracking.AcceptChanges">
      <summary>通过接受修改将对象的状态重置为更改前的状态。</summary>
    </member>
    <member name="P:System.ComponentModel.IChangeTracking.IsChanged">
      <summary>获取对象更改后的状态。</summary>
      <returns>如果自上次调用 <see cref="M:System.ComponentModel.IChangeTracking.AcceptChanges" /> 后对象的内容发生了更改，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ComponentModel.IEditableObject">
      <summary>提供提交或回滚对用作数据源的对象所做更改的功能。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.BeginEdit">
      <summary>开始编辑对象。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.CancelEdit">
      <summary>放弃上一次 <see cref="M:System.ComponentModel.IEditableObject.BeginEdit" /> 调用之后的更改。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.EndEdit">
      <summary>将上一次 <see cref="M:System.ComponentModel.IEditableObject.BeginEdit" /> 或 <see cref="M:System.ComponentModel.IBindingList.AddNew" /> 调用之后所进行的更改推到基础对象中。</summary>
    </member>
    <member name="T:System.ComponentModel.INotifyPropertyChanged">
      <summary>向客户端发出某一属性值已更改的通知。</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
      <summary>在属性值更改时发生。</summary>
    </member>
    <member name="T:System.ComponentModel.IRevertibleChangeTracking">
      <summary>提供对回滚更改的支持</summary>
    </member>
    <member name="M:System.ComponentModel.IRevertibleChangeTracking.RejectChanges">
      <summary>通过拒绝修改，将对象的状态重置为更改前的状态。</summary>
    </member>
    <member name="T:System.ComponentModel.ProgressChangedEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.ProgressChangedEventArgs.#ctor(System.Int32,System.Object)">
      <summary>初始化 <see cref="T:System.ComponentModel.ProgressChangedEventArgs" /> 类的新实例。</summary>
      <param name="progressPercentage">已完成的异步任务的百分比。</param>
      <param name="userState">唯一的用户状态。</param>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage">
      <summary>获取异步任务的进度百分比。</summary>
      <returns>指示异步任务进度的百分比值。</returns>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.UserState">
      <summary>获取唯一的用户状态。</summary>
      <returns>指示用户状态的唯一 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ProgressChangedEventHandler">
      <summary>表示将处理 <see cref="T:System.ComponentModel.BackgroundWorker" /> 类的 <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> 事件的方法。 此类不能被继承。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.ProgressChangedEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventArgs.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> 类的新实例。</summary>
      <param name="propertyName">已更改的属性的名称。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName">
      <summary>获取已更改的属性名称。</summary>
      <returns>已更改的属性的名称。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventHandler">
      <summary>表示将处理 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件的方法，该事件在更改组件上的属性时引发。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />。</param>
    </member>
    <member name="T:System.Diagnostics.Debug">
      <summary>提供一组帮助调试代码的方法和属性。 此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean)">
      <summary>检查条件；如果条件为 false，则显示一个消息框，其中会显示调用堆栈。</summary>
      <param name="condition">要计算的条件表达式。 如果条件为 true，则不发送失败消息，并且不显示消息框。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)">
      <summary>检查条件；如果条件为 false，则输出指定消息，并显示一个消息框，其中会显示调用堆栈。</summary>
      <param name="condition">要计算的条件表达式。 如果条件为 true，则不发送指定消息，并且不显示消息框。</param>
      <param name="message">要发送给 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合的消息。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String)">
      <summary>检查条件；如果条件为 false，则输出两条指定消息，并显示一个消息框，其中会显示调用堆栈。</summary>
      <param name="condition">要计算的条件表达式。 如果条件为 true，则不发送指定消息，并且不显示消息框。</param>
      <param name="message">要发送给 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合的消息。</param>
      <param name="detailMessage">要发送给 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合的详细消息。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.Object)">
      <summary>将对象的 <see cref="M:System.Object.ToString" /> 方法的值写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器中。</summary>
      <param name="value">一个对象，其名称被发送到 <see cref="P:System.Diagnostics.Debug.Listeners" />。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.String)">
      <summary>将后跟行结束符的消息写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="message">要写入的消息。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.String,System.Object[])">
      <summary>将后跟行结束符的格式化消息写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="format">一个包含与零个或多个格式项混合的文本的复合格式字符串（请参见“备注”），它与 <paramref name="args" /> 数组中的对象相对应。</param>
      <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)">
      <summary>如果条件为 true，则将消息写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="condition">要计算的条件表达式。 如果条件为 true，则将消息写入集合中的跟踪侦听器。</param>
      <param name="message">要写入的消息。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Diagnostics.Stopwatch">
      <summary>提供一组方法和属性，可用于准确地测量运行时间。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.Stopwatch" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.Elapsed">
      <summary>获取当前实例测量得出的总运行时间。</summary>
      <returns>一个只读的 <see cref="T:System.TimeSpan" />，用于表示当前实例测量得出的总运行时间。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds">
      <summary>获取当前实例测量得出的总运行时间（以毫秒为单位）。</summary>
      <returns>一个只读长整型，表示当前实例测量得出的总毫秒数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedTicks">
      <summary>获取当前实例测量得出的总运行时间（用计时器计时周期表示）。</summary>
      <returns>一个只读长整型，表示当前实例测量得出的计时器计时周期的总数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.Frequency">
      <summary>获取以每秒计时周期数表示的计时器频率。 此字段为只读。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.GetTimestamp">
      <summary>获取计时器机制中的当前最小时间单位数。</summary>
      <returns>一个长整型，表示基础计时器机制中的计时周期计数器值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.IsHighResolution">
      <summary>指示计时器是否基于高分辨率性能计数器。 此字段为只读。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.IsRunning">
      <summary>获取一个指示 <see cref="T:System.Diagnostics.Stopwatch" /> 计时器是否在运行的值。</summary>
      <returns>如果 <see cref="T:System.Diagnostics.Stopwatch" /> 实例当前正在运行，并且在对某个时间间隔的运行时间进行测量，则该值为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Reset">
      <summary>停止时间间隔测量，并将运行时间重置为零。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Restart">
      <summary>停止时间间隔测量，将运行时间重置为零，然后开始测量运行时间。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Start">
      <summary>开始或继续测量某个时间间隔的运行时间。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.StartNew">
      <summary>对新的 <see cref="T:System.Diagnostics.Stopwatch" /> 实例进行初始化，将运行时间属性设置为零，然后开始测量运行时间。</summary>
      <returns>刚刚开始测量运行时间的 <see cref="T:System.Diagnostics.Stopwatch" />。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Stop">
      <summary>停止测量某个时间间隔的运行时间。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.IO.InvalidDataException">
      <summary>在数据流的格式无效时引发的异常。</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor">
      <summary>初始化 <see cref="T:System.IO.InvalidDataException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.IO.InvalidDataException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String,System.Exception)">
      <summary>用对作为此异常原因的内部异常的引用初始化 <see cref="T:System.IO.InvalidDataException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.IO.Compression.CompressionMode">
      <summary>指定是否压缩或解压缩基础流。</summary>
    </member>
    <member name="F:System.IO.Compression.CompressionMode.Compress">
      <summary>压缩基础流。</summary>
    </member>
    <member name="F:System.IO.Compression.CompressionMode.Decompress">
      <summary>解压缩基础流。</summary>
    </member>
    <member name="T:System.IO.Compression.DeflateStream">
      <summary>提供使用 Deflate 算法压缩和解压缩流的方法和属性。</summary>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionMode)">
      <summary>用指定的流和压缩模式初始化 <see cref="T:System.IO.Compression.DeflateStream" /> 类的新实例。</summary>
      <param name="stream">要压缩或解压缩的流。</param>
      <param name="mode">用于指示压缩还是解压缩流的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是有效的 <see cref="T:System.IO.Compression.CompressionMode" /> 值。 - 或 - <see cref="T:System.IO.Compression.CompressionMode" /> 为 <see cref="F:System.IO.Compression.CompressionMode.Compress" /> 且 <see cref="P:System.IO.Stream.CanWrite" /> 为 false。 - 或 - <see cref="T:System.IO.Compression.CompressionMode" /> 为 <see cref="F:System.IO.Compression.CompressionMode.Decompress" /> 且 <see cref="P:System.IO.Stream.CanRead" /> 为 false。</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionMode,System.Boolean)">
      <summary>基于所提供的流和压缩模式，初始化 <see cref="T:System.IO.Compression.DeflateStream" /> 类的新实例，有选择性的打开流。</summary>
      <param name="stream">要压缩或解压缩的流。</param>
      <param name="mode">用于指示压缩还是解压缩流的枚举值之一。</param>
      <param name="leaveOpen">如果在释放 <see cref="T:System.IO.Compression.DeflateStream" /> 对象之后打开流，则为 true；否则为， false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是有效的 <see cref="T:System.IO.Compression.CompressionMode" /> 值。 - 或 - <see cref="T:System.IO.Compression.CompressionMode" /> 为 <see cref="F:System.IO.Compression.CompressionMode.Compress" /> 且 <see cref="P:System.IO.Stream.CanWrite" /> 为 false。 - 或 - <see cref="T:System.IO.Compression.CompressionMode" /> 为 <see cref="F:System.IO.Compression.CompressionMode.Decompress" /> 且 <see cref="P:System.IO.Stream.CanRead" /> 为 false。</exception>
    </member>
    <member name="P:System.IO.Compression.DeflateStream.BaseStream">
      <summary>获取对基础流的引用。</summary>
      <returns>表示基础流的流对象。</returns>
      <exception cref="T:System.ObjectDisposedException">基础流已关闭。</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步读操作。 （考虑使用<see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" />进行替换；请参见“备注”部分。）</summary>
      <returns>表示异步读取操作（可能仍处于挂起状态）的对象。</returns>
      <param name="array">将数据读入的字节数组。</param>
      <param name="offset">
        <paramref name="array" /> 中的字节偏移量，从该偏移量开始读取流中的数据。</param>
      <param name="count">最多读取的字节数。</param>
      <param name="asyncCallback">可选的异步回调，在完成读取操作时调用。</param>
      <param name="asyncState">一个用户提供的对象，它将该特定的异步读取请求与其他请求区别开来。</param>
      <exception cref="T:System.IO.IOException">尝试异步读取超过了流的结尾，或者发生了磁盘错误。</exception>
      <exception cref="T:System.ArgumentException">一个或多个参数无效。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
      <exception cref="T:System.NotSupportedException">当前 <see cref="T:System.IO.Compression.DeflateStream" /> 实现不支持读取操作。</exception>
      <exception cref="T:System.InvalidOperationException">无法完成此调用。</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步写操作。 （考虑使用<see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" />进行替换；请参见“备注”部分。）</summary>
      <returns>表示异步写入操作（可能仍处于挂起状态）的对象。</returns>
      <param name="array">从中写入数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的字节偏移量，从此处开始写入。</param>
      <param name="count">最多写入的字节数。</param>
      <param name="asyncCallback">可选的异步回调，在完成写入操作时调用。</param>
      <param name="asyncState">一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。</param>
      <exception cref="T:System.IO.IOException">尝试异步写入超过流的结尾的方法或发生错误的磁盘。</exception>
      <exception cref="T:System.ArgumentException">一个或多个参数无效。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
      <exception cref="T:System.NotSupportedException">当前 <see cref="T:System.IO.Compression.DeflateStream" /> 实现不支持写入操作。</exception>
      <exception cref="T:System.InvalidOperationException">由于流已关闭，因此无法执行写入操作。</exception>
    </member>
    <member name="P:System.IO.Compression.DeflateStream.CanRead">
      <summary>获取一个值，该值指示流是否支持在解压缩文件的过程中读取文件。</summary>
      <returns>如果 <see cref="T:System.IO.Compression.CompressionMode" /> 值为 Decompress 而且基础流已打开并支持读取，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IO.Compression.DeflateStream.CanSeek">
      <summary>获取一个值，该值指示流是否支持查找。</summary>
      <returns>所有情况下均为 false。</returns>
    </member>
    <member name="P:System.IO.Compression.DeflateStream.CanWrite">
      <summary>获取一个值，该值指示流是否支持写入。</summary>
      <returns>如果 <see cref="T:System.IO.Compression.CompressionMode" /> 值为 Compress 而且基础流未关闭并支持写入，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.IO.Compression.DeflateStream" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.EndRead(System.IAsyncResult)">
      <summary>等待挂起的异步读取完成。 （考虑使用<see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" />进行替换；请参见“备注”部分。）</summary>
      <returns>从流中读取的字节数，介于 0 （零）和您请求的字节数之间。 <see cref="T:System.IO.Compression.DeflateStream" /> 仅在流的末尾返回零 (0)；否则将一直阻塞，只到至少有一个字节可用。</returns>
      <param name="asyncResult">对要完成的挂起异步请求的引用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 并非源自当前流上的 <see cref="M:System.IO.Compression.DeflateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.SystemException">在调用 <see cref="M:System.Threading.WaitHandle.WaitOne" /> 期间引发了异常。</exception>
      <exception cref="T:System.InvalidOperationException">结束调用无效，原因是该流的异步读取操作尚未完成。</exception>
      <exception cref="T:System.InvalidOperationException">结束调用无效，原因是该流的异步读取操作尚未完成。</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.EndWrite(System.IAsyncResult)">
      <summary>结束异步写操作。 （考虑使用<see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" />进行替换；请参见“备注”部分。）</summary>
      <param name="asyncResult">对未完成的异步 I/O 请求的引用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 并非源自当前流上的 <see cref="M:System.IO.Compression.DeflateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.Exception">在调用 <see cref="M:System.Threading.WaitHandle.WaitOne" /> 期间引发了异常。</exception>
      <exception cref="T:System.InvalidOperationException">此流为 null。</exception>
      <exception cref="T:System.InvalidOperationException">此流为 null。</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.Flush">
      <summary>此方法的当前实现没有任何功能。</summary>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.Compression.DeflateStream.Length">
      <summary>此属性不受支持，并且总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>一个 long 值。</returns>
      <exception cref="T:System.NotSupportedException">此流中不支持此属性。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.Compression.DeflateStream.Position">
      <summary>此属性不受支持，并且总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>一个 long 值。</returns>
      <exception cref="T:System.NotSupportedException">此流中不支持此属性。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>将若干解压缩的字节读入指定的字节数组。</summary>
      <returns>已读入到字节数组中的字节数。</returns>
      <param name="array">用于存储解压缩的字节的数组。</param>
      <param name="offset">
        <paramref name="array" /> 中的字节偏移量，将在此处开始读取字节。</param>
      <param name="count">最多要读取的解压缩字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">创建对象时 <see cref="T:System.IO.Compression.CompressionMode" /> 值是 Compress。 - 或 - 基础流不支持读取。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 小于零。 - 或 - <paramref name="array" /> 长度减去索引起始点小于 <paramref name="count" />。</exception>
      <exception cref="T:System.IO.InvalidDataException">数据的格式无效。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>此操作不受支持，它总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>一个 long 值。</returns>
      <param name="offset">流中的位置。</param>
      <param name="origin">
        <see cref="T:System.IO.SeekOrigin" /> 值之一。</param>
      <exception cref="T:System.NotSupportedException">此流中不支持此属性。</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.SetLength(System.Int64)">
      <summary>此操作不受支持，它总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">流的长度。</param>
      <exception cref="T:System.NotSupportedException">此流中不支持此属性。</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>从指定的字节数组中将压缩的字节写入基础流。</summary>
      <param name="array">包含要压缩的数据的缓冲区。</param>
      <param name="offset">
        <paramref name="array" /> 中的字节偏移量，将在此处开始读取字节。</param>
      <param name="count">最多写入的字节数。</param>
    </member>
    <member name="T:System.IO.Compression.GZipStream">
      <summary>提供用于压缩和解压缩流的方法和属性。</summary>
    </member>
    <member name="M:System.IO.Compression.GZipStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionMode)">
      <summary>用指定的流和压缩模式初始化 <see cref="T:System.IO.Compression.GZipStream" /> 类的新实例。</summary>
      <param name="stream">要压缩或解压缩的流。</param>
      <param name="mode">用于指示压缩还是解压缩流的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是有效的 <see cref="T:System.IO.Compression.CompressionMode" /> 枚举值。 - 或 - <see cref="T:System.IO.Compression.CompressionMode" /> 为 <see cref="F:System.IO.Compression.CompressionMode.Compress" /> 且 <see cref="P:System.IO.Stream.CanWrite" /> 为 false。 - 或 - <see cref="T:System.IO.Compression.CompressionMode" /> 为 <see cref="F:System.IO.Compression.CompressionMode.Decompress" /> 且 <see cref="P:System.IO.Stream.CanRead" /> 为 false。</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionMode,System.Boolean)">
      <summary>基于所提供的流和压缩模式，初始化 <see cref="T:System.IO.Compression.GZipStream" /> 类的新实例，有选择性的打开流。</summary>
      <param name="stream">要压缩或解压缩的流。</param>
      <param name="mode">用于指示压缩还是解压缩流的枚举值之一。</param>
      <param name="leaveOpen">如果在释放 <see cref="T:System.IO.Compression.GZipStream" /> 对象之后打开流，则为 true；否则为， false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是有效的 <see cref="T:System.IO.Compression.CompressionMode" /> 值。 - 或 - <see cref="T:System.IO.Compression.CompressionMode" /> 为 <see cref="F:System.IO.Compression.CompressionMode.Compress" /> 且 <see cref="P:System.IO.Stream.CanWrite" /> 为 false。 - 或 - <see cref="T:System.IO.Compression.CompressionMode" /> 为 <see cref="F:System.IO.Compression.CompressionMode.Decompress" /> 且 <see cref="P:System.IO.Stream.CanRead" /> 为 false。</exception>
    </member>
    <member name="P:System.IO.Compression.GZipStream.BaseStream">
      <summary>获取对基础流的引用。</summary>
      <returns>表示基础流的流对象。</returns>
      <exception cref="T:System.ObjectDisposedException">基础流已关闭。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Compression.GZipStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步读操作。 （考虑使用<see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" />进行替换；请参见“备注”部分。）</summary>
      <returns>表示异步读取操作（可能仍处于挂起状态）的对象。</returns>
      <param name="array">将数据读入的字节数组。</param>
      <param name="offset">
        <paramref name="array" /> 中的字节偏移量，从该偏移量开始读取流中的数据。</param>
      <param name="count">最多读取的字节数。</param>
      <param name="asyncCallback">可选的异步回调，在完成读取操作时调用。</param>
      <param name="asyncState">一个用户提供的对象，它将该特定的异步读取请求与其他请求区别开来。</param>
      <exception cref="T:System.IO.IOException">尝试异步读取超过了流的结尾，或者发生了磁盘错误。</exception>
      <exception cref="T:System.ArgumentException">一个或多个参数无效。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
      <exception cref="T:System.NotSupportedException">当前 <see cref="T:System.IO.Compression.GZipStream" /> 实现不支持读取操作。</exception>
      <exception cref="T:System.InvalidOperationException">由于流已关闭，因此无法执行读取操作。</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步写操作。 （考虑使用<see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" />进行替换；请参见“备注”部分。）</summary>
      <returns>表示异步写入操作（可能仍处于挂起状态）的对象。</returns>
      <param name="array">包含要写入当前流的数据的缓冲区。</param>
      <param name="offset">
        <paramref name="array" /> 中的字节偏移量，从此处开始写入。</param>
      <param name="count">最多写入的字节数。</param>
      <param name="asyncCallback">可选的异步回调，在完成写入操作时调用。</param>
      <param name="asyncState">一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。</param>
      <exception cref="T:System.InvalidOperationException">此基础流为 null。 - 或 - 基础流已关闭。</exception>
    </member>
    <member name="P:System.IO.Compression.GZipStream.CanRead">
      <summary>获取一个值，该值指示流是否支持在解压缩文件的过程中读取文件。</summary>
      <returns>如果 <see cref="T:System.IO.Compression.CompressionMode" /> 值为 Decompress, 而且基础流未关闭并支持读取，则为 true；否则为 false。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.Compression.GZipStream.CanSeek">
      <summary>获取一个值，该值指示流是否支持查找。</summary>
      <returns>所有情况下均为 false。</returns>
    </member>
    <member name="P:System.IO.Compression.GZipStream.CanWrite">
      <summary>获取一个值，该值指示流是否支持写入。</summary>
      <returns>如果 <see cref="T:System.IO.Compression.CompressionMode" /> 值为 Compress 而且基础流未关闭并支持写入，则为 true；否则为 false。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Compression.GZipStream.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.IO.Compression.GZipStream" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.IO.Compression.GZipStream.EndRead(System.IAsyncResult)">
      <summary>等待挂起的异步读取完成。 （考虑使用<see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /> 方法进行替换；请参见“备注”部分。）</summary>
      <returns>从流中读取的字节数，介于 0 （零）和您请求的字节数之间。 <see cref="T:System.IO.Compression.GZipStream" /> 仅在流的末尾返回零 (0)；否则将一直阻塞，只到至少有一个字节可用。</returns>
      <param name="asyncResult">对要完成的挂起异步请求的引用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 并非源自当前流上的 <see cref="M:System.IO.Compression.DeflateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.InvalidOperationException">由于流已关闭，因此无法执行结束操作。</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.EndWrite(System.IAsyncResult)">
      <summary>处理异步写入的结束。 （考虑使用<see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" />进行替换；请参见“备注”部分。）</summary>
      <param name="asyncResult">表示异步调用的对象。</param>
      <exception cref="T:System.InvalidOperationException">此基础流为 null。 - 或 - 基础流已关闭。</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.Flush">
      <summary>此方法的当前实现没有任何功能。</summary>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.Compression.GZipStream.Length">
      <summary>此属性不受支持，并且总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>一个 long 值。</returns>
      <exception cref="T:System.NotSupportedException">此流中不支持此属性。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.Compression.GZipStream.Position">
      <summary>此属性不受支持，并且总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>一个 long 值。</returns>
      <exception cref="T:System.NotSupportedException">此流中不支持此属性。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Compression.GZipStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>将若干解压缩的字节读入指定的字节数组。</summary>
      <returns>解压缩到字节数组中的字节数。 如果已到达流的末尾，则返回 0 或已读取的字节数。</returns>
      <param name="array">用于存储解压缩的字节的数组。</param>
      <param name="offset">
        <paramref name="array" /> 中的字节偏移量，将在此处开始读取字节。</param>
      <param name="count">最多要读取的解压缩字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">创建对象时 <see cref="T:System.IO.Compression.CompressionMode" /> 值是 Compress。 - 或 - 基础流不支持读取。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 小于零。 - 或 - <paramref name="array" /> 长度减去索引起始点小于 <paramref name="count" />。</exception>
      <exception cref="T:System.IO.InvalidDataException">数据的格式无效。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>此属性不受支持，并且总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>一个 long 值。</returns>
      <param name="offset">流中的位置。</param>
      <param name="origin">
        <see cref="T:System.IO.SeekOrigin" /> 值之一。</param>
      <exception cref="T:System.NotSupportedException">此流中不支持此属性。</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.SetLength(System.Int64)">
      <summary>此属性不受支持，并且总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">流的长度。</param>
      <exception cref="T:System.NotSupportedException">此流中不支持此属性。</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>从指定的字节数组中将压缩的字节写入基础流。</summary>
      <param name="array">包含要压缩的数据的缓冲区。</param>
      <param name="offset">
        <paramref name="array" /> 中的字节偏移量，将在此处开始读取字节。</param>
      <param name="count">最多写入的字节数。</param>
      <exception cref="T:System.ObjectDisposedException">由于流已关闭，因此无法执行写入操作。</exception>
    </member>
    <member name="T:System.Text.RegularExpressions.Capture">
      <summary>表示来自单个成功的子表达式捕获的结果。</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Index">
      <summary>原始字符串中发现捕获的子字符串的第一个字符的位置。</summary>
      <returns>原始字符串中发现捕获的子字符串的从零开始的起始位置。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Length">
      <summary>获取捕获的子字符串的长度。</summary>
      <returns>捕获的子字符串的长度。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Capture.ToString">
      <summary>通过调用 <see cref="P:System.Text.RegularExpressions.Capture.Value" /> 属性，从输入字符串检索捕获的子字符串。</summary>
      <returns>通过匹配捕获的子字符串。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Value">
      <summary>从输入字符串中获取捕获的子字符串。</summary>
      <returns>通过匹配捕获的子字符串。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.CaptureCollection">
      <summary>表示一个捕获组做出的捕获的集合。</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Count">
      <summary>获取由该组捕获的子字符串数。</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.CaptureCollection" /> 中的项数。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.GetEnumerator">
      <summary>提供一个循环访问集合的枚举数。</summary>
      <returns>包含 <see cref="T:System.Text.RegularExpressions.CaptureCollection" /> 中所有 <see cref="T:System.Text.RegularExpressions.Capture" /> 对象的对象。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Item(System.Int32)">
      <summary>获取该集合的单个成员。</summary>
      <returns>位于集合中 <paramref name="i" /> 位置的捕获子字符串。</returns>
      <param name="i">捕获集合中的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 小于 0 或大于 <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" />。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>将集合的所有元素复制到给定数组中（从给定索引处开始）。</summary>
      <param name="array">该集合要被复制入的该一维数组。</param>
      <param name="arrayIndex">目标数组中将开始复制的位置的从零开始的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 在 <paramref name="array" /> 的界限外。 - 或 - <paramref name="arrayIndex" /> 以及 <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" /> 在 <paramref name="array" /> 的界限外。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否同步（线程安全）。</summary>
      <returns>所有情况下均为 false。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对集合的访问的对象。</summary>
      <returns>可用于同步集合访问的对象。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Group">
      <summary>表示来自单个捕获组的结果。</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Captures">
      <summary>按从里到外、从左到右的顺序获取由捕获组匹配的所有捕获的集合（如果正则表达式用 <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> 选项修改了，则顺序为按从里到外、从右到左）。 该集合可以有零个或更多的项。</summary>
      <returns>由该组匹配的子字符串的集合。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Success">
      <summary>获取一个值，该值指示匹配是否成功。</summary>
      <returns>如果匹配成功，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.GroupCollection">
      <summary>返回一次匹配中捕获的组的集合。</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Count">
      <summary>返回集合中的组数。</summary>
      <returns>集合中的组数。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.GetEnumerator">
      <summary>提供一个循环访问集合的枚举数。</summary>
      <returns>一个枚举器，其中包含 <see cref="T:System.Text.RegularExpressions.GroupCollection" /> 中的所有 <see cref="T:System.Text.RegularExpressions.Group" /> 对象。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)">
      <summary>允许通过整数索引访问集合成员。</summary>
      <returns>由 <paramref name="groupnum" /> 指定的集合的成员。</returns>
      <param name="groupnum">要检索的集合成员的索引（从零开始）。</param>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.String)">
      <summary>允许通过字符串索引访问集合成员。</summary>
      <returns>由 <paramref name="groupname" /> 指定的集合的成员。</returns>
      <param name="groupname">捕获组的名称。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>将集合的所有元素复制到指定的数组中（从指定索引处开始）。</summary>
      <param name="array">该集合要被复制入的该一维数组。</param>
      <param name="arrayIndex">目标数组中将开始复制的位置的从零开始的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="arrayIndex" /> 在 <paramref name="array" /> 的界限外。 - 或 - <paramref name="arrayIndex" /> 以及 <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> 在 <paramref name="array" /> 的界限外。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否同步（线程安全）。</summary>
      <returns>所有情况下均为 false。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对集合的访问的对象。</summary>
      <returns>可用于同步集合访问的对象。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Match">
      <summary>表示单个正则表达式匹配的结果。</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Empty">
      <summary>获取空组。 所有失败的匹配都返回此空匹配。</summary>
      <returns>空匹配。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Groups">
      <summary>获取由正则表达式匹配的组的集合。</summary>
      <returns>由模式匹配的字符组。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.NextMatch">
      <summary>从上一个匹配结束的位置（即在上一个匹配字符之后的字符）开始返回一个包含下一个匹配结果的新 <see cref="T:System.Text.RegularExpressions.Match" /> 对象。</summary>
      <returns>下一个正则表达式匹配。</returns>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.Result(System.String)">
      <summary>返回对指定替换模式的扩展。</summary>
      <returns>
        <paramref name="replacement" /> 参数的扩展版本。</returns>
      <param name="replacement">要使用的替换模式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="replacement" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">不允许对此模式进行扩展。</exception>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchCollection">
      <summary>表示通过以迭代方式将正则表达式模式应用于输入字符串所找到的成功匹配的集合。</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Count">
      <summary>获取匹配项的数目。</summary>
      <returns>匹配项的数目。</returns>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
      <summary>提供一个循环访问集合的枚举数。</summary>
      <returns>包含 <see cref="T:System.Text.RegularExpressions.MatchCollection" /> 中所有 <see cref="T:System.Text.RegularExpressions.Match" /> 对象的对象。</returns>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
      <summary>获取该集合的单个成员。</summary>
      <returns>位于集合中 <paramref name="i" /> 位置的捕获子字符串。</returns>
      <param name="i">
        <see cref="T:System.Text.RegularExpressions.Match" /> 集合中的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 小于 0，或者大于或等于 <see cref="P:System.Text.RegularExpressions.MatchCollection.Count" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从指定索引处开始，将集合中的所有元素复制到指定的数组。</summary>
      <param name="array">该集合要被复制入的该一维数组。</param>
      <param name="arrayIndex">数组中将开始复制的位置的从零开始的索引。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是一个多维数组。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="arrayIndex" /> 在数组边界外。 - 或 - <paramref name="arrayIndex" /> 以及 <see cref="P:System.Text.RegularExpressions.MatchCollection.Count" /> 在 <paramref name="array" /> 的界限外。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否同步（线程安全）。</summary>
      <returns>所有情况下均为 false。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对集合的访问的对象。</summary>
      <returns>可用于同步集合访问的对象。 此属性始终返回对象本身。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchEvaluator">
      <summary>表示在 <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" /> 方法操作过程中每当找到正则表达式匹配时都调用的方法。</summary>
      <returns>由 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托表示的方法返回的字符串。</returns>
      <param name="match">
        <see cref="T:System.Text.RegularExpressions.Match" /> 对象，表示 <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" /> 方法操作过程中的单个正则表达式匹配。</param>
    </member>
    <member name="T:System.Text.RegularExpressions.Regex">
      <summary>表示不可变的正则表达式。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor">
      <summary>初始化 <see cref="T:System.Text.RegularExpressions.Regex" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String)">
      <summary>针对指定的正则表达式初始化 <see cref="T:System.Text.RegularExpressions.Regex" /> 类的新实例。</summary>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>用修改模式的选项为指定的正则表达式初始化并编译 <see cref="T:System.Text.RegularExpressions.Regex" /> 类的一个新实例。</summary>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="options">用于修改正则表达式的枚举值的按位组合。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 包含无效标志。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Escape(System.String)">
      <summary>通过替换为转义码来转义最小的字符集（\、*、+、?、|、{、[、(、)、^、$、.、# 和空白）。 这将指示正则表达式引擎按原义解释这些字符而不是解释为元字符。</summary>
      <returns>由转换为转义形式的元字符组成的字符串。</returns>
      <param name="str">包含要转换的文本的输入字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNames">
      <summary>返回正则表达式的捕获组名数组。</summary>
      <returns>组名的字符串数组。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNumbers">
      <summary>返回与数组中的组名相对应的捕获组号的数组。</summary>
      <returns>组号的整数数组。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)">
      <summary>获取与指定组号相对应的组名。</summary>
      <returns>包含与指定组号关联的组名的字符串。 如果没有与 <paramref name="i" /> 对应的组名，此方法将返回 <see cref="F:System.String.Empty" />。</returns>
      <param name="i">要转换为相应组名的组号。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)">
      <summary>返回与指定组名相对应的组号。</summary>
      <returns>与指定组名相对应的组号，如果 <paramref name="name" /> 不是一个有效的组名则为 -1。</returns>
      <param name="name">要转换为相应组号的组名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String)">
      <summary>指示 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数中指定的正则表达式在指定的输入字符串中是否找到了匹配项。</summary>
      <returns>如果正则表达式找到匹配项，则为 true；否则，为 false。</returns>
      <param name="input">要搜索匹配项的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的更多信息，请参见“备注”节。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)">
      <summary>指示 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数中指定的正则表达式在指定的输入字符串中，从该字符串中的指定起始位置开始是否找到了匹配项。</summary>
      <returns>如果正则表达式找到匹配项，则为 true；否则，为 false。</returns>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="startat">开始搜索的字符位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小于零，或者大于 <paramref name="input" /> 的长度。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的更多信息，请参见“备注”节。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)">
      <summary>指示所指定的正则表达式在指定的输入字符串中是否找到了匹配项。</summary>
      <returns>如果正则表达式找到匹配项，则为 true；否则，为 false。</returns>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 null。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的更多信息，请参见“备注”节。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>指示所指定的正则表达式是否使用指定的匹配选项在指定的输入字符串中找到了匹配项。</summary>
      <returns>如果正则表达式找到匹配项，则为 true；否则，为 false。</returns>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="options">枚举值的一个按位组合，这些枚举值提供匹配选项。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是有效的 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的更多信息，请参见“备注”节。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String)">
      <summary>在指定的输入字符串中搜索 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数中指定的正则表达式的第一个匹配项。</summary>
      <returns>一个包含有关匹配的信息的对象。</returns>
      <param name="input">要搜索匹配项的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的更多信息，请参见“备注”节。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)">
      <summary>从输入字符串中的指定起始位置开始，在该字符串中搜索正则表达式的第一个匹配项。</summary>
      <returns>一个包含有关匹配的信息的对象。</returns>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="startat">开始搜索的字符位置（从零开始）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小于零，或者大于 <paramref name="input" /> 的长度。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的更多信息，请参见“备注”节。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)">
      <summary>从指定的起始位置开始，在输入字符串中搜索正则表达式的第一个匹配项，并且仅搜索指定数量的字符。</summary>
      <returns>一个包含有关匹配的信息的对象。</returns>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="beginning">输入字符串中开始搜索的最左侧的位置（从零开始）。</param>
      <param name="length">子字符串中包含在搜索中的字符数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="beginning" /> 小于零，或者大于 <paramref name="input" /> 的长度。 - 或 - <paramref name="length" /> 小于零，或者大于 <paramref name="input" /> 的长度。 - 或 - <paramref name="beginning" />+<paramref name="length" />– 1 标识在 <paramref name="input" /> 范围外的一个位置。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的更多信息，请参见“备注”节。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)">
      <summary>在指定的输入字符串中搜索指定的正则表达式的第一个匹配项。</summary>
      <returns>一个包含有关匹配的信息的对象。</returns>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 null。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的更多信息，请参见“备注”节。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>使用指定的匹配选项在输入字符串中搜索指定的正则表达式的第一个匹配项。</summary>
      <returns>一个包含有关匹配的信息的对象。</returns>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="options">枚举值的一个按位组合，这些枚举值提供匹配选项。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的更多信息，请参见“备注”节。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String)">
      <summary>在指定的输入字符串中搜索正则表达式的所有匹配项。</summary>
      <returns>搜索操作找到的 <see cref="T:System.Text.RegularExpressions.Match" /> 对象的集合。 如果未找到任何匹配，则该方法将返回空集合对象。</returns>
      <param name="input">要搜索匹配项的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)">
      <summary>从字符串中的指定起始位置开始，在指定的输入字符串中搜索正则表达式的所有匹配项。</summary>
      <returns>搜索操作找到的 <see cref="T:System.Text.RegularExpressions.Match" /> 对象的集合。 如果未找到任何匹配，则该方法将返回空集合对象。</returns>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="startat">在输入字符串中开始搜索的字符位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小于零，或者大于 <paramref name="input" /> 的长度。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)">
      <summary>在指定的输入字符串中搜索指定的正则表达式的所有匹配项。</summary>
      <returns>搜索操作找到的 <see cref="T:System.Text.RegularExpressions.Match" /> 对象的集合。 如果未找到任何匹配，则该方法将返回空集合对象。</returns>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>使用指定的匹配选项在指定的输入字符串中搜索指定的正则表达式的所有匹配项。</summary>
      <returns>搜索操作找到的 <see cref="T:System.Text.RegularExpressions.Match" /> 对象的集合。 如果未找到任何匹配，则该方法将返回空集合对象。</returns>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="options">枚举值的按位组合，这些枚举值指定用于匹配的选项。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.Options">
      <summary>获取传递给 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数的异常。</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 枚举 的一个或多个成员表示传递至 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数的选项。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)">
      <summary>在指定的输入字符串内，使用指定的替换字符串替换与某个正则表达式模式匹配的所有的字符串。</summary>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。</returns>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="replacement">替换字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="replacement" /> 为 null。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的更多信息，请参见“备注”节。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)">
      <summary>在指定输入字符串内，使用指定替换字符串替换与某个正则表达式模式匹配的字符串（其数目为指定的最大数目）。</summary>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。</returns>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="replacement">替换字符串。</param>
      <param name="count">可进行替换的最大次数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="replacement" /> 为 null。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的更多信息，请参见“备注”节。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>在指定输入子字符串内，使用指定替换字符串替换与某个正则表达式模式匹配的字符串（其数目为指定的最大数目）。</summary>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。</returns>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="replacement">替换字符串。</param>
      <param name="count">可进行替换的最大次数。</param>
      <param name="startat">输入字符串中开始执行搜索的字符位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="replacement" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小于零，或者大于 <paramref name="input" /> 的长度。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的更多信息，请参见“备注”节。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)">
      <summary>在指定的输入字符串内，使用指定的替换字符串替换与指定正则表达式匹配的所有字符串。</summary>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。</returns>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="replacement">替换字符串。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" /> 或 <paramref name="replacement" /> 为 null。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的更多信息，请参见“备注”节。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>在指定的输入字符串内，使用指定的替换字符串替换与指定正则表达式匹配的所有字符串。 指定的选项将修改匹配操作。</summary>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。</returns>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="replacement">替换字符串。</param>
      <param name="options">枚举值的一个按位组合，这些枚举值提供匹配选项。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" /> 或 <paramref name="replacement" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的更多信息，请参见“备注”节。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>在指定的输入字符串内，使用 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托返回的字符串替换与指定正则表达式匹配的所有字符串。</summary>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。</returns>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="evaluator">一个自定义方法，它检查每个匹配项，并返回原始匹配字符串或替换字符串。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" /> 或 <paramref name="evaluator" /> 为 null。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的更多信息，请参见“备注”节。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)">
      <summary>在指定的输入字符串内，使用 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托返回的字符串替换与指定正则表达式匹配的所有字符串。 指定的选项将修改匹配操作。</summary>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。</returns>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="evaluator">一个自定义方法，它检查每个匹配项，并返回原始匹配字符串或替换字符串。</param>
      <param name="options">枚举值的一个按位组合，这些枚举值提供匹配选项。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" /> 或 <paramref name="evaluator" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的更多信息，请参见“备注”节。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>在指定的输入字符串内，使用 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托返回的字符串替换与指定正则表达式匹配的所有字符串。</summary>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。</returns>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="evaluator">一个自定义方法，它检查每个匹配项，并返回原始匹配字符串或替换字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="evaluator" /> 为 null。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的更多信息，请参见“备注”节。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)">
      <summary>在指定的输入字符串内，使用 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托返回的字符串替换与某个正则表达式模式匹配的字符串（其数目为指定的最大数目）。</summary>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。</returns>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="evaluator">一个自定义方法，它检查每个匹配项，并返回原始匹配字符串或替换字符串。</param>
      <param name="count">进行替换的最大次数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="evaluator" /> 为 null。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的更多信息，请参见“备注”节。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)">
      <summary>在指定的输入子字符串内，使用 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托返回的字符串替换与某个正则表达式模式匹配的字符串（其数目为指定的最大数目）。</summary>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。</returns>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="evaluator">一个自定义方法，它检查每个匹配项，并返回原始匹配字符串或替换字符串。</param>
      <param name="count">进行替换的最大次数。</param>
      <param name="startat">输入字符串中开始执行搜索的字符位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="evaluator" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小于零，或者大于 <paramref name="input" /> 的长度。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的更多信息，请参见“备注”节。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.RightToLeft">
      <summary>获取一个值，该值指示正则表达式是否从右向左进行搜索。</summary>
      <returns>如果正则表达式从右向左进行搜索，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String)">
      <summary>在由 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数指定的正则表达式模式所定义的位置，将输入字符串拆分为子字符串数组。</summary>
      <returns>字符串数组。</returns>
      <param name="input">要拆分的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的更多信息，请参见“备注”节。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)">
      <summary>在由 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数中指定的正则表达式定义的位置，将输入字符串拆分为子字符串数组指定的最大次数。</summary>
      <returns>字符串数组。</returns>
      <param name="input">要拆分的字符串。</param>
      <param name="count">可拆分的最大次数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的更多信息，请参见“备注”节。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)">
      <summary>在由 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数中指定的正则表达式定义的位置，将输入字符串拆分为子字符串数组指定的最大次数。 从输入字符串的指定字符位置开始搜索正则表达式模式。</summary>
      <returns>字符串数组。</returns>
      <param name="input">要拆分的字符串。</param>
      <param name="count">可拆分的最大次数。</param>
      <param name="startat">输入字符串中开始搜索的字符位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小于零，或者大于 <paramref name="input" /> 的长度。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的更多信息，请参见“备注”节。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String)">
      <summary>在由正则表达式模式项定义的位置将输入字符串拆分为一个子字符串数组。</summary>
      <returns>字符串数组。</returns>
      <param name="input">要拆分的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 null。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的更多信息，请参见“备注”节。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>在由指定正则表达式模式项定义的位置将输入字符串拆分为一个子字符串数组。 指定的选项将修改匹配操作。</summary>
      <returns>字符串数组。</returns>
      <param name="input">要拆分的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="options">枚举值的一个按位组合，这些枚举值提供匹配选项。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的更多信息，请参见“备注”节。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.ToString">
      <summary>返回传入 Regex 构造函数的正则表达式模式。</summary>
      <returns>传入 Regex 构造函数的 <paramref name="pattern" /> 参数。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Unescape(System.String)">
      <summary>转换输入字符串中的任何转义字符。</summary>
      <returns>包含任何转换为非转义形式的转义字符的字符串。</returns>
      <param name="str">包含要转换的文本的输入字符串。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="str" /> 包括无法识别的转义序列。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 为 null。</exception>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexOptions">
      <summary>提供用于设置正则表达式选项的枚举值。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.CultureInvariant">
      <summary>指定忽略语言中的区域性差异。 有关更多信息，请参见正则表达式选项。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ECMAScript">
      <summary>为表达式启用符合 ECMAScript 的行为。 该值只能与 <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase" />、<see cref="F:System.Text.RegularExpressions.RegexOptions.Multiline" /> 和 <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> 值一起使用。 该值与其他任何值一起使用均将导致异常。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ExplicitCapture">
      <summary>指定唯一有效的捕获是显式命名或编号的 (?&lt;name&gt;…) 形式的组。 这使未命名的圆括号可以充当非捕获组，并且不会使表达式的语法 (?:...) 显得笨拙。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase">
      <summary>指定不区分大小写的匹配。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace">
      <summary>消除模式中的非转义空白并启用由 # 标记的注释。 但是，<see cref="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace" /> 值不会影响或消除字符类中的空白。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Multiline">
      <summary>多行模式。 更改 ^ 和 $ 的含义，使它们分别在任意一行的行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.None">
      <summary>指定不设置任何选项。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.RightToLeft">
      <summary>指定搜索从右向左而不是从左向右进行。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Singleline">
      <summary>指定单行模式。 更改点 (.) 的含义，以使它与每个字符（而不是除 \n 之外的所有字符）匹配。</summary>
    </member>
    <member name="T:System.Threading.Barrier">
      <summary>使多个任务能够采用并行方式依据某种算法在多个阶段中协同工作。</summary>
    </member>
    <member name="M:System.Threading.Barrier.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Threading.Barrier" /> 类的新实例。</summary>
      <param name="participantCount">参与线程的数量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="participantCount" /> 小于 0 或大于 32,767。</exception>
    </member>
    <member name="M:System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})">
      <summary>初始化 <see cref="T:System.Threading.Barrier" /> 类的新实例。</summary>
      <param name="participantCount">参与线程的数量。</param>
      <param name="postPhaseAction">要在每个阶段后执行的 <see cref="T:System.Action`1" />。 可以传递 null（在 Visual Basic 中为 Nothing）以指示不采取任何操作。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="participantCount" /> 小于 0 或大于 32,767。</exception>
    </member>
    <member name="M:System.Threading.Barrier.AddParticipant">
      <summary>通知 <see cref="T:System.Threading.Barrier" />，告知其将会有另一个参与者。</summary>
      <returns>新参与者将首先参与的屏障的阶段编号。</returns>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">添加参与者将导致屏障的参与者计数超过 32,767。 - 或 - 该方法从阶段后操作中调用。</exception>
    </member>
    <member name="M:System.Threading.Barrier.AddParticipants(System.Int32)">
      <summary>通知 <see cref="T:System.Threading.Barrier" />，告知其将会有多个其他参与者。</summary>
      <returns>新参与者将首先参与的屏障的阶段编号。</returns>
      <param name="participantCount">要添加到屏障的其他参与者的数量。</param>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="participantCount" /> 小于 0。 - 或 - 添加 <paramref name="participantCount" /> 参与者将导致屏障的参与者计数超过 32,767。</exception>
      <exception cref="T:System.InvalidOperationException">该方法从阶段后操作中调用。</exception>
    </member>
    <member name="P:System.Threading.Barrier.CurrentPhaseNumber">
      <summary>获取屏障的当前阶段的编号。</summary>
      <returns>返回屏障的当前阶段的编号。</returns>
    </member>
    <member name="M:System.Threading.Barrier.Dispose">
      <summary>释放由 <see cref="T:System.Threading.Barrier" /> 类的当前实例占用的所有资源。</summary>
      <exception cref="T:System.InvalidOperationException">该方法从阶段后操作中调用。</exception>
    </member>
    <member name="M:System.Threading.Barrier.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Threading.Barrier" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">如果为 true，则同时释放托管资源和非托管资源；如果为 false，则仅释放非托管资源。</param>
    </member>
    <member name="P:System.Threading.Barrier.ParticipantCount">
      <summary>获取屏障中参与者的总数。</summary>
      <returns>返回屏障中参与者的总数。</returns>
    </member>
    <member name="P:System.Threading.Barrier.ParticipantsRemaining">
      <summary>获取屏障中尚未在当前阶段发出信号的参与者的数量。</summary>
      <returns>返回屏障中尚未在当前阶段发出信号的参与者的数量。</returns>
    </member>
    <member name="M:System.Threading.Barrier.RemoveParticipant">
      <summary>通知 <see cref="T:System.Threading.Barrier" />，告知其将会减少一个参与者。</summary>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">屏障已经有 0 个参与者。 - 或 - 该方法从阶段后操作中调用。</exception>
    </member>
    <member name="M:System.Threading.Barrier.RemoveParticipants(System.Int32)">
      <summary>通知 <see cref="T:System.Threading.Barrier" />，告知其将会减少一些参与者。</summary>
      <param name="participantCount">要从屏障中移除的其他参与者的数量。</param>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="participantCount" /> 小于 0。</exception>
      <exception cref="T:System.InvalidOperationException">屏障已经有 0 个参与者。 - 或 - 该方法从阶段后操作中调用。  - 或 - 当前的参与者计数小于指定 participantCount</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="participantCount" /> 小于 0。</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait">
      <summary>发出参与者已达到屏障并等待所有其他参与者也达到屏障。</summary>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">该方法从阶段后操作中调用，当前屏障具有 0 个参与者，或该屏障被注册为参与者的更多线程终止。</exception>
      <exception cref="T:System.Threading.BarrierPostPhaseException">在所有参与线程调用了 SignalAndWait 之后，如果关卡的后期阶段操作中引发了异常，该异常将包装在 BarrierPostPhaseException 中并在所有参与线程上引发。</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.Int32)">
      <summary>发出参与者已达到屏障的信号，并等待所有其他参与者也达到屏障，同时使用 32 位带符号整数测量超时。</summary>
      <returns>如果所有参与者都已在指定时间内达到屏障，则为 true；否则为 false。</returns>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.InvalidOperationException">该方法从阶段后操作中调用，当前屏障具有 0 个参与者，或该屏障被注册为参与者的更多线程终止。</exception>
      <exception cref="T:System.Threading.BarrierPostPhaseException">在所有参与线程调用了 SignalAndWait 之后，如果关卡的后期阶段操作中引发了异常，该异常将包装在 BarrierPostPhaseException 中并在所有参与线程上引发。</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)">
      <summary>发出参与者已达到屏障的信号，并等待所有其他参与者也达到屏障，使用 32 位带符号整数测量超时，同时观察取消标记。</summary>
      <returns>如果所有参与者都已在指定时间内达到屏障，则为 true；否则为 false。</returns>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <param name="cancellationToken">要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.InvalidOperationException">该方法从阶段后操作中调用，当前屏障具有 0 个参与者，或该屏障被注册为参与者的更多线程终止。</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)">
      <summary>发出参与者已达到屏障的信号，并等待所有其他参与者达到屏障，同时观察取消标记。</summary>
      <param name="cancellationToken">要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">该方法从阶段后操作中调用，当前屏障具有 0 个参与者，或该屏障被注册为参与者的更多线程终止。</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan)">
      <summary>发出参与者已达到屏障的信号，并等待所有其他参与者也达到屏障，同时使用 <see cref="T:System.TimeSpan" /> 对象测量时间间隔。</summary>
      <returns>如果所有其他参与者已达到屏障，则为 true；否则为 false。</returns>
      <param name="timeout">表示等待的毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是 -1 毫秒之外的负数，表示无限超时或者超时大于 32,767。</exception>
      <exception cref="T:System.InvalidOperationException">该方法从阶段后操作中调用，当前屏障具有 0 个参与者，或该屏障被注册为参与者的更多线程终止。</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>发出参与者已达到屏障的信号，并等待所有其他参与者也达到屏障，使用 <see cref="T:System.TimeSpan" /> 对象测量时间间隔，同时观察取消标记。</summary>
      <returns>如果所有其他参与者已达到屏障，则为 true；否则为 false。</returns>
      <param name="timeout">表示等待的毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <param name="cancellationToken">要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是一个非 -1 毫秒的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.InvalidOperationException">该方法从阶段后操作中调用，当前屏障具有 0 个参与者，或该屏障被注册为参与者的更多线程终止。</exception>
    </member>
    <member name="T:System.Threading.BarrierPostPhaseException">
      <summary>
        <see cref="T:System.Threading.Barrier" /> 阶段后操作失败时引发的异常。</summary>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor">
      <summary>使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.Threading.BarrierPostPhaseException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.Exception)">
      <summary>使用指定的内部异常初始化 <see cref="T:System.Threading.BarrierPostPhaseException" /> 类的新实例。</summary>
      <param name="innerException">导致当前异常的异常。</param>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.Threading.BarrierPostPhaseException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Threading.BarrierPostPhaseException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Threading.Semaphore">
      <summary>限制可同时访问某一资源或资源池的线程数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Threading.Semaphore" /> 类的新实例，并指定最大并发入口数，还可以选择保留某些入口。</summary>
      <param name="initialCount">可以同时授予的信号量的初始请求数。</param>
      <param name="maximumCount">可以同时授予的信号量的最大请求数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="initialCount" /> 大于 <paramref name="maximumCount" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumCount" /> 小于 1。 - 或 - <paramref name="initialCount" /> 小于 0。</exception>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String)">
      <summary>初始化 <see cref="T:System.Threading.Semaphore" /> 类的新实例，并指定最大并发入口数，还可以选择为调用线程保留某些入口，以及选择指定系统信号量对象的名称。</summary>
      <param name="initialCount">可以同时授予的信号量的初始请求数。</param>
      <param name="maximumCount">可以同时授予的信号量的最大请求数。</param>
      <param name="name">命名系统信号量对象的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="initialCount" /> 大于 <paramref name="maximumCount" />。 - 或 - <paramref name="name" /> 的长度超过 260 个字符。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumCount" /> 小于 1。 - 或 - <paramref name="initialCount" /> 小于 0。</exception>
      <exception cref="T:System.IO.IOException">发生了一个 Win32 错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">命名信号量存在并具有访问控制安全性，但用户不具有 <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />。</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">无法创建命名的信号量，可能是因为存在同名但类型不同的等待句柄。</exception>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)">
      <summary>初始化 <see cref="T:System.Threading.Semaphore" /> 类的新实例，并指定最大并发入口数，还可以选择为调用线程保留某些入口，选择指定系统信号量对象的名称，以及指定一个变量来接收指示是否创建了新系统信号量的值。</summary>
      <param name="initialCount">可以同时满足的信号量的初始请求数。</param>
      <param name="maximumCount">可以同时满足的信号量的最大请求数。</param>
      <param name="name">命名系统信号量对象的名称。</param>
      <param name="createdNew">在此方法返回时，如果创建了本地信号量（即，如果 <paramref name="name" /> 为 null 或空字符串）或指定的命名系统信号量，则包含 true；如果指定的命名系统信号量已存在，则为 false。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="initialCount" /> 大于 <paramref name="maximumCount" />。 - 或 - <paramref name="name" /> 的长度超过 260 个字符。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumCount" /> 小于 1。 - 或 - <paramref name="initialCount" /> 小于 0。</exception>
      <exception cref="T:System.IO.IOException">发生了一个 Win32 错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">命名信号量存在并具有访问控制安全性，但用户不具有 <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />。</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">无法创建命名的信号量，可能是因为存在同名但类型不同的等待句柄。</exception>
    </member>
    <member name="M:System.Threading.Semaphore.OpenExisting(System.String)">
      <summary>打开指定名称为信号量（如果已经存在）。</summary>
      <returns>一个对象，表示已命名的系统信号量。</returns>
      <param name="name">要打开的系统信号量的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 是空字符串。 - 或 - <paramref name="name" /> 的长度超过 260 个字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">命名的信号量不存在。</exception>
      <exception cref="T:System.IO.IOException">发生了一个 Win32 错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">已命名的信号量存在，但用户不具备使用它所需的安全访问权。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Threading.Semaphore.Release">
      <summary>退出信号量并返回前一个计数。</summary>
      <returns>调用 <see cref="Overload:System.Threading.Semaphore.Release" /> 方法前信号量的计数。</returns>
      <exception cref="T:System.Threading.SemaphoreFullException">信号量计数已是最大值。</exception>
      <exception cref="T:System.IO.IOException">发生已命名信号量的 Win32 错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">当前信号量表示一个已命名的系统信号量，但用户不具备 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />。 - 或 - 当前信号量表示一个已命名的系统信号量，但它未用 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> 打开。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Semaphore.Release(System.Int32)">
      <summary>以指定的次数退出信号量并返回前一个计数。</summary>
      <returns>调用 <see cref="Overload:System.Threading.Semaphore.Release" /> 方法前信号量的计数。</returns>
      <param name="releaseCount">退出信号量的次数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="releaseCount" /> 小于 1。</exception>
      <exception cref="T:System.Threading.SemaphoreFullException">信号量计数已是最大值。</exception>
      <exception cref="T:System.IO.IOException">发生已命名信号量的 Win32 错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">当前信号量表示一个已命名的系统信号量，但用户不具备 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> 权限。 - 或 - 当前信号量表示一个已命名的系统信号量，但它不是以 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> 权限打开的。</exception>
      <filterpriority>1</filterpriority>
    </member>
  </members>
</doc>