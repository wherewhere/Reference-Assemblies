<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ServiceModel</name>
  </assembly>
  <members>
    <member name="T:System.ServiceModel.ActionNotSupportedException">
      <summary>当与所调用操作相关的动作和服务器中的任何操作动作都不匹配时，通常会在客户端上引发此异常。</summary>
    </member>
    <member name="M:System.ServiceModel.ActionNotSupportedException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.ServiceModel.ActionNotSupportedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.ServiceModel.ActionNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对导致此异常的内部异常的引用来初始化 <see cref="T:System.ServiceModel.ActionNotSupportedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致引发当前异常的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.ServiceModel.BasicHttpBinding">
      <summary>表示一个绑定，Windows Communication Foundation (WCF) 服务可以使用此绑定配置和公开这样的终结点：这些终结点能够与基于 ASMX 的 Web 服务和客户端以及符合 WS-I Basic Profile 1.1 标准的其他服务进行通信。</summary>
    </member>
    <member name="M:System.ServiceModel.BasicHttpBinding.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.BasicHttpBinding" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.BasicHttpBinding.#ctor(System.ServiceModel.BasicHttpSecurityMode)">
      <summary>通过绑定所使用的指定安全类型初始化 <see cref="T:System.ServiceModel.BasicHttpBinding" /> 类的新实例。</summary>
      <param name="securityMode">
        <see cref="T:System.ServiceModel.BasicHttpSecurityMode" /> 的值，该值指定 SOAP 消息和客户端使用的安全类型。</param>
    </member>
    <member name="M:System.ServiceModel.BasicHttpBinding.CreateBindingElements">
      <summary>创建并返回一个包含在当前绑定中的已排序的绑定元素集合。</summary>
      <returns>包含已排序的绑定元素堆栈的 <see cref="T:System.ServiceModel.Channels.BindingElementCollection" />，这些绑定元素由 <see cref="T:System.ServiceModel.BasicHttpBinding" /> 描述。</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.EnvelopeVersion">
      <summary>获取此绑定处理的消息将要使用的 SOAP 版本。</summary>
      <returns>与此绑定一起使用的 <see cref="T:System.ServiceModel.EnvelopeVersion" /> 的值。 该值始终为 SOAP 1.1。</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.MaxBufferSize">
      <summary>获取或设置缓冲区的最大大小（以字节为单位），该缓冲区用于接收来自通道的消息。</summary>
      <returns>指定为采用此绑定配置的终结点处理消息时，存储消息的缓冲区的最大大小（以字节为单位）。 默认值为 65,536 个字节。</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.MaxReceivedMessageSize">
      <summary>获取或设置配置了此绑定配置的通道上可以接收的消息的最大大小（以字节为单位）。</summary>
      <returns>绑定可处理的最大消息大小（以字节为单位）。 默认值为 65,536 个字节。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零。</exception>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.Scheme">
      <summary>获取用此绑定配置的通道和侦听器的 URI 传输方案。</summary>
      <returns>如果在传输绑定元素中将安全模式设置为 <see cref="F:System.ServiceModel.BasicHttpSecurityMode.Transport" /> 或 <see cref="F:System.ServiceModel.BasicHttpSecurityMode.TransportWithMessageCredential" />，则为“https”；否则为“http”。</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.Security">
      <summary>获取与此绑定一起使用的安全类型。</summary>
      <returns>与此绑定一起使用的 <see cref="T:System.ServiceModel.BasicHttpSecurity" />。 默认值为 <see cref="F:System.ServiceModel.BasicHttpSecurityMode.None" />。</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.TextEncoding">
      <summary>获取或设置用于消息文本的字符编码。</summary>
      <returns>用于指示所使用的字符编码的 <see cref="T:System.Text.Encoding" />。 默认值为 <see cref="T:System.Text.UTF8Encoding" />。</returns>
    </member>
    <member name="T:System.ServiceModel.BasicHttpMessageCredentialType">
      <summary>枚举在 BasicHttpBinding 绑定中启用安全时客户端可用来进行身份验证的凭据类型。</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpMessageCredentialType.UserName">
      <summary>指示使用用户名凭据对客户端进行身份验证。</summary>
    </member>
    <member name="T:System.ServiceModel.BasicHttpSecurity">
      <summary>配置 basicHttpBinding 绑定的安全设置。</summary>
    </member>
    <member name="P:System.ServiceModel.BasicHttpSecurity.Mode">
      <summary>获取或设置 basicHttpBinding 绑定的安全模式。</summary>
      <returns>
        <see cref="T:System.ServiceModel.BasicHttpSecurityMode" /> 枚举中的一个值。 此属性的默认值为 <see cref="F:System.ServiceModel.BasicHttpSecurityMode.None" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">此值不是 <see cref="T:System.ServiceModel.BasicHttpSecurityMode" /> 的合法值。</exception>
    </member>
    <member name="T:System.ServiceModel.BasicHttpSecurityMode">
      <summary>指定可与系统提供的 <see cref="T:System.ServiceModel.BasicHttpBinding" /> 一起使用的安全类型。</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpSecurityMode.None">
      <summary>SOAP 消息在传输过程中并不安全。 这是默认行为。</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpSecurityMode.Transport">
      <summary>使用 HTTPS 提供安全性。 此服务必须使用 SSL 证书进行配置。 SOAP 消息是用 HTTPS 作为一个整体进行保护的。 客户端使用服务的 SSL 证书对服务进行身份验证。 通过 <see cref="P:System.ServiceModel.HttpTransportSecurity.ClientCredentialType" /> 可对客户端身份验证进行控制。</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpSecurityMode.TransportCredentialOnly">
      <summary>此模式并不提供消息的完整性和保密性， 而是仅提供基于 HTTP 的客户端身份验证。 使用此模式时一定要小心。 在通过其他方式（如 IPSec）提供传输安全并且 Windows Communication Foundation (WCF) 基础结构只提供客户端身份验证的环境中，应该使用此模式。</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpSecurityMode.TransportWithMessageCredential">
      <summary>完整性、保密性和服务器身份验证均由 HTTPS 提供。 此服务必须使用证书进行配置。 客户端身份验证采用 SOAP 消息安全方式提供。 如果要使用用户名或证书凭据对用户进行身份验证，并且存在用于保护消息传输的现有 HTTPS 部署，则适用此模式。</summary>
    </member>
    <member name="T:System.ServiceModel.ChannelFactory">
      <summary>创建和管理客户端用来将消息发送到服务终结点的通道。</summary>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.ChannelFactory" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.ApplyConfiguration(System.String)">
      <summary>使用由指定配置文件提供的行为和通道工厂服务终结点中的那些行为来初始化通道工厂。</summary>
      <param name="configurationName">配置文件的名称。</param>
      <exception cref="T:System.InvalidOperationException">通道工厂的服务终结点为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.CreateDescription">
      <summary>在派生类中实现时，创建与通道工厂关联的服务终结点说明。</summary>
      <returns>与通道工厂关联的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</returns>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.CreateFactory">
      <summary>为工厂的当前终结点生成通道工厂。</summary>
      <returns>当前工厂的终结点的 <see cref="T:System.ServiceModel.Channels.IChannelFactory" />。</returns>
      <exception cref="T:System.InvalidOperationException">工厂通道所连接的服务终结点为 null，或者终结点的绑定为 null 或是缺少具有指定配置名称的元素。</exception>
    </member>
    <member name="P:System.ServiceModel.ChannelFactory.Credentials">
      <summary>获取客户端在通过由工厂产生的通道与服务终结点进行通信时使用的凭据。</summary>
      <returns>如果已为工厂配置凭据或终结点不为 null 且处于已创建或正在打开通信状态，则为客户端使用的 <see cref="T:System.ServiceModel.Description.ClientCredentials" />；否则为 null。</returns>
    </member>
    <member name="P:System.ServiceModel.ChannelFactory.DefaultCloseTimeout">
      <summary>获取为完成关闭操作提供的默认时间间隔。</summary>
      <returns>默认的 <see cref="T:System.Timespan" />，指定在超时前可用于完成关闭操作的时间。</returns>
    </member>
    <member name="P:System.ServiceModel.ChannelFactory.DefaultOpenTimeout">
      <summary>获取为完成打开操作提供的默认时间间隔。</summary>
      <returns>默认的 <see cref="T:System.Timespan" />，指定在超时前可用于完成打开操作的时间。</returns>
    </member>
    <member name="P:System.ServiceModel.ChannelFactory.Endpoint">
      <summary>获取由工厂产生的通道所要连接的服务终结点。</summary>
      <returns>由工厂产生的通道所要连接的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</returns>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.GetProperty``1">
      <summary>从通道堆栈的适当层返回所请求的类型化对象，如果不存在，则返回 null。</summary>
      <returns>如果存在，则为所请求的类型化对象 <paramref name="T" />，如果不存在，则为 null。</returns>
      <typeparam name="T">方法正在查询的类型化对象。</typeparam>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>使用指定的绑定和地址初始化通道工厂的服务终结点。</summary>
      <param name="binding">用以初始化通道工厂的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="address">用以初始化通道工厂的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.String,System.ServiceModel.EndpointAddress)">
      <summary>使用指定的地址和配置初始化通道工厂的服务终结点。</summary>
      <param name="configurationName">用于初始化通道工厂的配置文件名称。</param>
      <param name="address">用以初始化通道工厂的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnAbort">
      <summary>终止当前通道工厂的内部通道工厂。</summary>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>对当前通道工厂（具有关联的状态对象）的内部通道工厂，开始一个异步关闭操作。</summary>
      <returns>引用异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前可用于完成操作的时间。</param>
      <param name="callback">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，包含与异步操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>对当前通道工厂（具有关联的状态对象）的内部通道工厂，开始一个异步打开操作。</summary>
      <returns>引用异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前可用于完成操作的时间。</param>
      <param name="callback">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，包含与异步操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnClose(System.TimeSpan)">
      <summary>使用完成操作的指定超时对内部通道工厂调用 close。</summary>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前可用于完成操作的时间。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnEndClose(System.IAsyncResult)">
      <summary>对当前通道工厂的内部通道工厂，完成一个异步关闭操作。</summary>
      <param name="result">通过调用 <see cref="M:System.ServiceModel.ChannelFactory.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnEndOpen(System.IAsyncResult)">
      <summary>对当前通道工厂的内部通道工厂，完成一个异步打开操作。</summary>
      <param name="result">通过调用 <see cref="M:System.ServiceModel.ChannelFactory.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnOpen(System.TimeSpan)">
      <summary>使用完成操作的指定超时对当前通道工厂的内部通道工厂调用 open。</summary>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成打开操作的时间。</param>
      <exception cref="T:System.InvalidOperationException">当前通道的内部通道为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnOpened">
      <summary>为通道工厂初始化 <see cref="T:System.ServiceModel.Description.ClientCredentials" /> 对象的一个只读副本。</summary>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnOpening">
      <summary>为当前的通道生成内部通道工厂。</summary>
      <exception cref="T:System.InvalidOperationException">通道工厂的内部通道工厂为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.System#IDisposable#Dispose">
      <summary>关闭当前的通道工厂。</summary>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1">
      <summary>提供基实现，用于创建可调用服务的 Windows Communication Foundation (WCF) 客户端对象。</summary>
      <typeparam name="TChannel">用于连接服务的通道。</typeparam>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor">
      <summary>使用应用程序配置文件中的默认目标终结点初始化 <see cref="T:System.ServiceModel.ClientBase`1" /> 类的新实例。</summary>
      <exception cref="T:System.InvalidOperationException">配置文件中没有默认的终结点信息，或者文件中有多个终结点，或者没有配置文件。</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>使用指定的绑定和目标地址初始化 <see cref="T:System.ServiceModel.ClientBase`1" /> 类的新实例。</summary>
      <param name="binding">用于调用服务的绑定。</param>
      <param name="remoteAddress">服务终结点的地址。</param>
      <exception cref="T:System.ArgumentNullException">绑定为 null。</exception>
      <exception cref="T:System.ArgumentNullException">绑定为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.String)">
      <summary>使用应用程序配置文件中由 <paramref name="endpointConfigurationName" /> 指定的配置信息来初始化 <see cref="T:System.ServiceModel.ClientBase`1" /> 类的新实例。</summary>
      <param name="endpointConfigurationName">应用程序配置文件中的终结点的名称。</param>
      <exception cref="T:System.ArgumentNullException">指定的终结点信息为 null。</exception>
      <exception cref="T:System.InvalidOperationException">无法找到终结点或者终结点协定无效。</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.String,System.ServiceModel.EndpointAddress)">
      <summary>使用指定的目标地址和终结点信息初始化 <see cref="T:System.ServiceModel.ClientBase`1" /> 类的新实例。</summary>
      <param name="endpointConfigurationName">应用程序配置文件中的终结点的名称。</param>
      <param name="remoteAddress">服务的地址。</param>
      <exception cref="T:System.ArgumentNullException">终结点为 null。</exception>
      <exception cref="T:System.ArgumentNullException">终结点为 null。</exception>
      <exception cref="T:System.InvalidOperationException">无法找到终结点或者终结点协定无效。</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.ServiceModel.ClientBase`1" /> 类的新实例。</summary>
      <param name="endpointConfigurationName">应用程序配置文件中的终结点的名称。</param>
      <param name="remoteAddress">服务的地址。</param>
      <exception cref="T:System.ArgumentNullException">终结点为 null。</exception>
      <exception cref="T:System.ArgumentNullException">终结点为 null。</exception>
      <exception cref="T:System.InvalidOperationException">无法找到终结点或者终结点协定无效。</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.Abort">
      <summary>使 <see cref="T:System.ServiceModel.ClientBase`1" /> 对象立即从其当前状态转换到关闭状态。</summary>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.Channel">
      <summary>获取用于将消息发送到不同配置的服务终结点的内部通道。</summary>
      <returns>指定类型的通道。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ClientCredentials">
      <summary>获取用于调用操作的客户端凭据。</summary>
      <returns>返回一个 <see cref="T:System.ServiceModel.Description.ClientCredentials" />，它表示客户端所提供的身份证明。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.CreateChannel">
      <summary>返回新的服务通道。</summary>
      <returns>一个类型为服务协定的通道。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.Endpoint">
      <summary>获取 WCF 客户端可连接的服务的目标终结点。</summary>
      <returns>目标终结点。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.GetDefaultValueForInitialization``1">
      <summary>复制 C# 中默认关键字的行为。</summary>
      <returns>如果 T 为引用类型，则返回 null；如果 T 为数值类型，则返回零。</returns>
      <typeparam name="T">由关键字标识为引用或数字的类型。</typeparam>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.InnerChannel">
      <summary>获取基础 <see cref="T:System.ServiceModel.IClientChannel" /> 实现。</summary>
      <returns>WCF 客户端对象的客户端通道。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase{`0}.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase{`0}.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)">
      <summary>为实现基于事件的异步模式提供支持。 有关以下内容的更多信息该模式的更多信息，请参见基于事件的异步模式概述。</summary>
      <param name="beginOperationDelegate">一个用于调用异步操作的委托。</param>
      <param name="inValues">异步调用的输入值。</param>
      <param name="endOperationDelegate">一个用于在异步调用完成后将其结束的委托。</param>
      <param name="operationCompletedCallback">一个在异步方法完成时调用的由客户端提供的回调。 系统会将该回调传递给 <see cref="T:System.ServiceModel.ClientBase`1.BeginOperationDelegate" />。</param>
      <param name="userState">要与异步调用关联的 <paramref name="userState" /> 对象。</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.State">
      <summary>获取 <see cref="T:System.ServiceModel.ClientBase`1" /> 对象的当前状态。</summary>
      <returns>对象的 <see cref="T:System.ServiceModel.CommunicationState" /> 的值。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.AsyncCallback,System.Object)">
      <summary>开始一个关闭 <see cref="T:System.ServiceModel.ClientBase`1" /> 的异步操作。</summary>
      <returns>引用异步关闭操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">完成时接收回调的方法。</param>
      <param name="state">状态数据。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个在指定超时内关闭 <see cref="T:System.ServiceModel.ClientBase`1" /> 的异步操作。</summary>
      <returns>引用异步开始关闭操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">必须在其中完成调用的时间段。</param>
      <param name="callback">完成操作时调用的回调对象。</param>
      <param name="state">状态数据。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.AsyncCallback,System.Object)">
      <summary>开始一个打开 <see cref="T:System.ServiceModel.ClientBase`1" /> 对象的异步操作。</summary>
      <returns>引用异步打开操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">完成时接收回调的方法。</param>
      <param name="state">状态数据。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个在指定时间间隔内打开 <see cref="T:System.ServiceModel.ClientBase`1" /> 对象的异步操作。</summary>
      <returns>引用异步打开操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">必须在其中完成调用的时间段。</param>
      <param name="callback">完成时接收回调的方法。</param>
      <param name="state">状态数据。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Close">
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Close(System.TimeSpan)">
      <summary>使 <see cref="T:System.ServiceModel.ClientBase`1" /> 对象从其当前状态转换到关闭状态。</summary>
      <param name="timeout">必须在其中完成调用的时间段。</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Closed">
      <summary>当 <see cref="T:System.ServiceModel.ClientBase`1" /> 对象已经从其当前状态转换到已关闭状态时，调用事件处理程序。</summary>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Closing">
      <summary>，当 <see cref="T:System.ServiceModel.ClientBase`1" /> 对象从其当前状态转换到已关闭状态时，调用事件处理程序。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#EndClose(System.IAsyncResult)">
      <summary>完成一个关闭 <see cref="T:System.ServiceModel.ClientBase`1" /> 对象的异步操作。</summary>
      <param name="result">用于完成异步关闭操作的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#EndOpen(System.IAsyncResult)">
      <summary>完成一个打开 <see cref="T:System.ServiceModel.ClientBase`1" /> 对象的异步操作。</summary>
      <param name="result">用于完成异步结束打开操作的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Faulted">
      <summary>在对 <see cref="T:System.ServiceModel.ClientBase`1" /> 对象执行操作过程中，发生错误时，调用事件处理程序。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Open">
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Open(System.TimeSpan)">
      <summary>使 <see cref="T:System.ServiceModel.ClientBase`1" /> 对象在指定的时间间隔内从已创建状态转换到已打开状态。</summary>
      <param name="timeout">必须在其中完成调用的时间段。</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Opened">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1" /> 对象从已创建状态转换为已打开状态时调用的事件处理程序。</summary>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Opening">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1" /> 对象从已创建状态转换为已打开状态时调用的事件处理程序。</summary>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1.BeginOperationDelegate`0">
    </member>
    <member name="T:System.ServiceModel.ClientBase`1.ChannelBase`1">
      <summary>表示一般 ChannelBase 类。</summary>
      <typeparam name="T">泛型类。</typeparam>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.#ctor(System.ServiceModel.ClientBase{`1})">
      <summary>从现有类的实例初始化 <see cref="T:System.ServiceModel.ClientBase`1.ChannelBase`1" /> 类的新实例。</summary>
      <param name="client">用于初始化类的新实例的对象。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
      <summary>按名称启动对指定方法的异步调用。</summary>
      <returns>引用已调用的异步方法的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="methodName">要异步调用的方法的名称。</param>
      <param name="args">调用的方法的参数数组。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">状态对象。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.EndInvoke(System.String,System.Object[],System.IAsyncResult)">
      <summary>按指定方法的名称完成异步调用。</summary>
      <returns>由调用方法的 <see cref="T:System.Object" /> 输出。</returns>
      <param name="methodName">异步调用的方法的名称。</param>
      <param name="args">调用的方法的参数数组。</param>
      <param name="result">调用返回的结果。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#IDisposable#Dispose">
      <summary>通过释放或重置与通道相关的非托管资源来指定应用程序定义的任务。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IChannel#GetProperty``1">
      <summary>从通道堆栈的适当层返回所请求的类型化对象（如果存在）。</summary>
      <returns>如果存在，则返回所请求的类型化对象 T，如果不存在，则返回 null。</returns>
      <typeparam name="TProperty">方法正在查询的类型对象。</typeparam>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#BeginSend(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作，向输出通道的目标传输一条消息。</summary>
      <returns>引用异步消息传输的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">正在输出通道上发送的消息。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，包含与异步发送操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#BeginSend(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作，在指定时间间隔内向输出通道的目标传输消息。</summary>
      <returns>引用异步发送操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">正在输出通道上发送的消息。</param>
      <param name="timeout">指定在超时前必须完成发送操作的时间的时间跨度。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托，接收异步操作完成发送的通知。</param>
      <param name="state">一个由应用程序指定的对象，包含与异步发送操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#EndSend(System.IAsyncResult)">
      <summary>完成一个异步操作，向输出通道的目标传输消息。</summary>
      <param name="result">调用返回的结果。</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#RemoteAddress">
      <summary>获取在输出通道上发出的消息将要到达的服务的目标。</summary>
      <returns>输出通道发送的消息将要到达的服务的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Send(System.ServiceModel.Channels.Message)">
      <summary>向输出通道的目标传输一条消息。</summary>
      <param name="message">正在输出通道上发送的消息。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Send(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>在指定时间间隔内在当前输出通道上发送一条消息。</summary>
      <param name="message">正在输出通道上发送的消息。</param>
      <param name="timeout">指定在超时前必须完成发送操作的时间的时间跨度。</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Via">
      <summary>获取 URI，该 URI 包含输出通道发送消息的目标传输地址。</summary>
      <returns>
        <see cref="T:System.Uri" />，包含输出通道发送消息的目标传输地址。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#BeginRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作，将请求消息传送到请求-回复消息交换的回复端。</summary>
      <returns>引用异步消息传输的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">待传输的请求消息。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托，它接收传送请求消息的异步操作的完成通知。</param>
      <param name="state">一个由应用程序指定的对象，它包含与传送请求消息的异步操作关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#BeginRequest(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作，在指定时间间隔内将请求消息传送到请求-回复消息交换的回复端。</summary>
      <returns>引用异步消息传输的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">待传输的请求消息。</param>
      <param name="timeout">指定时间间隔的时间跨度，在此时间间隔内必须收到响应。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托，它接收传送请求消息的异步操作的完成通知。</param>
      <param name="state">一个由应用程序指定的对象，它包含与传送请求消息的异步操作关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#EndRequest(System.IAsyncResult)">
      <summary>完成异步操作以向传送的请求返回基于消息的响应。</summary>
      <returns>以响应该请求接收的消息 。</returns>
      <param name="result">操作的结果。</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#RemoteAddress">
      <summary>获取请求通道将消息发送到的远程地址。</summary>
      <returns>请求通道将消息发送到的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Request(System.ServiceModel.Channels.Message)">
      <summary>发送一个基于消息的请求，并返回相关的基于消息的响应。</summary>
      <returns>以响应该请求接收的消息 。</returns>
      <param name="message">待传输的请求消息。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Request(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>发送一个基于消息的请求，并在指定的时间间隔内返回相关的基于消息的响应。</summary>
      <returns>以响应该请求接收的消息 。</returns>
      <param name="message">待传输的请求消息。</param>
      <param name="timeout">指定时间间隔的时间跨度，在此时间间隔内必须收到响应。</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Via">
      <summary>获取发送请求的目标传输地址。</summary>
      <returns>
        <see cref="T:System.Uri" />，包含要将消息发送至的传输地址。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#AllowInitializationUI">
      <summary>获取或设置一个值，该值指示客户端是否允许初始化 UI。</summary>
      <returns>如果客户渠道允许初始化 UR，则为 True；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#BeginDisplayInitializationUI(System.AsyncCallback,System.Object)">
      <summary>要开始使用用户接口获取凭据信息的异步调用。</summary>
      <returns>处理完成时用于回调的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">此方法完成时调用的方法。</param>
      <param name="state">有关通道状态的信息。</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#DidInteractiveInitialization">
      <summary>获取一个值，该值指示是否对用户界面执行调用以获取凭据信息。</summary>
      <returns>如果对用户接口执行调用以获取凭据信息，则 True；否则，为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#DisplayInitializationUI">
      <summary>指定用以获取凭据信息的用户接口的调用。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#EndDisplayInitializationUI(System.IAsyncResult)">
      <summary>在对 BeginDisplayInitializationUI 的调用完成时调用。</summary>
      <param name="result">操作的结果。</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#UnknownMessageReceived">
      <summary>当 ClientBase 对象接收一条未知消息时调用的事件处理程序。</summary>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#Via">
      <summary>获取 URI，该 URI 包含客户端信道上发送的消息将要到达的传输地址。</summary>
      <returns>包含客户端信道上发送的消息将要到达的传输地址的 URI。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Abort">
      <summary>使通信对象立即从其当前状态转换到关闭状态。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作以关闭通信对象。</summary>
      <returns>引用异步关闭操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作以在指定超时内关闭通信对象。</summary>
      <returns>引用异步关闭操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">指定在超时前必须完成发送操作的时间的时间跨度。</param>
      <param name="callback">接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作以打开通信对象。</summary>
      <returns>引用异步打开操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">接收异步打开操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步打开操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作以在指定时间间隔内打开通信对象。</summary>
      <returns>引用异步打开操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">指定在超时前必须完成发送操作的时间的时间跨度。</param>
      <param name="callback">接收异步打开操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步打开操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Close">
      <summary>使通信对象从其当前状态转换到关闭状态。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Close(System.TimeSpan)">
      <summary>使通信对象从其当前状态转换到关闭状态。</summary>
      <param name="timeout">指定在超时前必须完成发送操作的时间的时间跨度。</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Closed">
      <summary>ClientBase 对象已从其当前状态转换到已关闭状态时调用的事件处理程序。</summary>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Closing">
      <summary>ClientBase 对象从其当前状态转换到已关闭状态时调用的事件处理程序。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#EndClose(System.IAsyncResult)">
      <summary>完成一个异步操作以关闭通信对象。</summary>
      <param name="result">通过调用返回到 BeginClose() 方法的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#EndOpen(System.IAsyncResult)">
      <summary>完成一个异步操作以打开通信对象。</summary>
      <param name="result">通过调用返回到 BeginOpen() 方法的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Faulted">
      <summary>在对 ClientBase 对象执行操作过程中发生错误时调用的事件处理程序。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Open">
      <summary>使通信对象从已创建状态转换到已打开状态。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Open(System.TimeSpan)">
      <summary>使通信对象在指定时间间隔内从已创建状态转换到已打开状态。</summary>
      <param name="timeout">指定在超时前必须完成发送操作的时间的时间跨度。</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Opened">
      <summary>ClientBase 对象已从已创建状态转换为已打开状态时调用的事件处理程序。</summary>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Opening">
      <summary>ClientBase 对象从已创建状态转换为已打开状态时调用的事件处理程序。</summary>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#State">
      <summary>获取面向通信的对象的当前状态。</summary>
      <returns>对象的 <see cref="T:System.ServiceModel.CommunicationState" /> 的值。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#AllowOutputBatching">
      <summary>获取或设置指示是否允许传出消息的批处理的值；如果不允许，则为 false。</summary>
      <returns>如果允许对传出消息进行批处理，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#InputSession">
      <summary>获取通道的输入会话。</summary>
      <returns>适用于通道的输入会话。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#LocalAddress">
      <summary>获取通道的本地终结点。</summary>
      <returns>通道的本地终结点。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#OperationTimeout">
      <summary>获取或设置一个时间段，操作必须在此时间段内完成否则将引发异常。</summary>
      <returns>指定操作必须在此期间内完成的时间段的时间跨度。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#OutputSession">
      <summary>获取与通道关联的输出会话（如果有）。</summary>
      <returns>如果存在输入会话，则为 <see cref="T:System.ServiceModel.Channels.IOutputSession" /> 实现；否则为 null。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#RemoteAddress">
      <summary>获取与通道关联的远程地址。</summary>
      <returns>通道的远程 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#SessionId">
      <summary>获取当前会话的标识符（如果有）。</summary>
      <returns>当前会话的标识符（如果有）。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IExtensibleObject{T}#Extensions">
      <summary>获取此可扩展对象的扩展对象集合。</summary>
      <returns>扩展对象的该 <see cref="T:System.ServiceModel.IExtensionCollection`1" />。</returns>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1.EndOperationDelegate`0">
    </member>
    <member name="T:System.ServiceModel.ClientBase`1.InvokeAsyncCompletedEventArgs`0">
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.InvokeAsyncCompletedEventArgs`0.Results">
    </member>
    <member name="T:System.ServiceModel.CommunicationException">
      <summary>表示服务或客户端应用程序中的通信错误。</summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.CommunicationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationException.#ctor(System.String)">
      <summary>使用指定的消息初始化 <see cref="T:System.ServiceModel.CommunicationException" /> 类的新实例。</summary>
      <param name="message">错误条件的说明。</param>
    </member>
    <member name="M:System.ServiceModel.CommunicationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的消息和内部异常初始化 <see cref="T:System.ServiceModel.CommunicationException" /> 类的新实例。</summary>
      <param name="message">错误条件的说明。</param>
      <param name="innerException">要使用的内部异常。</param>
    </member>
    <member name="T:System.ServiceModel.CommunicationObjectAbortedException">
      <summary>调用已经中止的 <see cref="T:System.ServiceModel.ICommunicationObject" /> 对象时引发的异常。</summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor(System.String)">
      <summary>用指定消息初始化 <see cref="T:System.ServiceModel.CommunicationObjectAbortedException" /> 类的新实例。</summary>
      <param name="message">异常中传达的消息。</param>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的消息和内部异常初始化 <see cref="T:System.ServiceModel.CommunicationObjectAbortedException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="innerException">内部异常。</param>
    </member>
    <member name="T:System.ServiceModel.CommunicationObjectFaultedException">
      <summary>调用出错通信对象时引发的异常。</summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor(System.String)">
      <summary>使用指定的消息初始化 <see cref="T:System.ServiceModel.CommunicationObjectFaultedException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。</param>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的消息和内部异常初始化 <see cref="T:System.ServiceModel.CommunicationObjectFaultedException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="innerException">内部异常。</param>
    </member>
    <member name="T:System.ServiceModel.CommunicationState">
      <summary>定义 <see cref="T:System.ServiceModel.ICommunicationObject" /> 可存在的状态。</summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Closed">
      <summary>指示通信对象已关闭，且不再可用。</summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Closing">
      <summary>指示通信对象正转换到 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态。</summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Created">
      <summary>指示通信对象已实例化且可配置，但尚未打开或无法使用。</summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Faulted">
      <summary>指示通信对象发生错误，无法恢复且不再可用。</summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Opened">
      <summary>指示通信对象目前已打开，且随时可供使用。</summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Opening">
      <summary>指示通信对象正从 <see cref="F:System.ServiceModel.CommunicationState.Created" /> 状态转换到 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状态。</summary>
    </member>
    <member name="T:System.ServiceModel.DataContractFormatAttribute">
      <summary>指示 Windows Communication Foundation (WCF) 基础结构使用 <see cref="T:System.Runtime.Serialization.DataContractSerializer" />。</summary>
    </member>
    <member name="M:System.ServiceModel.DataContractFormatAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.DataContractFormatAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.DataContractFormatAttribute.Style">
      <summary>获取或设置序列化数据的 SOAP 样式。</summary>
      <returns>
        <see cref="T:System.ServiceModel.OperationFormatStyle" /> 值之一。 默认值为 <see cref="F:System.ServiceModel.OperationFormatStyle.Document" />。</returns>
    </member>
    <member name="T:System.ServiceModel.EndpointAddress">
      <summary>提供客户端用来与服务终结点进行通信的唯一网络地址。</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.#ctor(System.String)">
      <summary>使用指定的 URI 字符串初始化 <see cref="T:System.ServiceModel.EndpointAddress" /> 类的新实例。</summary>
      <param name="uri">标识终结点的 URI。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.#ctor(System.Uri,System.ServiceModel.Channels.AddressHeader[])">
      <summary>使用指定的 URI 和标头初始化 <see cref="T:System.ServiceModel.EndpointAddress" /> 类的新实例。</summary>
      <param name="uri">标识终结点位置的 <see cref="T:System.Uri" />。</param>
      <param name="addressHeaders">类型为 <see cref="T:System.ServiceModel.Channels.AddressHeader" /> 的 <see cref="T:System.Array" />，包含用于与终结点交互的地址信息。</param>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.AnonymousUri">
      <summary>获取匿名 URI 的与版本无关的表示形式。</summary>
      <returns>一个值为 http://schemas.microsoft.com/2005/12/ServiceModel/Addressing/Anonymous 的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.ApplyTo(System.ServiceModel.Channels.Message)">
      <summary>将终结点地址的 URI 和属性分配给指定消息的标头值。</summary>
      <param name="message">要分配其标头值的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.Equals(System.Object)">
      <summary>返回一个值，该值指示指定的对象与当前终结点地址是否相等。</summary>
      <returns>如果指定的对象与当前地址相等，则为 true；否则为 false。</returns>
      <param name="obj">要与当前终结点地址进行比较的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.GetHashCode">
      <summary>提供当前终结点地址的唯一哈希代码。</summary>
      <returns>当前终结点地址的唯一哈希代码。</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.Headers">
      <summary>获取生成器可以创建的终结点的地址标头的集合。</summary>
      <returns>包含终结点地址信息的 <see cref="T:System.ServiceModel.Channels.AddressHeaderCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.IsAnonymous">
      <summary>获取一个值，该值指示终结点是否为“匿名”。</summary>
      <returns>如果终结点是 <see cref="P:System.ServiceModel.EndpointAddress.AnonymousUri" />，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.IsNone">
      <summary>获取一个值，该值指示终结点 URI 是否为 <see cref="P:System.ServiceModel.EndpointAddress.NoneUri" />。</summary>
      <returns>如果终结点 URI 是 <see cref="P:System.ServiceModel.EndpointAddress.NoneUri" />，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.NoneUri">
      <summary>获取一个与版本无关的 URI，用作不得向其发送消息的终结点地址。</summary>
      <returns>一个值为 http://schemas.microsoft.com/2005/12/ServiceModel/Addressing/None 的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.op_Equality(System.ServiceModel.EndpointAddress,System.ServiceModel.EndpointAddress)">
      <summary>返回一个值，该值指示指定的终结点地址是否不相等。</summary>
      <returns>如果终结点地址相等，则为 true；否则为 false。</returns>
      <param name="address1">要比较的 <see cref="T:System.ServiceModel.EndpointAddress" /> 对象之一。</param>
      <param name="address2">要比较的 <see cref="T:System.ServiceModel.EndpointAddress" /> 对象之一。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.op_Inequality(System.ServiceModel.EndpointAddress,System.ServiceModel.EndpointAddress)">
      <summary>返回一个值，该值指示指定的终结点地址是否不相等。</summary>
      <returns>如果终结点地址不相等，则为 true；否则为 false。</returns>
      <param name="address1">要比较的 <see cref="T:System.ServiceModel.EndpointAddress" /> 对象之一。</param>
      <param name="address2">要比较的 <see cref="T:System.ServiceModel.EndpointAddress" /> 对象之一。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.ReadFrom(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryReader)">
      <summary>从指定的 XML 读取器读取指定地址版本的终结点地址。</summary>
      <returns>从 XML 字典读取器读取的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
      <param name="addressingVersion">当前终结点地址的 <see cref="T:System.ServiceModel.Channels.AddressingVersion" />。</param>
      <param name="reader">从中获取终结点地址的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.ToString">
      <summary>返回终结点地址中包含的 URI 的规范字符串表示形式。</summary>
      <returns>标识终结点的 URI。</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.Uri">
      <summary>获取终结点的 URI。</summary>
      <returns>终结点的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.WriteContentsTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryWriter)">
      <summary>将节点的所有子节点保存到指定的 XML 字典编写器中。</summary>
      <param name="addressingVersion">当前终结点地址的 <see cref="T:System.ServiceModel.Channels.AddressingVersion" />。</param>
      <param name="writer">终结点地址所保存到的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 或 <paramref name="addressingVersion" /> 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.EndpointAddressBuilder">
      <summary>一个生成具有特定属性值的新的（不可变）终结点地址的工厂。</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointAddressBuilder.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.EndpointAddressBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointAddressBuilder.#ctor(System.ServiceModel.EndpointAddress)">
      <summary>从现有的终结点地址初始化 <see cref="T:System.ServiceModel.EndpointAddressBuilder" /> 类的新实例。</summary>
      <param name="address">
        <see cref="T:System.ServiceModel.EndpointAddress" />，其属性值用于初始化此实例的属性值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.EndpointAddressBuilder.Headers">
      <summary>获取生成器可以创建的终结点的地址标头列表。</summary>
      <returns>类型为 <see cref="T:System.ServiceModel.Channels.AddressHeader" /> 的 <see cref="T:System.Collections.Generic.List`1" />，包含生成器可以创建的终结点的地址标头。</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddressBuilder.ToEndpointAddress">
      <summary>创建新的终结点地址，该地址使用当前终结点地址生成器的属性值进行初始化。</summary>
      <returns>
        <see cref="T:System.ServiceModel.EndpointAddress" />，其属性使用当前终结点地址生成器的值进行初始化。</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddressBuilder.Uri">
      <summary>获取或设置生成器可以创建的终结点的 URI。</summary>
      <returns>指定终结点地址的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="T:System.ServiceModel.EndpointNotFoundException">
      <summary>无法找到或访问远程终结点时引发的异常。</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointNotFoundException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.ServiceModel.EndpointNotFoundException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息以及导致当前异常的内部异常来初始化 <see cref="T:System.ServiceModel.EndpointNotFoundException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致引发当前异常的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.ServiceModel.EnvelopeVersion">
      <summary>包含与 SOAP 版本相关的信息，该版本与消息及其交换关联。</summary>
    </member>
    <member name="M:System.ServiceModel.EnvelopeVersion.GetUltimateDestinationActorValues">
      <summary>获取一个字符串，该字符串包含与最终目标的当前消息版本关联的 SOAP 角色的 URI 名称。</summary>
      <returns>如果使用的是 SOAP1.1，则为空字符串；如果使用的是 SOAP1.2，则为包含 http://www.w3.org/2003/05/soap-envelope/role/ultimateReceiver 的字符串。</returns>
    </member>
    <member name="P:System.ServiceModel.EnvelopeVersion.NextDestinationActorValue">
      <summary>获取一个字符串，该字符串包含与下一目标的当前消息版本关联的 SOAP 角色的 URI 名称。</summary>
      <returns>如果使用的是 SOAP1.1，则为包含 http://schemas.xmlsoap.org/soap/actor/next 的字符串；如果使用的是 SOAP1.2，则为包含 http://www.w3.org/2003/05/soap-envelope/role/next 的字符串；如果没有消息版本，则为空字符串。</returns>
    </member>
    <member name="P:System.ServiceModel.EnvelopeVersion.None">
      <summary>获取不使用 SOAP 版本的信封版本。</summary>
      <returns>不使用 SOAP 格式的信封版本。</returns>
    </member>
    <member name="P:System.ServiceModel.EnvelopeVersion.Soap11">
      <summary>获取 SOAP1.1 信封版本。</summary>
      <returns>SOAP1.1 <see cref="T:System.ServiceModel.EnvelopeVersion" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.EnvelopeVersion.Soap12">
      <summary>获取 SOAP1.2 信封版本。</summary>
      <returns>SOAP1.2 <see cref="T:System.ServiceModel.EnvelopeVersion" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.EnvelopeVersion.ToString">
      <summary>获取表示当前信封版本的字符串。</summary>
      <returns>当前版本的信封的字符串表示形式。</returns>
    </member>
    <member name="T:System.ServiceModel.ExceptionDetail">
      <summary>表示错误详细信息。</summary>
    </member>
    <member name="M:System.ServiceModel.ExceptionDetail.#ctor(System.Exception)">
      <summary>初始化异常中的 <see cref="T:System.ServiceModel.ExceptionDetail" /> 类的新实例。</summary>
      <param name="exception">要序列化为 <see cref="T:System.ServiceModel.ExceptionDetail" /> 对象的异常。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 参数为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.ExceptionDetail.InnerException">
      <summary>获取或设置表示内部异常的 <see cref="T:System.ServiceModel.ExceptionDetail" /> 对象。</summary>
      <returns>内部异常信息。</returns>
    </member>
    <member name="P:System.ServiceModel.ExceptionDetail.Message">
      <summary>获取或设置传递到构造函数的异常中的消息。</summary>
      <returns>异常消息。</returns>
    </member>
    <member name="P:System.ServiceModel.ExceptionDetail.StackTrace">
      <summary>获取或设置传递到构造函数的异常中的堆栈跟踪信息。</summary>
      <returns>异常的堆栈跟踪。</returns>
    </member>
    <member name="M:System.ServiceModel.ExceptionDetail.ToString">
      <summary>返回传递到构造函数的异常的详细信息。</summary>
      <returns>异常的消息和堆栈跟踪。</returns>
    </member>
    <member name="P:System.ServiceModel.ExceptionDetail.Type">
      <summary>获取或设置传递到构造函数的异常的类型字符串。</summary>
      <returns>传递到构造函数的异常的类型字符串。</returns>
    </member>
    <member name="T:System.ServiceModel.FaultCode">
      <summary>表示 SOAP 错误代码。</summary>
    </member>
    <member name="M:System.ServiceModel.FaultCode.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ServiceModel.FaultCode" /> 类的新实例。</summary>
      <param name="name">错误代码的名称。</param>
    </member>
    <member name="M:System.ServiceModel.FaultCode.#ctor(System.String,System.ServiceModel.FaultCode)">
      <summary>初始化 <see cref="T:System.ServiceModel.FaultCode" /> 类的新实例。</summary>
      <param name="name">错误代码的名称。</param>
      <param name="subCode">错误子代码。</param>
    </member>
    <member name="M:System.ServiceModel.FaultCode.#ctor(System.String,System.String)">
      <summary>用指定的名称和命名空间初始化 <see cref="T:System.ServiceModel.FaultCode" /> 类的新实例。</summary>
      <param name="name">错误代码的本地名称。</param>
      <param name="ns">错误代码的命名空间名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 或 <paramref name="ns" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="name" /> 是空字符串。</exception>
    </member>
    <member name="M:System.ServiceModel.FaultCode.#ctor(System.String,System.String,System.ServiceModel.FaultCode)">
      <summary>用指定的名称、命名空间和错误子代码初始化 <see cref="T:System.ServiceModel.FaultCode" /> 类的新实例。</summary>
      <param name="name">错误代码的本地名称。</param>
      <param name="ns">错误代码的命名空间名称。</param>
      <param name="subCode">一个表示错误子代码的 <see cref="T:System.ServiceModel.FaultCode" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 或 <paramref name="ns" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="name" /> 是空字符串。</exception>
    </member>
    <member name="M:System.ServiceModel.FaultCode.CreateSenderFaultCode(System.ServiceModel.FaultCode)">
      <summary>使用指定的子代码创建发送方错误代码。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.FaultCode" /> 对象，具有 <see cref="P:System.ServiceModel.FaultCode.SubCode" /> 属性中创建的 SOAP 错误子代码。</returns>
      <param name="subCode">一个表示错误子代码的 <see cref="T:System.ServiceModel.FaultCode" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subCode" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.FaultCode.IsPredefinedFault">
      <summary>获取一个值，该值指示错误为 SOAP 1.1 错误还是 SOAP 1.2 错误。</summary>
      <returns>如果错误为 SOAP 1.1 错误或 SOAP 1.2 错误，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultCode.IsReceiverFault">
      <summary>获取一个值，该值指示错误为 SOAP 1.1 服务器错误还是 SOAP 1.2 接收方错误。</summary>
      <returns>如果错误为 SOAP 1.1 服务器错误或 SOAP 1.2 接收方错误，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultCode.IsSenderFault">
      <summary>获取一个值，该值指示错误为 SOAP 1.1 客户端错误还是 SOAP 1.2 发送方错误。</summary>
      <returns>如果错误为 SOAP 1.1 客户端错误或 SOAP 1.2 发送方错误，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultCode.Name">
      <summary>获取错误代码的本地名称。</summary>
      <returns>错误代码的本地名称。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultCode.Namespace">
      <summary>获取错误代码的命名空间。</summary>
      <returns>命名空间名称的统一资源标识符 (URI)。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultCode.SubCode">
      <summary>获取错误子代码。</summary>
      <returns>一个表示错误子代码的 <see cref="T:System.ServiceModel.FaultCode" /> 对象。</returns>
    </member>
    <member name="T:System.ServiceModel.FaultContractAttribute">
      <summary>指定服务操作遇到处理错误时返回的一个或多个 SOAP 错误。</summary>
    </member>
    <member name="M:System.ServiceModel.FaultContractAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.ServiceModel.FaultContractAttribute" /> 类的新实例。</summary>
      <param name="detailType">包含调用方错误信息的可序列化类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="detailType" /> 参数为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.FaultContractAttribute.Action">
      <summary>获取或设置已指定作为操作协定一部分的 SOAP 错误消息的操作。</summary>
      <returns>SOAP 错误消息的操作值。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultContractAttribute.DetailType">
      <summary>获取包含错误信息的可序列化对象的类型。</summary>
      <returns>表示可序列化错误类的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultContractAttribute.Name">
      <summary>获取或设置 Web 服务描述语言 (WSDL) 中的错误消息的名称。</summary>
      <returns>错误消息名称。 默认名称是用作错误详细信息类型的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultContractAttribute.Namespace">
      <summary>获取或设置 SOAP 错误的命名空间。</summary>
      <returns>SOAP 错误的命名空间。</returns>
    </member>
    <member name="T:System.ServiceModel.FaultException">
      <summary>表示 SOAP 错误。</summary>
    </member>
    <member name="M:System.ServiceModel.FaultException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.FaultException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.FaultException.#ctor(System.ServiceModel.Channels.MessageFault,System.String)">
      <summary>使用指定的消息错误值和提供的操作字符串初始化 <see cref="T:System.ServiceModel.FaultException" /> 类的新实例。</summary>
      <param name="fault">包含要使用的默认 SOAP 错误值的消息错误。</param>
      <param name="action">SOAP 错误的操作。</param>
    </member>
    <member name="M:System.ServiceModel.FaultException.#ctor(System.ServiceModel.FaultReason,System.ServiceModel.FaultCode,System.String)">
      <summary>使用指定的原因、错误代码和操作值初始化 <see cref="T:System.ServiceModel.FaultException" /> 类的新实例。</summary>
      <param name="reason">SOAP 错误的原因。</param>
      <param name="code">SOAP 错误的错误代码。</param>
      <param name="action">SOAP 错误的操作值。</param>
    </member>
    <member name="P:System.ServiceModel.FaultException.Action">
      <summary>获取错误消息的 SOAP 操作值。</summary>
      <returns>用于错误消息的 SOAP 操作值。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultException.Code">
      <summary>获取 SOAP 错误的错误代码。</summary>
      <returns>SOAP 错误的错误代码。</returns>
    </member>
    <member name="M:System.ServiceModel.FaultException.CreateFault(System.ServiceModel.Channels.MessageFault,System.String,System.Type[])">
      <summary>从指定的消息错误、操作和详细信息类型的数组返回一个 <see cref="T:System.ServiceModel.Channels.FaultException" /> 对象。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.FaultException" /> 对象，您可以引发该对象以指示已收到 SOAP 错误消息。</returns>
      <param name="messageFault">包含默认 SOAP 错误信息的消息错误。</param>
      <param name="action">错误操作值。</param>
      <param name="faultDetailTypes">包含错误详细信息的类型的数组。</param>
    </member>
    <member name="M:System.ServiceModel.FaultException.CreateFault(System.ServiceModel.Channels.MessageFault,System.Type[])">
      <summary>从指定的消息错误和详细信息类型的数组返回 <see cref="T:System.ServiceModel.Channels.FaultException" /> 对象。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.FaultException" /> 对象，您可以引发该对象以指示已收到 SOAP 错误消息。</returns>
      <param name="messageFault">包含默认 SOAP 错误信息的消息错误。</param>
      <param name="faultDetailTypes">包含错误详细信息的类型的数组。</param>
    </member>
    <member name="M:System.ServiceModel.FaultException.CreateMessageFault">
      <summary>返回 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 对象。</summary>
      <returns>SOAP 错误的内存中表示形式，该错误可以传递到 <see cref="Overload:System.ServiceModel.Channels.Message.CreateMessage" /> 以创建包含错误的消息。 对于从错误消息中产生的 <see cref="T:System.ServiceModel.FaultException" /> 对象，此 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 对象为收到的错误。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultException.Message">
      <summary>获取异常消息。</summary>
      <returns>异常消息。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultException.Reason">
      <summary>获取 SOAP 错误的 <see cref="T:System.ServiceModel.FaultReason" />。</summary>
      <returns>SOAP 错误的原因。</returns>
    </member>
    <member name="T:System.ServiceModel.FaultException`1">
      <summary>用于在客户端应用程序中捕获通过协定方式指定的 SOAP 错误。</summary>
      <typeparam name="TDetail">可序列化错误详细信息类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.FaultException`1.#ctor(`0,System.ServiceModel.FaultReason,System.ServiceModel.FaultCode,System.String)">
      <summary>初始化 <see cref="T:System.ServiceModel.FaultException`1" /> 类的新实例，该类使用指定的详细信息对象以及 SOAP 错误原因、代码和操作值。</summary>
      <param name="detail">用作 SOAP 错误详细信息的对象。</param>
      <param name="reason">SOAP 错误的原因。</param>
      <param name="code">SOAP 错误的错误代码。</param>
      <param name="action">SOAP 错误的操作。</param>
    </member>
    <member name="P:System.ServiceModel.FaultException`1.Detail">
      <summary>获取包含错误条件详细信息的对象。</summary>
      <returns>
        <see cref="T:System.ServiceModel.FaultException`1" /> 对象的类型参数的详细信息对象。</returns>
    </member>
    <member name="M:System.ServiceModel.FaultException`1.ToString">
      <summary>返回 <see cref="T:System.ServiceModel.FaultException`1" /> 对象的字符串。</summary>
      <returns>SOAP 错误的字符串。</returns>
    </member>
    <member name="T:System.ServiceModel.FaultReason">
      <summary>提供 SOAP 错误的文本说明。</summary>
    </member>
    <member name="M:System.ServiceModel.FaultReason.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.FaultReasonText})">
      <summary>使用指定的错误翻译列表初始化 <see cref="T:System.ServiceModel.FaultReason" /> 类的新实例。</summary>
      <param name="translations">
        <see cref="T:System.ServiceModel.FaultReasonText" /> 对象的一个列表；每个对象以一种特定语言描述错误。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="translations" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="translations" /> 为空或者一个或多个项为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.FaultReason.#ctor(System.ServiceModel.FaultReasonText)">
      <summary>使用以特定语言描述错误的指定文本元素初始化 <see cref="T:System.ServiceModel.FaultReason" /> 类的新实例。</summary>
      <param name="translation">
        <see cref="T:System.ServiceModel.FaultReasonText" /> 对象的一个数组，这些对象与使用不同语言的错误说明相对应。</param>
    </member>
    <member name="M:System.ServiceModel.FaultReason.#ctor(System.String)">
      <summary>使用指定的错误说明初始化 <see cref="T:System.ServiceModel.FaultReason" /> 类的新实例。</summary>
      <param name="text">错误发生原因的说明。</param>
    </member>
    <member name="M:System.ServiceModel.FaultReason.GetMatchingTranslation">
      <summary>获取使用当前线程所用语言的错误说明。</summary>
      <returns>一个包含错误说明的 <see cref="T:System.ServiceModel.FaultReasonText" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.FaultReason.GetMatchingTranslation(System.Globalization.CultureInfo)">
      <summary>获取使用指定语言的错误说明。</summary>
      <returns>使用指定语言的错误文本。</returns>
      <param name="cultureInfo">一个 <see cref="T:System.Globalization.CultureInfo" /> 对象，指定错误说明的语言。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Globalization.CultureInfo" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.FaultReason.ToString">
      <summary>以字符串形式返回错误原因。</summary>
      <returns>一个包含错误原因的字符串。</returns>
    </member>
    <member name="T:System.ServiceModel.FaultReasonText">
      <summary>表示 SOAP 错误原因的文本。</summary>
    </member>
    <member name="M:System.ServiceModel.FaultReasonText.#ctor(System.String)">
      <summary>初始化使用指定错误文本的 <see cref="T:System.ServiceModel.FaultReasonText" /> 类的新实例。</summary>
      <param name="text">表示 SOAP 错误原因的文本。</param>
    </member>
    <member name="M:System.ServiceModel.FaultReasonText.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.ServiceModel.FaultReasonText" /> 类的新实例。</summary>
      <param name="text">错误原因的文本。</param>
      <param name="xmlLang">错误的语言。</param>
    </member>
    <member name="M:System.ServiceModel.FaultReasonText.Matches(System.Globalization.CultureInfo)">
      <summary>返回一个值，该值指示说明的语言是否与提供的 <see cref="T:System.Globalization.CultureInfo" /> 对象匹配。</summary>
      <returns>如果指定的 <see cref="T:System.Globalization.CultureInfo" /> 匹配，则为 true；否则为 false。</returns>
      <param name="cultureInfo">要与说明语言比较的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</param>
    </member>
    <member name="P:System.ServiceModel.FaultReasonText.Text">
      <summary>获取 SOAP 错误原因的文本。</summary>
      <returns>SOAP 错误原因的文本。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultReasonText.XmlLang">
      <summary>获取 SOAP 错误原因的语言。</summary>
      <returns>SOAP 错误原因的语言。</returns>
    </member>
    <member name="T:System.ServiceModel.IClientChannel">
      <summary>定义出站请求的行为和客户端应用程序使用的请求/答复通道。</summary>
    </member>
    <member name="P:System.ServiceModel.IClientChannel.AllowInitializationUI">
      <summary>获取或设置一个值，该值指示 <see cref="M:System.ServiceModel.IClientChannel.DisplayInitializationUI" /> 是要尝试调用 <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.InteractiveChannelInitializers" /> 属性中的 <see cref="T:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer" /> 对象还是要在该集合不为空时引发对象。</summary>
      <returns>如果 Windows Communication Foundation (WCF) 可以调用交互式通道初始值设定项，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)">
      <summary>要开始使用用户接口获取凭据信息的异步调用。</summary>
      <returns>处理完成时用于回调的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">此方法完成时调用的方法。</param>
      <param name="state">有关通道状态的信息。</param>
    </member>
    <member name="P:System.ServiceModel.IClientChannel.DidInteractiveInitialization">
      <summary>获取一个值，该值指示是否对用户接口执行调用以获取凭据信息。</summary>
      <returns>如果调用了 <see cref="M:System.ServiceModel.IClientChannel.DisplayInitializationUI" /> 方法（或 <see cref="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" /> 和 <see cref="M:System.ServiceModel.IClientChannel.EndDisplayInitializationUI(System.IAsyncResult)" /> 方法），则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.IClientChannel.DisplayInitializationUI">
      <summary>用以获取凭据信息的用户接口的调用。</summary>
    </member>
    <member name="M:System.ServiceModel.IClientChannel.EndDisplayInitializationUI(System.IAsyncResult)">
      <summary>完成对 <see cref="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" /> 的调用后调用。</summary>
      <param name="result">
        <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="E:System.ServiceModel.IClientChannel.UnknownMessageReceived">
      <summary>这是保留事件。</summary>
    </member>
    <member name="P:System.ServiceModel.IClientChannel.Via">
      <summary>获取 URI，该 URI 包含客户端信道上发送的消息将要到达的传输地址。</summary>
      <returns>包含客户端信道上发送的消息将要到达的传输地址的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="T:System.ServiceModel.ICommunicationObject">
      <summary>为系统中所有面向通信的对象（包括通道、通道管理器、工厂、侦听器以及调度程序和服务主机）定义基本状态机的协定。</summary>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Abort">
      <summary>使通信对象立即从其当前状态转换到关闭状态。</summary>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作以关闭通信对象。</summary>
      <returns>引用异步关闭操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">对处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态的对象调用了 <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" />。</exception>
      <exception cref="T:System.TimeoutException">在 <see cref="T:System.ServiceModel.ICommunicationObject" /> 能够正常关闭之前所经过的默认超时。</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作以在指定超时内关闭通信对象。</summary>
      <returns>引用异步关闭操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成发送操作的时间。</param>
      <param name="callback">接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">对处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态的对象调用了 <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" />。</exception>
      <exception cref="T:System.TimeoutException">在 <see cref="T:System.ServiceModel.ICommunicationObject" /> 能够正常关闭之前所经过的指定超时。</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作以打开通信对象。</summary>
      <returns>引用异步打开操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">接收异步打开操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步打开操作相关联的状态信息。</param>
      <exception cref="T:System.ServiceModel.CommunicationException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> 无法打开并且已进入 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态。</exception>
      <exception cref="T:System.TimeoutException">在 <see cref="T:System.ServiceModel.ICommunicationObject" />（已经进入 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态）能够进入 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状态之前所经过的默认打开超时。</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作以在指定时间间隔内打开通信对象。</summary>
      <returns>引用异步打开操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成发送操作的时间。</param>
      <param name="callback">接收异步打开操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步打开操作相关联的状态信息。</param>
      <exception cref="T:System.ServiceModel.CommunicationException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> 无法打开并且已进入 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态。</exception>
      <exception cref="T:System.TimeoutException">在 <see cref="T:System.ServiceModel.ICommunicationObject" />（已经进入 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态）能够进入 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状态之前所经过的指定超时。</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Close">
      <summary>使通信对象从其当前状态转换到关闭状态。</summary>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">对处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态的对象调用了 <see cref="M:System.ServiceModel.ICommunicationObject.Close" />。</exception>
      <exception cref="T:System.TimeoutException">在 <see cref="T:System.ServiceModel.ICommunicationObject" /> 能够正常关闭之前所经过的默认关闭超时。</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
      <summary>使通信对象从其当前状态转换到关闭状态。</summary>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成发送操作的时间。</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">对处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态的对象调用了 <see cref="M:System.ServiceModel.ICommunicationObject.Close" />。</exception>
      <exception cref="T:System.TimeoutException">在 <see cref="T:System.ServiceModel.ICommunicationObject" /> 能够正常关闭之前所经过的超时。</exception>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Closed">
      <summary>当通信对象完成从正在关闭状态转换到已关闭状态时发生。</summary>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Closing">
      <summary>当通信对象首次进入正在关闭状态时发生。</summary>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)">
      <summary>完成一个异步操作以关闭通信对象。</summary>
      <param name="result">通过调用 <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">对处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态的对象调用了 <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" />。</exception>
      <exception cref="T:System.TimeoutException">在 <see cref="T:System.ServiceModel.ICommunicationObject" /> 能够正常关闭之前所经过的超时。</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)">
      <summary>完成一个异步操作以打开通信对象。</summary>
      <param name="result">通过调用 <see cref="M:System.ServiceModel.ICommunicationObject.BeginOpen" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
      <exception cref="T:System.ServiceModel.CommunicationException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> 无法打开并且已进入 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态。</exception>
      <exception cref="T:System.TimeoutException">在 <see cref="T:System.ServiceModel.ICommunicationObject" />（已经进入 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态）能够进入 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状态之前所经过的超时。</exception>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Faulted">
      <summary>当通信对象首次进入出错状态时发生。</summary>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Open">
      <summary>使通信对象从已创建状态转换到已打开状态。</summary>
      <exception cref="T:System.ServiceModel.CommunicationException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> 无法打开并且已进入 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态。</exception>
      <exception cref="T:System.TimeoutException">在 <see cref="T:System.ServiceModel.ICommunicationObject" />（已经进入 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态）能够进入 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状态之前所经过的默认打开超时。</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
      <summary>使通信对象在指定时间间隔内从已创建状态转换到已打开状态。</summary>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成发送操作的时间。</param>
      <exception cref="T:System.ServiceModel.CommunicationException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> 无法打开并且已进入 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态。</exception>
      <exception cref="T:System.TimeoutException">在 <see cref="T:System.ServiceModel.ICommunicationObject" />（已经进入 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态）能够进入 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状态之前所经过的指定超时。</exception>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Opened">
      <summary>当通信对象完成从正在打开状态转换到已打开状态时发生。</summary>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Opening">
      <summary>当通信对象首次进入正在打开状态时发生。</summary>
    </member>
    <member name="P:System.ServiceModel.ICommunicationObject.State">
      <summary>获取面向通信的对象的当前状态。</summary>
      <returns>对象的 <see cref="T:System.ServiceModel.CommunicationState" /> 的值。</returns>
    </member>
    <member name="T:System.ServiceModel.IContextChannel">
      <summary>定义通道的上下文控件接口。</summary>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.AllowOutputBatching">
      <summary>获取或设置一个值，该值指示 Windows Communication Foundation (WCF) 在给出消息以进行传输之前存储一组消息。</summary>
      <returns>如果允许对传出消息进行批处理，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.InputSession">
      <summary>获取通道的输入会话。</summary>
      <returns>通道的 <see cref="T:System.ServiceModel.Channels.IInputSession" />。</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.LocalAddress">
      <summary>获取通道的本地终结点。</summary>
      <returns>通道的本地 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.OperationTimeout">
      <summary>获取或设置一个时间段，操作必须在此时间段内完成否则将引发异常。</summary>
      <returns>
        <see cref="T:System.TimeSpan" />，指定操作必须在此期间内完成的时间段。</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.OutputSession">
      <summary>获取与通道关联的输出会话（如果有）。</summary>
      <returns>如果存在输入会话，则为 <see cref="T:System.ServiceModel.Channels.IOutputSession" /> 实现；否则为 null。</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.RemoteAddress">
      <summary>获取与通道关联的远程地址。</summary>
      <returns>通道的远程 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.SessionId">
      <summary>返回当前会话的标识符（如果有）。</summary>
      <returns>当前会话的标识符（如果有）。</returns>
    </member>
    <member name="T:System.ServiceModel.IDefaultCommunicationTimeouts">
      <summary>定义用于指定通道、通道管理器（如通道侦听器和通道工厂）和服务主机所使用的通信超时的接口。</summary>
    </member>
    <member name="P:System.ServiceModel.IDefaultCommunicationTimeouts.CloseTimeout">
      <summary>获取 close 方法（由通信对象调用）在超时之前的时间间隔。</summary>
      <returns>指定在 close 方法超时之前要等待的时间间隔的 <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.IDefaultCommunicationTimeouts.OpenTimeout">
      <summary>获取 open 方法（由通信对象调用）在超时之前的时间间隔。</summary>
      <returns>指定在 open 方法超时之前要等待的时间间隔的 <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.IDefaultCommunicationTimeouts.ReceiveTimeout">
      <summary>获取 receive 方法（由通信对象调用）在超时之前的时间间隔。</summary>
      <returns>指定在 receive 方法超时之前要等待的时间间隔的 <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.IDefaultCommunicationTimeouts.SendTimeout">
      <summary>获取 send 方法（由通信对象调用）在超时之前的时间间隔。</summary>
      <returns>指定在 send 方法超时之前要等待的时间间隔的 <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="T:System.ServiceModel.IExtensibleObject`1">
      <summary>使对象可以参与自定义行为，例如注册事件或监视状态转换等。</summary>
      <typeparam name="T">扩展类的类型。</typeparam>
    </member>
    <member name="P:System.ServiceModel.IExtensibleObject`1.Extensions">
      <summary>获取此可扩展对象的扩展对象集合。</summary>
      <returns>扩展对象的 <see cref="T:System.ServiceModel.IExtensionCollection`1" />。</returns>
    </member>
    <member name="T:System.ServiceModel.IExtension`1">
      <summary>使对象可以通过聚合扩展另一个对象。</summary>
      <typeparam name="T">参与自定义行为的对象。</typeparam>
    </member>
    <member name="M:System.ServiceModel.IExtension`1.Attach(`0)">
      <summary>使扩展对象可以查找它聚合的时间。 当扩展添加到 <see cref="P:System.ServiceModel.IExtensibleObject`1.Extensions" /> 属性中时调用。</summary>
      <param name="owner">聚合此扩展的可扩展对象。</param>
    </member>
    <member name="M:System.ServiceModel.IExtension`1.Detach(`0)">
      <summary>使对象可以查找它不再聚合的时间。 当从 <see cref="P:System.ServiceModel.IExtensibleObject`1.Extensions" /> 属性中移除扩展时调用。</summary>
      <param name="owner">聚合此扩展的可扩展对象。</param>
    </member>
    <member name="T:System.ServiceModel.IExtensionCollection`1">
      <summary>允许按照其类型检索 <see cref="T:System.ServiceModel.IExtension`1" /> 的 <see cref="T:System.ServiceModel.IExtension`1" /> 对象集合。</summary>
      <typeparam name="T">扩展对象的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.IExtensionCollection`1.Find``1">
      <summary>查找集合中的指定扩展对象。</summary>
      <returns>查找到的扩展对象。</returns>
      <typeparam name="E">扩展对象的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.IExtensionCollection`1.FindAll``1">
      <summary>查找集合中由 <paramref name="E" /> 指定的所有扩展对象。</summary>
      <returns>集合中实现此指定类型的所有扩展对象的集合。</returns>
      <typeparam name="E">扩展对象的类型。</typeparam>
    </member>
    <member name="T:System.ServiceModel.InvalidMessageContractException">
      <summary>表示无效的消息协定。</summary>
    </member>
    <member name="M:System.ServiceModel.InvalidMessageContractException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.InvalidMessageContractException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.InvalidMessageContractException.#ctor(System.String)">
      <summary>使用指定的消息初始化 <see cref="T:System.ServiceModel.InvalidMessageContractException" /> 类的新实例。</summary>
      <param name="message">异常的错误信息。</param>
    </member>
    <member name="M:System.ServiceModel.InvalidMessageContractException.#ctor(System.String,System.Exception)">
      <summary>初始化使用指定消息和内部异常的 <see cref="T:System.ServiceModel.InvalidMessageContractException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="innerException">内部异常。</param>
    </member>
    <member name="T:System.ServiceModel.MessageBodyMemberAttribute">
      <summary>指定将成员序列化为 SOAP 正文中的元素。</summary>
    </member>
    <member name="M:System.ServiceModel.MessageBodyMemberAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.MessageBodyMemberAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.MessageBodyMemberAttribute.Order">
      <summary>获取和设置一个值，该值指示将成员序列化到 SOAP 正文中的位置。</summary>
      <returns>SOAP 正文中元素的位置。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">传入属性 setter 的值为负整数。</exception>
    </member>
    <member name="T:System.ServiceModel.MessageContractAttribute">
      <summary>定义与 SOAP 消息相对应的强类型类。</summary>
    </member>
    <member name="M:System.ServiceModel.MessageContractAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.MessageContractAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.MessageContractAttribute.WrapperName">
      <summary>获取或设置消息正文的包装元素名称。</summary>
      <returns>消息正文中的包装元素的名称。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">该值是一个空字符串。</exception>
    </member>
    <member name="P:System.ServiceModel.MessageContractAttribute.WrapperNamespace">
      <summary>获取或设置消息正文包装元素的命名空间。</summary>
      <returns>包装元素命名空间。</returns>
    </member>
    <member name="T:System.ServiceModel.MessageContractMemberAttribute">
      <summary>声明 <see cref="T:System.ServiceModel.MessageBodyMemberAttribute" /> 和 <see cref="T:System.ServiceModel.MessageHeaderAttribute" /> 的基成员。</summary>
    </member>
    <member name="M:System.ServiceModel.MessageContractMemberAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.MessageContractMemberAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.MessageContractMemberAttribute.Name">
      <summary>指定与此成员对应的元素的名称。</summary>
      <returns>与此成员对应的元素的名称。 此字符串必须是有效的 XML 元素名称。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageContractMemberAttribute.Namespace">
      <summary>指定与此成员对应的元素的命名空间。</summary>
      <returns>与此成员对应的元素的命名空间 URI。</returns>
    </member>
    <member name="T:System.ServiceModel.MessageHeaderException">
      <summary>在处理消息时，如果不能满足与 SOAP 消息头有关的期望，则引发该异常。</summary>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String)">
      <summary>用指定消息初始化 <see cref="T:System.ServiceModel.MessageHeaderException" /> 类的新实例。</summary>
      <param name="message">异常中传达的消息。</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.Boolean)">
      <summary>使用指定的消息和指示消息头是重复还是缺少的值初始化 <see cref="T:System.ServiceModel.MessageHeaderException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="isDuplicate">如果多个消息头是重复的，则为 true；如果没有消息头，则为 false。</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.Exception)">
      <summary>使用指定的消息和导致异常的内部异常来初始化 <see cref="T:System.ServiceModel.MessageHeaderException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="innerException">包含导致异常的内部异常的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String)">
      <summary>使用指定的消息、标头名称和命名空间初始化 <see cref="T:System.ServiceModel.MessageHeaderException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="headerName">消息头的名称。</param>
      <param name="ns">消息头的命名空间。</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String,System.Boolean)">
      <summary>使用指定的消息、标头名称和命名空间以及指示消息头是重复还是缺少的值来初始化 <see cref="T:System.ServiceModel.MessageHeaderException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="headerName">消息头的名称。</param>
      <param name="ns">消息头的命名空间。</param>
      <param name="isDuplicate">如果多个消息头是重复的，则为 true；如果没有消息头，则为 false。</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String,System.Boolean,System.Exception)">
      <summary>使用指定的消息、标头名称和命名空间、指示消息头是重复还是缺少的值以及导致异常的内部异常来初始化 <see cref="T:System.ServiceModel.MessageHeaderException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="headerName">消息头的名称。</param>
      <param name="ns">消息头的命名空间。</param>
      <param name="isDuplicate">如果多个消息头是重复的，则为 true；如果没有消息头，则为 false。</param>
      <param name="innerException">包含导致异常的内部异常的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String,System.Exception)">
      <summary>使用指定的消息、标头名称和命名空间以及导致异常的内部异常来初始化 <see cref="T:System.ServiceModel.MessageHeaderException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="headerName">消息头的名称。</param>
      <param name="ns">消息头的命名空间。</param>
      <param name="innerException">包含导致异常的内部异常的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="P:System.ServiceModel.MessageHeaderException.HeaderName">
      <summary>获取导致异常的 SOAP 标头的名称。</summary>
      <returns>SOAP 标头的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageHeaderException.HeaderNamespace">
      <summary>获取导致异常的 SOAP 标头的命名空间。</summary>
      <returns>SOAP 标头的命名空间。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageHeaderException.IsDuplicate">
      <summary>获取一个值，该值指示是存在多个消息头还是没有消息头。</summary>
      <returns>如果多个消息头是重复的，则为 true；如果没有消息头，则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.MessageParameterAttribute">
      <summary>控制请求和响应参数的名称。 不能与 <see cref="T:System.ServiceModel.Channels.Message" /> 或消息协定搭配使用。</summary>
    </member>
    <member name="M:System.ServiceModel.MessageParameterAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.MessageParameterAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.MessageParameterAttribute.Name">
      <summary>获取或设置 XML 架构 (XSD) 中参数的名称属性。</summary>
      <returns>XSD 中参数的名称属性。</returns>
    </member>
    <member name="T:System.ServiceModel.OperationContext">
      <summary>提供对服务方法的执行上下文的访问权限。</summary>
    </member>
    <member name="M:System.ServiceModel.OperationContext.#ctor(System.ServiceModel.IContextChannel)">
      <summary>初始化 <see cref="T:System.ServiceModel.OperationContext" /> 类的新实例，该类使用客户端应用程序中指定的 <see cref="T:System.ServiceModel.IContextChannel" />。</summary>
      <param name="channel">用于创建新客户端 <see cref="T:System.ServiceModel.OperationContext" /> 的 <see cref="T:System.ServiceModel.IContextChannel" />。</param>
      <exception cref="T:System.ArgumentNullException">通道为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.OperationContext.Current">
      <summary>获取或设置当前线程的执行上下文。</summary>
      <returns>表示当前方法的消息和执行上下文的 <see cref="T:System.ServiceModel.OperationContext" />。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.IncomingMessageHeaders">
      <summary>获取 <see cref="T:System.ServiceModel.OperationContext" /> 的传入消息头。</summary>
      <returns>一个包含传入消息头的 <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.IncomingMessageProperties">
      <summary>获取 <see cref="T:System.ServiceModel.OperationContext" /> 中的传入消息的消息属性。</summary>
      <returns>一个包含传入消息的消息属性的 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.IncomingMessageVersion">
      <summary>获取 <see cref="T:System.ServiceModel.OperationContext" /> 的传入 SOAP 消息版本。</summary>
      <returns>传入消息的 SOAP 版本。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.IsUserContext">
      <summary>此属性专供系统使用，不应由用户调用。</summary>
      <returns>true.</returns>
    </member>
    <member name="E:System.ServiceModel.OperationContext.OperationCompleted">
      <summary>操作完成时发生。</summary>
    </member>
    <member name="P:System.ServiceModel.OperationContext.OutgoingMessageHeaders">
      <summary>获取活动 <see cref="T:System.ServiceModel.OperationContext" /> 的传出消息头。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> 对象，包含活动 <see cref="T:System.ServiceModel.OperationContext" /> 的出站消息头。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.OutgoingMessageProperties">
      <summary>获取活动 <see cref="T:System.ServiceModel.OperationContext" /> 中的出站消息的消息属性。</summary>
      <returns>一个包含出站消息的消息属性的 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.RequestContext">
      <summary>获取或设置此方法的 <see cref="T:System.ServiceModel.Channels.RequestContext" /> 实现。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.RequestContext" /> 实现，或者为 null（如果没有请求上下文）。</returns>
    </member>
    <member name="T:System.ServiceModel.OperationContextScope">
      <summary>创建一个块，其中 <see cref="T:System.ServiceModel.OperationContext" /> 对象在范围之内。</summary>
    </member>
    <member name="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.IContextChannel)">
      <summary>初始化 <see cref="T:System.ServiceModel.OperationContextScope" /> 类的新实例，该类使用指定的 <see cref="T:System.ServiceModel.IContextChannel" /> 创建新的 <see cref="T:System.ServiceModel.OperationContext" /> 的范围。</summary>
      <param name="channel">为新的 <see cref="T:System.ServiceModel.OperationContext" /> 创建范围时要使用的信道。</param>
    </member>
    <member name="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.OperationContext)">
      <summary>初始化 <see cref="T:System.ServiceModel.OperationContextScope" /> 类的新实例，以为指定的 <see cref="T:System.ServiceModel.OperationContext" /> 对象创建范围。</summary>
      <param name="context">创建的范围中的活动 <see cref="T:System.ServiceModel.OperationContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.OperationContextScope.Dispose">
      <summary>将原始 <see cref="T:System.ServiceModel.OperationContext" /> 还原为活动上下文并回收 <see cref="T:System.ServiceModel.OperationContextScope" /> 对象。</summary>
    </member>
    <member name="T:System.ServiceModel.OperationContractAttribute">
      <summary>指示方法定义一个操作，该操作是 Windows Communication Foundation (WCF) 应用程序中服务协定的一部分。</summary>
    </member>
    <member name="M:System.ServiceModel.OperationContractAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.OperationContractAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.Action">
      <summary>获取或设置请求消息的 WS-Addressing 操作。</summary>
      <returns>生成 WS-Addressing Action 标头时要使用的操作。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.AsyncPattern">
      <summary>指示操作是使用服务协定中的 Begin&lt;methodName&gt; 和 End&lt;methodName&gt; 方法对异步实现的。</summary>
      <returns>如果 Begin（methodName 方法与 End（methodName） 方法匹配，并且基础结构可将其视为服务接口上作为异步方法对实现的操作，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.IsOneWay">
      <summary>获取或设置一个值，该值指示操作是否返回答复消息。</summary>
      <returns>如果该方法收到请求消息，但未返回任何答复消息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.Name">
      <summary>获取或设置操作的名称。</summary>
      <returns>操作的名称。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.ServiceModel.OperationContractAttribute.Name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">该值是一个空字符串。</exception>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.ReplyAction">
      <summary>获取或设置用于该操作答复消息的 SOAP 操作的值。</summary>
      <returns>用于答复消息的 SOAP 操作的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.ServiceModel.OperationContractAttribute.ReplyAction" /> 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.OperationFormatStyle">
      <summary>表示 SOAP 样式，该样式确定如何设置服务的 WSDL 元数据格式。</summary>
    </member>
    <member name="F:System.ServiceModel.OperationFormatStyle.Document">
      <summary>导致 WSDL 表示形式包含一个表示与操作交换的文档的元素。</summary>
    </member>
    <member name="F:System.ServiceModel.OperationFormatStyle.Rpc">
      <summary>导致与操作交换的消息的 WSDL 表示形式包含参数，如同远程过程调用那样。</summary>
    </member>
    <member name="T:System.ServiceModel.ProtocolException">
      <summary>当由于数据传输协议不匹配而导致无法与远程方进行通信时，将在客户端引发此异常。</summary>
    </member>
    <member name="M:System.ServiceModel.ProtocolException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.ServiceModel.ProtocolException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.ServiceModel.ProtocolException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对导致此异常的内部异常的引用来初始化 <see cref="T:System.ServiceModel.ProtocolException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致引发当前异常的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.ServiceModel.QuotaExceededException">
      <summary>当超过消息配额时引发的一个异常。</summary>
    </member>
    <member name="M:System.ServiceModel.QuotaExceededException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.ServiceModel.QuotaExceededException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.ServiceModel.QuotaExceededException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对导致此异常的内部异常的引用来初始化 <see cref="T:System.ServiceModel.QuotaExceededException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致引发当前异常的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.ServiceModel.ServerTooBusyException">
      <summary>服务器太忙而无法接受消息时引发的异常。</summary>
    </member>
    <member name="M:System.ServiceModel.ServerTooBusyException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.ServiceModel.ServerTooBusyException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.ServiceModel.ServerTooBusyException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对导致此异常的内部异常的引用来初始化 <see cref="T:System.ServiceModel.ServerTooBusyException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致引发当前异常的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.ServiceModel.ServiceActivationException">
      <summary>无法激活服务时引发的异常。</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceActivationException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.ServiceModel.ServiceActivationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceActivationException.#ctor(System.String,System.Exception)">
      <summary>使用提供的指定错误消息和内部异常初始化 <see cref="T:System.ServiceModel.ServiceActivationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致引发当前异常的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.ServiceModel.ServiceContractAttribute">
      <summary>指示接口或类在 Windows Communication Foundation (WCF) 应用程序中定义服务协定。</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceContractAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.ServiceContractAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.ServiceContractAttribute.CallbackContract">
      <summary>获取或设置当协定为双工协定时的回调协定类型。</summary>
      <returns>指示回调协定的 <see cref="T:System.Type" />。 默认值为 null。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceContractAttribute.ConfigurationName">
      <summary>获取或设置用于查找应用程序配置文件中的服务的名称。</summary>
      <returns>用于查找应用程序配置文件中的服务元素的名称。 默认值是服务实现类的名称。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">该值是一个空字符串。</exception>
    </member>
    <member name="P:System.ServiceModel.ServiceContractAttribute.Name">
      <summary>获取或设置 Web 服务描述语言 (WSDL) 中的 &lt;portType&gt; 元素的名称。</summary>
      <returns>默认值为应用了 <see cref="T:System.ServiceModel.ServiceContractAttribute" /> 的类或接口的名称。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">该值是一个空字符串。</exception>
    </member>
    <member name="P:System.ServiceModel.ServiceContractAttribute.Namespace">
      <summary>获取或设置 Web 服务描述语言 (WSDL) 中的 &lt;portType&gt; 元素的命名空间。</summary>
      <returns>&lt;portType&gt; 元素的 WSDL 命名空间。 默认值为“http://tempuri.org”。</returns>
    </member>
    <member name="T:System.ServiceModel.ServiceKnownTypeAttribute">
      <summary>指定序列化或反序列化时服务要使用的已知类型。</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ServiceModel.ServiceKnownTypeAttribute" /> 类的新实例，并指定返回已知类型的方法的名称。</summary>
      <param name="methodName">返回已知类型的方法的名称。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.String,System.Type)">
      <summary>使用返回已知类型的方法的名称，以及包含返回已知类型的方法的类型来初始化 <see cref="T:System.ServiceModel.ServiceKnownTypeAttribute" /> 类的新实例。</summary>
      <param name="methodName">返回已知类型的方法的名称。</param>
      <param name="declaringType">可以在其对象图中使用已知类型的类型。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.Type)">
      <summary>用指定的已知类型初始化 <see cref="T:System.ServiceModel.ServiceKnownTypeAttribute" /> 类的新实例。</summary>
      <param name="type">指定一个可用于由服务定义的参数或返回值的已知类型。</param>
    </member>
    <member name="P:System.ServiceModel.ServiceKnownTypeAttribute.DeclaringType">
      <summary>获取包含返回已知类型的方法的类型。</summary>
      <returns>包含返回已知类型的方法的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceKnownTypeAttribute.MethodName">
      <summary>获取返回已知类型集合的方法的名称。</summary>
      <returns>返回已知类型的方法的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceKnownTypeAttribute.Type">
      <summary>可包含在对象图中的已知类型。</summary>
      <returns>已知类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.ServiceModel.UnknownMessageReceivedEventArgs">
      <summary>包含通过通道接收但不能与任何回调操作或挂起请求相关联的消息。</summary>
    </member>
    <member name="P:System.ServiceModel.UnknownMessageReceivedEventArgs.Message">
      <summary>获取导致该事件的未知消息。</summary>
      <returns>导致该事件的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.AddressHeader">
      <summary>表示一个地址头，它包装的地址信息项用于标识终结点或与终结点进行交互。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.AddressHeader" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.CreateAddressHeader(System.String,System.String,System.Object)">
      <summary>用指定的值、名称和命名空间创建 <see cref="T:System.ServiceModel.Channels.AddressHeader" /> 类的新实例。</summary>
      <returns>具有指定 <paramref name="name" /> 和 <paramref name="ns" /> 并且包含 <paramref name="value" /> 指定的信息项的 <see cref="T:System.ServiceModel.Channels.AddressHeader" />。</returns>
      <param name="name">地址头的名称。</param>
      <param name="ns">地址头的命名空间。</param>
      <param name="value">为地址头提供的信息项。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null 或 <paramref name="name" />.Length == 0。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.CreateAddressHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>使用指定名称和命名空间创建 <see cref="T:System.ServiceModel.Channels.AddressHeader" /> 类的新实例，该实例使用指定的格式化程序对指定对象的信息项进行序列化。</summary>
      <returns>具有指定 <paramref name="name" /> 和 <paramref name="ns" /> 并且包含 <paramref name="value" /> 指定的信息项的 <see cref="T:System.ServiceModel.Channels.AddressHeader" />。</returns>
      <param name="name">地址头的名称。</param>
      <param name="ns">地址头的命名空间。</param>
      <param name="value">为地址头提供的信息项。</param>
      <param name="serializer">用于序列化 <paramref name="value" /> 参数中的指定对象的 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 或 <paramref name="serializer" /> 为 null，或 <paramref name="name" />.Length == 0。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.Equals(System.Object)">
      <summary>确定指定对象中的信息项是否与当前地址头包含的对象相等。</summary>
      <returns>如果指定的 <paramref name="obj" /> 中的信息项等效于当前地址头包含的信息项，则为 true；否则为 false。 特别是，如果 <paramref name="obj" /> 为 null，则返回 false。</returns>
      <param name="obj">要与当前地址头包含的对象进行比较的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.GetAddressHeaderReader">
      <summary>返回可对当前地址头对象进行序列化的 XML 读取器。</summary>
      <returns>可对当前地址头对象进行序列化的 <see cref="T:System.Xml.XmlDictionaryReader" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.GetHashCode">
      <summary>为地址头提供一个唯一的哈希代码。</summary>
      <returns>当前地址头的唯一哈希代码。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.GetValue``1">
      <summary>将来自当前地址头的信息项反序列化为具有指定类型的对象。</summary>
      <returns>一个类型为 <paramref name="T" /> 的类的实例，其字段和属性设置为当前地址头对象所提供的值。</returns>
      <typeparam name="T">一个类型为 <paramref name="T" /> 的类，其字段和属性设置为当前地址头对象所提供的值。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.GetValue``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>将来自当前地址头的信息项反序列化为具有指定类型的对象，该对象使用指定格式化程序对此信息进行序列化。</summary>
      <returns>一个类型为 <paramref name="T" /> 的类的实例，其字段和属性设置为当前地址头对象所提供的值。</returns>
      <param name="serializer">用于反序列化来自当前地址头对象的信息项的 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</param>
      <typeparam name="T">一个类型为 <paramref name="T" /> 的类，其字段和属性设置为当前地址头对象所提供的值。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializer" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.AddressHeader.Name">
      <summary>在实现时，获取地址头的名称。</summary>
      <returns>地址头的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.AddressHeader.Namespace">
      <summary>在实现时，获取地址头的命名空间。</summary>
      <returns>地址头的命名空间。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.OnWriteAddressHeaderContents(System.Xml.XmlDictionaryWriter)">
      <summary>当在派生类中重写时，在向流或文件写入地址头内容时调用。</summary>
      <param name="writer">用于向流或文件写入地址头内容的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.OnWriteStartAddressHeader(System.Xml.XmlDictionaryWriter)">
      <summary>当在派生类中重写时，在开始向流或文件写入地址头内容时调用。</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the address header to a stream or file.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.ToMessageHeader">
      <summary>将地址头包装为消息头。</summary>
      <returns>包装当前地址头的 <see cref="T:System.ServiceModel.Channels.MessageHeader" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.WriteAddressHeader(System.Xml.XmlDictionaryWriter)">
      <summary>使用指定 <see cref="T:System.Xml.XmlDictionaryWriter" /> 向流或文件写入地址头。</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the address header to a stream or file.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.WriteAddressHeader(System.Xml.XmlWriter)">
      <summary>使用指定 <see cref="T:System.Xml.XmlWriter" /> 向流或文件写入地址头。</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> used to write the address header to a stream or file.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.WriteAddressHeaderContents(System.Xml.XmlDictionaryWriter)">
      <summary>向流或文件写入地址头内容。</summary>
      <param name="writer">用于向流或文件写入地址头内容的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.WriteStartAddressHeader(System.Xml.XmlDictionaryWriter)">
      <summary>开始向流或文件写入地址头内容。</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the address header to a stream or file.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.AddressHeaderCollection">
      <summary>表示地址标头的线程安全的只读集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.AddressHeaderCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Channels.AddressHeader})">
      <summary>从地址标头的可枚举集创建 <see cref="T:System.ServiceModel.Channels.AddressHeaderCollection" /> 类的新实例。</summary>
      <param name="addressHeaders">用于初始化集合的 <see cref="T:System.ServiceModel.Channels.AddressHeader" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="addressHeaders" /> 参数中的一个地址标头为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.AddHeadersTo(System.ServiceModel.Channels.Message)">
      <summary>将集合中的标头添加到指定消息的标头中。</summary>
      <param name="message">向其中添加标头的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.FindAll(System.String,System.String)">
      <summary>查找集合中具有指定名称和命名空间的所有地址标头。</summary>
      <returns>类型为 <see cref="T:System.ServiceModel.Channels.AddressHeader" /> 的 <see cref="T:System.Array" />，包含集合中具有指定名称和命名空间的所有标头。</returns>
      <param name="name">要查找的地址标头的名称。</param>
      <param name="ns">要查找的地址标头的命名空间。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 或 <paramref name="ns" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.FindHeader(System.String,System.String)">
      <summary>查找集合中具有指定名称和命名空间的第一个地址标头。</summary>
      <returns>集合中具有指定名称和命名空间的 <see cref="T:System.ServiceModel.Channels.AddressHeader" />。</returns>
      <param name="name">要查找的地址标头的名称。</param>
      <param name="ns">要查找的地址标头的命名空间。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 或 <paramref name="ns" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">存在多个具有指定 <paramref name="name" /> 和 <paramref name="ns" /> 的标头。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.AddressingVersion">
      <summary>与 SOAP 消息关联或终结点所理解的 WS-Addressing 版本。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.AddressingVersion.None">
      <summary>获取与 WS-Addressing 版本不相关联的寻址版本。</summary>
      <returns>不是与 WS-Addressing 版本相关的 <see cref="T:System.ServiceModel.Channels.AddressingVersion" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressingVersion.ToString">
      <summary>返回当前寻址版本的字符串表示形式。</summary>
      <returns>一个表示当前寻址版本的字符串。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.AddressingVersion.WSAddressing10">
      <summary>获取与 WS-Addressing 1.0 关联的地址版本的标识符。</summary>
      <returns>标识与 WS-Addressing 1.0 关联的 <see cref="T:System.ServiceModel.Channels.AddressingVersion" /> 的单一实例。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement">
      <summary>用于指定编码消息时所采用的 .NET 二进制 XML 格式的绑定元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>在客户端上生成通道工厂堆栈，该通道工厂堆栈可为指定上下文创建指定类型的通道。</summary>
      <returns>指定上下文的 <paramref name="TChannel" /> 类型的 <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />。</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> for the channel.</param>
      <typeparam name="TChannel">通道工厂生成的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.Clone">
      <summary>创建一个从当前对象初始化的 <see cref="T:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement" /> 对象，其属性值等于当前元素的属性值。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.CreateMessageEncoderFactory">
      <summary>为利用 SOAP 与 WS-Addressing 版本以及当前编码绑定元素指定的字符编码的二进制消息编码器，创建一个工厂。</summary>
      <returns>此绑定元素创建的 <see cref="T:System.ServiceModel.Channels.MessageEncoderFactory" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.MessageVersion">
      <summary>获取或设置使用的或预期的 SOAP 消息和 WS-Addressing 版本。</summary>
      <returns>使用的或预期的 <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
      <exception cref="T:System.ArgumentNullException">所设置的值为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">该值设置为不受支持的信封版本。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.Binding">
      <summary>包含绑定元素，这些元素指定客户端和服务之间的通信所用的协议、传输和消息编码器。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.#ctor">
      <summary>使用默认的名称和命名空间初始化 <see cref="T:System.ServiceModel.Channels.Binding" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.#ctor(System.String,System.String)">
      <summary>使用指定的服务绑定初始化 <see cref="T:System.ServiceModel.Channels.Binding" /> 类的新实例。</summary>
      <param name="name">绑定的 <see cref="P:System.ServiceModel.Channels.Binding.Name" />。</param>
      <param name="ns">绑定的 <see cref="P:System.ServiceModel.Channels.Binding.Namespace" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 为 null 或空字符串。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ns" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])">
      <summary>在客户端上生成通道工厂堆栈，该通道工厂堆栈创建具有指定类型的通道并满足对象数组所指定的功能。</summary>
      <returns>一个类型为 <paramref name="TChannel" /> 的 <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />，它满足集合所指定的功能。</returns>
      <param name="parameters">为生成的通道工厂指定要求的对象数组。</param>
      <typeparam name="TChannel">通道工厂生成的通道类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">缺少传输元素或其顺序紊乱，或架构无效，或未指定消息版本。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>在客户端上生成通道工厂堆栈，此通道工厂堆栈创建具有指定类型的通道并满足绑定参数集合所指定的功能。</summary>
      <returns>一个类型为 <paramref name="TChannel" /> 的 <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />，它满足集合所指定的功能。</returns>
      <param name="parameters">
        <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />，为生成的通道工厂指定要求。</param>
      <typeparam name="TChannel">通道工厂生成的通道类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">缺少传输元素或其顺序紊乱，或架构无效，或未指定消息版本。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])">
      <summary>返回一个值，该值指示当前绑定是否可以在客户端上生成满足对象数组所指定的要求的通道工厂堆栈。</summary>
      <returns>如果可以在客户端上生成指定的通道工厂堆栈，则为 true；否则为 false。</returns>
      <param name="parameters">为生成的通道工厂指定要求的对象数组。</param>
      <typeparam name="TChannel">要为其进行工厂测试的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>返回一个值，该值指示当前绑定是否可以在客户端上生成满足指定绑定参数集合的通道工厂堆栈。</summary>
      <returns>如果可以在客户端上生成指定的通道工厂堆栈，则为 true；否则为 false。</returns>
      <param name="parameters">为生成的通道工厂指定要求的 <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />。</param>
      <typeparam name="TChannel">要为其进行工厂测试的通道类型。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.CloseTimeout">
      <summary>获取或设置在传输引发异常之前可用于关闭连接的时间间隔。</summary>
      <returns>
        <see cref="T:System.Timespan" />，指定在超时前必须完成关闭操作的时间。 默认值为 1 分钟。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零或太大。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.CreateBindingElements">
      <summary>在派生类中重写时，创建一个集合，该集合包含属于当前绑定的绑定元素。</summary>
      <returns>一个类型为 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 的 <see cref="T:System.Collections.Generic.ICollection`1" /> 对象，它以正确的顺序包含当前绑定对象的绑定元素。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>从绑定堆栈的适当层返回所请求的类型化对象（如果存在）。</summary>
      <returns>如果存在，则为所请求的类型化对象 <paramref name="T" />，如果不存在，则为 null。</returns>
      <param name="parameters">为生成的通道侦听器指定要求的 <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />。</param>
      <typeparam name="T">方法正在查询的类型化对象。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.MessageVersion">
      <summary>获取由绑定所配置的客户端和服务使用的消息版本。</summary>
      <returns>由绑定所配置的客户端和服务使用的 <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.Name">
      <summary>获取或设置绑定的名称。</summary>
      <returns>绑定的名称。 默认的名称为 null。</returns>
      <exception cref="T:System.ArgumentException">该值不能设置为 null 或空字符串。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.Namespace">
      <summary>获取或设置绑定的 XML 命名空间。</summary>
      <returns>绑定的 XML 命名空间。 默认值为“http://tempuri.org/”。</returns>
      <exception cref="T:System.ArgumentNullException">该值不能设置为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.OpenTimeout">
      <summary>获取或设置在传输引发异常之前可用于打开连接的时间间隔。</summary>
      <returns>
        <see cref="T:System.Timespan" />，指定在超时前必须完成打开操作的时间。 默认值为 1 分钟。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零或太大。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.ReceiveTimeout">
      <summary>获取或设置连接在撤消之前保持非活动状态的最大时间间隔，在此时间间隔内未接收任何应用程序消息。</summary>
      <returns>一个 <see cref="T:System.Timespan" />，指定在超时前应用程序接收消息的时间。 默认值为 10 分钟。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零或太大。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.Scheme">
      <summary>在派生类中实现时，设置 URI 架构，此架构指定由绑定生成的通道和侦听器工厂所使用的传输。</summary>
      <returns>由当前绑定生成的工厂所创建的通道或侦听器所使用的 URI 架构。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.SendTimeout">
      <summary>获取或设置在传输引发异常之前可用于完成写入操作的时间间隔。</summary>
      <returns>
        <see cref="T:System.Timespan" />，指定在超时前必须完成写入操作的时间。 默认值为 1 分钟。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零或太大。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.BindingContext">
      <summary>提供关于生成通道侦听器和通道工厂所需的地址、绑定、绑定元素和绑定参数的信息。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.#ctor(System.ServiceModel.Channels.CustomBinding,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>使用指定的绑定和绑定参数集合初始化 <see cref="T:System.ServiceModel.Channels.BindingContext" /> 类的新实例。</summary>
      <param name="binding">通道的 <see cref="T:System.ServiceModel.Channels.CustomBinding" />。</param>
      <param name="parameters">通道的 <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.BindingContext.Binding">
      <summary>获取当前上下文中生成的通道的绑定。</summary>
      <returns>当前上下文中生成的通道的 <see cref="T:System.ServiceModel.Channels.CustomBinding" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.BindingContext.BindingParameters">
      <summary>获取当前上下文中生成的通道的绑定参数集合。</summary>
      <returns>当前上下文中生成的通道的 <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.BuildInnerChannelFactory``1">
      <summary>在当前通道工厂之下为指定类型的通道生成内部通道工厂。</summary>
      <returns>类型为 <see cref="T:System.ServiceModel.Channels.IChannel" /> 的 <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />，表示当前通道工厂的内部通道工厂。</returns>
      <typeparam name="TChannel">内部通道工厂生成的 <see cref="T:System.ServiceModel.Channels.IChannel" /> 对象的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.CanBuildInnerChannelFactory``1">
      <summary>返回一个值，该值指示内部通道工厂是否可以生成指定类型的通道。</summary>
      <returns>如果内部通道工厂可以生成指定的 <paramref name="TChannel" />，则为 true；否则为 false。</returns>
      <typeparam name="TChannel">内部通道工厂生成的 <see cref="T:System.ServiceModel.Channels.IChannel" /> 对象的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.Clone">
      <summary>返回当前通道生成上下文的副本。</summary>
      <returns>作为当前通道生成上下文副本的 <see cref="T:System.ServiceModel.Channels.BindingContext" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.GetInnerProperty``1">
      <summary>从绑定堆栈的适当层返回所请求的类型化对象（如果存在）。</summary>
      <returns>如果存在，则为所请求的类型化对象 <paramref name="T" />，如果不存在，则为 null。</returns>
      <typeparam name="T">方法正在查询的类型化对象。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.BindingContext.RemainingBindingElements">
      <summary>获取其他绑定元素用于构造通道堆栈的绑定元素。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.BindingElementCollection" />，包含其他绑定元素用于构造通道堆栈的绑定元素。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.BindingElement">
      <summary>用于为各种类型的通道生成通道工厂和通道侦听器以处理传出和传入消息的绑定元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.#ctor(System.ServiceModel.Channels.BindingElement)">
      <summary>从指定的绑定元素初始化 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 类的新实例。</summary>
      <param name="elementToBeCloned">要克隆的 <see cref="T:System.ServiceModel.Channels.BindingElement" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>初始化通道工厂，用于生成来自绑定上下文中指定类型的通道。</summary>
      <returns>
        <paramref name="TChannel" /> 类型的 <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />（从 <paramref name="context" /> 中初始化）。</returns>
      <param name="context">为绑定元素提供上下文的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">工厂生成的通道类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>返回一个值，该值指示绑定元素是否可以为特定类型的通道生成通道工厂。</summary>
      <returns>如果绑定元素可以生成类型为 <paramref name="TChannel" /> 的 <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />，则为 true；否则为 false。</returns>
      <param name="context">为绑定元素提供上下文的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道工厂生成的通道类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.Clone">
      <summary>在派生类中重写时，返回绑定元素对象的副本。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 对象，它是原始绑定元素对象的深层克隆。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>在派生类中重写时，从绑定堆栈的适当层返回所请求的类型化对象（如果存在）。</summary>
      <returns>如果存在，则返回所请求的类型化对象 <paramref name="T" />，如果不存在，则返回 null。</returns>
      <param name="context">绑定元素的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">方法正在查询的类型化对象。</typeparam>
    </member>
    <member name="T:System.ServiceModel.Channels.BindingElementCollection">
      <summary>表示绑定中使用的绑定元素的集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Channels.BindingElement})">
      <summary>使用绑定元素的可枚举集初始化 <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> 类的新实例。</summary>
      <param name="elements">泛型类型 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，用于初始化集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.#ctor(System.ServiceModel.Channels.BindingElement[])">
      <summary>使用一个绑定元素数组初始化 <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> 类的新实例。</summary>
      <param name="elements">类型为 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 的 <see cref="T:System.Array" />，用于初始化集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.AddRange(System.ServiceModel.Channels.BindingElement[])">
      <summary>将数组中的绑定元素添加到绑定元素集合中。</summary>
      <param name="elements">要添加到集合中的类型为 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 的 <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.Clone">
      <summary>创建绑定元素集合的副本。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> 的副本。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.Contains(System.Type)">
      <summary>返回一个值，该值指示具有指定类型的绑定元素是否属于绑定元素集合。</summary>
      <returns>如果指定的绑定元素类型包含在集合中，则为 true；否则为 false。</returns>
      <param name="bindingElementType">要测试其是否属于集合的绑定元素的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingElementType" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.Find``1">
      <summary>返回绑定元素集合中第一个具有指定类型的项。</summary>
      <returns>如果找到，则返回类型为 <see cref="T:System.Type" /> 的项；如果未找到，若 <paramref name="T" /> 为值类型，则返回 0，若 <paramref name="T" /> 为引用类型，则返回 null。</returns>
      <typeparam name="T">要查找的项的 <see cref="T:System.Type" />。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.FindAll``1">
      <summary>返回绑定元素集合中具有指定类型的所有项。</summary>
      <returns>如果找到，则返回类型为 <see cref="T:System.Type" /> 的所有项的 <see cref="T:System.Collections.ObjectModel.Collection`1" />；如果未找到任何项，若 <paramref name="T" /> 为值类型，则返回 0，若 <paramref name="T" /> 为引用类型，则返回 null。</returns>
      <typeparam name="T">要查找的项的 <see cref="T:System.Type" />。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.InsertItem(System.Int32,System.ServiceModel.Channels.BindingElement)">
      <summary>将一个绑定元素插入绑定元素集合的指定位置。</summary>
      <param name="index">在集合中插入绑定元素的位置。</param>
      <param name="item">要插入的 <see cref="T:System.ServiceModel.Channels.BindingElement" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.Remove``1">
      <summary>从绑定元素集合中移除一个具有指定类型的绑定元素。</summary>
      <returns>类型为 <see cref="T:System.Type" /> 的被移除项。</returns>
      <typeparam name="T">要查找的项的 <see cref="T:System.Type" />。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.RemoveAll``1">
      <summary>从绑定元素集合中移除具有指定类型的所有绑定元素。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.Collection`1" />，它包含查找到的所有 <see cref="T:System.Type" /> 类型项。</returns>
      <typeparam name="T">要查找的项的 <see cref="T:System.Type" />。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.SetItem(System.Int32,System.ServiceModel.Channels.BindingElement)">
      <summary>替换绑定元素集合中指定索引处的绑定元素。</summary>
      <param name="index">待替换元素的从零开始的索引。</param>
      <param name="item">指定 <paramref name="index" /> 处的 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 项的新值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.BindingParameterCollection">
      <summary>表示一个绑定参数的集合，这些参数存储由绑定元素用来生成工厂的信息。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingParameterCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingParameterCollection.GetKeyForItem(System.Object)">
      <summary>获取集合中包含的某个项的键。</summary>
      <returns>集合中表示指定键的 <paramref name="item" /> 的 <see cref="T:System.Type" /> 对象。</returns>
      <param name="item">集合中要检索其键的项。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingParameterCollection.InsertItem(System.Int32,System.Object)">
      <summary>在指定集合的索引处插入一个元素。</summary>
      <param name="index">在集合中应在此处插入 <paramref name="item" /> 的从零开始的索引。</param>
      <param name="item">要在集合中插入的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingParameterCollection.SetItem(System.Int32,System.Object)">
      <summary>使用一个新对象替换指定索引处的项。</summary>
      <param name="index">从零开始的索引，在此对项进行设置新建 <paramref name="item" />。</param>
      <param name="item">要在集合中插入的对象。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.BodyWriter">
      <summary>表示消息正文的编写器。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.BodyWriter" /> 类的新实例，该实例显式指示是否缓冲。</summary>
      <param name="isBuffered">如果可以多次调用正文编写器，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.BodyWriter.IsBuffered">
      <summary>获取一个值，该值指示是否可以多次调用写入方法。</summary>
      <returns>如果可以多次调用正文编写器，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.OnWriteBodyContents(System.Xml.XmlDictionaryWriter)">
      <summary>实现时，提供写入正文内容时的可扩展点。</summary>
      <param name="writer">用于写出消息正文的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.WriteBodyContents(System.Xml.XmlDictionaryWriter)">
      <summary>写出消息正文的内容。</summary>
      <param name="writer">用于写出消息正文的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.BufferManager">
      <summary>许多 Windows Communication Foundation (WCF) 功能都需要使用缓冲区，然而创建和销毁缓冲区的造价非常高。 您可以使用 <see cref="T:System.ServiceModel.Channels.BufferManager" /> 类来管理缓冲池。 缓冲池及其缓冲区是在实例化此类时创建，在垃圾回收将缓冲池回收时销毁。 每次需要使用缓冲区时，您就可以从缓冲池中取出一个缓冲区来进行使用，然后在使用完毕后将其返回到缓冲池。 这个过程要比每次需要使用缓冲区时就创建一个然后再销毁快得多。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.BufferManager" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.Clear">
      <summary>释放目前在管理器中缓存的缓冲区。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.CreateBufferManager(System.Int64,System.Int32)">
      <summary>使用指定的最大缓冲池大小和缓冲池中每个单独缓冲区的最大大小创建新的 BufferManager。</summary>
      <returns>返回一个带有指定参数的 <see cref="T:System.ServiceModel.Channels.BufferManager" /> 对象。</returns>
      <param name="maxBufferPoolSize">缓冲池的最大大小。</param>
      <param name="maxBufferSize">单独缓冲区的最大大小。</param>
      <exception cref="T:System.InsufficientMemoryException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.OutOfMemoryException" />。 没有足够的内存来创建请求的缓冲池。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxBufferPoolSize" /> 或 <paramref name="maxBufferSize" /> 小于零。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.ReturnBuffer(System.Byte[])">
      <summary>将缓冲区返回到缓冲池。</summary>
      <param name="buffer">要返回的缓冲区引用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 引用不可为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> 的长度与缓冲池的缓冲区长度属性不符。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.TakeBuffer(System.Int32)">
      <summary>从缓冲池获取一个至少为指定大小的缓冲区。</summary>
      <returns>一个字节数组，表示所请求的缓冲区大小。</returns>
      <param name="bufferSize">所请求缓冲区的大小（以字节为单位）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 不能小于零。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelBase">
      <summary>提供自定义通道的基实现。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelBase.#ctor(System.ServiceModel.Channels.ChannelManagerBase)">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.ChannelBase" /> 类的新实例。</summary>
      <param name="channelManager">用于提供通道操作（发送、接收、打开和关闭）默认超时的 <see cref="T:System.ServiceModel.Channels.ChannelManagerBase" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="channelManager" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.DefaultCloseTimeout">
      <summary>获取为完成关闭操作提供的默认时间间隔。</summary>
      <returns>默认的 <see cref="T:System.Timespan" />，指定在超时前可用于完成关闭操作的时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.DefaultOpenTimeout">
      <summary>获取为完成打开操作提供的默认时间间隔。</summary>
      <returns>默认的 <see cref="T:System.Timespan" />，指定在超时前可用于完成打开操作的时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.DefaultReceiveTimeout">
      <summary>获取为完成接收操作提供的默认时间间隔。</summary>
      <returns>默认的 <see cref="T:System.Timespan" />，指定在超时前可用于完成接收操作的时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.DefaultSendTimeout">
      <summary>获取为完成发送操作提供的默认时间间隔。</summary>
      <returns>默认的 <see cref="T:System.Timespan" />，指定在超时前可用于完成发送操作的时间。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelBase.GetProperty``1">
      <summary>从通道堆栈的适当层，返回所请求的类型化对象（如果存在）。</summary>
      <returns>如果存在，则返回所请求的类型化对象 <paramref name="T" />，如果不存在，则返回 null。</returns>
      <typeparam name="T">方法正在查询的类型化对象。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.Manager">
      <summary>获取与当前通道关联的通道管理器。</summary>
      <returns>与当前通道关联的 <see cref="T:System.ServiceModel.Channels.ChannelManagerBase" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.System#ServiceModel#IDefaultCommunicationTimeouts#CloseTimeout">
      <summary>获取 close 方法（由通信对象调用）在超时之前的时间间隔。</summary>
      <returns>指定在 close 方法超时之前要等待的时间间隔的 <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.System#ServiceModel#IDefaultCommunicationTimeouts#OpenTimeout">
      <summary>获取 open 方法（由通信对象调用）在超时之前的时间间隔。</summary>
      <returns>指定在 open 方法超时之前要等待的时间间隔的 <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.System#ServiceModel#IDefaultCommunicationTimeouts#ReceiveTimeout">
      <summary>获取 receive 方法（由通信对象调用）在超时之前的时间间隔。</summary>
      <returns>指定在 receive 方法超时之前要等待的时间间隔的 <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.System#ServiceModel#IDefaultCommunicationTimeouts#SendTimeout">
      <summary>获取 send 方法（由通信对象调用）在超时之前的时间间隔。</summary>
      <returns>指定在 send 方法超时之前要等待的时间间隔的 <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelFactoryBase">
      <summary>为所有自定义通道工厂提供一个通用基实现。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.ChannelFactoryBase" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.#ctor(System.ServiceModel.IDefaultCommunicationTimeouts)">
      <summary>使用指定的默认通信超时初始化 <see cref="T:System.ServiceModel.Channels.ChannelFactoryBase" /> 类的新实例。</summary>
      <param name="timeouts">
        <see cref="T:System.ServiceModel.IDefaultCommunicationTimeouts" />，指定交换消息时打开、发送、接收和关闭操作的默认超时。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelFactoryBase.DefaultCloseTimeout">
      <summary>获取为完成关闭操作提供的默认时间间隔。</summary>
      <returns>默认的 <see cref="T:System.Timespan" />，指定在超时前可用于完成关闭操作的时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelFactoryBase.DefaultOpenTimeout">
      <summary>获取为完成打开操作提供的默认时间间隔。</summary>
      <returns>默认的 <see cref="T:System.Timespan" />，指定在超时前可用于完成打开操作的时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelFactoryBase.DefaultReceiveTimeout">
      <summary>获取为完成接收操作提供的默认时间间隔。</summary>
      <returns>默认的 <see cref="T:System.Timespan" />，指定在超时前可用于完成接收操作的时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelFactoryBase.DefaultSendTimeout">
      <summary>获取为完成发送操作提供的默认时间间隔。</summary>
      <returns>默认的 <see cref="T:System.Timespan" />，指定在超时前可用于完成发送操作的时间。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.GetProperty``1">
      <summary>从通道堆栈的适当层返回所请求的类型化对象（如果存在）。</summary>
      <returns>如果存在，则为所请求的类型化对象 T，如果不存在，则为 null。</returns>
      <typeparam name="T">方法正在查询的类型化对象。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.OnAbort">
      <summary>在调用了一个同步中止操作，从而引起通信对象转换为关闭状态的情况下，该方法插入对通信对象的处理。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作来关闭工厂创建的每个通道。</summary>
      <returns>引用异步关闭操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成关闭操作的时间。</param>
      <param name="callback">接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.OnClose(System.TimeSpan)">
      <summary>在通信对象转换为打开状态（此过程必须在指定时间间隔内完成）后插入对通信对象的处理。</summary>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成关闭操作的时间。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.OnEndClose(System.IAsyncResult)">
      <summary>完成一个异步操作来关闭工厂打开的通道。</summary>
      <param name="result">通过调用 <see cref="M:System.ServiceModel.Channels.ChannelFactoryBase.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelFactoryBase`1">
      <summary>为客户端上的通道工厂提供通用的基实现，以创建具有指定类型、与指定地址连接的通道。</summary>
      <typeparam name="TChannel">工厂生成的通道的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.ChannelFactoryBase`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.#ctor(System.ServiceModel.IDefaultCommunicationTimeouts)">
      <summary>使用指定的默认通信超时初始化 <see cref="T:System.ServiceModel.Channels.ChannelFactoryBase`1" /> 类的新实例。</summary>
      <param name="timeouts">指定交换消息时打开、发送、接收和关闭操作的默认超时的 <see cref="T:System.ServiceModel.IDefaultCommunicationTimeouts" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.CreateChannel(System.ServiceModel.EndpointAddress)">
      <summary>使用指定的终结点地址创建特定类型的通道。</summary>
      <returns>一个 <paramref name="TChannel" /> 类型的通道，它具有指定的 <paramref name="address" />。</returns>
      <param name="address">
        <see cref="T:System.ServiceModel.EndpointAddress" />，它是通道发送消息的目标远程终结点。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>使用指定的传输和终结点地址创建特定类型的通道。</summary>
      <returns>
        <paramref name="TChannel" /> 类型的通道，具有指定的远程和传输地址。</returns>
      <param name="address">
        <see cref="T:System.ServiceModel.EndpointAddress" />，它是通道发送消息的目标远程终结点。</param>
      <param name="via">
        <see cref="T:System.Uri" />，包含输出通道发送消息的目标传输地址。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnAbort">
      <summary>中止由通道工厂管理的每个通道。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作，在指定时间间隔内，关闭通道工厂的所有关联通道。</summary>
      <returns>引用异步关闭操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成关闭操作的时间。</param>
      <param name="callback">接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnClose(System.TimeSpan)">
      <summary>在指定时间间隔内，关闭通道工厂的所有关联通道。</summary>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成关闭操作的时间。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnCreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>在派生类中实现时，在创建通道时提供一个可扩展点。</summary>
      <returns>一个 <paramref name="TChannel" /> 类型的通道，它具有指定的地址。</returns>
      <param name="address">
        <see cref="T:System.ServiceModel.EndpointAddress" />，它是通道发送消息的目标远程终结点。</param>
      <param name="via">
        <see cref="T:System.Uri" />，包含输出通道发送消息的目标传输地址。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnEndClose(System.IAsyncResult)">
      <summary>完成一个异步操作，在指定时间间隔内，关闭通道工厂的所有关联通道。</summary>
      <param name="result">通过调用 <see cref="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.ValidateCreateChannel">
      <summary>确认通道工厂是打开的，并且已准备就绪，可以创建通道了。</summary>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态。</exception>
      <exception cref="T:System.InvalidOperationException">当前通道工厂不处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状态。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelManagerBase">
      <summary>提供基实现，用以管理与通道和侦听器工厂关联的默认超时。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelManagerBase.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.ChannelManagerBase" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.DefaultReceiveTimeout">
      <summary>在派生类中重写时，获取通道必须完成消息接收的默认时间间隔。</summary>
      <returns>默认 <see cref="T:System.Timespan" />，指定在调用 receive 方法后，通道在超时前必须完成消息接收的时长。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.DefaultSendTimeout">
      <summary>在派生类中重写时，获取通道必须完成消息发送的默认时间间隔。</summary>
      <returns>默认 <see cref="T:System.Timespan" />，指定在调用 send 方法后，通道在超时前必须完成消息发送的时长。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.System#ServiceModel#IDefaultCommunicationTimeouts#CloseTimeout">
      <summary>获取 close 方法（由通信对象调用）在超时之前的时间间隔。</summary>
      <returns>指定在 close 方法超时之前要等待的时间间隔的 <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.System#ServiceModel#IDefaultCommunicationTimeouts#OpenTimeout">
      <summary>获取 open 方法（由通信对象调用）在超时之前的时间间隔。</summary>
      <returns>指定在 open 方法超时之前要等待的时间间隔的 <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.System#ServiceModel#IDefaultCommunicationTimeouts#ReceiveTimeout">
      <summary>获取 receive 方法（由通信对象调用）在超时之前的时间间隔。</summary>
      <returns>指定在 receive 方法超时之前要等待的时间间隔的 <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.System#ServiceModel#IDefaultCommunicationTimeouts#SendTimeout">
      <summary>获取 send 方法（由通信对象调用）在超时之前的时间间隔。</summary>
      <returns>指定在 send 方法超时之前要等待的时间间隔的 <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelParameterCollection">
      <summary>表示通道参数的集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.ChannelParameterCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.#ctor(System.ServiceModel.Channels.IChannel)">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.ChannelParameterCollection" /> 类的新实例。</summary>
      <param name="channel">其参数位于此集合中的通道。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelParameterCollection.Channel">
      <summary>获取一个通道，该通道的参数位于此集合中。</summary>
      <returns>其参数位于此集合中的 <see cref="T:System.ServiceModel.Channels.IChannel" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.ClearItems">
      <summary>清除参数集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.InsertItem(System.Int32,System.Object)">
      <summary>使用指定索引将指定的项插入集合中。</summary>
      <param name="index">集合中的项的索引。</param>
      <param name="item">要添加到集合的项。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.PropagateChannelParameters(System.ServiceModel.Channels.IChannel)">
      <summary>将当前集合中的参数添加到指定通道的 <see cref="T:System.ServiceModel.Channels.ChannelParameterCollection" />。</summary>
      <param name="innerChannel">接受当前集合的参数的通道。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.RemoveItem(System.Int32)">
      <summary>从集合中移除参数。</summary>
      <param name="index">要移除的参数的索引。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.SetItem(System.Int32,System.Object)">
      <summary>替换集合中指定索引处的项。</summary>
      <param name="index">要替换的项的索引。</param>
      <param name="item">替代项的值。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.CommunicationObject">
      <summary>为系统中所有面向通信的对象（包括通道、侦听器以及通道和侦听器工厂）公用的基本状态机提供通用的基实现。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.CommunicationObject" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.#ctor(System.Object)">
      <summary>使用相互排斥锁初始化 <see cref="T:System.ServiceModel.Channels.CommunicationObject" /> 类的新实例可保护指定的状态转换。</summary>
      <param name="mutex">在状态转换过程中保护类实例的相互排斥锁。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Abort">
      <summary>使通信对象立即从其当前状态转换到正在关闭状态。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作以关闭通信对象。</summary>
      <returns>引用异步关闭操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
      <exception cref="T:System.InvalidOperationException">通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作以在指定超时内关闭通信对象。</summary>
      <returns>引用异步关闭操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成关闭操作的时间。</param>
      <param name="callback">接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
      <exception cref="T:System.InvalidOperationException">通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作以打开通信对象。</summary>
      <returns>引用异步打开操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">接收异步打开操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步打开操作相关联的状态信息。</param>
      <exception cref="T:System.InvalidOperationException">通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作以在指定时间间隔内打开通信对象。</summary>
      <returns>引用异步打开操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成发送操作的时间。</param>
      <param name="callback">接收异步打开操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步打开操作相关联的状态信息。</param>
      <exception cref="T:System.InvalidOperationException">通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Close">
      <summary>使通信对象从其当前状态转换到关闭状态。</summary>
      <exception cref="T:System.InvalidOperationException">通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Close(System.TimeSpan)">
      <summary>使通信对象在指定时间间隔内从当前状态转换到关闭状态。</summary>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成关闭操作的时间。</param>
      <exception cref="T:System.InvalidOperationException">通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Closed">
      <summary>当通信对象转换到已关闭状态时发生。</summary>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Closing">
      <summary>当通信对象转换到正在关闭状态时发生。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.DefaultCloseTimeout">
      <summary>在派生类中重写时，获取为完成关闭操作提供的默认时间间隔。</summary>
      <returns>默认的 <see cref="T:System.Timespan" />，指定在超时前可用于完成关闭操作的时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.DefaultOpenTimeout">
      <summary>在派生类中重写时，获取为完成打开操作提供的默认时间间隔。</summary>
      <returns>默认的 <see cref="T:System.Timespan" />，指定在超时前可用于完成打开操作的时间。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.EndClose(System.IAsyncResult)">
      <summary>完成一个异步操作以关闭通信对象。</summary>
      <param name="result">通过调用 <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.BeginClose" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
      <exception cref="T:System.InvalidOperationException">通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.EndOpen(System.IAsyncResult)">
      <summary>完成一个异步操作以打开通信对象。</summary>
      <param name="result">通过调用 <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.BeginClose" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
      <exception cref="T:System.InvalidOperationException">通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Fault">
      <summary>使通信对象从其当前状态转换到出错状态。</summary>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Faulted">
      <summary>在通信对象转换到出错状态时发生。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.GetCommunicationObjectType">
      <summary>获取通信对象的类型。</summary>
      <returns>通信对象的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.IsDisposed">
      <summary>获取一个值，该值指示通信对象是否已被释放。</summary>
      <returns>如果通信对象处于已关闭状态，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnAbort">
      <summary>在调用了一个同步中止操作，从而引起通信对象转换为关闭状态的情况下，该方法插入对通信对象的处理。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>在调用了异步关闭操作，从而引起通信对象转换为正在关闭状态的情况下，该方法将插入处理。</summary>
      <returns>引用异步关闭操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成关闭操作的时间。</param>
      <param name="callback">接收关闭操作异步完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
      <exception cref="T:System.InvalidOperationException">通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>在调用了异步打开操作，从而引起通信对象转换为正在打开状态的情况下，该方法将插入处理。</summary>
      <returns>引用打开操作异步的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成打开操作的时间。</param>
      <param name="callback">接收打开操作的异步完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，包含与打开操作异步相关联的状态信息。</param>
      <exception cref="T:System.InvalidOperationException">通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnClose(System.TimeSpan)">
      <summary>在调用了一个同步关闭操作，从而引起通信对象转换为正在关闭状态的情况下，该方法插入对通信对象的处理。</summary>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成关闭操作的时间。</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">对处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态的对象调用了 <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.Close" />。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
      <exception cref="T:System.ServiceModel.CommunicationException">关闭对象时发生通信错误。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnClosed">
      <summary>在通信对象转换到正在关闭状态的过程中被调用。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnClosing">
      <summary>在通信对象转换到正在关闭状态的过程中被调用。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnEndClose(System.IAsyncResult)">
      <summary>在关闭通信对象时完成一个异步操作。</summary>
      <param name="result">通过调用 <see cref="M:System.ServiceModel.Channels.CommunicationObject.OnEndClose(System.IAsyncResult)" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
      <exception cref="T:System.InvalidOperationException">通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnEndOpen(System.IAsyncResult)">
      <summary>在打开通信对象时完成一个异步操作。</summary>
      <param name="result">通过调用 <see cref="M:System.ServiceModel.Channels.CommunicationObject.OnEndOpen(System.IAsyncResult)" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
      <exception cref="T:System.InvalidOperationException">通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnFaulted">
      <summary>在调用了同步错误操作，从而引起通信对象转换为出错状态的情况下，该方法插入对通信对象的处理。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnOpen(System.TimeSpan)">
      <summary>在通信对象转换为打开状态（此过程必须在指定时间间隔内完成）后插入对通信对象的处理。</summary>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成打开操作的时间。</param>
      <exception cref="T:System.InvalidOperationException">通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnOpened">
      <summary>在通信对象转换到已打开状态的过程中被调用。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnOpening">
      <summary>在通信对象转换到正在打开状态的过程中被调用。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Open">
      <summary>使通信对象从已创建状态转换到已打开状态。</summary>
      <exception cref="T:System.InvalidOperationException">通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Open(System.TimeSpan)">
      <summary>使通信对象在指定时间间隔内从已创建状态转换到已打开状态。</summary>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成打开操作的时间。</param>
      <exception cref="T:System.InvalidOperationException">通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Opened">
      <summary>当通信对象转换到已打开状态时发生。</summary>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Opening">
      <summary>当通信对象转换到正在打开状态时发生。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.State">
      <summary>获取指示通信对象当前状态的值。</summary>
      <returns>
        <see cref="T:System.ServiceModel.CommunicationState" /> 枚举中的一个值，指示对象的当前状态。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.ThisLock">
      <summary>获取在状态转换过程中保护类实例的相互排斥锁。</summary>
      <returns>在状态转换过程中保护类实例的相互排斥锁。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.CustomBinding">
      <summary>从一个绑定元素列表定义绑定。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.CustomBinding" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Channels.BindingElement})">
      <summary>使用完整通道堆栈中的绑定元素初始化 <see cref="T:System.ServiceModel.Channels.CustomBinding" /> 类的新实例。</summary>
      <param name="bindingElementsInTopDownChannelStackOrder">一个类型为 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中以从上至下的顺序包含通道堆栈的绑定元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingElementsInTopDownChannelStackOrder" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor(System.ServiceModel.Channels.Binding)">
      <summary>从指定绑定的值初始化 <see cref="T:System.ServiceModel.Channels.CustomBinding" /> 类的新实例。</summary>
      <param name="binding">用于初始化自定义绑定的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor(System.ServiceModel.Channels.BindingElement[])">
      <summary>从一个绑定元素数组初始化 <see cref="T:System.ServiceModel.Channels.CustomBinding" /> 类的新实例。</summary>
      <param name="bindingElementsInTopDownChannelStackOrder">用于初始化自定义绑定的类型为 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 的 <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingElementsInTopDownChannelStackOrder" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor(System.String,System.String,System.ServiceModel.Channels.BindingElement[])">
      <summary>从一个具有指定名称和命名空间的绑定元素数组初始化 <see cref="T:System.ServiceModel.Channels.CustomBinding" /> 类的新实例。</summary>
      <param name="name">绑定的名称。</param>
      <param name="ns">绑定的命名空间。</param>
      <param name="bindingElementsInTopDownChannelStackOrder">用于初始化自定义绑定的类型为 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 的 <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingElementsInTopDownChannelStackOrder" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.CreateBindingElements">
      <summary>返回由自定义绑定中的绑定元素构成的泛型集合。</summary>
      <returns>一个类型为 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 的 <see cref="T:System.Collections.Generic.ICollection`1" /> 对象，其中包含自定义绑定中的绑定元素。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CustomBinding.Elements">
      <summary>从自定义绑定获取绑定元素。</summary>
      <returns>一个包含自定义绑定中的绑定元素的 <see cref="T:System.ServiceModel.Channels.BindingElementCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CustomBinding.Scheme">
      <summary>获取由自定义绑定使用的传输 URI 方案。</summary>
      <returns>自定义绑定使用的传输 URI 方案；或者，如果没有传输（<see cref="T:System.ServiceModel.Channels.TransportBindingElement" /> 为 null），则为空字符串。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.FaultConverter">
      <summary>将通道引发的异常转换为符合通道协议的 SOAP 错误消息。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.FaultConverter.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.FaultConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.FaultConverter.GetDefaultFaultConverter(System.ServiceModel.Channels.MessageVersion)">
      <summary>获取默认错误转换器。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.FaultConverter" /> 的一个实例。</returns>
      <param name="version">消息版本。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateException(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.MessageFault,System.Exception@)">
      <summary>尝试创建异常。</summary>
      <returns>如果成功转换了错误，则为 true；否则为 false。 默认值为 false。</returns>
      <param name="message">错误消息。</param>
      <param name="fault">错误。</param>
      <param name="exception">如果转换成功，则为作为 out 参数返回的 SOAP 异常。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateFaultMessage(System.Exception,System.ServiceModel.Channels.Message@)">
      <summary>尝试在错误转换成 SOAP 异常后创建错误消息。</summary>
      <returns>如果成功创建了错误消息，则为 true；否则为 false。 默认值为 false。</returns>
      <param name="exception">SOAP 异常。</param>
      <param name="message">错误消息作为 out 参数返回。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.FaultConverter.TryCreateException(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.MessageFault,System.Exception@)">
      <summary>使用错误检查包装 <see cref="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateException(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.MessageFault,System.Exception@)" />。</summary>
      <returns>如果成功转换了错误，则为 true；否则为 false。 默认值为 false。</returns>
      <param name="message">错误消息。</param>
      <param name="fault">错误。</param>
      <param name="exception">如果转换成功，则为作为 out 参数返回的 SOAP 异常。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 或 <paramref name="fault" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 或 <paramref name="fault" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 或 <paramref name="fault" /> 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.HttpRequestMessageProperty">
      <summary>提供对 HTTP 请求的访问，以访问和响应通过 HTTP 协议提供给请求的附加信息。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpRequestMessageProperty.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.HttpRequestMessageProperty" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpRequestMessageProperty.Headers">
      <summary>从 HTTP 请求获取 HTTP 标头。</summary>
      <returns>返回一个 <see cref="T:System.Net.WebHeaderCollection" />，其中包含 HTTP 请求中的 HTTP 标头。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpRequestMessageProperty.Method">
      <summary>获取或设置 HTTP 请求的 HTTP 谓词。</summary>
      <returns>HTTP 请求的 HTTP 谓词。</returns>
      <exception cref="T:System.ArgumentNullException">值设置为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpRequestMessageProperty.Name">
      <summary>获取与 <see cref="T:System.ServiceModel.Channels.HttpRequestMessageProperty" /> 类关联的消息属性的名称。</summary>
      <returns>值“httpRequest”。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpRequestMessageProperty.QueryString">
      <summary>获取或设置 HTTP 请求的查询字符串。</summary>
      <returns>HTTP 请求中的查询字符串。</returns>
      <exception cref="T:System.ArgumentNullException">值设置为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpRequestMessageProperty.SuppressEntityBody">
      <summary>获取或设置一个值，该值指示是否忽略消息正文并且只发送标头。</summary>
      <returns>如果禁止发送消息正文，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.HttpResponseMessageProperty">
      <summary>提供对 HTTP 响应的访问，以便访问和响应为 HTTP 协议请求提供的附加信息。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpResponseMessageProperty.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.HttpResponseMessageProperty" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpResponseMessageProperty.Headers">
      <summary>从 HTTP 响应中获取 HTTP 标头。</summary>
      <returns>返回一个 <see cref="T:System.Net.WebHeaderCollection" />，它包含 HTTP 响应中的 HTTP 标头。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpResponseMessageProperty.Name">
      <summary>获取与 <see cref="T:System.ServiceModel.Channels.HttpResponseMessageProperty" /> 类关联的消息属性的名称。</summary>
      <returns>返回“httpResponse”。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpResponseMessageProperty.StatusCode">
      <summary>获取或设置附加此属性的当前 HTTP 响应的状态代码。</summary>
      <returns>返回要在 HTTP 响应中发送的 <see cref="P:System.ServiceModel.Channels.HttpResponseMessageProperty.StatusCode" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">设置的值小于 100 或大于 599。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpResponseMessageProperty.StatusDescription">
      <summary>获取或设置附加此属性的当前 HTTP 响应的状态代码说明。</summary>
      <returns>返回要在 HTTP 响应中发送的 <see cref="P:System.ServiceModel.Channels.HttpResponseMessageProperty.StatusDescription" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.HttpsTransportBindingElement">
      <summary>表示用于指定 HTTPS 传输以传输消息的绑定元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpsTransportBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.HttpsTransportBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpsTransportBindingElement.#ctor(System.ServiceModel.Channels.HttpsTransportBindingElement)">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.HttpsTransportBindingElement" /> 类的新实例。</summary>
      <param name="elementToBeCloned">
        <see cref="T:System.ServiceModel.Channels.HttpsTransportBindingElement" /> 类的实例。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpsTransportBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>创建指定类型的可用于创建通道的通道工厂。</summary>
      <returns>指定类型的通道工厂，基于传输绑定元素中设置的值进行了配置。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" /> 成员，描述创建通道工厂所需的绑定、行为、协定和其他信息。</param>
      <typeparam name="TChannel">通道类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 不能为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpsTransportBindingElement.Clone">
      <summary>创建当前绑定元素的副本。</summary>
      <returns>当前绑定元素的副本。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpsTransportBindingElement.Scheme">
      <summary>返回传输的 URI 方案。</summary>
      <returns>返回传输的 URI 方案，即“HTTPS”。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.HttpTransportBindingElement">
      <summary>表示用于指定 HTTP 传输以传输消息的绑定元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.HttpTransportBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.#ctor(System.ServiceModel.Channels.HttpTransportBindingElement)">
      <summary>初始化使用另一个绑定元素的 <see cref="T:System.ServiceModel.Channels.HttpTransportBindingElement" /> 类的新实例。</summary>
      <param name="elementToBeCloned">用于初始化此实例的 <see cref="T:System.ServiceModel.Channels.HttpTransportBindingElement" /> 对象。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>创建可用于创建通道的通道工厂。</summary>
      <returns>具有指定类型的通道工厂。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" /> 成员，描述创建通道工厂所需的绑定、行为、协定和其他信息。</param>
      <typeparam name="TChannel">通道工厂的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 不能为 null。</exception>
      <exception cref="T:System.ArgumentException">传递的参数无效。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>确定是否可生成指定类型的通道工厂。</summary>
      <returns>如果可以生成通道工厂，则为 true；否则为 false。</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> for the channel.</param>
      <typeparam name="TChannel">要检查的通道类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.Clone">
      <summary>创建作为当前绑定元素的副本的新实例。</summary>
      <returns>作为当前绑定元素的副本的新实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>从指定的 <see cref="T:System.ServiceModel.Channels.BindingContext" /> 获取属性。</summary>
      <returns>取自指定 <see cref="T:System.ServiceModel.Channels.BindingContext" /> 的属性。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">要获取的属性的类型。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpTransportBindingElement.MaxBufferSize">
      <summary>获取或设置要使用的缓冲区的最大大小。 对于缓冲的消息，此值与 <see cref="P:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize" /> 相同。 对于经过流处理的消息，此值为必须以缓冲模式读取的 SOAP 标头的最大大小。</summary>
      <returns>缓冲区的最大大小（以字节为单位）。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpTransportBindingElement.Scheme">
      <summary>获取传输的 URI 方案。</summary>
      <returns>一个 <see cref="F:System.Uri.UriSchemeHttp" /> 对象，它表示传输的 URI 方案。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IChannel">
      <summary>定义所有通道对象都必须实现的基本接口。 它要求通道对象实现由所有通信对象共享的状态机接口，还要求通道对象实现从通道堆栈中检索对象的方法。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannel.GetProperty``1">
      <summary>从通道堆栈的适当层返回所请求的类型化对象（如果存在）。</summary>
      <returns>如果存在，则为所请求的类型化对象 <paramref name="T" />，如果不存在，则为 null。</returns>
      <typeparam name="T">方法正在查询的类型化对象。</typeparam>
    </member>
    <member name="T:System.ServiceModel.Channels.IChannelFactory">
      <summary>定义必须由通道工厂实现来生成通道的接口。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannelFactory.GetProperty``1">
      <summary>从通道堆栈的适当层返回所请求的类型化对象（如果存在）。</summary>
      <returns>如果存在，则返回所请求的类型化对象 <paramref name="T" />，如果不存在，则返回 null。</returns>
      <typeparam name="T">方法正在查询的类型化对象。</typeparam>
    </member>
    <member name="T:System.ServiceModel.Channels.IChannelFactory`1">
      <summary>定义必须由创建特定类型通道的通道工厂实现的接口。</summary>
      <typeparam name="TChannel">通道工厂创建的通道的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress)">
      <summary>创建到指定终结点地址的指定类型的通道。</summary>
      <returns>到指定终结点地址的类型为 <paramref name="TChannel" /> 的通道。</returns>
      <param name="to">提供服务位置的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>创建指定类型的通道，该通道通向消息要发送到的指定终结点地址和传输地址。</summary>
      <returns>到指定终结点地址和传输地址的 <paramref name="TChannel" /> 类型的通道。</returns>
      <param name="to">提供服务位置的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <param name="via">
        <see cref="T:System.Uri" />，包含要将消息发送至的传输地址。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.IDuplexChannel">
      <summary>定义通道为发送和接收消息而必须实现的接口。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IDuplexSession">
      <summary>定义会话接口，该接口在消息终结点之间的双向通信的两端实现。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.BeginCloseOutputSession(System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作来终止出站会话。</summary>
      <returns>引用异步出站会话终止的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个 object，它包含该请求的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.BeginCloseOutputSession(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作来终止出站会话，此操作必须在指定超时内完成。</summary>
      <returns>引用异步出站会话终止的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">指定时间间隔的 <see cref="T:System.TimeSpan" />，操作必须在此时间间隔内完成。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个 object，它包含该请求的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.CloseOutputSession">
      <summary>终止出站会话，指示不能再在此会话的关联通道上从此终结点发送消息。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.CloseOutputSession(System.TimeSpan)">
      <summary>终止出站会话，指示在指定时间间隔内，不能再在此会话的关联通道上从此终结点发送消息。</summary>
      <param name="timeout">指定时间间隔的 <see cref="T:System.TimeSpan" />，操作必须在此时间间隔内完成。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.EndCloseOutputSession(System.IAsyncResult)">
      <summary>完成一个异步操作来终止出站会话，指示不能再在此会话的关联通道上从此终结点发送消息。</summary>
      <param name="result">通过调用 <see cref="Overload:System.ServiceModel.Channels.IDuplexSession.BeginCloseOutputSession" /> 方法之一返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.IDuplexSessionChannel">
      <summary>定义将双工通道与会话进行关联的接口。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IHttpCookieContainerManager">
      <summary>表示 Cookie 容器管理器。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.IHttpCookieContainerManager.CookieContainer">
      <summary>获取或设置 Cookie 容器。</summary>
      <returns>Cookie 容器。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IInputChannel">
      <summary>定义通道为接收消息而必须实现的接口。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)">
      <summary>开始用于接收消息的异步操作，该操作具有关联的状态对象。</summary>
      <returns>引用异步消息接收的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，包含与异步操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始用于接收消息的异步操作，该操作具有指定的超时值和状态对象与之关联。</summary>
      <returns>引用异步接收操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">一个 <see cref="T:System.Timespan" />，指定等待消息变为可用所用的时间间隔。</param>
      <param name="callback">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，包含与异步操作相关联的状态信息。</param>
      <exception cref="T:System.TimeoutException">在操作完成前超出指定的 <paramref name="timeout" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的超时小于零。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始用于接收消息的异步操作，该操作具有指定的超时值和状态对象与之关联。</summary>
      <returns>引用异步接收操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">一个 <see cref="T:System.Timespan" />，指定等待消息变为可用所用的时间间隔。</param>
      <param name="callback">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，包含与异步操作相关联的状态信息。</param>
      <exception cref="T:System.TimeoutException">在操作完成前超出指定的 <paramref name="timeout" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的超时小于零。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始异步等待消息到达操作，该操作具有指定的超时值和状态对象与之关联。</summary>
      <returns>引用等待消息到达的异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">一个 <see cref="T:System.Timespan" />，指定等待消息变为可用所用的时间间隔。</param>
      <param name="callback">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，包含与异步操作相关联的状态信息。</param>
      <exception cref="T:System.TimeoutException">在操作完成前超出指定的 <paramref name="timeout" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的超时小于零。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.EndReceive(System.IAsyncResult)">
      <summary>完成用于接收消息的异步操作。</summary>
      <returns>接收到的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="result">通过调用 <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> 方法之一返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)">
      <summary>完成用于接收消息的指定异步操作。</summary>
      <returns>如果在经历指定的时间间隔之前接收到消息，则为 true；否则为 false。</returns>
      <param name="result">通过调用 <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
      <param name="message">接收到的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.EndWaitForMessage(System.IAsyncResult)">
      <summary>完成指定的异步等待消息操作。</summary>
      <returns>如果消息在超出 <paramref name="timeout" /> 之前到达，则为 true；否则为 false。</returns>
      <param name="result">
        <see cref="T:System.IAsyncResult" />，标识要完成的 <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" /> 操作，并且从它检索最终结果。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.IInputChannel.LocalAddress">
      <summary>获取输入通道接收消息的地址。</summary>
      <returns>输入通道接收消息的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.Receive">
      <summary>如果有可用消息，则返回接收到的消息。 如果没有可用消息，则在默认的时间间隔内阻塞。</summary>
      <returns>接收到的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
      <summary>如果有可用消息，则返回接收到的消息。 如果没有可用消息，则在指定的时间间隔内阻塞。</summary>
      <returns>接收到的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="timeout">一个 <see cref="T:System.Timespan" />，指定接收操作的完成时限，在此时限之后操作将超时并引发 <see cref="T:System.TimeoutException" />。</param>
      <exception cref="T:System.TimeoutException">在操作完成前超出指定的 <paramref name="timeout" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的超时小于零。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)">
      <summary>尝试在指定的时间间隔内接收消息。</summary>
      <returns>如果在超出 <paramref name="timeout" /> 之前接收到消息，则为 true；否则为 false。</returns>
      <param name="timeout">通过调用 <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> 方法之一返回的 <see cref="T:System.IAsyncResult" />。</param>
      <param name="message">接收到的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <exception cref="T:System.TimeoutException">在操作完成前超出指定的 <paramref name="timeout" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的超时小于零。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
      <summary>返回一个值，该值指示消息是否在指定的时间间隔内到达。</summary>
      <returns>如果消息在超出 <paramref name="timeout" /> 之前到达，则为 true；否则为 false。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" /> 指定在超时前等待消息到达所用的最大时间间隔。</param>
      <exception cref="T:System.TimeoutException">在操作完成前超出指定的 <paramref name="timeout" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的超时小于零。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.IInputSession">
      <summary>定义在消息传递终结点之间的单向通信的接收端实现的会话的接口。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IInputSessionChannel">
      <summary>定义将输入通道与会话进行关联的接口。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IMessageProperty">
      <summary>定义一个接口，该接口可实现来描述消息的一组属性。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IMessageProperty.CreateCopy">
      <summary>创建当前实例的副本。</summary>
      <returns>作为当前实例副本的 <see cref="T:System.ServiceModel.Channels.IMessageProperty" /> 对象。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IOutputChannel">
      <summary>定义通道为发送消息而必须实现的接口。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.BeginSend(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作，向输出通道的目标传输一条消息。</summary>
      <returns>引用异步消息传输的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">将在输出通道上发送的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，包含与异步发送操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.BeginSend(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作，在指定时间间隔内向输出通道的目标传输消息。</summary>
      <returns>引用异步发送操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">将在输出通道上发送的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成发送操作的时间。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托，接收异步操作完成发送的通知。</param>
      <param name="state">一个由应用程序指定的对象，包含与异步发送操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.EndSend(System.IAsyncResult)">
      <summary>完成一个异步操作，向输出通道的目标传输消息。</summary>
      <param name="result">通过调用 <see cref="Overload:System.ServiceModel.Channels.IOutputChannel.BeginSend" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.IOutputChannel.RemoteAddress">
      <summary>获取在输出通道上发出的消息将要到达的服务的目标。</summary>
      <returns>输出通道发送的消息将要到达的服务的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.Send(System.ServiceModel.Channels.Message)">
      <summary>向输出通道的目标传输一条消息。</summary>
      <param name="message">将在输出通道上发送的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.Send(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>在指定时间间隔内在当前输出通道上发送一条消息。</summary>
      <param name="message">将在输出通道上发送的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成发送操作的时间。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.IOutputChannel.Via">
      <summary>获取 URI，该 URI 包含输出通道发送消息的目标传输地址。</summary>
      <returns>
        <see cref="T:System.Uri" />，包含输出通道发送消息的目标传输地址。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IOutputSession">
      <summary>定义会话接口，该接口在消息终结点之间的单向通信的发送端实现。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IOutputSessionChannel">
      <summary>定义将输出通道与会话进行关联的接口。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IRequestChannel">
      <summary>定义一个协定，通道必须实现该协定，才能成为消息传递终结点之间的请求-回复通信的请求端。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.BeginRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作，将请求消息传送到请求-回复消息交换的回复端。</summary>
      <returns>引用异步消息传输的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">要传送的请求 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托，它接收传送请求消息的异步操作的完成通知。</param>
      <param name="state">一个由应用程序指定的对象，它包含与传送请求消息的异步操作关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.BeginRequest(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作，在指定时间间隔内将请求消息传送到请求-回复消息交换的回复端。</summary>
      <returns>引用异步消息传输的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">要传送的请求 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="timeout">指定时间间隔的 <see cref="T:System.TimeSpan" />，在此时间间隔内必须收到响应。 （有关默认值，请参见“备注”部分。）</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托，它接收传送请求消息的异步操作的完成通知。</param>
      <param name="state">一个由应用程序指定的对象，它包含与传送请求消息的异步操作关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.EndRequest(System.IAsyncResult)">
      <summary>完成异步操作以向传送的请求返回基于消息的响应。</summary>
      <returns>在对请求的响应中收到的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="result">通过调用 <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.IRequestChannel.RemoteAddress">
      <summary>获取请求通道将消息发送到的远程地址。</summary>
      <returns>请求通道将消息发送到的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.Request(System.ServiceModel.Channels.Message)">
      <summary>发送一个基于消息的请求，并返回相关的基于消息的响应。</summary>
      <returns>在对请求的响应中收到的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">要传送的请求 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.Request(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>发送一个基于消息的请求，并在指定的时间间隔内返回相关的基于消息的响应。</summary>
      <returns>在对请求的响应中收到的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">要传送的请求 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="timeout">指定时间间隔的 <see cref="T:System.TimeSpan" />，在此时间间隔内必须收到响应。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.IRequestChannel.Via">
      <summary>获取发送请求的目标传输地址。</summary>
      <returns>
        <see cref="T:System.Uri" />，包含要将消息发送至的传输地址。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IRequestSessionChannel">
      <summary>定义将请求通道与会话进行关联的接口。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.ISession">
      <summary>通过提供通信会话的 ID，定义在交换消息的各方之间建立共享上下文的接口。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.ISession.Id">
      <summary>获取用于唯一标识会话的 ID。</summary>
      <returns>用于唯一标识会话的 ID。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.ISessionChannel`1">
      <summary>定义将通道与特定会话类型进行关联的接口。</summary>
      <typeparam name="TSession">与通道关联的 <see cref="T:System.ServiceModel.Channels.ISession" /> 类型。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.ISessionChannel`1.Session">
      <summary>获取与此通道关联的会话类型。</summary>
      <returns>与此通道关联的 <see cref="T:System.ServiceModel.Channels.ISession" /> 类型。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.LocalClientSecuritySettings">
      <summary>指定本地客户端安全设置。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.LocalClientSecuritySettings.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.LocalClientSecuritySettings" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.LocalClientSecuritySettings.Clone">
      <summary>创建此类的新实例，它是当前实例的一个副本或复本。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.LocalClientSecuritySettings" /> 的新实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalClientSecuritySettings.MaxClockSkew">
      <summary>获取或设置通信双方的系统时钟之间允许的最大时间差异。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，表示进行通信双方的系统时钟之间允许的最大时间差异。 默认值为 5 分钟。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">此属性使用 set 设置为一个小于 0 的值。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalClientSecuritySettings.ReplayWindow">
      <summary>获取或设置消息 Nonce 有效的最长时间。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，表示消息 Nonce 有效的最长时间。 默认值为 5 分钟。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">此属性使用 set 设置为一个小于 0 的值。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalClientSecuritySettings.TimestampValidityDuration">
      <summary>获取或设置消息在由客户端发送时的最长有效时间。 如果服务在此期间后收到消息，应丢弃该消息。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，表示消息在由客户端发送时的最长有效时间。 默认值为 5 分钟。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">此属性使用 set 设置为一个小于 0 的值。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.Message">
      <summary>表示分布式环境中终结点之间的通信单元。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.Message" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.Close">
      <summary>关闭 <see cref="T:System.ServiceModel.Channels.Message" /> 并释放任何资源。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String)">
      <summary>创建一个包含了版本和操作的消息。</summary>
      <returns>所创建消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="version">一个 <see cref="T:System.ServiceModel.Channels.MessageVersion" /> 对象，指定要用于消息的 SOAP 版本。</param>
      <param name="action">有关应如何处理消息的说明。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> 或 <paramref name="action" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.Object)">
      <summary>使用指定的版本、操作和正文创建消息。</summary>
      <returns>所创建消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="version">一个 <see cref="T:System.ServiceModel.Channels.MessageVersion" /> 对象，指定要用于消息的 SOAP 版本。</param>
      <param name="action">有关应如何处理消息的说明。</param>
      <param name="body">消息的正文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />、<paramref name="action" /> 或 <paramref name="body" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>使用指定的版本、操作、消息正文和序列化程序创建消息。</summary>
      <returns>所创建消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="version">一个 <see cref="T:System.ServiceModel.Channels.MessageVersion" /> 对象，指定要用于消息的 SOAP 版本。</param>
      <param name="action">有关应如何处理消息的说明。</param>
      <param name="body">消息的正文。</param>
      <param name="serializer">用于序列化该消息的 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> 方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />、<paramref name="fault" /> 或 <paramref name="action" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.ServiceModel.Channels.BodyWriter)">
      <summary>创建一个正文包含字节数组的消息。</summary>
      <returns>所创建消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="version">一个 <see cref="T:System.ServiceModel.Channels.MessageVersion" /> 对象，指定要用于消息的 SOAP 版本。</param>
      <param name="action">有关应如何处理消息的说明。</param>
      <param name="body">一个类型为 byte 的 <see cref="T:System.ServiceModel.Channels.BodyWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Version" />、<paramref name="action" /> 或 <paramref name="body" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.Xml.XmlDictionaryReader)">
      <summary>使用指定的版本、操作和正文创建消息。</summary>
      <returns>所创建消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="version">一个 <see cref="T:System.ServiceModel.Channels.MessageVersion" /> 对象，指定要用于消息的 SOAP 版本。</param>
      <param name="action">有关应如何处理消息的说明。</param>
      <param name="body">消息的正文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />、<paramref name="action" /> 或 <paramref name="body" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.Xml.XmlReader)">
      <summary>使用指定的读取器、操作和版本创建消息。</summary>
      <returns>所创建消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="version">一个 <see cref="T:System.ServiceModel.Channels.MessageVersion" /> 对象，指定要用于消息的 SOAP 版本。</param>
      <param name="action">有关应如何处理消息的说明。</param>
      <param name="body">要用于读取 SOAP 消息的 <see cref="T:System.Xml.XmlReader" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />、<paramref name="action" /> 或 <paramref name="body" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.GetBody``1">
      <summary>检索此 <see cref="T:System.ServiceModel.Channels.Message" /> 实例的正文。</summary>
      <returns>一个类型为 <paramref name="T" /> 的对象，其中包含此消息的正文。</returns>
      <typeparam name="T">消息的正文。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.GetBody``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>使用指定的序列化程序检索此 <see cref="T:System.ServiceModel.Channels.Message" /> 的正文。</summary>
      <returns>一个类型为 <paramref name="T" /> 的对象，其中包含此消息的正文。</returns>
      <param name="serializer">用于读取消息的正文的 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> 对象。</param>
      <typeparam name="T">消息的正文。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializer" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.GetBodyAttribute(System.String,System.String)">
      <summary>检索消息正文的属性。</summary>
      <returns>消息正文的属性。</returns>
      <param name="localName">XML 节点的本地名称。 与此成员对应的元素的名称。 此字符串必须是有效的 XML 元素名称。</param>
      <param name="ns">此 XML 元素所属的命名空间。 与此成员对应的元素的命名空间 URI。 此系统不验证传输地址以外的任何 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localName" /> 或 <paramref name="ns" /> 为 null。</exception>
      <exception cref="T:System.ObjectDisposedException">消息已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">已复制、读取或写入消息。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.GetReaderAtBodyContents">
      <summary>获取访问此消息正文内容的 XML 字典读取器。</summary>
      <returns>访问此消息正文内容的 <see cref="T:System.Xml.XmlDictionaryReader" /> 对象。</returns>
      <exception cref="T:System.ObjectDisposedException">消息已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">消息为空，或已复制、读取或写入。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.Headers">
      <summary>在派生类中重写时，获取消息的标头。</summary>
      <returns>一个表示消息头的 <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> 对象。</returns>
      <exception cref="T:System.ObjectDisposedException">消息已释放。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.IsDisposed">
      <summary>返回一个值，该值指示是否已释放 <see cref="T:System.ServiceModel.Channels.Message" />。</summary>
      <returns>如果消息已释放，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.IsEmpty">
      <summary>返回一个值，该值指示 <see cref="T:System.ServiceModel.Channels.Message" /> 是否为空。</summary>
      <returns>如果消息为空，则为 true；否则为 false。</returns>
      <exception cref="T:System.ObjectDisposedException">消息已释放。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.IsFault">
      <summary>获取一个值，该值指示此消息是否会生成任何 SOAP 错误。</summary>
      <returns>如果此消息生成了任何 SOAP 错误，则为 true；否则为 false。</returns>
      <exception cref="T:System.ObjectDisposedException">消息已释放。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnBodyToString(System.Xml.XmlDictionaryWriter)">
      <summary>消息正文转换成字符串时调用。</summary>
      <param name="writer">一个用于将消息正文转换成字符串的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnClose">
      <summary>在关闭消息时调用。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnGetBodyAttribute(System.String,System.String)">
      <summary>检索消息正文的属性时调用。</summary>
      <returns>消息正文的属性。</returns>
      <param name="localName">XML 节点的本地名称。 与此成员对应的元素的名称。 此字符串必须是有效的 XML 元素名称。</param>
      <param name="ns">此 XML 元素所属的命名空间。 与此成员对应的元素的命名空间 URI。 此系统不验证传输地址以外的任何 URI。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnGetReaderAtBodyContents">
      <summary>当一个访问这条消息的征文内容的 XML 字典读取器被检索时，调用。</summary>
      <returns>访问此消息正文内容的 <see cref="T:System.Xml.XmlDictionaryReader" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteBodyContents(System.Xml.XmlDictionaryWriter)">
      <summary>将消息正文写入 XML 文件时调用。</summary>
      <param name="writer">用于将此消息正文写入 XML 文件的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteMessage(System.Xml.XmlDictionaryWriter)">
      <summary>将整个消息写入 XML 文件时调用。</summary>
      <param name="writer">用于将此消息写入 XML 文件的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteStartBody(System.Xml.XmlDictionaryWriter)">
      <summary>将开始正文写入 XML 文件时调用。</summary>
      <param name="writer">用于将开始正文写入 XML 文件的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteStartEnvelope(System.Xml.XmlDictionaryWriter)">
      <summary>将开始信封写入 XML 文件时调用。</summary>
      <param name="writer">用于将开始信封写入 XML 文件的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteStartHeaders(System.Xml.XmlDictionaryWriter)">
      <summary>将开始标头写入 XML 文件时调用。</summary>
      <param name="writer">用于将开始标头写入 XML 文件的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.Properties">
      <summary>在派生类中重写时，获取消息的处理级别批注集。</summary>
      <returns>一个包含消息处理级别批注集的 <see cref="T:System.ServiceModel.Channels.MessageProperties" />。</returns>
      <exception cref="T:System.ObjectDisposedException">消息已释放。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.State">
      <summary>获取此 <see cref="T:System.ServiceModel.Channels.Message" /> 的当前状态。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.MessageState" />，包含了此 <see cref="T:System.ServiceModel.Channels.Message" /> 的当前状态。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.System#IDisposable#Dispose">
      <summary>关闭此消息使用的所有资源。 不能继承此方法。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.ToString">
      <summary>返回表示当前 <see cref="T:System.ServiceModel.Channels.Message" /> 实例的字符串。</summary>
      <returns>当前 <see cref="T:System.ServiceModel.Channels.Message" /> 实例的字符串表示形式。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.Version">
      <summary>在派生类中重写时，获取消息的 SOAP 版本。</summary>
      <returns>一个表示 SOAP 版本的 <see cref="T:System.ServiceModel.Channels.MessageVersion" /> 对象。</returns>
      <exception cref="T:System.ObjectDisposedException">消息已释放。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteBody(System.Xml.XmlDictionaryWriter)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 写入正文元素。</summary>
      <param name="writer">一个要用于写入正文元素的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteBody(System.Xml.XmlWriter)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 序列化消息正文。</summary>
      <param name="writer">要用于写入消息正文的 <see cref="T:System.Xml.XmlWriter" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
      <exception cref="T:System.ObjectDisposedException">消息已释放。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteBodyContents(System.Xml.XmlDictionaryWriter)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 序列化正文内容。</summary>
      <param name="writer">一个要用于写入正文元素的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer " />为 null。</exception>
      <exception cref="T:System.ObjectDisposedException">消息已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">已复制、读取或写入消息。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteMessage(System.Xml.XmlDictionaryWriter)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 序列化整个消息。</summary>
      <param name="writer">一个要用于写入消息的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
      <exception cref="T:System.ObjectDisposedException">消息已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">已复制、读取或写入消息。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteMessage(System.Xml.XmlWriter)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 序列化整个消息。</summary>
      <param name="writer">要用于写入整个消息的 <see cref="T:System.Xml.XmlWriter" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
      <exception cref="T:System.ObjectDisposedException">消息已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">已复制、读取或写入消息。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteStartBody(System.Xml.XmlDictionaryWriter)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 序列化消息的起始正文。</summary>
      <param name="writer">一个要用于写入开始正文的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteStartBody(System.Xml.XmlWriter)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 序列化消息的起始正文。</summary>
      <param name="writer">要用于写入消息开始正文的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteStartEnvelope(System.Xml.XmlDictionaryWriter)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 序列化开始信封。</summary>
      <param name="writer">一个要用于写入开始信封的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer " />为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageBuffer">
      <summary>表示一个内存缓冲区，该内存缓冲区存储了未来要使用的整个消息。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageBuffer.BufferSize">
      <summary>获取此 <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> 使用的近似字节数。</summary>
      <returns>此 <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> 使用的近似字节数。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.Close">
      <summary>缓冲区使用完毕。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.CreateMessage">
      <summary>返回原始消息的副本。</summary>
      <returns>一个原始 <see cref="T:System.ServiceModel.Channels.Message" /> 实例的相同副本，您先前将此实例提供给 <see cref="T:System.ServiceModel.Channels.Message" /> 实例的 <see cref="M:System.ServiceModel.Channels.Message.CreateBufferedCopy(System.Int32)" /> 方法。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageBuffer.MessageContentType">
      <summary>获取存储在此缓冲区中消息内容的类型。</summary>
      <returns>存储在此缓冲区中消息内容的类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.System#IDisposable#Dispose">
      <summary>释放由 <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> 占用的非托管资源，还可以另外再释放托管资源。 不能继承此方法。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.WriteMessage(System.IO.Stream)">
      <summary>将此缓冲区中的整个内容写入指定的 IO 流。</summary>
      <param name="stream">一个 IO 流，此缓冲区中的整个内容都会写入此 IO 流。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageEncoder">
      <summary>编码器是用于将消息写入到流中并从流中读取消息的组件。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.MessageEncoder" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoder.ContentType">
      <summary>在派生类中重写时，获取编码器使用的 MIME 内容类型。</summary>
      <returns>受消息编码器支持的内容类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.GetProperty``1">
      <summary>从通道堆栈的适当层返回所请求的类型化对象（如果存在）。</summary>
      <returns>如果存在，则为所请求类型化对象 <paramref name="T" />，如果不存在，则为 null。</returns>
      <typeparam name="T">方法正在查询的类型化对象。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.IsContentTypeSupported(System.String)">
      <summary>返回一个值，该值指示消息编码器是否支持指定的消息级内容类型值。</summary>
      <returns>如果支持指定的消息级内容类型，则为 true；否则为 false。</returns>
      <param name="contentType">所测试的消息级内容类型。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoder.MediaType">
      <summary>在派生类中重写时，获取编码器使用的媒体类型值。</summary>
      <returns>受消息编码器支持的媒体类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoder.MessageVersion">
      <summary>在派生类中重写时，获取编码器使用的消息版本值。</summary>
      <returns>编码器使用的 <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager)">
      <summary>在派生类中重写时，从指定的缓冲区中读取一条消息。</summary>
      <returns>从指定的缓冲区中读取的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="buffer">一个类型为 <see cref="T:System.Byte" /> 的 <see cref="T:System.ArraySegment`1" />，它提供从中反序列化消息的缓冲区。</param>
      <param name="bufferManager">
        <see cref="T:System.ServiceModel.Channels.BufferManager" />，管理从中反序列化消息的缓冲区。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager,System.String)">
      <summary>在派生类中重写时，从指定的流中读取一条消息。</summary>
      <returns>从指定的流中读取的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="buffer">一个类型为 <see cref="T:System.Byte" /> 的 <see cref="T:System.ArraySegment`1" />，它提供从中反序列化消息的缓冲区。</param>
      <param name="bufferManager">
        <see cref="T:System.ServiceModel.Channels.BufferManager" />，管理从中反序列化消息的缓冲区。</param>
      <param name="contentType">多用途 Internet 邮件扩展 (MIME) 消息级内容类型。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.IO.Stream,System.Int32)">
      <summary>在派生类中重写时，从指定的流中读取一条消息。</summary>
      <returns>从指定的流中读取的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="stream">从中读取消息的 <see cref="T:System.IO.Stream" /> 对象。</param>
      <param name="maxSizeOfHeaders">可从消息中读取的标头的最大大小。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.IO.Stream,System.Int32,System.String)">
      <summary>在派生类中重写时，从指定的流中读取一条消息。</summary>
      <returns>从指定的流中读取的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="stream">从中读取消息的 <see cref="T:System.IO.Stream" /> 对象。</param>
      <param name="maxSizeOfHeaders">可从消息中读取的标头的最大大小。</param>
      <param name="contentType">多用途 Internet 邮件扩展 (MIME) 消息级内容类型。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ToString">
      <summary>返回消息编码器使用的内容类型。</summary>
      <returns>消息编码器使用的内容类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager)">
      <summary>将小于指定大小的消息写入字节数组缓冲区。</summary>
      <returns>一个类型为 byte 的 <see cref="T:System.ArraySegment`1" />，它提供将消息序列化到的缓冲区。</returns>
      <param name="message">要写入消息缓冲区的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="maxMessageSize">可写入的最大消息大小。</param>
      <param name="bufferManager">
        <see cref="T:System.ServiceModel.Channels.BufferManager" />，管理将消息写入到的缓冲区。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager,System.Int32)">
      <summary>在派生类中重写时，将小于指定大小的消息按指定的偏移量写入字节数组缓冲区。</summary>
      <returns>一个类型为 byte 的 <see cref="T:System.ArraySegment`1" />，它提供将消息序列化到的缓冲区。</returns>
      <param name="message">要写入消息缓冲区的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="maxMessageSize">可写入的最大消息大小。</param>
      <param name="bufferManager">
        <see cref="T:System.ServiceModel.Channels.BufferManager" />，管理将消息写入到的缓冲区。</param>
      <param name="messageOffset">从提供缓冲区的字节数组开头开始的段的偏移量。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.IO.Stream)">
      <summary>在派生类中重写时，将消息写入指定的流中。</summary>
      <param name="message">要写入 <paramref name="stream" /> 的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="stream">
        <paramref name="message" /> 要写入的 <see cref="T:System.IO.Stream" /> 对象。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageEncoderFactory">
      <summary>一个抽象基类，表示用于生成消息编码器的工厂，消息编码器可从流中读取消息和将消息写入流以进行多种类型的消息编码。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoderFactory.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.MessageEncoderFactory" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoderFactory.CreateSessionEncoder">
      <summary>返回一个消息编码器，可用于关联基于会话的交换中的消息。</summary>
      <returns>在基于会话的消息交换中使用的 <see cref="T:System.ServiceModel.Channels.MessageEncoder" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoderFactory.Encoder">
      <summary>在派生类中重写时，获取工厂生成的消息编码器。</summary>
      <returns>工厂使用的 <see cref="T:System.ServiceModel.Channels.MessageEncoder" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoderFactory.MessageVersion">
      <summary>在派生类中重写时，获取工厂生成用于编码消息的编码器所使用的消息版本。</summary>
      <returns>工厂使用的 <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageEncodingBindingElement">
      <summary>用于指定对消息进行编码时所用消息版本的绑定元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.MessageEncodingBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElement.#ctor(System.ServiceModel.Channels.MessageEncodingBindingElement)">
      <summary>初始化从现有元素初始化的 <see cref="T:System.ServiceModel.Channels.MessageEncodingBindingElement" /> 类的新实例。</summary>
      <param name="elementToBeCloned">要克隆的 <see cref="T:System.ServiceModel.Channels.MessageEncodingBindingElement" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElement.CreateMessageEncoderFactory">
      <summary>在派生类中重写时，创建工厂以生成消息编码器。</summary>
      <returns>用于生成消息编码器的 <see cref="T:System.ServiceModel.Channels.MessageEncoderFactory" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>从通道堆栈的适当层，返回所请求的类型化对象（如果存在）。</summary>
      <returns>如果存在，则为所请求的类型化对象 <paramref name="T" />，如果不存在，则为 null。</returns>
      <param name="context">当前绑定元素的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">方法正在查询的类型化对象。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncodingBindingElement.MessageVersion">
      <summary>在派生类中重写时，获取或设置可由消息编码器工厂所生成消息编码器处理的消息版本。</summary>
      <returns>由消息编码器工厂所生成编码器使用的 <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageFault">
      <summary>表示 SOAP 错误在内存中的表示形式，该错误可以传递到 <see cref="Overload:System.ServiceModel.Channels.Message.CreateMessage" /> 以创建包含错误的消息。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.#ctor">
      <summary>在派生类中调用时，初始化 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageFault.Actor">
      <summary>获取或设置操作者的值。</summary>
      <returns>操作者的值。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageFault.Code">
      <summary>获取 SOAP 错误代码。</summary>
      <returns>一个包含 SOAP 错误代码的 <see cref="T:System.ServiceModel.FaultCode" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.CreateFault(System.ServiceModel.Channels.Message,System.Int32)">
      <summary>返回一个新 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 对象，该对象使用指定的 <see cref="T:System.ServiceModel.Channels.Message" /> 和指定的消息缓冲区最大缓冲区大小。</summary>
      <returns>具有在参数中传递的初始值的 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 对象。</returns>
      <param name="message">要用于创建 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 对象的指定 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="maxBufferSize">指定的消息缓冲区最大缓冲区大小</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.GetDetail``1">
      <summary>返回消息错误的详细信息对象。</summary>
      <returns>消息错误的详细信息对象。</returns>
      <typeparam name="T">详细信息对象的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.GetDetail``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>返回使用指定的 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> 的详细信息对象。</summary>
      <returns>包含在 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 中的详细信息对象。</returns>
      <param name="serializer">在反序列化详细信息对象时要使用的 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</param>
      <typeparam name="T">详细信息对象的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.GetReaderAtDetailContents">
      <summary>返回一个 <see cref="T:System.Xml.XmlDictionaryReader" /> 对象，该对象定位于 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 的详细信息对象。</summary>
      <returns>一个 <see cref="T:System.Xml.XmlDictionaryReader" /> 对象，该对象定位于 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 的详细信息对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageFault.HasDetail">
      <summary>获取一个值，该值指示 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 是否有详细信息对象。</summary>
      <returns>如果 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 有详细信息对象，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageFault.Node">
      <summary>获取该 SOAP 节点包含有关消息路径中哪个 SOAP 节点造成错误的信息。</summary>
      <returns>该 SOAP 节点包含有关消息路径中哪个 SOAP 节点造成错误的信息。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.OnGetReaderAtDetailContents">
      <summary>当在派生类中调用时，返回一个 <see cref="T:System.Xml.XmlDictionaryReader" /> 对象，该对象定位于 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 的详细信息对象。</summary>
      <returns>一个 <see cref="T:System.Xml.XmlDictionaryReader" /> 对象，该对象定位于 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 的详细信息对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.OnWriteDetail(System.Xml.XmlDictionaryWriter,System.ServiceModel.EnvelopeVersion)">
      <summary>在写入详细内容之前调用。</summary>
      <param name="writer">用于写入详细信息元素的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="version">要写入的 SOAP 信封的版本。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.OnWriteDetailContents(System.Xml.XmlDictionaryWriter)">
      <summary>在非抽象派生类中重写时，写入详细信息元素的内容。</summary>
      <param name="writer">用于写入详细信息元素的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.OnWriteStartDetail(System.Xml.XmlDictionaryWriter,System.ServiceModel.EnvelopeVersion)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 和 SOAP 信封版本写入开始元素。</summary>
      <param name="writer">用于写入详细信息元素的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="version">要写入的 SOAP 信封的版本。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageFault.Reason">
      <summary>获取 SOAP 错误的文本说明。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.FaultReason" />，包含 SOAP 错误的文本说明。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageHeader">
      <summary>表示 SOAP 标头的内容。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.MessageHeader" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeader.Actor">
      <summary>获取或设置消息头的目标接收方。</summary>
      <returns>消息头的目标接收方。 默认值为空字符串 ("")。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object)">
      <summary>创建具有指定数据的新消息头。</summary>
      <returns>一个具有指定数据的新 <see cref="T:System.ServiceModel.Channels.MessageHeader" /> 对象。</returns>
      <param name="name">标头 XML 元素的本地名称。</param>
      <param name="ns">标头 XML 元素的命名空间 URI。</param>
      <param name="value">要创建的标头的内容。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Boolean)">
      <summary>创建具有指定数据的新消息头。</summary>
      <returns>一个具有指定数据的新 <see cref="T:System.ServiceModel.Channels.MessageHeader" /> 对象。</returns>
      <param name="name">标头 XML 元素的本地名称。</param>
      <param name="ns">标头 XML 元素的命名空间 URI。</param>
      <param name="value">要创建的标头的内容。</param>
      <param name="mustUnderstand">一个值，指示是否必须理解该标头。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Boolean,System.String)">
      <summary>创建具有指定数据的新消息头。</summary>
      <returns>一个具有指定数据的新 <see cref="T:System.ServiceModel.Channels.MessageHeader" /> 对象。</returns>
      <param name="name">标头 XML 元素的本地名称。</param>
      <param name="ns">标头 XML 元素的命名空间 URI。</param>
      <param name="value">要创建的标头的内容。</param>
      <param name="mustUnderstand">一个值，指示是否必须理解该标头。</param>
      <param name="actor">消息头的目标接收方。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Boolean,System.String,System.Boolean)">
      <summary>创建具有指定数据的新消息头。</summary>
      <returns>一个具有指定数据的新 <see cref="T:System.ServiceModel.Channels.MessageHeader" /> 对象。</returns>
      <param name="name">标头 XML 元素的本地名称。</param>
      <param name="ns">标头 XML 元素的命名空间 URI。</param>
      <param name="value">要创建的标头的内容。</param>
      <param name="mustUnderstand">一个值，指示是否必须理解该标头。</param>
      <param name="actor">消息头的目标接收方。</param>
      <param name="relay">一个值，指示是否应该中继标头。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>使用 XmlFormatter 从要序列化的对象创建标头。</summary>
      <returns>一个具有指定数据的新 <see cref="T:System.ServiceModel.Channels.MessageHeader" /> 对象。</returns>
      <param name="name">标头 XML 元素的本地名称。</param>
      <param name="ns">标头 XML 元素的命名空间 URI。</param>
      <param name="value">要创建的标头的内容。</param>
      <param name="serializer">一个 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />，用于序列化标头。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer,System.Boolean)">
      <summary>创建具有指定数据的新消息头。</summary>
      <returns>一个具有指定数据的新 <see cref="T:System.ServiceModel.Channels.MessageHeader" /> 对象。</returns>
      <param name="name">标头 XML 元素的本地名称。</param>
      <param name="ns">标头 XML 元素的命名空间 URI。</param>
      <param name="value">要创建的标头的内容。</param>
      <param name="serializer">一个 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />，用于序列化标头。</param>
      <param name="mustUnderstand">一个值，指示是否必须理解该标头。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer,System.Boolean,System.String)">
      <summary>创建具有指定数据的新消息头。</summary>
      <returns>一个具有指定数据的新 <see cref="T:System.ServiceModel.Channels.MessageHeader" /> 对象。</returns>
      <param name="name">标头 XML 元素的本地名称。</param>
      <param name="ns">标头 XML 元素的命名空间 URI。</param>
      <param name="value">要创建的标头的内容。</param>
      <param name="serializer">一个 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />，用于序列化标头。</param>
      <param name="mustUnderstand">一个值，指示是否必须理解该标头。</param>
      <param name="actor">消息头的目标接收方。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer,System.Boolean,System.String,System.Boolean)">
      <summary>创建具有指定数据的新消息头。</summary>
      <returns>一个具有指定数据的新 <see cref="T:System.ServiceModel.Channels.MessageHeader" /> 对象。</returns>
      <param name="name">标头 XML 元素的本地名称。</param>
      <param name="ns">标头 XML 元素的命名空间 URI。</param>
      <param name="value">要创建的标头的内容。</param>
      <param name="serializer">一个 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />，用于序列化标头。</param>
      <param name="mustUnderstand">一个值，指示是否必须理解该标头。</param>
      <param name="actor">消息头的目标接收方。</param>
      <param name="relay">一个值，指示是否应该中继标头。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.IsMessageVersionSupported(System.ServiceModel.Channels.MessageVersion)">
      <summary>验证是否支持指定的消息版本。</summary>
      <returns>如果支持指定的消息版本，则为 true；否则为 false。</returns>
      <param name="messageVersion">包含与 SOAP 版本（与消息及其交换关联）相关的信息的对象。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeader.IsReferenceParameter">
      <summary>获取一个值，该值指定此消息头是否包含终结点引用的引用参数。</summary>
      <returns>如果此消息头包含终结点引用的引用参数，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeader.MustUnderstand">
      <summary>获取或设置一个值，该值指示是否必须按照 SOAP 1.1/1.2 规范解释标头。</summary>
      <returns>如果必须理解标头，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.OnWriteHeaderContents(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>在使用指定的 XML 编写器序列化标头内容时调用。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 用于序列化标头内容。</param>
      <param name="messageVersion">包含与 SOAP 版本（与消息及其交换关联）相关的信息的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.OnWriteStartHeader(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>在使用指定的 XML 编写器序列化开始标头时调用。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 用于序列化开始标头。</param>
      <param name="messageVersion">包含与 SOAP 版本（与消息及其交换关联）相关的信息的对象。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeader.Relay">
      <summary>获取一个值，该值指示是否应该中继标头。</summary>
      <returns>如果应该中继标头，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.ToString">
      <summary>返回该消息标头的字符串表示。</summary>
      <returns>该消息标头的字符串表示。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteHeader(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>使用指定的 XML 编写器序列化标头。</summary>
      <param name="writer">一个 <see cref="T:System.Xml.XmlDictionaryWriter" />，用于序列化标头。</param>
      <param name="messageVersion">包含与 SOAP 版本（与消息及其交换关联）相关的信息的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteHeader(System.Xml.XmlWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>使用指定的 XML 编写器序列化标头。</summary>
      <param name="writer">一个 <see cref="T:System.Xml.XmlWriter" />，用于序列化标头。</param>
      <param name="messageVersion">包含与 SOAP 版本（与消息及其交换关联）相关的信息的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteHeaderAttributes(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>使用指定的 XML 编写器序列化标头特性。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 用于序列化标头特性。</param>
      <param name="messageVersion">包含与 SOAP 版本（与消息及其交换关联）相关的信息的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteHeaderContents(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>使用指定的 XML 编写器序列化标头内容。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 用于序列化标头内容。</param>
      <param name="messageVersion">包含与 SOAP 版本（与消息及其交换关联）相关的信息的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteStartHeader(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>使用指定的 XML 编写器序列化开始标头。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 用于序列化开始标头。</param>
      <param name="messageVersion">该对象包含与 SOAP 版本相关的信息，该版本与消息及其交换关联。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageHeaderInfo">
      <summary>表示与 SOAP 消息头有关的系统信息。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaderInfo.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.MessageHeaderInfo" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.Actor">
      <summary>获取或设置消息头的目标接收方。</summary>
      <returns>一个URI，指示消息头的目标接收方。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.IsReferenceParameter">
      <summary>获取一个值，该值指定消息头是否表示终结点引用的引用参数。</summary>
      <returns>如果消息头表示终结点引用的引用参数，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.MustUnderstand">
      <summary>获取或设置一个值，该值指示对消息头的处理是强制的还是可选的。</summary>
      <returns>如果强制要求进行消息头处理，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.Name">
      <summary>获取消息头的名称。</summary>
      <returns>消息头的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.Namespace">
      <summary>获取消息头的命名空间。</summary>
      <returns>消息头的命名空间。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.Relay">
      <summary>获取或设置一个值，该值指示消息头是否可中转。</summary>
      <returns>如果消息头可中转，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageHeaders">
      <summary>表示消息的消息头集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.#ctor(System.ServiceModel.Channels.MessageHeaders)">
      <summary>使用指定的消息头集合初始化 <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> 类的新实例。</summary>
      <param name="collection">一个消息头集合。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.#ctor(System.ServiceModel.Channels.MessageVersion)">
      <summary>使用指定的消息版本初始化 <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> 类的新实例。</summary>
      <param name="version">消息的 SOAP 版本。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.#ctor(System.ServiceModel.Channels.MessageVersion,System.Int32)">
      <summary>使用指定的消息版本和大小初始化 <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> 类的新实例。</summary>
      <param name="version">消息的 SOAP 版本。</param>
      <param name="initialSize">标头的大小。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.Action">
      <summary>获取或设置应如何处理消息的说明。</summary>
      <returns>有关应如何处理消息的说明。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.Add(System.ServiceModel.Channels.MessageHeader)">
      <summary>将指定的消息头添加到集合。</summary>
      <param name="header">将消息标头添加到集合中。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.Clear">
      <summary>从集合中移除所有标头。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyHeaderFrom(System.ServiceModel.Channels.Message,System.Int32)">
      <summary>将位于指定索引位置的标头内容从指定的消息复制到此实例。</summary>
      <param name="message">复制而来的标头中的消息。</param>
      <param name="headerIndex">从中复制内容的原始消息头位置。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyHeaderFrom(System.ServiceModel.Channels.MessageHeaders,System.Int32)">
      <summary>将位于指定索引位置的标头内容从指定的消息头集合复制到此实例。</summary>
      <param name="collection">一个 <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> 集合对象。</param>
      <param name="headerIndex">从中复制内容的原始消息头位置。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyHeadersFrom(System.ServiceModel.Channels.Message)">
      <summary>将所有标头的内容从指定的消息复制到此实例。</summary>
      <param name="message">复制而来的标头中的消息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyHeadersFrom(System.ServiceModel.Channels.MessageHeaders)">
      <summary>将内容从指定的标头集合复制到此实例。</summary>
      <param name="collection">将标头复制到此实例中的 <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> 集合对象。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyTo(System.ServiceModel.Channels.MessageHeaderInfo[],System.Int32)">
      <summary>将标头从此集合复制到一个数组中，并从该数组的某个特定索引位置开始。</summary>
      <param name="array">一个一维数组，它是从此实例复制的消息头对象的目标。 该数组必须具有从零开始的索引。</param>
      <param name="index">复制开始时所在的数组中的从零开始的索引。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.Count">
      <summary>获取此集合中的消息头数。</summary>
      <returns>此集合中的消息头数。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.FaultTo">
      <summary>获取或设置错误应发送到的节点地址。</summary>
      <returns>错误应发送到的节点 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.FindHeader(System.String,System.String)">
      <summary>使用标头元素的指定 LocalName 和命名空间 URI 在此集合中查找消息头。</summary>
      <returns>如果找到，为在该集合中的信息标头的索引，如果指定的标头不存在则为 -1。</returns>
      <param name="name">标头 XML 元素的 LocalName。</param>
      <param name="ns">标头 XML 元素的命名空间 URI。</param>
      <exception cref="T:System.ArgumentNullException">参数为 null。</exception>
      <exception cref="T:System.ServiceModel.MessageHeaderException">由参数指定的标题存在多次。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.FindHeader(System.String,System.String,System.String[])">
      <summary>使用标头元素的指定 LocalName、命名空间 URI 和操作者在此集合中查找消息头。</summary>
      <returns>如果找到，为在该集合中的信息标头的索引，如果指定的标头不存在则为 -1。</returns>
      <param name="name">标头 XML 元素的 LocalName。</param>
      <param name="ns">标头 XML 元素的命名空间 URI。</param>
      <param name="actors">消息头的目标接收方。</param>
      <exception cref="T:System.ArgumentNullException">参数为 null。</exception>
      <exception cref="T:System.ServiceModel.MessageHeaderException">由参数指定的标题存在多次。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.From">
      <summary>获取或设置发送消息的节点地址。</summary>
      <returns>发送消息的节点 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetEnumerator">
      <summary>返回迭代集合的一个枚举数。 不能继承此方法。</summary>
      <returns>一个可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.Int32)">
      <summary>在此集合中检索位于特定位置的消息头。</summary>
      <returns>指定索引处的消息标头。</returns>
      <param name="index">要获取的标头的从零开始的索引。</param>
      <typeparam name="T">消息头的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.Int32,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>在此集合中检索位于特定位置的消息头。</summary>
      <returns>指定索引处的消息标头。</returns>
      <param name="index">要获取的标头的从零开始的索引。</param>
      <param name="serializer">一个 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />，用于序列化标头。</param>
      <typeparam name="T">消息头的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.String,System.String)">
      <summary>使用标头元素的指定 LocalName 和命名空间 URI 在此集合中查找消息头。</summary>
      <returns>指定名称的消息标头。</returns>
      <param name="name">标头 XML 元素的 LocalName。</param>
      <param name="ns">标头 XML 元素的命名空间 URI。</param>
      <typeparam name="T">消息头的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.String,System.String,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>使用指定 LocalName、命名空间 URI 和序列化程序在此集合中检索消息头。</summary>
      <returns>指定名称的消息标头。</returns>
      <param name="name">标头 XML 元素的 LocalName。</param>
      <param name="ns">标头 XML 元素的命名空间 URI。</param>
      <param name="serializer">一个 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />，用于序列化标头。</param>
      <typeparam name="T">消息头的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.String,System.String,System.String[])">
      <summary>使用标头元素的指定 LocalName、命名空间 URI 和操作者在此集合中检索消息头。</summary>
      <returns>指定名称的消息标头。</returns>
      <param name="name">标头 XML 元素的 LocalName。</param>
      <param name="ns">标头 XML 元素的命名空间 URI。</param>
      <param name="actors">消息头的目标接收方。</param>
      <typeparam name="T">消息头的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetReaderAtHeader(System.Int32)">
      <summary>获取一个 XML 字典读取器，该读取器使用位于集合中指定位置的消息头。</summary>
      <returns>一个 <see cref="T:System.Xml.XmlDictionaryReader" /> 对象，它使用位于集合中指定位置的消息头。</returns>
      <param name="headerIndex">要获取的标头的从零开始的索引。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.HaveMandatoryHeadersBeenUnderstood">
      <summary>验证是否已正确解释和处理了所有标记为 MustUnderstand 的消息头。</summary>
      <returns>如果 <paramref name="actors" /> 指定的接收方已正确解释和处理了所有标记为 MustUnderstand 的消息头，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.HaveMandatoryHeadersBeenUnderstood(System.String[])">
      <summary>验证指定接收方是否已正确解释和处理了所有标记为 MustUnderstand 的消息头。</summary>
      <returns>如果 <paramref name="actors" /> 指定的接收方已正确解释和处理了所有标记为 MustUnderstand 的消息头，则为 true；否则为 false。</returns>
      <param name="actors">消息头的目标接收方。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.Insert(System.Int32,System.ServiceModel.Channels.MessageHeader)">
      <summary>将消息头插入到集合中的指定索引位置。</summary>
      <param name="headerIndex">从零开始的索引，应在该位置插入 <paramref name="header" />。</param>
      <param name="header">要插入的消息头。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.Item(System.Int32)">
      <summary>在给定的索引位置检索标头。</summary>
      <returns>集合中的 <see cref="T:System.ServiceModel.Channels.MessageHeaderInfo" />。 如果 <paramref name="index" /> 大于或等于列表中的标头数，则这返回 null。</returns>
      <param name="index">列表中标头的从零开始的索引。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.MessageId">
      <summary>获取或设置消息的唯一 ID。</summary>
      <returns>消息的唯一 ID。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.MessageVersion">
      <summary>获取消息的 SOAP 版本。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageVersion" /> 是消息的 SOAP 版本。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.RelatesTo">
      <summary>获取与此消息相关的消息 ID。</summary>
      <returns>与此消息相关的消息 ID。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.RemoveAll(System.String,System.String)">
      <summary>从集合中移除具有指定名称和命名空间的所有标头。</summary>
      <param name="name">标头 XML 元素的 LocalName。</param>
      <param name="ns">标头 XML 元素的命名空间 URI。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.RemoveAt(System.Int32)">
      <summary>从集合中移除位于指定索引位置的消息头。</summary>
      <param name="headerIndex">要移除的标头的从零开始的索引。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.ReplyTo">
      <summary>获取或设置对请求的答复应发送到的节点地址。</summary>
      <returns>对请求的答复应发送到的节点 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.SetAction(System.Xml.XmlDictionaryString)">
      <summary>设置标头的操作元素。</summary>
      <param name="action">有关应如何处理消息的说明。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回迭代集合的一个枚举数。 不能继承此方法。</summary>
      <returns>一个可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.To">
      <summary>获取或设置消息的目标终结点。</summary>
      <returns>一个包含消息目标终结点的 URI。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteHeader(System.Int32,System.Xml.XmlDictionaryWriter)">
      <summary>使用指定 XML 编写器从指定位置序列化标头。</summary>
      <param name="headerIndex">要序列化的标头的从零开始的索引。</param>
      <param name="writer">一个 <see cref="T:System.Xml.XmlDictionaryWriter" />，用于序列化标头。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteHeader(System.Int32,System.Xml.XmlWriter)">
      <summary>使用指定 XML 编写器从指定位置序列化标头。</summary>
      <param name="headerIndex">要序列化的标头的从零开始的索引。</param>
      <param name="writer">一个 <see cref="T:System.Xml.XmlWriter" />，用于序列化标头。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteHeaderContents(System.Int32,System.Xml.XmlDictionaryWriter)">
      <summary>使用指定的 XML 编写器序列化指定的标头内容。</summary>
      <param name="headerIndex">要序列化的标头的从零开始的索引。</param>
      <param name="writer">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 用于序列化标头内容。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteHeaderContents(System.Int32,System.Xml.XmlWriter)">
      <summary>使用指定的 XML 编写器序列化指定的标头内容。</summary>
      <param name="headerIndex">要序列化的标头的从零开始的索引。</param>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 用于序列化标头内容。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteStartHeader(System.Int32,System.Xml.XmlDictionaryWriter)">
      <summary>使用指定的 XML 编写器序列化开始标头。</summary>
      <param name="headerIndex">要序列化的标头的从零开始的索引。</param>
      <param name="writer">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 用于序列化开始标头。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteStartHeader(System.Int32,System.Xml.XmlWriter)">
      <summary>使用指定的 XML 编写器序列化开始标头。</summary>
      <param name="headerIndex">要序列化的标头的从零开始的索引。</param>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 用于序列化开始标头。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageProperties">
      <summary>表示消息的一组属性。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.#ctor(System.ServiceModel.Channels.MessageProperties)">
      <summary>使用预设属性，初始化 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 类的新实例。</summary>
      <param name="properties">
        <see cref="T:System.ServiceModel.Channels.MessageProperties" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.Add(System.String,System.Object)">
      <summary>将具有指定名称和属性的元素添加到 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 集合中。</summary>
      <param name="name">要添加的元素的名称。</param>
      <param name="property">要添加的元素的值。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.AllowOutputBatching">
      <summary>获取或设置一个值，该值指定是否在传输消息之前对其进行存储。</summary>
      <returns>如果允许对传出消息进行批处理，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.Clear">
      <summary>移除 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 集合中的所有元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.ContainsKey(System.String)">
      <summary>确定 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 是否包含一个特定的名称、键或标识符。</summary>
      <returns>如果 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 包含带有指定的 <paramref name="name" /> 的元素，则为 true；否则为 false。</returns>
      <param name="name">在 <see cref="T:System.ServiceModel.Channels.MessageProperties" />中要定位的名称、键或标识符。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.CopyProperties(System.ServiceModel.Channels.MessageProperties)">
      <summary>将指定 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 的内容复制到此实例中。</summary>
      <param name="properties">复制而来的 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 对象。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Count">
      <summary>获取 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 中的属性总数。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 中的属性总数。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.Dispose">
      <summary>释放 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 类使用的所有资源。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Encoder">
      <summary>获取用于将消息写入流中并从流中读取消息的编码器。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.MessageEncoder" />，用于将消息写入流中并从流中读取消息。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Item(System.String)">
      <summary>检索具有指定名称、标识符或键值的属性。</summary>
      <returns>具有指定 <paramref name="name" /> 的属性，如果该属性不存在，则为 null。</returns>
      <param name="name">要从集合中获取的属性名称。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Keys">
      <summary>获取包含 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 中的键的 <see cref="T:System.Collections.ICollection" />。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 中的键。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.Remove(System.String)">
      <summary>从 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 中移除具有指定名称的元素。</summary>
      <returns>如果 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 包含具有指定 <paramref name="name" /> 的元素且可移除，则为 true；否则为 false。</returns>
      <param name="name">要移除的元素的名称。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>将具有指定名称和属性的元素添加到 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 中。</summary>
      <param name="pair">一个键/值对，包含要添加的元素的名称和值。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>确定 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 是否包含特定名称。</summary>
      <returns>如果 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 包含具有所指定 <paramref name="pair" /> 中名称和值的元素，则为 true；否则为 false。</returns>
      <param name="pair">一个键/值对，包含要在 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 中查找的元素的名称和值。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>从指定的索引位置开始，将所指定 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 的内容复制到某一数组。</summary>
      <param name="array">要将集合复制到的 <see cref="T:System.Array" />。</param>
      <param name="index">从其开始的索引。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示此组属性是否为只读。</summary>
      <returns>如果此组属性为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>从 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 中移除具有指定名称的元素。</summary>
      <returns>如果 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 包含具有 <paramref name="pair" /> 参数中指定名称和值的元素且可移除，则为 true；否则为 false。</returns>
      <param name="pair">一个键/值对，包含要移除的元素的名称和值。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回可循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回可循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.TryGetValue(System.String,System.Object@)">
      <summary>确定 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 是否包含特定名称，并检索其值。</summary>
      <returns>如果 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 包含带有指定的 <paramref name="name" /> 的元素，则为 true；否则为 false。</returns>
      <param name="name">要查找的元素的名称。</param>
      <param name="value">所找到元素的值。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Values">
      <summary>获取包含 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 中的值的 <see cref="T:System.Collections.ICollection" />。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 中的值。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Via">
      <summary>获取或设置用于发送消息的传输地址。</summary>
      <returns>一个 URI，包含用于发送消息的传输地址。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageState">
      <summary>指定消息的状态。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Closed">
      <summary>消息已关闭，无法再进行访问。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Copied">
      <summary>消息已复制。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Created">
      <summary>消息已创建。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Read">
      <summary>消息正在被读取。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Written">
      <summary>消息已写入。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageVersion">
      <summary>指定与消息及其交换相关联的 SOAP 和 WS-Addressing 的版本。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Addressing">
      <summary>获取或设置与当前消息版本关联的 WS-Addressing 版本。</summary>
      <returns>与当前消息版本关联的 <see cref="T:System.ServiceModel.Channels.AddressingVersion" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion)">
      <summary>使用 WS-Addressing 1.0 和指定的 SOAP 版本创建消息版本对象。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageVersion" />，它使用指定版本的 SOAP 和 WS-Addressing 1.0。</returns>
      <param name="envelopeVersion">
        <see cref="T:System.ServiceModel.EnvelopeVersion" />，指示要使用的 SOAP 版本。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeVersion" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion,System.ServiceModel.Channels.AddressingVersion)">
      <summary>使用指定的 SOAP 和 WS-Addressing 版本创建消息版本对象。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageVersion" />，它使用指定版本的 WS-Addressing 和 SOAP。</returns>
      <param name="envelopeVersion">指示 SOAP 版本的 <see cref="T:System.ServiceModel.EnvelopeVersion" />。</param>
      <param name="addressingVersion">指示 WS-Addressing 版本的 <see cref="T:System.ServiceModel.Channels.AddressingVersion" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeVersion" /> 或 <paramref name="addressingVersion" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Default">
      <summary>获取 Windows Communication Foundation (WCF) 所用的默认消息版本。</summary>
      <returns>使用 WS-Addressing 1.0 和 SOAP1.2 的 <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Envelope">
      <summary>获取与当前消息版本关联的 SOAP 版本。</summary>
      <returns>与当前消息版本关联的 <see cref="T:System.ServiceModel.EnvelopeVersion" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.Equals(System.Object)">
      <summary>返回一个值，该值指示当前消息版本与指定对象是否相等。</summary>
      <returns>如果指定的对象等于当前的 <see cref="T:System.ServiceModel.Channels.MessageVersion" /> 对象，则为 true；否则为 false。</returns>
      <param name="obj">要与当前消息版本进行比较的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.GetHashCode">
      <summary>获取当前消息版本的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ServiceModel.Channels.MessageVersion" /> 的唯一哈希代码。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.None">
      <summary>获取不使用 SOAP 或 WS-Addressing 的消息版本。</summary>
      <returns>不使用 SOAP 或 WS-Addressing 的 <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Soap11">
      <summary>获取使用 SOAP 1.1 的消息版本。</summary>
      <returns>使用 SOAP 1.1 但无任何 WS-Addressing 版本的 <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Soap12WSAddressing10">
      <summary>获取使用 WS-Addressing 1.0 和 SOAP 1.2 的消息版本。</summary>
      <returns>使用 WS-Addressing 1.0 和 SOAP 1.2 版本的 <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.ToString">
      <summary>返回当前消息版本的字符串表示形式。</summary>
      <returns>当前消息版本的字符串表示形式。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.RequestContext">
      <summary>提供一个与传入请求关联的答复。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.RequestContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Abort">
      <summary>在派生类中重写时，中止处理与上下文关联的请求。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.BeginReply(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>在派生类中重写时，开始进行异步操作，以答复与当前上下文关联的请求。</summary>
      <returns>引用异步答复操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">包含请求的传入 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">接收异步答复操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步答复操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.BeginReply(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>在派生类中重写时，开始进行异步操作，以在指定时间间隔内答复与当前上下文关联的请求。</summary>
      <returns>引用异步答复操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">包含请求的传入 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="timeout">指定等待答复可用请求的时间间隔的 <see cref="T:System.Timespan" />。</param>
      <param name="callback">接收异步答复操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步答复操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Close">
      <summary>在派生类中重写时，关闭正答复与当前上下文关联的请求上下文的操作。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Close(System.TimeSpan)">
      <summary>在派生类中重写时，关闭在指定时间间隔内正答复与当前上下文关联的请求上下文的操作。</summary>
      <param name="timeout">指定时间间隔的 <see cref="T:System.Timespan" />，与当前上下文关联的答复操作必须在此时间间隔内关闭。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Dispose(System.Boolean)">
      <summary>释放与上下文关联的资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.EndReply(System.IAsyncResult)">
      <summary>在派生类中重写时，完成一个答复请求消息的异步操作。</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to one of the <see cref="Overload:System.ServiceModel.Channels.RequestContext.BeginReply" /> methods.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Reply(System.ServiceModel.Channels.Message)">
      <summary>在派生类中重写时，答复请求消息。</summary>
      <param name="message">包含请求的传入 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Reply(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>在派生类中重写时，在指定时间间隔内答复请求消息。</summary>
      <param name="message">包含请求的传入 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="timeout">指定在答复请求之前要等待的时间间隔的 <see cref="T:System.Timespan" />。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.RequestContext.RequestMessage">
      <summary>在派生类中重写时，获取包含请求的消息。</summary>
      <returns>包含请求的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.System#IDisposable#Dispose">
      <summary>释放与上下文关联的托管资源和非托管资源。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.SecurityBindingElement">
      <summary>一个抽象类，在实现时表示支持通道 SOAP 消息安全的绑定元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>基于 <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" /> 设置和传入的绑定上下文创建通道工厂。 创建的通道工厂为 SOAP 消息安全通道工厂，其内部有到对应绑定上下文的通道工厂的引用（包括传输通道工厂）。</summary>
      <returns>基于 <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" /> 设置和传入的绑定上下文通道工厂。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道工厂的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">不支持 <paramref name="TChannel" /> 类型的通道。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.BuildChannelFactoryCore``1(System.ServiceModel.Channels.BindingContext)">
      <summary>实现时创建指定类型的通道工厂。</summary>
      <returns>具有指定类型的通道工厂。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道工厂的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">不支持 <paramref name="TChannel" /> 类型的通道。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>确定是否可生成指定类型的通道工厂。</summary>
      <returns>如果可以生成指定类型的通道工厂，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道工厂的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateUserNameOverTransportBindingElement">
      <summary>创建一个对称安全绑定元素，该元素配置为基于作为 SOAP 消息的组成部分发送的用户名和密码对客户端进行身份验证。 绑定元素需要传输提供服务器身份验证和消息保护（例如 HTTPS）。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.TransportSecurityBindingElement" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Channels.BindingContext" /> 获取指定对象。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.BindingContext" /> 中的指定对象；如果找不到该对象，则为 null。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">要获取的属性。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.SecurityBindingElement.IncludeTimestamp">
      <summary>获取或设置一个值，该值指示是否每条消息都包含时间戳。</summary>
      <returns>如果每条消息都包含时间戳，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.SecurityBindingElement.LocalClientSettings">
      <summary>获取由客户端使用的特定于本地安全设置的绑定属性。</summary>
      <returns>表示客户端所使用的本地安全设置的绑定属性的 <see cref="T:System.ServiceModel.Channels.LocalClientSecuritySettings" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement">
      <summary>绑定元素，指定用于基于文本的 SOAP 消息的字符编码与消息版本管理。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.#ctor(System.ServiceModel.Channels.MessageVersion,System.Text.Encoding)">
      <summary>使用指定的消息版本和编码初始化 <see cref="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement" /> 类的新实例。</summary>
      <param name="messageVersion">用于消息版本的 <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</param>
      <param name="writeEncoding">用于格式化消息字符的 <see cref="T:System.Text.Encoding" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="messageVersion" /> 或 <paramref name="writeEncoding" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="writeEncoding" /> 值无效。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>在客户端上生成通道工厂堆栈，该通道工厂堆栈可为指定上下文创建指定类型的通道。</summary>
      <returns>指定上下文的 <paramref name="TChannel" /> 类型的 <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />。</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> for the channel.</param>
      <typeparam name="TChannel">通道工厂生成的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.Clone">
      <summary>创建一个从当前对象初始化的新 <see cref="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement" /> 对象，其属性值等于当前元素的属性值。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.CreateMessageEncoderFactory">
      <summary>创建一个文本消息编码器工厂，该文本消息编码器利用由当前编码绑定元素指定的消息版本与字符编码。</summary>
      <returns>此工厂创建的 <see cref="T:System.ServiceModel.Channels.MessageEncoderFactory" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.TextMessageEncodingBindingElement.MessageVersion">
      <summary>获取或设置用于格式化文本消息的 SOAP 和 WS-Addressing 版本。</summary>
      <returns>用于格式化消息的 <see cref="T:System.ServiceModel.Channels.MessageVersion" />。 默认值为 <see cref="P:System.ServiceModel.Channels.MessageVersion.Soap12WSAddressing10" />。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.TextMessageEncodingBindingElement.WriteEncoding">
      <summary>获取或设置用于格式化文本消息中字符的编码。</summary>
      <returns>用于格式化文本消息中字符的 <see cref="T:System.Text.Encoding" />。 默认文本编码为 UTF-8 格式。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="writeEncoding" /> 值无效。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.TransportBindingElement">
      <summary>一个表示传输绑定元素的 abstract 基类。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportBindingElement.#ctor">
      <summary>创建此类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportBindingElement.#ctor(System.ServiceModel.Channels.TransportBindingElement)">
      <summary>从现有实例创建此类的新实例。</summary>
      <param name="elementToBeCloned">要克隆的 <see cref="T:System.ServiceModel.Channels.TransportBindingElement" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>从指定的 <see cref="T:System.ServiceModel.Channels.BindingContext" /> 获取属性。</summary>
      <returns>取自指定 <see cref="T:System.ServiceModel.Channels.BindingContext" /> 的属性。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">要获取的属性。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.TransportBindingElement.ManualAddressing">
      <summary>获取或设置一个值，该值指示是否要求对消息进行手动寻址。</summary>
      <returns>如果要求对消息进行手动寻址，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize">
      <summary>获取和设置允许接收的最大消息大小（以字节为单位）。</summary>
      <returns>允许接收的最大消息大小。 默认值为 65,536 个字节。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.TransportBindingElement.Scheme">
      <summary>获取传输的 URI 方案。</summary>
      <returns>返回传输的 URI 方案，因实现此方法的派生类而异。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.TransportSecurityBindingElement">
      <summary>表示一个自定义绑定元素，它支持混合模式安全（如安全传输中优化的消息安全）。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportSecurityBindingElement.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Channels.TransportSecurityBindingElement" /> 类的实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportSecurityBindingElement.Clone">
      <summary>创建一个从当前类初始化的 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 新对象。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 对象，其属性值等于当前实例的属性值。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.ClientCredentials">
      <summary>使用户能够配置客户端和服务凭据以及服务凭据身份验证设置，以用于通信的客户端。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.ClientCredentials" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.#ctor(System.ServiceModel.Description.ClientCredentials)">
      <summary>此为复制构造函数。</summary>
      <param name="other">
        <see cref="T:System.ServiceModel.Description.ClientCredentials" />。 新构造的实例的所有属性反映了此参数的值。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.Clone">
      <summary>创建此 <see cref="T:System.ServiceModel.Description.ClientCredentials" /> 实例的新副本。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Description.ClientCredentials" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.CloneCore">
      <summary>创建此 <see cref="T:System.ServiceModel.Description.ClientCredentials" /> 实例的新副本。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Description.ClientCredentials" /> 实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ClientCredentials.UserName">
      <summary>获取一个凭据对象，您可以使用该对象来设置客户端用于使自身通过到服务的身份验证的用户名和密码。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Security.UserNamePasswordClientCredential" />，表示当前的 UserName 凭据。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.ContractDescription">
      <summary>描述指定终结点向外部传递的信息的 Windows Communication Foundation (WCF) 协定。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ContractDescription.#ctor(System.String)">
      <summary>初始化具有指定名称的 <see cref="T:System.ServiceModel.Description.ContractDescription" /> 类的一个新实例。</summary>
      <param name="name">协定的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="name" /> 为空。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.ContractDescription.#ctor(System.String,System.String)">
      <summary>使用指定的命名空间限定名称初始化 <see cref="T:System.ServiceModel.Description.ContractDescription" /> 类的新实例。</summary>
      <param name="name">协定的名称。</param>
      <param name="ns">包含协定的名称的命名空间。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="name" /> 为空。</exception>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.CallbackContractType">
      <summary>获取或设置协定说明指定的回调协定的类型。</summary>
      <returns>协定说明指定的回调协定的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.ConfigurationName">
      <summary>获取或设置协定说明的配置名称。</summary>
      <returns>协定的配置名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.ContractType">
      <summary>获取或设置协定说明指定的协定类型。</summary>
      <returns>协定说明指定的协定的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.Name">
      <summary>获取或设置协定的名称。</summary>
      <returns>协定说明的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.Namespace">
      <summary>获取或设置协定的命名空间。</summary>
      <returns>协定的命名空间。</returns>
      <exception cref="T:System.ArgumentNullException">所设置的值为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.Operations">
      <summary>获取与协定关联的操作说明的集合。</summary>
      <returns>包含与协定说明关联的操作说明的 <see cref="T:System.ServiceModel.Description.OperationDescriptionCollection" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.FaultDescription">
      <summary>表示 SOAP 错误。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.FaultDescription.#ctor(System.String)">
      <summary>使用指定的操作值初始化 <see cref="T:System.ServiceModel.Description.FaultDescription" /> 类的新实例。</summary>
      <param name="action">SOAP 错误消息的操作。</param>
    </member>
    <member name="P:System.ServiceModel.Description.FaultDescription.Action">
      <summary>SOAP 错误消息中的操作的值。</summary>
      <returns>SOAP 错误的操作。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.FaultDescription.DetailType">
      <summary>SOAP 错误详细信息的类型。</summary>
      <returns>可序列化的详细信息对象的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.FaultDescription.Name">
      <summary>获取或设置 SOAP 错误的名称。</summary>
      <returns>SOAP 错误的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.FaultDescription.Namespace">
      <summary>获取或设置 SOAP 错误的命名空间。</summary>
      <returns>SOAP 错误的命名空间。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.FaultDescriptionCollection">
      <summary>表示可用于获取协定中 SOAP 错误的相关信息的 <see cref="T:System.ServiceModel.Description.FaultDescription" /> 对象集合。</summary>
    </member>
    <member name="T:System.ServiceModel.Description.MessageBodyDescription">
      <summary>表示 SOAP 消息的正文。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessageBodyDescription.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.MessageBodyDescription" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Description.MessageBodyDescription.Parts">
      <summary>获取部分 SOAP 消息正文。</summary>
      <returns>您可以检查或修改的正文部分。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageBodyDescription.ReturnValue">
      <summary>获取或设置包含返回值的 SOAP 消息部分。</summary>
      <returns>返回值（如果有）。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageBodyDescription.WrapperName">
      <summary>获取或设置 SOAP 正文元素内的包装元素的名称（如果有一个）。</summary>
      <returns>包装元素（如果有一个）。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageBodyDescription.WrapperNamespace">
      <summary>获取或设置 SOAP 正文元素中的包装元素的命名空间（如果有一个）。</summary>
      <returns>包装元素的命名空间（如果有一个）。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MessageDescription">
      <summary>表示消息的说明。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessageDescription.#ctor(System.String,System.ServiceModel.Description.MessageDirection)">
      <summary>用指定的操作和方向初始化 <see cref="T:System.ServiceModel.Description.MessageDescription" /> 类的新实例。</summary>
      <param name="action">标识消息意图的 SOAP 消息的操作参数。</param>
      <param name="direction">如果该消息为传入消息，则为 <see cref="F:System.ServiceModel.Description.MessageDirection.Input" />；如果该消息为传出消息，则为 <see cref="F:System.ServiceModel.Description.MessageDirection.Output" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="direction" /> 既不是 <see cref="F:System.ServiceModel.Description.MessageDirection.Input" /> 也不是 <see cref="F:System.ServiceModel.Description.MessageDirection.Output" />。</exception>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.Action">
      <summary>获取或设置标识消息意图的 SOAP 消息的操作参数。</summary>
      <returns>一个包含操作 URI 的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.Body">
      <summary>获取 SOAP 消息的正文。</summary>
      <returns>包含消息正文的 <see cref="T:System.ServiceModel.Description.MessagePartDescriptionCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.Direction">
      <summary>获取指示消息是传入消息还是传出消息的方向。</summary>
      <returns>指示消息是传入服务还是从服务传出的 <see cref="T:System.ServiceModel.Description.MessageDirection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.MessageType">
      <summary>获取或设置标识消息协定类型的类型。</summary>
      <returns>标识消息协定类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MessageDescriptionCollection">
      <summary>提供用于存储消息说明的集合，其中消息为组成协定所属操作的消息。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessageDescriptionCollection.Find(System.String)">
      <summary>查找并返回消息集合中其消息具有指定操作的第一条消息说明。</summary>
      <returns>从集合中返回的具有指定 <paramref name="action" /> 的第一条 <see cref="T:System.ServiceModel.Description.MessageDescription" />，如果找不到匹配的 <paramref name="action" />，则返回 null。</returns>
      <param name="action">正在查找的消息的操作。</param>
    </member>
    <member name="M:System.ServiceModel.Description.MessageDescriptionCollection.FindAll(System.String)">
      <summary>查找并返回集合中其消息具有指定操作的所有消息说明。</summary>
      <returns>从当前集合返回的包含集合消息说明的 <see cref="T:System.ServiceModel.Description.MessageDescriptionCollection" />，这些消息说明的消息具有指定的 <paramref name="action" />。 如果找不到匹配的 <see cref="T:System.ServiceModel.Description.MessageDescription" /> 对象，则返回空集合。</returns>
      <param name="action">正在查找的消息的操作。</param>
    </member>
    <member name="T:System.ServiceModel.Description.MessageDirection">
      <summary>指定消息的方向。</summary>
    </member>
    <member name="F:System.ServiceModel.Description.MessageDirection.Input">
      <summary>传入消息。</summary>
    </member>
    <member name="F:System.ServiceModel.Description.MessageDirection.Output">
      <summary>传出消息。</summary>
    </member>
    <member name="T:System.ServiceModel.Description.MessagePartDescription">
      <summary>表示 SOAP 消息部分的说明。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessagePartDescription.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.MessagePartDescription" /> 类的新实例。</summary>
      <param name="name">消息部分的 XML 名称。</param>
      <param name="ns">消息部分的 XML 命名空间。</param>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.Index">
      <summary>获取或设置消息部分的索引。</summary>
      <returns>消息部分的索引。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.MemberInfo">
      <summary>获取或设置消息部分的成员信息。</summary>
      <returns>此消息部分的成员信息。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.Name">
      <summary>获取或设置消息部分的名称。</summary>
      <returns>消息部分的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.Namespace">
      <summary>获取或设置消息部分的命名空间。</summary>
      <returns>消息部分的命名空间。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.Type">
      <summary>获取或设置消息部分的类型。</summary>
      <returns>消息部分的类型。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MessagePartDescriptionCollection">
      <summary>表示 <see cref="T:System.ServiceModel.Description.MessagePartDescription" /> 对象的集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessagePartDescriptionCollection.GetKeyForItem(System.ServiceModel.Description.MessagePartDescription)">
      <summary>当被派生类调用时，返回 <see cref="T:System.ServiceModel.Description.MessagePartDescription" /> 的 <see cref="T:System.Xml.XmlQualifiedName" />。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Description.MessagePartDescription" /> 的 <see cref="T:System.Xml.XmlQualifiedName" />。</returns>
      <param name="item">要定位的 <see cref="T:System.ServiceModel.Description.MessagePartDescription" />。</param>
    </member>
    <member name="T:System.ServiceModel.Description.OperationDescription">
      <summary>表示协定操作的说明，该协定操作可提供组成操作的消息的说明。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescription.#ctor(System.String,System.ServiceModel.Description.ContractDescription)">
      <summary>使用指定的名称和协定说明初始化 <see cref="T:System.ServiceModel.Description.OperationDescription" /> 类的新实例。</summary>
      <param name="name">操作说明的名称。</param>
      <param name="declaringContract">用于初始化操作说明的 <see cref="T:System.ServiceModel.Description.ContractDescription" />。</param>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.BeginMethod">
      <summary>获取或设置操作的开始方法。</summary>
      <returns>可访问该方法的属性和元数据的 <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.DeclaringContract">
      <summary>获取或设置该操作所属的协定。</summary>
      <returns>操作的 <see cref="T:System.ServiceModel.Description.ContractDescription" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.EndMethod">
      <summary>获取或设置操作的结束方法。</summary>
      <returns>可访问该方法的属性和元数据的 <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.Faults">
      <summary>获取与操作说明关联的错误的说明。</summary>
      <returns>包含与操作说明关联的错误的详细信息的 <see cref="T:System.ServiceModel.Description.FaultDescriptionCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.IsOneWay">
      <summary>获取或设置一个值，该值指示操作是否返回答复消息。</summary>
      <returns>如果该方法收到请求消息，但未返回任何答复消息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.KnownTypes">
      <summary>获取与操作说明关联的已知类型。</summary>
      <returns>与操作说明关联的已知类型的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.Messages">
      <summary>获取或设置组成操作的消息的说明。</summary>
      <returns>包含组成操作的消息的说明的 <see cref="T:System.ServiceModel.Description.MessageDescriptionCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.Name">
      <summary>获取或设置操作说明的名称。</summary>
      <returns>操作说明的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.SyncMethod">
      <summary>获取或设置操作说明的服务同步方法。</summary>
      <returns>可访问该方法的属性和元数据的 <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.OperationDescriptionCollection">
      <summary>表示包含操作说明的集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescriptionCollection.Find(System.String)">
      <summary>从操作说明集合返回带有指定名称的操作说明。</summary>
      <returns>带有指定名称的 <see cref="T:System.ServiceModel.Description.OperationDescription" />。</returns>
      <param name="name">操作的名称。</param>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescriptionCollection.FindAll(System.String)">
      <summary>从操作说明集合中返回所有带有指定名称的操作说明的集合。</summary>
      <returns>包含带有指定名称的操作说明的类型为 <see cref="T:System.ServiceModel.Description.OperationDescription" /> 的 <see cref="T:System.Collections.ObjectModel.Collection`1" />。</returns>
      <param name="name">操作的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescriptionCollection.InsertItem(System.Int32,System.ServiceModel.Description.OperationDescription)">
      <summary>将元素插入操作说明集合中的指定索引处。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="item" />。</param>
      <param name="item">要插入的 <see cref="T:System.ServiceModel.Description.OperationDescription" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescriptionCollection.SetItem(System.Int32,System.ServiceModel.Description.OperationDescription)">
      <summary>替换操作说明集合中的指定索引处的元素。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="item" />。</param>
      <param name="item">要设置的 <see cref="T:System.ServiceModel.Description.OperationDescription" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.Description.ServiceEndpoint">
      <summary>表示允许服务的客户端查找并与服务通信的服务的终结点。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceEndpoint.#ctor(System.ServiceModel.Description.ContractDescription)">
      <summary>初始化指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 类的新实例。</summary>
      <param name="contract">服务终结点的 <see cref="T:System.ServiceModel.Description.ContractDescription" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceEndpoint.#ctor(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>使用指定的协定、绑定和地址初始化 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 类的新实例。</summary>
      <param name="contract">服务终结点的 <see cref="T:System.ServiceModel.Description.ContractDescription" />。</param>
      <param name="binding">指定服务终结点的通信方式的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="address">服务终结点的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.Address">
      <summary>获取或设置服务终结点的终结点地址。</summary>
      <returns>指定服务终结点的位置的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.Binding">
      <summary>获取或设置服务终结点的绑定。</summary>
      <returns>服务终结点的 <see cref="T:System.ServiceModel.Channels.Binding" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.Contract">
      <summary>获取服务终结点的协定。</summary>
      <returns>指定服务终结点的协定的 <see cref="T:System.ServiceModel.Description.ContractDescription" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.Name">
      <summary>获取或设置服务终结点的名称。</summary>
      <returns>服务终结点的名称。 默认值为绑定名称和协定说明名称的串联。 例如，<see cref="P:System.ServiceModel.Channels.Binding.Name" /> +'_' + <see cref="P:System.ServiceModel.Description.ContractDescription.Name" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.ClientOperation">
      <summary>用于在客户端对象或客户端通道对象中修改或扩展特定协定操作的执行行为。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ClientOperation.#ctor(System.ServiceModel.Dispatcher.ClientRuntime,System.String,System.String)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" />、名称和操作值来初始化 <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> 类的新实例。</summary>
      <param name="parent">包含的 <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" /> 对象。</param>
      <param name="name">操作的名称。</param>
      <param name="action">操作 (operation) 的操作 (action)。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ClientOperation.#ctor(System.ServiceModel.Dispatcher.ClientRuntime,System.String,System.String,System.String)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" />、名称、操作以及回复操作值来初始化 <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> 类的新实例。</summary>
      <param name="parent">包含的 <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" /> 对象。</param>
      <param name="name">操作的名称。</param>
      <param name="action">操作 (operation) 的操作 (action)。</param>
      <param name="replyAction">回复消息的操作。</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.Action">
      <summary>获取操作 (operation) 的操作 (action)。</summary>
      <returns>操作 (operation) 的操作 (action)。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.BeginMethod">
      <summary>获取或设置与异步操作关联的方法。</summary>
      <returns>表示处理异步方法对的开头部分的方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象；或者，如果操作不是异步方法对的一部分，则为 null。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.DeserializeReply">
      <summary>获取或设置一个值，该值指示 <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.Formatter" /> 属性值是否用于反序列化回复消息。</summary>
      <returns>如果返回类型不是 <see cref="T:System.ServiceModel.Channels.Message" />，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.EndMethod">
      <summary>获取或设置实现操作的异步结束方法的方法。</summary>
      <returns>表示操作的结束方法的 <see cref="T:System.Reflection.MethodInfo" />；或者，如果操作不是异步，则为 null。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.Formatter">
      <summary>获取或设置将对象序列化到消息，以及将消息反序列化到对象的格式化程序。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Dispatcher.IClientMessageFormatter" /> 实现。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.IsOneWay">
      <summary>获取或设置一个值，该值指示操作是否为单向操作。</summary>
      <returns>如果 indigo2 客户端不预期回复，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.Name">
      <summary>获取操作的名称。</summary>
      <returns>操作的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.Parent">
      <summary>获取包含的 <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" /> 对象。</summary>
      <returns>包含的 <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.ReplyAction">
      <summary>获取此操作 (operation) 的回复消息的操作 (action)。</summary>
      <returns>回复的操作。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.SerializeRequest">
      <summary>获取或设置一个值，该值指定 <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.Formatter" /> 对象是否序列化出站消息。</summary>
      <returns>如果 <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.Formatter" /> 属性将返回值序列化为回复消息，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.SyncMethod">
      <summary>获取或设置与此操作关联的方法。</summary>
      <returns>表示实现该操作的方法的 <see cref="T:System.Reflection.MethodInfo" />。 如果操作是异步的，则此值为 null，并且实现的方法存储在 <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.BeginMethod" /> 和 <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.EndMethod" /> 属性中。</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.ClientRuntime">
      <summary>表示类的插入点，这些类可以扩展客户端应用程序处理的所有消息的 Windows Communication Foundation (WCF) 客户端对象的功能。</summary>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ContractClientType">
      <summary>获取或设置与客户端关联的协定的类型。</summary>
      <returns>表示与此客户端关联的协定的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ContractName">
      <summary>获取与客户端关联的协定的名称。</summary>
      <returns>客户端的协定名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ContractNamespace">
      <summary>获取与客户端关联的协定的命名空间。</summary>
      <returns>与客户端关联的协定的命名空间。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ManualAddressing">
      <summary>获取或设置一个值，该值指示客户端是否将寻址标头添加到请求-回复消息。</summary>
      <returns>如果客户端不添加任何寻址标头，则为 true；否则为 false。 默认值为 false。 请参见"备注"。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.MaxFaultSize">
      <summary>获取或设置错误的最大大小。</summary>
      <returns>一个表示错误的最大大小的整数。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.OperationSelector">
      <summary>获取或设置可用于选择 <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> 的一个 <see cref="T:System.ServiceModel.Dispatcher.IClientOperationSelector" /> 实现。</summary>
      <returns>选择 <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> 的 <see cref="T:System.ServiceModel.Dispatcher.IClientOperationSelector" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.UnhandledClientOperation">
      <summary>获取在 <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.Operations" /> 集合中不具有相应的 <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> 的方法的客户端操作。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" />，它表示当操作选择器找不到与消息匹配的操作时，当前消息内容被路由到的方法。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.Via">
      <summary>获取或设置用于通过客户端发送消息的传输地址。</summary>
      <returns>
        <see cref="T:System.Uri" />，它是传输的目标地址。 默认值为客户端的 <see cref="P:System.ServiceModel.EndpointAddress.Uri" /> 值。</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.FaultContractInfo">
      <summary>表示有关在 <see cref="T:System.ServiceModel.FaultContractAttribute" /> 属性中指定的 SOAP 错误的信息。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.FaultContractInfo.#ctor(System.String,System.Type)">
      <summary>初始化使用指定操作和详细信息类型的 <see cref="T:System.ServiceModel.Dispatcher.FaultContractInfo" /> 类的新实例。</summary>
      <param name="action">SOAP 错误的操作。</param>
      <param name="detail">序列化为 SOAP 错误详细信息的详细信息类型。</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.FaultContractInfo.Action">
      <summary>获取 SOAP 错误操作的值。</summary>
      <returns>SOAP 错误操作的值。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.FaultContractInfo.Detail">
      <summary>序列化为 SOAP 错误详细信息的对象的类型。</summary>
      <returns>表示序列化的 SOAP 错误详细信息的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IClientMessageFormatter">
      <summary>定义用于控制客户端应用程序的消息与对象之间的转换的方法。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IClientMessageFormatter.DeserializeReply(System.ServiceModel.Channels.Message,System.Object[])">
      <summary>将消息转换为将传回给调用操作的返回值和 out 参数。</summary>
      <returns>操作的返回值。</returns>
      <param name="message">入站消息。</param>
      <param name="parameters">任何 out 值。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IClientMessageFormatter.SerializeRequest(System.ServiceModel.Channels.MessageVersion,System.Object[])">
      <summary>将 <see cref="T:System.Object" /> 数组转换为出站 <see cref="T:System.ServiceModel.Channels.Message" />。</summary>
      <returns>发送到服务操作的 SOAP 消息。</returns>
      <param name="messageVersion">要使用的 SOAP 消息版本。</param>
      <param name="parameters">要传递到 WCF 客户端操作的参数。</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IClientOperationSelector">
      <summary>定义操作选择器的协定。</summary>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.IClientOperationSelector.AreParametersRequiredForSelection">
      <summary>获取一个值，指示是否需要参数来确定选择。</summary>
      <returns>如果需要参数，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IClientOperationSelector.SelectOperation(System.Reflection.MethodBase,System.Object[])">
      <summary>返回选择的操作。</summary>
      <returns>自定义操作选择器选择的操作。</returns>
      <param name="method">调用的方法。</param>
      <param name="parameters">传递给该方法的参数。</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IDispatchMessageFormatter">
      <summary>定义服务应用程序中用于反序列化请求消息和序列化响应消息的方法。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IDispatchMessageFormatter.DeserializeRequest(System.ServiceModel.Channels.Message,System.Object[])">
      <summary>将消息反序列化为参数数组。</summary>
      <param name="message">传入消息。</param>
      <param name="parameters">作为参数传递到操作的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IDispatchMessageFormatter.SerializeReply(System.ServiceModel.Channels.MessageVersion,System.Object[],System.Object)">
      <summary>从指定的消息版本、参数数组和返回值序列化答复消息。</summary>
      <returns>已序列化的答复消息。</returns>
      <param name="messageVersion">SOAP 消息版本。</param>
      <param name="parameters">out 参数。</param>
      <param name="result">返回值。</param>
    </member>
    <member name="T:System.ServiceModel.Security.MessageSecurityException">
      <summary>表示当应用到消息的安全出现错误时发生的异常。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.MessageSecurityException.#ctor(System.String)">
      <summary>使用错误字符串初始化 <see cref="T:System.ServiceModel.Security.MessageSecurityException" /> 类的新实例。</summary>
      <param name="message">错误消息。</param>
    </member>
    <member name="M:System.ServiceModel.Security.MessageSecurityException.#ctor(System.String,System.Exception)">
      <summary>使用错误字符串和对导致此异常的内部异常的引用来初始化 <see cref="T:System.ServiceModel.Security.MessageSecurityException" /> 类的新实例。</summary>
      <param name="message">错误消息。</param>
      <param name="innerException">内部异常引用。</param>
    </member>
    <member name="T:System.ServiceModel.Security.SecurityAccessDeniedException">
      <summary>表示安全授权请求失败时引发的安全异常。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAccessDeniedException.#ctor(System.String)">
      <summary>使用指定的消息初始化 <see cref="T:System.ServiceModel.Security.SecurityAccessDeniedException" /> 类的新实例。</summary>
      <param name="message">错误条件的说明。</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAccessDeniedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的消息和内部异常初始化 <see cref="T:System.ServiceModel.Security.SecurityAccessDeniedException" /> 类的新实例。</summary>
      <param name="message">错误条件的说明。</param>
      <param name="innerException">要使用的内部异常。</param>
    </member>
    <member name="T:System.ServiceModel.Security.UserNamePasswordClientCredential">
      <summary>表示基于用户名和密码的客户端凭据。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.UserNamePasswordClientCredential.Password">
      <summary>获取或设置密码。</summary>
      <returns>密码。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.UserNamePasswordClientCredential.UserName">
      <summary>获取或设置用户名。</summary>
      <returns>用户名。</returns>
    </member>
  </members>
</doc>