<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>mscorlib</name>
  </assembly>
  <members>
    <member name="T:System.Action">
      <summary>封装一个方法，该方法不具有参数并且不返回值。</summary>
    </member>
    <member name="T:System.Action`1">
      <summary>封装一个方法，该方法只有一个参数并且不返回值。</summary>
      <param name="obj">此委托封装的方法的参数。</param>
      <typeparam name="T">此委托封装的方法的参数类型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Action`2">
      <summary>封装一个方法，该方法具有两个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`3">
      <summary>封装一个方法，该方法具有三个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`4">
      <summary>封装一个方法，该方法具有四个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`5">
      <summary>封装一个方法，该方法具有五个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`6">
      <summary>封装一个方法，该方法具有六个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`7">
      <summary>封装一个方法，该方法具有七个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`8">
      <summary>封装一个方法，该方法具有八个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Activator">
      <summary>包含特定的方法，用以在本地或从远程创建对象类型，或获取对现有远程对象的引用。 此类不能被继承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Activator.CreateInstance``1">
      <summary>使用无参数构造函数，创建指定泛型类型参数所指定类型的实例。</summary>
      <returns>对新创建对象的引用。</returns>
      <typeparam name="T">要创建的类型。</typeparam>
      <exception cref="T:System.MissingMethodException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.MissingMemberException" />。 为 <paramref name="T" /> 指定的类型没有无参数构造函数。</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type)">
      <summary>使用指定类型的默认构造函数来创建该类型的实例。</summary>
      <returns>对新创建对象的引用。</returns>
      <param name="type">要创建的对象的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是 RuntimeType。 - 或 - <paramref name="type" /> 是一个开放式泛型类型（即，<see cref="P:System.Type.ContainsGenericParameters" /> 属性返回 true）。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> 不能为 <see cref="T:System.Reflection.Emit.TypeBuilder" />。 - 或 - 不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型或者由这些类型组成的数组。 - 或 - 包含 <paramref name="type" /> 的程序集是动态程序集，使用 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 创建。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">被调用的构造函数引发异常。</exception>
      <exception cref="T:System.MethodAccessException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.MemberAccessException" />。 调用方没有调用此构造函数的权限。</exception>
      <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者用后期绑定机制调用了该成员。</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">COM 类型不是通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获得的。</exception>
      <exception cref="T:System.MissingMethodException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.MissingMemberException" />。 找不到匹配的公共构造函数。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> 是一个 COM 对象，但用于获取类型的类标识符无效，或被标识的类未注册。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> 不是有效的类型。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
      </PermissionSet>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Object[])">
      <summary>使用与指定参数匹配程度最高的构造函数创建指定类型的实例。</summary>
      <returns>对新创建对象的引用。</returns>
      <param name="type">要创建的对象的类型。</param>
      <param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。 如果 <paramref name="args" /> 为空数组或 null，则调用不带任何参数的构造函数（默认构造函数）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是 RuntimeType。 - 或 - <paramref name="type" /> 是一个开放式泛型类型（即，<see cref="P:System.Type.ContainsGenericParameters" /> 属性返回 true）。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> 不能为 <see cref="T:System.Reflection.Emit.TypeBuilder" />。 - 或 - 不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型或者由这些类型组成的数组。 - 或 - 包含 <paramref name="type" /> 的程序集是动态程序集，使用 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 创建。 - 或 - 与 <paramref name="args" /> 匹配程度最高的构造函数具有 varargs 参数。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">被调用的构造函数引发异常。</exception>
      <exception cref="T:System.MethodAccessException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.MemberAccessException" />。 调用方没有调用此构造函数的权限。</exception>
      <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者用后期绑定机制调用了该成员。</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">COM 类型不是通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获得的。</exception>
      <exception cref="T:System.MissingMethodException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.MissingMemberException" />。 找不到匹配的公共构造函数。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> 是一个 COM 对象，但用于获取类型的类标识符无效，或被标识的类未注册。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> 不是有效的类型。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, RemotingConfiguration" />
      </PermissionSet>
    </member>
    <member name="T:System.AggregateException">
      <summary>表示在应用程序执行期间发生的一个或多个错误。</summary>
    </member>
    <member name="M:System.AggregateException.#ctor">
      <summary>使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.AggregateException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.AggregateException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>使用对导致此异常的内部异常的引用来初始化 <see cref="T:System.AggregateException" /> 类的新实例。</summary>
      <param name="innerExceptions">导致当前异常的异常。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerExceptions" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="innerExceptions" /> 的元素为 Null。</exception>
    </member>
    <member name="M:System.AggregateException.#ctor(System.Exception[])">
      <summary>使用对导致此异常的内部异常的引用来初始化 <see cref="T:System.AggregateException" /> 类的新实例。</summary>
      <param name="innerExceptions">导致当前异常的异常。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerExceptions" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="innerExceptions" /> 的元素为 Null。</exception>
    </member>
    <member name="M:System.AggregateException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.AggregateException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.AggregateException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>使用指定的错误消息和对导致此异常的内部异常的引用来初始化 <see cref="T:System.AggregateException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerExceptions">导致当前异常的异常。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerExceptions" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="innerExceptions" /> 的元素为 Null。</exception>
    </member>
    <member name="M:System.AggregateException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.AggregateException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerException" /> 参数为 null。</exception>
    </member>
    <member name="M:System.AggregateException.#ctor(System.String,System.Exception[])">
      <summary>使用指定的错误消息和对导致此异常的内部异常的引用来初始化 <see cref="T:System.AggregateException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerExceptions">导致当前异常的异常。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerExceptions" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="innerExceptions" /> 的元素为 Null。</exception>
    </member>
    <member name="M:System.AggregateException.Flatten">
      <summary>将 <see cref="T:System.AggregateException" /> 实例平展入单个新实例。</summary>
      <returns>一个新的平展 <see cref="T:System.AggregateException" />。</returns>
    </member>
    <member name="M:System.AggregateException.GetBaseException">
      <summary>返回 <see cref="T:System.AggregateException" />，它是此异常的根本原因。</summary>
      <returns>返回 <see cref="T:System.AggregateException" />，它是此异常的根本原因。</returns>
    </member>
    <member name="M:System.AggregateException.Handle(System.Func{System.Exception,System.Boolean})">
      <summary>对此 <see cref="T:System.AggregateException" /> 所包含的每个 <see cref="T:System.Exception" /> 调用处理程序。</summary>
      <param name="predicate">要对每个异常执行的谓词。 该谓词接受作为参数来处理 <see cref="T:System.Exception" />，并返回指示异常是否已处理的布尔值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 参数为 null。</exception>
      <exception cref="T:System.AggregateException">未处理此 <see cref="T:System.AggregateException" /> 包含的异常。</exception>
    </member>
    <member name="P:System.AggregateException.InnerExceptions">
      <summary>获取导致当前异常的 <see cref="T:System.Exception" /> 实例的只读集合。</summary>
      <returns>返回导致当前异常的 <see cref="T:System.Exception" /> 实例的只读集合。</returns>
    </member>
    <member name="M:System.AggregateException.ToString">
      <summary>创建并返回当前 <see cref="T:System.AggregateException" /> 的字符串表示形式。</summary>
      <returns>当前异常的字符串表示形式。</returns>
    </member>
    <member name="T:System.ArgumentException">
      <summary>当向方法提供的参数之一无效时引发的异常。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.ArgumentException.#ctor">
      <summary>初始化 <see cref="T:System.ArgumentException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.ArgumentException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.ArgumentException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为空引用，则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.String)">
      <summary>使用指定错误消息和导致此异常的参数的名称来初始化 <see cref="T:System.ArgumentException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="paramName">导致当前异常的参数的名称。</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.String,System.Exception)">
      <summary>使用指定错误消息、参数名和对内部异常（为该异常根源）的引用来初始化 <see cref="T:System.ArgumentException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="paramName">导致当前异常的参数的名称。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为空引用，则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="P:System.ArgumentException.Message">
      <summary>获取错误消息和参数名；如果未设置参数名，则仅获取错误消息。</summary>
      <returns>描述异常的详细信息的文本字符串。 此属性的值采用以下两种形式之一： Condition 值 <paramref name="paramName" /> 是空引用（在 Visual Basic 中为 Nothing）或长度为零。 传递到构造函数的 <paramref name="message" /> 字符串。 <paramref name="paramName" /> 不是空引用（在 Visual Basic 中为 Nothing）并且长度大于零。 附有无效参数名的 <paramref name="message" /> 字符串。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.ArgumentException.ParamName">
      <summary>获取导致该异常的参数的名称。</summary>
      <returns>参数名。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.ArgumentNullException">
      <summary>当将空引用（在 Visual Basic 中为 Nothing）传递给不接受它作为有效参数的方法时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ArgumentNullException.#ctor">
      <summary>初始化 <see cref="T:System.ArgumentNullException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String)">
      <summary>使用导致此异常的参数的名称初始化 <see cref="T:System.ArgumentNullException" /> 类的新实例。</summary>
      <param name="paramName">导致异常的参数的名称。</param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和引发此异常的异常初始化 <see cref="T:System.ArgumentNullException" /> 类的新实例。</summary>
      <param name="message">说明发生此异常的原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String,System.String)">
      <summary>使用指定的错误消息和导致此异常的参数的名称来初始化 <see cref="T:System.ArgumentNullException" /> 类的实例。</summary>
      <param name="paramName">导致异常的参数的名称。</param>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="T:System.ArgumentOutOfRangeException">
      <summary>当参数值超出调用的方法所定义的允许取值范围时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor">
      <summary>初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
      <summary>使用导致此异常的参数的名称初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 类的新实例。</summary>
      <param name="paramName">导致此异常的参数的名称。</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和引发此异常的异常初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 类的新实例。</summary>
      <param name="message">说明发生此异常的原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
      <summary>使用指定的错误消息、参数名和参数值来初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 类的新实例。</summary>
      <param name="paramName">导致异常的参数的名称。</param>
      <param name="actualValue">导致此异常的参数值。</param>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
      <summary>使用指定的错误消息和导致此异常的参数的名称来初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 类的新实例。</summary>
      <param name="paramName">导致异常的参数的名称。</param>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="P:System.ArgumentOutOfRangeException.ActualValue">
      <summary>获取导致此异常的参数值。</summary>
      <returns>Object，它包含导致当前 <see cref="T:System.Exception" /> 的参数的值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ArgumentOutOfRangeException.Message">
      <summary>获取错误消息和无效参数值的字符串表示形式；或者，如果该参数值为 null，则仅获取错误消息。</summary>
      <returns>此异常的文本消息。 此属性的值采用以下两种形式之一。 Condition 值 <paramref name="actualValue" /> 为 null。 传递到构造函数的 <paramref name="message" /> 字符串。 <paramref name="actualValue" /> 不为null。 附有无效参数值字符串表示形式的 <paramref name="message" /> 字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.ArithmeticException">
      <summary>因算术运算、类型转换或转换操作中的错误而引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ArithmeticException.#ctor">
      <summary>初始化 <see cref="T:System.ArithmeticException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.ArithmeticException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.ArithmeticException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为空引用，则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="T:System.Array">
      <summary>提供一些方法，用于创建、处理、搜索数组并对数组进行排序，从而充当公共语言运行时中所有数组的基类。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)">
      <summary>使用由 <see cref="T:System.Array" /> 中每个元素和指定值实现的 <see cref="T:System.IComparable" /> 接口，在一维排序 <see cref="T:System.Array" /> 的某个范围中搜索值。</summary>
      <returns>如果找到 <paramref name="value" />，则为指定 <paramref name="array" /> 中的指定 <paramref name="value" /> 的索引。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小于 <paramref name="array" /> 中的一个或多个元素，则为一个负数，该负数是大于 <paramref name="value" /> 的第一个元素的索引的按位求补。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大于 <paramref name="array" /> 中的任何元素，则为一个负数，该负数是（最后一个元素的索引加 1）的按位求补。</returns>
      <param name="array">要搜索的已排序一维 <see cref="T:System.Array" />。</param>
      <param name="index">要搜索的范围的起始索引。</param>
      <param name="length">要搜索的范围的长度。</param>
      <param name="value">要搜索的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。 - 或 - <paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 不指定 <paramref name="array" /> 中的有效范围。 - 或 - <paramref name="value" /> 是不与 <paramref name="array" /> 的元素兼容的类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 没有实现 <see cref="T:System.IComparable" /> 接口，并且搜索时遇到没有实现 <see cref="T:System.IComparable" /> 接口的元素。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Collections.IComparer" /> 接口，在一维排序 <see cref="T:System.Array" /> 的某个元素范围中搜索值。</summary>
      <returns>如果找到 <paramref name="value" />，则为指定 <paramref name="array" /> 中的指定 <paramref name="value" /> 的索引。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小于 <paramref name="array" /> 中的一个或多个元素，则为一个负数，该负数是大于 <paramref name="value" /> 的第一个元素的索引的按位求补。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大于 <paramref name="array" /> 中的任何元素，则为一个负数，该负数是（最后一个元素的索引加 1）的按位求补。</returns>
      <param name="array">要搜索的已排序一维 <see cref="T:System.Array" />。</param>
      <param name="index">要搜索的范围的起始索引。</param>
      <param name="length">要搜索的范围的长度。</param>
      <param name="value">要搜索的对象。</param>
      <param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.IComparer" /> 实现。 - 或 - 若为 null，则使用每个元素的 <see cref="T:System.IComparable" /> 实现。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。 - 或 - <paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 不指定 <paramref name="array" /> 中的有效范围。 - 或 - <paramref name="comparer" /> 是 null，而 <paramref name="value" /> 是不与 <paramref name="array" /> 的元素兼容的类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 null，<paramref name="value" /> 没有实现 <see cref="T:System.IComparable" /> 接口，并且搜索时遇到没有实现 <see cref="T:System.IComparable" /> 接口的元素。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Object)">
      <summary>使用由 <see cref="T:System.Array" /> 中每个元素和指定的对象实现的 <see cref="T:System.IComparable" /> 接口，在整个一维排序 <see cref="T:System.Array" /> 中搜索特定元素。</summary>
      <returns>如果找到 <paramref name="value" />，则为指定 <paramref name="array" /> 中的指定 <paramref name="value" /> 的索引。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小于 <paramref name="array" /> 中的一个或多个元素，则为一个负数，该负数是大于 <paramref name="value" /> 的第一个元素的索引的按位求补。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大于 <paramref name="array" /> 中的任何元素，则为一个负数，该负数是（最后一个元素的索引加 1）的按位求补。</returns>
      <param name="array">要搜索的已排序一维 <see cref="T:System.Array" />。</param>
      <param name="value">要搜索的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 是不与 <paramref name="array" /> 的元素兼容的类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 没有实现 <see cref="T:System.IComparable" /> 接口，并且搜索时遇到没有实现 <see cref="T:System.IComparable" /> 接口的元素。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Collections.IComparer" /> 接口，在整个一维排序 <see cref="T:System.Array" /> 中搜索值。</summary>
      <returns>如果找到 <paramref name="value" />，则为指定 <paramref name="array" /> 中的指定 <paramref name="value" /> 的索引。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小于 <paramref name="array" /> 中的一个或多个元素，则为一个负数，该负数是大于 <paramref name="value" /> 的第一个元素的索引的按位求补。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大于 <paramref name="array" /> 中的任何元素，则为一个负数，该负数是（最后一个元素的索引加 1）的按位求补。</returns>
      <param name="array">要搜索的已排序一维 <see cref="T:System.Array" />。</param>
      <param name="value">要搜索的对象。</param>
      <param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.IComparer" /> 实现。 - 或 - 若为 null，则使用每个元素的 <see cref="T:System.IComparable" /> 实现。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> 是 null，而 <paramref name="value" /> 是不与 <paramref name="array" /> 的元素兼容的类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 null，<paramref name="value" /> 没有实现 <see cref="T:System.IComparable" /> 接口，并且搜索时遇到没有实现 <see cref="T:System.IComparable" /> 接口的元素。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)">
      <summary>使用由 <see cref="T:System.Array" /> 中每个元素和指定值实现的 <see cref="T:System.IComparable`1" /> 泛型接口，在一维排序 <see cref="T:System.Array" /> 的某个元素范围中搜索值。</summary>
      <returns>如果找到 <paramref name="value" />，则为指定 <paramref name="array" /> 中的指定 <paramref name="value" /> 的索引。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小于 <paramref name="array" /> 中的一个或多个元素，则为一个负数，该负数是大于 <paramref name="value" /> 的第一个元素的索引的按位求补。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大于 <paramref name="array" /> 中的任何元素，则为一个负数，该负数是（最后一个元素的索引加 1）的按位求补。</returns>
      <param name="array">要搜索的从零开始的一维排序 <see cref="T:System.Array" />。</param>
      <param name="index">要搜索的范围的起始索引。</param>
      <param name="length">要搜索的范围的长度。</param>
      <param name="value">要搜索的对象。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。 - 或 - <paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 不指定 <paramref name="array" /> 中的有效范围。 - 或 - <paramref name="value" /> 是不与 <paramref name="array" /> 的元素兼容的类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 没有实现 <see cref="T:System.IComparable`1" /> 泛型接口，并且搜索时遇到没有实现 <see cref="T:System.IComparable`1" /> 泛型接口的元素。</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型接口，在一维排序 <see cref="T:System.Array" /> 的某个元素范围中搜索值。</summary>
      <returns>如果找到 <paramref name="value" />，则为指定 <paramref name="array" /> 中的指定 <paramref name="value" /> 的索引。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小于 <paramref name="array" /> 中的一个或多个元素，则为一个负数，该负数是大于 <paramref name="value" /> 的第一个元素的索引的按位求补。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大于 <paramref name="array" /> 中的任何元素，则为一个负数，该负数是（最后一个元素的索引加 1）的按位求补。</returns>
      <param name="array">要搜索的从零开始的一维排序 <see cref="T:System.Array" />。</param>
      <param name="index">要搜索的范围的起始索引。</param>
      <param name="length">要搜索的范围的长度。</param>
      <param name="value">要搜索的对象。</param>
      <param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现。 - 或 - 若为 null，则使用每个元素的 <see cref="T:System.IComparable`1" /> 实现。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。 - 或 - <paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 不指定 <paramref name="array" /> 中的有效范围。 - 或 - <paramref name="comparer" /> 是 null，而 <paramref name="value" /> 是不与 <paramref name="array" /> 的元素兼容的类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 null，<paramref name="value" /> 没有实现 <see cref="T:System.IComparable`1" /> 泛型接口，并且搜索时遇到没有实现 <see cref="T:System.IComparable`1" /> 泛型接口的元素。</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],``0)">
      <summary>使用由 <see cref="T:System.Array" /> 中每个元素和指定的对象实现的 <see cref="T:System.IComparable`1" /> 泛型接口，在整个一维排序 <see cref="T:System.Array" /> 中搜索特定元素。</summary>
      <returns>如果找到 <paramref name="value" />，则为指定 <paramref name="array" /> 中的指定 <paramref name="value" /> 的索引。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小于 <paramref name="array" /> 中的一个或多个元素，则为一个负数，该负数是大于 <paramref name="value" /> 的第一个元素的索引的按位求补。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大于 <paramref name="array" /> 中的任何元素，则为一个负数，该负数是（最后一个元素的索引加 1）的按位求补。</returns>
      <param name="array">要搜索的从零开始的一维排序 <see cref="T:System.Array" />。</param>
      <param name="value">要搜索的对象。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 没有实现 <see cref="T:System.IComparable`1" /> 泛型接口，并且搜索时遇到没有实现 <see cref="T:System.IComparable`1" /> 泛型接口的元素。</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型接口，在整个一维排序 <see cref="T:System.Array" /> 中搜索值。</summary>
      <returns>如果找到 <paramref name="value" />，则为指定 <paramref name="array" /> 中的指定 <paramref name="value" /> 的索引。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小于 <paramref name="array" /> 中的一个或多个元素，则为一个负数，该负数是大于 <paramref name="value" /> 的第一个元素的索引的按位求补。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大于 <paramref name="array" /> 中的任何元素，则为一个负数，该负数是（最后一个元素的索引加 1）的按位求补。</returns>
      <param name="array">要搜索的从零开始的一维排序 <see cref="T:System.Array" />。</param>
      <param name="value">要搜索的对象。</param>
      <param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现。 - 或 - 若为 null，则使用每个元素的 <see cref="T:System.IComparable`1" /> 实现。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> 是 null，而 <paramref name="value" /> 是不与 <paramref name="array" /> 的元素兼容的类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 null，<paramref name="value" /> 没有实现 <see cref="T:System.IComparable`1" /> 泛型接口，并且搜索时遇到没有实现 <see cref="T:System.IComparable`1" /> 泛型接口的元素。</exception>
    </member>
    <member name="M:System.Array.Clear(System.Array,System.Int32,System.Int32)">
      <summary>将 <see cref="T:System.Array" /> 中的一系列元素设置为零、false 或 null，具体取决于元素类型。</summary>
      <param name="array">
        <see cref="T:System.Array" />，需要清除其元素。</param>
      <param name="index">要清除的一系列元素的起始索引。</param>
      <param name="length">要清除的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。 - 或 - <paramref name="length" /> 小于零。 - 或 - <paramref name="index" /> 与 <paramref name="length" /> 之和大于 <see cref="T:System.Array" /> 的大小。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Clone">
      <summary>创建 <see cref="T:System.Array" /> 的浅表副本。</summary>
      <returns>
        <see cref="T:System.Array" /> 的浅表副本。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>从指定的源索引开始，复制 <see cref="T:System.Array" /> 中的一系列元素，将它们粘贴到另一 <see cref="T:System.Array" /> 中（从指定的目标索引开始）。 保证在复制未成功完成的情况下撤消所有更改。</summary>
      <param name="sourceArray">
        <see cref="T:System.Array" />，它包含要复制的数据。</param>
      <param name="sourceIndex">一个 32 位整数，它表示 <paramref name="sourceArray" /> 中复制开始处的索引。</param>
      <param name="destinationArray">
        <see cref="T:System.Array" />，它接收数据。</param>
      <param name="destinationIndex">一个 32 位整数，它表示 <paramref name="destinationArray" /> 中存储开始处的索引。</param>
      <param name="length">一个 32 位整数，它表示要复制的元素数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> 为 null。 - 或 - <paramref name="destinationArray" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 的秩不同。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> 类型不同于并且不是从 <paramref name="destinationArray" /> 类型派生的。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="sourceArray" /> 中的至少一个元素无法强制转换为 <paramref name="destinationArray" /> 类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" /> 小于 <paramref name="sourceArray" /> 的第一维的下限。 - 或 - <paramref name="destinationIndex" /> 小于 <paramref name="destinationArray" /> 的第一维的下限。 - 或 - <paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> 大于从 <paramref name="sourceIndex" /> 到 <paramref name="sourceArray" /> 末尾的元素数。 - 或 - <paramref name="length" /> 大于从 <paramref name="destinationIndex" /> 到 <paramref name="destinationArray" /> 末尾的元素数。</exception>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Array,System.Int32)">
      <summary>从第一个元素开始复制 <see cref="T:System.Array" /> 中的一系列元素，将它们粘贴到另一 <see cref="T:System.Array" /> 中（从第一个元素开始）。 长度指定为 32 位整数。</summary>
      <param name="sourceArray">
        <see cref="T:System.Array" />，它包含要复制的数据。</param>
      <param name="destinationArray">
        <see cref="T:System.Array" />，它接收数据。</param>
      <param name="length">一个 32 位整数，它表示要复制的元素数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> 为 null。 - 或 - <paramref name="destinationArray" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 的秩不同。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 是不兼容的类型。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="sourceArray" /> 中的至少一个元素无法强制转换为 <paramref name="destinationArray" /> 类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> 大于 <paramref name="sourceArray" /> 中的元素数。 - 或 - <paramref name="length" /> 大于 <paramref name="destinationArray" /> 中的元素数。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>从指定的源索引开始，复制 <see cref="T:System.Array" /> 中的一系列元素，将它们粘贴到另一 <see cref="T:System.Array" /> 中（从指定的目标索引开始）。 长度和索引指定为 32 位整数。</summary>
      <param name="sourceArray">
        <see cref="T:System.Array" />，它包含要复制的数据。</param>
      <param name="sourceIndex">一个 32 位整数，它表示 <paramref name="sourceArray" /> 中复制开始处的索引。</param>
      <param name="destinationArray">
        <see cref="T:System.Array" />，它接收数据。</param>
      <param name="destinationIndex">一个 32 位整数，它表示 <paramref name="destinationArray" /> 中存储开始处的索引。</param>
      <param name="length">一个 32 位整数，它表示要复制的元素数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> 为 null。 - 或 - <paramref name="destinationArray" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 的秩不同。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 是不兼容的类型。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="sourceArray" /> 中的至少一个元素无法强制转换为 <paramref name="destinationArray" /> 类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" /> 小于 <paramref name="sourceArray" /> 的第一维的下限。 - 或 - <paramref name="destinationIndex" /> 小于 <paramref name="destinationArray" /> 的第一维的下限。 - 或 - <paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> 大于从 <paramref name="sourceIndex" /> 到 <paramref name="sourceArray" /> 末尾的元素数。 - 或 - <paramref name="length" /> 大于从 <paramref name="destinationIndex" /> 到 <paramref name="destinationArray" /> 末尾的元素数。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.CopyTo(System.Array,System.Int32)">
      <summary>将当前一维 <see cref="T:System.Array" /> 的所有元素复制到指定的一维 <see cref="T:System.Array" /> 中（从指定的目标 <see cref="T:System.Array" /> 索引开始）。 索引指定为 32 位整数。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从当前 <see cref="T:System.Array" /> 复制的元素的目标位置。</param>
      <param name="index">一个 32 位整数，它表示 <paramref name="array" /> 中复制开始处的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。 - 或 - 源 <see cref="T:System.Array" /> 中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">无法自动将源 <see cref="T:System.Array" /> 的类型强制转换为目标 <paramref name="array" /> 的类型。</exception>
      <exception cref="T:System.RankException">源 <see cref="T:System.Array" /> 是多维的。</exception>
      <exception cref="T:System.InvalidCastException">源 <see cref="T:System.Array" /> 中至少有一个元素无法强制转换为目标 <paramref name="array" /> 的类型。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32)">
      <summary>创建使用从零开始的索引、具有指定 <see cref="T:System.Type" /> 和长度的一维 <see cref="T:System.Array" />。</summary>
      <returns>使用从零开始的索引、具有指定 <see cref="T:System.Type" /> 和指定长度的新的一维 <see cref="T:System.Array" />。</returns>
      <param name="elementType">要创建的 <see cref="T:System.Array" /> 的 <see cref="T:System.Type" />。</param>
      <param name="length">要创建的 <see cref="T:System.Array" /> 的大小。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> 不是有效的 <see cref="T:System.Type" />。</exception>
      <exception cref="T:System.NotSupportedException">不支持 <paramref name="elementType" />。 例如，不支持 <see cref="T:System.Void" />。 - 或 - <paramref name="elementType" /> 是一个开放式泛型类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 小于零。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32[])">
      <summary>创建使用从零开始的索引、具有指定 <see cref="T:System.Type" /> 和维长的多维 <see cref="T:System.Array" />。 维的长度在一个 32 位整数数组中指定。</summary>
      <returns>使用从零开始的索引、具有指定 <see cref="T:System.Type" /> 的新的多维 <see cref="T:System.Array" />，其每个维度都为指定的长度。</returns>
      <param name="elementType">要创建的 <see cref="T:System.Array" /> 的 <see cref="T:System.Type" />。</param>
      <param name="lengths">一个 32 位整数数组，它表示要创建的 <see cref="T:System.Array" /> 中每个维的大小。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> 为 null。 - 或 - <paramref name="lengths" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> 不是有效的 <see cref="T:System.Type" />。 - 或 - <paramref name="lengths" /> 数组包含的元素少于一个。</exception>
      <exception cref="T:System.NotSupportedException">不支持 <paramref name="elementType" />。 例如，不支持 <see cref="T:System.Void" />。 - 或 - <paramref name="elementType" /> 是一个开放式泛型类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lengths" /> 中的任何值都小于零。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])">
      <summary>创建具有指定下限、指定 <see cref="T:System.Type" /> 和维长的多维 <see cref="T:System.Array" />。</summary>
      <returns>新的指定 <see cref="T:System.Type" /> 的多维 <see cref="T:System.Array" />，每个维度都有指定的长度和下限。</returns>
      <param name="elementType">要创建的 <see cref="T:System.Array" /> 的 <see cref="T:System.Type" />。</param>
      <param name="lengths">一维数组，它包含要创建的 <see cref="T:System.Array" /> 的每个维度的大小。</param>
      <param name="lowerBounds">一维数组，它包含要创建的 <see cref="T:System.Array" /> 的每个维度的下限（起始索引）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> 为 null。 - 或 - <paramref name="lengths" /> 为 null。 - 或 - <paramref name="lowerBounds" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> 不是有效的 <see cref="T:System.Type" />。 - 或 - <paramref name="lengths" /> 数组包含的元素少于一个。 - 或 - <paramref name="lengths" /> 和 <paramref name="lowerBounds" /> 数组包含的元素数不同。</exception>
      <exception cref="T:System.NotSupportedException">不支持 <paramref name="elementType" />。 例如，不支持 <see cref="T:System.Void" />。 - 或 - <paramref name="elementType" /> 是一个开放式泛型类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lengths" /> 中的任何值都小于零。 - 或 - <paramref name="lowerBounds" /> 中的任意一个值都很大，因此，维的下限和长度的和大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Exists``1(``0[],System.Predicate{``0})">
      <summary>确定指定数组包含的元素是否与指定谓词定义的条件匹配。</summary>
      <returns>如果 <paramref name="array" /> 包含一个或多个元素与指定谓词定义的条件匹配，则为 true；否则为 false。</returns>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定义要搜索的元素的条件。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。 - 或 - <paramref name="match" /> 为 null。</exception>
    </member>
    <member name="M:System.Array.Find``1(``0[],System.Predicate{``0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回整个 <see cref="T:System.Array" /> 中的第一个匹配元素。</summary>
      <returns>如果找到与指定谓词定义的条件匹配的第一个元素，则为该元素；否则为类型 <paramref name="T" /> 的默认值。</returns>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定义要搜索的元素的条件。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。 - 或 - <paramref name="match" /> 为 null。</exception>
    </member>
    <member name="M:System.Array.FindAll``1(``0[],System.Predicate{``0})">
      <summary>检索与指定谓词定义的条件匹配的所有元素。</summary>
      <returns>如果找到一个其中所有元素均与指定谓词定义的条件匹配的 <see cref="T:System.Array" />，则为该数组；否则为一个空 <see cref="T:System.Array" />。</returns>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定义要搜索的元素的条件。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。 - 或 - <paramref name="match" /> 为 null。</exception>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
      <summary>搜索与指定谓词所定义的条件相匹配的一个元素，并返回 <see cref="T:System.Array" /> 中从指定的索引开始、包含指定元素个数的元素范围内第一个匹配项的从零开始的索引。</summary>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="startIndex">从零开始的搜索的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定义要搜索的元素的条件。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。 - 或 - <paramref name="match" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。 - 或 - <paramref name="count" /> 小于零。 - 或 - <paramref name="startIndex" /> 和 <paramref name="count" /> 指定的不是 <paramref name="array" /> 中的有效部分。</exception>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回 <see cref="T:System.Array" /> 中从指定索引到最后一个元素的元素范围内第一个匹配项的从零开始的索引。</summary>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="startIndex">从零开始的搜索的起始索引。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定义要搜索的元素的条件。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。 - 或 - <paramref name="match" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。</exception>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Predicate{``0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回整个 <see cref="T:System.Array" /> 中第一个匹配元素的从零开始的索引。</summary>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定义要搜索的元素的条件。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。 - 或 - <paramref name="match" /> 为 null。</exception>
    </member>
    <member name="M:System.Array.FindLast``1(``0[],System.Predicate{``0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回整个 <see cref="T:System.Array" /> 中的最后一个匹配元素。</summary>
      <returns>如果找到，则为与指定谓词所定义的条件相匹配的最后一个元素；否则为类型 <paramref name="T" /> 的默认值。</returns>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定义要搜索的元素的条件。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。 - 或 - <paramref name="match" /> 为 null。</exception>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回 <see cref="T:System.Array" /> 中包含指定元素个数、到指定索引结束的元素范围内最后一个匹配项的从零开始的索引。</summary>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定义要搜索的元素的条件。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。 - 或 - <paramref name="match" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。 - 或 - <paramref name="count" /> 小于零。 - 或 - <paramref name="startIndex" /> 和 <paramref name="count" /> 指定的不是 <paramref name="array" /> 中的有效部分。</exception>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})">
      <summary>搜索与由指定谓词定义的条件相匹配的元素，并返回 <see cref="T:System.Array" /> 中从第一个元素到指定索引的元素范围内最后一个匹配项的从零开始的索引。</summary>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定义要搜索的元素的条件。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。 - 或 - <paramref name="match" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。</exception>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Predicate{``0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回整个 <see cref="T:System.Array" /> 中最后一个匹配元素的从零开始的索引。</summary>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定义要搜索的元素的条件。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。 - 或 - <paramref name="match" /> 为 null。</exception>
    </member>
    <member name="M:System.Array.GetEnumerator">
      <summary>返回 <see cref="T:System.Array" /> 的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>用于 <see cref="T:System.Array" /> 的 <see cref="T:System.Collections.IEnumerator" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Array.GetLength(System.Int32)">
      <summary>获取一个 32 位整数，该整数表示 <see cref="T:System.Array" /> 的指定维中的元素数。</summary>
      <returns>一个 32 位整数，它表示指定维中的元素数。</returns>
      <param name="dimension">
        <see cref="T:System.Array" /> 的从零开始的维度，其长度需要确定。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> 小于零。 - 或 - <paramref name="dimension" /> 等于或大于 <see cref="P:System.Array.Rank" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.GetLowerBound(System.Int32)">
      <summary>获取 <see cref="T:System.Array" /> 中指定维度的下限。</summary>
      <returns>
        <see cref="T:System.Array" /> 中指定维度的下限。</returns>
      <param name="dimension">
        <see cref="T:System.Array" /> 的从零开始的维度，其下限需要确定。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> 小于零。 - 或 - <paramref name="dimension" /> 等于或大于 <see cref="P:System.Array.Rank" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.GetUpperBound(System.Int32)">
      <summary>获取 <see cref="T:System.Array" /> 的指定维度的上限。</summary>
      <returns>
        <see cref="T:System.Array" /> 中的指定维度的上限。</returns>
      <param name="dimension">
        <see cref="T:System.Array" /> 的从零开始的维度，其上限需要确定。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> 小于零。 - 或 - <paramref name="dimension" /> 等于或大于 <see cref="P:System.Array.Rank" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.GetValue(System.Int32)">
      <summary>获取一维 <see cref="T:System.Array" /> 中指定位置的值。 索引指定为 32 位整数。</summary>
      <returns>一维 <see cref="T:System.Array" /> 中指定位置的值。</returns>
      <param name="index">一个 32 位整数，它表示要获取的 <see cref="T:System.Array" /> 元素的位置。</param>
      <exception cref="T:System.ArgumentException">当前的 <see cref="T:System.Array" /> 不是正好有一维。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 超出当前 <see cref="T:System.Array" /> 的有效索引的范围。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Array.GetValue(System.Int32[])">
      <summary>获取多维 <see cref="T:System.Array" /> 中指定位置的值。 索引指定为一个 32 位整数数组。</summary>
      <returns>多维 <see cref="T:System.Array" /> 中指定位置的值。</returns>
      <param name="indices">32 位整数的一维数组，它表示用于指定要获取的 <see cref="T:System.Array" /> 元素的位置的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">当前 <see cref="T:System.Array" /> 中的维数不等于 <paramref name="indices" /> 中的元素数。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="indices" /> 中的任何元素都超出当前 <see cref="T:System.Array" /> 的对应维度的有效索引的范围。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object)">
      <summary>搜索指定的对象，并返回整个一维 <see cref="T:System.Array" /> 中第一个匹配项的索引。</summary>
      <returns>如果在整个 <paramref name="array" /> 中找到 <paramref name="value" /> 的匹配项，则为第一个匹配项的索引；否则为该数组的下限减 1。</returns>
      <param name="array">要搜索的一维 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32)">
      <summary>搜索指定的对象，并返回一维 <see cref="T:System.Array" /> 中从指定索引到最后一个元素这部分元素中第一个匹配项的索引。</summary>
      <returns>如果在 <paramref name="array" /> 中从 <paramref name="startIndex" /> 到最后一个元素这部分元素中第一个与 <paramref name="value" /> 匹配的项的索引；否则为该数组的下限减 1。</returns>
      <param name="array">要搜索的一维 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <param name="startIndex">搜索的起始索引。 空数组中 0（零）为有效值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <summary>搜索指定的对象，并返回一维 <see cref="T:System.Array" /> 中从指定索引开始包含指定个元素的这部分元素中第一个匹配项的索引。</summary>
      <returns>如果在 <paramref name="array" /> 中从 <paramref name="startIndex" /> 开始并且包含的元素个数为在 <paramref name="count" /> 中指定的个数的这部分元素中找到 <paramref name="value" /> 的匹配项，则为第一个匹配项的索引；否则为该数组的下限减 1。</returns>
      <param name="array">要搜索的一维 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <param name="startIndex">搜索的起始索引。 空数组中 0（零）为有效值。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。 - 或 - <paramref name="count" /> 小于零。 - 或 - <paramref name="startIndex" /> 和 <paramref name="count" /> 指定的不是 <paramref name="array" /> 中的有效部分。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0)">
      <summary>搜索指定的对象，并返回整个 <see cref="T:System.Array" /> 中第一个匹配项的索引。</summary>
      <returns>如果在整个 <paramref name="array" /> 中找到 <paramref name="value" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32)">
      <summary>搜索指定的对象，并返回 <see cref="T:System.Array" /> 中从指定索引到最后一个元素这部分元素中第一个匹配项的索引。</summary>
      <returns>如果在 <paramref name="array" /> 中从 <paramref name="startIndex" /> 到最后一个元素这部分元素中找到 <paramref name="value" /> 的匹配项，则为第一个匹配项的从零开始的索引；否则为 -1。</returns>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <param name="startIndex">从零开始的搜索的起始索引。 空数组中 0（零）为有效值。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。</exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)">
      <summary>搜索指定的对象，并返回 <see cref="T:System.Array" /> 中从指定索引开始包含指定个元素的这部分元素中第一个匹配项的索引。</summary>
      <returns>如果在 <paramref name="array" /> 中从 <paramref name="startIndex" /> 开始、包含 <paramref name="count" /> 所指定的元素个数的这部分元素中，找到 <paramref name="value" /> 的匹配项，则为第一个匹配项的从零开始的索引；否则为 -1。</returns>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <param name="startIndex">从零开始的搜索的起始索引。 空数组中 0（零）为有效值。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。 - 或 - <paramref name="count" /> 小于零。 - 或 - <paramref name="startIndex" /> 和 <paramref name="count" /> 指定的不是 <paramref name="array" /> 中的有效部分。</exception>
    </member>
    <member name="M:System.Array.Initialize">
      <summary>通过调用值类型的默认构造函数，初始化值类型 <see cref="T:System.Array" /> 的每一个元素。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object)">
      <summary>搜索指定的对象，并返回整个一维 <see cref="T:System.Array" /> 中最后一个匹配项的索引。</summary>
      <returns>如果在整个 <paramref name="array" /> 中找到 <paramref name="value" /> 的匹配项，则为最后一个匹配项的索引；否则为该数组的下限减 1。</returns>
      <param name="array">要搜索的一维 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32)">
      <summary>搜索指定的对象，并返回一维 <see cref="T:System.Array" /> 中从第一个元素到指定索引这部分元素中最后一个匹配项的索引。</summary>
      <returns>如果在 <paramref name="array" /> 中从第一个元素到 <paramref name="startIndex" /> 这部分元素中找到 <paramref name="value" /> 的匹配项，则为最后一个匹配项的索引；否则为该数组的下限减 1。</returns>
      <param name="array">要搜索的一维 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <param name="startIndex">向后搜索的起始索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <summary>搜索指定的对象，并返回一维 <see cref="T:System.Array" /> 中到指定索引为止包含指定个元素的这部分元素中最后一个匹配项的索引。</summary>
      <returns>如果在 <paramref name="array" /> 中到 <paramref name="startIndex" /> 为止并且包含的元素个数为在 <paramref name="count" /> 中指定的个数的这部分元素中找到 <paramref name="value" /> 的匹配项，则为最后一个匹配项的索引；否则为该数组的下限减 1。</returns>
      <param name="array">要搜索的一维 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <param name="startIndex">向后搜索的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。 - 或 - <paramref name="count" /> 小于零。 - 或 - <paramref name="startIndex" /> 和 <paramref name="count" /> 指定的不是 <paramref name="array" /> 中的有效部分。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0)">
      <summary>搜索指定的对象，并返回整个 <see cref="T:System.Array" /> 中最后一个匹配项的索引。</summary>
      <returns>如果在整个 <paramref name="array" /> 中找到 <paramref name="value" /> 的匹配项，则为最后一个匹配项的从零开始的索引；否则为 -1。</returns>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32)">
      <summary>搜索指定的对象，并返回 <see cref="T:System.Array" /> 中从第一个元素到指定索引这部分元素中最后一个匹配项的索引。</summary>
      <returns>如果在 <paramref name="array" /> 中从第一个元素到 <paramref name="startIndex" /> 这部分元素中找到 <paramref name="value" /> 的匹配项，则为最后一个匹配项的从零开始的索引；否则为 -1。</returns>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。</exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)">
      <summary>搜索指定的对象，并返回 <see cref="T:System.Array" /> 中到指定索引为止包含指定个元素的这部分元素中最后一个匹配项的索引。</summary>
      <returns>如果在 <paramref name="array" /> 中到 <paramref name="startIndex" /> 为止、包含 <paramref name="count" /> 所指定的元素个数的这部分元素中，找到 <paramref name="value" /> 的匹配项，则为最后一个匹配项的从零开始的索引；否则为 -1。</returns>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。 - 或 - <paramref name="count" /> 小于零。 - 或 - <paramref name="startIndex" /> 和 <paramref name="count" /> 指定的不是 <paramref name="array" /> 中的有效部分。</exception>
    </member>
    <member name="P:System.Array.Length">
      <summary>获得一个 32 位整数，该整数表示 <see cref="T:System.Array" /> 的所有维数中元素的总数。</summary>
      <returns>一个 32 位整数，该整数表示 <see cref="T:System.Array" /> 的所有维数中的元素总数；如果数组中没有元素，则该值为零。</returns>
      <exception cref="T:System.OverflowException">数组是多维的，并且包括多于 <see cref="F:System.Int32.MaxValue" /> 个元素。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Array.Rank">
      <summary>获取 <see cref="T:System.Array" /> 的秩（维数）。</summary>
      <returns>该 <see cref="T:System.Array" /> 的秩（维数）。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Resize``1(``0[]@,System.Int32)">
      <summary>将数组的元素数更改为指定的新大小。</summary>
      <param name="array">要调整大小的一维数组，该数组从零开始；如果为 null 则新建具有指定大小的数组。</param>
      <param name="newSize">新数组的大小。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="newSize" /> 小于零。</exception>
    </member>
    <member name="M:System.Array.Reverse(System.Array)">
      <summary>反转整个一维 <see cref="T:System.Array" /> 中元素的顺序。</summary>
      <param name="array">要反转的一维 <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Reverse(System.Array,System.Int32,System.Int32)">
      <summary>反转一维 <see cref="T:System.Array" /> 中某部分元素的元素顺序。</summary>
      <param name="array">要反转的一维 <see cref="T:System.Array" />。</param>
      <param name="index">要反转的部分的起始索引。</param>
      <param name="length">要反转的部分中的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。 - 或 - <paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 不指定 <paramref name="array" /> 中的有效范围。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32)">
      <summary>将某值设置给一维 <see cref="T:System.Array" /> 中指定位置的元素。 索引指定为 32 位整数。</summary>
      <param name="value">指定元素的新值。</param>
      <param name="index">一个 32 位整数，它表示要设置的 <see cref="T:System.Array" /> 元素的位置。</param>
      <exception cref="T:System.ArgumentException">当前的 <see cref="T:System.Array" /> 不是正好有一维。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不能强制转换为当前 <see cref="T:System.Array" /> 的元素类型。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 超出当前 <see cref="T:System.Array" /> 的有效索引的范围。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32[])">
      <summary>将某值设置给多维 <see cref="T:System.Array" /> 中指定位置的元素。 索引指定为一个 32 位整数数组。</summary>
      <param name="value">指定元素的新值。</param>
      <param name="indices">32 位整数的一维数组，它表示用于指定要设置的元素的位置的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">当前 <see cref="T:System.Array" /> 中的维数不等于 <paramref name="indices" /> 中的元素数。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不能强制转换为当前 <see cref="T:System.Array" /> 的元素类型。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="indices" /> 中的任何元素都超出当前 <see cref="T:System.Array" /> 的对应维度的有效索引的范围。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array)">
      <summary>使用 <see cref="T:System.Array" /> 中每个元素的 <see cref="T:System.IComparable" /> 实现，对整个一维 <see cref="T:System.Array" /> 中的元素进行排序。</summary>
      <param name="array">要排序的一维 <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="array" /> 中的一个或多个元素未实现 <see cref="T:System.IComparable" /> 接口。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Collections.IComparer" />，对一维 <see cref="T:System.Array" /> 中的元素进行排序。</summary>
      <param name="array">要排序的一维 <see cref="T:System.Array" />。</param>
      <param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.IComparer" /> 实现。 - 或 - 若为 null，则使用每个元素的 <see cref="T:System.IComparable" /> 实现。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 null，<paramref name="array" /> 中的一个或多个元素不实现 <see cref="T:System.IComparable" /> 接口。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> 的实现导致排序时出现错误。 例如，将某个项与其自身进行比较时，<paramref name="comparer" /> 可能不返回 0。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Int32,System.Int32)">
      <summary>使用 <see cref="T:System.Array" /> 中每个元素的 <see cref="T:System.IComparable" /> 实现，对一维 <see cref="T:System.Array" /> 中某部分元素进行排序。</summary>
      <param name="array">要排序的一维 <see cref="T:System.Array" />。</param>
      <param name="index">排序范围的起始索引。</param>
      <param name="length">排序范围内的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。 - 或 - <paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 不指定 <paramref name="array" /> 中的有效范围。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="array" /> 中的一个或多个元素未实现 <see cref="T:System.IComparable" /> 接口。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Collections.IComparer" />，对一维 <see cref="T:System.Array" /> 的部分元素进行排序。</summary>
      <param name="array">要排序的一维 <see cref="T:System.Array" />。</param>
      <param name="index">排序范围的起始索引。</param>
      <param name="length">排序范围内的元素数。</param>
      <param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.IComparer" /> 实现。 - 或 - 若为 null，则使用每个元素的 <see cref="T:System.IComparable" /> 实现。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。 - 或 - <paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 不指定 <paramref name="array" /> 中的有效范围。 - 或 - <paramref name="comparer" /> 的实现导致排序时出现错误。 例如，将某个项与其自身进行比较时，<paramref name="comparer" /> 可能不返回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 null，<paramref name="array" /> 中的一个或多个元素不实现 <see cref="T:System.IComparable" /> 接口。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort``1(``0[])">
      <summary>使用 <see cref="T:System.Array" /> 的每个元素的 <see cref="T:System.IComparable`1" /> 泛型接口实现，对整个 <see cref="T:System.Array" /> 中的元素进行排序。</summary>
      <param name="array">要排序的从零开始的一维 <see cref="T:System.Array" />。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="array" /> 中的一个或多个元素未实现 <see cref="T:System.IComparable`1" /> 泛型接口。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型接口，对 <see cref="T:System.Array" /> 中的元素进行排序。</summary>
      <param name="array">要排序的从零开始的一维 <see cref="T:System.Array" /></param>
      <param name="comparer">比较元素时使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型接口实现；如果为 null，则使用每个元素的 <see cref="T:System.IComparable`1" /> 泛型接口实现。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 null，并且 <paramref name="array" /> 中的一个或多个元素未实现 <see cref="T:System.IComparable`1" /> 泛型接口。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> 的实现导致排序时出现错误。 例如，将某个项与其自身进行比较时，<paramref name="comparer" /> 可能不返回 0。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Comparison{``0})">
      <summary>使用指定的 <see cref="T:System.Comparison`1" /> 对 <see cref="T:System.Array" /> 中的元素进行排序。</summary>
      <param name="array">要排序的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="comparison">比较元素时要使用的 <see cref="T:System.Comparison`1" />。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。 - 或 - <paramref name="comparison" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">在排序过程中，<paramref name="comparison" /> 的实现会导致错误。 例如，将某个项与其自身进行比较时，<paramref name="comparison" /> 可能不返回 0。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Int32,System.Int32)">
      <summary>使用 <see cref="T:System.Array" /> 的每个元素的 <see cref="T:System.IComparable`1" /> 泛型接口实现，对 <see cref="T:System.Array" /> 中某个元素范围内的元素进行排序。</summary>
      <param name="array">要排序的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="index">排序范围的起始索引。</param>
      <param name="length">排序范围内的元素数。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。 - 或 - <paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 不指定 <paramref name="array" /> 中的有效范围。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="array" /> 中的一个或多个元素未实现 <see cref="T:System.IComparable`1" /> 泛型接口。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型接口，对 <see cref="T:System.Array" /> 中某个元素范围内的元素进行排序。</summary>
      <param name="array">要排序的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="index">排序范围的起始索引。</param>
      <param name="length">排序范围内的元素数。</param>
      <param name="comparer">比较元素时使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型接口实现；如果为 null，则使用每个元素的 <see cref="T:System.IComparable`1" /> 泛型接口实现。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。 - 或 - <paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 不指定 <paramref name="array" /> 中的有效范围。 - 或 - <paramref name="comparer" /> 的实现导致排序时出现错误。 例如，将某个项与其自身进行比较时，<paramref name="comparer" /> 可能不返回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 null，并且 <paramref name="array" /> 中的一个或多个元素未实现 <see cref="T:System.IComparable`1" /> 泛型接口。</exception>
    </member>
    <member name="P:System.Array.System#Collections#ICollection#Count">
      <summary>获取 <see cref="T:System.Array" /> 中包含的元素数。</summary>
      <returns>T:System.Collections.ICollection 中包含的元素个数。</returns>
    </member>
    <member name="P:System.Array.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Array" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see cref="T:System.Array" /> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Array.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Array" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Array" /> 的访问的对象。</returns>
    </member>
    <member name="M:System.Array.System#Collections#IList#Add(System.Object)">
      <summary>向 <see cref="T:System.Collections.IList" /> 中添加项。</summary>
      <returns>新元素所插入到的位置，或为 -1 以指示未将该项插入到集合中。</returns>
      <param name="value">要添加到 <see cref="T:System.Collections.IList" /> 的对象。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 为只读。 - 或 - <see cref="T:System.Collections.IList" /> 具有固定大小。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Clear">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 为只读。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Contains(System.Object)">
      <summary>确定某元素是否在 <see cref="T:System.Collections.IList" /> 中。</summary>
      <returns>如果在 <see cref="T:System.Collections.IList" /> 中找到 <paramref name="value" />，则为 true；否则为 false。</returns>
      <param name="value">要在当前列表中定位的对象。 要定位的元素对于引用类型可以是 null。</param>
    </member>
    <member name="M:System.Array.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 中特定项的索引。</summary>
      <returns>如果在列表中找到，则为值的索引；否则为 -1。</returns>
      <param name="value">要在当前列表中定位的对象。</param>
    </member>
    <member name="M:System.Array.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>将一个项插入指定索引处的 <see cref="T:System.Collections.IList" />。</summary>
      <param name="index">
        <paramref name="value" /> 将插入到的索引。</param>
      <param name="value">要插入的对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 为只读。 - 或 - <see cref="T:System.Collections.IList" /> 具有固定大小。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> 在 <see cref="T:System.Collections.IList" /> 中是 null 引用。</exception>
    </member>
    <member name="P:System.Array.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Array" /> 是否具有固定大小。</summary>
      <returns>如果 <see cref="T:System.Array" /> 具有固定大小，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Array.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Array" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Array" /> 为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Array.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置位于指定索引处的元素。</summary>
      <returns>位于指定索引处的元素。</returns>
      <param name="index">要获取或设置的元素的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。 - 或 - <paramref name="index" /> 等于或大于 <see cref="P:System.Collections.ICollection.Count" />。</exception>
      <exception cref="T:System.ArgumentException">当前的 <see cref="T:System.Array" /> 不是正好有一维。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除特定对象的第一个匹配项。</summary>
      <param name="value">要从 <see cref="T:System.Collections.IList" /> 中移除的对象。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 为只读。 - 或 - <see cref="T:System.Collections.IList" /> 具有固定大小。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除指定索引处的 <see cref="T:System.Collections.IList" /> 项。</summary>
      <param name="index">要移除的元素的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">索引不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 为只读。 - 或 - <see cref="T:System.Collections.IList" /> 具有固定大小。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>确定当前集合对象在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个指示当前集合对象与其他对象的关系的整数，如下表所示。 返回值 描述 -1 当前实例位于 <paramref name="other" /> 之前。 0 当前实例与 <paramref name="other" /> 位于同一位置。 1 当前实例位于 <paramref name="other" /> 之后。</returns>
      <param name="other">要与当前实例进行比较的对象。</param>
      <param name="comparer">一个将当前对象与 <paramref name="other" /> 进行比较的对象。</param>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>确定某个对象与当前实例是否相等。</summary>
      <returns>如果两个对象相等，则为 true；否则为 false。</returns>
      <param name="other">要与当前实例进行比较的对象。</param>
      <param name="comparer">一个可确定当前实例与 <paramref name="other" /> 是否相等的对象。</param>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>返回当前实例的哈希代码。</summary>
      <returns>当前实例的哈希代码。</returns>
      <param name="comparer">一个计算当前对象的哈希代码的对象。</param>
    </member>
    <member name="M:System.Array.TrueForAll``1(``0[],System.Predicate{``0})">
      <summary>确定数组中的每个元素是否都与指定谓词定义的条件匹配。</summary>
      <returns>如果 <paramref name="array" /> 中的每个元素都与指定谓词定义的条件匹配，则为 true；否则为 false。 如果数组中没有元素，则返回值为 true。</returns>
      <param name="array">要对照条件进行检查的从零开始的一维 <see cref="T:System.Array" /></param>
      <param name="match">
        <see cref="T:System.Predicate`1" /> 定义检查元素时要对照的条件。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。 - 或 - <paramref name="match" /> 为 null。</exception>
    </member>
    <member name="T:System.ArraySegment`1">
      <summary>分隔一维数组的一部分。</summary>
      <typeparam name="T">数组段中元素的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ArraySegment`1.#ctor(`0[])">
      <summary>初始化 <see cref="T:System.ArraySegment`1" /> 结构的新实例，该结构用于分隔指定数组中的所有元素。</summary>
      <param name="array">要包装的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
    </member>
    <member name="M:System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.ArraySegment`1" /> 结构的新结构，该结构用于分隔指定数组中指定的元素范围。</summary>
      <param name="array">包含要分隔的元素范围的数组。</param>
      <param name="offset">相应范围中第一个元素的从零开始的索引。</param>
      <param name="count">范围中的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 不指定 <paramref name="array" /> 中的有效范围。</exception>
    </member>
    <member name="P:System.ArraySegment`1.Array">
      <summary>获取原始数组，其中包含数组段分隔的元素范围。</summary>
      <returns>传递到构造函数并且包含由 <see cref="T:System.ArraySegment`1" /> 分隔的范围的原始数组。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.ArraySegment`1.Count">
      <summary>获取由数组段分隔的范围中的元素个数。</summary>
      <returns>由 <see cref="T:System.ArraySegment`1" /> 分隔的范围中的元素个数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.ArraySegment`1.Equals(System.ArraySegment{`0})">
      <summary>确定指定的 <see cref="T:System.ArraySegment`1" /> 结构是否等于当前实例。</summary>
      <returns>如果指定的 <see cref="T:System.ArraySegment`1" /> 结构等于当前实例，则为 true；否则为 false。</returns>
      <param name="obj">要与当前实例进行比较的 <see cref="T:System.ArraySegment`1" /> 结构。</param>
    </member>
    <member name="M:System.ArraySegment`1.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前实例。</summary>
      <returns>如果指定的对象为 <see cref="T:System.ArraySegment`1" /> 结构并且等于当前实例，则为 true；否则为 false。</returns>
      <param name="obj">要与当前实例进行比较的对象。</param>
    </member>
    <member name="M:System.ArraySegment`1.GetHashCode">
      <summary>返回当前实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.ArraySegment`1.Offset">
      <summary>获取由数组段分隔的范围中的第一个元素的位置（相对于原始数组的开始位置）。</summary>
      <returns>由 <see cref="T:System.ArraySegment`1" /> 分隔的范围中的第一个元素的位置（相对于原始数组的开始位置）。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})">
      <summary>指示两个 <see cref="T:System.ArraySegment`1" /> 结构是否相等。</summary>
      <returns>如果 <paramref name="a" /> 等于 <paramref name="b" />，则为 true；否则为 false。</returns>
      <param name="a">相等运算符左侧的 <see cref="T:System.ArraySegment`1" /> 结构。</param>
      <param name="b">相等运算符右侧的 <see cref="T:System.ArraySegment`1" /> 结构。</param>
    </member>
    <member name="M:System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})">
      <summary>指示两个 <see cref="T:System.ArraySegment`1" /> 结构是否不相等。</summary>
      <returns>如果 <paramref name="a" /> 不等于 <paramref name="b" />，则为 true；否则为 false。</returns>
      <param name="a">不等运算符左侧的 <see cref="T:System.ArraySegment`1" /> 结构。</param>
      <param name="b">不等运算符右侧的 <see cref="T:System.ArraySegment`1" /> 结构。</param>
    </member>
    <member name="T:System.ArrayTypeMismatchException">
      <summary>当试图在数组中存储类型不正确的元素时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor">
      <summary>初始化 <see cref="T:System.ArrayTypeMismatchException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.ArrayTypeMismatchException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.ArrayTypeMismatchException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为空引用，则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="T:System.AsyncCallback">
      <summary>引用在相应异步操作完成时调用的方法。</summary>
      <param name="ar">异步操作的结果。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Attribute">
      <summary>表示自定义属性的基类。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Attribute.#ctor">
      <summary>初始化 <see cref="T:System.Attribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Attribute.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <returns>如果 <paramref name="obj" /> 等于此实例的类型和值，则为 true；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的 <see cref="T:System.Object" /> 或 null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)">
      <summary>检索应用于指定程序集的自定义属性。 参数指定程序集和要搜索的自定义属性的类型。</summary>
      <returns>一个引用，指向应用于 <paramref name="element" /> 的 <paramref name="attributeType" /> 类型的单个自定义属性；如果没有此类属性，则为 null。</returns>
      <param name="element">一个从 <see cref="T:System.Reflection.Assembly" /> 类派生的对象，该类描述可重用模块集合。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不从 <see cref="T:System.Attribute" /> 派生。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)">
      <summary>检索应用于类型成员的自定义属性。 参数指定成员和要搜索的自定义属性的类型。</summary>
      <returns>一个引用，指向应用于 <paramref name="element" /> 的 <paramref name="attributeType" /> 类型的单个自定义属性；如果没有此类属性，则为 null。</returns>
      <param name="element">一个从 <see cref="T:System.Reflection.MemberInfo" /> 类派生的对象，该类描述类的构造函数、事件、字段、方法或属性成员。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不从 <see cref="T:System.Attribute" /> 派生。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义特性类型。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>检索应用于类型成员的自定义属性。 参数指定成员、要搜索的自定义属性的类型以及是否搜索成员的祖先。</summary>
      <returns>一个引用，指向应用于 <paramref name="element" /> 的 <paramref name="attributeType" /> 类型的单个自定义属性；如果没有此类属性，则为 null。</returns>
      <param name="element">一个从 <see cref="T:System.Reflection.MemberInfo" /> 类派生的对象，该类描述类的构造函数、事件、字段、方法或属性成员。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <param name="inherit">如果为 true，则指定还在 <paramref name="element" /> 的祖先中搜索自定义属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不从 <see cref="T:System.Attribute" /> 派生。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义特性类型。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)">
      <summary>检索应用于方法参数的自定义属性。 参数指定方法参数和要搜索的自定义属性的类型。</summary>
      <returns>一个引用，指向应用于 <paramref name="element" /> 的 <paramref name="attributeType" /> 类型的单个自定义属性；如果没有此类属性，则为 null。</returns>
      <param name="element">一个从 <see cref="T:System.Reflection.ParameterInfo" /> 类派生的对象，该类描述类成员的参数。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不从 <see cref="T:System.Attribute" /> 派生。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义特性类型。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>检索应用于方法参数的自定义属性。 参数指定方法参数、要搜索的自定义属性的类型以及是否搜索方法参数的祖先。</summary>
      <returns>一个引用，指向应用于 <paramref name="element" /> 的 <paramref name="attributeType" /> 类型的单个自定义属性；如果没有此类属性，则为 null。</returns>
      <param name="element">一个从 <see cref="T:System.Reflection.ParameterInfo" /> 类派生的对象，该类描述类成员的参数。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <param name="inherit">如果为 true，则指定还在 <paramref name="element" /> 的祖先中搜索自定义属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不从 <see cref="T:System.Attribute" /> 派生。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义特性类型。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly)">
      <summary>检索应用于程序集的自定义属性的数组。 参数指定程序集。</summary>
      <returns>一个 <see cref="T:System.Attribute" /> 数组，包含应用于 <paramref name="element" /> 的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
      <param name="element">一个从 <see cref="T:System.Reflection.Assembly" /> 类派生的对象，该类描述可重用模块集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)">
      <summary>检索应用于程序集的自定义属性的数组。 参数指定程序集和要搜索的自定义属性的类型。</summary>
      <returns>一个 <see cref="T:System.Attribute" /> 数组，包含应用于 <paramref name="element" /> 的 <paramref name="attributeType" /> 类型的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
      <param name="element">一个从 <see cref="T:System.Reflection.Assembly" /> 类派生的对象，该类描述可重用模块集合。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不从 <see cref="T:System.Attribute" /> 派生。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)">
      <summary>检索应用于类型的成员的自定义属性的数组。 参数指定成员。</summary>
      <returns>一个 <see cref="T:System.Attribute" /> 数组，包含应用于 <paramref name="element" /> 的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
      <param name="element">一个从 <see cref="T:System.Reflection.MemberInfo" /> 类派生的对象，该类描述类的构造函数、事件、字段、方法或属性成员。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义特性类型。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)">
      <summary>检索应用于类型的成员的自定义属性的数组。 参数指定成员、要搜索的自定义属性的类型以及是否搜索成员的祖先。</summary>
      <returns>一个 <see cref="T:System.Attribute" /> 数组，包含应用于 <paramref name="element" /> 的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
      <param name="element">一个从 <see cref="T:System.Reflection.MemberInfo" /> 类派生的对象，该类描述类的构造函数、事件、字段、方法或属性成员。</param>
      <param name="inherit">如果为 true，则指定还在 <paramref name="element" /> 的祖先中搜索自定义属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义特性类型。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)">
      <summary>检索应用于类型的成员的自定义属性的数组。 参数指定成员和要搜索的自定义属性的类型。</summary>
      <returns>一个 <see cref="T:System.Attribute" /> 数组，包含应用于 <paramref name="element" /> 的 <paramref name="type" /> 类型的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
      <param name="element">一个从 <see cref="T:System.Reflection.MemberInfo" /> 类派生的对象，该类描述类的构造函数、事件、字段、方法或属性成员。</param>
      <param name="type">要搜索的自定义属性的类型或基类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不从 <see cref="T:System.Attribute" /> 派生。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义特性类型。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>检索应用于类型的成员的自定义属性的数组。 参数指定成员、要搜索的自定义属性的类型以及是否搜索成员的祖先。</summary>
      <returns>一个 <see cref="T:System.Attribute" /> 数组，包含应用于 <paramref name="element" /> 的 <paramref name="type" /> 类型的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
      <param name="element">一个从 <see cref="T:System.Reflection.MemberInfo" /> 类派生的对象，该类描述类的构造函数、事件、字段、方法或属性成员。</param>
      <param name="type">要搜索的自定义属性的类型或基类型。</param>
      <param name="inherit">如果为 true，则指定还在 <paramref name="element" /> 的祖先中搜索自定义属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不从 <see cref="T:System.Attribute" /> 派生。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义特性类型。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)">
      <summary>检索应用于方法参数的自定义属性的数组。 参数指定方法参数。</summary>
      <returns>一个 <see cref="T:System.Attribute" /> 数组，包含应用于 <paramref name="element" /> 的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
      <param name="element">一个从 <see cref="T:System.Reflection.ParameterInfo" /> 类派生的对象，该类描述类成员的参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义特性类型。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)">
      <summary>检索应用于方法参数的自定义属性的数组。 参数指定方法参数以及是否搜索方法参数的祖先。</summary>
      <returns>一个 <see cref="T:System.Attribute" /> 数组，包含应用于 <paramref name="element" /> 的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
      <param name="element">一个从 <see cref="T:System.Reflection.ParameterInfo" /> 类派生的对象，该类描述类成员的参数。</param>
      <param name="inherit">如果为 true，则指定还在 <paramref name="element" /> 的祖先中搜索自定义属性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> 的 <see cref="P:System.Reflection.ParameterInfo.Member" /> 属性为 null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义特性类型。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)">
      <summary>检索应用于方法参数的自定义属性的数组。 参数指定方法参数和要搜索的自定义属性的类型。</summary>
      <returns>一个 <see cref="T:System.Attribute" /> 数组，包含应用于 <paramref name="element" /> 的 <paramref name="attributeType" /> 类型的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
      <param name="element">一个从 <see cref="T:System.Reflection.ParameterInfo" /> 类派生的对象，该类描述类成员的参数。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不从 <see cref="T:System.Attribute" /> 派生。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义特性类型。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>检索应用于方法参数的自定义属性的数组。 参数指定方法参数、要搜索的自定义属性的类型以及是否搜索方法参数的祖先。</summary>
      <returns>一个 <see cref="T:System.Attribute" /> 数组，包含应用于 <paramref name="element" /> 的 <paramref name="attributeType" /> 类型的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
      <param name="element">一个从 <see cref="T:System.Reflection.ParameterInfo" /> 类派生的对象，该类描述类成员的参数。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <param name="inherit">如果为 true，则指定还在 <paramref name="element" /> 的祖先中搜索自定义属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不从 <see cref="T:System.Attribute" /> 派生。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义特性类型。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Attribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)">
      <summary>确定是否将任意自定义属性应用于程序集。 参数指定程序集和要搜索的自定义属性的类型。</summary>
      <returns>如果类型 <paramref name="attributeType" /> 的某个自定义属性应用于 <paramref name="element" />，则为 true；否则为 false。</returns>
      <param name="element">一个从 <see cref="T:System.Reflection.Assembly" /> 类派生的对象，该类描述可重用模块集合。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不从 <see cref="T:System.Attribute" /> 派生。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)">
      <summary>确定是否将任意自定义属性应用于类型成员。 参数指定成员和要搜索的自定义属性的类型。</summary>
      <returns>如果类型 <paramref name="attributeType" /> 的某个自定义属性应用于 <paramref name="element" />，则为 true；否则为 false。</returns>
      <param name="element">一个从 <see cref="T:System.Reflection.MemberInfo" /> 类派生的对象，该类描述类的构造函数、事件、字段、方法、类型或属性成员。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不从 <see cref="T:System.Attribute" /> 派生。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>确定是否将任意自定义属性应用于类型成员。 参数指定成员、要搜索的自定义属性的类型以及是否搜索成员的祖先。</summary>
      <returns>如果类型 <paramref name="attributeType" /> 的某个自定义属性应用于 <paramref name="element" />，则为 true；否则为 false。</returns>
      <param name="element">一个从 <see cref="T:System.Reflection.MemberInfo" /> 类派生的对象，该类描述类的构造函数、事件、字段、方法、类型或属性成员。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <param name="inherit">如果为 true，则指定还在 <paramref name="element" /> 的祖先中搜索自定义属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不从 <see cref="T:System.Attribute" /> 派生。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)">
      <summary>确定是否将任意自定义属性应用于方法参数。 参数指定方法参数和要搜索的自定义属性的类型。</summary>
      <returns>如果类型 <paramref name="attributeType" /> 的某个自定义属性应用于 <paramref name="element" />，则为 true；否则为 false。</returns>
      <param name="element">一个从 <see cref="T:System.Reflection.ParameterInfo" /> 类派生的对象，该类描述类成员的参数。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不从 <see cref="T:System.Attribute" /> 派生。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>确定是否将任意自定义属性应用于方法参数。 参数指定方法参数、要搜索的自定义属性的类型以及是否搜索方法参数的祖先。</summary>
      <returns>如果类型 <paramref name="attributeType" /> 的某个自定义属性应用于 <paramref name="element" />，则为 true；否则为 false。</returns>
      <param name="element">一个从 <see cref="T:System.Reflection.ParameterInfo" /> 类派生的对象，该类描述类成员的参数。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <param name="inherit">如果为 true，则指定还在 <paramref name="element" /> 的祖先中搜索自定义属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不从 <see cref="T:System.Attribute" /> 派生。</exception>
      <exception cref="T:System.ExecutionEngineException">
        <paramref name="element" /> 不是方法、构造函数或类型。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.AttributeTargets">
      <summary>指定可以对它们应用特性的应用程序元素。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AttributeTargets.All">
      <summary>可以对任何应用程序元素应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Assembly">
      <summary>可以对程序集应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Class">
      <summary>可以对类应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Constructor">
      <summary>可以对构造函数应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Delegate">
      <summary>可以对委托应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Enum">
      <summary>可以对枚举应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Event">
      <summary>可以对事件应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Field">
      <summary>可以对字段应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.GenericParameter">
      <summary>可以对泛型参数应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Interface">
      <summary>可以对接口应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Method">
      <summary>可以对方法应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Module">
      <summary>可以对模块应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Parameter">
      <summary>可以对参数应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Property">
      <summary>可以对属性 (Property) 应用属性 (Attribute)。</summary>
    </member>
    <member name="F:System.AttributeTargets.ReturnValue">
      <summary>可以对返回值应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Struct">
      <summary>可以对结构应用属性，即值类型。</summary>
    </member>
    <member name="T:System.AttributeUsageAttribute">
      <summary>指定另一特性类的用法。 此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)">
      <summary>用指定的 <see cref="T:System.AttributeTargets" />、<see cref="P:System.AttributeUsageAttribute.AllowMultiple" /> 值和 <see cref="P:System.AttributeUsageAttribute.Inherited" /> 值列表初始化 <see cref="T:System.AttributeUsageAttribute" /> 类的新实例。</summary>
      <param name="validOn">使用按位"或"运算符组合的一组值，用于指示哪些程序元素是有效的。</param>
    </member>
    <member name="P:System.AttributeUsageAttribute.AllowMultiple">
      <summary>获取或设置一个布尔值，该值指示能否为一个程序元素指定多个指示属性实例。</summary>
      <returns>如果允许指定多个实例，则为 true；否则为 false。 默认值为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AttributeUsageAttribute.Inherited">
      <summary>获取或设置一个布尔值，该值指示指示的属性能否由派生类和重写成员继承。</summary>
      <returns>如果该属性可由派生类和重写成员继承，则为 true，否则为 false。 默认值为 true。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AttributeUsageAttribute.ValidOn">
      <summary>获取一组值，这组值标识指示的属性可应用到的程序元素。</summary>
      <returns>一个或多个 <see cref="T:System.AttributeTargets" /> 值。 默认值为 All。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.BadImageFormatException">
      <summary>当动态链接库 (DLL) 或可执行程序的文件映像无效时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.BadImageFormatException.#ctor">
      <summary>初始化 <see cref="T:System.BadImageFormatException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.BadImageFormatException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.BadImageFormatException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不是空引用，则当前异常在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.String)">
      <summary>用指定的错误消息和文件名初始化 <see cref="T:System.BadImageFormatException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
      <param name="fileName">包含无效图像的文件的全名。</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.BadImageFormatException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="fileName">包含无效图像的文件的全名。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="P:System.BadImageFormatException.FileName">
      <summary>获取导致该异常的文件的名称。</summary>
      <returns>带有无效图像的文件的名称，或一个空引用（如果未向当前实例的构造函数传递任何文件名）。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.BadImageFormatException.Message">
      <summary>获取错误消息和引发此异常的文件的名称。</summary>
      <returns>包含错误消息和引发此异常的文件名称的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.BadImageFormatException.ToString">
      <summary>返回该异常的完全限定名，还可能返回错误消息、内部异常的名称和堆栈跟踪。</summary>
      <returns>一个字符串，包含该异常的完全限定名，还可能包含错误信息、内部异常的名称和堆栈跟踪。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="T:System.BitConverter">
      <summary>将基础数据类型与字节数组相互转换。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.BitConverter.DoubleToInt64Bits(System.Double)">
      <summary>将指定的双精度浮点数转换为 64 位有符号整数。</summary>
      <returns>64 位有符号整数，其值等于 <paramref name="value" />。</returns>
      <param name="value">要转换的数字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Boolean)">
      <summary>以字节数组的形式返回指定的布尔值。</summary>
      <returns>长度为 1 的字节数组。</returns>
      <param name="value">一个布尔值。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Char)">
      <summary>以字节数组的形式返回指定的 Unicode 字符值。</summary>
      <returns>长度为 2 的字节数组。</returns>
      <param name="value">要转换的字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Double)">
      <summary>以字节数组的形式返回指定的双精度浮点值。</summary>
      <returns>长度为 8 的字节数组。</returns>
      <param name="value">要转换的数字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int16)">
      <summary>以字节数组的形式返回指定的 16 位有符号整数值。</summary>
      <returns>长度为 2 的字节数组。</returns>
      <param name="value">要转换的数字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int32)">
      <summary>以字节数组的形式返回指定的 32 位有符号整数值。</summary>
      <returns>长度为 4 的字节数组。</returns>
      <param name="value">要转换的数字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int64)">
      <summary>以字节数组的形式返回指定的 64 位有符号整数值。</summary>
      <returns>长度为 8 的字节数组。</returns>
      <param name="value">要转换的数字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Single)">
      <summary>以字节数组的形式返回指定的单精度浮点值。</summary>
      <returns>长度为 4 的字节数组。</returns>
      <param name="value">要转换的数字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt16)">
      <summary>以字节数组的形式返回指定的 16 位无符号整数值。</summary>
      <returns>长度为 2 的字节数组。</returns>
      <param name="value">要转换的数字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt32)">
      <summary>以字节数组的形式返回指定的 32 位无符号整数值。</summary>
      <returns>长度为 4 的字节数组。</returns>
      <param name="value">要转换的数字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt64)">
      <summary>以字节数组的形式返回指定的 64 位无符号整数值。</summary>
      <returns>长度为 8 的字节数组。</returns>
      <param name="value">要转换的数字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.BitConverter.Int64BitsToDouble(System.Int64)">
      <summary>将指定的 64 位有符号整数转换成双精度浮点数。</summary>
      <returns>双精度浮点数，其值等于 <paramref name="value" />。</returns>
      <param name="value">要转换的数字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.BitConverter.IsLittleEndian">
      <summary>指示数据在此计算机结构中存储时的字节顺序（“Endian”性质）。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
      <summary>返回由字节数组中指定位置的一个字节转换来的布尔值。</summary>
      <returns>如果 <paramref name="value" /> 中的 <paramref name="startIndex" /> 处的字节非零，则为 true；否则为 false。</returns>
      <param name="value">字节数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于零或大于 <paramref name="value" /> 减 1 的长度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
      <summary>返回由字节数组中指定位置的两个字节转换来的 Unicode 字符。</summary>
      <returns>由两个字节构成、从 <paramref name="startIndex" /> 开始的字符。</returns>
      <param name="value">数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 等于 <paramref name="value" /> 减 1 的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于零或大于 <paramref name="value" /> 减 1 的长度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
      <summary>返回由字节数组中指定位置的八个字节转换来的双精度浮点数。</summary>
      <returns>由八个字节构成、从 <paramref name="startIndex" /> 开始的双精度浮点数。</returns>
      <param name="value">字节数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 大于等于 <paramref name="value" /> 减 7 的长度，且小于等于 <paramref name="value" /> 减 1 的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于零或大于 <paramref name="value" /> 减 1 的长度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
      <summary>返回由字节数组中指定位置的两个字节转换来的 16 位有符号整数。</summary>
      <returns>由两个字节构成、从 <paramref name="startIndex" /> 开始的 16 位有符号整数。</returns>
      <param name="value">字节数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 等于 <paramref name="value" /> 减 1 的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于零或大于 <paramref name="value" /> 减 1 的长度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
      <summary>返回由字节数组中指定位置的四个字节转换来的 32 位有符号整数。</summary>
      <returns>由四个字节构成、从 <paramref name="startIndex" /> 开始的 32 位有符号整数。</returns>
      <param name="value">字节数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 大于等于 <paramref name="value" /> 减 3 的长度，且小于等于 <paramref name="value" /> 减 1 的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于零或大于 <paramref name="value" /> 减 1 的长度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
      <summary>返回由字节数组中指定位置的八个字节转换来的 64 位有符号整数。</summary>
      <returns>由八个字节构成、从 <paramref name="startIndex" /> 开始的 64 位有符号整数。</returns>
      <param name="value">字节数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 大于等于 <paramref name="value" /> 减 7 的长度，且小于等于 <paramref name="value" /> 减 1 的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于零或大于 <paramref name="value" /> 减 1 的长度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
      <summary>返回由字节数组中指定位置的四个字节转换来的单精度浮点数。</summary>
      <returns>由四个字节构成、从 <paramref name="startIndex" /> 开始的单精度浮点数。</returns>
      <param name="value">字节数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 大于等于 <paramref name="value" /> 减 3 的长度，且小于等于 <paramref name="value" /> 减 1 的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于零或大于 <paramref name="value" /> 减 1 的长度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[])">
      <summary>将指定的字节数组的每个元素的数值转换为它的等效十六进制字符串表示形式。</summary>
      <returns>由以连字符分隔的十六进制对构成的字符串，其中每一对表示 <paramref name="value" /> 中对应的元素；例如“7F-2C-4A”。</returns>
      <param name="value">字节数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
      <summary>将指定的字节子数组的每个元素的数值转换为它的等效十六进制字符串表示形式。</summary>
      <returns>由以连字符分隔的十六进制对构成的字符串，其中每一对表示 <paramref name="value" /> 的子数组中对应的元素；例如“7F-2C-4A”。</returns>
      <param name="value">字节数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于零或大于 <paramref name="value" /> 减 1 的长度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
      <summary>将指定的字节子数组的每个元素的数值转换为它的等效十六进制字符串表示形式。</summary>
      <returns>由以连字符分隔的十六进制对构成的字符串，其中每一对表示 <paramref name="value" /> 的子数组中对应的元素；例如“7F-2C-4A”。</returns>
      <param name="value">字节数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。</param>
      <param name="length">要转换的 <paramref name="value" /> 中的数组元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 小于零。 - 或 - <paramref name="startIndex" /> 大于零且大于等于 <paramref name="value" /> 的长度。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 的组合不指定 <paramref name="value" /> 中的位置；也就是说，<paramref name="startIndex" /> 参数大于 <paramref name="value" /> 的长度减去 <paramref name="length" /> 参数。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
      <summary>返回由字节数组中指定位置的两个字节转换来的 16 位无符号整数。</summary>
      <returns>由两个字节构成、从 <paramref name="startIndex" /> 开始的 16 位无符号整数。</returns>
      <param name="value">字节数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 等于 <paramref name="value" /> 减 1 的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于零或大于 <paramref name="value" /> 减 1 的长度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
      <summary>返回由字节数组中指定位置的四个字节转换来的 32 位无符号整数。</summary>
      <returns>由四个字节构成、从 <paramref name="startIndex" /> 开始的 32 位无符号整数。</returns>
      <param name="value">字节数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 大于等于 <paramref name="value" /> 减 3 的长度，且小于等于 <paramref name="value" /> 减 1 的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于零或大于 <paramref name="value" /> 减 1 的长度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
      <summary>返回由字节数组中指定位置的八个字节转换来的 64 位无符号整数。</summary>
      <returns>由八个字节构成、从 <paramref name="startIndex" /> 开始的 64 位无符号整数。</returns>
      <param name="value">字节数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 大于等于 <paramref name="value" /> 减 7 的长度，且小于等于 <paramref name="value" /> 减 1 的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于零或大于 <paramref name="value" /> 减 1 的长度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Boolean">
      <summary>表示布尔值。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Boolean.CompareTo(System.Boolean)">
      <summary>将此实例与指定的 <see cref="T:System.Boolean" /> 对象进行比较，返回一个指示二者关系的整数。</summary>
      <returns>一个有符号整数，它指示此实例和 <paramref name="value" /> 的相对值。 返回值 Condition 小于零 此实例为 false 而 <paramref name="value" /> 为 true。 零 此实例与 <paramref name="value" /> 相等（或者都为 true，或者都为 false）。 大于零 此实例为 true 而 <paramref name="value" /> 为 false。</returns>
      <param name="value">要与此实例进行比较的 <see cref="T:System.Boolean" /> 对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Boolean.Equals(System.Boolean)">
      <summary>返回一个值，该值指示此实例是否与指定的 <see cref="T:System.Boolean" /> 对象相等。</summary>
      <returns>如果 <paramref name="obj" /> 的值与此实例相同，则为 true；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的 <see cref="T:System.Boolean" /> 值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Boolean.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果 <paramref name="obj" /> 为 <see cref="T:System.Boolean" /> 并与此实例的值相等，则为 true；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Boolean.FalseString">
      <summary>将布尔值 false 表示为字符串。 此字段为只读。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Boolean.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.Boolean" /> 的哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Boolean.Parse(System.String)">
      <summary>将逻辑值的指定字符串表示形式转换为其等效的 <see cref="T:System.Boolean" />，或如果该字符串与 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" /> 值，则引发异常。</summary>
      <returns>如果 <paramref name="value" /> 等于 <see cref="F:System.Boolean.TrueString" /> 字段的值，则为 true ；如果 <paramref name="value" /> 等于 <see cref="F:System.Boolean.FalseString" /> 字段的值，则为 false。</returns>
      <param name="value">包含要转换的值的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 并不等效于 <see cref="F:System.Boolean.TrueString" /> 值或 <see cref="F:System.Boolean.FalseString" /> 字段 。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Boolean.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="obj" /> 的相对顺序。 返回值 Condition 小于零 此实例为 false 而 <paramref name="obj" /> 为 true。 零 此实例与 <paramref name="obj" /> 相等（或者都为 true，或者都为 false）。 大于零 此实例为 true 而 <paramref name="obj" /> 为 false。 - 或 - <paramref name="obj" /> 为 null。</returns>
      <param name="obj">与此实例进行比较的 object，或 null。</param>
    </member>
    <member name="M:System.Boolean.ToString">
      <summary>将此实例的值转换为其等效字符串表示形式（“True”或“False”）。</summary>
      <returns>如果此实例的值为 true，则为 <see cref="F:System.Boolean.TrueString" />；如果此实例的值为 false，则为 <see cref="F:System.Boolean.FalseString" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Boolean.TrueString">
      <summary>将布尔值 true 表示为字符串。 此字段为只读。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Boolean.TryParse(System.String,System.Boolean@)">
      <summary>尝试将逻辑值的指定字符串表示形式转换为它的等效 <see cref="T:System.Boolean" /> 值。 一个指示转换是否成功的返回值。</summary>
      <returns>如果 <paramref name="value" /> 成功转换，则为 true；否则为 false。</returns>
      <param name="value">包含要转换的值的字符串。</param>
      <param name="result">如果转换成功，当 <paramref name="value" /> 等于 <see cref="F:System.Boolean.TrueString" /> 时，此方法返回时将包含 true，当 <paramref name="value" /> 等于 <see cref="F:System.Boolean.FalseString" /> 时，此方法返回时将包含 false。 如果转换失败，则包含 false。 如果 <paramref name="value" /> 为 null 或者不与 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" /> 字段等效，该转换就会失败。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Buffer">
      <summary>操作基元类型的数组。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>将指定数目的字节从起始于特定偏移量的源数组复制到起始于特定偏移量的目标数组。</summary>
      <param name="src">源缓冲区。</param>
      <param name="srcOffset">
        <paramref name="src" /> 的字节偏移量，从零开始。</param>
      <param name="dst">目标缓冲区。</param>
      <param name="dstOffset">
        <paramref name="dst" /> 的字节偏移量，从零开始。</param>
      <param name="count">要复制的字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="src" /> 或 <paramref name="dst" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="src" /> 或 <paramref name="dst" /> 不是基元数组。 - 或 - <paramref name="src" /> 中的字节数小于 <paramref name="srcOffset" /> 和 <paramref name="count" />。 - 或 - <paramref name="dst" /> 中的字节数小于 <paramref name="dstOffset" /> 和 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="srcOffset" />、<paramref name="dstOffset" /> 或 <paramref name="count" /> 小于 0。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Buffer.ByteLength(System.Array)">
      <summary>返回指定数组中的字节数。</summary>
      <returns>数组中的字节数。</returns>
      <param name="array">数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 不是基元。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="array" />大于 2 GB。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Buffer.GetByte(System.Array,System.Int32)">
      <summary>在指定数组中检索指定位置处的字节。</summary>
      <returns>返回数组中的 <paramref name="index" /> 字节。</returns>
      <param name="array">数组。</param>
      <param name="index">数组中的位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 不是基元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 为负或大于 <paramref name="array" /> 的长度。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="array" />大于 2 GB。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
      <summary>将指定的值分配给指定数组中特定位置处的字节。</summary>
      <param name="array">数组。</param>
      <param name="index">数组中的位置。</param>
      <param name="value">要分配的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 不是基元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 为负或大于 <paramref name="array" /> 的长度。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="array" />大于 2 GB。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Byte">
      <summary>表示一个 8 位无符号整数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.CompareTo(System.Byte)">
      <summary>将此实例与指定的 8 位无符号整数进行比较并返回对其相对值的指示。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。 返回值 描述 小于零 此实例小于 <paramref name="value" />。 零 此实例等于 <paramref name="value" />。 大于零 此实例大于 <paramref name="value" />。</returns>
      <param name="value">要比较的 8 位无符号整数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Byte.Equals(System.Byte)">
      <summary>返回一个值，该值指示此实例和指定的 <see cref="T:System.Byte" /> 对象是否表示相同的值。</summary>
      <returns>如果 <paramref name="obj" /> 等于此实例，则为 true；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Byte.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.Byte" /> 的实例并且等于此实例的值，则为 true；否则为 false。</returns>
      <param name="obj">与此实例进行比较的 object，或 null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Byte.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.Byte" /> 的哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Byte.MaxValue">
      <summary>表示 <see cref="T:System.Byte" /> 的最大可能值。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Byte.MinValue">
      <summary>表示 <see cref="T:System.Byte" /> 的最小可能值。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效 <see cref="T:System.Byte" /> 表示形式。</summary>
      <returns>一个字节值，它与 <paramref name="s" /> 中包含的数相等。</returns>
      <param name="s">包含要转换的数字的字符串。 该字符串使用 <see cref="F:System.Globalization.NumberStyles.Integer" /> 样式来进行解释。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将指定样式的数字的字符串表示形式转换为它的等效 <see cref="T:System.Byte" />。</summary>
      <returns>一个字节值，它与 <paramref name="s" /> 中包含的数相等。</returns>
      <param name="s">包含要转换的数字的字符串。 该字符串使用由 <paramref name="style" /> 指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" /> 的数字。 - 或 - <paramref name="s" /> 包含非零的小数位。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 <see cref="T:System.Byte" /> 值。</summary>
      <returns>一个字节值，它与 <paramref name="s" /> 中包含的数相等。</returns>
      <param name="s">包含要转换的数字的字符串。 该字符串使用由 <paramref name="style" /> 指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，用于提供有关 <paramref name="s" /> 格式的区域性特定信息。 如果 <paramref name="provider" /> 为 null，则使用当前的线程区域性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" /> 的数字。 - 或 - <paramref name="s" /> 包含非零的小数位。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.IFormatProvider)">
      <summary>将指定的区域性特定格式的数字字符串表示形式转换为它的等效 <see cref="T:System.Byte" />。</summary>
      <returns>一个字节值，它与 <paramref name="s" /> 中包含的数相等。</returns>
      <param name="s">包含要转换的数字的字符串。 该字符串使用 <see cref="F:System.Globalization.NumberStyles.Integer" /> 样式来进行解释。</param>
      <param name="provider">一个对象，它提供有关 <paramref name="s" /> 的区域性特定的分析信息。 如果 <paramref name="provider" /> 为 null，则使用当前的线程区域性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。 返回值 描述 小于零 此实例按排序顺序在 <paramref name="value" /> 前面。 零 此实例与 <paramref name="value" /> 按排序顺序中出现的位置相同。 大于零 此实例按排序顺序在 <paramref name="value" /> 后面。 - 或 - <paramref name="value" /> 为 null。</returns>
      <param name="value">与此实例进行比较的 object，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Byte" />。</exception>
    </member>
    <member name="M:System.Byte.ToString">
      <summary>将当前 <see cref="T:System.Byte" /> 对象的值转换为其等效的字符串表示形式。</summary>
      <returns>此对象的值的字符串表示形式，由一系列从 0 到 9 之间的数字组成，不包含前导零。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将当前 <see cref="T:System.Byte" /> 对象的数值转换为它的等效字符串表示形式。</summary>
      <returns>此对象值的字符串表示形式，采用 <paramref name="provider" /> 参数所指定的格式。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.ToString(System.String)">
      <summary>使用指定的格式将当前 <see cref="T:System.Byte" /> 对象的值转换为它的等效字符串表示形式。</summary>
      <returns>按照 <paramref name="format" /> 参数指定的方式进行格式设置的当前 <see cref="T:System.Byte" /> 对象的字符串表示形式。</returns>
      <param name="format">一个数值格式字符串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 包括不受支持的说明符。 备注部分中列出了支持的格式说明符。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定的格式设置信息将当前 <see cref="T:System.Byte" /> 对象的值转换为它的等效字符串表示形式。</summary>
      <returns>按照 <paramref name="format" /> 和 <paramref name="provider" /> 参数指定的方式进行格式设置的当前 <see cref="T:System.Byte" /> 对象的字符串表示形式。</returns>
      <param name="format">标准或自定义的数值格式字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 包括不受支持的说明符。 备注部分中列出了支持的格式说明符。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.TryParse(System.String,System.Byte@)">
      <summary>尝试将数字的字符串表示形式转换为它的等效 <see cref="T:System.Byte" />，并返回一个指示转换是否成功的值。</summary>
      <returns>如果成功转换了 <paramref name="s" />，则为 true；否则为 false。</returns>
      <param name="s">包含要转换的数字的字符串。 该字符串使用 <see cref="F:System.Globalization.NumberStyles.Integer" /> 样式来进行解释。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所包含的数字等效的 <see cref="T:System.Byte" /> 值；如果转换失败，则包含零。 该参数未经初始化即被传递。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Byte@)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 <see cref="T:System.Byte" /> 值。 一个指示转换是否成功的返回值。</summary>
      <returns>如果成功转换了 <paramref name="s" />，则为 true；否则为 false。</returns>
      <param name="s">包含要转换的数字的字符串。 该字符串使用由 <paramref name="style" /> 指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。 如果 <paramref name="provider" /> 为 null，则使用当前的线程区域性。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中包含的数字等效的 8 位无符号整数值；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 null，格式不正确，或者表示的数字小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" />，则转换会失败。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Char">
      <summary>将字符表示为 UTF-16 代码单位。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.CompareTo(System.Char)">
      <summary>将此实例与指定的 <see cref="T:System.Char" /> 对象进行比较，并指示此实例在排序顺序中是位于指定的 <see cref="T:System.Char" /> 对象之前、之后还是与其出现在同一位置。</summary>
      <returns>一个有符号数字，指示此实例在排序顺序中相对于 <paramref name="value" /> 参数的位置。 返回值 描述 小于零 此实例位于 <paramref name="value" /> 之前。 零 此实例在排序顺序中的位置与 <paramref name="value" /> 相同。 大于零 此实例位于 <paramref name="value" /> 之后。</returns>
      <param name="value">要比较的 <see cref="T:System.Char" /> 对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Char.ConvertFromUtf32(System.Int32)">
      <summary>将指定的 Unicode 码位转换为 UTF-16 编码字符串。</summary>
      <returns>由一个 <see cref="T:System.Char" /> 对象或一个 <see cref="T:System.Char" /> 对象的代理项对组成的字符串，等效于 <paramref name="utf32" /> 参数所指定的码位。</returns>
      <param name="utf32">21 位 Unicode 码位。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="utf32" /> 不是从 U+0 到 U+10FFFF 的有效的 21 位 Unicode 码位，不包括从 U+D800 到 U+DFFF 的代理项对。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ConvertToUtf32(System.Char,System.Char)">
      <summary>将 UTF-16 编码的代理项对的值转换为 Unicode 码位。</summary>
      <returns>
        <paramref name="highSurrogate" /> 和 <paramref name="lowSurrogate" /> 参数表示的 21 位 Unicode 码位。</returns>
      <param name="highSurrogate">高代理项代码单元（即代码单元从 U+D800 到 U+DBFF）。</param>
      <param name="lowSurrogate">低代理项代码单元（即代码单元从 U+DC00 到 U+DFFF）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="highSurrogate" /> 不在 U+D800 到 U+DBFF 的范围内，或 <paramref name="lowSurrogate" /> 不在 U+DC00 到 U+DFFF 的范围内。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ConvertToUtf32(System.String,System.Int32)">
      <summary>将字符串中指定位置的 UTF-16 编码字符或代理项对的值转换为 Unicode 码位。</summary>
      <returns>字符或代理项对表示的 21 位 Unicode 码位，该字符或代理项对在 <paramref name="s" /> 参数中的位置由 <paramref name="index" /> 参数指定。</returns>
      <param name="s">包含字符或代理项对的字符串。</param>
      <param name="index">字符或代理项对在 <paramref name="s" /> 中的索引位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <paramref name="s" /> 中的位置。</exception>
      <exception cref="T:System.ArgumentException">指定的索引位置包含一个代理项对，并且该代理项对中的第一个字符不是有效的高代理项，或该对中的第二个字符不是有效的低代理项。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.Equals(System.Char)">
      <summary>返回一个值，该值指示此实例是否与指定的 <see cref="T:System.Char" /> 对象相等。</summary>
      <returns>如果 <paramref name="obj" /> 参数等于此实例的值，则为 true；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Char.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.Char" /> 的实例并且等于此实例的值，则为 true；否则为 false。</returns>
      <param name="obj">与此实例进行比较的对象或为 null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Char.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Char.GetNumericValue(System.Char)">
      <summary>将指定的数字 Unicode 字符转换为双精度浮点数。</summary>
      <returns>如果该字符表示数字，则为 <paramref name="c" /> 的数值；否则为 -1.0。</returns>
      <param name="c">要转换的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.GetNumericValue(System.String,System.Int32)">
      <summary>将指定字符串中位于指定位置的数字 Unicode 字符转换为双精度浮点数。</summary>
      <returns>如果 <paramref name="s" /> 中位于 <paramref name="index" /> 处的字符表示数字，则为该字符的数值；否则为 -1。</returns>
      <param name="s">
        <see cref="T:System.String" />。</param>
      <param name="index">
        <paramref name="s" /> 中的字符位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中的最后一个位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsControl(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于控制字符类别。</summary>
      <returns>如果 <paramref name="c" /> 是控制字符，则为 true；否则，为 false。</returns>
      <param name="c">要计算的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsControl(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置处的字符是否属于控制字符类别。</summary>
      <returns>如果 <paramref name="s" /> 中位于 <paramref name="index" /> 处的字符是控制字符，则为 true；否则，为 false。</returns>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中的最后一个位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsDigit(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于十进制数字类别。</summary>
      <returns>如果 <paramref name="c" /> 是十进制数字，则为 true；否则，为 false。</returns>
      <param name="c">要计算的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsDigit(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置处的字符是否属于十进制数字类别。</summary>
      <returns>如果 <paramref name="s" /> 中位于 <paramref name="index" /> 处的字符是十进制数字，则为 true；否则，为 false。</returns>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中的最后一个位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsHighSurrogate(System.Char)">
      <summary>指示指定的 <see cref="T:System.Char" /> 对象是否为高代理项。</summary>
      <returns>如果 <paramref name="c" /> 参数的数值范围是从 U+D800 到 U+DBFF，则为 true；否则为 false。</returns>
      <param name="c">要计算的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsHighSurrogate(System.String,System.Int32)">
      <summary>指示字符串中指定位置处的 <see cref="T:System.Char" /> 对象是否为高代理项。</summary>
      <returns>如果 <paramref name="s" /> 参数中指定字符的数值范围从 U+D800 到 U+DBFF，则为 true；否则为 false。</returns>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <paramref name="s" /> 中的位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLetter(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于 Unicode 字母类别。</summary>
      <returns>如果 <paramref name="c" /> 是字母，则为 true；否则为 false。</returns>
      <param name="c">要计算的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLetter(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置处的字符是否属于 Unicode 字母类别。</summary>
      <returns>如果 <paramref name="s" /> 中位于 <paramref name="index" /> 的字符是字母，则为 true；否则为 false。</returns>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中的最后一个位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于字母或十进制数字类别。</summary>
      <returns>如果 <paramref name="c" /> 是字母或十进制数字，则为 true；否则为 false。</returns>
      <param name="c">要计算的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置处的字符是否属于字母或十进制数字类别。</summary>
      <returns>如果 <paramref name="s" /> 中位于 <paramref name="index" /> 处的字符是字母或十进制数字，则为 true；否则为 false。</returns>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中的最后一个位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLower(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于小写字母类别。</summary>
      <returns>如果 <paramref name="c" /> 是小写字母，则为 true；否则，为 false。</returns>
      <param name="c">要计算的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLower(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置处的字符是否属于小写字母类别。</summary>
      <returns>如果 <paramref name="s" /> 中位于 <paramref name="index" /> 处的字符是小写字母，则为 true；否则，为 false。</returns>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中的最后一个位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLowSurrogate(System.Char)">
      <summary>指示指定的 <see cref="T:System.Char" /> 对象是否为低代理项。</summary>
      <returns>如果 <paramref name="c" /> 参数的数值范围是从 U+DC00 到 U+DFFF，则为 true；否则为 false。</returns>
      <param name="c">要计算的字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLowSurrogate(System.String,System.Int32)">
      <summary>指示字符串中指定位置处的 <see cref="T:System.Char" /> 对象是否为低代理项。</summary>
      <returns>如果 <paramref name="s" /> 参数中指定字符的数值范围从 U+DC00 到 U+DFFF，则为 true；否则为 false。</returns>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <paramref name="s" /> 中的位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsNumber(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于数字类别。</summary>
      <returns>如果 <paramref name="c" /> 是数字，则为 true，否则为 false。</returns>
      <param name="c">要计算的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsNumber(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置的字符是否属于数字类别。</summary>
      <returns>如果 <paramref name="s" /> 中位于 <paramref name="index" /> 的字符是数字，则为 true；否则为 false。</returns>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中的最后一个位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsPunctuation(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于标点符号类别。</summary>
      <returns>如果 <paramref name="c" /> 是标点符号，则为 true；否则，为 false。</returns>
      <param name="c">要计算的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsPunctuation(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置处的字符是否属于标点符号类别。</summary>
      <returns>如果 <paramref name="s" /> 中位于 <paramref name="index" /> 处的字符是标点符号，则为 true；否则，为 false。</returns>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中的最后一个位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSeparator(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于分隔符类别。</summary>
      <returns>如果 <paramref name="c" /> 是分隔符，则为 true；否则，为 false。</returns>
      <param name="c">要计算的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSeparator(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置处的字符是否属于分隔符类别。</summary>
      <returns>如果 <paramref name="s" /> 中位于 <paramref name="index" /> 处的字符是分隔符，则为 true；否则，为 false。</returns>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中的最后一个位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSurrogate(System.Char)">
      <summary>指示指定的字符是否具有代理项码单元。</summary>
      <returns>如果 <paramref name="c" /> 为高代理项或低代理项，则为 true；否则为 false。</returns>
      <param name="c">要计算的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSurrogate(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置的字符是否具有代理项码单元。</summary>
      <returns>如果 <paramref name="s" /> 中位于位置 <paramref name="index" /> 的字符为高代理项或低代理项，则为 true；否则为 false。</returns>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中的最后一个位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSurrogatePair(System.Char,System.Char)">
      <summary>指示两个指定的 <see cref="T:System.Char" /> 对象是否形成代理项对。</summary>
      <returns>如果 <paramref name="highSurrogate" /> 参数的数值范围是从 U+D800 到 U+DBFF，并且 <paramref name="lowSurrogate" /> 参数的数值范围是从 U+DC00 到 U+DFFF，则为 true；否则为 false。</returns>
      <param name="highSurrogate">要作为代理项对的高代理项进行计算的字符。</param>
      <param name="lowSurrogate">要作为代理项对的低代理项进行计算的字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSurrogatePair(System.String,System.Int32)">
      <summary>指示字符串中指定位置处的两个相邻 <see cref="T:System.Char" /> 对象是否形成代理项对。</summary>
      <returns>如果 <paramref name="s" /> 参数包括 <paramref name="index" /> 和 <paramref name="index" /> + 1 位置处的相邻字符，并且 <paramref name="index" /> 位置处字符的数值在 U+D800 到 U+DBFF 范围内，<paramref name="index" /> +1 位置处字符的数值在 U+DC00 到 U+DFFF 范围内，则为 true；否则为 false。</returns>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符对的开始位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <paramref name="s" /> 中的位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSymbol(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于符号字符类别。</summary>
      <returns>如果 <paramref name="c" /> 是符号字符，则为 true；否则为 false。</returns>
      <param name="c">要计算的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSymbol(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置处的字符是否属于符号字符类别。</summary>
      <returns>如果 <paramref name="s" /> 中位于 <paramref name="index" /> 处的字符是符号字符，则为 true；否则，为 false。</returns>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中的最后一个位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsUpper(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于大写字母类别。</summary>
      <returns>如果 <paramref name="c" /> 是大写字母，则为 true；否则，为 false。</returns>
      <param name="c">要计算的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsUpper(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置处的字符是否属于大写字母类别。</summary>
      <returns>如果 <paramref name="s" /> 中位于 <paramref name="index" /> 处的字符是大写字母，则为 true；否则，为 false。</returns>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中的最后一个位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于空白类别。</summary>
      <returns>如果 <paramref name="c" /> 是空白，则为 true；否则，为 false。</returns>
      <param name="c">要计算的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置处的字符是否属于空白类别。</summary>
      <returns>如果 <paramref name="s" /> 中位于 <paramref name="index" /> 处的字符是空白，则为 true；否则，为 false。</returns>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中的最后一个位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Char.MaxValue">
      <summary>表示 <see cref="T:System.Char" /> 的最大可能值。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Char.MinValue">
      <summary>表示 <see cref="T:System.Char" /> 的最小可能值。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号整数，指示此实例在排序顺序中相对于 <paramref name="value" /> 参数的位置。 返回值 描述 小于零 此实例按排序顺序在 <paramref name="value" /> 前面。 零 此实例在排序顺序中的位置与 <paramref name="value" /> 相同。 大于零 此实例按排序顺序在 <paramref name="value" /> 后面。 - 或 - <paramref name="value" /> 为 null。</returns>
      <param name="value">要与此实例比较的对象或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Char" /> 对象。</exception>
    </member>
    <member name="M:System.Char.ToLower(System.Char)">
      <summary>将 Unicode 字符的值转换为它的小写等效项。</summary>
      <returns>
        <paramref name="c" /> 的小写等效项；如果 <paramref name="c" /> 已经是小写形式或不是字母，则为 <paramref name="c" /> 的未更改值。</returns>
      <param name="c">要转换的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)">
      <summary>使用指定的区域性特定格式设置信息将指定 Unicode 字符的值转换为它的小写等效项。</summary>
      <returns>根据 <paramref name="culture" /> 修改的 <paramref name="c" /> 的小写等效项；如果 <paramref name="c" /> 已经是小写形式或不是字母，则为 <paramref name="c" /> 的未更改值。</returns>
      <param name="c">要转换的 Unicode 字符。</param>
      <param name="culture">一个对象，用于提供区域性特定的大小写规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 为 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ToLowerInvariant(System.Char)">
      <summary>使用固定区域性的大小写规则，将 Unicode 字符的值转换为其小写等效项。</summary>
      <returns>
        <paramref name="c" /> 参数的小写等效项；如果 <paramref name="c" /> 已经是小写形式或不是字母，则为 <paramref name="c" /> 的未更改值。</returns>
      <param name="c">要转换的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ToString">
      <summary>将此实例的值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ToString(System.Char)">
      <summary>将指定的 Unicode 字符转换为它的等效字符串表示形式。</summary>
      <returns>
        <paramref name="c" /> 的值的字符串表示形式。</returns>
      <param name="c">要转换的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ToUpper(System.Char)">
      <summary>将 Unicode 字符的值转换为它的大写等效项。</summary>
      <returns>
        <paramref name="c" /> 的大写等效项；如果 <paramref name="c" /> 已经是大写形式而没有大写等效项或不是字母，则为 <paramref name="c" /> 的未更改值。</returns>
      <param name="c">要转换的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)">
      <summary>使用指定的区域性特定格式设置信息将指定 Unicode 字符的值转换为它的大写等效项。</summary>
      <returns>根据 <paramref name="culture" /> 修改的 <paramref name="c" /> 的大写等效项；如果 <paramref name="c" /> 已经是大写形式（没有大写等效项）或不是字母，则为 <paramref name="c" /> 的未更改值。</returns>
      <param name="c">要转换的 Unicode 字符。</param>
      <param name="culture">一个对象，用于提供区域性特定的大小写规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 为 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ToUpperInvariant(System.Char)">
      <summary>使用固定区域性的大小写规则，将 Unicode 字符的值转换为其大写等效项。</summary>
      <returns>
        <paramref name="c" /> 参数的大写等效项；如果 <paramref name="c" /> 已经是大写形式或不是字母，则为 <paramref name="c" /> 的未更改值。</returns>
      <param name="c">要转换的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.TryParse(System.String,System.Char@)">
      <summary>将指定字符串的值转换为它的等效 Unicode 字符。 一个指示转换是否成功的返回代码。</summary>
      <returns>如果 <paramref name="s" /> 参数成功转换，则为 true；否则为 false。</returns>
      <param name="s">包含单个字符的字符串，或 null。</param>
      <param name="result">此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中的单个字符等效的 Unicode 字符；如果转换失败，则包含未定义的值。 如果 <paramref name="s" /> 参数为 null，或者 <paramref name="s" /> 的长度不是 1，则转换失败。 该参数未经初始化即被传递。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.CLSCompliantAttribute">
      <summary>指示程序元素是否符合公共语言规范 (CLS)。 此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.CLSCompliantAttribute.#ctor(System.Boolean)">
      <summary>用布尔值初始化 <see cref="T:System.CLSCompliantAttribute" /> 类的实例，该值指示所指示的程序元素是否符合 CLS。</summary>
      <param name="isCompliant">如果程序元素符合 CLS，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.CLSCompliantAttribute.IsCompliant">
      <summary>获取指示所指示的程序元素是否符合 CLS 的布尔值。</summary>
      <returns>如果程序元素符合 CLS，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Comparison`1">
      <summary>表示比较同一类型的两个对象的方法。</summary>
      <returns>一个有符号整数，指示 <paramref name="x" /> 与 <paramref name="y" /> 的相对值，如下表所示。 值 含义 小于 0 <paramref name="x" /> 小于 <paramref name="y" />。 0 <paramref name="x" /> 等于 <paramref name="y" />。 大于 0 <paramref name="x" /> 大于 <paramref name="y" />。</returns>
      <param name="x">要比较的第一个对象。</param>
      <param name="y">要比较的第二个对象。</param>
      <typeparam name="T">要比较的对象的类型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Convert">
      <summary>将一个基本数据类型转换为另一个基本数据类型。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.Type)">
      <summary>返回一个指定类型的对象，该对象的值等效于指定的对象。</summary>
      <returns>一个对象，其类型为 <paramref name="conversionType" />，并且其值等效于 <paramref name="value" />。 - 或 - 如果 <paramref name="value" /> 为 null，并且 <paramref name="conversionType" /> 不是值类型，则为空引用（在 Visual Basic 中为 Nothing）。</returns>
      <param name="value">实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="conversionType">要返回的对象的类型。</param>
      <exception cref="T:System.InvalidCastException">不支持此转换。 - 或 - <paramref name="value" /> 为 null，而且 <paramref name="conversionType" /> 是值类型。 - 或 - <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="conversionType" /> 无法识别<paramref name="value" />的格式。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示超出 <paramref name="conversionType" /> 范围的数字。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conversionType" /> 为 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
      <summary>返回指定类型的对象，其值等效于指定对象。 参数提供区域性特定的格式设置信息。</summary>
      <returns>一个对象，其类型为 <paramref name="conversionType" />，并且其值等效于 <paramref name="value" />。 - 或 - 如果 <paramref name="value" /> 的 <see cref="T:System.Type" /> 与 <paramref name="conversionType" /> 相等，则为 <paramref name="value" />。 - 或 - 如果 <paramref name="value" /> 为 null，并且 <paramref name="conversionType" /> 不是值类型，则为空引用（在 Visual Basic 中为 Nothing）。</returns>
      <param name="value">实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="conversionType">要返回的对象的类型。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.InvalidCastException">不支持此转换。 - 或 - <paramref name="value" /> 为 null，而且 <paramref name="conversionType" /> 是值类型。 - 或 - <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不是 <paramref name="provider" /> 可以识别的 <paramref name="conversionType" /> 的格式。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示超出 <paramref name="conversionType" /> 范围的数字。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conversionType" /> 为 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
      <summary>将 Unicode 字符数组（它将二进制数据编码为 Base64 数字）的子集转换为等效的 8 位无符号整数数组。 参数指定输入数组的子集以及要转换的元素数。</summary>
      <returns>等效于 <paramref name="inArray" /> 中位于 <paramref name="offset" /> 位置的 <paramref name="length" /> 元素的 8 位无符号整数数组。</returns>
      <param name="inArray">Unicode 字符数组。</param>
      <param name="offset">
        <paramref name="inArray" /> 内的一个位置。</param>
      <param name="length">要转换的 <paramref name="inArray" /> 中的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="length" /> 小于 0。 - 或 - <paramref name="offset" /> 和 <paramref name="length" /> 指示不在 <paramref name="inArray" /> 内的位置。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="inArray" /> 的长度（忽略空白字符）不是 0 或 4 的倍数。 - 或 - <paramref name="inArray" /> 的格式无效。 <paramref name="inArray" /> 包含一个非 base 64 字符、两个以上的填充字符或者在填充字符中包含非空白字符。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.FromBase64String(System.String)">
      <summary>将指定的字符串（它将二进制数据编码为 Base64 数字）转换为等效的 8 位无符号整数数组。</summary>
      <returns>与 <paramref name="s" /> 等效的 8 位无符号整数数组。</returns>
      <param name="s">要转换的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的长度（忽略空白字符）不是 0 或 4 的倍数。 - 或 - <paramref name="s" /> 的格式无效。 <paramref name="s" /> 包含一个非 base 64 字符、两个以上的填充字符或者在填充字符中包含非空白字符。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>将 8 位无符号整数数组的子集转换为用 Base64 数字编码的 Unicode 字符数组的等价子集。 参数将子集指定为输入和输出数组中的偏移量和输入数组中要转换的元素数。</summary>
      <returns>包含 <paramref name="outArray" /> 中的字节数的 32 位有符号整数。</returns>
      <param name="inArray">8 位无符号整数的输入数组。</param>
      <param name="offsetIn">
        <paramref name="inArray" /> 内的一个位置。</param>
      <param name="length">要转换的 <paramref name="inArray" /> 的元素数。</param>
      <param name="outArray">Unicode 字符的输出数组。</param>
      <param name="offsetOut">
        <paramref name="outArray" /> 内的一个位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> 或 <paramref name="outArray" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offsetIn" />、<paramref name="offsetOut" /> 或 <paramref name="length" /> 为负。 - 或 - <paramref name="offsetIn" /> 加上 <paramref name="length" /> 大于 <paramref name="inArray" /> 的长度。 - 或 - <paramref name="offsetOut" /> 加上要返回的元素数大于 <paramref name="outArray" /> 的长度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[])">
      <summary>将 8 位无符号整数的数组转换为其用 Base64 数字编码的等效字符串表示形式。</summary>
      <returns>
        <paramref name="inArray" /> 的内容的字符串表示形式，以 Base64 表示。</returns>
      <param name="inArray">一个 8 位无符号整数数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> 为 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
      <summary>将 8 位无符号整数数组的子集转换为其用 Base64 数字编码的等效字符串表示形式。 参数将子集指定为输入数组中的偏移量和数组中要转换的元素数。</summary>
      <returns>
        <paramref name="inArray" /> 中从位置 <paramref name="offset" /> 开始的 <paramref name="length" /> 个元素的字符串表示形式，以 Base64 表示。</returns>
      <param name="inArray">一个 8 位无符号整数数组。</param>
      <param name="offset">
        <paramref name="inArray" /> 中的偏移量。</param>
      <param name="length">要转换的 <paramref name="inArray" /> 的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="length" /> 为负。 - 或 - <paramref name="offset" /> 加上 <paramref name="length" /> 大于 <paramref name="inArray" /> 的长度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Boolean)">
      <summary>返回指定的布尔值；不执行任何实际的转换。</summary>
      <returns>
        <paramref name="value" /> 不经更改即返回。</returns>
      <param name="value">要返回的布尔值。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Byte)">
      <summary>将指定的 8 位无符号整数的值转换为等效的布尔值。</summary>
      <returns>如果 <paramref name="value" /> 为非零值，则为 true；否则为 false。</returns>
      <param name="value">要转换的 8 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Decimal)">
      <summary>将指定的十进制数字的值转换为等效的布尔值。</summary>
      <returns>如果 <paramref name="value" /> 为非零值，则为 true；否则为 false。</returns>
      <param name="value">要转换的数字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Double)">
      <summary>将指定的双精度浮点数的值转换为等效的布尔值。</summary>
      <returns>如果 <paramref name="value" /> 为非零值，则为 true；否则为 false。</returns>
      <param name="value">要转换的双精度浮点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int16)">
      <summary>将指定的 16 位有符号整数的值转换为等效的布尔值。</summary>
      <returns>如果 <paramref name="value" /> 为非零值，则为 true；否则为 false。</returns>
      <param name="value">要转换的 16 位带符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int32)">
      <summary>将指定的 32 位有符号整数的值转换为等效的布尔值。</summary>
      <returns>如果 <paramref name="value" /> 为非零值，则为 true；否则为 false。</returns>
      <param name="value">要转换的 32 位带符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int64)">
      <summary>将指定的 64 位有符号整数的值转换为等效的布尔值。</summary>
      <returns>如果 <paramref name="value" /> 为非零值，则为 true；否则为 false。</returns>
      <param name="value">要转换的 64 位带符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object)">
      <summary>将指定对象的值转换为等效的布尔值。</summary>
      <returns>true 或 false，它将反映通过对 <paramref name="value" /> 的基础类型调用 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> 方法而返回的值。 如果 <paramref name="value" /> 为 null，则此方法返回 false。</returns>
      <param name="value">用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 null。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 是一个字符串，它不等于 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" />。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。 - 或 - 不支持 <paramref name="value" /> 转换为 <see cref="T:System.Boolean" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定对象的值转换为等效的布尔值。</summary>
      <returns>true 或 false，它将反映通过对 <paramref name="value" /> 的基础类型调用 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> 方法而返回的值。 如果 <paramref name="value" /> 为 null，则此方法返回 false。</returns>
      <param name="value">用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 null。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 是一个字符串，它不等于 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" />。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。 - 或 - 不支持 <paramref name="value" /> 转换为 <see cref="T:System.Boolean" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToBoolean(System.SByte)">
      <summary>将指定的 8 位带符号整数的值转换为等效的布尔值。</summary>
      <returns>如果 <paramref name="value" /> 为非零值，则为 true；否则为 false。</returns>
      <param name="value">要转换的 8 位带符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Single)">
      <summary>将指定的单精度浮点数的值转换为等效的布尔值。</summary>
      <returns>如果 <paramref name="value" /> 为非零值，则为 true；否则为 false。</returns>
      <param name="value">要转换的单精度浮点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String)">
      <summary>将逻辑值的指定字符串表示形式转换为其等效的布尔值。</summary>
      <returns>如果 <paramref name="value" /> 等于 <see cref="F:System.Boolean.TrueString" />，则为 true；如果 <paramref name="value" /> 等于 <see cref="F:System.Boolean.FalseString" /> 或 null，则为 false。</returns>
      <param name="value">包含 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" /> 值的字符串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不等于 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将逻辑值的指定字符串表示形式转换为其等效的布尔值。</summary>
      <returns>如果 <paramref name="value" /> 等于 <see cref="F:System.Boolean.TrueString" />，则为 true；如果 <paramref name="value" /> 等于 <see cref="F:System.Boolean.FalseString" /> 或 null，则为 false。</returns>
      <param name="value">包含 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" /> 值的字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。 忽略此参数。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不等于 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt16)">
      <summary>将指定的 16 位无符号整数的值转换为等效的布尔值。</summary>
      <returns>如果 <paramref name="value" /> 为非零值，则为 true；否则为 false。</returns>
      <param name="value">要转换的 16 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt32)">
      <summary>将指定的 32 位无符号整数的值转换为等效的布尔值。</summary>
      <returns>如果 <paramref name="value" /> 为非零值，则为 true；否则为 false。</returns>
      <param name="value">要转换的 32 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt64)">
      <summary>将指定的 64 位无符号整数的值转换为等效的布尔值。</summary>
      <returns>如果 <paramref name="value" /> 为非零值，则为 true；否则为 false。</returns>
      <param name="value">要转换的 64 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToByte(System.Boolean)">
      <summary>将指定的布尔值转换为等效的 8 位无符号整数。</summary>
      <returns>如果 <paramref name="value" /> 为 true，则为数字 1；否则，为 0。</returns>
      <param name="value">要转换的布尔值。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToByte(System.Byte)">
      <summary>返回指定的 8 位无符号整数；不执行任何实际的转换。</summary>
      <returns>
        <paramref name="value" /> 不经更改即返回。</returns>
      <param name="value">要返回的 8 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToByte(System.Char)">
      <summary>将指定 Unicode 字符的值转换为等效的 8 位无符号整数。</summary>
      <returns>一个等于 <paramref name="value" /> 的 8 位无符号整数。</returns>
      <param name="value">要转换的 Unicode 字符。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示的数字大于 <see cref="F:System.Byte.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToByte(System.Decimal)">
      <summary>将指定的十进制数的值转换为等效的 8 位无符号整数。</summary>
      <returns>
        <paramref name="value" />，舍入为最接近的 8 位无符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <param name="value">要转换的数字。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Byte.MaxValue" /> 或小于 <see cref="F:System.Byte.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToByte(System.Double)">
      <summary>将指定的双精度浮点数的值转换为等效的 8 位无符号整数。</summary>
      <returns>
        <paramref name="value" />，舍入为最接近的 8 位无符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <param name="value">要转换的双精度浮点数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Byte.MaxValue" /> 或小于 <see cref="F:System.Byte.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToByte(System.Int16)">
      <summary>将指定的 16 位有符号整数的值转换为等效的 8 位无符号整数。</summary>
      <returns>一个等于 <paramref name="value" /> 的 8 位无符号整数。</returns>
      <param name="value">要转换的 16 位带符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToByte(System.Int32)">
      <summary>将指定的 32 位有符号整数的值转换为等效的 8 位无符号整数。</summary>
      <returns>一个等于 <paramref name="value" /> 的 8 位无符号整数。</returns>
      <param name="value">要转换的 32 位带符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToByte(System.Int64)">
      <summary>将指定的 64 位有符号整数的值转换为等效的 8 位无符号整数。</summary>
      <returns>一个等于 <paramref name="value" /> 的 8 位无符号整数。</returns>
      <param name="value">要转换的 64 位带符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToByte(System.Object)">
      <summary>将指定对象的值转换为 8 位无符号整数。</summary>
      <returns>一个等于 <paramref name="value" /> 的 8 位无符号整数，如果 <paramref name="value" /> 为 null，则为零。</returns>
      <param name="value">用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 null。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 未采用 <see cref="T:System.Byte" /> 值的属性格式。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" />。 - 或 - 不支持从 <paramref name="value" /> 到 <see cref="T:System.Byte" /> 类型的转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定对象的值转换为 8 位无符号整数。</summary>
      <returns>一个等于 <paramref name="value" /> 的 8 位无符号整数，如果 <paramref name="value" /> 为 null，则为零。</returns>
      <param name="value">实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 未采用 <see cref="T:System.Byte" /> 值的属性格式。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" />。 - 或 - 不支持从 <paramref name="value" /> 到 <see cref="T:System.Byte" /> 类型的转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToByte(System.SByte)">
      <summary>将指定的 8 位带符号整数的值转换为等效的 8 位无符号整数。</summary>
      <returns>一个等于 <paramref name="value" /> 的 8 位无符号整数。</returns>
      <param name="value">要转换的 8 位带符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Byte.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToByte(System.Single)">
      <summary>将指定的单精度浮点数的值转换为等效的 8 位无符号整数。</summary>
      <returns>
        <paramref name="value" />，舍入为最接近的 8 位无符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <param name="value">一个单精度浮点数字。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Byte.MaxValue" /> 或小于 <see cref="F:System.Byte.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToByte(System.String)">
      <summary>将数字的指定字符串表示形式转换为等效的 8 位无符号整数。</summary>
      <returns>一个等于 <paramref name="value" /> 的 8 位无符号整数，如果 <paramref name="value" /> 为 null，则为零。</returns>
      <param name="value">包含要转换的数字的字符串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" />不是由一个可选符号后跟数字序列（0 到 9）组成的。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 8 位无符号整数。</summary>
      <returns>一个等于 <paramref name="value" /> 的 8 位无符号整数，如果 <paramref name="value" /> 为 null，则为零。</returns>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" />不是由一个可选符号后跟数字序列（0 到 9）组成的。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.Int32)">
      <summary>将指定基数的数字的字符串表示形式转换为等效的 8 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 中数字等效的 8 位无符号整数，如果 <paramref name="value" /> 为 null，则为 0（零）。</returns>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="fromBase">
        <paramref name="value" /> 中数字的基数，它必须是 2、8、10 或 16。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。 - 或 - <paramref name="value" />，它表示一个非 10 为基的无符号数，前面带一个负号。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含的一个字符不是 <paramref name="fromBase" /> 指定的基中的有效数字。 如果 <paramref name="value" /> 中的第一个字符无效，异常消息则指示没有可转换的数字；否则，该消息将指示 <paramref name="value" /> 包含无效的尾随字符。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />，它表示一个 10 为基的无符号数，前面带一个负号。 - 或 - <paramref name="value" /> 表示小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt16)">
      <summary>将指定的 16 位无符号整数的值转换为等效的 8 位无符号整数。</summary>
      <returns>一个等于 <paramref name="value" /> 的 8 位无符号整数。</returns>
      <param name="value">要转换的 16 位无符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Byte.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt32)">
      <summary>将指定的 32 位无符号整数的值转换为等效的 8 位无符号整数。</summary>
      <returns>一个等于 <paramref name="value" /> 的 8 位无符号整数。</returns>
      <param name="value">要转换的 32 位无符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Byte.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt64)">
      <summary>将指定的 64 位无符号整数的值转换为等效的 8 位无符号整数。</summary>
      <returns>一个等于 <paramref name="value" /> 的 8 位无符号整数。</returns>
      <param name="value">要转换的 64 位无符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Byte.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToChar(System.Byte)">
      <summary>将指定的 8 位无符号整数的值转换为其等效的 Unicode 字符。</summary>
      <returns>一个等于 <paramref name="value" /> 的 Unicode 字符。</returns>
      <param name="value">要转换的 8 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToChar(System.Int16)">
      <summary>将指定的 16 位有符号整数的值转换为它的等效 Unicode 字符。</summary>
      <returns>一个等于 <paramref name="value" /> 的 Unicode 字符。</returns>
      <param name="value">要转换的 16 位带符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Char.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToChar(System.Int32)">
      <summary>将指定的 32 位有符号整数的值转换为它的等效 Unicode 字符。</summary>
      <returns>一个等于 <paramref name="value" /> 的 Unicode 字符。</returns>
      <param name="value">要转换的 32 位带符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Char.MinValue" /> 或大于 <see cref="F:System.Char.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToChar(System.Int64)">
      <summary>将指定的 64 位有符号整数的值转换为它的等效 Unicode 字符。</summary>
      <returns>一个等于 <paramref name="value" /> 的 Unicode 字符。</returns>
      <param name="value">要转换的 64 位带符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Char.MinValue" /> 或大于 <see cref="F:System.Char.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToChar(System.Object)">
      <summary>将指定对象的值转换为 Unicode 字符。</summary>
      <returns>与 value 等效的 Unicode 字符，如果 <paramref name="value" /> 为 null，则为 <see cref="F:System.Char.MinValue" />。</returns>
      <param name="value">实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 是空字符串。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。 - 或 - 不支持 <paramref name="value" /> 转换为 <see cref="T:System.Char" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Char.MinValue" /> 或大于 <see cref="F:System.Char.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将指定对象的值转换为其等效的 Unicode 字符。</summary>
      <returns>与 <paramref name="value" /> 等效的 Unicode 字符，如果 <paramref name="value" /> 为 null，则为 <see cref="F:System.Char.MinValue" />。</returns>
      <param name="value">实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 是空字符串。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。 - 或 - 不支持 <paramref name="value" /> 转换为 <see cref="T:System.Char" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Char.MinValue" /> 或大于 <see cref="F:System.Char.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToChar(System.SByte)">
      <summary>将指定的 8 位带符号整数的值转换为其等效的 Unicode 字符。</summary>
      <returns>一个等于 <paramref name="value" /> 的 Unicode 字符。</returns>
      <param name="value">要转换的 8 位带符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Char.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToChar(System.String)">
      <summary>将指定字符串的第一个字符转换为 Unicode 字符。</summary>
      <returns>与 <paramref name="value" /> 中第一个且仅有的字符等效的 Unicode 字符。</returns>
      <param name="value">长度为 1 的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的长度不是 1。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定字符串的第一个字符转换为 Unicode 字符。</summary>
      <returns>与 <paramref name="value" /> 中第一个且仅有的字符等效的 Unicode 字符。</returns>
      <param name="value">长度为 1 或 null 的字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。 忽略此参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的长度不是 1。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt16)">
      <summary>将指定的 16 位无符号整数的值转换为它的等效 Unicode 字符。</summary>
      <returns>一个等于 <paramref name="value" /> 的 Unicode 字符。</returns>
      <param name="value">要转换的 16 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt32)">
      <summary>将指定的 32 位无符号整数的值转换为它的等效 Unicode 字符。</summary>
      <returns>一个等于 <paramref name="value" /> 的 Unicode 字符。</returns>
      <param name="value">要转换的 32 位无符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Char.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt64)">
      <summary>将指定的 64 位无符号整数的值转换为它的等效 Unicode 字符。</summary>
      <returns>一个等于 <paramref name="value" /> 的 Unicode 字符。</returns>
      <param name="value">要转换的 64 位无符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Char.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object)">
      <summary>将指定对象的值转换为 <see cref="T:System.DateTime" /> 对象。</summary>
      <returns>
        <paramref name="value" /> 的值的日期和时间等效项，如果 <paramref name="value" /> 为 null，则为 <see cref="F:System.DateTime.MinValue" /> 的日期和时间等效项。</returns>
      <param name="value">用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 null。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" />不是有效的日期和时间值。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。 - 或 - 不支持该转换。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定对象的值转换为 <see cref="T:System.DateTime" /> 对象。</summary>
      <returns>
        <paramref name="value" /> 的值的日期和时间等效项，如果 <paramref name="value" /> 为 null，则为 <see cref="F:System.DateTime.MinValue" /> 的日期和时间等效项。</returns>
      <param name="value">实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" />不是有效的日期和时间值。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。 - 或 - 不支持该转换。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String)">
      <summary>将日期和时间的指定字符串表示形式转换为等效的日期和时间值。</summary>
      <returns>
        <paramref name="value" /> 的值的日期和时间等效项，如果 <paramref name="value" /> 为 null，则为 <see cref="F:System.DateTime.MinValue" /> 的日期和时间等效项。</returns>
      <param name="value">日期和时间的字符串表示形式。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是格式正确的日期和时间字符串。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的日期和时间。</summary>
      <returns>
        <paramref name="value" /> 的值的日期和时间等效项，如果 <paramref name="value" /> 为 null，则为 <see cref="F:System.DateTime.MinValue" /> 的日期和时间等效项。</returns>
      <param name="value">包含要转换的日期和时间的字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是格式正确的日期和时间字符串。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Boolean)">
      <summary>将指定的布尔值转换为等效的十进制数。</summary>
      <returns>如果 <paramref name="value" /> 为 true，则为数字 1；否则，为 0。</returns>
      <param name="value">要转换的布尔值。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Byte)">
      <summary>将指定的 8 位无符号整数的值转换为等效的十进制数。</summary>
      <returns>与 <paramref name="value" /> 等效的十进制数。</returns>
      <param name="value">要转换的 8 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Decimal)">
      <summary>返回指定的十进制数；不执行任何实际的转换。</summary>
      <returns>
        <paramref name="value" /> 不经更改即返回。</returns>
      <param name="value">一个小数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Double)">
      <summary>将指定的双精度浮点数的值转换为等效的十进制数。</summary>
      <returns>一个等于 <paramref name="value" /> 的十进制数。</returns>
      <param name="value">要转换的双精度浮点数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Decimal.MaxValue" /> 或小于 <see cref="F:System.Decimal.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int16)">
      <summary>将指定的 16 位带符号整数的值转换为等效的十进制数。</summary>
      <returns>一个等于 <paramref name="value" /> 的十进制数。</returns>
      <param name="value">要转换的 16 位带符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int32)">
      <summary>将指定的 32 位带符号整数的值转换为等效的十进制数。</summary>
      <returns>一个等于 <paramref name="value" /> 的十进制数。</returns>
      <param name="value">要转换的 32 位带符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int64)">
      <summary>将指定的 64 位带符号整数的值转换为等效的十进制数。</summary>
      <returns>一个等于 <paramref name="value" /> 的十进制数。</returns>
      <param name="value">要转换的 64 位带符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object)">
      <summary>将指定对象的值转换为等效的十进制数。</summary>
      <returns>与 <paramref name="value" /> 等效的十进制数，如果 <paramref name="value" /> 为 null，则为 0（零）。</returns>
      <param name="value">用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 null。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 未采用 <see cref="T:System.Decimal" /> 类型的相应格式。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。 - 或 - 不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定对象的值转换为等效的十进制数。</summary>
      <returns>与 <paramref name="value" /> 等效的十进制数，如果 <paramref name="value" /> 为 null，则为 0（零）。</returns>
      <param name="value">实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 未采用 <see cref="T:System.Decimal" /> 类型的相应格式。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。 - 或 - 不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDecimal(System.SByte)">
      <summary>将指定的 8 位带符号整数的值转换为等效的十进制数。</summary>
      <returns>一个等于 <paramref name="value" /> 的十进制数。</returns>
      <param name="value">要转换的 8 位带符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Single)">
      <summary>将指定的单精度浮点数的值转换为等效的十进制数。</summary>
      <returns>一个等于 <paramref name="value" /> 的十进制数。</returns>
      <param name="value">要转换的单精度浮点数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Decimal.MaxValue" /> 或小于 <see cref="F:System.Decimal.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String)">
      <summary>将数字的指定字符串表示形式转换为等效的十进制数。</summary>
      <returns>与 <paramref name="value" /> 中数字等效的十进制数，如果 <paramref name="value" /> 为 null，则为 0（零）。</returns>
      <param name="value">包含要转换的数字的字符串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是一个有效格式的数字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的十进制数。</summary>
      <returns>与 <paramref name="value" /> 中数字等效的十进制数，如果 <paramref name="value" /> 为 null，则为 0（零）。</returns>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是一个有效格式的数字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt16)">
      <summary>将指定的 16 位无符号整数的值转换为等效的十进制数。</summary>
      <returns>与 <paramref name="value" /> 等效的十进制数。</returns>
      <param name="value">要转换的 16 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt32)">
      <summary>将指定的 32 位无符号整数的值转换为等效的十进制数。</summary>
      <returns>一个等于 <paramref name="value" /> 的十进制数。</returns>
      <param name="value">要转换的 32 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt64)">
      <summary>将指定的 64 位无符号整数的值转换为等效的十进制数。</summary>
      <returns>一个等于 <paramref name="value" /> 的十进制数。</returns>
      <param name="value">要转换的 64 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDouble(System.Boolean)">
      <summary>将指定的布尔值转换为等效的双精度浮点数。</summary>
      <returns>如果 <paramref name="value" /> 为 true，则为数字 1；否则，为 0。</returns>
      <param name="value">要转换的布尔值。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDouble(System.Byte)">
      <summary>将指定的 8 位无符号整数的值转换为等效的双精度浮点数。</summary>
      <returns>与 <paramref name="value" /> 等效的双精度浮点数。</returns>
      <param name="value">要转换的 8 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDouble(System.Decimal)">
      <summary>将指定的十进制数的值转换为等效的双精度浮点数。</summary>
      <returns>一个等于 <paramref name="value" /> 的双精度浮点数。</returns>
      <param name="value">要转换的十进制数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDouble(System.Double)">
      <summary>返回指定的双精度浮点数；不执行任何实际的转换。</summary>
      <returns>
        <paramref name="value" /> 不经更改即返回。</returns>
      <param name="value">要返回的双精度浮点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int16)">
      <summary>将指定的 16 位带符号整数的值转换为等效的双精度浮点数。</summary>
      <returns>等效于 <paramref name="value" /> 的双精度浮点数。</returns>
      <param name="value">要转换的 16 位带符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int32)">
      <summary>将指定的 32 位带符号整数的值转换为等效的双精度浮点数。</summary>
      <returns>一个等于 <paramref name="value" /> 的双精度浮点数。</returns>
      <param name="value">要转换的 32 位带符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int64)">
      <summary>将指定的 64 位带符号整数的值转换为等效的双精度浮点数。</summary>
      <returns>一个等于 <paramref name="value" /> 的双精度浮点数。</returns>
      <param name="value">要转换的 64 位带符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object)">
      <summary>将指定对象的值转换为双精度浮点数。</summary>
      <returns>与 <paramref name="value" /> 等效的双精度浮点数，如果 <paramref name="value" /> 为 null，则为零。</returns>
      <param name="value">用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 null。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 未采用 <see cref="T:System.Double" /> 类型的相应格式。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。 - 或 - 不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定对象的值转换为双精度浮点数。</summary>
      <returns>与 <paramref name="value" /> 等效的双精度浮点数，如果 <paramref name="value" /> 为 null，则为零。</returns>
      <param name="value">实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 未采用 <see cref="T:System.Double" /> 类型的相应格式。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDouble(System.SByte)">
      <summary>将指定的 8 位带符号整数的值转换为等效的双精度浮点数。</summary>
      <returns>与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
      <param name="value">要转换的 8 位带符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDouble(System.Single)">
      <summary>将指定的单精度浮点数的值转换为等效的双精度浮点数。</summary>
      <returns>一个等于 <paramref name="value" /> 的双精度浮点数。</returns>
      <param name="value">单精度浮点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDouble(System.String)">
      <summary>将数字的指定字符串表示形式转换为等效的双精度浮点数。</summary>
      <returns>与 <paramref name="value" /> 中数字等效的双精度浮点数，如果 <paramref name="value" /> 为 null，则为 0（零）。</returns>
      <param name="value">包含要转换的数字的字符串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是一个有效格式的数字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的双精度浮点数。</summary>
      <returns>与 <paramref name="value" /> 中数字等效的双精度浮点数，如果 <paramref name="value" /> 为 null，则为 0（零）。</returns>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是一个有效格式的数字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt16)">
      <summary>将指定的 16 位无符号整数的值转换为等效的双精度浮点数。</summary>
      <returns>一个等于 <paramref name="value" /> 的双精度浮点数。</returns>
      <param name="value">要转换的 16 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt32)">
      <summary>将指定的 32 位无符号整数的值转换为等效的双精度浮点数。</summary>
      <returns>一个等于 <paramref name="value" /> 的双精度浮点数。</returns>
      <param name="value">要转换的 32 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt64)">
      <summary>将指定的 64 位无符号整数的值转换为等效的双精度浮点数。</summary>
      <returns>一个等于 <paramref name="value" /> 的双精度浮点数。</returns>
      <param name="value">要转换的 64 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt16(System.Boolean)">
      <summary>将指定的布尔值转换为等效的 16 位带符号整数。</summary>
      <returns>如果 <paramref name="value" /> 为 true，则为数字 1；否则，为 0。</returns>
      <param name="value">要转换的布尔值。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt16(System.Byte)">
      <summary>将指定的 8 位无符号整数的值转换为等效的 16 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 16 位带符号整数。</returns>
      <param name="value">要转换的 8 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt16(System.Char)">
      <summary>将指定的 Unicode 字符的值转换为等效的 16 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 16 位带符号整数。</returns>
      <param name="value">要转换的 Unicode 字符。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int16.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt16(System.Decimal)">
      <summary>将指定的十进制数的值转换为等效的 16 位带符号整数。</summary>
      <returns>
        <paramref name="value" />，舍入为最接近的 16 位带符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <param name="value">要转换的十进制数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int16.MaxValue" /> 或小于 <see cref="F:System.Int16.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt16(System.Double)">
      <summary>将指定的双精度浮点数的值转换为等效的 16 位带符号整数。</summary>
      <returns>
        <paramref name="value" />，舍入为最接近的 16 位带符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <param name="value">要转换的双精度浮点数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int16.MaxValue" /> 或小于 <see cref="F:System.Int16.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int16)">
      <summary>返回指定的 16 位有符号整数；不执行实际的转换。</summary>
      <returns>
        <paramref name="value" /> 不经更改即返回。</returns>
      <param name="value">要返回的 16 位带符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int32)">
      <summary>将指定的 32 位有符号整数的值转换为等效的 16 位有符号整数。</summary>
      <returns>等效于 <paramref name="value" /> 的 16 位有符号整数。</returns>
      <param name="value">要转换的 32 位带符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int16.MaxValue" /> 或小于 <see cref="F:System.Int16.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int64)">
      <summary>将指定的 64 位有符号整数的值转换为等效的 16 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 16 位带符号整数。</returns>
      <param name="value">要转换的 64 位带符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int16.MaxValue" /> 或小于 <see cref="F:System.Int16.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object)">
      <summary>将指定对象的值转换为 16 位带符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 16 位带符号整数，如果 <paramref name="value" /> 为 null，则为零。</returns>
      <param name="value">用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 null。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 未采用 <see cref="T:System.Int16" /> 类型的相应格式。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。 - 或 - 不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将指定对象的值转换为 16 位带符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 16 位带符号整数，如果 <paramref name="value" /> 为 null，则为零。</returns>
      <param name="value">实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 未采用 <see cref="T:System.Int16" /> 类型的相应格式。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt16(System.SByte)">
      <summary>将指定的 8 位带符号整数的值转换为等效的 16 位带符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
      <param name="value">要转换的 8 位带符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt16(System.Single)">
      <summary>将指定的单精度浮点数的值转换为等效的 16 位带符号整数。</summary>
      <returns>
        <paramref name="value" />，舍入为最接近的 16 位带符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <param name="value">要转换的单精度浮点数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int16.MaxValue" /> 或小于 <see cref="F:System.Int16.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt16(System.String)">
      <summary>将数字的指定字符串表示形式转换为等效的 16 位带符号整数。</summary>
      <returns>与 <paramref name="value" /> 中数字等效的 16 位带符号整数，如果 <paramref name="value" /> 为 null，则为 0（零）。</returns>
      <param name="value">包含要转换的数字的字符串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" />不是由一个可选符号后跟数字序列（0 到 9）组成的。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 16 位带符号整数。</summary>
      <returns>与 <paramref name="value" /> 中数字等效的 16 位带符号整数，如果 <paramref name="value" /> 为 null，则为 0（零）。</returns>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" />不是由一个可选符号后跟数字序列（0 到 9）组成的。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.Int32)">
      <summary>将指定基数的数字的字符串表示形式转换为等效的 16 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 中数字等效的 16 位带符号整数，如果 <paramref name="value" /> 为 null，则为 0（零）。</returns>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="fromBase">
        <paramref name="value" /> 中数字的基数，它必须是 2、8、10 或 16。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。 - 或 - <paramref name="value" />，它表示一个非 10 为基的有符号数，前面带一个负号。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含的一个字符不是 <paramref name="fromBase" /> 指定的基中的有效数字。 如果 <paramref name="value" /> 中的第一个字符无效，异常消息则指示没有可转换的数字；否则，该消息将指示 <paramref name="value" /> 包含无效的尾随字符。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />，它表示一个非 10 为基的有符号数，前面带一个负号。 - 或 - <paramref name="value" /> 表示小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt16)">
      <summary>将指定的 16 位无符号整数的值转换为等效的 16 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 16 位带符号整数。</returns>
      <param name="value">要转换的 16 位无符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int16.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt32)">
      <summary>将指定的 32 位无符号整数的值转换为等效的 16 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 16 位带符号整数。</returns>
      <param name="value">要转换的 32 位无符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int16.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt64)">
      <summary>将指定的 64 位无符号整数的值转换为等效的 16 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 16 位带符号整数。</returns>
      <param name="value">要转换的 64 位无符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int16.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt32(System.Boolean)">
      <summary>将指定的布尔值转换为等效的 32 位带符号整数。</summary>
      <returns>如果 <paramref name="value" /> 为 true，则为数字 1；否则，为 0。</returns>
      <param name="value">要转换的布尔值。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt32(System.Byte)">
      <summary>将指定的 8 位无符号整数的值转换为等效的 32 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 32 位带符号整数。</returns>
      <param name="value">要转换的 8 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt32(System.Char)">
      <summary>将指定的 Unicode 字符的值转换为等效的 32 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 32 位带符号整数。</returns>
      <param name="value">要转换的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt32(System.Decimal)">
      <summary>将指定的十进制数的值转换为等效的 32 位带符号整数。</summary>
      <returns>
        <paramref name="value" />，舍入为最接近的 32 位带符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <param name="value">要转换的十进制数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int32.MaxValue" /> 或小于 <see cref="F:System.Int32.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt32(System.Double)">
      <summary>将指定的双精度浮点数的值转换为等效的 32 位带符号整数。</summary>
      <returns>
        <paramref name="value" />，舍入为最接近的 32 位带符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <param name="value">要转换的双精度浮点数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int32.MaxValue" /> 或小于 <see cref="F:System.Int32.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int16)">
      <summary>将指定的 16 位有符号整数的值转换为等效的 32 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 32 位带符号整数。</returns>
      <param name="value">要转换的 16 位带符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int32)">
      <summary>返回指定的 32 位有符号整数；不执行任何实际的转换。</summary>
      <returns>
        <paramref name="value" /> 不经更改即返回。</returns>
      <param name="value">要返回的 32 位带符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int64)">
      <summary>将指定的 64 位有符号整数的值转换为等效的 32 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 32 位带符号整数。</returns>
      <param name="value">要转换的 64 位带符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int32.MaxValue" /> 或小于 <see cref="F:System.Int32.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object)">
      <summary>将指定对象的值转换为 32 位带符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 32 位带符号整数，如果 <paramref name="value" /> 为 null，则为零。</returns>
      <param name="value">用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 null。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。 - 或 - 不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将指定对象的值转换为 32 位带符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 32 位带符号整数，如果 <paramref name="value" /> 为 null，则为零。</returns>
      <param name="value">实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt32(System.SByte)">
      <summary>将指定的 8 位带符号整数的值转换为等效的 32 位带符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
      <param name="value">要转换的 8 位带符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt32(System.Single)">
      <summary>将指定的单精度浮点数的值转换为等效的 32 位带符号整数。</summary>
      <returns>
        <paramref name="value" />，舍入为最接近的 32 位带符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <param name="value">要转换的单精度浮点数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int32.MaxValue" /> 或小于 <see cref="F:System.Int32.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt32(System.String)">
      <summary>将数字的指定字符串表示形式转换为等效的 32 位带符号整数。</summary>
      <returns>与 <paramref name="value" /> 中数字等效的 32 位带符号整数，如果 <paramref name="value" /> 为 null，则为 0（零）。</returns>
      <param name="value">包含要转换的数字的字符串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" />不是由一个可选符号后跟数字序列（0 到 9）组成的。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 32 位带符号整数。</summary>
      <returns>与 <paramref name="value" /> 中数字等效的 32 位带符号整数，如果 <paramref name="value" /> 为 null，则为 0（零）。</returns>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" />不是由一个可选符号后跟数字序列（0 到 9）组成的。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.Int32)">
      <summary>将指定基数的数字的字符串表示形式转换为等效的 32 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 中数字等效的 32 位带符号整数，如果 <paramref name="value" /> 为 null，则为 0（零）。</returns>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="fromBase">
        <paramref name="value" /> 中数字的基数，它必须是 2、8、10 或 16。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。 - 或 - <paramref name="value" />，它表示一个非 10 为基的有符号数，前面带一个负号。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含的一个字符不是 <paramref name="fromBase" /> 指定的基中的有效数字。 如果 <paramref name="value" /> 中的第一个字符无效，异常消息则指示没有可转换的数字；否则，该消息将指示 <paramref name="value" /> 包含无效的尾随字符。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />，它表示一个非 10 为基的有符号数，前面带一个负号。 - 或 - <paramref name="value" /> 表示小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt16)">
      <summary>将指定的 16 位无符号整数的值转换为等效的 32 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 32 位带符号整数。</returns>
      <param name="value">要转换的 16 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt32)">
      <summary>将指定的 32 位无符号整数的值转换为等效的 32 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 32 位带符号整数。</returns>
      <param name="value">要转换的 32 位无符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt64)">
      <summary>将指定的 64 位无符号整数的值转换为等效的 32 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 32 位带符号整数。</returns>
      <param name="value">要转换的 64 位无符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt64(System.Boolean)">
      <summary>将指定的布尔值转换为等效的 64 位带符号整数。</summary>
      <returns>如果 <paramref name="value" /> 为 true，则为数字 1；否则，为 0。</returns>
      <param name="value">要转换的布尔值。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt64(System.Byte)">
      <summary>将指定的 8 位无符号整数的值转换为等效的 64 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 64 位带符号整数。</returns>
      <param name="value">要转换的 8 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt64(System.Char)">
      <summary>将指定的 Unicode 字符的值转换为等效的 64 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 64 位带符号整数。</returns>
      <param name="value">要转换的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt64(System.Decimal)">
      <summary>将指定的十进制数的值转换为等效的 64 位带符号整数。</summary>
      <returns>
        <paramref name="value" />，舍入为最接近的 64 位带符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <param name="value">要转换的十进制数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int64.MaxValue" /> 或小于 <see cref="F:System.Int64.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt64(System.Double)">
      <summary>将指定的双精度浮点数的值转换为等效的 64 位带符号整数。</summary>
      <returns>
        <paramref name="value" />，舍入为最接近的 64 位带符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <param name="value">要转换的双精度浮点数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int64.MaxValue" /> 或小于 <see cref="F:System.Int64.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int16)">
      <summary>将指定的 16 位有符号整数的值转换为等效的 64 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 64 位带符号整数。</returns>
      <param name="value">要转换的 16 位带符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int32)">
      <summary>将指定的 32 位有符号整数的值转换为等效的 64 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 64 位带符号整数。</returns>
      <param name="value">要转换的 32 位带符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int64)">
      <summary>返回指定的 64 位有符号整数；不执行任何实际的转换。</summary>
      <returns>
        <paramref name="value" /> 不经更改即返回。</returns>
      <param name="value">64 位的有符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object)">
      <summary>将指定对象的值转换为 64 位带符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 64 位带符号整数，如果 <paramref name="value" /> 为 null，则为零。</returns>
      <param name="value">用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 null。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。 - 或 - 不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将指定对象的值转换为 64 位带符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 64 位带符号整数，如果 <paramref name="value" /> 为 null，则为零。</returns>
      <param name="value">实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。 - 或 - 不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt64(System.SByte)">
      <summary>将指定的 8 位带符号整数的值转换为等效的 64 位带符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 64 位带符号整数。</returns>
      <param name="value">要转换的 8 位带符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt64(System.Single)">
      <summary>将指定的单精度浮点数的值转换为等效的 64 位带符号整数。</summary>
      <returns>
        <paramref name="value" />，舍入为最接近的 64 位带符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <param name="value">要转换的单精度浮点数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int64.MaxValue" /> 或小于 <see cref="F:System.Int64.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt64(System.String)">
      <summary>将数字的指定字符串表示形式转换为等效的 64 位带符号整数。</summary>
      <returns>与 <paramref name="value" /> 中数字等效的 64 位带符号整数，如果 <paramref name="value" /> 为 null，则为 0（零）。</returns>
      <param name="value">包含要转换的数字的字符串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" />不是由一个可选符号后跟数字序列（0 到 9）组成的。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 64 位带符号整数。</summary>
      <returns>与 <paramref name="value" /> 中数字等效的 64 位带符号整数，如果 <paramref name="value" /> 为 null，则为 0（零）。</returns>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" />不是由一个可选符号后跟数字序列（0 到 9）组成的。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.Int32)">
      <summary>将指定基数的数字的字符串表示形式转换为等效的 64 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 中数字等效的 64 位带符号整数，如果 <paramref name="value" /> 为 null，则为 0（零）。</returns>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="fromBase">
        <paramref name="value" /> 中数字的基数，它必须是 2、8、10 或 16。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。 - 或 - <paramref name="value" />，它表示一个非 10 为基的有符号数，前面带一个负号。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含的一个字符不是 <paramref name="fromBase" /> 指定的基中的有效数字。 如果 <paramref name="value" /> 中的第一个字符无效，异常消息则指示没有可转换的数字；否则，该消息将指示 <paramref name="value" /> 包含无效的尾随字符。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />，它表示一个非 10 为基的有符号数，前面带一个负号。 - 或 - <paramref name="value" /> 表示小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt16)">
      <summary>将指定的 16 位无符号整数的值转换为等效的 64 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 64 位带符号整数。</returns>
      <param name="value">要转换的 16 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt32)">
      <summary>将指定的 32 位无符号整数的值转换为等效的 64 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 64 位带符号整数。</returns>
      <param name="value">要转换的 32 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt64)">
      <summary>将指定的 64 位无符号整数的值转换为等效的 64 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 64 位带符号整数。</returns>
      <param name="value">要转换的 64 位无符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int64.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSByte(System.Boolean)">
      <summary>将指定的布尔值转换为等效的 8 位带符号整数。</summary>
      <returns>如果 <paramref name="value" /> 为 true，则为数字 1；否则，为 0。</returns>
      <param name="value">要转换的布尔值。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSByte(System.Byte)">
      <summary>将指定的 8 位无符号整数的值转换为等效的 8 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
      <param name="value">要转换的 8 位无符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSByte(System.Char)">
      <summary>将指定的 Unicode 字符的值转换为等效的 8 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
      <param name="value">要转换的 Unicode 字符。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSByte(System.Decimal)">
      <summary>将指定的十进制数的值转换为等效的 8 位带符号整数。</summary>
      <returns>
        <paramref name="value" />，舍入为最接近的 8 位带符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <param name="value">要转换的十进制数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" /> 或小于 <see cref="F:System.SByte.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSByte(System.Double)">
      <summary>将指定的双精度浮点数的值转换为等效的 8 位带符号整数。</summary>
      <returns>
        <paramref name="value" />，舍入为最接近的 8 位带符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <param name="value">要转换的双精度浮点数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" /> 或小于 <see cref="F:System.SByte.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int16)">
      <summary>将指定的 16 位有符号整数的值转换为等效的 8 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
      <param name="value">要转换的 16 位带符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" /> 或小于 <see cref="F:System.SByte.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int32)">
      <summary>将指定的 32 位有符号整数的值转换为等效的 8 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
      <param name="value">要转换的 32 位带符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" /> 或小于 <see cref="F:System.SByte.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int64)">
      <summary>将指定的 64 位有符号整数的值转换为等效的 8 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
      <param name="value">要转换的 64 位带符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" /> 或小于 <see cref="F:System.SByte.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object)">
      <summary>将指定对象的值转换为 8 位带符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 8 位带符号整数，如果 <paramref name="value" /> 为 null，则为零。</returns>
      <param name="value">用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 null。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。 - 或 - 不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将指定对象的值转换为 8 位带符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 8 位带符号整数，如果 <paramref name="value" /> 为 null，则为零。</returns>
      <param name="value">实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。 - 或 - 不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSByte(System.SByte)">
      <summary>返回指定的 8 位带符号整数；不执行任何实际的转换。</summary>
      <returns>
        <paramref name="value" /> 不经更改即返回。</returns>
      <param name="value">要返回的 8 位带符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSByte(System.Single)">
      <summary>将指定的单精度浮点数的值转换为等效的 8 位带符号整数。</summary>
      <returns>
        <paramref name="value" />，舍入为最接近的 8 位带符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <param name="value">要转换的单精度浮点数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" /> 或小于 <see cref="F:System.SByte.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSByte(System.String)">
      <summary>将数字的指定字符串表示形式转换为等效的 8 位带符号整数。</summary>
      <returns>与 <paramref name="value" /> 中数字等效的 8 位带符号整数，如果 value 为 null，则为 0（零）。</returns>
      <param name="value">包含要转换的数字的字符串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" />不是由一个可选符号后跟数字序列（0 到 9）组成的。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 8 位带符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" />不是由一个可选符号后跟数字序列（0 到 9）组成的。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.Int32)">
      <summary>将指定基数的数字的字符串表示形式转换为等效的 8 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 中数字等效的 8 位带符号整数，如果 <paramref name="value" /> 为 null，则为 0（零）。</returns>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="fromBase">
        <paramref name="value" /> 中数字的基数，它必须是 2、8、10 或 16。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。 - 或 - <paramref name="value" />，它表示一个非 10 为基的有符号数，前面带一个负号。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含的一个字符不是 <paramref name="fromBase" /> 指定的基中的有效数字。 如果 <paramref name="value" /> 中的第一个字符无效，异常消息则指示没有可转换的数字；否则，该消息将指示 <paramref name="value" /> 包含无效的尾随字符。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />，它表示一个非 10 为基的有符号数，前面带一个负号。 - 或 - <paramref name="value" /> 表示小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt16)">
      <summary>将指定的 16 位无符号整数的值转换为等效的 8 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
      <param name="value">要转换的 16 位无符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt32)">
      <summary>将指定的 32 位无符号整数的值转换为等效的 8 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
      <param name="value">要转换的 32 位无符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" /> 或小于 <see cref="F:System.SByte.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt64)">
      <summary>将指定的 64 位无符号整数的值转换为等效的 8 位有符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
      <param name="value">要转换的 64 位无符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" /> 或小于 <see cref="F:System.SByte.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSingle(System.Boolean)">
      <summary>将指定的布尔值转换为等效的单精度浮点数。</summary>
      <returns>如果 <paramref name="value" /> 为 true，则为数字 1；否则，为 0。</returns>
      <param name="value">要转换的布尔值。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSingle(System.Byte)">
      <summary>将指定的 8 位无符号整数的值转换为等效的单精度浮点数。</summary>
      <returns>一个等于 <paramref name="value" /> 的单精度浮点数。</returns>
      <param name="value">要转换的 8 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSingle(System.Decimal)">
      <summary>将指定的十进制数的值转换为等效的单精度浮点数。</summary>
      <returns>一个等于 <paramref name="value" /> 的单精度浮点数。 <paramref name="value" /> 使用"舍入到最接近的数字"规则进行舍入。 例如，当舍入为两位小数时，值 2.345 变成 2.34，而值 2.355 变成 2.36。</returns>
      <param name="value">要转换的十进制数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSingle(System.Double)">
      <summary>将指定的双精度浮点数的值转换为等效的单精度浮点数。</summary>
      <returns>一个等于 <paramref name="value" /> 的单精度浮点数。 <paramref name="value" /> 使用"舍入到最接近的数字"规则进行舍入。 例如，当舍入为两位小数时，值 2.345 变成 2.34，而值 2.355 变成 2.36。</returns>
      <param name="value">要转换的双精度浮点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int16)">
      <summary>将指定的 16 位带符号整数的值转换为等效的单精度浮点数。</summary>
      <returns>一个等于 <paramref name="value" /> 的单精度浮点数。</returns>
      <param name="value">要转换的 16 位带符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int32)">
      <summary>将指定的 32 位带符号整数的值转换为等效的单精度浮点数。</summary>
      <returns>一个等于 <paramref name="value" /> 的单精度浮点数。</returns>
      <param name="value">要转换的 32 位带符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int64)">
      <summary>将指定的 64 位带符号整数的值转换为等效的单精度浮点数。</summary>
      <returns>一个等于 <paramref name="value" /> 的单精度浮点数。</returns>
      <param name="value">要转换的 64 位带符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object)">
      <summary>将指定对象的值转换为单精度浮点数。</summary>
      <returns>与 <paramref name="value" /> 等效的单精度浮点数，如果 <paramref name="value" /> 为 null，则为零。</returns>
      <param name="value">用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 null。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。 - 或 - 不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定对象的值转换为单精度浮点数。</summary>
      <returns>与 <paramref name="value" /> 等效的单精度浮点数，如果 <paramref name="value" /> 为 null，则为零。</returns>
      <param name="value">实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSingle(System.SByte)">
      <summary>将指定的 8 位带符号整数的值转换为等效的单精度浮点数。</summary>
      <returns>与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
      <param name="value">要转换的 8 位带符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSingle(System.Single)">
      <summary>返回指定的单精度浮点数；不执行任何实际的转换。</summary>
      <returns>
        <paramref name="value" /> 不经更改即返回。</returns>
      <param name="value">要返回的单精度浮点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSingle(System.String)">
      <summary>将数字的指定字符串表示形式转换为等效的单精度浮点数。</summary>
      <returns>与 <paramref name="value" /> 中数字等效的单精度浮点数，如果 <paramref name="value" /> 为 null，则为 0（零）。</returns>
      <param name="value">包含要转换的数字的字符串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是一个有效格式的数字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的单精度浮点数。</summary>
      <returns>与 <paramref name="value" /> 中数字等效的单精度浮点数，如果 <paramref name="value" /> 为 null，则为 0（零）。</returns>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是一个有效格式的数字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt16)">
      <summary>将指定的 16 位无符号整数的值转换为等效的单精度浮点数。</summary>
      <returns>一个等于 <paramref name="value" /> 的单精度浮点数。</returns>
      <param name="value">要转换的 16 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt32)">
      <summary>将指定的 32 位无符号整数的值转换为等效的单精度浮点数。</summary>
      <returns>一个等于 <paramref name="value" /> 的单精度浮点数。</returns>
      <param name="value">要转换的 32 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt64)">
      <summary>将指定的 64 位无符号整数的值转换为等效的单精度浮点数。</summary>
      <returns>一个等于 <paramref name="value" /> 的单精度浮点数。</returns>
      <param name="value">要转换的 64 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean)">
      <summary>将指定的布尔值转换为其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的布尔值。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
      <summary>将指定的布尔值转换为其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的布尔值。</param>
      <param name="provider">一个对象的实例。 忽略此参数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.Byte)">
      <summary>将指定的 8 位无符号整数的值转换为其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的 8 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定的 8 位无符号整数的值转换为其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的 8 位无符号整数。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.Int32)">
      <summary>将 8 位无符号整数的值转换为其等效的指定基数的字符串表示形式。</summary>
      <returns>以 <paramref name="toBase" /> 为基数的 <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的 8 位无符号整数。</param>
      <param name="toBase">返回值的基数，必须是 2、8、10 或 16。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> 不是 2、8、10 或 16。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.Char)">
      <summary>将指定的 Unicode 字符的值转换为其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将指定的 Unicode 字符的值转换为其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的 Unicode 字符。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime)">
      <summary>将指定的 <see cref="T:System.DateTime" /> 的值转换为其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的日期和时间值。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定 <see cref="T:System.DateTime" /> 的值转换为其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的日期和时间值。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal)">
      <summary>将指定的十进制数的值转换为其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的十进制数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将指定的十进制数的值转换为其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的十进制数。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.Double)">
      <summary>将指定的双精度浮点数的值转换其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的双精度浮点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.Double,System.IFormatProvider)">
      <summary>将指定的双精度浮点数的值转换其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的双精度浮点数。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.Int16)">
      <summary>将指定的 16 位带符号整数的值转换为其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的 16 位带符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定的 16 位带符号整数的值转换为其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的 16 位带符号整数。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.Int32)">
      <summary>将 16 位带符号整数的值转换为其指定基的等效字符串表示形式。</summary>
      <returns>以 <paramref name="toBase" /> 为基数的 <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的 16 位带符号整数。</param>
      <param name="toBase">返回值的基数，必须是 2、8、10 或 16。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> 不是 2、8、10 或 16。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.Int32)">
      <summary>将指定的 32 位带符号整数的值转换为其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的 32 位带符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定的 32 位带符号整数的值转换为其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的 32 位带符号整数。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.Int32)">
      <summary>将 32 位带符号整数的值转换为其指定基的等效字符串表示形式。</summary>
      <returns>以 <paramref name="toBase" /> 为基数的 <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的 32 位带符号整数。</param>
      <param name="toBase">返回值的基数，必须是 2、8、10 或 16。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> 不是 2、8、10 或 16。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.Int64)">
      <summary>将指定的 64 位带符号整数的值转换为其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的 64 位带符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定的 64 位带符号整数的值转换为其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的 64 位带符号整数。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.Int32)">
      <summary>将 64 位带符号整数的值转换为其指定基的等效字符串表示形式。</summary>
      <returns>以 <paramref name="toBase" /> 为基数的 <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的 64 位带符号整数。</param>
      <param name="toBase">返回值的基数，必须是 2、8、10 或 16。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> 不是 2、8、10 或 16。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.Object)">
      <summary>将指定对象的值转换为其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式，如果 value 为 null，则为 <see cref="F:System.String.Empty" />。</returns>
      <param name="value">一个对象，用于提供要转换的值，或 null。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将指定对象的值转换为其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式，如果 <paramref name="value" /> 为 null，则为 <see cref="F:System.String.Empty" />。</returns>
      <param name="value">一个对象，用于提供要转换的值，或 null。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.SByte)">
      <summary>将指定的 8 位带符号整数的值转换为其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的 8 位带符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定的 8 位带符号整数的值转换为其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的 8 位带符号整数。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.Single)">
      <summary>将指定的单精度浮点数的值转换其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的单精度浮点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.Single,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定的单精度浮点数的值转换为其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的单精度浮点数。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16)">
      <summary>将指定的 16 位无符号整数的值转换为其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的 16 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定的 16 位无符号整数的值转换为其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的 16 位无符号整数。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32)">
      <summary>将指定的 32 位无符号整数的值转换为其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的 32 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定的 32 位无符号整数的值转换为其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的 32 位无符号整数。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64)">
      <summary>将指定的 64 位无符号整数的值转换为其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的 64 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将指定的 64 位无符号整数的值转换为其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的 64 位无符号整数。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Boolean)">
      <summary>将指定的布尔值转换为等效的 16 位无符号整数。</summary>
      <returns>如果 <paramref name="value" /> 为 true，则为数字 1；否则，为 0。</returns>
      <param name="value">要转换的布尔值。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Byte)">
      <summary>将指定的 8 位无符号整数的值转换为等效的 16 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 16 位无符号整数。</returns>
      <param name="value">要转换的 8 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Char)">
      <summary>将指定 Unicode 字符的值转换为等效的 16 位无符号整数。</summary>
      <returns>等效于 <paramref name="value" /> 的 16 位无符号整数。</returns>
      <param name="value">要转换的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Decimal)">
      <summary>将指定的十进制数的值转换为等效的 16 位无符号整数。</summary>
      <returns>
        <paramref name="value" />，舍入为最接近的 16 位无符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <param name="value">要转换的十进制数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Double)">
      <summary>将指定的双精度浮点数的值转换为等效的 16 位无符号整数。</summary>
      <returns>
        <paramref name="value" />，舍入为最接近的 16 位无符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <param name="value">要转换的双精度浮点数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int16)">
      <summary>将指定的 16 位有符号整数的值转换为等效的 16 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 16 位无符号整数。</returns>
      <param name="value">要转换的 16 位带符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int32)">
      <summary>将指定的 32 位有符号整数的值转换为等效的 16 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 16 位无符号整数。</returns>
      <param name="value">要转换的 32 位带符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int64)">
      <summary>将指定的 64 位有符号整数的值转换为等效的 16 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 16 位无符号整数。</returns>
      <param name="value">要转换的 64 位带符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object)">
      <summary>将指定对象的值转换为 16 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 16 位无符号整数，如果 <paramref name="value" /> 为 null，则为零。</returns>
      <param name="value">用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 null。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。 - 或 - 不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将指定对象的值转换为 16 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 16 位无符号整数，如果 <paramref name="value" /> 为 null，则为零。</returns>
      <param name="value">实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。 - 或 - 不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt16(System.SByte)">
      <summary>将指定的 8 位带符号整数的值转换为等效的 16 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 16 位无符号整数。</returns>
      <param name="value">要转换的 8 位带符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Single)">
      <summary>将指定的单精度浮点数的值转换为等效的 16 位无符号整数。</summary>
      <returns>
        <paramref name="value" />，舍入为最接近的 16 位无符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <param name="value">要转换的单精度浮点数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String)">
      <summary>将数字的指定字符串表示形式转换为等效的 16 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 中数字等效的 16 位无符号整数，如果 <paramref name="value" /> 为 null，则为 0（零）。</returns>
      <param name="value">包含要转换的数字的字符串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" />不是由一个可选符号后跟数字序列（0 到 9）组成的。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 16 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 中数字等效的 16 位无符号整数，如果 <paramref name="value" /> 为 null，则为 0（零）。</returns>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" />不是由一个可选符号后跟数字序列（0 到 9）组成的。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.Int32)">
      <summary>将指定基数的数字的字符串表示形式转换为等效的 16 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 中数字等效的 16 位无符号整数，如果 <paramref name="value" /> 为 null，则为 0（零）。</returns>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="fromBase">
        <paramref name="value" /> 中数字的基数，它必须是 2、8、10 或 16。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。 - 或 - <paramref name="value" />，它表示一个非 10 为基的无符号数，前面带一个负号。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含的一个字符不是 <paramref name="fromBase" /> 指定的基中的有效数字。 如果 <paramref name="value" /> 中的第一个字符无效，异常消息则指示没有可转换的数字；否则，该消息将指示 <paramref name="value" /> 包含无效的尾随字符。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />，它表示一个非 10 为基的无符号数，前面带一个负号。 - 或 - <paramref name="value" /> 表示小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt16)">
      <summary>返回指定的 16 位无符号整数；不执行任何实际的转换。</summary>
      <returns>
        <paramref name="value" /> 不经更改即返回。</returns>
      <param name="value">要返回的 16 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt32)">
      <summary>将指定的 32 位无符号整数的值转换为等效的 16 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 16 位无符号整数。</returns>
      <param name="value">要转换的 32 位无符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.UInt16.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt64)">
      <summary>将指定的 64 位无符号整数的值转换为等效的 16 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 16 位无符号整数。</returns>
      <param name="value">要转换的 64 位无符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.UInt16.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Boolean)">
      <summary>将指定的布尔值转换为等效的 32 位无符号整数。</summary>
      <returns>如果 <paramref name="value" /> 为 true，则为数字 1；否则，为 0。</returns>
      <param name="value">要转换的布尔值。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Byte)">
      <summary>将指定的 8 位无符号整数的值转换为等效的 32 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 32 位无符号整数。</returns>
      <param name="value">要转换的 8 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Char)">
      <summary>将指定 Unicode 字符的值转换为等效的 32 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 32 位无符号整数。</returns>
      <param name="value">要转换的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Decimal)">
      <summary>将指定的十进制数的值转换为等效的 32 位无符号整数。</summary>
      <returns>
        <paramref name="value" />，舍入为最接近的 32 位无符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <param name="value">要转换的十进制数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt32.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Double)">
      <summary>将指定的双精度浮点数的值转换为等效的 32 位无符号整数。</summary>
      <returns>
        <paramref name="value" />，舍入为最接近的 32 位无符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <param name="value">要转换的双精度浮点数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt32.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int16)">
      <summary>将指定的 16 位有符号整数的值转换为等效的 32 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 32 位无符号整数。</returns>
      <param name="value">要转换的 16 位带符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int32)">
      <summary>将指定的 32 位有符号整数的值转换为等效的 32 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 32 位无符号整数。</returns>
      <param name="value">要转换的 32 位带符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int64)">
      <summary>将指定的 64 位有符号整数的值转换为等效的 32 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 32 位无符号整数。</returns>
      <param name="value">要转换的 64 位带符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt32.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object)">
      <summary>将指定对象的值转换为 32 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 32 位无符号整数，如果 <paramref name="value" /> 为 null，则为 0（零）。</returns>
      <param name="value">用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 null。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。 - 或 - 不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将指定对象的值转换为 32 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 32 位无符号整数，如果 <paramref name="value" /> 为 null，则为零。</returns>
      <param name="value">实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。 - 或 - 不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt32(System.SByte)">
      <summary>将指定的 8 位带符号整数的值转换为等效的 32 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 32 位无符号整数。</returns>
      <param name="value">要转换的 8 位带符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Single)">
      <summary>将指定的单精度浮点数的值转换为等效的 32 位无符号整数。</summary>
      <returns>
        <paramref name="value" />，舍入为最接近的 32 位无符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <param name="value">要转换的单精度浮点数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt32.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String)">
      <summary>将数字的指定字符串表示形式转换为等效的 32 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 中数字等效的 32 位无符号整数，如果 <paramref name="value" /> 为 null，则为 0（零）。</returns>
      <param name="value">包含要转换的数字的字符串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" />不是由一个可选符号后跟数字序列（0 到 9）组成的。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 32 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 中数字等效的 32 位无符号整数，如果 <paramref name="value" /> 为 null，则为 0（零）。</returns>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" />不是由一个可选符号后跟数字序列（0 到 9）组成的。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.Int32)">
      <summary>将指定基数的数字的字符串表示形式转换为等效的 32 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 中数字等效的 32 位无符号整数，如果 <paramref name="value" /> 为 null，则为 0（零）。</returns>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="fromBase">
        <paramref name="value" /> 中数字的基数，它必须是 2、8、10 或 16。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。 - 或 - <paramref name="value" />，它表示一个非 10 为基的无符号数，前面带一个负号。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含的一个字符不是 <paramref name="fromBase" /> 指定的基中的有效数字。 如果 <paramref name="value" /> 中的第一个字符无效，异常消息则指示没有可转换的数字；否则，该消息将指示 <paramref name="value" /> 包含无效的尾随字符。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />，它表示一个非 10 为基的无符号数，前面带一个负号。 - 或 - <paramref name="value" /> 表示小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt16)">
      <summary>将指定的 16 位无符号整数的值转换为等效的 32 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 32 位无符号整数。</returns>
      <param name="value">要转换的 16 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt32)">
      <summary>返回指定的 32 位无符号整数；不执行任何实际的转换。</summary>
      <returns>
        <paramref name="value" /> 不经更改即返回。</returns>
      <param name="value">要返回的 32 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt64)">
      <summary>将指定的 64 位无符号整数的值转换为等效的 32 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 32 位无符号整数。</returns>
      <param name="value">要转换的 64 位无符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.UInt32.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Boolean)">
      <summary>将指定的布尔值转换为等效的 64 位无符号整数。</summary>
      <returns>如果 <paramref name="value" /> 为 true，则为数字 1；否则，为 0。</returns>
      <param name="value">要转换的布尔值。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Byte)">
      <summary>将指定的 8 位无符号整数的值转换为等效的 64 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 64 位带符号整数。</returns>
      <param name="value">要转换的 8 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Char)">
      <summary>将指定 Unicode 字符的值转换为等效的 64 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 64 位无符号整数。</returns>
      <param name="value">要转换的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Decimal)">
      <summary>将指定的十进制数的值转换为等效的 64 位无符号整数。</summary>
      <returns>
        <paramref name="value" />，舍入为最接近的 64 位无符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <param name="value">要转换的十进制数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt64.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Double)">
      <summary>将指定的双精度浮点数的值转换为等效的 64 位无符号整数。</summary>
      <returns>
        <paramref name="value" />，舍入为最接近的 64 位无符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <param name="value">要转换的双精度浮点数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt64.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int16)">
      <summary>将指定的 16 位有符号整数的值转换为等效的 64 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 64 位无符号整数。</returns>
      <param name="value">要转换的 16 位带符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int32)">
      <summary>将指定的 32 位有符号整数的值转换为等效的 64 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 64 位无符号整数。</returns>
      <param name="value">要转换的 32 位带符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int64)">
      <summary>将指定的 64 位有符号整数的值转换为等效的 64 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 64 位无符号整数。</returns>
      <param name="value">要转换的 64 位带符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object)">
      <summary>将指定对象的值转换为 64 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 64 位无符号整数，如果 <paramref name="value" /> 为 null，则为零。</returns>
      <param name="value">用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 null。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。 - 或 - 不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将指定对象的值转换为 64 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 64 位无符号整数，如果 <paramref name="value" /> 为 null，则为零。</returns>
      <param name="value">实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。 - 或 - 不支持该转换。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt64(System.SByte)">
      <summary>将指定的 8 位带符号整数的值转换为等效的 64 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 64 位无符号整数。</returns>
      <param name="value">要转换的 8 位带符号整数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Single)">
      <summary>将指定的单精度浮点数的值转换为等效的 64 位无符号整数。</summary>
      <returns>
        <paramref name="value" />，舍入为最接近的 64 位无符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
      <param name="value">要转换的单精度浮点数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt64.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String)">
      <summary>将数字的指定字符串表示形式转换为等效的 64 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 中数字等效的 64 位带符号整数，如果 <paramref name="value" /> 为 null，则为 0（零）。</returns>
      <param name="value">包含要转换的数字的字符串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" />不是由一个可选符号后跟数字序列（0 到 9）组成的。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 64 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 中数字等效的 64 位无符号整数，如果 <paramref name="value" /> 为 null，则为 0（零）。</returns>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" />不是由一个可选符号后跟数字序列（0 到 9）组成的。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.Int32)">
      <summary>将指定基数的数字的字符串表示形式转换为等效的 64 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 中数字等效的 64 位无符号整数，如果 <paramref name="value" /> 为 null，则为 0（零）。</returns>
      <param name="value">包含要转换的数字的字符串。</param>
      <param name="fromBase">
        <paramref name="value" /> 中数字的基数，它必须是 2、8、10 或 16。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。 - 或 - <paramref name="value" />，它表示一个非 10 为基的无符号数，前面带一个负号。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含的一个字符不是 <paramref name="fromBase" /> 指定的基中的有效数字。 如果 <paramref name="value" /> 中的第一个字符无效，异常消息则指示没有可转换的数字；否则，该消息将指示 <paramref name="value" /> 包含无效的尾随字符。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />，它表示一个非 10 为基的无符号数，前面带一个负号。 - 或 - <paramref name="value" /> 表示小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt16)">
      <summary>将指定的 16 位无符号整数的值转换为等效的 64 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 64 位无符号整数。</returns>
      <param name="value">要转换的 16 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt32)">
      <summary>将指定的 32 位无符号整数的值转换为等效的 64 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 等效的 64 位无符号整数。</returns>
      <param name="value">要转换的 32 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt64)">
      <summary>返回指定的 64 位无符号整数；不执行任何实际的转换。</summary>
      <returns>
        <paramref name="value" /> 不经更改即返回。</returns>
      <param name="value">要返回的 64 位无符号整数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.DataMisalignedException">
      <summary>当在某个地址读取或写入一个单元的数据，但该地址的数据大小不是该数据单元的整数倍时引发的异常。 此类不能被继承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DataMisalignedException.#ctor">
      <summary>初始化 <see cref="T:System.DataMisalignedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.DataMisalignedException" /> 类的新实例。</summary>
      <param name="message">描述错误的 <see cref="T:System.String" /> 对象。 <paramref name="message" /> 的内容被设计为人可理解的形式。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String,System.Exception)">
      <summary>用指定的错误信息和基础异常初始化 <see cref="T:System.DataMisalignedException" /> 类的新实例。</summary>
      <param name="message">描述错误的 <see cref="T:System.String" /> 对象。 <paramref name="message" /> 的内容被设计为人可理解的形式。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前 <see cref="T:System.DataMisalignedException" /> 的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.DateTime">
      <summary>表示时间上的一刻，通常以日期和当天的时间表示。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定的年、月和日。</summary>
      <param name="year">年（1 到 9999）。</param>
      <param name="month">月（1 到 12）。</param>
      <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小于 1 或大于 9999。 - 或 - <paramref name="month" /> 小于 1 或大于 12。 - 或 - <paramref name="day" /> 小于 1 或大于 <paramref name="month" /> 中的天数。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定的年、月、日、小时、分钟和秒。</summary>
      <param name="year">年（1 到 9999）。</param>
      <param name="month">月（1 到 12）。</param>
      <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
      <param name="hour">小时（0 到 23）。</param>
      <param name="minute">分（0 到 59）。</param>
      <param name="second">秒（0 到 59）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小于 1 或大于 9999。 - 或 - <paramref name="month" /> 小于 1 或大于 12。 - 或 - <paramref name="day" /> 小于 1 或大于 <paramref name="month" /> 中的天数。 - 或 - <paramref name="hour" /> 小于 0 或大于 23。 - 或 - <paramref name="minute" /> 小于 0 或大于 59。 - 或 - <paramref name="second" /> 小于 0 或大于 59。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
      <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定年、月、日、小时、分钟、秒和协调世界时 (UTC) 或本地时间。</summary>
      <param name="year">年（1 到 9999）。</param>
      <param name="month">月（1 到 12）。</param>
      <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
      <param name="hour">小时（0 到 23）。</param>
      <param name="minute">分（0 到 59）。</param>
      <param name="second">秒（0 到 59）。</param>
      <param name="kind">枚举值之一，该值指示 <paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" /> 和 <paramref name="second" /> 指定了本地时间、协调世界时 (UTC)，还是两者皆未指定。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小于 1 或大于 9999。 - 或 - <paramref name="month" /> 小于 1 或大于 12。 - 或 - <paramref name="day" /> 小于 1 或大于 <paramref name="month" /> 中的天数。 - 或 - <paramref name="hour" /> 小于 0 或大于 23。 - 或 - <paramref name="minute" /> 小于 0 或大于 59。 - 或 - <paramref name="second" /> 小于 0 或大于 59。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> 不是 <see cref="T:System.DateTimeKind" /> 值之一。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定的年、月、日、小时、分钟、秒和毫秒。</summary>
      <param name="year">年（1 到 9999）。</param>
      <param name="month">月（1 到 12）。</param>
      <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
      <param name="hour">小时（0 到 23）。</param>
      <param name="minute">分（0 到 59）。</param>
      <param name="second">秒（0 到 59）。</param>
      <param name="millisecond">毫秒（0 到 999）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小于 1 或大于 9999。 - 或 - <paramref name="month" /> 小于 1 或大于 12。 - 或 - <paramref name="day" /> 小于 1 或大于 <paramref name="month" /> 中的天数。 - 或 - <paramref name="hour" /> 小于 0 或大于 23。 - 或 - <paramref name="minute" /> 小于 0 或大于 59。 - 或 - <paramref name="second" /> 小于 0 或大于 59。 - 或 - <paramref name="millisecond" /> 小于 0 或大于 999。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
      <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定年、月、日、小时、分钟、秒、毫秒和协调世界时 (UTC) 或本地时间。</summary>
      <param name="year">年（1 到 9999）。</param>
      <param name="month">月（1 到 12）。</param>
      <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
      <param name="hour">小时（0 到 23）。</param>
      <param name="minute">分（0 到 59）。</param>
      <param name="second">秒（0 到 59）。</param>
      <param name="millisecond">毫秒（0 到 999）。</param>
      <param name="kind">枚举值之一，该值指示 <paramref name="year" />、<paramref name="month" />、<paramref name="day" />, <paramref name="hour" />、<paramref name="minute" />、<paramref name="second" /> 和 <paramref name="millisecond" /> 指定了本地时间、协调世界时 (UTC)，还是两者皆未指定。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小于 1 或大于 9999。 - 或 - <paramref name="month" /> 小于 1 或大于 12。 - 或 - <paramref name="day" /> 小于 1 或大于 <paramref name="month" /> 中的天数。 - 或 - <paramref name="hour" /> 小于 0 或大于 23。 - 或 - <paramref name="minute" /> 小于 0 或大于 59。 - 或 - <paramref name="second" /> 小于 0 或大于 59。 - 或 - <paramref name="millisecond" /> 小于 0 或大于 999。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> 不是 <see cref="T:System.DateTimeKind" /> 值之一。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int64)">
      <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定的刻度数。</summary>
      <param name="ticks">一个日期和时间，自公历 0001 年 1 月 1 日 00:00:00.000 以来所经历的以 100 纳秒为间隔的间隔数来表示。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ticks" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)">
      <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定的计时周期数以及协调世界时 (UTC) 或本地时间。</summary>
      <param name="ticks">一个日期和时间，自公历 0001 年 1 月 1 日 00:00:00.000 以来所经历的以 100 纳秒为间隔的间隔数来表示。</param>
      <param name="kind">枚举值之一，指示 <paramref name="ticks" /> 是指定了本地时间、协调世界时 (UTC)，还是两者皆未指定。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ticks" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> 不是 <see cref="T:System.DateTimeKind" /> 值之一。</exception>
    </member>
    <member name="M:System.DateTime.Add(System.TimeSpan)">
      <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定 <see cref="T:System.TimeSpan" /> 的值加到此实例的值上。</summary>
      <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的时间间隔之和。</returns>
      <param name="value">正或负时间间隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddDays(System.Double)">
      <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的天数加到此实例的值上。</summary>
      <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的天数之和。</returns>
      <param name="value">由整数和小数部分组成的天数。 <paramref name="value" /> 参数可以是负数也可以是正数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddHours(System.Double)">
      <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的小时数加到此实例的值上。</summary>
      <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的小时数之和。</returns>
      <param name="value">由整数和小数部分组成的小时数。 <paramref name="value" /> 参数可以是负数也可以是正数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddMilliseconds(System.Double)">
      <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的毫秒数加到此实例的值上。</summary>
      <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的毫秒数之和。</returns>
      <param name="value">由整数和小数部分组成的毫秒数。 <paramref name="value" /> 参数可以是负数也可以是正数。 请注意，该值被舍入到最近的整数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddMinutes(System.Double)">
      <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的分钟数加到此实例的值上。</summary>
      <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的分钟数之和。</returns>
      <param name="value">由整数和小数部分组成的分钟数。 <paramref name="value" /> 参数可以是负数也可以是正数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddMonths(System.Int32)">
      <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的月数加到此实例的值上。</summary>
      <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="months" /> 所表示的时间之和。</returns>
      <param name="months">月份数。 <paramref name="months" /> 参数可以是负数也可以是正数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。 - 或 - <paramref name="months" /> 小于 -120,000 或大于 120,000。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddSeconds(System.Double)">
      <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的秒数加到此实例的值上。</summary>
      <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的秒数之和。</returns>
      <param name="value">由整数和小数部分组成的秒数。 <paramref name="value" /> 参数可以是负数也可以是正数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddTicks(System.Int64)">
      <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的计时周期数加到此实例的值上。</summary>
      <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的时间之和。</returns>
      <param name="value">以 100 纳秒为单位的计时周期数。 <paramref name="value" /> 参数可以是正数也可以是负数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddYears(System.Int32)">
      <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的年份数加到此实例的值上。</summary>
      <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的年份数之和。</returns>
      <param name="value">年份数。 <paramref name="value" /> 参数可以是负数也可以是正数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 或得到的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.Compare(System.DateTime,System.DateTime)">
      <summary>对两个 <see cref="T:System.DateTime" /> 的实例进行比较，并返回一个指示第一个实例是早于、等于还是晚于第二个实例的整数。</summary>
      <returns>有符号数字，指示 <paramref name="t1" /> 和 <paramref name="t2" /> 的相对值。 值类型 Condition 小于零 <paramref name="t1" /> 早于 <paramref name="t2" />。 零 <paramref name="t1" /> 与 <paramref name="t2" /> 相同。 大于零 <paramref name="t1" /> 晚于 <paramref name="t2" />。</returns>
      <param name="t1">要比较的第一个对象。</param>
      <param name="t2">要比较的第二个对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.CompareTo(System.DateTime)">
      <summary>将此实例的值与指定的 <see cref="T:System.DateTime" /> 值相比较，并返回一个整数，该整数指示此实例是早于、等于还是晚于指定的 <see cref="T:System.DateTime" /> 值。</summary>
      <returns>有符号数字，指示此实例和 <paramref name="value" /> 参数的相对值。 值 描述 小于零 此实例早于 <paramref name="value" />。 零 此实例与 <paramref name="value" /> 相同。 大于零 此实例晚于 <paramref name="value" />。</returns>
      <param name="value">要与当前实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.DateTime.Date">
      <summary>获取此实例的日期部分。</summary>
      <returns>一个新对象，其日期与此实例相同，时间值设置为午夜 12:00:00 (00:00:00)。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Day">
      <summary>获取此实例所表示的日期为该月中的第几天。</summary>
      <returns>日组成部分，表示为 1 和 31 之间的一个值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.DayOfWeek">
      <summary>获取此实例所表示的日期是星期几。</summary>
      <returns>一个枚举常量，指示此 <see cref="T:System.DateTime" /> 值是星期几。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.DayOfYear">
      <summary>获取此实例所表示的日期是该年中的第几天。</summary>
      <returns>该年中的第几天，表示为 1 和 366 之间的一个值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)">
      <summary>返回指定年和月中的天数。</summary>
      <returns>指定 <paramref name="year" /> 中 <paramref name="month" /> 的天数。 例如，如果 <paramref name="month" /> 等于 2（表示二月），则返回值为 28 或 29，具体取决于 <paramref name="year" /> 是否为闰年。</returns>
      <param name="year">年。</param>
      <param name="month">月（介于 1 到 12 之间的一个数字）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> 小于 1 或大于 12。 - 或 - <paramref name="year" /> 小于 1 或大于 9999。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.Equals(System.DateTime)">
      <summary>返回一个值，该值指示此实例的值是否与指定的 <see cref="T:System.DateTime" /> 实例的值相等。</summary>
      <returns>如果 <paramref name="value" /> 参数等于此实例的值，则为 true；否则为 false。</returns>
      <param name="value">要与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.Equals(System.DateTime,System.DateTime)">
      <summary>返回一个值，该值指示 <see cref="T:System.DateTime" /> 的两个实例是否具有同一个日期和时间值。</summary>
      <returns>如果两个值相等，则为 true；否则为 false。</returns>
      <param name="t1">要比较的第一个对象。</param>
      <param name="t2">要比较的第二个对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果 <paramref name="value" /> 是 <see cref="T:System.DateTime" /> 的实例并且等于此实例的值，则为 true；否则为 false。</returns>
      <param name="value">要与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.FromBinary(System.Int64)">
      <summary>反序列化一个 64 位二进制值，并重新创建序列化的 <see cref="T:System.DateTime" /> 初始对象。</summary>
      <returns>一个对象，它等效于由 <see cref="M:System.DateTime.ToBinary" /> 方法序列化的 <see cref="T:System.DateTime" /> 对象。</returns>
      <param name="dateData">64 位带符号整数，它对 2 位字段的 <see cref="P:System.DateTime.Kind" /> 属性以及 62 位字段的 <see cref="P:System.DateTime.Ticks" /> 属性进行了编码。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateData" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.FromFileTime(System.Int64)">
      <summary>将指定的 Windows 文件时间转换为等效的本地时间。</summary>
      <returns>一个表示本地时间的对象，等效于由 <paramref name="fileTime" /> 参数表示的日期和时间。</returns>
      <param name="fileTime">以计时周期表示的 Windows 文件时间。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fileTime" /> 小于零或表示大于 <see cref="F:System.DateTime.MaxValue" /> 的时间。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.FromFileTimeUtc(System.Int64)">
      <summary>将指定的 Windows 文件时间转换为等效的 UTC 时间。</summary>
      <returns>一个表示 UTC 时间的对象，等效于由 <paramref name="fileTime" /> 参数表示的日期和时间。</returns>
      <param name="fileTime">以计时周期表示的 Windows 文件时间。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fileTime" /> 小于零或表示大于 <see cref="F:System.DateTime.MaxValue" /> 的时间。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats">
      <summary>将此实例的值转换为标准日期和时间格式说明符支持的所有字符串表示形式。</summary>
      <returns>字符串数组，其中每个元素都表示此实例的以标准日期和时间格式说明符之一进行格式设置的一个值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.Char)">
      <summary>将此实例的值转换为指定的标准日期和时间格式说明符支持的所有字符串表示形式。</summary>
      <returns>字符串数组，其中每个元素都表示此实例的以 <paramref name="format" /> 标准日期和时间格式说明符之一进行格式设置的一个值。</returns>
      <param name="format">标准日期和时间格式字符串（请参见注解）。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的标准日期和时间格式说明符。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)">
      <summary>将此实例的值转换为指定的标准日期和时间格式说明符和区域性特定格式信息支持的所有字符串表示形式。</summary>
      <returns>字符串数组，其中每个元素都表示此实例的以标准日期和时间格式说明符之一进行格式设置的一个值。</returns>
      <param name="format">日期和时间格式的字符串（请参见注解）。</param>
      <param name="provider">一个对象，它提供有关此实例的区域性特定格式设置信息。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的标准日期和时间格式说明符。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)">
      <summary>将此实例的值转换为标准日期和时间格式说明符和指定的区域性特定格式信息支持的所有字符串表示形式。</summary>
      <returns>字符串数组，其中每个元素都表示此实例的以标准日期和时间格式说明符之一进行格式设置的一个值。</returns>
      <param name="provider">一个对象，它提供有关此实例的区域性特定格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.DateTime.Hour">
      <summary>获取此实例所表示日期的小时部分。</summary>
      <returns>小时组成部分，表示为 0 和 23 之间的一个值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.IsDaylightSavingTime">
      <summary>指示此 <see cref="T:System.DateTime" /> 实例是否在当前时区的夏时制范围内。</summary>
      <returns>如果 <see cref="P:System.DateTime.Kind" /> 为 <see cref="F:System.DateTimeKind.Local" /> 或 <see cref="F:System.DateTimeKind.Unspecified" /> 并且此 <see cref="T:System.DateTime" /> 实例的值在当前时区的夏时制范围以内，则为 true。 如果 <see cref="P:System.DateTime.Kind" /> 为 <see cref="F:System.DateTimeKind.Utc" />，则返回 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.IsLeapYear(System.Int32)">
      <summary>返回指定的年份是否为闰年的指示。</summary>
      <returns>如果 <paramref name="year" /> 为闰年，则为 true；否则为 false。</returns>
      <param name="year">四位数年份。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小于 1 或大于 9999。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Kind">
      <summary>获取一个值，该值指示由此实例表示的时间是基于本地时间、协调世界时 (UTC)，还是两者皆否。</summary>
      <returns>用于指示当前时间表示的含义的枚举值之一。 默认值为 <see cref="F:System.DateTimeKind.Unspecified" />。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.DateTime.MaxValue">
      <summary>表示 <see cref="T:System.DateTime" /> 的最大可能值。 此字段为只读。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Millisecond">
      <summary>获取此实例所表示日期的毫秒部分。</summary>
      <returns>毫秒组成部分，表示为 0 和 999 之间的一个值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Minute">
      <summary>获取此实例所表示日期的分钟部分。</summary>
      <returns>分钟组成部分，表示为 0 和 59 之间的一个值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.DateTime.MinValue">
      <summary>表示 <see cref="T:System.DateTime" /> 的最小可能值。 此字段为只读。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Month">
      <summary>获取此实例所表示日期的月份部分。</summary>
      <returns>月组成部分，表示为 1 和 12 之间的一个值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Now">
      <summary>获取一个 <see cref="T:System.DateTime" /> 对象，该对象设置为此计算机上的当前日期和时间，表示为本地时间。</summary>
      <returns>其值为当前日期和时间的对象。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)">
      <summary>将指定的时间间隔加到指定的日期和时间以生成新的日期和时间。</summary>
      <returns>一个对象，它是 <paramref name="d" /> 和 <paramref name="t" /> 值的和。</returns>
      <param name="d">要添加的日期和时间值。</param>
      <param name="t">待添加的时间间隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)">
      <summary>确定 <see cref="T:System.DateTime" /> 的两个指定的实例是否相等。</summary>
      <returns>如果 <paramref name="d1" /> 和 <paramref name="d2" /> 表示同一日期和时间，则为 true；否则为 false。</returns>
      <param name="d1">要比较的第一个对象。</param>
      <param name="d2">要比较的第二个对象。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)">
      <summary>确定指定的 <see cref="T:System.DateTime" /> 是否大于另一个指定的 <see cref="T:System.DateTime" />。</summary>
      <returns>如果 <paramref name="t1" /> 大于 <paramref name="t2" />，则为 true；否则为 false。</returns>
      <param name="t1">要比较的第一个对象。</param>
      <param name="t2">要比较的第二个对象。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)">
      <summary>确定指定的 <see cref="T:System.DateTime" /> 是否大于等于另一个指定的 <see cref="T:System.DateTime" />。</summary>
      <returns>如果 <paramref name="t1" /> 大于等于 <paramref name="t2" />，则为 true；否则为 false。</returns>
      <param name="t1">要比较的第一个对象。</param>
      <param name="t2">要比较的第二个对象。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)">
      <summary>确定 <see cref="T:System.DateTime" /> 的两个指定的实例是否不等。</summary>
      <returns>如果 <paramref name="d1" /> 和 <paramref name="d2" /> 不表示同一日期和时间，则为 true；否则为 false。</returns>
      <param name="d1">要比较的第一个对象。</param>
      <param name="d2">要比较的第二个对象。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)">
      <summary>确定指定的 <see cref="T:System.DateTime" /> 是否小于另一个指定的 <see cref="T:System.DateTime" />。</summary>
      <returns>如果 <paramref name="t1" /> 小于 <paramref name="t2" />，则为 true；否则为 false。</returns>
      <param name="t1">要比较的第一个对象。</param>
      <param name="t2">要比较的第二个对象。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)">
      <summary>确定指定的 <see cref="T:System.DateTime" /> 是否小于或等于另一个指定的 <see cref="T:System.DateTime" />。</summary>
      <returns>如果 <paramref name="t1" /> 小于等于 <paramref name="t2" />，则为 true；否则为 false。</returns>
      <param name="t1">要比较的第一个对象。</param>
      <param name="t2">要比较的第二个对象。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)">
      <summary>将指定的日期和时间与另一个指定的日期和时间相减，返回一个时间间隔。</summary>
      <returns>
        <paramref name="d1" /> 和 <paramref name="d2" /> 之间的时间间隔；即 <paramref name="d1" /> 减去 <paramref name="d2" />。</returns>
      <param name="d1">要从中减去的日期和时间值（被减数）。</param>
      <param name="d2">要减去的日期和时间值（减数）。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)">
      <summary>从指定的日期和时间减去指定的时间间隔，返回新的日期和时间。</summary>
      <returns>一个对象，其值为 <paramref name="d" /> 的值减去 <paramref name="t" /> 的值。</returns>
      <param name="d">要从其中减去的日期和时间值。</param>
      <param name="t">待减去的时间间隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.Parse(System.String)">
      <summary>将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。</summary>
      <returns>一个对象，它等效于 <paramref name="s" /> 中包含的日期和时间。</returns>
      <param name="s">包含要转换的日期和时间的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 中不包含有效的日期和时间的字符串表示形式。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。</summary>
      <returns>一个对象，它等效于 <paramref name="s" /> 中包含的日期和时间，由 <paramref name="provider" /> 指定。</returns>
      <param name="s">包含要转换的日期和时间的字符串。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 中不包含有效的日期和时间的字符串表示形式。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的区域性特定格式信息和格式设置样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。</summary>
      <returns>一个对象，它等效于 <paramref name="s" /> 中包含的日期和时间，由 <paramref name="provider" /> 和 <paramref name="styles" /> 指定。</returns>
      <param name="s">包含要转换的日期和时间的字符串。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="styles">枚举值的按位组合，用于指示 <paramref name="s" /> 成功执行分析操作所需的样式元素以及定义如何根据当前时区或当前日期解释已分析日期的样式元素。 一个用来指定的典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 中不包含有效的日期和时间的字符串表示形式。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 包含 <see cref="T:System.Globalization.DateTimeStyles" /> 值的无效组合。 例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。 字符串表示形式的格式必须与指定的格式完全匹配。</summary>
      <returns>一个对象，它等效于 <paramref name="s" /> 中包含的日期和时间，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
      <param name="s">包含要转换的日期和时间的字符串。</param>
      <param name="format">用于定义所需的 <paramref name="s" /> 格式的格式说明符。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 或 <paramref name="format" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 或 <paramref name="format" /> 是空字符串。 - 或 - <paramref name="s" /> 不包含与 <paramref name="format" /> 中指定的模式相对应的日期和时间。 - 或 - <paramref name="s" /> 中的小时组成部分和 AM/PM 指示符不一致。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的格式、区域性特定的格式信息和样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。 字符串表示形式的格式必须与指定的格式完全匹配，否则会引发异常。</summary>
      <returns>一个对象，它等效于 <paramref name="s" /> 中包含的日期和时间，由 <paramref name="format" />、<paramref name="provider" /> 和 <paramref name="style" /> 指定。</returns>
      <param name="s">包含要转换的日期和时间的字符串。</param>
      <param name="format">用于定义所需的 <paramref name="s" /> 格式的格式说明符。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="style">枚举值的按位组合，提供有关以下内容的附加信息：<paramref name="s" />、可能出现在 <paramref name="s" /> 中的样式元素或从 <paramref name="s" /> 到 <see cref="T:System.DateTime" /> 值的转换。 一个要指定的典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 或 <paramref name="format" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 或 <paramref name="format" /> 是空字符串。 - 或 - <paramref name="s" /> 不包含与 <paramref name="format" /> 中指定的模式相对应的日期和时间。 - 或 - <paramref name="s" /> 中的小时组成部分和 AM/PM 指示符不一致。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 包含无效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值组合。 例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的格式数组、区域性特定格式信息和样式，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。 字符串表示形式的格式必须至少与指定的格式之一完全匹配，否则会引发异常。</summary>
      <returns>一个对象，它等效于 <paramref name="s" /> 中包含的日期和时间，由 <paramref name="formats" />、<paramref name="provider" /> 和 <paramref name="style" /> 指定。</returns>
      <param name="s">包含要转换的一个或多个日期和时间的字符串。</param>
      <param name="formats">
        <paramref name="s" /> 的允许格式的数组。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式信息。</param>
      <param name="style">枚举值的一个按位组合，指示 <paramref name="s" /> 所允许的格式。 一个要指定的典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 或 <paramref name="formats" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 是空字符串。 - 或 - <paramref name="formats" /> 的一个元素是空字符串。 - 或 - <paramref name="s" /> 不包含与 <paramref name="formats" /> 中的任何元素对应的日期和时间。 - 或 - <paramref name="s" /> 中的小时组成部分和 AM/PM 指示符不一致。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 包含无效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值组合。 例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.DateTime.Second">
      <summary>获取此实例所表示日期的秒部分。</summary>
      <returns>秒组成部分，表示为 0 和 59 之间的一个值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)">
      <summary>创建新的 <see cref="T:System.DateTime" /> 对象，该对象具有与指定的 <see cref="T:System.DateTime" /> 相同的刻度数，但是根据指定的 <see cref="T:System.DateTimeKind" /> 值的指示，指定为本地时间或协调世界时 (UTC)，或者两者皆否。</summary>
      <returns>一个新对象，它具有与 <paramref name="value" /> 参数表示的对象相同的刻度数以及由 <paramref name="kind" /> 参数指定的 <see cref="T:System.DateTimeKind" /> 值。</returns>
      <param name="value">日期和时间。</param>
      <param name="kind">枚举值之一，该值指示新对象是表示本地时间、UTC，还是两者皆否。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.Subtract(System.DateTime)">
      <summary>从此实例中减去指定的日期和时间。</summary>
      <returns>一个时间间隔，它等于此实例所表示的日期和时间减去 <paramref name="value" /> 所表示的日期和时间。</returns>
      <param name="value">要减去的日期和时间值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">结果小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.Subtract(System.TimeSpan)">
      <summary>从此实例中减去指定持续时间。</summary>
      <returns>一个对象，它等于此实例所表示的日期和时间减去 <paramref name="value" /> 所表示的时间间隔。</returns>
      <param name="value">待减去的时间间隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">结果小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.System#IComparable#CompareTo(System.Object)">
      <summary>将实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号数字，指示此实例和 <paramref name="value" /> 的相对顺序。 值 描述 小于零 此实例按排序顺序在 <paramref name="value" /> 前面。 零 此实例与 <paramref name="value" /> 按排序顺序中出现的位置相同。 大于零 此实例按排序顺序在 <paramref name="value" /> 后面，或 <paramref name="value" /> 是 null。</returns>
      <param name="value">与此实例进行比较的 object，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.DateTime" />。</exception>
    </member>
    <member name="P:System.DateTime.Ticks">
      <summary>获取表示此实例的日期和时间的计时周期数。</summary>
      <returns>表示此实例的日期和时间的计时周期数。 该值介于 DateTime.MinValue.Ticks 和 DateTime.MaxValue.Ticks 之间。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.TimeOfDay">
      <summary>获取此实例的当天的时间。</summary>
      <returns>一个时间间隔，它表示当天自午夜以来已经过时间的部分。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ToBinary">
      <summary>将当前 <see cref="T:System.DateTime" /> 对象序列化为一个 64 位二进制值，该值随后可用于重新创建 <see cref="T:System.DateTime" /> 对象。</summary>
      <returns>64 位带符号整数，它对 <see cref="P:System.DateTime.Kind" /> 和 <see cref="P:System.DateTime.Ticks" /> 属性进行了编码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.DateTime.Today">
      <summary>获取当前日期。</summary>
      <returns>一个对象，设置为当天日期，其时间组成部分设置为 00:00:00。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ToFileTime">
      <summary>将当前 <see cref="T:System.DateTime" /> 对象的值转换为 Windows 文件时间。</summary>
      <returns>表示为 Windows 文件时间的当前 <see cref="T:System.DateTime" /> 对象的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的文件时间将表示协调世界时公元 1601 年 1 月 1 日午夜 12:00 之前的 日期和时间。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.ToFileTimeUtc">
      <summary>将当前 <see cref="T:System.DateTime" /> 对象的值转换为 Windows 文件时间。</summary>
      <returns>表示为 Windows 文件时间的当前 <see cref="T:System.DateTime" /> 对象的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的文件时间将表示协调世界时公元 1601 年 1 月 1 日午夜 12:00 之前的 日期和时间。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.ToLocalTime">
      <summary>将当前 <see cref="T:System.DateTime" /> 对象的值转换为本地时间。</summary>
      <returns>一个对象，其 <see cref="P:System.DateTime.Kind" /> 属性为 <see cref="F:System.DateTimeKind.Local" />，并且其值为等效于当前 <see cref="T:System.DateTime" /> 对象的值的本地时间；如果经转换的值过大以至于不能由 <see cref="T:System.DateTime" /> 对象表示，则为 <see cref="F:System.DateTime.MaxValue" />，或者，如果经转换的值过小以至于不能表示为 <see cref="T:System.DateTime" /> 对象，则为 <see cref="F:System.DateTime.MinValue" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.ToString">
      <summary>将当前 <see cref="T:System.DateTime" /> 对象的值转换为其等效的字符串表示形式。</summary>
      <returns>当前 <see cref="T:System.DateTime" /> 对象的值的字符串表示形式。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">当前区域性所使用的日历支持的日期范围之外的日期和时间。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息将当前 <see cref="T:System.DateTime" /> 对象的值转换为它的等效字符串表示形式。</summary>
      <returns>由 <paramref name="provider" /> 指定的当前 <see cref="T:System.DateTime" /> 对象的值的字符串表示形式。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">日期和时间处于由 <paramref name="provider" /> 使用的日历支持的日期范围之外。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ToString(System.String)">
      <summary>使用指定的格式将当前 <see cref="T:System.DateTime" /> 对象的值转换为它的等效字符串表示形式。</summary>
      <returns>当前 <see cref="T:System.DateTime" /> 对象的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <param name="format">标准或自定义日期和时间格式的字符串（请参见注解）。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 的长度是 1，并且它不是为 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 定义的格式说明符之一。 - 或 - <paramref name="format" /> 中不包含有效的自定义格式模式。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">当前区域性所使用的日历支持的日期范围之外的日期和时间。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息将当前 <see cref="T:System.DateTime" /> 对象的值转换为它的等效字符串表示形式。</summary>
      <returns>由 <paramref name="format" /> 和 <paramref name="provider" /> 指定的当前 <see cref="T:System.DateTime" /> 对象的值的字符串表示形式。</returns>
      <param name="format">标准或自定义日期和时间格式的字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 的长度是 1，并且它不是为 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 定义的格式说明符之一。 - 或 - <paramref name="format" /> 中不包含有效的自定义格式模式。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">日期和时间处于由 <paramref name="provider" /> 使用的日历支持的日期范围之外。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ToUniversalTime">
      <summary>将当前 <see cref="T:System.DateTime" /> 对象的值转换为协调世界时 (UTC)。</summary>
      <returns>一个对象，其 <see cref="P:System.DateTime.Kind" /> 属性为 <see cref="F:System.DateTimeKind.Utc" />，并且其值为等效于当前 <see cref="T:System.DateTime" /> 对象的值的 UTC；如果经转换的值过大以至于不能由 <see cref="T:System.DateTime" /> 对象表示，则为 <see cref="F:System.DateTime.MaxValue" />，或者，如果经转换的值过小以至于不能由 <see cref="T:System.DateTime" /> 对象表示，则为 <see cref="F:System.DateTime.MinValue" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.TryParse(System.String,System.DateTime@)">
      <summary>将日期和时间的指定字符串表示形式转换为其 <see cref="T:System.DateTime" /> 等效项，并返回一个指示转换是否成功的值。</summary>
      <returns>如果 <paramref name="s" /> 参数成功转换，则为 true；否则为 false。</returns>
      <param name="s">包含要转换的日期和时间的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中包含的日期和时间等效的 <see cref="T:System.DateTime" /> 值；如果转换失败，则为 <see cref="F:System.DateTime.MinValue" />。 如果 <paramref name="s" /> 参数为 null，是空字符串 ("") 或者不包含日期和时间的有效字符串表示形式，则转换失败。 该参数未经初始化即被传递。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>使用指定的区域性特定格式信息和格式设置样式，将日期和时间的指定字符串表示形式转换为其 <see cref="T:System.DateTime" /> 等效项，并返回一个指示转换是否成功的值。</summary>
      <returns>如果 <paramref name="s" /> 参数成功转换，则为 true；否则为 false。</returns>
      <param name="s">包含要转换的日期和时间的字符串。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="styles">枚举值的按位组合，该组合定义如何根据当前时区或当前日期解释已分析日期。 一个要指定的典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中包含的日期和时间等效的 <see cref="T:System.DateTime" /> 值；如果转换失败，则为 <see cref="F:System.DateTime.MinValue" />。 如果 <paramref name="s" /> 参数为 null，是空字符串 ("") 或者不包含日期和时间的有效字符串表示形式，则转换失败。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。 - 或 - <paramref name="styles" /> 包含 <see cref="T:System.Globalization.DateTimeStyles" /> 值的无效组合（例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />）。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="provider" /> 是一个非特定区域性并且无法在分析操作中使用。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>使用指定的格式、区域性特定的格式信息和样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。 字符串表示形式的格式必须与指定的格式完全匹配。 该方法返回一个指示转换是否成功的值。</summary>
      <returns>如果成功转换了 <paramref name="s" />，则为 true；否则为 false。</returns>
      <param name="s">包含要转换的日期和时间的字符串。</param>
      <param name="format">所需的 <paramref name="s" /> 格式。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="style">一个或多个枚举值的按位组合，指示 <paramref name="s" /> 允许使用的格式。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中包含的日期和时间等效的 <see cref="T:System.DateTime" /> 值；如果转换失败，则为 <see cref="F:System.DateTime.MinValue" />。 如果 <paramref name="s" /> 或 <paramref name="format" /> 参数为 null，或者为空字符串，或者未包含对应于 <paramref name="format" /> 中指定的模式的日期和时间，则转换失败。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。 - 或 - <paramref name="styles" /> 包含 <see cref="T:System.Globalization.DateTimeStyles" /> 值的无效组合（例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />）。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>使用指定的格式数组、区域性特定格式信息和样式，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。 字符串表示形式的格式必须至少与指定的格式之一完全匹配。 该方法返回一个指示转换是否成功的值。</summary>
      <returns>如果 <paramref name="s" /> 参数成功转换，则为 true；否则为 false。</returns>
      <param name="s">包含要转换的一个或多个日期和时间的字符串。</param>
      <param name="formats">
        <paramref name="s" /> 的允许格式的数组。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式信息。</param>
      <param name="style">枚举值的一个按位组合，指示 <paramref name="s" /> 所允许的格式。 一个用来指定的典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中包含的日期和时间等效的 <see cref="T:System.DateTime" /> 值；如果转换失败，则为 <see cref="F:System.DateTime.MinValue" />。 如果 <paramref name="s" /> 或 <paramref name="formats" /> 为 null，<paramref name="s" /> 或 <paramref name="formats" /> 的一个元素为空字符串，或者 <paramref name="s" /> 的格式与 <paramref name="formats" /> 中的格式模式所指定的格式都不完全匹配，则转换失败。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。 - 或 - <paramref name="styles" /> 包含 <see cref="T:System.Globalization.DateTimeStyles" /> 值的无效组合（例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />）。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.UtcNow">
      <summary>获取一个 <see cref="T:System.DateTime" /> 对象，该对象设置为此计算机上的当前日期和时间，表示为协调通用时间 (UTC)。</summary>
      <returns>其值为当前 UTC 日期和时间的对象。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Year">
      <summary>获取此实例所表示日期的年份部分。</summary>
      <returns>年份（介于 1 和 9999 之间）。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.DateTimeKind">
      <summary>指定 <see cref="T:System.DateTime" /> 对象是表示本地时间、协调通用时间 (UTC)，还是既不指定为本地时间，也不指定为 UTC。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.DateTimeKind.Local">
      <summary>表示的时间为本地时间。</summary>
    </member>
    <member name="F:System.DateTimeKind.Unspecified">
      <summary>表示的时间既未指定为本地时间，也未指定为协调通用时间 (UTC)。</summary>
    </member>
    <member name="F:System.DateTimeKind.Utc">
      <summary>表示的时间为 UTC。</summary>
    </member>
    <member name="T:System.DateTimeOffset">
      <summary>表示一个时间点，通常以相对于协调世界时 (UTC) 的日期和时间来表示。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.DateTime)">
      <summary>使用指定的 <see cref="T:System.DateTime" /> 值初始化 <see cref="T:System.DateTimeOffset" /> 结构的新实例。</summary>
      <param name="dateTime">日期和时间。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">通过应用偏移量所产生的协调世界时 (UTC) 的日期和时间早于 <see cref="F:System.DateTimeOffset.MinValue" />。 - 或 - 通过应用偏移量所产生的 UTC 日期和时间晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)">
      <summary>使用指定的 <see cref="T:System.DateTime" /> 值和偏移量初始化 <see cref="T:System.DateTimeOffset" /> 结构的新实例。</summary>
      <param name="dateTime">日期和时间。</param>
      <param name="offset">与协调世界时 (UTC) 之间的时间偏移量。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime.Kind" /> 等于 <see cref="F:System.DateTimeKind.Utc" />，<paramref name="offset" /> 不等于零。 - 或 - <paramref name="dateTime.Kind" /> 等于 <see cref="F:System.DateTimeKind.Local" />，<paramref name="offset" /> 不等于系统的本地时区的偏移量。 - 或 - 未采用整分钟数指定 <paramref name="offset" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 -14 小时或大于 14 小时。 - 或 - <see cref="P:System.DateTimeOffset.UtcDateTime" /> 小于 <see cref="F:System.DateTimeOffset.MinValue" /> 或大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
      <summary>使用指定的年、月、日、小时、分钟、秒、毫秒和偏移量初始化 <see cref="T:System.DateTimeOffset" /> 结构的新实例。</summary>
      <param name="year">年（1 到 9999）。</param>
      <param name="month">月（1 到 12）。</param>
      <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
      <param name="hour">小时（0 到 23）。</param>
      <param name="minute">分（0 到 59）。</param>
      <param name="second">秒（0 到 59）。</param>
      <param name="millisecond">毫秒（0 到 999）。</param>
      <param name="offset">与协调世界时 (UTC) 之间的时间偏移量。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 并不表示整分钟数。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小于 1 或大于 9999。 - 或 - <paramref name="month" /> 小于 1 或大于 12。 - 或 - <paramref name="day" /> 小于 1 或大于 <paramref name="month" /> 中的天数。 - 或 - <paramref name="hour" /> 小于零或大于 23。 - 或 - <paramref name="minute" /> 小于 0 或大于 59。 - 或 - <paramref name="second" /> 小于 0 或大于 59。 - 或 - <paramref name="millisecond" /> 小于 0 或大于 999。 - 或 - <paramref name="offset" /> 小于 -14 或大于 14。 - 或 - <see cref="P:System.DateTimeOffset.UtcDateTime" /> 属性早于 <see cref="F:System.DateTimeOffset.MinValue" /> 或晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
      <summary>使用指定的年、月、日、小时、分钟、秒和偏移量初始化 <see cref="T:System.DateTimeOffset" /> 结构的新实例。</summary>
      <param name="year">年（1 到 9999）。</param>
      <param name="month">月（1 到 12）。</param>
      <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
      <param name="hour">小时（0 到 23）。</param>
      <param name="minute">分（0 到 59）。</param>
      <param name="second">秒（0 到 59）。</param>
      <param name="offset">与协调世界时 (UTC) 之间的时间偏移量。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 并不表示整分钟数。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小于 1 或大于 9999。 - 或 - <paramref name="month" /> 小于 1 或大于 12。 - 或 - <paramref name="day" /> 小于 1 或大于 <paramref name="month" /> 中的天数。 - 或 - <paramref name="hour" /> 小于零或大于 23。 - 或 - <paramref name="minute" /> 小于 0 或大于 59。 - 或 - <paramref name="second" /> 小于 0 或大于 59。 - 或 - <paramref name="offset" /> 小于 -14 小时或大于 14 小时。 - 或 - <see cref="P:System.DateTimeOffset.UtcDateTime" /> 属性早于 <see cref="F:System.DateTimeOffset.MinValue" /> 或晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)">
      <summary>使用指定的计时周期数和偏移量初始化 <see cref="T:System.DateTimeOffset" /> 结构的新实例。</summary>
      <param name="ticks">一个日期和时间，以 0001 年 1 月 1 日午夜 12:00:00 以来所经历的以 100 纳秒为间隔的间隔数来表示。</param>
      <param name="offset">与协调世界时 (UTC) 之间的时间偏移量。</param>
      <exception cref="T:System.ArgumentException">未采用整分钟数指定 <paramref name="offset" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.DateTimeOffset.UtcDateTime" /> 属性早于 <see cref="F:System.DateTimeOffset.MinValue" /> 或晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。 - 或 - <paramref name="ticks" /> 小于 DateTimeOffset.MinValue.Ticks 或大于 DateTimeOffset.MaxValue.Ticks。 - 或 - <paramref name="Offset" /> 小于 -14 小时或大于 14 小时。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Add(System.TimeSpan)">
      <summary>将一个指定的时间间隔添加到 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
      <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="timeSpan" /> 所表示的时间间隔之和。</returns>
      <param name="timeSpan">一个 <see cref="T:System.TimeSpan" /> 对象，表示正时间间隔或负时间间隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。 - 或 - 所生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddDays(System.Double)">
      <summary>将由整数和小数部分组成的指定天数与当前的 <see cref="T:System.DateTimeOffset" /> 对象相加。</summary>
      <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="days" /> 所表示的天数之和。</returns>
      <param name="days">由整数和小数部分组成的天数。 此数值可以是负数也可以是正数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。 - 或 - 所生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddHours(System.Double)">
      <summary>将由整数和小数部分组成的指定小时数与当前的 <see cref="T:System.DateTimeOffset" /> 对象相加。</summary>
      <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="hours" /> 所表示的小时数之和。</returns>
      <param name="hours">由整数和小数部分组成的小时数。 此数值可以是负数也可以是正数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。 - 或 - 所生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMilliseconds(System.Double)">
      <summary>将指定的毫秒数与当前 <see cref="T:System.DateTimeOffset" /> 对象相加。</summary>
      <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="milliseconds" /> 所表示的整毫秒数之和。</returns>
      <param name="milliseconds">由整数和小数部分组成的毫秒数。 此数值可以是负数也可以是正数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。 - 或 - 所生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMinutes(System.Double)">
      <summary>将由整数和小数部分组成的指定分钟数与当前的 <see cref="T:System.DateTimeOffset" /> 对象相加。</summary>
      <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="minutes" /> 所表示的分钟数之和。</returns>
      <param name="minutes">由整数和小数部分组成的分钟数。 此数值可以是负数也可以是正数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。 - 或 - 所生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMonths(System.Int32)">
      <summary>将指定的月数与当前 <see cref="T:System.DateTimeOffset" /> 对象相加。</summary>
      <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="months" /> 所表示的月份数之和。</returns>
      <param name="months">整月份数。 此数值可以是负数也可以是正数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。 - 或 - 所生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddSeconds(System.Double)">
      <summary>将由整数和小数部分组成的指定秒数与当前的 <see cref="T:System.DateTimeOffset" /> 对象相加。</summary>
      <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="seconds" /> 所表示的秒数之和。</returns>
      <param name="seconds">由整数和小数部分组成的秒数。 此数值可以是负数也可以是正数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。 - 或 - 所生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddTicks(System.Int64)">
      <summary>将指定的计时周期数与当前 <see cref="T:System.DateTimeOffset" /> 对象相加。</summary>
      <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="ticks" /> 所表示的计时周期数之和。</returns>
      <param name="ticks">以 100 纳秒为单位的计时周期数。 此数值可以是负数也可以是正数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。 - 或 - 所生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddYears(System.Int32)">
      <summary>将指定的年数与当前 <see cref="T:System.DateTimeOffset" /> 对象相加。</summary>
      <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="years" /> 所表示的年数之和。</returns>
      <param name="years">年份数。 此数值可以是负数也可以是正数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。 - 或 - 所生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>对两个 <see cref="T:System.DateTimeOffset" /> 对象进行比较，并指明第一个对象是早于、等于还是晚于第二个对象。</summary>
      <returns>一个有符号的整数，它表示 <paramref name="first" /> 参数的值是早于、晚于还是等于 <paramref name="second" /> 参数的值，如下表所示。 返回值 含义 小于零 <paramref name="first" /> 早于 <paramref name="second" />。 零 <paramref name="first" /> 等于 <paramref name="second" />。 大于零 <paramref name="first" /> 晚于 <paramref name="second" />。</returns>
      <param name="first">要比较的第一个对象。</param>
      <param name="second">要比较的第二个对象。</param>
    </member>
    <member name="M:System.DateTimeOffset.CompareTo(System.DateTimeOffset)">
      <summary>将当前的 <see cref="T:System.DateTimeOffset" /> 对象与指定的 <see cref="T:System.DateTimeOffset" /> 对象进行比较，并指明当前对象是早于、等于还是晚于另一个 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
      <returns>一个有符号的整数，它指明了当前的 <see cref="T:System.DateTimeOffset" /> 对象与 <paramref name="other" /> 之间的关系，如下表所示。 返回值 描述 小于零 当前的 <see cref="T:System.DateTimeOffset" /> 对象早于 <paramref name="other" />。 零 当前的 <see cref="T:System.DateTimeOffset" /> 对象与 <paramref name="other" /> 相同。 大于零。 当前的 <see cref="T:System.DateTimeOffset" /> 对象晚于 <paramref name="other" />。</returns>
      <param name="other">将与当前的 <see cref="T:System.DateTimeOffset" /> 对象进行比较的对象。</param>
    </member>
    <member name="P:System.DateTimeOffset.Date">
      <summary>获取 <see cref="T:System.DateTime" /> 值，该值表示当前 <see cref="T:System.DateTimeOffset" /> 对象的日期组成部分。</summary>
      <returns>一个 <see cref="T:System.DateTime" /> 值，该值表示当前 <see cref="T:System.DateTimeOffset" /> 对象的日期组成部分。</returns>
    </member>
    <member name="P:System.DateTimeOffset.DateTime">
      <summary>获取 <see cref="T:System.DateTime" /> 值，该值表示当前 <see cref="T:System.DateTimeOffset" /> 对象的日期和时间。</summary>
      <returns>当前的 <see cref="T:System.DateTimeOffset" /> 对象的日期和时间。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Day">
      <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的月中的某一天。</summary>
      <returns>当前 <see cref="T:System.DateTimeOffset" /> 对象的日组成部分，以 1 到 31 之间的一个值来表示。</returns>
    </member>
    <member name="P:System.DateTimeOffset.DayOfWeek">
      <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的周中的某一天。</summary>
      <returns>用于指示当前 <see cref="T:System.DateTimeOffset" /> 对象的星期几的枚举值之一。</returns>
    </member>
    <member name="P:System.DateTimeOffset.DayOfYear">
      <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的年中的某一天。</summary>
      <returns>当前 <see cref="T:System.DateTimeOffset" /> 对象的年中的某一天，以 1 到 366 之间的一个值来表示。</returns>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.DateTimeOffset)">
      <summary>确定当前的 <see cref="T:System.DateTimeOffset" /> 对象是否与指定的 <see cref="T:System.DateTimeOffset" /> 对象表示同一时间点。</summary>
      <returns>如果两个 <see cref="T:System.DateTimeOffset" /> 对象具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 true；否则为 false。</returns>
      <param name="other">要与当前 <see cref="T:System.DateTimeOffset" /> 对象进行比较的对象。</param>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>确定两个指定的 <see cref="T:System.DateTimeOffset" /> 对象是否表示同一时间点。</summary>
      <returns>如果这两个 <see cref="T:System.DateTimeOffset" /> 对象具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 true；否则为 false。</returns>
      <param name="first">要比较的第一个对象。</param>
      <param name="second">要比较的第二个对象。</param>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.Object)">
      <summary>确定 <see cref="T:System.DateTimeOffset" /> 对象是否与指定的对象表示同一时间点。</summary>
      <returns>如果 <paramref name="obj" /> 参数是 <see cref="T:System.DateTimeOffset" /> 对象，并且与当前的 <see cref="T:System.DateTimeOffset" /> 对象表示同一时间点，则为 true；否则为 false。</returns>
      <param name="obj">要与当前 <see cref="T:System.DateTimeOffset" /> 对象进行比较的对象。</param>
    </member>
    <member name="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)">
      <summary>确定当前的 <see cref="T:System.DateTimeOffset" /> 对象与指定的 <see cref="T:System.DateTimeOffset" /> 对象是否表示同一时间并且是否具有相同的偏移量。</summary>
      <returns>如果当前的 <see cref="T:System.DateTimeOffset" /> 对象与 <paramref name="other" /> 具有相同的日期和时间值以及相同的 <see cref="P:System.DateTimeOffset.Offset" /> 值，则为 true；否则为 false。</returns>
      <param name="other">要与当前 <see cref="T:System.DateTimeOffset" /> 对象进行比较的对象。</param>
    </member>
    <member name="M:System.DateTimeOffset.FromFileTime(System.Int64)">
      <summary>将指定的 Windows 文件时间转换为等效的本地时间。</summary>
      <returns>一个对象，表示偏移量被设置为本地时间偏移量的 <paramref name="fileTime" /> 的日期和时间。</returns>
      <param name="fileTime">以计时周期表示的 Windows 文件时间。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="filetime" /> 小于零。 - 或 - <paramref name="filetime" /> 大于 DateTimeOffset.MaxValue.Ticks。</exception>
    </member>
    <member name="M:System.DateTimeOffset.GetHashCode">
      <summary>返回当前 <see cref="T:System.DateTimeOffset" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Hour">
      <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的时间的小时组成部分。</summary>
      <returns>当前 <see cref="T:System.DateTimeOffset" /> 对象的小时组成部分。 此属性使用 24 小时制；值介于 0 到 23 之间。</returns>
    </member>
    <member name="P:System.DateTimeOffset.LocalDateTime">
      <summary>获取 <see cref="T:System.DateTime" /> 值，该值表示当前 <see cref="T:System.DateTimeOffset" /> 对象的本地日期和时间。</summary>
      <returns>当前的 <see cref="T:System.DateTimeOffset" /> 对象的本地日期和时间。</returns>
    </member>
    <member name="F:System.DateTimeOffset.MaxValue">
      <summary>表示 <see cref="T:System.DateTimeOffset" /> 的最大可能值。 此字段为只读。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="F:System.DateTime.MaxValue" /> 位于当前或指定区域性的默认日历的范围之外。</exception>
    </member>
    <member name="P:System.DateTimeOffset.Millisecond">
      <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的时间的毫秒组成部分。</summary>
      <returns>当前 <see cref="T:System.DateTimeOffset" /> 对象的毫秒组成部分，以 0 到 999 之间的一个整数来表示。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Minute">
      <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的时间的分钟组成部分。</summary>
      <returns>当前 <see cref="T:System.DateTimeOffset" /> 对象的分钟组成部分，以 0 到 59 之间的一个整数来表示。</returns>
    </member>
    <member name="F:System.DateTimeOffset.MinValue">
      <summary>表示可能的最早 <see cref="T:System.DateTimeOffset" /> 值。 此字段为只读。</summary>
    </member>
    <member name="P:System.DateTimeOffset.Month">
      <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期的月份组成部分。</summary>
      <returns>当前 <see cref="T:System.DateTimeOffset" /> 对象的月份组成部分，以 1 到 12 之间的一个整数来表示。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Now">
      <summary>获取一个 <see cref="T:System.DateTimeOffset" /> 对象，该对象设置为当前计算机上的当前日期和时间，偏移量设置为本地时间与协调世界时 (UTC) 之间的偏移量。</summary>
      <returns>一个 <see cref="T:System.DateTimeOffset" /> 对象，其日期和时间为当前的本地时间，其偏移量为本地时区与协调世界时 (UTC) 之间的偏移量。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Offset">
      <summary>获取与协调世界时 (UTC) 之间的时间偏移量。</summary>
      <returns>当前的 <see cref="T:System.DateTimeOffset" /> 对象的时间值与协调世界时 (UTC) 之差。</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)">
      <summary>将指定的时间间隔与具有指定的日期和时间的 <see cref="T:System.DateTimeOffset" /> 对象相加，产生一个具有新的日期和时间的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
      <returns>一个对象，其值为 <paramref name="dateTimeTz" /> 与 <paramref name="timeSpan" /> 的值之和。</returns>
      <param name="dateTimeOffset">要向其加上时间间隔的对象。</param>
      <param name="timeSpan">待添加的时间间隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。 - 或 - 所生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>确定两个指定的 <see cref="T:System.DateTimeOffset" /> 对象是否表示同一时间点。</summary>
      <returns>如果两个 <see cref="T:System.DateTimeOffset" /> 对象具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>确定一个指定的 <see cref="T:System.DateTimeOffset" /> 对象是否大于（或晚于）另一个指定的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
      <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值晚于 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>确定一个指定的 <see cref="T:System.DateTimeOffset" /> 对象是大于还是等于另一个指定的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
      <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值等于或晚于 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset">
      <summary>定义从 <see cref="T:System.DateTime" /> 对象到 <see cref="T:System.DateTimeOffset" /> 对象的隐式转换。</summary>
      <returns>被转换的对象。</returns>
      <param name="dateTime">要转换的对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">通过应用偏移量所产生的协调世界时 (UTC) 的日期和时间早于 <see cref="F:System.DateTimeOffset.MinValue" />。 - 或 - 通过应用偏移量所产生的 UTC 日期和时间晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>确定两个指定的 <see cref="T:System.DateTimeOffset" /> 对象是否表示不同的时间点。</summary>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 不具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>确定一个指定的 <see cref="T:System.DateTimeOffset" /> 对象是否小于另一个指定的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
      <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值早于 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>确定一个指定的 <see cref="T:System.DateTimeOffset" /> 对象是否小于另一个指定的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
      <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值早于 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>从一个 <see cref="T:System.DateTimeOffset" /> 对象中减去另一个对象并生成时间间隔。</summary>
      <returns>一个表示 <paramref name="left" /> 与 <paramref name="right" /> 之差的对象。</returns>
      <param name="left">被减数。</param>
      <param name="right">减数。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)">
      <summary>从指定的日期和时间减去指定的时间间隔，并生成新的日期和时间。</summary>
      <returns>一个对象，它等于 <paramref name="dateTimeOffset" /> 减 <paramref name="timeSpan" /> 的值。</returns>
      <param name="dateTimeOffset">要从其减去的日期和时间对象。</param>
      <param name="timeSpan">待减去的时间间隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" /> 或大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String)">
      <summary>将日期、时间和偏移量的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。</summary>
      <returns>一个对象，它等效于 <paramref name="input" /> 中包含的日期和时间。</returns>
      <param name="input">包含要转换的日期和时间的字符串。</param>
      <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 不包含日期和时间的有效字符串表示形式。 - 或 - <paramref name="input" /> 包含不带日期或时间的偏移量值的字符串表示形式。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。</summary>
      <returns>一个对象，它等效于 <paramref name="input" /> 中包含的日期和时间，由 <paramref name="formatProvider" /> 指定。</returns>
      <param name="input">包含要转换的日期和时间的字符串。</param>
      <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定的格式信息。</param>
      <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 不包含日期和时间的有效字符串表示形式。 - 或 - <paramref name="input" /> 包含不带日期或时间的偏移量值的字符串表示形式。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的区域性特定格式信息和格式设置样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。</summary>
      <returns>一个对象，它等效于 <paramref name="input" /> 中包含的日期和时间，由 <paramref name="formatProvider" /> 和 <paramref name="styles" /> 指定。</returns>
      <param name="input">包含要转换的日期和时间的字符串。</param>
      <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定的格式信息。</param>
      <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。 一个要指定的典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。 - 或 - <paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。 - 或 - <paramref name="styles" /> 包括不受支持的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。 - 或 - <paramref name="styles" /> 包括不能在一起使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 不包含日期和时间的有效字符串表示形式。 - 或 - <paramref name="input" /> 包含不带日期或时间的偏移量值的字符串表示形式。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。 字符串表示形式的格式必须与指定的格式完全匹配。</summary>
      <returns>一个对象，它等效于 <paramref name="input" /> 中包含的日期和时间，由 <paramref name="format" /> 和 <paramref name="formatProvider" /> 指定。</returns>
      <param name="input">包含要转换的日期和时间的字符串。</param>
      <param name="format">用于定义所需的 <paramref name="input" /> 格式的格式说明符。</param>
      <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。 - 或 - <paramref name="format" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 为空字符串 ("")。 - 或 - <paramref name="input" /> 不包含日期和时间的有效字符串表示形式。 - 或 - <paramref name="format" /> 是空字符串。 - 或 - <paramref name="input" /> 中的小时组成部分和 AM/PM 指示符不一致。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的格式、区域性特定格式信息和样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。 字符串表示形式的格式必须与指定的格式完全匹配。</summary>
      <returns>一个对象，它等效于 <paramref name="input" /> 参数中包含的日期和时间，由 <paramref name="format" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 参数指定。</returns>
      <param name="input">包含要转换的日期和时间的字符串。</param>
      <param name="format">用于定义所需的 <paramref name="input" /> 格式的格式说明符。</param>
      <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
      <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。</param>
      <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。 - 或 - <paramref name="styles" /> 参数包括不受支持的值。 - 或 - <paramref name="styles" /> 参数包含不能在一起使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。 - 或 - <paramref name="format" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 为空字符串 ("")。 - 或 - <paramref name="input" /> 不包含日期和时间的有效字符串表示形式。 - 或 - <paramref name="format" /> 是空字符串。 - 或 - <paramref name="input" /> 中的小时组成部分和 AM/PM 指示符不一致。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的格式、区域性特定格式信息和样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。 字符串表示形式的格式必须与一种指定的格式完全匹配。</summary>
      <returns>一个对象，它等效于 <paramref name="input" /> 参数中包含的日期和时间，由 <paramref name="formats" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 参数指定。</returns>
      <param name="input">包含要转换的日期和时间的字符串。</param>
      <param name="formats">一个由格式说明符组成的数组，格式说明符用于定义 <paramref name="input" /> 的所需格式。</param>
      <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
      <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。</param>
      <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。 - 或 - <paramref name="styles" /> 包括不受支持的值。 - 或 - <paramref name="styles" /> 参数包含不能在一起使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 为空字符串 ("")。 - 或 - <paramref name="input" /> 不包含日期和时间的有效字符串表示形式。 - 或 - <paramref name="formats" /> 的元素不包含有效的格式说明符。 - 或 - <paramref name="input" /> 中的小时组成部分和 AM/PM 指示符不一致。</exception>
    </member>
    <member name="P:System.DateTimeOffset.Second">
      <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的时钟时间的秒组成部分。</summary>
      <returns>
        <see cref="T:System.DateTimeOffset" /> 对象的秒组成部分，以 0 到 59 之间的一个整数值来表示。</returns>
    </member>
    <member name="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)">
      <summary>从当前的 <see cref="T:System.DateTimeOffset" /> 对象中减去表示特定日期和时间的 <see cref="T:System.DateTimeOffset" /> 值。</summary>
      <returns>一个指定两个 <see cref="T:System.DateTimeOffset" /> 对象之间的间隔的对象。</returns>
      <param name="value">一个对象，表示要减去的值。</param>
    </member>
    <member name="M:System.DateTimeOffset.Subtract(System.TimeSpan)">
      <summary>从当前的 <see cref="T:System.DateTimeOffset" /> 对象中减去指定的时间间隔。</summary>
      <returns>一个对象，它等于当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间减去 <paramref name="value" /> 所表示的时间间隔。</returns>
      <param name="value">待减去的时间间隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。 - 或 - 所生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.System#IComparable#CompareTo(System.Object)">
      <summary>将当前 <see cref="T:System.DateTimeOffset" /> 对象的值与相同类型的另一个对象进行比较。</summary>
      <returns>一个 32 位带符号整数，它指示当前的 <see cref="T:System.DateTimeOffset" /> 对象是小于、等于还是大于 <paramref name="obj" />。 此方法的返回值的说明如下： 返回值 描述 小于零 当前的 <see cref="T:System.DateTimeOffset" /> 对象小于（早于）<paramref name="obj" />。 零 当前的 <see cref="T:System.DateTimeOffset" /> 对象与 <paramref name="obj" /> 相等（表示同一时间点）。 大于零 当前的 <see cref="T:System.DateTimeOffset" /> 对象大于（晚于）<paramref name="obj" />。</returns>
      <param name="obj">与当前 <see cref="T:System.DateTimeOffset" /> 对象进行比较的对象。</param>
    </member>
    <member name="P:System.DateTimeOffset.Ticks">
      <summary>获取计时周期数，此计时周期数表示时钟时间中当前 <see cref="T:System.DateTimeOffset" /> 对象的日期和时间。</summary>
      <returns>
        <see cref="T:System.DateTimeOffset" /> 对象的时钟时间中的计时周期数。</returns>
    </member>
    <member name="P:System.DateTimeOffset.TimeOfDay">
      <summary>获取当前 <see cref="T:System.DateTimeOffset" /> 对象的日时。</summary>
      <returns>表示当前日期自午夜以来的时间间隔。</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToFileTime">
      <summary>将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为 Windows 文件时间。</summary>
      <returns>用 Windows 文件时间来表示的当前 <see cref="T:System.DateTimeOffset" /> 对象的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的文件时间将表示协调世界时 (UTC) 公元 1601 年 1 月 1 日午夜之前的日期和时间 协调世界时 (UTC)。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToLocalTime">
      <summary>将当前的 <see cref="T:System.DateTimeOffset" /> 对象转换为表示本地时间的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
      <returns>一个对象，表示当前的 <see cref="T:System.DateTimeOffset" /> 对象的日期和时间，已转换为本地时间。</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToOffset(System.TimeSpan)">
      <summary>将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为偏移量值所指定的日期和时间。</summary>
      <returns>一个对象，它等于原始的 <see cref="T:System.DateTimeOffset" /> 对象（也就是说，它们的 <see cref="M:System.DateTimeOffset.ToUniversalTime" /> 方法返回的时间点相同），但其 <see cref="P:System.DateTimeOffset.Offset" /> 属性设置为 <paramref name="offset" />。</returns>
      <param name="offset">
        <see cref="T:System.DateTimeOffset" /> 值所转换成的偏移量。</param>
      <exception cref="T:System.ArgumentException">所生成的 <see cref="T:System.DateTimeOffset" /> 对象的值 <see cref="P:System.DateTimeOffset.DateTime" /> 值早于 <see cref="F:System.DateTimeOffset.MinValue" />。 - 或 - 所生成的 <see cref="T:System.DateTimeOffset" /> 对象的 <see cref="P:System.DateTimeOffset.DateTime" /> 值晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 -14 小时。 - 或 - <paramref name="offset" /> 大于 14 小时。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString">
      <summary>将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为其等效的字符串表示形式。</summary>
      <returns>一个 <see cref="T:System.DateTimeOffset" /> 对象的字符串表示形式，并在字符串末尾追加了偏移量。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">当前区域性所使用的日历支持的日期范围之外的日期和时间。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为它的等效字符串表示形式。</summary>
      <returns>由 <paramref name="formatProvider" /> 指定的当前 <see cref="T:System.DateTimeOffset" /> 对象的值的字符串表示形式。</returns>
      <param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">日期和时间处于由 <paramref name="formatProvider" /> 使用的日历支持的日期范围之外。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.String)">
      <summary>使用指定的格式将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为它的等效字符串表示形式。</summary>
      <returns>由 <paramref name="format" /> 指定的当前 <see cref="T:System.DateTimeOffset" /> 对象的值的字符串表示形式。</returns>
      <param name="format">格式字符串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 的长度是 1，并且它不是为 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 定义的标准格式说明符之一。 - 或 - <paramref name="format" /> 中不包含有效的自定义格式模式。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">当前区域性所使用的日历支持的日期范围之外的日期和时间。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为它的等效字符串表示形式。</summary>
      <returns>由 <paramref name="format" /> 和 <paramref name="provider" /> 指定的当前 <see cref="T:System.DateTimeOffset" /> 对象的值的字符串表示形式。</returns>
      <param name="format">格式字符串。</param>
      <param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 的长度是 1，并且它不是为 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 定义的标准格式说明符之一。 - 或 - <paramref name="format" /> 中不包含有效的自定义格式模式。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">日期和时间处于由 <paramref name="formatProvider" /> 使用的日历支持的日期范围之外。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToUniversalTime">
      <summary>将当前的 <see cref="T:System.DateTimeOffset" /> 对象转换为一个表示协调世界时 (UTC) 的 <see cref="T:System.DateTimeOffset" /> 值。</summary>
      <returns>一个对象，它表示转换为协调世界时 (UTC) 的当前 <see cref="T:System.DateTimeOffset" /> 对象的日期和时间。</returns>
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)">
      <summary>尝试将日期和时间的指定字符串表示形式转换为它的等效 <see cref="T:System.DateTimeOffset" />，并返回一个指示转换是否成功的值。</summary>
      <returns>如果 <paramref name="input" /> 参数成功转换，则为 true；否则为 false。</returns>
      <param name="input">包含要转换的日期和时间的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input" /> 的日期和时间等效的 <see cref="T:System.DateTimeOffset" />；如果转换失败，则包含 <see cref="F:System.DateTimeOffset.MinValue" />。 如果 <paramref name="input" /> 参数为 null，或者不包含日期和时间的有效字符串表示形式，则转换失败。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>尝试将日期和时间的指定字符串表示形式转换为它的等效 <see cref="T:System.DateTimeOffset" />，并返回一个指示转换是否成功的值。</summary>
      <returns>如果 <paramref name="input" /> 参数成功转换，则为 true；否则为 false。</returns>
      <param name="input">包含要转换的日期和时间的字符串。</param>
      <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定的格式设置信息。</param>
      <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input" /> 的日期和时间等效的 <see cref="T:System.DateTimeOffset" /> 值，如果转换失败，则为 <see cref="F:System.DateTimeOffset.MinValue" />。 如果 <paramref name="input" /> 参数为 null，或者不包含日期和时间的有效字符串表示形式，则转换失败。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 包括未定义的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。 - 或 - 不支持 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />。 - 或 - <paramref name="styles" /> 包括相互排斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>使用指定的格式、区域性特定格式信息和样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。 字符串表示形式的格式必须与指定的格式完全匹配。</summary>
      <returns>如果 <paramref name="input" /> 参数成功转换，则为 true；否则为 false。</returns>
      <param name="input">包含要转换的日期和时间的字符串。</param>
      <param name="format">用于定义所需的 <paramref name="input" /> 格式的格式说明符。</param>
      <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
      <param name="styles">枚举值的按位组合，用于指示输入的允许格式。 一个要指定的典型值为 None。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input" /> 的日期和时间等效的 <see cref="T:System.DateTimeOffset" />；如果转换失败，则包含 <see cref="F:System.DateTimeOffset.MinValue" />。 如果 <paramref name="input" /> 参数为 null，或者该参数不包含 <paramref name="format" /> 和 <paramref name="provider" /> 所定义的所需格式的日期和时间的有效字符串表示形式，则转换失败。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 包括未定义的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。 - 或 - 不支持 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />。 - 或 - <paramref name="styles" /> 包括相互排斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>使用指定的格式数组、区域性特定格式信息和样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。 字符串表示形式的格式必须与一种指定的格式完全匹配。</summary>
      <returns>如果 <paramref name="input" /> 参数成功转换，则为 true；否则为 false。</returns>
      <param name="input">包含要转换的日期和时间的字符串。</param>
      <param name="formats">一个用于定义 <paramref name="input" /> 的所需格式的数组。</param>
      <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
      <param name="styles">枚举值的按位组合，用于指示输入的允许格式。 一个要指定的典型值为 None。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input" /> 的日期和时间等效的 <see cref="T:System.DateTimeOffset" />；如果转换失败，则包含 <see cref="F:System.DateTimeOffset.MinValue" />。 如果 <paramref name="input" /> 不包含日期和时间的有效字符串表示形式，或者不包含 <paramref name="format" /> 所定义的所需格式的日期和时间，或者 <paramref name="formats" /> 为 null，则转换失败。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 包括未定义的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。 - 或 - 不支持 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />。 - 或 - <paramref name="styles" /> 包括相互排斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
    </member>
    <member name="P:System.DateTimeOffset.UtcDateTime">
      <summary>获取一个 <see cref="T:System.DateTime" /> 值，该值表示当前 <see cref="T:System.DateTimeOffset" /> 对象的协调世界时 (UTC) 日期和时间。</summary>
      <returns>当前 <see cref="T:System.DateTimeOffset" /> 对象的协调世界时 (UTC) 日期和时间。</returns>
    </member>
    <member name="P:System.DateTimeOffset.UtcNow">
      <summary>获取一个 <see cref="T:System.DateTimeOffset" /> 对象，其日期和时间设置为当前的协调世界时 (UTC) 日期和时间，其偏移量为 <see cref="F:System.TimeSpan.Zero" />。</summary>
      <returns>一个对象，其日期和时间为当前的协调世界时 (UTC)，其偏移量为 <see cref="F:System.TimeSpan.Zero" />。</returns>
    </member>
    <member name="P:System.DateTimeOffset.UtcTicks">
      <summary>获取表示当前 <see cref="T:System.DateTimeOffset" /> 对象的协调世界时 (UTC) 日期和时间的计时周期数。</summary>
      <returns>
        <see cref="T:System.DateTimeOffset" /> 对象的协调世界时 (UTC) 中的计时周期数。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Year">
      <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期的年份组成部分。</summary>
      <returns>当前 <see cref="T:System.DateTimeOffset" /> 对象的年份组成部分，以 0 到 9999 之间的一个整数值来表示。</returns>
    </member>
    <member name="T:System.DayOfWeek">
      <summary>指定一周的某天。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.DayOfWeek.Friday">
      <summary>表示星期五。</summary>
    </member>
    <member name="F:System.DayOfWeek.Monday">
      <summary>表示星期一。</summary>
    </member>
    <member name="F:System.DayOfWeek.Saturday">
      <summary>表示星期六。</summary>
    </member>
    <member name="F:System.DayOfWeek.Sunday">
      <summary>表示星期日。</summary>
    </member>
    <member name="F:System.DayOfWeek.Thursday">
      <summary>表示星期四。</summary>
    </member>
    <member name="F:System.DayOfWeek.Tuesday">
      <summary>表示星期二。</summary>
    </member>
    <member name="F:System.DayOfWeek.Wednesday">
      <summary>表示星期三。</summary>
    </member>
    <member name="T:System.Decimal">
      <summary>表示十进制数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.#ctor(System.Double)">
      <summary>将 <see cref="T:System.Decimal" /> 的新实例初始化为指定的双精度浮点数的值。</summary>
      <param name="value">要表示成 <see cref="T:System.Decimal" /> 的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Decimal.MaxValue" /> 或小于 <see cref="F:System.Decimal.MinValue" />。 - 或 - <paramref name="value" /> 是 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" />。</exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32)">
      <summary>将 <see cref="T:System.Decimal" /> 的新实例初始化为指定的 32 位有符号整数值。</summary>
      <param name="value">要表示成 <see cref="T:System.Decimal" /> 的值。</param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte)">
      <summary>用指定实例构成部分的参数来初始化 <see cref="T:System.Decimal" /> 的新实例。</summary>
      <param name="lo">96 位整数的低 32 位。</param>
      <param name="mid">96 位整数的中间 32 位。</param>
      <param name="hi">96 位整数的高 32 位。</param>
      <param name="isNegative">数字的符号；1 为负，0 为正。</param>
      <param name="scale">10 的指数（0 到 28 之间）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scale" /> 大于 28。</exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32[])">
      <summary>将 <see cref="T:System.Decimal" /> 的新实例初始化为以二进制表示的、包含在指定数组中的十进制值。</summary>
      <param name="bits">包含十进制值表示形式的 32 位有符号整数的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bits" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bits" /> 的长度不是 4。 - 或 - <paramref name="bits" /> 中十进制值的表示形式无效。</exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int64)">
      <summary>将 <see cref="T:System.Decimal" /> 的新实例初始化为指定的 64 位有符号整数值。</summary>
      <param name="value">要表示成 <see cref="T:System.Decimal" /> 的值。</param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Single)">
      <summary>将 <see cref="T:System.Decimal" /> 的新实例初始化为指定单精度浮点数字的值。</summary>
      <param name="value">要表示成 <see cref="T:System.Decimal" /> 的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Decimal.MaxValue" /> 或小于 <see cref="F:System.Decimal.MinValue" />。 - 或 - <paramref name="value" /> 是 <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.PositiveInfinity" /> 或 <see cref="F:System.Single.NegativeInfinity" />。</exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt32)">
      <summary>将 <see cref="T:System.Decimal" /> 的新实例初始化为指定的 32 位无符号整数值。</summary>
      <param name="value">要表示成 <see cref="T:System.Decimal" /> 的值。</param>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt64)">
      <summary>将 <see cref="T:System.Decimal" /> 的新实例初始化为指定的 64 位无符号整数值。</summary>
      <param name="value">要表示成 <see cref="T:System.Decimal" /> 的值。</param>
    </member>
    <member name="M:System.Decimal.Add(System.Decimal,System.Decimal)">
      <summary>两个指定的 <see cref="T:System.Decimal" /> 值相加。</summary>
      <returns>
        <paramref name="d1" /> 与 <paramref name="d2" /> 之和。</returns>
      <param name="d1">要相加的第一个值。</param>
      <param name="d2">要相加的第二个值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="d1" /> 与 <paramref name="d2" /> 之和小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Ceiling(System.Decimal)">
      <summary>返回大于或等于指定的十进制数的最小整数值。</summary>
      <returns>大于或等于 <paramref name="d" /> 参数的最小整数值。 请注意，此方法返回 <see cref="T:System.Decimal" />，而不是整数类型。</returns>
      <param name="d">一个小数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Compare(System.Decimal,System.Decimal)">
      <summary>比较指定的两个 <see cref="T:System.Decimal" /> 值。</summary>
      <returns>有符号数字，指示 <paramref name="d1" /> 和 <paramref name="d2" /> 的相对值。 返回值 含义 小于零 <paramref name="d1" /> 小于 <paramref name="d2" />。 零 <paramref name="d1" /> 与 <paramref name="d2" /> 相等。 大于零 <paramref name="d1" /> 大于 <paramref name="d2" />。</returns>
      <param name="d1">要比较的第一个值。</param>
      <param name="d2">要比较的第二个值。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.CompareTo(System.Decimal)">
      <summary>将此实例与指定 <see cref="T:System.Decimal" /> 对象进行比较并返回一个对二者的相对值的比较。</summary>
      <returns>一个有符号数字，指示此实例和 <paramref name="value" /> 的相对值。 返回值 含义 小于零 此实例小于 <paramref name="value" />。 零 此实例等于 <paramref name="value" />。 大于零 此实例大于 <paramref name="value" />。</returns>
      <param name="value">与该实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Decimal.Divide(System.Decimal,System.Decimal)">
      <summary>两个指定的 <see cref="T:System.Decimal" /> 值相除。</summary>
      <returns>
        <paramref name="d1" /> 除以 <paramref name="d2" /> 的结果。</returns>
      <param name="d1">被除数。</param>
      <param name="d2">除数。</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> 是零。</exception>
      <exception cref="T:System.OverflowException">返回值（即商）小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Equals(System.Decimal)">
      <summary>返回一个值，该值指示此实例和指定的 <see cref="T:System.Decimal" /> 对象是否表示相同的值。</summary>
      <returns>如果 <paramref name="value" /> 等于此实例，则为 true；否则为 false。</returns>
      <param name="value">要与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Decimal.Equals(System.Decimal,System.Decimal)">
      <summary>返回一个值，该值指示 <see cref="T:System.Decimal" /> 的两个指定实例是否表示同一个值。</summary>
      <returns>如果 <paramref name="d1" /> 和 <paramref name="d2" /> 相等，则为 true；否则为 false。</returns>
      <param name="d1">要比较的第一个值。</param>
      <param name="d2">要比较的第二个值。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例和指定的 <see cref="T:System.Object" /> 是否表示相同的类型和值。</summary>
      <returns>如果 <paramref name="value" /> 是 <see cref="T:System.Decimal" /> 且与此实例相等，则为 true；否则为 false。</returns>
      <param name="value">与该实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Decimal.Floor(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 数字向负无穷方向舍入为最接近的整数。</summary>
      <returns>如果 <paramref name="d" /> 有小数部分，则为负无穷方向上小于 <paramref name="d" /> 的下一个整 <see cref="T:System.Decimal" /> 数字。 - 或 - 如果 <paramref name="d" /> 没有小数部分，则 <paramref name="d" /> 原样返回。</returns>
      <param name="d">要舍入的值。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.GetBits(System.Decimal)">
      <summary>将 <see cref="T:System.Decimal" /> 的指定实例的值转换为其等效的二进制表示形式。</summary>
      <returns>包含 <paramref name="d" /> 二进制表示形式、由四个元素组成的 32 位有符号整数数组。</returns>
      <param name="d">要转换的值。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Decimal.MaxValue">
      <summary>表示 <see cref="T:System.Decimal" /> 的最大可能值。 该字段是常数且为只读。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Decimal.MinusOne">
      <summary>表示数字负一 (-1)。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Decimal.MinValue">
      <summary>表示 <see cref="T:System.Decimal" /> 的最小可能值。 该字段是常数且为只读。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Multiply(System.Decimal,System.Decimal)">
      <summary>两个指定的 <see cref="T:System.Decimal" /> 值相乘。</summary>
      <returns>
        <paramref name="d1" /> 与 <paramref name="d2" /> 相乘的结果。</returns>
      <param name="d1">（被乘数）。</param>
      <param name="d2">乘数。</param>
      <exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Negate(System.Decimal)">
      <summary>返回指定的 <see cref="T:System.Decimal" /> 值乘以 -1 的结果。</summary>
      <returns>含有 <paramref name="d" /> 值，但符号相反的十进制数。 - 或 - 如果 <paramref name="d" /> 为零，则为零。</returns>
      <param name="d">要求反的值。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Decimal.One">
      <summary>表示数字一 (1)。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Addition(System.Decimal,System.Decimal)">
      <summary>两个指定的 <see cref="T:System.Decimal" /> 值相加。</summary>
      <returns>将 <paramref name="d1" /> 与 <paramref name="d2" />相加的结果。</returns>
      <param name="d1">要相加的第一个值。</param>
      <param name="d2">要相加的第二个值。</param>
      <exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Decrement(System.Decimal)">
      <summary>
        <see cref="T:System.Decimal" /> 操作数减 1。</summary>
      <returns>
        <paramref name="d" /> 减 1 所得的值。</returns>
      <param name="d">要递减的值。</param>
      <exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Division(System.Decimal,System.Decimal)">
      <summary>两个指定的 <see cref="T:System.Decimal" /> 值相除。</summary>
      <returns>
        <paramref name="d1" /> 除以 <paramref name="d2" /> 的结果。</returns>
      <param name="d1">被除数。</param>
      <param name="d2">除数。</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> 是零。</exception>
      <exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Equality(System.Decimal,System.Decimal)">
      <summary>返回一个值，该值指示 <see cref="T:System.Decimal" /> 的两个实例是否相等。</summary>
      <returns>如果 <paramref name="d1" /> 和 <paramref name="d2" /> 相等，则为 true；否则为 false。</returns>
      <param name="d1">要比较的第一个值。</param>
      <param name="d2">要比较的第二个值。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.SByte">
      <summary>将 <see cref="T:System.Decimal" /> 转换成 8 位有符号整数。</summary>
      <returns>8 位有符号整数，它表示转换后的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要转换的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int64">
      <summary>将 <see cref="T:System.Decimal" /> 转换成 64 位有符号的整数。</summary>
      <returns>64 位有符号整数，它表示转换后的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要转换的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int32">
      <summary>将 <see cref="T:System.Decimal" /> 转换成 32 位有符号的整数。</summary>
      <returns>32 位有符号整数，它表示转换后的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要转换的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt32">
      <summary>将 <see cref="T:System.Decimal" /> 转换成 32 位无符号整数。</summary>
      <returns>32 位无符号整数，它表示转换后的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要转换的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 为负数或大于 <see cref="F:System.UInt32.MaxValue" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt16">
      <summary>将 <see cref="T:System.Decimal" /> 转换成 16 位无符号整数。</summary>
      <returns>16 位无符号整数，它表示转换后的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要转换的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.UInt16.MaxValue" /> 或小于 <see cref="F:System.UInt16.MinValue" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Single">
      <summary>将 <see cref="T:System.Decimal" /> 转换为单精度浮点数字。</summary>
      <returns>单精度浮点数字，它表示转换后的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要转换的值。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Byte">
      <summary>将 <see cref="T:System.Decimal" /> 转换为 8 位无符号整数。</summary>
      <returns>8 位无符号整数，它表示转换后的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要转换的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt64">
      <summary>将 <see cref="T:System.Decimal" /> 转换成 64 位无符号整数。</summary>
      <returns>64 位无符号整数，它表示转换后的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要转换的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 为负数或大于 <see cref="F:System.UInt64.MaxValue" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Char">
      <summary>将 <see cref="T:System.Decimal" /> 转换为 Unicode 字符。</summary>
      <returns>表示转换后的 <see cref="T:System.Decimal" /> 的 Unicode 字符。</returns>
      <param name="value">要转换的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int16">
      <summary>将 <see cref="T:System.Decimal" /> 转换成 16 位有符号的整数。</summary>
      <returns>16 位有符号整数，它表示转换后的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要转换的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Double">
      <summary>将 <see cref="T:System.Decimal" /> 转换为双精度浮点数。</summary>
      <returns>双精度浮点数，它表示转换后的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要转换的值。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Double)~System.Decimal">
      <summary>将双精度浮点数转换为 <see cref="T:System.Decimal" />。</summary>
      <returns>已转换的双精度浮点数。</returns>
      <param name="value">要转换的双精度浮点数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />。 - 或 - <paramref name="value" /> 是 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Single)~System.Decimal">
      <summary>将单精度浮点数字转换为 <see cref="T:System.Decimal" />。</summary>
      <returns>已转换的单精度浮点数。</returns>
      <param name="value">要转换的单精度浮点数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />。 - 或 - <paramref name="value" /> 是 <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.PositiveInfinity" /> 或 <see cref="F:System.Single.NegativeInfinity" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_GreaterThan(System.Decimal,System.Decimal)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Decimal" /> 是否大于另一个指定的 <see cref="T:System.Decimal" />。</summary>
      <returns>如果 <paramref name="d1" /> 大于 <paramref name="d2" />，则为 true；否则为 false。</returns>
      <param name="d1">要比较的第一个值。</param>
      <param name="d2">要比较的第二个值。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_GreaterThanOrEqual(System.Decimal,System.Decimal)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Decimal" /> 是否大于等于另一个指定的 <see cref="T:System.Decimal" />。</summary>
      <returns>如果 <paramref name="d1" /> 大于等于 <paramref name="d2" />，则为 true；否则为 false。</returns>
      <param name="d1">要比较的第一个值。</param>
      <param name="d2">要比较的第二个值。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Byte)~System.Decimal">
      <summary>将 8 位无符号整数转换成 <see cref="T:System.Decimal" />。</summary>
      <returns>已转换的 8 位无符号整数。</returns>
      <param name="value">要转换的 8 位无符号整数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Char)~System.Decimal">
      <summary>将 Unicode 字符转换为 <see cref="T:System.Decimal" />。</summary>
      <returns>转换后的 Unicode 字符。</returns>
      <param name="value">要转换的 Unicode 字符。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int16)~System.Decimal">
      <summary>将 16 位有符号的整数转换成 <see cref="T:System.Decimal" />。</summary>
      <returns>转换后的 16 位带符号整数。</returns>
      <param name="value">要转换的 16 位带符号整数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int32)~System.Decimal">
      <summary>将 32 位有符号的整数转换成 <see cref="T:System.Decimal" />。</summary>
      <returns>转换后的 32 位带符号整数。</returns>
      <param name="value">要转换的 32 位带符号整数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int64)~System.Decimal">
      <summary>将 64 位有符号的整数转换成 <see cref="T:System.Decimal" />。</summary>
      <returns>转换后的 64 位带符号整数。</returns>
      <param name="value">要转换的 64 位带符号整数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.SByte)~System.Decimal">
      <summary>将 8 位有符号整数转换成 <see cref="T:System.Decimal" />。</summary>
      <returns>转换后的 8 位带符号整数。</returns>
      <param name="value">要转换的 8 位带符号整数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt16)~System.Decimal">
      <summary>将 16 位无符号的整数转换成 <see cref="T:System.Decimal" />。</summary>
      <returns>已转换的 16 位无符号整数。</returns>
      <param name="value">要转换的 16 位无符号整数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt32)~System.Decimal">
      <summary>将 32 位无符号的整数转换成 <see cref="T:System.Decimal" />。</summary>
      <returns>已转换的 32 位无符号整数。</returns>
      <param name="value">要转换的 32 位无符号整数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt64)~System.Decimal">
      <summary>将 64 位无符号的整数转换成 <see cref="T:System.Decimal" />。</summary>
      <returns>已转换的 64 位无符号整数。</returns>
      <param name="value">要转换的 64 位无符号整数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Increment(System.Decimal)">
      <summary>将 <see cref="T:System.Decimal" /> 操作数增加 1。</summary>
      <returns>
        <paramref name="d" /> 增加 1 后的值。</returns>
      <param name="d">要递增的值。</param>
      <exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Inequality(System.Decimal,System.Decimal)">
      <summary>返回一个值，该值指示 <see cref="T:System.Decimal" /> 的两个实例是否相等。</summary>
      <returns>如果 <paramref name="d1" /> 与 <paramref name="d2" /> 不相等，则为 true；否则为 false。</returns>
      <param name="d1">要比较的第一个值。</param>
      <param name="d2">要比较的第二个值。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_LessThan(System.Decimal,System.Decimal)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Decimal" /> 是否小于另一个指定的 <see cref="T:System.Decimal" />。</summary>
      <returns>如果 <paramref name="d1" /> 小于 <paramref name="d2" />，则为 true；否则为 false。</returns>
      <param name="d1">要比较的第一个值。</param>
      <param name="d2">要比较的第二个值。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_LessThanOrEqual(System.Decimal,System.Decimal)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Decimal" /> 是小于还是等于另一个指定的 <see cref="T:System.Decimal" />。</summary>
      <returns>如果 <paramref name="d1" /> 小于等于 <paramref name="d2" />，则为 true；否则为 false。</returns>
      <param name="d1">要比较的第一个值。</param>
      <param name="d2">要比较的第二个值。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Modulus(System.Decimal,System.Decimal)">
      <summary>返回两个指定 <see cref="T:System.Decimal" /> 值相除所得的余数。</summary>
      <returns>该余数是由 <paramref name="d2" /> 除以 <paramref name="d1" /> 所得。</returns>
      <param name="d1">被除数。</param>
      <param name="d2">除数。</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> 为 zero。</exception>
      <exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Multiply(System.Decimal,System.Decimal)">
      <summary>两个指定的 <see cref="T:System.Decimal" /> 值相乘。</summary>
      <returns>
        <paramref name="d1" /> 乘以 <paramref name="d2" /> 的结果。</returns>
      <param name="d1">要相乘的第一个值。</param>
      <param name="d2">要相乘的第二个值。</param>
      <exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Subtraction(System.Decimal,System.Decimal)">
      <summary>两个指定的 <see cref="T:System.Decimal" /> 值相减。</summary>
      <returns>
        <paramref name="d2" /> 减 <paramref name="d1" /> 所得的结果。</returns>
      <param name="d1">被减数。</param>
      <param name="d2">减数。</param>
      <exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_UnaryNegation(System.Decimal)">
      <summary>对指定 <see cref="T:System.Decimal" /> 操作数的值求反。</summary>
      <returns>
        <paramref name="d" /> 乘以负一 (-1) 的结果。</returns>
      <param name="d">要求反的值。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_UnaryPlus(System.Decimal)">
      <summary>返回 <see cref="T:System.Decimal" /> 操作数的值（操作数符号不变）。</summary>
      <returns>操作数 <paramref name="d" /> 的值。</returns>
      <param name="d">要返回的操作数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效 <see cref="T:System.Decimal" /> 表示形式。</summary>
      <returns>
        <paramref name="s" />中包含的数字的等效值。</returns>
      <param name="s">要转换的数字的字符串表示形式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将指定样式的数字的字符串表示形式转换为它的等效 <see cref="T:System.Decimal" />。</summary>
      <returns>
        <see cref="T:System.Decimal" /> 数，它与 <paramref name="style" /> 所指定的 <paramref name="s" /> 中包含的数字等效。</returns>
      <param name="s">要转换的数字的字符串表示形式。</param>
      <param name="style">
        <see cref="T:System.Globalization.NumberStyles" /> 值的按位组合，指示可出现在 <paramref name="s" /> 中的样式元素。 一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Number" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 为 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" /> 的数字</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>使用指定样式和区域性特定格式将数字的字符串表示形式转换为其 <see cref="T:System.Decimal" /> 等效项。</summary>
      <returns>
        <see cref="T:System.Decimal" /> 数，它与 <paramref name="style" /> 和 <paramref name="provider" /> 所指定的 <paramref name="s" /> 中包含的数字等效。</returns>
      <param name="s">要转换的数字的字符串表示形式。</param>
      <param name="style">
        <see cref="T:System.Globalization.NumberStyles" /> 值的按位组合，指示可出现在 <paramref name="s" /> 中的样式元素。 一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Number" />。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 对象，提供有关 <paramref name="s" /> 的格式的区域性特定的信息。</param>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" /> 的数字。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 为 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定的格式信息将数字的字符串表示形式转换为它的 <see cref="T:System.Decimal" /> 等效项。</summary>
      <returns>
        <see cref="T:System.Decimal" /> 数字，它等效于 <paramref name="provider" /> 所指定的 <paramref name="s" /> 包含的数字。</returns>
      <param name="s">要转换的数字的字符串表示形式。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" />，它提供有关 <paramref name="s" /> 的区域性特定分析信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" /> 的数字</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Remainder(System.Decimal,System.Decimal)">
      <summary>计算两个 <see cref="T:System.Decimal" /> 值相除后的余数。</summary>
      <returns>将 <paramref name="d1" /> 除以 <paramref name="d2" /> 后所得的余数。</returns>
      <param name="d1">被除数。</param>
      <param name="d2">除数。</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> 是零。</exception>
      <exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Round(System.Decimal,System.Int32)">
      <summary>将 <see cref="T:System.Decimal" /> 值舍入到指定的小数位数。</summary>
      <returns>舍入到 <paramref name="decimals" /> 的小数位数等于<paramref name="d" /> 的小数位数 。</returns>
      <param name="d">要舍入的小数。</param>
      <param name="decimals">指定数字要舍入到的小数位数的值，该值范围是从 0 到 28。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> 不是 0 到 28 之间的值。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Subtract(System.Decimal,System.Decimal)">
      <summary>从一个 <see cref="T:System.Decimal" /> 值中减去指定的另一个这种类型的值。</summary>
      <returns>
        <paramref name="d2" /> 减 <paramref name="d1" /> 所得的结果。</returns>
      <param name="d1">被减数。</param>
      <param name="d2">减数。</param>
      <exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。 返回值 含义 小于零 此实例按排序顺序在 <paramref name="value" /> 前面。 零 此实例与 <paramref name="value" /> 按排序顺序中出现的位置相同。 大于零 此实例按排序顺序在 <paramref name="value" /> 后面。 - 或 - <paramref name="value" /> 为 null。</returns>
      <param name="value">与此实例或 null 实例进行比较的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Decimal" />。</exception>
    </member>
    <member name="M:System.Decimal.ToByte(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 的值转换为等效的 8 位无符号整数。</summary>
      <returns>等效于 <paramref name="value" /> 的 8 位无符号整数。</returns>
      <param name="value">要转换的十进制数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToDouble(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 的值转换为等效的双精度浮点数。</summary>
      <returns>等效于 <paramref name="d" /> 的双精度浮点数。</returns>
      <param name="d">要转换的十进制数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToInt16(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 值转换为等效的 16 位有符号整数。</summary>
      <returns>等效于 <paramref name="value" /> 的 16 位有符号整数。</returns>
      <param name="value">要转换的十进制数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToInt32(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 值转换为等效的 32 位有符号整数。</summary>
      <returns>与 <paramref name="d" /> 的值等效的 32 位有符号整数。</returns>
      <param name="d">要转换的十进制数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> 小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToInt64(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 值转换为等效的 64 位有符号整数。</summary>
      <returns>与 <paramref name="d" /> 的值等效的 64 位有符号整数。</returns>
      <param name="d">要转换的十进制数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> 小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToSByte(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 值转换为等效的 8 位有符号整数。</summary>
      <returns>等效于 <paramref name="value" /> 的 8 位有符号整数。</returns>
      <param name="value">要转换的十进制数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToSingle(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 的值转换为等效的单精度浮点数字。</summary>
      <returns>等效于 <paramref name="d" /> 的值的单精度浮点数字。</returns>
      <param name="d">要转换的十进制数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>表示此实例的值的字符串。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="provider" /> 指定。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToString(System.String)">
      <summary>使用指定的格式，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <param name="format">标准或自定义的数值格式字符串（请参见注解）。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
      <param name="format">数值格式字符串（请参见注解）。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToUInt16(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 的值转换为等效的 16 位无符号整数。</summary>
      <returns>等效于 <paramref name="value" /> 的值的 16 位无符号整数。</returns>
      <param name="value">要转换的十进制数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.UInt16.MaxValue" /> 或小于 <see cref="F:System.UInt16.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToUInt32(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 的值转换为等效的 32 位无符号整数。</summary>
      <returns>等效于 <paramref name="d" /> 的值的 32 位无符号整数。</returns>
      <param name="d">要转换的十进制数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> 为负数或大于 <see cref="F:System.UInt32.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToUInt64(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 的值转换为等效的 64 位无符号整数。</summary>
      <returns>等效于 <paramref name="d" /> 的值的 64 位无符号整数。</returns>
      <param name="d">要转换的十进制数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> 为负数或大于 <see cref="F:System.UInt64.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Truncate(System.Decimal)">
      <summary>返回指定的 <see cref="T:System.Decimal" /> 的整数位，所有小数位均被放弃。</summary>
      <returns>
        <paramref name="d" /> 向零舍入为最接近的整数后的结果。</returns>
      <param name="d">要截断的十进制数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.TryParse(System.String,System.Decimal@)">
      <summary>将数字的字符串表示形式转换为它的等效 <see cref="T:System.Decimal" /> 表示形式。 一个指示转换是否成功的返回值。</summary>
      <returns>如果成功转换了 <paramref name="s" />，则为 true；否则为 false。</returns>
      <param name="s">要转换的数字的字符串表示形式。</param>
      <param name="result">当此方法返回时，如果转换成功，则返回值包含与 <paramref name="s" /> 中包含的数值等效的 <see cref="T:System.Decimal" /> 数；如果转换失败，则返回值包含零。 如果 <paramref name="s" /> 参数为 null，不是有效格式的数字或者表示的数字小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />，则转换将失败。 该参数未经初始化即被传递。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)">
      <summary>使用指定样式和区域性特定格式将数字的字符串表示形式转换为其 <see cref="T:System.Decimal" /> 等效项。 一个指示转换是否成功的返回值。</summary>
      <returns>如果成功转换了 <paramref name="s" />，则为 true；否则为 false。</returns>
      <param name="s">要转换的数字的字符串表示形式。</param>
      <param name="style">枚举值的一个按位组合，指示 <paramref name="s" /> 所允许的格式。 一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Number" />。</param>
      <param name="provider">一个对象，它提供有关 <paramref name="s" /> 的区域性特定的分析信息。</param>
      <param name="result">当此方法返回时，如果转换成功，则返回值包含与 <paramref name="s" /> 中包含的数值等效的 <see cref="T:System.Decimal" /> 数；如果转换失败，则返回值包含零。 如果 <paramref name="s" /> 参数为 null，格式不符合 <paramref name="style" />，或者表示的数字小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />，则转换将失败。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 为 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Decimal.Zero">
      <summary>表示数字零 (0)。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Delegate">
      <summary>表示委托，委托是一种数据结构，它引用静态方法或引用类实例及该类的实例方法。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Delegate.Combine(System.Delegate,System.Delegate)">
      <summary>将两个委托的调用列表连接在一起。</summary>
      <returns>新的委托，它的调用列表将 <paramref name="a" /> 和 <paramref name="b" /> 的调用列表按该顺序连接在一起。 如果 <paramref name="b" /> 为 null，则返回 <paramref name="a" />，如果 <paramref name="a" /> 为空引用，则返回 <paramref name="b" />，如果 <paramref name="a" /> 和 <paramref name="b" /> 均为空引用，则返回空引用。</returns>
      <param name="a">最先出现其调用列表的委托。</param>
      <param name="b">最后出现其调用列表的委托。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="a" /> 和 <paramref name="b" /> 均不是 null，且 <paramref name="a" /> 和 <paramref name="b" /> 不是同一委托类型的实例。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Delegate.Combine(System.Delegate[])">
      <summary>将委托数组的调用列表连接在一起。</summary>
      <returns>新的委托，该委托的调用列表将 <paramref name="delegates" /> 数组中的委托的调用列表连接在一起。 如果 <paramref name="delegates" /> 为 null，<paramref name="delegates" /> 包含零个元素，或 <paramref name="delegates" /> 中的每项均为 null，则返回 null。</returns>
      <param name="delegates">要组合的委托数组。</param>
      <exception cref="T:System.ArgumentException">并非 <paramref name="delegates" /> 中的所有非空项都是同一委托类型的实例。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo)">
      <summary>使用指定的第一个参数创建指定类型的委托，该委托表示指定的静态方法或实例方法。</summary>
      <returns>指定类型的委托，表示指定的静态或实例方法。</returns>
      <param name="type">要创建的委托的 <see cref="T:System.Type" />。</param>
      <param name="firstArgument">委托要绑定到的对象，或为 null，后者表示将 <paramref name="method" /> 视为 static（在 Visual Basic 中为 Shared）。</param>
      <param name="method">描述委托要表示的静态或实例方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。 - 或 - <paramref name="method" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不继承 <see cref="T:System.MulticastDelegate" />。 - 或 - <paramref name="type" /> 不是 RuntimeType。 请参见 反射中的运行时类型。 - 或 - 不能绑定 <paramref name="method" />。 - 或 - <paramref name="method" /> 不是 RuntimeMethodInfo。 请参见 反射中的运行时类型。</exception>
      <exception cref="T:System.MissingMethodException">未找到 <paramref name="type" /> 的 Invoke 方法。</exception>
      <exception cref="T:System.MethodAccessException">调用方无权访问 <paramref name="method" />。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
      </PermissionSet>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo)">
      <summary>创建指定类型的委托以表示指定的静态方法。</summary>
      <returns>表示指定静态方法的指定类型的委托。</returns>
      <param name="type">要创建的委托的 <see cref="T:System.Type" />。</param>
      <param name="method">描述委托要表示的静态或实例方法的 <see cref="T:System.Reflection.MethodInfo" />。 .NET Framework 1.0 和 1.1 版中仅支持静态方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。 - 或 - <paramref name="method" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不继承 <see cref="T:System.MulticastDelegate" />。 - 或 - <paramref name="type" /> 不是 RuntimeType。 请参见 反射中的运行时类型。 - 或 - <paramref name="method" /> 不是静态方法，并且 .NET Framework 的版本为 1.0 或 1.1。 - 或 - 不能绑定 <paramref name="method" />。 - 或 - <paramref name="method" /> 不是 RuntimeMethodInfo。 请参见 反射中的运行时类型。</exception>
      <exception cref="T:System.MissingMethodException">未找到 <paramref name="type" /> 的 Invoke 方法。</exception>
      <exception cref="T:System.MethodAccessException">调用方无权访问 <paramref name="method" />。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
      </PermissionSet>
    </member>
    <member name="M:System.Delegate.DynamicInvoke(System.Object[])">
      <summary>动态调用（后期绑定）由当前委托所表示的方法。</summary>
      <returns>委托所表示的方法返回的对象。</returns>
      <param name="args">作为参数传递给当前委托所表示的方法的对象数组。 - 或 - 如果当前委托所表示的方法不需要参数，则为 null。</param>
      <exception cref="T:System.MemberAccessException">调用方不能访问委托所表示的方法（例如，当该方法为私有时）。 - 或 - <paramref name="args" /> 中列出的参数的数目、顺序或类型无效。</exception>
      <exception cref="T:System.ArgumentException">对对象或类调用委托所表示的方法，但该对象或类不支持这种方法。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">委托所表示的方法是实例方法，目标对象为 null。 - 或 - 封装的方法之一引发异常。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Delegate.Equals(System.Object)">
      <summary>确定指定的对象和当前委托的类型是否相同，是否共享相同的目标、方法和调用列表。</summary>
      <returns>如果 <paramref name="obj" /> 和当前委托有相同的目标、方法和调用列表，则为 true；否则为 false。</returns>
      <param name="obj">要与当前委托进行比较的对象。</param>
      <exception cref="T:System.MemberAccessException">调用方不能访问委托所表示的方法（例如，当该方法为私有时）。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Delegate.GetHashCode">
      <summary>返回委托的哈希代码。</summary>
      <returns>委托的哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Delegate.GetInvocationList">
      <summary>返回委托的调用列表。</summary>
      <returns>委托构成的数组，表示当前委托的调用列表。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Delegate.Method">
      <summary>获取委托所表示的方法。</summary>
      <returns>描述委托所表示的方法的 <see cref="T:System.Reflection.MethodInfo" />。</returns>
      <exception cref="T:System.MemberAccessException">调用方不能访问委托所表示的方法（例如，当该方法为私有时）。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Delegate.op_Equality(System.Delegate,System.Delegate)">
      <summary>确定指定的委托是否相等。</summary>
      <returns>如果 <paramref name="d1" /> 等于 <paramref name="d2" />，则为 true；否则为 false。</returns>
      <param name="d1">要比较的第一个委托。</param>
      <param name="d2">要比较的第二个委托。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)">
      <summary>确定指定的委托是否相等。</summary>
      <returns>如果 <paramref name="d1" /> 不等于 <paramref name="d2" />，则为 true；否则为 false。</returns>
      <param name="d1">要比较的第一个委托。</param>
      <param name="d2">要比较的第二个委托。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Delegate.Remove(System.Delegate,System.Delegate)">
      <summary>从一个委托的调用列表中移除另一个委托的最后一个调用列表。</summary>
      <returns>一个新委托，其调用列表的构成方法为：获取 <paramref name="source" /> 的调用列表，如果在 <paramref name="source" /> 的调用列表中找到了 <paramref name="value" /> 的调用列表，则从中移除 <paramref name="value" /> 的最后一个调用列表。 如果 <paramref name="value" /> 为 null，或在 <paramref name="source" /> 的调用列表中没有找到 <paramref name="value" /> 的调用列表，则返回 <paramref name="source" />。 如果 <paramref name="value" /> 的调用列表等于 <paramref name="source" /> 的调用列表，或 <paramref name="source" /> 为空引用，则返回空引用。</returns>
      <param name="source">委托，将从中移除 <paramref name="value" /> 的调用列表。</param>
      <param name="value">委托，它提供将从其中移除 <paramref name="source" /> 的调用列表的调用列表。</param>
      <exception cref="T:System.MemberAccessException">调用方不能访问委托所表示的方法（例如，当该方法为私有时）。</exception>
      <exception cref="T:System.ArgumentException">委托类型不匹配。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)">
      <summary>从一个委托的调用列表中移除另一个委托的所有调用列表。</summary>
      <returns>一个新委托，其调用列表的构成方法为：获取 <paramref name="source" /> 的调用列表，如果在 <paramref name="source" /> 的调用列表中找到了 <paramref name="value" /> 的调用列表，则从中移除 <paramref name="value" /> 的所有调用列表。 如果 <paramref name="value" /> 为 null，或在 <paramref name="source" /> 的调用列表中没有找到 <paramref name="value" /> 的调用列表，则返回 <paramref name="source" />。 如果 <paramref name="value" /> 的调用列表等于 <paramref name="source" /> 的调用列表，如果 <paramref name="source" /> 只包含等于 <paramref name="value" /> 的调用列表的一系列调用列表，或者如果 <paramref name="source" /> 为空引用，则返回空引用。</returns>
      <param name="source">委托，将从中移除 <paramref name="value" /> 的调用列表。</param>
      <param name="value">委托，它提供将从其中移除 <paramref name="source" /> 的调用列表的调用列表。</param>
      <exception cref="T:System.MemberAccessException">调用方不能访问委托所表示的方法（例如，当该方法为私有时）。</exception>
      <exception cref="T:System.ArgumentException">委托类型不匹配。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Delegate.Target">
      <summary>获取类实例，当前委托将对其调用实例方法。</summary>
      <returns>如果委托表示实例方法，则为当前委托对其调用实例方法的对象；如果委托表示静态方法，则为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.DivideByZeroException">
      <summary>试图用零除整数值或十进制数值时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DivideByZeroException.#ctor">
      <summary>初始化 <see cref="T:System.DivideByZeroException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.DivideByZeroException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.DivideByZeroException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不是空引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="T:System.DllNotFoundException">
      <summary>当未找到在 DLL 导入中指定的 DLL 时所引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DllNotFoundException.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.DllNotFoundException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.DllNotFoundException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.DllNotFoundException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Double">
      <summary>表示一个双精度浮点数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.CompareTo(System.Double)">
      <summary>将此实例与指定的双精度浮点数进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于指定双精度浮点数的值。</summary>
      <returns>一个有符号数字，指示此实例和 <paramref name="value" /> 的相对值。 返回值 描述 小于零 此实例小于 <paramref name="value" />。 - 或 - 此实例不是数字 (<see cref="F:System.Double.NaN" />) 而 <paramref name="value" /> 是数字。 零 此实例等于 <paramref name="value" />。 - 或 - 此实例和 <paramref name="value" /> 都不是数字 (<see cref="F:System.Double.NaN" />)、<see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" />。 大于零 此实例大于 <paramref name="value" />。 - 或 - 此实例是数字而 <paramref name="value" /> 不是数字 (<see cref="F:System.Double.NaN" />)。</returns>
      <param name="value">要比较的双精度浮点数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Double.Epsilon">
      <summary>表示大于零的最小正 <see cref="T:System.Double" /> 值。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.Equals(System.Double)">
      <summary>返回一个值，该值指示此实例和指定的 <see cref="T:System.Double" /> 对象是否表示相同的值。</summary>
      <returns>如果 <paramref name="obj" /> 等于此实例，则为 true；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的 <see cref="T:System.Double" /> 对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Double.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.Double" /> 的实例并且等于此实例的值，则为 true；否则为 false。</returns>
      <param name="obj">与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Double.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Double.IsInfinity(System.Double)">
      <summary>返回一个值，该值指示指定数字是计算为负无穷大还是正无穷大。</summary>
      <returns>如果 <paramref name="d" /> 的计算结果为 <see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" />，则为 true；否则为 false。</returns>
      <param name="d">一个双精度浮点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.IsNaN(System.Double)">
      <summary>返回一个值，该值指示指定的值是否不为数字 (<see cref="F:System.Double.NaN" />)。</summary>
      <returns>如果 <paramref name="d" /> 的计算结果为 <see cref="F:System.Double.NaN" />，则为 true；否则为 false。</returns>
      <param name="d">一个双精度浮点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.IsNegativeInfinity(System.Double)">
      <summary>返回一个值，通过该值指示指定数字是否计算为负无穷大。</summary>
      <returns>如果 <paramref name="d" /> 的计算结果为 <see cref="F:System.Double.NegativeInfinity" />，则为 true；否则为 false。</returns>
      <param name="d">一个双精度浮点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.IsPositiveInfinity(System.Double)">
      <summary>返回一个值，通过该值指示指定数字是否计算为正无穷大。</summary>
      <returns>如果 <paramref name="d" /> 的计算结果为 <see cref="F:System.Double.PositiveInfinity" />，则为 true；否则为 false。</returns>
      <param name="d">一个双精度浮点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Double.MaxValue">
      <summary>表示 <see cref="T:System.Double" /> 的最大可能值。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Double.MinValue">
      <summary>表示 <see cref="T:System.Double" /> 的最小可能值。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Double.NaN">
      <summary>表示不是数字 (NaN) 的值。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Double.NegativeInfinity">
      <summary>表示负无穷。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.op_Equality(System.Double,System.Double)">
      <summary>返回一个值，该值指示两个指定的 <see cref="T:System.Double" /> 值是否相等。</summary>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 相等，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
    </member>
    <member name="M:System.Double.op_GreaterThan(System.Double,System.Double)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Double" /> 值是否大于另一个指定的 <see cref="T:System.Double" /> 值。</summary>
      <returns>如果 <paramref name="left" /> 大于 <paramref name="right" />，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
    </member>
    <member name="M:System.Double.op_GreaterThanOrEqual(System.Double,System.Double)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Double" /> 值是否大于或等于另一个指定的 <see cref="T:System.Double" /> 值。</summary>
      <returns>如果 <paramref name="left" /> 大于等于 <paramref name="right" />，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
    </member>
    <member name="M:System.Double.op_Inequality(System.Double,System.Double)">
      <summary>返回一个值，该值指示两个指定的 <see cref="T:System.Double" /> 值是否不相等。</summary>
      <returns>如果 <paramref name="left" /> 与 <paramref name="right" /> 不相等，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
    </member>
    <member name="M:System.Double.op_LessThan(System.Double,System.Double)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Double" /> 值是否小于另一个指定的 <see cref="T:System.Double" /> 值。</summary>
      <returns>如果 <paramref name="left" /> 小于 <paramref name="right" />，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
    </member>
    <member name="M:System.Double.op_LessThanOrEqual(System.Double,System.Double)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Double" /> 值是否小于或等于另一个指定的 <see cref="T:System.Double" /> 值。</summary>
      <returns>如果 <paramref name="left" /> 小于等于 <paramref name="right" />，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
    </member>
    <member name="M:System.Double.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效双精度浮点数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数值或符号等效的双精度浮点数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不表示一个有效格式的数字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将指定样式的数字的字符串表示形式转换为它的等效双精度浮点数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数值或符号等效的双精度浮点数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Float" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的组合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不表示一个有效格式的数字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" /> 的数字。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 包括 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效双精度浮点数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数值或符号等效的双精度浮点数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Float" /> 与 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的组合。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不代表数字值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 为 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.Parse(System.String,System.IFormatProvider)">
      <summary>将指定的区域性特定格式的数字的字符串表示形式转换为它的等效双精度浮点数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数值或符号等效的双精度浮点数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不表示一个有效格式的数字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Double.PositiveInfinity">
      <summary>表示正无穷。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。 返回值 含义 小于零 此实例按排序顺序在 <paramref name="value" /> 前面。 零 此实例与 <paramref name="value" /> 按排序顺序中出现的位置相同。 大于零 此实例按排序顺序在 <paramref name="value" /> 后面。 - 或 - <paramref name="value" /> 为 null。</returns>
      <param name="value">与此实例进行比较的 object，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Double" />。</exception>
    </member>
    <member name="M:System.Double.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="provider" /> 指定。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.ToString(System.String)">
      <summary>使用指定的格式，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <param name="format">一个数值格式字符串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
      <param name="format">一个数值格式字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Double@)">
      <summary>将数字的字符串表示形式转换为它的等效双精度浮点数。 一个指示转换是否成功的返回值。</summary>
      <returns>如果成功转换了 <paramref name="s" />，则为 true；否则为 false。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 参数等效的双精度浮点数；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 null，不是有效格式的数字或者表示的数字小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" />，则转换将失败。 该参数未经初始化即被传递。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效双精度浮点数。 一个指示转换是否成功的返回值。</summary>
      <returns>如果成功转换了 <paramref name="s" />，则为 true；否则为 false。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">
        <see cref="T:System.Globalization.NumberStyles" /> 值的按位组合，指示 <paramref name="s" /> 允许使用的格式。 一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Float" /> 与 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的组合。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" />，它提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所包含的数值或符号等效的双精度浮点数；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 null，其格式不符合 <paramref name="style" />，表示的数字小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" />，或者 <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 枚举的常数的有效组合，则转换失败。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 包括 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Enum">
      <summary>为枚举提供基类。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Enum.#ctor">
      <summary>初始化 <see cref="T:System.Enum" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Enum.CompareTo(System.Object)">
      <summary>将此实例与指定对象进行比较并返回一个对二者的相对值的指示。</summary>
      <returns>一个有符号数，用于指示此实例和 <paramref name="target" /> 的相对值。 值 含义 小于零 此实例的值小于 <paramref name="target" /> 的值。 零 此实例的值等于 <paramref name="target" /> 的值。 大于零 此实例的值大于 <paramref name="target" /> 的值。 - 或 - <paramref name="target" /> 为 null。</returns>
      <param name="target">要比较的对象，或为 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 与此实例不是同一类型。</exception>
      <exception cref="T:System.InvalidOperationException">此实例不是 <see cref="T:System.SByte" />、<see cref="T:System.Int16" />、<see cref="T:System.Int32" />、<see cref="T:System.Int64" />、<see cref="T:System.Byte" />、<see cref="T:System.UInt16" />、<see cref="T:System.UInt32" /> 或 <see cref="T:System.UInt64" /> 类型。</exception>
      <exception cref="T:System.NullReferenceException">此实例为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Enum.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果 <paramref name="obj" /> 是具有与此实例相同的基础类型和值的 <see cref="T:System.Enum" />，则为 true；否则为 false。</returns>
      <param name="obj">与此实例进行比较的 object，或 null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Enum.Format(System.Type,System.Object,System.String)">
      <summary>根据指定格式将指定枚举类型的指定值转换为其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="enumType">要转换的值的枚举类型。</param>
      <param name="value">要转换的值。</param>
      <param name="format">要使用的输出格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" />、<paramref name="value" /> 或 <paramref name="format" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 参数不是 <see cref="T:System.Enum" /> 类型。 - 或 - <paramref name="value" /> 来自于其类型与 <paramref name="enumType" /> 不同的枚举。 - 或 - <paramref name="value" /> 的类型不是 <paramref name="enumType" /> 的基础类型。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 参数包含无效值。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="format" /> 等于“X”，但枚举类型未知。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.GetHashCode">
      <summary>返回该实例的值的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Enum.GetName(System.Type,System.Object)">
      <summary>在指定枚举中检索具有指定值的常数的名称。</summary>
      <returns>一个字符串，其中包含 <paramref name="enumType" /> 中值为 <paramref name="value" /> 的枚举常数的名称；如果没有找到这样的常数，则为 null。</returns>
      <param name="enumType">枚举类型。</param>
      <param name="value">特定枚举常数的值（根据其基础类型）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 或 <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。 - 或 - <paramref name="value" /> 既不是 <paramref name="enumType" /> 类型，也没有与 <paramref name="enumType" /> 相同的基础类型。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.GetNames(System.Type)">
      <summary>检索指定枚举中常数名称的数组。</summary>
      <returns>
        <paramref name="enumType" /> 的常数名称的字符串数组。</returns>
      <param name="enumType">枚举类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 参数不是 <see cref="T:System.Enum" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.GetUnderlyingType(System.Type)">
      <summary>返回指定枚举的基础类型。</summary>
      <returns>
        <paramref name="enumType" /> 的基础类型。</returns>
      <param name="enumType">基础类型将被检索的枚举。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.GetValues(System.Type)">
      <summary>检索指定枚举中常数值的数组。</summary>
      <returns>一个数组，其中包含 <paramref name="enumType" /> 中实例的值。</returns>
      <param name="enumType">枚举类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</exception>
      <exception cref="T:System.InvalidOperationException">在仅反射上下文中由反射引发的方法， - 或 - <paramref name="enumType" /> 是从一个只反射上下文中加载的程序集的类型。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.HasFlag(System.Enum)">
      <summary>确定当前实例中是否设置了一个或多个位域。</summary>
      <returns>如果在 <paramref name="flag" /> 中设置的位域也在当前实例中进行了设置，则为 true；否则为 false。</returns>
      <param name="flag">一个枚举值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="flag" /> 具有与当前实例不同的类型。</exception>
    </member>
    <member name="M:System.Enum.IsDefined(System.Type,System.Object)">
      <summary>返回指定枚举中是否存在具有指定值的常数的指示。</summary>
      <returns>如果 <paramref name="enumType" /> 的某个常数具有等于 <paramref name="value" /> 的值，则为 true；否则为 false。</returns>
      <param name="enumType">枚举类型。</param>
      <param name="value">
        <paramref name="enumType" /> 的常数的值或名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 或 <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 Enum。 - 或 - <paramref name="value" /> 的类型是枚举，但不是 <paramref name="enumType" /> 类型的枚举。 - 或 - <paramref name="value" /> 的类型不是 <paramref name="enumType" /> 的基础类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 不是 <see cref="T:System.SByte" />、<see cref="T:System.Int16" />、<see cref="T:System.Int32" />、<see cref="T:System.Int64" />、<see cref="T:System.Byte" />、<see cref="T:System.UInt16" />、<see cref="T:System.UInt32" />、<see cref="T:System.UInt64" /> 或 <see cref="T:System.String" /> 类型。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.Parse(System.Type,System.String)">
      <summary>将一个或多个枚举常数的名称或数字值的字符串表示转换成等效的枚举对象。</summary>
      <returns>
        <paramref name="enumType" /> 类型的对象，其值由 <paramref name="value" /> 表示。</returns>
      <param name="enumType">枚举类型。</param>
      <param name="value">包含要转换的值或名称的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 或 <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。 - 或 - <paramref name="value" /> 为空字符串或只包含空白。 - 或 - <paramref name="value" /> 是一个名称，但不是为该枚举定义的命名常量之一。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 超出 <paramref name="enumType" /> 基础类型的范围。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
      <summary>将一个或多个枚举常数的名称或数字值的字符串表示转换成等效的枚举对象。 一个参数，指定该操作是否区分大小写。</summary>
      <returns>
        <paramref name="enumType" /> 类型的对象，其值由 <paramref name="value" /> 表示。</returns>
      <param name="enumType">枚举类型。</param>
      <param name="value">包含要转换的值或名称的字符串。</param>
      <param name="ignoreCase">true 为忽略大小写；false 为考虑大小写。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 或 <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。 - 或 - <paramref name="value" /> 是空字符串 ("") 或只包含空白。 - 或 - <paramref name="value" /> 是一个名称，但不是为该枚举定义的命名常量之一。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 超出 <paramref name="enumType" /> 基础类型的范围。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>此方法重载已过时；请使用 <see cref="M:System.Enum.ToString(System.String)" />。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <param name="format">格式规范。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 未包含有效的格式规范。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="format" /> 等于“X”，但枚举类型未知。</exception>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Object)">
      <summary>将具有整数值的指定对象转换为枚举成员。</summary>
      <returns>值为 <paramref name="value" /> 的枚举对象。</returns>
      <param name="enumType">要返回的枚举类型。</param>
      <param name="value">要转换为枚举成员的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 或 <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。 - 或 - <paramref name="value" /> 不是 <see cref="T:System.SByte" />、<see cref="T:System.Int16" />、<see cref="T:System.Int32" />、<see cref="T:System.Int64" />、<see cref="T:System.Byte" />、<see cref="T:System.UInt16" />、<see cref="T:System.UInt32" /> 和 <see cref="T:System.UInt64" /> 类型。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.ToString">
      <summary>将此实例的值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Enum.ToString(System.String)">
      <summary>使用指定格式将此实例的值转换成其等效的字符串表示。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <param name="format">格式字符串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 包含无效规范。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="format" /> 等于“X”，但枚举类型未知。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
      <summary>将一个或多个枚举常数的名称或数字值的字符串表示转换成等效的枚举对象。 一个参数指定该操作是否区分大小写。 用于指示转换是否成功的返回值。</summary>
      <returns>如果 <paramref name="value" /> 参数成功转换，则为 true；否则为 false。</returns>
      <param name="value">要转换的枚举名称或基础值的字符串表示形式。</param>
      <param name="ignoreCase">true 表示不区分大小写；false 表示区分大小写。</param>
      <param name="result">此方法在返回时包含一个类型为 <paramref name="TEnum" /> 的一个对象，其值由 <paramref name="value" /> 表示。 该参数未经初始化即被传递。</param>
      <typeparam name="TEnum">要将 <paramref name="value" /> 转换为的枚举类型。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="TEnum" /> 不是枚举类型。</exception>
    </member>
    <member name="M:System.Enum.TryParse``1(System.String,``0@)">
      <summary>将一个或多个枚举常数的名称或数字值的字符串表示转换成等效的枚举对象。 用于指示转换是否成功的返回值。</summary>
      <returns>如果 <paramref name="value" /> 参数成功转换，则为 true；否则为 false。</returns>
      <param name="value">要转换的枚举名称或基础值的字符串表示形式。</param>
      <param name="result">此方法在返回时包含一个类型为 <paramref name="TEnum" /> 的一个对象，其值由 <paramref name="value" /> 表示。 该参数未经初始化即被传递。</param>
      <typeparam name="TEnum">要将 <paramref name="value" /> 转换为的枚举类型。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="TEnum" /> 不是枚举类型。</exception>
    </member>
    <member name="T:System.Environment">
      <summary>提供有关当前环境和平台的信息以及操作它们的方法。 此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Environment.HasShutdownStarted">
      <summary>获取一个值，该值指示公共语言运行时 (CLR) 是否正在关闭。</summary>
      <returns>true（如果 CLR 关闭），否则为 false.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Environment.NewLine">
      <summary>获取为此环境定义的换行字符串。</summary>
      <returns>对于非 Unix 平台为包含“\r\n”的字符串，对于 Unix 平台则为包含“\n”的字符串。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Environment.ProcessorCount">
      <summary>获取当前计算机上的处理器数。</summary>
      <returns>指定当前计算机上处理器个数的 32 位有符号整数。 没有默认值。 如果当前计算机包含多个处理器组，则此属性返回可用的逻辑处理器数以供公共语言运行时 (CLR) 使用。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="NUMBER_OF_PROCESSORS" />
      </PermissionSet>
    </member>
    <member name="P:System.Environment.TickCount">
      <summary>获取系统启动后经过的毫秒数。</summary>
      <returns>一个 32 位带符号整数，它包含自上次启动计算机以来所经过的时间（以毫秒为单位）。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.EventArgs">
      <summary>
        <see cref="T:System.EventArgs" /> 是包含事件数据的类的基类。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.EventArgs.#ctor">
      <summary>初始化 <see cref="T:System.EventArgs" /> 类的新实例。</summary>
    </member>
    <member name="F:System.EventArgs.Empty">
      <summary>表示没有事件数据的事件。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.EventHandler">
      <summary>表示将处理不包含事件数据的事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">不包含任何事件数据的 <see cref="T:System.EventArgs" />。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.EventHandler`1">
      <summary>表示将处理事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">一个 <see cref="T:System.EventArgs" />，其中包含事件数据。</param>
      <typeparam name="TEventArgs">由该事件生成的事件数据的类型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Exception">
      <summary>表示在应用程序执行过程中发生的错误。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Exception.#ctor">
      <summary>初始化 <see cref="T:System.Exception" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Exception.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.Exception" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.Exception.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Exception" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="P:System.Exception.Data">
      <summary>获取一个提供用户定义的其他异常信息的键/值对的集合。</summary>
      <returns>一个对象，它实现 <see cref="T:System.Collections.IDictionary" /> 接口并包含用户定义的键/值对的集合。 默认值为空集合。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Exception.GetBaseException">
      <summary>当在派生类中重写时，返回 <see cref="T:System.Exception" />，它是一个或多个并发的异常的根源。</summary>
      <returns>异常链中第一个被引发的异常。 如果当前异常的 <see cref="P:System.Exception.InnerException" /> 属性是 null 引用（Visual Basic 中为 Nothing），则此属性返回当前异常。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Exception.HelpLink">
      <summary>获取或设置指向此异常所关联帮助文件的链接。</summary>
      <returns>统一资源名称 (URN) 或统一资源定位器 (URL)。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Exception.HResult">
      <summary>获取或设置 HRESULT（一个分配给特定异常的编码数字值）。</summary>
      <returns>HRESULT 值。</returns>
    </member>
    <member name="P:System.Exception.InnerException">
      <summary>获取导致当前异常的 <see cref="T:System.Exception" /> 实例。</summary>
      <returns>一个 Exception 的实例，描述导致当前异常的错误。 InnerException 属性返回与传递给构造函数的值相同的值，或者，如果没有向构造函数提供内部异常值，则返回 null 引用（Visual Basic 中为 Nothing）。 此属性是只读的。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Exception.Message">
      <summary>获取描述当前异常的消息。</summary>
      <returns>解释异常原因的错误消息或空字符串 ("")。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Exception.Source">
      <summary>获取或设置导致错误的应用程序或对象的名称。</summary>
      <returns>导致错误的应用程序或对象的名称。</returns>
      <exception cref="T:System.ArgumentException">该对象必须为运行时 <see cref="N:System.Reflection" /> 对象</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Exception.StackTrace">
      <summary>获取调用堆栈上直接帧的字符串表示形式。</summary>
      <returns>用于描述调用堆栈的直接帧的字符串。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Exception.ToString">
      <summary>创建并返回当前异常的字符串表示形式。</summary>
      <returns>当前异常的字符串表示形式。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="T:System.FlagsAttribute">
      <summary>指示可以将枚举作为位域（即一组标志）处理。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.FlagsAttribute.#ctor">
      <summary>初始化 <see cref="T:System.FlagsAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.FormatException">
      <summary>当参数格式不符合调用的方法的参数规范时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.FormatException.#ctor">
      <summary>初始化 <see cref="T:System.FormatException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.FormatException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.FormatException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.FormatException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.FormatException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不是空引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="T:System.Func`1">
      <summary>封装一个不具有参数但却返回 <paramref name="TResult" /> 参数指定的类型值的方法。</summary>
      <returns>此委托封装的方法的返回值。</returns>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Func`2">
      <summary>封装一个具有一个参数并返回 <paramref name="TResult" /> 参数指定的类型值的方法。</summary>
      <returns>此委托封装的方法的返回值。</returns>
      <param name="arg">此委托封装的方法的参数。</param>
      <typeparam name="T">此委托封装的方法的参数类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`3">
      <summary>封装一个具有两个参数并返回 <paramref name="TResult" /> 参数指定的类型值的方法。</summary>
      <returns>此委托封装的方法的返回值。</returns>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`4">
      <summary>封装一个具有三个参数并返回 <paramref name="TResult" /> 参数指定的类型值的方法。</summary>
      <returns>此委托封装的方法的返回值。</returns>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`5">
      <summary>封装一个具有四个参数并返回 <paramref name="TResult" /> 参数指定的类型值的方法。</summary>
      <returns>此委托封装的方法的返回值。</returns>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`6">
      <summary>封装一个方法，该方法具有五个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <returns>此委托封装的方法的返回值。</returns>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`7">
      <summary>封装一个方法，该方法有六个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <returns>此委托封装的方法的返回值。</returns>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`8">
      <summary>封装一个函数，该方法具有三个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <returns>此委托封装的方法的返回值。</returns>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`9">
      <summary>封装一个方法，该方法具有八个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <returns>此委托封装的方法的返回值。</returns>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.GC">
      <summary>控制系统垃圾回收器（一种自动回收未使用内存的服务）。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.GC.AddMemoryPressure(System.Int64)">
      <summary>通知运行时在安排垃圾回收时应考虑分配大量的非托管内存。</summary>
      <param name="bytesAllocated">已分配的非托管内存的增量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bytesAllocated" /> 小于或等于零。 - 或 - 在 32 位的计算机上，<paramref name="bytesAllocated" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.GC.Collect">
      <summary>强制对所有代进行即时垃圾回收。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.Collect(System.Int32)">
      <summary>强制对 0 代到指定代进行即时垃圾回收。</summary>
      <param name="generation">可执行垃圾回收的最早的代的编号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> 无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.Collect(System.Int32,System.GCCollectionMode)">
      <summary>强制在 <see cref="T:System.GCCollectionMode" /> 值所指定的时间对 0 代到指定代进行垃圾回收。</summary>
      <param name="generation">可执行垃圾回收的最早的代的编号。</param>
      <param name="mode">一个枚举值，该值指定垃圾回收的行为。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> 无效。 - 或 - <paramref name="mode" /> 不是 <see cref="T:System.GCCollectionMode" /> 值之一。</exception>
    </member>
    <member name="M:System.GC.CollectionCount(System.Int32)">
      <summary>返回已经对对象的指定代进行的垃圾回收次数。</summary>
      <returns>自启动进程以来已经对指定代进行的垃圾回收次数。</returns>
      <param name="generation">对象的代，将针对此代确定垃圾回收计数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> 小于 0。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.GetTotalMemory(System.Boolean)">
      <summary>检索当前认为要分配的字节数。 一个参数，指示此方法是否可以等待较短间隔再返回，以便系统回收垃圾和终结对象。</summary>
      <returns>一个数字，它是托管内存中当前所分配字节数的可用的最佳近似值。</returns>
      <param name="forceFullCollection">如果此方法可以在返回之前等待垃圾回收发生，则为 true；否则为 false。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.KeepAlive(System.Object)">
      <summary>引用指定对象，使其从当前例程开始到调用此方法的那一刻为止均不符合进行垃圾回收的条件。</summary>
      <param name="obj">要引用的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.GC.MaxGeneration">
      <summary>获取系统当前支持的最大代数。</summary>
      <returns>从零到所支持的最大代数间的一个值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.RemoveMemoryPressure(System.Int64)">
      <summary>通知运行时已释放非托管内存，在安排垃圾回收时不需要再考虑它。</summary>
      <param name="bytesAllocated">已释放的非托管内存量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bytesAllocated" /> 小于或等于零。 - 或 - 在 32 位的计算机上，<paramref name="bytesAllocated" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.GC.ReRegisterForFinalize(System.Object)">
      <summary>请求系统调用指定对象的终结器，此前已为该对象调用 <see cref="M:System.GC.SuppressFinalize(System.Object)" />。</summary>
      <param name="obj">必须为其调用终结器的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 为 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.SuppressFinalize(System.Object)">
      <summary>请求系统不要调用指定对象的终结器。</summary>
      <param name="obj">不得为其调用终结器的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 为 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.WaitForPendingFinalizers">
      <summary>挂起当前线程，直到处理终结器队列的线程清空该队列为止。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.GCCollectionMode">
      <summary>指定强制执行的垃圾回收的行为。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.GCCollectionMode.Default">
      <summary>此枚举的默认设置，它当前为 <see cref="F:System.GCCollectionMode.Forced" />。</summary>
    </member>
    <member name="F:System.GCCollectionMode.Forced">
      <summary>强制立即执行垃圾回收。</summary>
    </member>
    <member name="F:System.GCCollectionMode.Optimized">
      <summary>使垃圾回收器可以确定当前时间是否是回收对象的最佳时间。</summary>
    </member>
    <member name="T:System.Guid">
      <summary>表示全局唯一标识符 (GUID)。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Guid.#ctor(System.Byte[])">
      <summary>使用指定的字节数组初始化 <see cref="T:System.Guid" /> 类的新实例。</summary>
      <param name="b">包含初始化 GUID 的值的 16 元素字节数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="b" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="b" /> 的长度不是 16 个字节。</exception>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>使用指定的整数和字节初始化 <see cref="T:System.Guid" /> 类的新实例。</summary>
      <param name="a">GUID 的前 4 个字节。</param>
      <param name="b">GUID 的下两个字节。</param>
      <param name="c">GUID 的下两个字节。</param>
      <param name="d">GUID 的下一个字节。</param>
      <param name="e">GUID 的下一个字节。</param>
      <param name="f">GUID 的下一个字节。</param>
      <param name="g">GUID 的下一个字节。</param>
      <param name="h">GUID 的下一个字节。</param>
      <param name="i">GUID 的下一个字节。</param>
      <param name="j">GUID 的下一个字节。</param>
      <param name="k">GUID 的下一个字节。</param>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])">
      <summary>使用指定的整数和字节数组初始化 <see cref="T:System.Guid" /> 类的新实例。</summary>
      <param name="a">GUID 的前 4 个字节。</param>
      <param name="b">GUID 的下两个字节。</param>
      <param name="c">GUID 的下两个字节。</param>
      <param name="d">GUID 的其余 8 个字节。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="d" /> 的长度不是 8 个字节。</exception>
    </member>
    <member name="M:System.Guid.#ctor(System.String)">
      <summary>使用指定字符串所表示的值初始化 <see cref="T:System.Guid" /> 类的新实例。</summary>
      <param name="g">包含下面任一格式的 GUID 的字符串（“d”表示忽略大小写的十六进制数字）： 32 个连续的数字 dddddddddddddddddddddddddddddddd - 或 - 8、4、4、4 和 12 位数字的分组，各组之间有连线符。 也可以用一对大括号或者圆括号将整个 GUID 括起来： dddddddd-dddd-dddd-dddd-dddddddddddd - 或 - {dddddddd-dddd-dddd-dddd-dddddddddddd} - 或 - (dddddddd-dddd-dddd-dddd-dddddddddddd) - 或 - 8、4 和 4 位数字的分组，和一个 8 组 2 位数字的子集，每组都带有前缀“0x”或“0X”，以逗号分隔。 整个 GUID 和子集用大括号括起来： {0xdddddddd, 0xdddd, 0xdddd,{0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd}} 所有大括号、逗号和“0x”前缀都是必需的。 所有内置的空格都将被忽略。 组中的所有前导零都将被忽略。 组中显示的数字为可在该组显示的有意义数字的最大数目。 您可以指定从 1 到为组显示的位数。 指定的位数被认为是该组低序位的位数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="g" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="g" /> 的格式无效。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="g" /> 的格式无效。</exception>
    </member>
    <member name="M:System.Guid.CompareTo(System.Guid)">
      <summary>将此实例与指定 <see cref="T:System.Guid" /> 对象进行比较并返回对其相对值的指示。</summary>
      <returns>一个有符号数字，指示此实例和 <paramref name="value" /> 的相对值。 返回值 描述 负整数 此实例小于 <paramref name="value" />。 零 此实例等于 <paramref name="value" />。 正整数 此实例大于 <paramref name="value" />。</returns>
      <param name="value">要与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Guid.Empty">
      <summary>
        <see cref="T:System.Guid" /> 结构的只读实例，其值均为零。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Guid.Equals(System.Guid)">
      <summary>返回一个值，该值指示此实例和指定的 <see cref="T:System.Guid" /> 对象是否表示相同的值。</summary>
      <returns>如果 <paramref name="g" /> 等于此实例，则为 true；否则为 false。</returns>
      <param name="g">要与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Guid.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <returns>如果 <paramref name="o" /> 是值与此实例相等的 <see cref="T:System.Guid" />，则为 true；否则为 false。</returns>
      <param name="o">与该实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Guid.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>此实例的哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Guid.NewGuid">
      <summary>初始化 <see cref="T:System.Guid" /> 结构的新实例。</summary>
      <returns>一个新的 GUID 对象。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Guid.op_Equality(System.Guid,System.Guid)">
      <summary>指示两个指定的 <see cref="T:System.Guid" /> 对象的值是否相等。</summary>
      <returns>如果 <paramref name="a" /> 和 <paramref name="b" /> 相等，则为 true；否则为 false。</returns>
      <param name="a">要比较的第一个对象。</param>
      <param name="b">要比较的第二个对象。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Guid.op_Inequality(System.Guid,System.Guid)">
      <summary>指示两个指定的 <see cref="T:System.Guid" /> 对象的值是否不相等。</summary>
      <returns>如果 <paramref name="a" /> 和 <paramref name="b" /> 不相等，则为 true；否则为 false。</returns>
      <param name="a">要比较的第一个对象。</param>
      <param name="b">要比较的第二个对象。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Guid.Parse(System.String)">
      <summary>将 GUID 的字符串表示形式转换为等效的 <see cref="T:System.Guid" /> 结构。</summary>
      <returns>一个结构，包含已分析的值。</returns>
      <param name="input">要转换的 GUID。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 的格式无法识别。</exception>
    </member>
    <member name="M:System.Guid.ParseExact(System.String,System.String)">
      <summary>将 GUID 的字符串表示形式转换为等效的 <see cref="T:System.Guid" /> 结构，前提是该字符串采用的是指定格式。</summary>
      <returns>一个结构，包含已分析的值。</returns>
      <param name="input">要转换的 GUID。</param>
      <param name="format">下列说明符之一，指示当解释 <paramref name="input" /> 时要使用的确切格式：“N”、“D”、“B”、“P”或“X”。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="format" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 的格式无法识别。</exception>
    </member>
    <member name="M:System.Guid.System#IComparable#CompareTo(System.Object)">
      <summary>将此实例与指定对象进行比较并返回一个对二者的相对值的指示。</summary>
      <returns>一个有符号数字，指示此实例和 <paramref name="value" /> 的相对值。 返回值 描述 负整数 此实例小于 <paramref name="value" />。 零 此实例等于 <paramref name="value" />。 正整数 此实例大于 <paramref name="value" />，或 <paramref name="value" /> 为 null。</returns>
      <param name="value">要比较的对象，或为 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Guid" />。</exception>
    </member>
    <member name="M:System.Guid.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>根据所提供的格式说明符，返回此实例值的字符串表示形式。</summary>
      <returns>此 <see cref="T:System.Guid" /> 的值，用一系列指定格式的小写十六进制位表示。</returns>
      <param name="format">一个单格式说明符，它指示如何格式化此 <see cref="T:System.Guid" /> 的值。 <paramref name="format" /> 参数可以是“N”、“D”、“B”、“P”或“X”。 如果 <paramref name="format" /> 为 null 或空字符串 ("")，则使用“D”。</param>
      <param name="provider">（保留）一个对象，用于提供区域性特定的格式设置信息。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 的值不是 null，一个空字符串 ("")，或者下列格式说明符之一：“N”、“D”、“B”、“P”或“X”。</exception>
    </member>
    <member name="M:System.Guid.ToByteArray">
      <summary>返回包含此实例的值的 16 元素字节数组。</summary>
      <returns>16 元素字节数组。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Guid.ToString">
      <summary>返回注册表格式的此实例值的字符串表示形式。</summary>
      <returns>这 <see cref="T:System.Guid" />的值，格式化通过使用“D”格式说明符如下所示: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx  其中 GUID 的值表示为一系列小写的十六进制位，这些十六进制位分别以 8 个、4 个、4 个、4 个和 12 个位为一组并由连字符分隔开。 例如，返回值可以是“382c74c3-721d-4f34-80e5-57657b6cbc27”。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Guid.ToString(System.String)">
      <summary>根据所提供的格式说明符，返回此 <see cref="T:System.Guid" /> 实例值的字符串表示形式。</summary>
      <returns>此 <see cref="T:System.Guid" /> 的值，用一系列指定格式的小写十六进制位表示。</returns>
      <param name="format">一个单格式说明符，它指示如何格式化此 <see cref="T:System.Guid" /> 的值。 <paramref name="format" /> 参数可以是“N”、“D”、“B”、“P”或“X”。 如果 <paramref name="format" /> 为 null 或空字符串 ("")，则使用“D”。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 的值不为 null、空字符串 ("")、"N"、"D"、"B"、"P" 或 "X"。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Guid.TryParse(System.String,System.Guid@)">
      <summary>将 GUID 的字符串表示形式转换为等效的 <see cref="T:System.Guid" /> 结构。</summary>
      <returns>如果分析操作成功，则为 true；否则为 false。</returns>
      <param name="input">要转换的 GUID。</param>
      <param name="result">将包含已分析的值的结构。</param>
    </member>
    <member name="M:System.Guid.TryParseExact(System.String,System.String,System.Guid@)">
      <summary>将 GUID 的字符串表示形式转换为等效的 <see cref="T:System.Guid" /> 结构，前提是该字符串采用的是指定格式。</summary>
      <returns>如果分析操作成功，则为 true；否则为 false。</returns>
      <param name="input">要转换的 GUID。</param>
      <param name="format">下列说明符之一，指示当解释 <paramref name="input" /> 时要使用的确切格式：“N”、“D”、“B”、“P”或“X”。</param>
      <param name="result">将包含已分析的值的结构。</param>
    </member>
    <member name="T:System.IAsyncResult">
      <summary>表示异步操作的状态。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IAsyncResult.AsyncState">
      <summary>获取用户定义的对象，它限定或包含关于异步操作的信息。</summary>
      <returns>用户定义的对象，它限定或包含关于异步操作的信息。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IAsyncResult.AsyncWaitHandle">
      <summary>获取用于等待异步操作完成的 <see cref="T:System.Threading.WaitHandle" />。</summary>
      <returns>用于等待异步操作完成的 <see cref="T:System.Threading.WaitHandle" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IAsyncResult.CompletedSynchronously">
      <summary>获取一个值，该值指示异步操作是否同步完成。</summary>
      <returns>如果异步操作同步完成，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IAsyncResult.IsCompleted">
      <summary>获取一个值，该值指示异步操作是否已完成。</summary>
      <returns>如果操作完成则为 true，否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IComparable">
      <summary>定义一种特定于类型的通用比较方法，值类型或类通过实现此方法对其实例进行排序。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IComparable.CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个值，指示要比较的对象的相对顺序。 返回值的含义如下： 值 含义 小于零 此实例按排序顺序在 <paramref name="obj" /> 前面。 零 此实例与 <paramref name="obj" /> 在排序顺序中出现的位置相同。 大于零 此实例按排序顺序在 <paramref name="obj" /> 后面。</returns>
      <param name="obj">与此实例进行比较的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不具有与此实例相同的类型。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IComparable`1">
      <summary>定义由值类型或类实现的通用的比较方法，以为排序实例创建类型特定的比较方法。</summary>
      <typeparam name="T">要比较的对象的类型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IComparable`1.CompareTo(`0)">
      <summary>比较当前对象和同一类型的另一对象。</summary>
      <returns>一个值，指示要比较的对象的相对顺序。 返回值的含义如下： 值 含义 小于零 此对象小于 <paramref name="other" /> 参数。 零 此对象等于 <paramref name="other" />。 大于零 此对象大于 <paramref name="other" />。</returns>
      <param name="other">与此对象进行比较的对象。</param>
    </member>
    <member name="T:System.IConvertible">
      <summary>定义特定的方法，这些方法将实现引用或值类型的值转换为具有等效值的公共语言运行时类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.GetTypeCode">
      <summary>返回此实例的 <see cref="T:System.TypeCode" />。</summary>
      <returns>枚举常数，它是实现该接口的类或值类型的 <see cref="T:System.TypeCode" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToBoolean(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 Boolean 值。</summary>
      <returns>与此实例的值等效的 Boolean 值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToByte(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将该实例的值转换为等效的 8 位无符号整数。</summary>
      <returns>与该实例的值等效的 8 位无符号整数。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToChar(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 Unicode 字符。</summary>
      <returns>与此实例的值等效的 Unicode 字符。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToDateTime(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 <see cref="T:System.DateTime" />。</summary>
      <returns>与此实例的值等效的 <see cref="T:System.DateTime" /> 实例。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToDecimal(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 <see cref="T:System.Decimal" /> 数字。</summary>
      <returns>与此实例的值等效的 <see cref="T:System.Decimal" /> 数字。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToDouble(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的双精度浮点数字。</summary>
      <returns>与此实例的值等效的双精度浮点数字。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToInt16(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 16 位有符号整数。</summary>
      <returns>与此实例的值等效的 16 位有符号整数。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToInt32(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 32 位有符号整数。</summary>
      <returns>与此实例的值等效的 32 位有符号整数。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToInt64(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 64 位有符号整数。</summary>
      <returns>与此实例的值等效的 64 位有符号整数。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToSByte(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 8 位有符号整数。</summary>
      <returns>与此实例的值等效的 8 位有符号整数。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToSingle(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的单精度浮点数字。</summary>
      <returns>与此实例的值等效的单精度浮点数字。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 <see cref="T:System.String" />。</summary>
      <returns>与此实例的值等效的 <see cref="T:System.String" /> 实例。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为具有等效值的指定 <see cref="T:System.Type" /> 的 <see cref="T:System.Object" />。</summary>
      <returns>其值与此实例值等效的 <paramref name="conversionType" /> 类型的 <see cref="T:System.Object" /> 实例。</returns>
      <param name="conversionType">要将此实例的值转换为的 <see cref="T:System.Type" />。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToUInt16(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将该实例的值转换为等效的 16 位无符号整数。</summary>
      <returns>与该实例的值等效的 16 位无符号整数。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToUInt32(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将该实例的值转换为等效的 32 位无符号整数。</summary>
      <returns>与该实例的值等效的 32 位无符号整数。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToUInt64(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将该实例的值转换为等效的 64 位无符号整数。</summary>
      <returns>与该实例的值等效的 64 位无符号整数。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.ICustomFormatter">
      <summary>定义一种方法，它支持自定义设置对象的值的格式。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式设置信息将指定对象的值转换为等效的字符串表示形式。</summary>
      <returns>
        <paramref name="arg" /> 的值的字符串表示形式，按照 <paramref name="format" /> 和 <paramref name="formatProvider" /> 的指定来进行格式设置。</returns>
      <param name="format">包含格式规范的格式字符串。</param>
      <param name="arg">要设置格式的对象。</param>
      <param name="formatProvider">一个对象，它提供有关当前实例的格式信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IDisposable">
      <summary>定义一种释放分配的资源的方法。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IDisposable.Dispose">
      <summary>执行与释放或重置非托管资源相关的应用程序定义的任务。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IEquatable`1">
      <summary>定义一个通用的方法，由值类型或类实现以创建类型特定的方法，用于确定实例间的相等性。</summary>
      <typeparam name="T">要比较的对象的类型。</typeparam>
    </member>
    <member name="M:System.IEquatable`1.Equals(`0)">
      <summary>指示当前对象是否等于同一类型的另一个对象。</summary>
      <returns>如果当前对象等于 <paramref name="other" /> 参数，则为 true；否则为 false。</returns>
      <param name="other">与此对象进行比较的对象。</param>
    </member>
    <member name="T:System.IFormatProvider">
      <summary>提供用于检索控制格式化的对象的机制。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IFormatProvider.GetFormat(System.Type)">
      <summary>返回一个对象，该对象为指定类型提供格式设置服务。</summary>
      <returns>如果 <see cref="T:System.IFormatProvider" /> 实现能够提供该类型的对象，则为 <paramref name="formatType" /> 所指定对象的实例；否则为 null。</returns>
      <param name="formatType">一个对象，该对象指定要返回的格式对象的类型。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.IFormattable">
      <summary>提供将对象的值格式化为字符串表示形式的功能。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IFormattable.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式格式化当前实例的值。</summary>
      <returns>使用指定格式的当前实例的值。</returns>
      <param name="format">要使用的格式。 - 或 - null 引用（Visual Basic 中为 Nothing）将使用为 <see cref="T:System.IFormattable" /> 实现的类型所定义的默认格式。</param>
      <param name="formatProvider">要用于设置值格式的提供程序。 - 或 - null 引用（Visual Basic 中为 Nothing）将从操作系统的当前区域设置中获取数字格式信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IndexOutOfRangeException">
      <summary>试图访问索引超出数组界限的数组元素时引发的异常。 此类不能被继承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor">
      <summary>初始化 <see cref="T:System.IndexOutOfRangeException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.IndexOutOfRangeException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IndexOutOfRangeException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不是空引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="T:System.Int16">
      <summary>表示 16 位有符号整数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.CompareTo(System.Int16)">
      <summary>将此实例与指定的 16 位有符号整数进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于指定的 16 位有符号整数的值。</summary>
      <returns>一个有符号数字，指示此实例和 <paramref name="value" /> 的相对值。 返回值 描述 小于零 此实例小于 <paramref name="value" />。 零 此实例等于 <paramref name="value" />。 大于零 此实例大于 <paramref name="value" />。</returns>
      <param name="value">要比较的整数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int16.Equals(System.Int16)">
      <summary>返回一个值，该值指示此实例是否与指定的 <see cref="T:System.Int16" /> 值相等。</summary>
      <returns>如果 <paramref name="obj" /> 的值与此实例相同，则为 true；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的 <see cref="T:System.Int16" /> 值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int16.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.Int16" /> 的实例并且等于此实例的值，则为 true；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int16.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Int16.MaxValue">
      <summary>表示 <see cref="T:System.Int16" /> 的最大可能值。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Int16.MinValue">
      <summary>表示 <see cref="T:System.Int16" /> 的最小可能值。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效 16 位有符号整数。</summary>
      <returns>与 <paramref name="s" /> 中包含的数字等效的 16 位有符号整数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将指定样式的数字的字符串表示形式转换为它的等效 16 位有符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 16 位有符号整数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不符合 <paramref name="style" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" /> 的数字。 - 或 - <paramref name="s" /> 包含非零的小数位。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 16 位有符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 16 位有符号整数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" />，它提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不符合 <paramref name="style" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" /> 的数字。 - 或 - <paramref name="s" /> 包含非零的小数位。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.IFormatProvider)">
      <summary>将指定的区域性特定格式的数字的字符串表示形式转换为它的等效 16 位有符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 16 位有符号整数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" />，它提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。 返回值 含义 小于零 此实例按排序顺序在 <paramref name="value" /> 前面。 零 此实例与 <paramref name="value" /> 按排序顺序中出现的位置相同。 大于零 此实例按排序顺序在 <paramref name="value" /> 后面。 - 或 - <paramref name="value" /> 为 null。</returns>
      <param name="value">与此实例进行比较的 object，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Int16" />。</exception>
    </member>
    <member name="M:System.Int16.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由减号（如果值为负）和没有前导零的从 0 到 9 的数字序列组成。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="provider" /> 指定。</returns>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" />，它提供区域性特定的格式设置信息。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.ToString(System.String)">
      <summary>使用指定的格式，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <param name="format">一个数值格式字符串。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式设置信息，将此实例的数值转换为其等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
      <param name="format">一个数值格式字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int16@)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 16 位有符号整数。 一个指示转换是否成功的返回值。</summary>
      <returns>如果成功转换了 <paramref name="s" />，则为 true；否则为 false。</returns>
      <param name="s">包含要转换的数字的字符串。 该字符串使用由 <paramref name="style" /> 指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 所包含的数字等效的 16 位有符号整数值；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 null，格式不符合 <paramref name="style" />，或者表示的数字小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" />，则转换会失败。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.TryParse(System.String,System.Int16@)">
      <summary>将数字的字符串表示形式转换为它的等效 16 位有符号整数。 一个指示转换是否成功的返回值。</summary>
      <returns>如果成功转换了 <paramref name="s" />，则为 true；否则为 false。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 所包含的数字等效的 16 位有符号整数值；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 null，格式不正确，或者表示的数字小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" />，则转换会失败。 该参数未经初始化即被传递。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Int32">
      <summary>表示 32 位有符号整数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.CompareTo(System.Int32)">
      <summary>将此实例与指定的 32 位有符号整数进行比较并返回对其相对值的指示。</summary>
      <returns>一个有符号数字，指示此实例和 <paramref name="value" /> 的相对值。 返回值 描述 小于零 此实例小于 <paramref name="value" />。 零 此实例等于 <paramref name="value" />。 大于零 此实例大于 <paramref name="value" />。</returns>
      <param name="value">要比较的整数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int32.Equals(System.Int32)">
      <summary>返回一个值，该值指示此实例是否与指定的 <see cref="T:System.Int32" /> 值相等。</summary>
      <returns>如果 <paramref name="obj" /> 的值与此实例相同，则为 true；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的 <see cref="T:System.Int32" /> 值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int32.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.Int32" /> 的实例并且等于此实例的值，则为 true；否则为 false。</returns>
      <param name="obj">与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int32.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Int32.MaxValue">
      <summary>表示 <see cref="T:System.Int32" /> 的最大可能值。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Int32.MinValue">
      <summary>表示 <see cref="T:System.Int32" /> 的最小可能值。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效 32 位有符号整数。</summary>
      <returns>与 <paramref name="s" /> 中包含的数字等效的 32 位有符号整数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将指定样式的数字的字符串表示形式转换为它的等效 32 位有符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 32 位有符号整数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不符合 <paramref name="style" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" /> 的数字。 - 或 - <paramref name="s" /> 包含非零的小数位。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 32 位有符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 32 位有符号整数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，用于提供有关 <paramref name="s" /> 格式的区域性特定信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不符合 <paramref name="style" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" /> 的数字。 - 或 - <paramref name="s" /> 包含非零的小数位。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.IFormatProvider)">
      <summary>将指定的区域性特定格式的数字的字符串表示形式转换为它的等效 32 位有符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 32 位有符号整数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。 返回值 含义 小于零 此实例按排序顺序在 <paramref name="value" /> 前面。 零 此实例与 <paramref name="value" /> 按排序顺序中出现的位置相同。 大于零 此实例按排序顺序在 <paramref name="value" /> 后面。 - 或 - <paramref name="value" /> 为 null。</returns>
      <param name="value">与此实例进行比较的 object，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Int32" />。</exception>
    </member>
    <member name="M:System.Int32.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由减号（如果值为负）和没有前导零的从 0 到 9 的数字序列组成。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="provider" /> 指定。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.ToString(System.String)">
      <summary>使用指定的格式，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <param name="format">标准或自定义的数值格式字符串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效或不受支持。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
      <param name="format">标准或自定义的数值格式字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效或不受支持。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 32 位有符号整数。 一个指示转换是否成功的返回值。</summary>
      <returns>如果成功转换了 <paramref name="s" />，则为 true；否则为 false。</returns>
      <param name="s">包含要转换的数字的字符串。 该字符串使用由 <paramref name="style" /> 指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 所包含的数字等效的 32 位有符号整数值；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 null，格式不符合 <paramref name="style" />，或者表示的数字小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" />，则转换会失败。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.TryParse(System.String,System.Int32@)">
      <summary>将数字的字符串表示形式转换为它的等效 32 位有符号整数。 一个指示转换是否成功的返回值。</summary>
      <returns>如果成功转换了 <paramref name="s" />，则为 true；否则为 false。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 所包含的数字等效的 32 位有符号整数值；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 null，格式不正确，或者表示的数字小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" />，则转换会失败。 该参数未经初始化即被传递。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Int64">
      <summary>表示 64 位有符号整数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.CompareTo(System.Int64)">
      <summary>将此实例与指定的 64 位有符号整数进行比较并返回对其相对值的指示。</summary>
      <returns>一个有符号数字，指示此实例和 <paramref name="value" /> 的相对值。 返回值 描述 小于零 此实例小于 <paramref name="value" />。 零 此实例等于 <paramref name="value" />。 大于零 此实例大于 <paramref name="value" />。</returns>
      <param name="value">要比较的整数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int64.Equals(System.Int64)">
      <summary>返回一个值，该值指示此实例是否与指定的 <see cref="T:System.Int64" /> 值相等。</summary>
      <returns>如果 <paramref name="obj" /> 的值与此实例相同，则为 true；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的 <see cref="T:System.Int64" /> 值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int64.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.Int64" /> 的实例并且与此实例的值相等，则为 true；否则为 false。</returns>
      <param name="obj">与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int64.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Int64.MaxValue">
      <summary>表示 Int64 的最大可能值。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Int64.MinValue">
      <summary>表示 Int64 的最小可能值。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效 64 位有符号整数。</summary>
      <returns>与 <paramref name="s" /> 中包含的数字等效的 64 位有符号整数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将指定样式的数字的字符串表示形式转换为它的等效 64 位有符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 64 位有符号整数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">
        <see cref="T:System.Globalization.NumberStyles" /> 值的按位组合，指示 <paramref name="s" /> 允许使用的格式。 一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不符合 <paramref name="style" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" /> 的数字。 - 或 - <paramref name="style" /> 支持小数位但 <paramref name="s" /> 包含非零的小数位。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 64 位有符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 64 位有符号整数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" />，它提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不符合 <paramref name="style" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" /> 的数字。 - 或 - <paramref name="style" /> 支持小数位但 <paramref name="s" /> 包含非零的小数位。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.IFormatProvider)">
      <summary>将指定的区域性特定格式的数字的字符串表示形式转换为它的等效 64 位有符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 64 位有符号整数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。 返回值 含义 小于零 此实例按排序顺序在 <paramref name="value" /> 前面。 零 此实例与 <paramref name="value" /> 按排序顺序中出现的位置相同。 大于零 此实例按排序顺序在 <paramref name="value" /> 后面。 - 或 - <paramref name="value" /> 为 null。</returns>
      <param name="value">与此实例进行比较的 object，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Int64" />。</exception>
    </member>
    <member name="M:System.Int64.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由减号（如果值为负）和没有前导零的从 0 到 9 的数字序列组成。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="provider" /> 指定。</returns>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" />，它提供区域性特定的格式设置信息。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.ToString(System.String)">
      <summary>使用指定的格式，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <param name="format">一个数值格式字符串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效或不受支持。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
      <param name="format">一个数值格式字符串。</param>
      <param name="provider">一个对象，它提供有关此实例的区域性特定格式设置信息。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效或不受支持。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int64@)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 64 位有符号整数。 一个指示转换是否成功的返回值。</summary>
      <returns>如果成功转换了 <paramref name="s" />，则为 true；否则为 false。</returns>
      <param name="s">包含要转换的数字的字符串。 该字符串使用由 <paramref name="style" /> 指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所包含的数字等效的 64 位无符号整数值；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 null，格式不符合 <paramref name="style" />，或者表示的数字小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" />，则转换会失败。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.TryParse(System.String,System.Int64@)">
      <summary>将数字的字符串表示形式转换为它的等效 64 位有符号整数。 一个指示转换是否成功的返回值。</summary>
      <returns>如果成功转换了 <paramref name="s" />，则为 true；否则为 false。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所包含的数字等效的 64 位无符号整数值；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 null，格式不正确，或者表示的数字小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" />，则转换会失败。 该参数未经初始化即被传递。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.IntPtr">
      <summary>用于表示指针或句柄的平台特定类型。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int32)">
      <summary>使用指定的 32 位指针或句柄初始化 <see cref="T:System.IntPtr" /> 的新实例。</summary>
      <param name="value">32 位有符号的整数中包含的指针或句柄。</param>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int64)">
      <summary>使用指定的 64 位指针初始化 <see cref="T:System.IntPtr" /> 的新实例。</summary>
      <param name="value">64 位有符号的整数中包含的指针或句柄。</param>
      <exception cref="T:System.OverflowException">在 32 位的平台上，<paramref name="value" /> 太大或太小，无法表示为 <see cref="T:System.IntPtr" />。</exception>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Void*)">
      <summary>使用指定的指向未指定类型的指针来初始化 <see cref="T:System.IntPtr" /> 的新实例。</summary>
      <param name="value">指向未指定类型的指针。</param>
    </member>
    <member name="M:System.IntPtr.Add(System.IntPtr,System.Int32)">
      <summary>为指针值增加偏移量。</summary>
      <returns>一个新指针，它反映了为 <paramref name="pointer" /> 增加 <paramref name="offset" />。</returns>
      <param name="pointer">要为其增加偏移量的指针。</param>
      <param name="offset">要增加的偏移量。</param>
    </member>
    <member name="M:System.IntPtr.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.IntPtr" /> 的实例并且等于此实例的值，则为 true；否则为 false。</returns>
      <param name="obj">与此实例进行比较的对象或为 null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IntPtr.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)">
      <summary>为指针值增加偏移量。</summary>
      <returns>一个新指针，它反映了为 <paramref name="pointer" /> 增加 <paramref name="offset" />。</returns>
      <param name="pointer">要为其增加偏移量的指针。</param>
      <param name="offset">要增加的偏移量。</param>
    </member>
    <member name="M:System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)">
      <summary>确定 <see cref="T:System.IntPtr" /> 的两个指定的实例是否相等。</summary>
      <returns>如果 <paramref name="value1" /> 等于 <paramref name="value2" />，则为 true；否则为 false。</returns>
      <param name="value1">要比较的第一个指针或句柄。</param>
      <param name="value2">要比较的第二个指针或句柄。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int32)~System.IntPtr">
      <summary>将 32 位有符号的整数值转换成 <see cref="T:System.IntPtr" />。</summary>
      <returns>初始化为 <paramref name="value" /> 的 <see cref="T:System.IntPtr" /> 新实例。</returns>
      <param name="value">32 位带符号整数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int64)~System.IntPtr">
      <summary>将 64 位有符号的整数值转换成 <see cref="T:System.IntPtr" />。</summary>
      <returns>初始化为 <paramref name="value" /> 的 <see cref="T:System.IntPtr" /> 新实例。</returns>
      <param name="value">64 位的有符号整数。</param>
      <exception cref="T:System.OverflowException">在 32 位的平台上，<paramref name="value" /> 太大，无法表示为一个 <see cref="T:System.IntPtr" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int64">
      <summary>将指定的 <see cref="T:System.IntPtr" /> 的值转换为 64 位有符号整数。</summary>
      <returns>
        <paramref name="value" /> 的内容。</returns>
      <param name="value">要转换的指针或句柄。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Void*">
      <summary>将指定的 <see cref="T:System.IntPtr" /> 的值转换为指向未指定的类型的指针。</summary>
      <returns>
        <paramref name="value" /> 的内容。</returns>
      <param name="value">要转换的指针或句柄。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int32">
      <summary>将指定的 <see cref="T:System.IntPtr" /> 的值转换为 32 位有符号整数。</summary>
      <returns>
        <paramref name="value" /> 的内容。</returns>
      <param name="value">要转换的指针或句柄。</param>
      <exception cref="T:System.OverflowException">在 64 位平台上，<paramref name="value" /> 的值太大，无法表示为一个 32 位有符号整数。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr">
      <summary>将指向未指定类型的指定指针转换为 <see cref="T:System.IntPtr" />。</summary>
      <returns>初始化为 <paramref name="value" /> 的 <see cref="T:System.IntPtr" /> 新实例。</returns>
      <param name="value">指向未指定类型的指针。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)">
      <summary>确定 <see cref="T:System.IntPtr" /> 的两个指定的实例是否不等。</summary>
      <returns>如果 <paramref name="value1" /> 不等于 <paramref name="value2" />，则为 true；否则为 false。</returns>
      <param name="value1">要比较的第一个指针或句柄。</param>
      <param name="value2">要比较的第二个指针或句柄。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)">
      <summary>从指针值中减去偏移量。</summary>
      <returns>一个新指针，它反映了从 <paramref name="pointer" /> 减去 <paramref name="offset" />。</returns>
      <param name="pointer">要从中减去偏移量的指针。</param>
      <param name="offset">要减去的偏移量。</param>
    </member>
    <member name="P:System.IntPtr.Size">
      <summary>获得此实例的大小。</summary>
      <returns>此过程中的指针或句柄的大小，按字节计。 此属性的值在 32 位平台上为 4，在 64 位平台上为 8。 通过 C# 和 Visual Basic 编译器编译代码时，可以通过设置 /platform 开关定义该进程类型。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IntPtr.Subtract(System.IntPtr,System.Int32)">
      <summary>从指针值中减去偏移量。</summary>
      <returns>一个新指针，它反映了从 <paramref name="pointer" /> 减去 <paramref name="offset" />。</returns>
      <param name="pointer">要从中减去偏移量的指针。</param>
      <param name="offset">要减去的偏移量。</param>
    </member>
    <member name="M:System.IntPtr.ToInt32">
      <summary>将此实例的值转换为 32 位有符号的整数。</summary>
      <returns>与此实例的值相等的 32 位有符号整数。</returns>
      <exception cref="T:System.OverflowException">在 64 位平台上，此实例的值太大或太小，无法表示为一个 32 位有符号的整数。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IntPtr.ToInt64">
      <summary>将此实例的值转换为 64 位有符号的整数。</summary>
      <returns>与此实例的值相等的 64 位有符号整数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IntPtr.ToPointer">
      <summary>将此实例的值转换为指向未指定的类型的指针。</summary>
      <returns>指向 <see cref="T:System.Void" /> 的指针，即是说，该指针所指向的内存包含有未指定的类型的数据。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IntPtr.ToString">
      <summary>将当前 <see cref="T:System.IntPtr" /> 对象的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IntPtr.ToString(System.String)">
      <summary>将当前 <see cref="T:System.IntPtr" /> 对象的数值转换为其等效的字符串表示形式。</summary>
      <returns>当前 <see cref="T:System.IntPtr" /> 对象的值的字符串表示形式。</returns>
      <param name="format">格式规范，控制当前 <see cref="T:System.IntPtr" /> 对象的转换方式。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.IntPtr.Zero">
      <summary>一个只读字段，代表已初始化为零的指针或句柄。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.InvalidCastException">
      <summary>因无效类型转换或显式转换引发的异常。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.InvalidCastException.#ctor">
      <summary>初始化 <see cref="T:System.InvalidCastException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.InvalidCastException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.InvalidCastException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不是空引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String,System.Int32)">
      <summary>使用指定的消息和错误代码初始化 <see cref="T:System.InvalidCastException" /> 类的新实例。</summary>
      <param name="message">指示所发生异常的原因的消息。</param>
      <param name="errorCode">与异常关联的错误代码 (HRESULT) 值。</param>
    </member>
    <member name="T:System.InvalidOperationException">
      <summary>当方法调用对于对象的当前状态无效时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.InvalidOperationException.#ctor">
      <summary>初始化 <see cref="T:System.InvalidOperationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.InvalidOperationException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.InvalidOperationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不是空引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="T:System.InvalidTimeZoneException">
      <summary>时区信息无效时引发的异常。</summary>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor">
      <summary>使用系统提供的消息初始化 <see cref="T:System.InvalidTimeZoneException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor(System.String)">
      <summary>使用指定的消息字符串初始化 <see cref="T:System.InvalidTimeZoneException" /> 类的新实例。</summary>
      <param name="message">描述异常的字符串。</param>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对导致此异常的内部异常的引用来初始化 <see cref="T:System.InvalidTimeZoneException" /> 类的新实例。</summary>
      <param name="message">描述异常的字符串。</param>
      <param name="innerException">导致当前异常的异常。</param>
    </member>
    <member name="T:System.IObservable`1">
      <summary>定义基于推送的通知的提供程序。</summary>
      <typeparam name="T">提供通知信息的对象。</typeparam>
    </member>
    <member name="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
      <summary>通知提供程序：某观察程序将要接收通知。</summary>
      <returns>对允许观察者在提供程序发送完通知前停止接收这些通知的接口的引用。</returns>
      <param name="observer">要接收通知的对象。</param>
    </member>
    <member name="T:System.IObserver`1">
      <summary>提供用于接收基于推送的通知的机制。</summary>
      <typeparam name="T">提供通知信息的对象。</typeparam>
    </member>
    <member name="M:System.IObserver`1.OnCompleted">
      <summary>通知观察者，提供程序已完成发送基于推送的通知。</summary>
    </member>
    <member name="M:System.IObserver`1.OnError(System.Exception)">
      <summary>通知观察者，提供程序遇到错误情况。</summary>
      <param name="error">一个提供有关错误的附加信息的对象。</param>
    </member>
    <member name="M:System.IObserver`1.OnNext(`0)">
      <summary>向观察者提供新数据。</summary>
      <param name="value">当前的通知信息。</param>
    </member>
    <member name="T:System.IServiceProvider">
      <summary>定义一种检索服务对象的机制，服务对象是为其他对象提供自定义支持的对象。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IServiceProvider.GetService(System.Type)">
      <summary>获取指定类型的服务对象。</summary>
      <returns>
        <paramref name="serviceType" /> 类型的服务对象。 - 或 - 如果没有 <paramref name="serviceType" /> 类型的服务对象，则为 null。</returns>
      <param name="serviceType">一个对象，它指定要获取的服务对象的类型。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Lazy`1">
      <summary>提供对延迟初始化的支持。</summary>
      <typeparam name="T">指定正在延迟初始化的对象的类型。</typeparam>
    </member>
    <member name="M:System.Lazy`1.#ctor">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例。 发生延迟初始化时，使用目标类型的默认构造函数。</summary>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例。 发生延迟初始化时，使用目标类型的默认构造函数和指定的初始化模式。</summary>
      <param name="isThreadSafe">true 表示此示例可由多个线程同时使用；false 表示此实例一次只能由一个线程使用。</param>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Func{`0})">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例。 发生延迟初始化时，使用指定的初始化函数。</summary>
      <param name="valueFactory">在需要时被调用以产生延迟初始化值的委托。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> 为 null。</exception>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例。 发生延迟初始化时，使用指定的初始化函数和初始化模式。</summary>
      <param name="valueFactory">在需要时被调用以产生延迟初始化值的委托。</param>
      <param name="isThreadSafe">true 表示此示例可由多个线程同时使用；false 表示此实例一次只能由一个线程使用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> 为 null。</exception>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例，其中使用指定的初始化函数和线程安全性模式。</summary>
      <param name="valueFactory">在需要时被调用以产生延迟初始化值的委托。</param>
      <param name="mode">指定线程安全性模式的枚举值之一。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> 包含无效值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> 为 null。</exception>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例，其中使用 <paramref name="T" /> 的默认构造函数和指定的线程安全性模式。</summary>
      <param name="mode">指定线程安全性模式的枚举值之一。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> 包含无效值。</exception>
    </member>
    <member name="P:System.Lazy`1.IsValueCreated">
      <summary>获取一个值，该值指示是否已为此 <see cref="T:System.Lazy`1" /> 实例创建一个值。</summary>
      <returns>如果已为此 <see cref="T:System.Lazy`1" /> 实例创建了一个值，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Lazy`1.ToString">
      <summary>创建并返回此实例的 <see cref="P:System.Lazy`1.Value" /> 属性的字符串表示形式。</summary>
      <returns>对该属性调用 <see cref="M:System.Object.ToString" /> 方法的结果（在 <see cref="P:System.Lazy`1.Value" /> 属性上），如果值可创建（即如果 <see cref="P:System.Lazy`1.IsValueCreated" /> 属性返回 true）。 否则，指示该值尚未创建的字符串。</returns>
      <exception cref="T:System.NullReferenceException">
        <see cref="P:System.Lazy`1.Value" /> 属性为 null。</exception>
    </member>
    <member name="P:System.Lazy`1.Value">
      <summary>获取当前 <see cref="T:System.Lazy`1" /> 实例的延迟初始化值。</summary>
      <returns>当前 <see cref="T:System.Lazy`1" /> 实例的延迟初始化值。</returns>
      <exception cref="T:System.MemberAccessException">
        <see cref="T:System.Lazy`1" /> 实例初始化为使用正在延迟初始化的类型的默认构造函数，并且缺少访问该构造函数的权限。</exception>
      <exception cref="T:System.MissingMemberException">
        <see cref="T:System.Lazy`1" /> 实例初始化为使用正在惰性初始化的类型的默认构造函数，并且该类型没有无参数的公共构造函数。</exception>
      <exception cref="T:System.InvalidOperationException">初始化函数尝试访问此实例上的 <see cref="P:System.Lazy`1.Value" />。</exception>
    </member>
    <member name="T:System.Math">
      <summary>为三角函数、对数函数和其他通用数学函数提供常数和静态方法。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Abs(System.Decimal)">
      <summary>返回 <see cref="T:System.Decimal" /> 数字的绝对值。</summary>
      <returns>十进制数 x，使其满足 0 ≤ x ≤<see cref="F:System.Decimal.MaxValue" />。</returns>
      <param name="value">但大于或等于 <see cref="F:System.Decimal.MinValue" />，但小于或等于 <see cref="F:System.Decimal.MaxValue" /> 的数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Abs(System.Double)">
      <summary>返回双精度浮点数字的绝对值。</summary>
      <returns>一个双精度浮点数 x，满足 0 ≤ x ≤<see cref="F:System.Double.MaxValue" />。</returns>
      <param name="value">一个大于或等于 <see cref="F:System.Double.MinValue" />，但小于或等于的数 <see cref="F:System.Double.MaxValue" />。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Abs(System.Int16)">
      <summary>返回 16 位有符号整数的绝对值。</summary>
      <returns>16 位有符号整数 x，满足 0 ≤ x ≤<see cref="F:System.Int16.MaxValue" />。</returns>
      <param name="value">一个大于 <see cref="F:System.Int16.MinValue" />，但小于或等于 <see cref="F:System.Int16.MaxValue" /> 的数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 等于 <see cref="F:System.Int16.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Abs(System.Int32)">
      <summary>返回 32 位有符号整数的绝对值。</summary>
      <returns>32 位有符号整数 x，满足 0 ≤ x ≤<see cref="F:System.Int32.MaxValue" />。</returns>
      <param name="value">一个大于 <see cref="F:System.Int32.MinValue" />，但小于或等于 <see cref="F:System.Int32.MaxValue" /> 的数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 等于 <see cref="F:System.Int32.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Abs(System.Int64)">
      <summary>返回 64 位有符号整数的绝对值。</summary>
      <returns>64 位有符号整数 x，满足 0 ≤ x ≤<see cref="F:System.Int64.MaxValue" />。</returns>
      <param name="value">一个大于 <see cref="F:System.Int64.MinValue" />，但小于或等于 <see cref="F:System.Int64.MaxValue" /> 的数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 等于 <see cref="F:System.Int64.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Abs(System.SByte)">
      <summary>返回 8 位有符号整数的绝对值。</summary>
      <returns>8 位有符号整数 x，满足 0 ≤ x ≤<see cref="F:System.SByte.MaxValue" />。</returns>
      <param name="value">一个大于 <see cref="F:System.SByte.MinValue" />，但小于或等于 <see cref="F:System.SByte.MaxValue" /> 的数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 等于 <see cref="F:System.SByte.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Abs(System.Single)">
      <summary>返回单精度浮点数字的绝对值。</summary>
      <returns>单精度浮点数 x，满足 0 ≤ x ≤<see cref="F:System.Single.MaxValue" />。</returns>
      <param name="value">但大于或等于 <see cref="F:System.Single.MinValue" />，但小于或等于 <see cref="F:System.Single.MaxValue" /> 的数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Acos(System.Double)">
      <summary>返回余弦值为指定数字的角度。</summary>
      <returns>角度 θ，以弧度为单位，满足 0 ≤θ≤π - 或 - 如果 <paramref name="d" /> &lt; -1 或 <paramref name="d" /> &gt; 1 或 <paramref name="d" /> 等于 <see cref="F:System.Double.NaN" /> 则为 <see cref="F:System.Double.NaN" />。</returns>
      <param name="d">代表余弦的数字，其中 <paramref name="d" /> 必须大于或等于 -1，但小于或等于 1。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Asin(System.Double)">
      <summary>返回正弦值为指定数字的角度。</summary>
      <returns>角度 θ，以弧度为单位，满足 -π/2 ≤θ≤π/2 - 或 - 如果 <paramref name="d" /> &lt; -1 或 <paramref name="d" /> &gt; 1 或 <paramref name="d" /> 等于 <see cref="F:System.Double.NaN" /> 则为 <see cref="F:System.Double.NaN" />。</returns>
      <param name="d">代表正弦的数字，其中 <paramref name="d" /> 必须大于或等于 -1，但小于或等于 1。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Atan(System.Double)">
      <summary>返回正切值为指定数字的角度。</summary>
      <returns>角度 θ，以弧度为单位，满足 -π/2 ≤θ≤π/2。 - 或 - 如果 <paramref name="d" /> 等于 <see cref="F:System.Double.NaN" />，则为 <see cref="F:System.Double.NaN" />；如果 <paramref name="d" /> 等于 <see cref="F:System.Double.NegativeInfinity" />，则为舍入为双精度值 (-1.5707963267949) 的 -π/2；或者如果 <paramref name="d" /> 等于 <see cref="F:System.Double.PositiveInfinity" />，则为舍入为双精度值 (1.5707963267949) 的 π/2。</returns>
      <param name="d">表示正切值的数字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Atan2(System.Double,System.Double)">
      <summary>返回正切值为两个指定数字的商的角度。</summary>
      <returns>角度 θ，以弧度为单位，满足 -π≤θ≤π，且 tan(θ) = <paramref name="y" /> / <paramref name="x" />，其中 (<paramref name="x" />, <paramref name="y" />) 是笛卡尔平面中的点。 请看下面： 如果 (<paramref name="x" />, <paramref name="y" />) 在第 1 象限，则 0 &lt; θ &lt; π/2。 如果 (<paramref name="x" />, <paramref name="y" />) 在第 2 象限，则 π/2 &lt; θ≤π。 如果 (<paramref name="x" />, <paramref name="y" />) 在第 3 象限，则 -π &lt; θ &lt; -π/2。 如果 (<paramref name="x" />, <paramref name="y" />) 在第 4 象限，则 -π/2 &lt; θ  &lt; 0。 如果点在象限的边界上，则返回值如下： 如果 y 为 0 并且 x 不为负值，则 θ = 0。 如果 y 为 0 并且 x 为负值，则 θ = π。 如果 y 为正值并且 x 为 0，则 θ = π/2。 如果 y 为负值并且 x 为 0，则 θ = -π/2。 如果 <paramref name="x" /> 或 <paramref name="y" /> 是 <see cref="F:System.Double.NaN" />，或者如果 <paramref name="x" /> 和 <paramref name="y" /> 是 <see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" />，则该方法返回 <see cref="F:System.Double.NaN" />。</returns>
      <param name="y">点的 y 坐标。</param>
      <param name="x">点的 x 坐标。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Ceiling(System.Decimal)">
      <summary>返回大于或等于指定的十进制数的最小整数值。</summary>
      <returns>大于或等于 <paramref name="d" /> 的最小整数值。 请注意，此方法返回 <see cref="T:System.Decimal" />，而不是整数类型。</returns>
      <param name="d">一个小数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Ceiling(System.Double)">
      <summary>返回大于或等于指定的双精度浮点数的最小整数值。</summary>
      <returns>大于或等于 <paramref name="a" /> 的最小整数值。 如果 <paramref name="a" /> 等于 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，则返回该值。 请注意，此方法返回 <see cref="T:System.Double" />，而不是整数类型。</returns>
      <param name="a">一个双精度浮点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Cos(System.Double)">
      <summary>返回指定角度的余弦值。</summary>
      <returns>
        <paramref name="d" /> 的余弦值。 如果 <paramref name="d" /> 等于 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，此方法将返回 <see cref="F:System.Double.NaN" />。</returns>
      <param name="d">以弧度计量的角度。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Cosh(System.Double)">
      <summary>返回指定角度的双曲余弦值。</summary>
      <returns>
        <paramref name="value" /> 的双曲余弦值。 如果 <paramref name="value" /> 等于 <see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，则返回 <see cref="F:System.Double.PositiveInfinity" />。 如果 <paramref name="value" /> 等于 <see cref="F:System.Double.NaN" />，则返回 <see cref="F:System.Double.NaN" />。</returns>
      <param name="value">以弧度计量的角度。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Math.E">
      <summary>表示自然对数的底，它由常数 e 指定。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Exp(System.Double)">
      <summary>返回 e 的指定次幂。</summary>
      <returns>数字 e 的 <paramref name="d" /> 次幂。 如果 <paramref name="d" /> 等于 <see cref="F:System.Double.NaN" /> 或 <see cref="F:System.Double.PositiveInfinity" />，则返回该值。 如果 <paramref name="d" /> 等于 <see cref="F:System.Double.NegativeInfinity" />，则返回 0。</returns>
      <param name="d">指定幂的数字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Floor(System.Decimal)">
      <summary>返回小于或等于指定小数的最大整数。</summary>
      <returns>小于或等于 <paramref name="d" /> 的最大整数。</returns>
      <param name="d">一个小数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Floor(System.Double)">
      <summary>返回小于或等于指定双精度浮点数的最大整数。</summary>
      <returns>小于或等于 <paramref name="d" /> 的最大整数。 如果 <paramref name="d" /> 等于 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，则返回该值。</returns>
      <param name="d">一个双精度浮点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.IEEERemainder(System.Double,System.Double)">
      <summary>返回一指定数字被另一指定数字相除的余数。</summary>
      <returns>该数等于 <paramref name="x" /> - ( <paramref name="y" /> Q)，其中 Q 是 <paramref name="x" /> / <paramref name="y" /> 的商的最接近整数（如果 <paramref name="x" /> / <paramref name="y" /> 在两个整数中间，则返回偶数）。 如果 <paramref name="x" /> - ( <paramref name="y" /> Q) 为零，则在 <paramref name="x" /> 为正时返回值 +0，而在 <paramref name="x" /> 为负时返回 -0。 如果 <paramref name="y" /> 等于 0，则返回 <see cref="F:System.Double.NaN" />。</returns>
      <param name="x">被除数。</param>
      <param name="y">除数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Log(System.Double)">
      <summary>返回指定数字的自然对数（底为 e）。</summary>
      <returns>下表中的值之一。 <paramref name="d" /> 参数 返回值 正 <paramref name="d" /> 的自然对数，即 ln <paramref name="d" /> 或 log e<paramref name="d" /> 零 <see cref="F:System.Double.NegativeInfinity" />负数 <see cref="F:System.Double.NaN" />等于 <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" />等于 <see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
      <param name="d">要查找其对数的数字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Log(System.Double,System.Double)">
      <summary>返回指定数字在使用指定底时的对数。</summary>
      <returns>下表中的值之一。 （+Infinity 表示 <see cref="F:System.Double.PositiveInfinity" />，-Infinity 表示 <see cref="F:System.Double.NegativeInfinity" />，NaN 表示 <see cref="F:System.Double.NaN" />。） <paramref name="a" /><paramref name="newBase" />返回值 <paramref name="a" />&gt; 0 (0 &lt;<paramref name="newBase" />&lt; 1) 或 (<paramref name="newBase" />&gt; 1) lognewBase(a) <paramref name="a" />&lt; 0 （任意值） NaN （任意值） <paramref name="newBase" />&lt; 0 NaN <paramref name="a" /> != 1 <paramref name="newBase" /> = 0 NaN <paramref name="a" /> != 1 <paramref name="newBase" /> = +Infinity NaN <paramref name="a" /> = NaN （任意值） NaN （任意值） <paramref name="newBase" /> = NaN NaN （任意值） <paramref name="newBase" /> = 1 NaN <paramref name="a" /> = 0 0 &lt;<paramref name="newBase" />&lt; 1 +Infinity <paramref name="a" /> = 0 <paramref name="newBase" />&gt; 1 -Infinity <paramref name="a" /> = +Infinity 0 &lt;<paramref name="newBase" />&lt; 1 -Infinity <paramref name="a" /> = +Infinity <paramref name="newBase" />&gt; 1 +Infinity <paramref name="a" /> = 1 <paramref name="newBase" /> = 0 0 <paramref name="a" /> = 1 <paramref name="newBase" /> = +Infinity 0</returns>
      <param name="a">要查找其对数的数字。</param>
      <param name="newBase">对数的底。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Log10(System.Double)">
      <summary>返回指定数字以 10 为底的对数。</summary>
      <returns>下表中的值之一。 <paramref name="d" /> 参数 返回值 正 <paramref name="d" /> 的以 10 为底的对数，即 log 10<paramref name="d" />。 零 <see cref="F:System.Double.NegativeInfinity" />负数 <see cref="F:System.Double.NaN" />等于 <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" />等于 <see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
      <param name="d">要查找其对数的数字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Max(System.Byte,System.Byte)">
      <summary>返回两个 8 位无符号整数中较大的一个。</summary>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。</returns>
      <param name="val1">要比较的两个 8 位无符号整数中的第一个。</param>
      <param name="val2">要比较的两个 8 位无符号整数中的第二个。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Max(System.Decimal,System.Decimal)">
      <summary>返回两个十进制数中较大的一个。</summary>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。</returns>
      <param name="val1">要比较的两个十进制数字中的第一个。</param>
      <param name="val2">要比较的两个十进制数字中的第二个。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Max(System.Double,System.Double)">
      <summary>返回两个双精度浮点数字中较大的一个。</summary>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。 如果 <paramref name="val1" /> 或 <paramref name="val2" /> 或者 <paramref name="val1" /> 和 <paramref name="val2" /> 都等于 <see cref="F:System.Double.NaN" />，则返回 <see cref="F:System.Double.NaN" />。</returns>
      <param name="val1">要比较的两个双精度浮点数中的第一个。</param>
      <param name="val2">要比较的两个双精度浮点数中的第二个。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Max(System.Int16,System.Int16)">
      <summary>返回两个 16 位有符号的整数中较大的一个。</summary>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。</returns>
      <param name="val1">要比较的两个 16 位有符号的整数中的第一个。</param>
      <param name="val2">要比较的两个 16 位有符号的整数中的第二个。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Max(System.Int32,System.Int32)">
      <summary>返回两个 32 位有符号的整数中较大的一个。</summary>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。</returns>
      <param name="val1">要比较的两个 32 位有符号的整数中的第一个。</param>
      <param name="val2">要比较的两个 32 位有符号的整数中的第二个。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Max(System.Int64,System.Int64)">
      <summary>返回两个 64 位有符号的整数中较大的一个。</summary>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。</returns>
      <param name="val1">要比较的两个 64 位有符号的整数中的第一个。</param>
      <param name="val2">要比较的两个 64 位有符号的整数中的第二个。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Max(System.SByte,System.SByte)">
      <summary>返回两个 8 位有符号的整数中较大的一个。</summary>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。</returns>
      <param name="val1">要比较的两个 8 位有符号的整数中的第一个。</param>
      <param name="val2">要比较的两个 8 位有符号的整数中的第二个。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Max(System.Single,System.Single)">
      <summary>返回两个单精度浮点数字中较大的一个。</summary>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。 如果 <paramref name="val1" />、<paramref name="val2" /> 或者 <paramref name="val1" /> 和 <paramref name="val2" /> 都等于 <see cref="F:System.Single.NaN" />，则返回 <see cref="F:System.Single.NaN" />。</returns>
      <param name="val1">要比较的两个单精度浮点数中的第一个。</param>
      <param name="val2">要比较的两个单精度浮点数中的第二个。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Max(System.UInt16,System.UInt16)">
      <summary>返回两个 16 位无符号整数中较大的一个。</summary>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。</returns>
      <param name="val1">要比较的两个 16 位无符号整数中的第一个。</param>
      <param name="val2">要比较的两个 16 位无符号整数中的第二个。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Max(System.UInt32,System.UInt32)">
      <summary>返回两个 32 位无符号整数中较大的一个。</summary>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。</returns>
      <param name="val1">要比较的两个 32 位无符号整数中的第一个。</param>
      <param name="val2">要比较的两个 32 位无符号整数中的第二个。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Max(System.UInt64,System.UInt64)">
      <summary>返回两个 64 位无符号整数中较大的一个。</summary>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。</returns>
      <param name="val1">要比较的两个 64 位无符号整数中的第一个。</param>
      <param name="val2">要比较的两个 64 位无符号整数中的第二个。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Min(System.Byte,System.Byte)">
      <summary>返回两个 8 位无符号整数中较小的一个。</summary>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。</returns>
      <param name="val1">要比较的两个 8 位无符号整数中的第一个。</param>
      <param name="val2">要比较的两个 8 位无符号整数中的第二个。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Min(System.Decimal,System.Decimal)">
      <summary>返回两个十进制数中较小的一个。</summary>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。</returns>
      <param name="val1">要比较的两个十进制数字中的第一个。</param>
      <param name="val2">要比较的两个十进制数字中的第二个。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Min(System.Double,System.Double)">
      <summary>返回两个双精度浮点数字中较小的一个。</summary>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。 如果 <paramref name="val1" /> 或 <paramref name="val2" /> 或者 <paramref name="val1" /> 和 <paramref name="val2" /> 都等于 <see cref="F:System.Double.NaN" />，则返回 <see cref="F:System.Double.NaN" />。</returns>
      <param name="val1">要比较的两个双精度浮点数中的第一个。</param>
      <param name="val2">要比较的两个双精度浮点数中的第二个。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Min(System.Int16,System.Int16)">
      <summary>返回两个 16 位有符号整数中较小的一个。</summary>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。</returns>
      <param name="val1">要比较的两个 16 位有符号的整数中的第一个。</param>
      <param name="val2">要比较的两个 16 位有符号的整数中的第二个。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Min(System.Int32,System.Int32)">
      <summary>返回两个 32 位有符号整数中较小的一个。</summary>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。</returns>
      <param name="val1">要比较的两个 32 位有符号的整数中的第一个。</param>
      <param name="val2">要比较的两个 32 位有符号的整数中的第二个。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Min(System.Int64,System.Int64)">
      <summary>返回两个 64 位有符号整数中较小的一个。</summary>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。</returns>
      <param name="val1">要比较的两个 64 位有符号的整数中的第一个。</param>
      <param name="val2">要比较的两个 64 位有符号的整数中的第二个。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Min(System.SByte,System.SByte)">
      <summary>返回两个 8 位有符号整数中较小的一个。</summary>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。</returns>
      <param name="val1">要比较的两个 8 位有符号的整数中的第一个。</param>
      <param name="val2">要比较的两个 8 位有符号的整数中的第二个。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Min(System.Single,System.Single)">
      <summary>返回两个单精度浮点数字中较小的一个。</summary>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。 如果 <paramref name="val1" /> 或 <paramref name="val2" /> 或者 <paramref name="val1" /> 和 <paramref name="val2" /> 都等于 <see cref="F:System.Single.NaN" />，则返回 <see cref="F:System.Single.NaN" />。</returns>
      <param name="val1">要比较的两个单精度浮点数中的第一个。</param>
      <param name="val2">要比较的两个单精度浮点数中的第二个。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Min(System.UInt16,System.UInt16)">
      <summary>返回两个 16 位无符号整数中较小的一个。</summary>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。</returns>
      <param name="val1">要比较的两个 16 位无符号整数中的第一个。</param>
      <param name="val2">要比较的两个 16 位无符号整数中的第二个。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Min(System.UInt32,System.UInt32)">
      <summary>返回两个 32 位无符号整数中较小的一个。</summary>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。</returns>
      <param name="val1">要比较的两个 32 位无符号整数中的第一个。</param>
      <param name="val2">要比较的两个 32 位无符号整数中的第二个。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Min(System.UInt64,System.UInt64)">
      <summary>返回两个 64 位无符号整数中较小的一个。</summary>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。</returns>
      <param name="val1">要比较的两个 64 位无符号整数中的第一个。</param>
      <param name="val2">要比较的两个 64 位无符号整数中的第二个。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Math.PI">
      <summary>表示圆的周长与其直径的比值，由常数 π 指定。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Pow(System.Double,System.Double)">
      <summary>返回指定数字的指定次幂。</summary>
      <returns>数字 <paramref name="x" /> 的 <paramref name="y" /> 次幂。</returns>
      <param name="x">要乘幂的双精度浮点数。</param>
      <param name="y">指定幂的双精度浮点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Round(System.Decimal)">
      <summary>将小数值舍入到最接近的整数值。</summary>
      <returns>最接近参数 <paramref name="d" /> 的整数。 如果 <paramref name="d" /> 的小数部分正好处于两个整数中间，其中一个整数为偶数，另一个整数为奇数，则返回偶数。 请注意，此方法返回 <see cref="T:System.Decimal" />，而不是整数类型。</returns>
      <param name="d">要舍入的小数。</param>
      <exception cref="T:System.OverflowException">结果超出了 <see cref="T:System.Decimal" /> 的范围。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.Int32)">
      <summary>将小数值按指定的小数位数舍入。</summary>
      <returns>最接近 <paramref name="d" /> 的 <paramref name="decimals" /> 位小数的数字。</returns>
      <param name="d">要舍入的小数。</param>
      <param name="decimals">返回值中的小数位数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> 小于 0 或大于 28。</exception>
      <exception cref="T:System.OverflowException">结果超出了 <see cref="T:System.Decimal" /> 的范围。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)">
      <summary>将小数值按指定的小数位数舍入。 一个参数，指定当一个值正好处于另两个数中间时如何舍入这个值。</summary>
      <returns>最接近 <paramref name="d" /> 的 <paramref name="decimals" /> 位小数的数字。 如果 <paramref name="d" /> 比 <paramref name="decimals" />少部分数字，<paramref name="d" /> 原样返回。</returns>
      <param name="d">要舍入的小数。</param>
      <param name="decimals">返回值中的小数位数。</param>
      <param name="mode">
        <paramref name="d" /> 在两个数字之间时如何舍入的规范。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> 小于 0 或大于 28。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是有效的 <see cref="T:System.MidpointRounding" /> 值。</exception>
      <exception cref="T:System.OverflowException">结果超出了 <see cref="T:System.Decimal" /> 的范围。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.MidpointRounding)">
      <summary>将小数值舍入到最接近的整数。 一个参数，指定当一个值正好处于另两个数中间时如何舍入这个值。</summary>
      <returns>最接近 <paramref name="d" /> 的整数。 如果 <paramref name="d" /> 是两个数字的中值，这两个数字一个为偶数，另一个为奇数，则 <paramref name="mode" /> 确定返回两个数字中的哪一个。</returns>
      <param name="d">要舍入的小数。</param>
      <param name="mode">
        <paramref name="d" /> 在两个数字之间时如何舍入的规范。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是有效的 <see cref="T:System.MidpointRounding" /> 值。</exception>
      <exception cref="T:System.OverflowException">结果超出了 <see cref="T:System.Decimal" /> 的范围。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Round(System.Double)">
      <summary>将双精度浮点值舍入为最接近的整数值。</summary>
      <returns>最接近 <paramref name="a" /> 的整数。 如果 <paramref name="a" /> 的小数部分正好处于两个整数中间，其中一个整数为偶数，另一个整数为奇数，则返回偶数。 请注意，此方法返回 <see cref="T:System.Double" />，而不是整数类型。</returns>
      <param name="a">要舍入的双精度浮点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Round(System.Double,System.Int32)">
      <summary>将双精度浮点值按指定的小数位数舍入。</summary>
      <returns>最接近 <paramref name="value" /> 的 <paramref name="digits" /> 位小数的数字。</returns>
      <param name="value">要舍入的双精度浮点数。</param>
      <param name="digits">返回值中的小数数字。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" /> 小于 0 或大于 15。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)">
      <summary>将双精度浮点值按指定的小数位数舍入。 一个参数，指定当一个值正好处于另两个数中间时如何舍入这个值。</summary>
      <returns>其小数数字等于 <paramref name="digits" /> 的 <paramref name="value" /> 的最接近的数字。 如果 <paramref name="value" /> 比 <paramref name="digits" /> 的小数位少， <paramref name="value" /> 原样返回。</returns>
      <param name="value">要舍入的双精度浮点数。</param>
      <param name="digits">返回值中的小数数字。</param>
      <param name="mode">
        <paramref name="value" /> 在两个数字之间时如何舍入的规范。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" /> 小于 0 或大于 15。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是有效的 <see cref="T:System.MidpointRounding" /> 值。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Round(System.Double,System.MidpointRounding)">
      <summary>将双精度浮点值舍入为最接近的整数。 一个参数，指定当一个值正好处于另两个数中间时如何舍入这个值。</summary>
      <returns>最接近 <paramref name="value" /> 的整数。 如果 <paramref name="value" /> 是两个整数的中值，这两个整数一个为偶数，另一个为奇数，则 <paramref name="mode" /> 确定返回两个整数中的哪一个。</returns>
      <param name="value">要舍入的双精度浮点数。</param>
      <param name="mode">
        <paramref name="value" /> 在两个数字之间时如何舍入的规范。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是有效的 <see cref="T:System.MidpointRounding" /> 值。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Sign(System.Decimal)">
      <summary>返回表示数字符号的值。</summary>
      <returns>一个指示 <paramref name="value" /> 的符号的数字，如下表所示。 返回值 含义 -1 <paramref name="value" /> 小于零。 0 <paramref name="value" /> 等于零。 1 <paramref name="value" /> 大于零。</returns>
      <param name="value">已签名的十进制数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Sign(System.Double)">
      <summary>返回表示双精度浮点数字的符号的值。</summary>
      <returns>一个指示 <paramref name="value" /> 的符号的数字，如下表所示。 返回值 含义 -1 <paramref name="value" /> 小于零。 0 <paramref name="value" /> 等于零。 1 <paramref name="value" /> 大于零。</returns>
      <param name="value">有符号的数字。</param>
      <exception cref="T:System.ArithmeticException">
        <paramref name="value" /> 等于 <see cref="F:System.Double.NaN" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Sign(System.Int16)">
      <summary>返回表示 16 位有符号整数的符号的值。</summary>
      <returns>一个指示 <paramref name="value" /> 的符号的数字，如下表所示。 返回值 含义 -1 <paramref name="value" /> 小于零。 0 <paramref name="value" /> 等于零。 1 <paramref name="value" /> 大于零。</returns>
      <param name="value">有符号的数字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Sign(System.Int32)">
      <summary>返回表示 32 位有符号整数的符号的值。</summary>
      <returns>一个指示 <paramref name="value" /> 的符号的数字，如下表所示。 返回值 含义 -1 <paramref name="value" /> 小于零。 0 <paramref name="value" /> 等于零。 1 <paramref name="value" /> 大于零。</returns>
      <param name="value">有符号的数字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Sign(System.Int64)">
      <summary>返回表示 64 位有符号整数的符号的值。</summary>
      <returns>一个指示 <paramref name="value" /> 的符号的数字，如下表所示。 返回值 含义 -1 <paramref name="value" /> 小于零。 0 <paramref name="value" /> 等于零。 1 <paramref name="value" /> 大于零。</returns>
      <param name="value">有符号的数字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Sign(System.SByte)">
      <summary>返回表示 8 位有符号整数的符号的值。</summary>
      <returns>一个指示 <paramref name="value" /> 的符号的数字，如下表所示。 返回值 含义 -1 <paramref name="value" /> 小于零。 0 <paramref name="value" /> 等于零。 1 <paramref name="value" /> 大于零。</returns>
      <param name="value">有符号的数字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Sign(System.Single)">
      <summary>返回表示单精度浮点数字的符号的值。</summary>
      <returns>一个指示 <paramref name="value" /> 的符号的数字，如下表所示。 返回值 含义 -1 <paramref name="value" /> 小于零。 0 <paramref name="value" /> 等于零。 1 <paramref name="value" /> 大于零。</returns>
      <param name="value">有符号的数字。</param>
      <exception cref="T:System.ArithmeticException">
        <paramref name="value" /> 等于 <see cref="F:System.Single.NaN" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Sin(System.Double)">
      <summary>返回指定角度的正弦值。</summary>
      <returns>
        <paramref name="a" /> 的正弦值。 如果 <paramref name="a" /> 等于 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，此方法将返回 <see cref="F:System.Double.NaN" />。</returns>
      <param name="a">以弧度计量的角度。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Sinh(System.Double)">
      <summary>返回指定角度的双曲正弦值。</summary>
      <returns>
        <paramref name="value" /> 的双曲正弦值。 如果 <paramref name="value" /> 等于 <see cref="F:System.Double.NegativeInfinity" />、<see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NaN" />，则此方法返回等于 <paramref name="value" /> 的 <see cref="T:System.Double" />。</returns>
      <param name="value">以弧度计量的角度。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Sqrt(System.Double)">
      <summary>返回指定数字的平方根。</summary>
      <returns>下表中的值之一。 <paramref name="d" /> 参数 返回值 零或正数 <paramref name="d" /> 的正平方根。 负数 <see cref="F:System.Double.NaN" />等于 <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" />等于 <see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
      <param name="d">将查找其平方根的数字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Tan(System.Double)">
      <summary>返回指定角度的正切值。</summary>
      <returns>
        <paramref name="a" /> 的正切值。 如果 <paramref name="a" /> 等于 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，此方法将返回 <see cref="F:System.Double.NaN" />。</returns>
      <param name="a">以弧度计量的角度。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Tanh(System.Double)">
      <summary>返回指定角度的双曲正切值。</summary>
      <returns>
        <paramref name="value" /> 的双曲正切值。 如果 <paramref name="value" /> 等于 <see cref="F:System.Double.NegativeInfinity" />，则此方法返回 -1。 如果值等于 <see cref="F:System.Double.PositiveInfinity" />，则此方法返回 1。 如果 <paramref name="value" /> 等于 <see cref="F:System.Double.NaN" />，则此方法返回 <see cref="F:System.Double.NaN" />。</returns>
      <param name="value">以弧度计量的角度。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Truncate(System.Decimal)">
      <summary>计算指定小数的整数部分。</summary>
      <returns>
        <paramref name="d" /> 的整数部分（即舍弃小数位后剩余的数）。</returns>
      <param name="d">要截断的数字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Math.Truncate(System.Double)">
      <summary>计算指定双精度浮点数的整数部分。</summary>
      <returns>
        <paramref name="d" /> 的整数部分（即舍弃小数位后剩余的数或下表所列出的值之一）。 <paramref name="d" />返回值 <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" /><see cref="F:System.Double.NegativeInfinity" /><see cref="F:System.Double.NegativeInfinity" /><see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
      <param name="d">要截断的数字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.MemberAccessException">
      <summary>访问类成员的尝试失败时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MemberAccessException.#ctor">
      <summary>初始化 <see cref="T:System.MemberAccessException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.MemberAccessException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.MemberAccessException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不是空引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="T:System.MidpointRounding">
      <summary>指定数学舍入方法应如何处理两个数字间的中间值。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.MidpointRounding.AwayFromZero">
      <summary>当一个数字是其他两个数字的中间值时，会将其舍入为两个值中绝对值较小的值。</summary>
    </member>
    <member name="F:System.MidpointRounding.ToEven">
      <summary>当一个数字是其他两个数字的中间值时，会将其舍入为最接近的偶数。</summary>
    </member>
    <member name="T:System.MissingMemberException">
      <summary>试图动态访问不存在的类成员时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MissingMemberException.#ctor">
      <summary>初始化 <see cref="T:System.MissingMemberException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.MissingMemberException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息以及对内部异常（为该异常的根源）的引用来初始化 <see cref="T:System.MissingMemberException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前 Exception 的 <see cref="T:System.Exception" /> 的实例。 如果 <paramref name="inner" /> 不是空引用（在 Visual Basic 中为 Nothing），则在处理 <paramref name="inner" /> 的 catch 块中引发当前的 Exception。</param>
    </member>
    <member name="P:System.MissingMemberException.Message">
      <summary>获取显示类名、成员名和缺少成员签名的文本字符串。</summary>
      <returns>错误消息字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.MulticastDelegate">
      <summary>表示多路广播委托；即，其调用列表中可以拥有多个元素的委托。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MulticastDelegate.Equals(System.Object)">
      <summary>确定此多路广播委托和指定的对象是否相等。</summary>
      <returns>如果 <paramref name="obj" /> 和此实例具有相同的调用列表，则为 true；否则为 false。</returns>
      <param name="obj">与该实例进行比较的对象。</param>
      <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者用后期绑定机制调用了该成员。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MulticastDelegate.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者用后期绑定机制调用了该成员。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MulticastDelegate.GetInvocationList">
      <summary>按照调用顺序返回此多路广播委托的调用列表。</summary>
      <returns>一个委托数组，这些委托的调用列表合起来与此实例的调用列表一致。</returns>
      <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者用后期绑定机制调用了该成员。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
      <summary>确定两个 <see cref="T:System.MulticastDelegate" /> 对象是否相等。</summary>
      <returns>如果 <paramref name="d1" /> 和 <paramref name="d2" /> 具有相同的调用列表，则为 true；否则为 false。</returns>
      <param name="d1">左操作数。</param>
      <param name="d2">右操作数。</param>
      <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者用后期绑定机制调用了该成员。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
      <summary>确定两个 <see cref="T:System.MulticastDelegate" /> 对象是否相等。</summary>
      <returns>如果 <paramref name="d1" /> 和 <paramref name="d2" /> 没有相同的调用列表，则为 true；否则为 false。</returns>
      <param name="d1">左操作数。</param>
      <param name="d2">右操作数。</param>
      <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者用后期绑定机制调用了该成员。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="T:System.NotImplementedException">
      <summary>在无法实现请求的方法或操作时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.NotImplementedException.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.NotImplementedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.NotImplementedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.NotImplementedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.NotSupportedException">
      <summary>当调用的方法不受支持，或试图读取、查找或写入不支持调用功能的流时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.NotSupportedException.#ctor">
      <summary>初始化 <see cref="T:System.NotSupportedException" /> 类的新实例，将新实例的 <see cref="P:System.Exception.Message" /> 属性设置为系统提供的描述错误的消息。 此消息将考虑当前系统区域性。</summary>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.NotSupportedException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。 <paramref name="message" /> 的内容被设计为人可理解的形式。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.NotSupportedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为空引用，则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="T:System.Nullable">
      <summary>支持可为其分配 null 的值类型，如引用类型。 此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Nullable.Compare``1(System.Nullable{``0},System.Nullable{``0})">
      <summary>比较两个 <see cref="T:System.Nullable`1" /> 对象的相对值。</summary>
      <returns>一个整数，指示 <paramref name="n1" /> 和 <paramref name="n2" /> 参数的相对值。 返回值 描述 小于零 <paramref name="n1" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 false，<paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 true。 - 或 - <paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 true，并且 <paramref name="n1" /> 的 <see cref="P:System.Nullable`1.Value" /> 属性的值小于 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.Value" /> 属性的值。 零 <paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 false。 - 或 - <paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 true，并且 <paramref name="n1" /> 的 <see cref="P:System.Nullable`1.Value" /> 属性的值等于 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.Value" /> 属性的值。 大于零 <paramref name="n1" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 true，并且 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 false。 - 或 - <paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 true，并且 <paramref name="n1" /> 的 <see cref="P:System.Nullable`1.Value" /> 属性的值大于 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.Value" /> 属性的值。</returns>
      <param name="n1">
        <see cref="T:System.Nullable`1" /> 对象。</param>
      <param name="n2">
        <see cref="T:System.Nullable`1" /> 对象。</param>
      <typeparam name="T">
        <paramref name="n1" /> 和 <paramref name="n2" /> 参数的基础值类型。</typeparam>
    </member>
    <member name="M:System.Nullable.Equals``1(System.Nullable{``0},System.Nullable{``0})">
      <summary>指示两个指定的 <see cref="T:System.Nullable`1" /> 对象是否相等。</summary>
      <returns>如果 <paramref name="n1" /> 参数等于 <paramref name="n2" /> 参数，则为 true；否则为 false。 返回值取决于所比较的两个参数的 <see cref="P:System.Nullable`1.HasValue" /> 和 <see cref="P:System.Nullable`1.Value" /> 属性。 返回值 描述 true <paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 false。 - 或 - <paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 true，并且参数的 <see cref="P:System.Nullable`1.Value" /> 属性相等。 false 一个参数的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 true，另一个参数的该属性为 false。 - 或 - <paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 true，并且参数的 <see cref="P:System.Nullable`1.Value" /> 属性不相等。</returns>
      <param name="n1">
        <see cref="T:System.Nullable`1" /> 对象。</param>
      <param name="n2">
        <see cref="T:System.Nullable`1" /> 对象。</param>
      <typeparam name="T">
        <paramref name="n1" /> 和 <paramref name="n2" /> 参数的基础值类型。</typeparam>
    </member>
    <member name="M:System.Nullable.GetUnderlyingType(System.Type)">
      <summary>返回指定可以为 null 的类型的基础类型参数。</summary>
      <returns>如果 <paramref name="nullableType" /> 参数为关闭的泛型可以为 null 的类型，则为 <paramref name="nullableType" /> 参数的类型变量；否则为 null。</returns>
      <param name="nullableType">一个 <see cref="T:System.Type" /> 对象，描述关闭的泛型可以为 null 的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nullableType" /> 为 null。</exception>
    </member>
    <member name="T:System.Nullable`1">
      <summary>表示基础类型为值类型的对象，值类型与引用类型一样也可以分配 null。</summary>
      <typeparam name="T">
        <see cref="T:System.Nullable`1" /> 泛型类型的基础值类型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Nullable`1.#ctor(`0)">
      <summary>将 <see cref="T:System.Nullable`1" /> 结构的新实例初始化为指定值。</summary>
      <param name="value">一个值类型。</param>
    </member>
    <member name="M:System.Nullable`1.Equals(System.Object)">
      <summary>指示当前 <see cref="T:System.Nullable`1" /> 对象是否等于指定的对象。</summary>
      <returns>如果 <paramref name="other" /> 等于当前的 <see cref="T:System.Nullable`1" /> 对象，则为 true；否则为 false。 此表描述如何定义所比较值的相等性： 返回值 描述 true <see cref="P:System.Nullable`1.HasValue" /> 属性为 false，并且 <paramref name="other" /> 参数为 null。 即，根据定义，两个 null 值相等。 - 或 - <see cref="P:System.Nullable`1.HasValue" /> 属性为 true，并且 <see cref="P:System.Nullable`1.Value" /> 属性返回的值等于 <paramref name="other" /> 参数。 false 当前 <see cref="T:System.Nullable`1" /> 结构的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 true，并且 <paramref name="other" /> 参数为 null。 - 或 - 当前 <see cref="T:System.Nullable`1" /> 结构的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 false，并且 <paramref name="other" /> 参数不为 null。 - 或 - 当前 <see cref="T:System.Nullable`1" /> 结构的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 true，并且 <see cref="P:System.Nullable`1.Value" /> 属性返回的值不等于 <paramref name="other" /> 参数。</returns>
      <param name="other">一个对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Nullable`1.GetHashCode">
      <summary>检索由 <see cref="P:System.Nullable`1.Value" /> 属性返回的对象的哈希代码。</summary>
      <returns>如果 <see cref="P:System.Nullable`1.HasValue" /> 属性为 true，则为 <see cref="P:System.Nullable`1.Value" /> 属性返回的对象的哈希代码；如果 <see cref="P:System.Nullable`1.HasValue" /> 属性为 false，则为零。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Nullable`1.GetValueOrDefault">
      <summary>检索当前 <see cref="T:System.Nullable`1" /> 对象的值，或该对象的默认值。</summary>
      <returns>如果 <see cref="P:System.Nullable`1.HasValue" /> 属性为 true，则为 <see cref="P:System.Nullable`1.Value" /> 属性的值；否则为当前 <see cref="T:System.Nullable`1" /> 对象的默认值。 默认值的类型为当前 <see cref="T:System.Nullable`1" /> 对象的类型参数，而默认值的值中只包含二进制零。</returns>
    </member>
    <member name="M:System.Nullable`1.GetValueOrDefault(`0)">
      <summary>检索当前 <see cref="T:System.Nullable`1" /> 对象的值或指定的默认值。</summary>
      <returns>如果 <see cref="P:System.Nullable`1.HasValue" /> 属性为 true，则为 <see cref="P:System.Nullable`1.Value" /> 属性的值；否则为 <paramref name="defaultValue" /> 参数。</returns>
      <param name="defaultValue">如果 <see cref="P:System.Nullable`1.HasValue" /> 属性为 false，则为一个返回值。</param>
    </member>
    <member name="P:System.Nullable`1.HasValue">
      <summary>获取一个值，指示当前的 <see cref="T:System.Nullable`1" /> 对象是否有值。</summary>
      <returns>如果当前的 <see cref="T:System.Nullable`1" /> 对象具有值，则为 true；如果当前的 <see cref="T:System.Nullable`1" /> 对象没有值，则为 false。</returns>
    </member>
    <member name="M:System.Nullable`1.op_Explicit(System.Nullable{`0})~`0">
      <summary>返回指定的 <see cref="T:System.Nullable`1" /> 的值。</summary>
      <returns>
        <paramref name="value" /> 参数的 <see cref="P:System.Nullable`1.Value" /> 属性的值。</returns>
      <param name="value">一个 <see cref="T:System.Nullable`1" /> 值。</param>
    </member>
    <member name="M:System.Nullable`1.op_Implicit(`0)~System.Nullable{`0}">
      <summary>创建一个新的 <see cref="T:System.Nullable`1" /> 对象，并将其初始化为指定的值。</summary>
      <returns>一个 <see cref="T:System.Nullable`1" /> 对象，其 <see cref="P:System.Nullable`1.Value" /> 属性使用 <paramref name="value" /> 参数进行初始化。</returns>
      <param name="value">一个值类型。</param>
    </member>
    <member name="M:System.Nullable`1.ToString">
      <summary>返回当前 <see cref="T:System.Nullable`1" /> 对象的值的文本表示形式。</summary>
      <returns>如果 <see cref="P:System.Nullable`1.HasValue" /> 属性为 true，则是当前 <see cref="T:System.Nullable`1" /> 对象的值的文本表示形式；如果 <see cref="P:System.Nullable`1.HasValue" /> 属性为 false，则是一个空字符串 ("")。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Nullable`1.Value">
      <summary>获取当前的 <see cref="T:System.Nullable`1" /> 值。</summary>
      <returns>如果 <see cref="P:System.Nullable`1.HasValue" /> 属性为 true，则为当前 <see cref="T:System.Nullable`1" /> 对象的值。 如果 <see cref="P:System.Nullable`1.HasValue" /> 属性为 false，则将引发异常。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Nullable`1.HasValue" /> 属性为 false。</exception>
    </member>
    <member name="T:System.NullReferenceException">
      <summary>尝试取消引用空对象引用时引发的异常。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.NullReferenceException.#ctor">
      <summary>初始化 <see cref="T:System.NullReferenceException" /> 类的新实例，将新实例的 <see cref="P:System.Exception.Message" /> 属性设置为系统提供的描述错误的消息，如“在需要对象实例的地方找到了值‘null’。”。此消息将考虑当前系统区域性。</summary>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.NullReferenceException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。 <paramref name="message" /> 的内容被设计为人可理解的形式。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.NullReferenceException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Object">
      <summary>支持 .NET Framework 类层次结构中的所有类，并为派生类提供低级别服务。 这是 .NET Framework 中所有类的最终基类；它是类型层次结构的根。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Object.#ctor">
      <summary>初始化 <see cref="T:System.Object" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Object.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 是否等于当前的 <see cref="T:System.Object" />。</summary>
      <returns>如果指定的对象等于当前对象，则为 true；否则为 false。</returns>
      <param name="obj">要与当前对象进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Object.Equals(System.Object,System.Object)">
      <summary>确定指定的对象实例是否被视为相等。</summary>
      <returns>如果认为对象相等，则为 true；否则为 false。 如果 <paramref name="objA" /> 和 <paramref name="objB" /> 都为 null，则方法返回 true。</returns>
      <param name="objA">要比较的第一个对象。</param>
      <param name="objB">要比较的第二个对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Object.Finalize">
      <summary>允许对象在“垃圾回收”回收之前尝试释放资源并执行其他清理操作。</summary>
    </member>
    <member name="M:System.Object.GetHashCode">
      <summary>用作特定类型的哈希函数。</summary>
      <returns>当前 <see cref="T:System.Object" /> 的哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Object.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Object.MemberwiseClone">
      <summary>创建当前 <see cref="T:System.Object" /> 的浅表副本。</summary>
      <returns>当前 <see cref="T:System.Object" /> 的浅表副本。</returns>
    </member>
    <member name="M:System.Object.ReferenceEquals(System.Object,System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 实例是否是相同的实例。</summary>
      <returns>如果 <paramref name="objA" /> 是与 <paramref name="objB" /> 相同的实例，或如果两者均为 null，则为 true；否则，为 false。</returns>
      <param name="objA">要比较的第一个对象。</param>
      <param name="objB">要比较的第二个对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Object.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.ObjectDisposedException">
      <summary>对已释放的对象执行操作时所引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String)">
      <summary>使用包含已释放对象名称的字符串初始化 <see cref="T:System.ObjectDisposedException" /> 类的新实例。</summary>
      <param name="objectName">包含已释放对象的名称的字符串。</param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.ObjectDisposedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 不为 null，则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String,System.String)">
      <summary>使用指定的对象名称和消息初始化 <see cref="T:System.ObjectDisposedException" /> 类的新实例。</summary>
      <param name="objectName">已释放的对象名。</param>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="P:System.ObjectDisposedException.Message">
      <summary>获取描述错误的消息。</summary>
      <returns>描述错误的字符串。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.ObjectDisposedException.ObjectName">
      <summary>获取已释放对象的名称。</summary>
      <returns>包含已释放对象的名称的字符串。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.ObsoleteAttribute">
      <summary>标记不再使用的程序元素。 此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.ObsoleteAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String)">
      <summary>使用指定的变通方法消息初始化 <see cref="T:System.ObsoleteAttribute" /> 类的新实例。</summary>
      <param name="message">描述可选的变通方法的文本字符串。</param>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String,System.Boolean)">
      <summary>使用变通方法消息和布尔值初始化 <see cref="T:System.ObsoleteAttribute" /> 类的新实例，该布尔值指示是否将使用已过时的元素视为错误。</summary>
      <param name="message">描述可选的变通方法的文本字符串。</param>
      <param name="error">指示是否将使用已过时的元素视为错误的布尔值。</param>
    </member>
    <member name="P:System.ObsoleteAttribute.IsError">
      <summary>获取指示编译器是否将使用已过时的程序元素视为错误的布尔值。</summary>
      <returns>如果将使用已过时的元素视为错误，则为 true；否则为 false。 默认值为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ObsoleteAttribute.Message">
      <summary>获取变通方法消息，包括对可选程序元素的说明。</summary>
      <returns>变通方法文本字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.OperationCanceledException">
      <summary>取消线程正在执行的操作时在线程中引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.OperationCanceledException.#ctor">
      <summary>用系统提供的错误信息初始化 <see cref="T:System.OperationCanceledException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.OperationCanceledException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.OperationCanceledException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Exception,System.Threading.CancellationToken)">
      <summary>用指定的错误消息、对作为此异常原因的内部异常的引用以及取消令牌初始化 <see cref="T:System.OperationCanceledException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
      <param name="token">一个与已取消的操作关联的取消标记。</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Threading.CancellationToken)">
      <summary>使用指定的错误信息和取消令牌初始化 <see cref="T:System.OperationCanceledException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="token">一个与已取消的操作关联的取消标记。</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.Threading.CancellationToken)">
      <summary>用取消令牌初始化 <see cref="T:System.OperationCanceledException" /> 类的新实例。</summary>
      <param name="token">一个与已取消的操作关联的取消标记。</param>
    </member>
    <member name="P:System.OperationCanceledException.CancellationToken">
      <summary>获取与已取消的操作关联的令牌。</summary>
      <returns>与已取消的操作关联的令牌，或默认令牌。</returns>
    </member>
    <member name="T:System.OutOfMemoryException">
      <summary>没有足够的内存继续执行程序时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor">
      <summary>初始化 <see cref="T:System.OutOfMemoryException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.OutOfMemoryException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.OutOfMemoryException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不是空引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="T:System.OverflowException">
      <summary>在选中的上下文中所进行的算术运算、类型转换或转换操作导致溢出时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.OverflowException.#ctor">
      <summary>初始化 <see cref="T:System.OverflowException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.OverflowException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.OverflowException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不是空引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="T:System.ParamArrayAttribute">
      <summary>指示方法在调用中将允许参数的数目可变。 此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.ParamArrayAttribute.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.ParamArrayAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.PlatformNotSupportedException">
      <summary>当功能未在特定平台上运行时所引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.PlatformNotSupportedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.PlatformNotSupportedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的文本消息。</param>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.PlatformNotSupportedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Predicate`1">
      <summary>表示定义一组条件并确定指定对象是否符合这些条件的方法。</summary>
      <returns>如果 <paramref name="obj" /> 符合由此委托表示的方法中定义的条件，则为 true；否则为 false。</returns>
      <param name="obj">要按照由此委托表示的方法中定义的条件进行比较的对象。</param>
      <typeparam name="T">要比较的对象的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Random">
      <summary>表示伪随机数生成器，一种能够产生满足某些随机性统计要求的数字序列的设备。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Random.#ctor">
      <summary>使用与时间相关的默认种子值，初始化 <see cref="T:System.Random" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Random.#ctor(System.Int32)">
      <summary>使用指定的种子值初始化 <see cref="T:System.Random" /> 类的新实例。</summary>
      <param name="Seed">用来计算伪随机数序列起始值的数字。 如果指定的是负数，则使用其绝对值。</param>
    </member>
    <member name="M:System.Random.Next">
      <summary>返回非负随机数。</summary>
      <returns>大于等于零且小于 <see cref="F:System.Int32.MaxValue" /> 的 32 位带符号整数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Random.Next(System.Int32)">
      <summary>返回一个小于所指定最大值的非负随机数。</summary>
      <returns>大于等于零且小于 <paramref name="maxValue" /> 的 32 位带符号整数，即：返回值的范围通常包括零但不包括 <paramref name="maxValue" />。 不过，如果 <paramref name="maxValue" /> 等于零，则返回 <paramref name="maxValue" />。</returns>
      <param name="maxValue">要生成的随机数的上限（随机数不能取该上限值）。 <paramref name="maxValue" /> 必须大于或等于零。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxValue" /> 小于零。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Random.Next(System.Int32,System.Int32)">
      <summary>返回一个指定范围内的随机数。</summary>
      <returns>一个大于等于 <paramref name="minValue" /> 且小于 <paramref name="maxValue" /> 的 32 位带符号整数，即：返回的值范围包括 <paramref name="minValue" /> 但不包括 <paramref name="maxValue" />。 如果 <paramref name="minValue" /> 等于 <paramref name="maxValue" />，则返回 <paramref name="minValue" />。</returns>
      <param name="minValue">返回的随机数的下界（随机数可取该下界值）。</param>
      <param name="maxValue">返回的随机数的上界（随机数不能取该上界值）。 <paramref name="maxValue" /> 必须大于或等于 <paramref name="minValue" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minValue" /> 大于 <paramref name="maxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Random.NextBytes(System.Byte[])">
      <summary>用随机数填充指定字节数组的元素。</summary>
      <param name="buffer">包含随机数的字节数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Random.NextDouble">
      <summary>返回一个介于 0.0 和 1.0 之间的随机数。</summary>
      <returns>大于等于 0.0 并且小于 1.0 的双精度浮点数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Random.Sample">
      <summary>返回一个介于 0.0 和 1.0 之间的随机数。</summary>
      <returns>大于等于 0.0 并且小于 1.0 的双精度浮点数。</returns>
    </member>
    <member name="T:System.RankException">
      <summary>将维数错误的数组传递给方法时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RankException.#ctor">
      <summary>初始化 <see cref="T:System.RankException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.RankException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.RankException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.RankException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.RankException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不是空引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="T:System.RuntimeFieldHandle">
      <summary>使用内部元数据标记表示一个字段。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeFieldHandle.Equals(System.Object)">
      <summary>指示当前实例是否等于指定的对象。</summary>
      <returns>如果 <paramref name="obj" /> 为 <see cref="T:System.RuntimeFieldHandle" /> 且与当前实例的值相等，则为 true；否则为 false。</returns>
      <param name="obj">要与当前实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeFieldHandle.Equals(System.RuntimeFieldHandle)">
      <summary>指示当前实例是否等于指定的 <see cref="T:System.RuntimeFieldHandle" />。</summary>
      <returns>如果 <paramref name="handle" /> 的值等于当前实例的值，则为 true；否则为 false。</returns>
      <param name="handle">要与当前实例进行比较的 <see cref="T:System.RuntimeFieldHandle" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeFieldHandle.GetHashCode">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeFieldHandle.op_Equality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)">
      <summary>指示两个 <see cref="T:System.RuntimeFieldHandle" /> 结构是否等同。</summary>
      <returns>如果 <paramref name="left" /> 等于 <paramref name="right" />，则为 true；否则为 false。</returns>
      <param name="left">要与 <paramref name="right" /> 进行比较的 <see cref="T:System.RuntimeFieldHandle" />。</param>
      <param name="right">要与 <paramref name="left" /> 进行比较的 <see cref="T:System.RuntimeFieldHandle" />。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.RuntimeFieldHandle.op_Inequality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)">
      <summary>指示两个 <see cref="T:System.RuntimeFieldHandle" /> 结构是否不相等。</summary>
      <returns>如果 <paramref name="left" /> 不等于 <paramref name="right" />，则为 true；否则为 false。</returns>
      <param name="left">要与 <paramref name="right" /> 进行比较的 <see cref="T:System.RuntimeFieldHandle" />。</param>
      <param name="right">要与 <paramref name="left" /> 进行比较的 <see cref="T:System.RuntimeFieldHandle" />。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="T:System.RuntimeMethodHandle">
      <summary>
        <see cref="T:System.RuntimeMethodHandle" /> 是方法的内部元数据表示形式的句柄。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeMethodHandle.Equals(System.Object)">
      <summary>指示此实例是否与指定对象相等。</summary>
      <returns>如果 <paramref name="obj" /> 为 <see cref="T:System.RuntimeMethodHandle" /> 且与此实例的值相等，则为 true；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的 <see cref="T:System.Object" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeMethodHandle.Equals(System.RuntimeMethodHandle)">
      <summary>指示此实例是否与指定的 <see cref="T:System.RuntimeMethodHandle" /> 相等。</summary>
      <returns>如果 <paramref name="handle" /> 等于此实例的值，则为 true；否则，为 false。</returns>
      <param name="handle">要与此实例进行比较的 <see cref="T:System.RuntimeMethodHandle" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeMethodHandle.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeMethodHandle.op_Equality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)">
      <summary>指示两个 <see cref="T:System.RuntimeMethodHandle" /> 实例是否相等。</summary>
      <returns>如果 <paramref name="left" /> 的值等于 <paramref name="right" /> 的值，则为 true；否则为 false。</returns>
      <param name="left">要与 <paramref name="right" /> 进行比较的 <see cref="T:System.RuntimeMethodHandle" />。</param>
      <param name="right">要与 <paramref name="left" /> 进行比较的 <see cref="T:System.RuntimeMethodHandle" />。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.RuntimeMethodHandle.op_Inequality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)">
      <summary>指示两个 <see cref="T:System.RuntimeMethodHandle" /> 实例是否不相等。</summary>
      <returns>如果 <paramref name="left" /> 的值与 <paramref name="right" /> 的值不相等，则为 true；否则为 false。</returns>
      <param name="left">要与 <paramref name="right" /> 进行比较的 <see cref="T:System.RuntimeMethodHandle" />。</param>
      <param name="right">要与 <paramref name="left" /> 进行比较的 <see cref="T:System.RuntimeMethodHandle" />。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="T:System.RuntimeTypeHandle">
      <summary>表示使用内部元数据标记的类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.Equals(System.Object)">
      <summary>指示指定的对象是否等于当前的 <see cref="T:System.RuntimeTypeHandle" /> 结构。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.RuntimeTypeHandle" /> 结构并且与此实例的值相等，则为 true；否则为 false。</returns>
      <param name="obj">要与当前实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.Equals(System.RuntimeTypeHandle)">
      <summary>指示指定的 <see cref="T:System.RuntimeTypeHandle" /> 结构是否等于当前的 <see cref="T:System.RuntimeTypeHandle" /> 结构。</summary>
      <returns>如果 <paramref name="handle" /> 的值等于此实例的值，则为 true；否则为 false。</returns>
      <param name="handle">要与当前实例进行比较的 <see cref="T:System.RuntimeTypeHandle" /> 结构。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.GetHashCode">
      <summary>返回当前实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Equality(System.Object,System.RuntimeTypeHandle)">
      <summary>指示某个对象与 <see cref="T:System.RuntimeTypeHandle" /> 结构是否相等。</summary>
      <returns>如果 <paramref name="left" /> 是 <see cref="T:System.RuntimeTypeHandle" /> 结构并且与 <paramref name="right" /> 相等，则为 true；否则为 false。</returns>
      <param name="left">要与 <paramref name="right" /> 比较的对象。</param>
      <param name="right">要与 <paramref name="left" /> 比较的 <see cref="T:System.RuntimeTypeHandle" /> 结构。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Equality(System.RuntimeTypeHandle,System.Object)">
      <summary>指示 <see cref="T:System.RuntimeTypeHandle" /> 结构与某个对象是否相等。</summary>
      <returns>如果 <paramref name="right" /> 是 <see cref="T:System.RuntimeTypeHandle" /> 并且与 <paramref name="left" /> 相等，则为 true；否则为 false。</returns>
      <param name="left">要与 <paramref name="right" /> 比较的 <see cref="T:System.RuntimeTypeHandle" /> 结构。</param>
      <param name="right">要与 <paramref name="left" /> 比较的对象。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Inequality(System.Object,System.RuntimeTypeHandle)">
      <summary>指示某个对象与 <see cref="T:System.RuntimeTypeHandle" /> 结构是否不相等。</summary>
      <returns>如果 <paramref name="left" /> 是 <see cref="T:System.RuntimeTypeHandle" /> 并且与 <paramref name="right" /> 相等，则为 true；否则为 false。</returns>
      <param name="left">要与 <paramref name="right" /> 比较的对象。</param>
      <param name="right">要与 <paramref name="left" /> 比较的 <see cref="T:System.RuntimeTypeHandle" /> 结构。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Inequality(System.RuntimeTypeHandle,System.Object)">
      <summary>指示 <see cref="T:System.RuntimeTypeHandle" /> 结构与某个对象是否不相等。</summary>
      <returns>如果 <paramref name="right" /> 是 <see cref="T:System.RuntimeTypeHandle" /> 结构并且它与 <paramref name="left" /> 不相等，则为 true；否则为 false。</returns>
      <param name="left">要与 <paramref name="right" /> 比较的 <see cref="T:System.RuntimeTypeHandle" /> 结构。</param>
      <param name="right">要与 <paramref name="left" /> 比较的对象。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="T:System.SByte">
      <summary>表示 8 位有符号整数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.CompareTo(System.SByte)">
      <summary>将此实例与指定的 8 位有符号整数进行比较并返回对其相对值的指示。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。 返回值 描述 小于零 此实例小于 <paramref name="value" />。 零 此实例等于 <paramref name="value" />。 大于零 此实例大于 <paramref name="value" />。</returns>
      <param name="value">要比较的 8 位有符号整数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.SByte.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.SByte" /> 的实例并且等于此实例的值，则为 true；否则为 false。</returns>
      <param name="obj">与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.SByte.Equals(System.SByte)">
      <summary>返回一个值，该值指示此实例是否与指定的 <see cref="T:System.SByte" /> 值相等。</summary>
      <returns>如果 <paramref name="obj" /> 的值与此实例相同，则为 true；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的 <see cref="T:System.SByte" /> 值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.SByte.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.SByte.MaxValue">
      <summary>表示 <see cref="T:System.SByte" /> 的最大可能值。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.SByte.MinValue">
      <summary>表示 <see cref="T:System.SByte" /> 的最小可能值。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效 8 位有符号整数。</summary>
      <returns>与 <paramref name="s" /> 参数中包含的数字等效的 8 位有符号整数。</returns>
      <param name="s">表示要转换的数字的字符串。 该字符串使用 <see cref="F:System.Globalization.NumberStyles.Integer" /> 样式来进行解释。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不是由一个可选符号后跟数字序列（0 到 9）组成的。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将指定样式的数字的字符串表示形式转换为它的等效 8 位有符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 8 位有符号整数。</returns>
      <param name="s">包含要转换的数字的字符串。 该字符串使用由 <paramref name="style" /> 指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不符合 <paramref name="style" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" /> 的数字。 - 或 - <paramref name="s" /> 包含非零的小数位。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 8 位有符号数值。</summary>
      <returns>与 <paramref name="s" /> 参数中指定的数字等效的 8 位有符号字节值。</returns>
      <param name="s">包含要转换的数字的字符串。 该字符串使用由 <paramref name="style" /> 指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。 如果 <paramref name="provider" /> 为 null，则使用当前的线程区域性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 的组合。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不符合 <paramref name="style" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" /> 的数字。 - 或 - <paramref name="s" /> 包含非零的小数位。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.IFormatProvider)">
      <summary>将指定的区域性特定格式的数字的字符串表示形式转换为它的等效 8 位有符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 8 位有符号整数。</returns>
      <param name="s">表示要转换的数字的字符串。 该字符串使用 <see cref="F:System.Globalization.NumberStyles.Integer" /> 样式来进行解释。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。 如果 <paramref name="provider" /> 为 null，则使用当前的线程区域性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。 返回值 含义 小于零 此实例按排序顺序在 <paramref name="value" /> 前面。 零 此实例与 <paramref name="value" /> 按排序顺序中出现的位置相同。 大于零 此实例按排序顺序在 <paramref name="value" /> 后面。 - 或 - <paramref name="value" /> 为 null。</returns>
      <param name="obj">与此实例进行比较的 object，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.SByte" />。</exception>
    </member>
    <member name="M:System.SByte.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由减号（如果值为负）和没有前导零的从 0 到 9 的数字序列组成。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="provider" /> 指定。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.ToString(System.String)">
      <summary>使用指定的格式，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <param name="format">标准或自定义的数值格式字符串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
      <param name="format">标准或自定义的数值格式字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.SByte@)">
      <summary>尝试将指定样式和区域性特定格式的数字的字符串表示形式转换为其 <see cref="T:System.SByte" /> 等效项，并返回一个指示转换是否成功的值。</summary>
      <returns>如果成功转换了 <paramref name="s" />，则为 true；否则为 false。</returns>
      <param name="s">表示要转换的数字的字符串。</param>
      <param name="style">枚举值的一个按位组合，指示 <paramref name="s" /> 所允许的格式。 一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 所包含的数字等效的 8 位有符号整数值；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 null，格式不符合 <paramref name="style" />，或者表示的数字小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" />，则转换会失败。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.TryParse(System.String,System.SByte@)">
      <summary>尝试将数字的字符串表示形式转换为它的等效 <see cref="T:System.SByte" />，并返回一个指示转换是否成功的值。</summary>
      <returns>如果成功转换了 <paramref name="s" />，则为 true；否则为 false。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所包含的数字等效的 8 位有符号整数值；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 null、格式不正确或者表示的数字小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" />，则转换会失败。 该参数未经初始化即被传递。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Single">
      <summary>表示一个单精度浮点数字。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.CompareTo(System.Single)">
      <summary>将此实例与指定的单精度浮点数进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于指定单精度浮点数的值。</summary>
      <returns>一个有符号数字，指示此实例和 <paramref name="value" /> 的相对值。 返回值 描述 小于零 此实例小于 <paramref name="value" />。 - 或 - 此实例不是数字 (<see cref="F:System.Single.NaN" />) 而 <paramref name="value" /> 是数字。 零 此实例等于 <paramref name="value" />。 - 或 - 此实例和 <paramref name="value" /> 都不是数字 (<see cref="F:System.Single.NaN" />)、<see cref="F:System.Single.PositiveInfinity" /> 或 <see cref="F:System.Single.NegativeInfinity" />。 大于零 此实例大于 <paramref name="value" />。 - 或 - 此实例是数字而 <paramref name="value" /> 不是数字 (<see cref="F:System.Single.NaN" />)。</returns>
      <param name="value">要比较的单精度浮点数字。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Single.Epsilon">
      <summary>表示大于零的最小正 <see cref="T:System.Single" /> 值。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.Single" /> 的实例并且等于此实例的值，则为 true；否则为 false。</returns>
      <param name="obj">与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Single.Equals(System.Single)">
      <summary>返回一个值，该值指示此实例和指定的 <see cref="T:System.Single" /> 对象是否表示相同的值。</summary>
      <returns>如果 <paramref name="obj" /> 等于此实例，则为 true；否则为 false。</returns>
      <param name="obj">与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Single.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Single.IsInfinity(System.Single)">
      <summary>返回一个值，该值指示指定数字是计算为负无穷大还是正无穷大。</summary>
      <returns>如果 <paramref name="f" /> 计算为 <see cref="F:System.Single.PositiveInfinity" /> 或 <see cref="F:System.Single.NegativeInfinity" />，则为 true；否则为 false。</returns>
      <param name="f">一个单精度浮点数字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.IsNaN(System.Single)">
      <summary>返回一个值，该值指示指定的值是否不为数字 (<see cref="F:System.Single.NaN" />)。</summary>
      <returns>如果 <paramref name="f" /> 计算为非数字 (<see cref="F:System.Single.NaN" />)，则为 true；否则为 false。</returns>
      <param name="f">一个单精度浮点数字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.IsNegativeInfinity(System.Single)">
      <summary>返回一个值，通过该值指示指定数字是否计算为负无穷大。</summary>
      <returns>如果 <paramref name="f" /> 的计算结果为 <see cref="F:System.Single.NegativeInfinity" />，则为 true；否则为 false。</returns>
      <param name="f">一个单精度浮点数字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.IsPositiveInfinity(System.Single)">
      <summary>返回一个值，通过该值指示指定数字是否计算为正无穷大。</summary>
      <returns>如果 <paramref name="f" /> 的计算结果为 <see cref="F:System.Single.PositiveInfinity" />，则为 true；否则为 false。</returns>
      <param name="f">一个单精度浮点数字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Single.MaxValue">
      <summary>表示 <see cref="T:System.Single" /> 的最大可能值。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Single.MinValue">
      <summary>表示 <see cref="T:System.Single" /> 的最小可能值。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Single.NaN">
      <summary>表示非数字 (NaN)。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Single.NegativeInfinity">
      <summary>表示负无穷。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.op_Equality(System.Single,System.Single)">
      <summary>返回一个值，该值指示两个指定的 <see cref="T:System.Single" /> 值是否相等。</summary>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 相等，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
    </member>
    <member name="M:System.Single.op_GreaterThan(System.Single,System.Single)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Single" /> 值是否大于另一个指定的 <see cref="T:System.Single" /> 值。</summary>
      <returns>如果 <paramref name="left" /> 大于 <paramref name="right" />，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
    </member>
    <member name="M:System.Single.op_GreaterThanOrEqual(System.Single,System.Single)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Single" /> 值是否大于或等于另一个指定的 <see cref="T:System.Single" /> 值。</summary>
      <returns>如果 <paramref name="left" /> 大于等于 <paramref name="right" />，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
    </member>
    <member name="M:System.Single.op_Inequality(System.Single,System.Single)">
      <summary>返回一个值，该值指示两个指定的 <see cref="T:System.Single" /> 值是否不相等。</summary>
      <returns>如果 <paramref name="left" /> 与 <paramref name="right" /> 不相等，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
    </member>
    <member name="M:System.Single.op_LessThan(System.Single,System.Single)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Single" /> 值是否小于另一个指定的 <see cref="T:System.Single" /> 值。</summary>
      <returns>如果 <paramref name="left" /> 小于 <paramref name="right" />，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
    </member>
    <member name="M:System.Single.op_LessThanOrEqual(System.Single,System.Single)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Single" /> 值是否小于或等于另一个指定的 <see cref="T:System.Single" /> 值。</summary>
      <returns>如果 <paramref name="left" /> 小于等于 <paramref name="right" />，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
    </member>
    <member name="M:System.Single.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效单精度浮点数字。</summary>
      <returns>与 <paramref name="s" /> 中指定的数值或符号等效的单精度浮点数字。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不表示一个有效格式的数字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将具有指定样式的数字的字符串表示形式转换为它的等效单精度浮点数字。</summary>
      <returns>与在 <paramref name="s" /> 中指定的数值或符号等效的单精度浮点数字。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Float" /> 与 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的组合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不是一个有效格式的数字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" /> 的数字。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 包括 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>将具有指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效单精度浮点数字。</summary>
      <returns>与 <paramref name="s" /> 中指定的数值或符号等效的单精度浮点数字。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Float" /> 与 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的组合。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不代表数字值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 为 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.Parse(System.String,System.IFormatProvider)">
      <summary>将具有指定区域性特定格式的数字的字符串表示形式转换为它的等效单精度浮点数字。</summary>
      <returns>与 <paramref name="s" /> 中指定的数值或符号等效的单精度浮点数字。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不表示一个有效格式的数字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Single.PositiveInfinity">
      <summary>表示正无穷。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。 返回值 含义 小于零 此实例按排序顺序在 <paramref name="value" /> 前面。 零 此实例与 <paramref name="value" /> 按排序顺序中出现的位置相同。 大于零 此实例按排序顺序在 <paramref name="value" /> 后面。 - 或 - <paramref name="value" /> 为 null。</returns>
      <param name="value">与此实例进行比较的 object，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Single" />。</exception>
    </member>
    <member name="M:System.Single.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="provider" /> 指定。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.ToString(System.String)">
      <summary>使用指定的格式，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <param name="format">一个数值格式字符串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
      <param name="format">一个数值格式字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)">
      <summary>将具有指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效单精度浮点数字。 一个指示转换是否成功的返回值。</summary>
      <returns>如果成功转换了 <paramref name="s" />，则为 true；否则为 false。</returns>
      <param name="s">表示要转换的数字的字符串。</param>
      <param name="style">枚举值的一个按位组合，指示 <paramref name="s" /> 所允许的格式。 一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Float" /> 与 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的组合。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 所包含的数值或符号等效的单精度浮点数字；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 null，其格式不符合 <paramref name="style" />，表示的数字小于 <see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" />，或者 <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 枚举的常数的有效组合，则转换失败。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 为 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.TryParse(System.String,System.Single@)">
      <summary>将数字的字符串表示形式转换为它的等效单精度浮点数字。 一个指示转换是否成功的返回值。</summary>
      <returns>如果成功转换了 <paramref name="s" />，则为 true；否则为 false。</returns>
      <param name="s">表示要转换的数字的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 所包含的数值或符号等效的单精度浮点数字；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 null，不是有效格式的数字或者表示的数字小于 <see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" />，则转换将失败。 该参数未经初始化即被传递。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.String">
      <summary>表示文本，即一系列 Unicode 字符。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.#ctor(System.Char*)">
      <summary>将 <see cref="T:System.String" /> 类的新实例初始化为由指向 Unicode 字符数组的指定指针指示的值。</summary>
      <param name="value">指向以 null 终止的 Unicode 字符数组的指针。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">当前进程并不是对所有编址字符都有读取权限。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 指定了包含无效 Unicode 字符的数组，或者 <paramref name="value" /> 指定了小于 64000 的地址。</exception>
    </member>
    <member name="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)">
      <summary>将 <see cref="T:System.String" /> 类的新实例初始化为由指向 Unicode 字符数组的指定指针、该数组内的起始字符位置和一个长度指示的值。</summary>
      <param name="value">指向 Unicode 字符数组的指针。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。</param>
      <param name="length">要使用的 <paramref name="value" /> 内的字符数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 小于零，<paramref name="value" /> + <paramref name="startIndex" /> 引起指针溢出，或者当前进程并不是对所有编址字符都有读取权限。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 指定了包含无效 Unicode 字符的数组，或者 <paramref name="value" /> + <paramref name="startIndex" /> 指定了小于 64000 的地址。</exception>
    </member>
    <member name="M:System.String.#ctor(System.Char,System.Int32)">
      <summary>将 <see cref="T:System.String" /> 类的新实例初始化为由重复指定次数的指定 Unicode 字符指示的值。</summary>
      <param name="c">一个 Unicode 字符。</param>
      <param name="count">
        <paramref name="c" /> 出现的次数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小于零。</exception>
    </member>
    <member name="M:System.String.#ctor(System.Char[])">
      <summary>将 <see cref="T:System.String" /> 类的新实例初始化为由 Unicode 字符数组指示的值。</summary>
      <param name="value">Unicode 字符的数组。</param>
    </member>
    <member name="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)">
      <summary>将 <see cref="T:System.String" /> 类的新实例初始化为由 Unicode 字符数组、该数组内的起始字符位置和一个长度指示的值。</summary>
      <param name="value">Unicode 字符的数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。</param>
      <param name="length">要使用的 <paramref name="value" /> 内的字符数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 小于零。 - 或 - <paramref name="startIndex" /> 和 <paramref name="length" /> 之和大于 <paramref name="value" /> 中的元素数。</exception>
    </member>
    <member name="P:System.String.Chars(System.Int32)">
      <summary>获取当前 <see cref="T:System.String" /> 对象中位于指定位置的 <see cref="T:System.Char" /> 对象。</summary>
      <returns>位于 <paramref name="index" /> 位置的对象。</returns>
      <param name="index">当前的字符串中的位置。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 大于等于该对象的长度或小于零。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>对两个指定的 <see cref="T:System.String" /> 对象的子字符串进行比较，并返回一个指示二者在排序顺序中的相对位置的整数。</summary>
      <returns>一个 32 位有符号整数，指示两个比较数之间的词法关系。 值 Condition 小于零 <paramref name="strA" /> 中的子字符串小于 <paramref name="strB" /> 中的子字符串。 零 子字符串相等，或者 <paramref name="length" /> 为零。 大于零 <paramref name="strA" /> 中的子字符串大于 <paramref name="strB" /> 中的子字符串。</returns>
      <param name="strA">要在比较中使用的第一个字符串。</param>
      <param name="indexA">
        <paramref name="strA" /> 中子字符串的位置。</param>
      <param name="strB">要在比较中使用的第二个字符串。</param>
      <param name="indexB">
        <paramref name="strB" /> 中子字符串的位置。</param>
      <param name="length">要比较的子字符串中字符的最大数量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> 大于 <paramref name="strA" />.<see cref="P:System.String.Length" />。 - 或 - <paramref name="indexB" /> 大于 <paramref name="strB" />.<see cref="P:System.String.Length" />。 - 或 - <paramref name="indexA" />、<paramref name="indexB" /> 或 <paramref name="length" /> 为负。 - 或 - <paramref name="indexA" /> 或 <paramref name="indexB" /> 为 null，而 <paramref name="length" /> 大于零。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>使用指定的规则比较两个指定的 <see cref="T:System.String" /> 对象的子字符串，并返回一个整数，指示二者在排序顺序中的相对位置。</summary>
      <returns>一个 32 位带符号整数，指示两个比较数之间的词法关系。 值 Condition 小于零 <paramref name="strA" /> 参数中的子字符串小于 <paramref name="strB" /> 参数中的子字符串。 零 子字符串相等，或者 <paramref name="length" /> 参数为零。 大于零 <paramref name="strA" /> 中的子字符串大于 <paramref name="strB" /> 中的子字符串。</returns>
      <param name="strA">要在比较中使用的第一个字符串。</param>
      <param name="indexA">
        <paramref name="strA" /> 中子字符串的位置。</param>
      <param name="strB">要在比较中使用的第二个字符串。</param>
      <param name="indexB">
        <paramref name="strB" /> 中子字符串的位置。</param>
      <param name="length">要比较的子字符串中字符的最大数量。</param>
      <param name="comparisonType">一个枚举值，用于指定比较中要使用的规则。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> 大于 <paramref name="strA" />.<see cref="P:System.String.Length" />。 - 或 - <paramref name="indexB" /> 大于 <paramref name="strB" />.<see cref="P:System.String.Length" />。 - 或 - <paramref name="indexA" />、<paramref name="indexB" /> 或 <paramref name="length" /> 为负。 - 或 - <paramref name="indexA" /> 或 <paramref name="indexB" /> 为 null，而 <paramref name="length" /> 大于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是一个 <see cref="T:System.StringComparison" /> 值。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Compare(System.String,System.String)">
      <summary>比较两个指定的 <see cref="T:System.String" /> 对象，并返回一个指示二者在排序顺序中的相对位置的整数。</summary>
      <returns>一个 32 位带符号整数，指示两个比较数之间的词法关系。 值 Condition 小于零 <paramref name="strA" /> 小于 <paramref name="strB" />。 零 <paramref name="strA" /> 等于 <paramref name="strB" />。 大于零 <paramref name="strA" /> 大于 <paramref name="strB" />。</returns>
      <param name="strA">要比较的第一个字符串。</param>
      <param name="strB">要比较的第二个字符串。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
      <summary>对两个指定的 <see cref="T:System.String" /> 对象进行比较，使用指定的比较选项和区域性特定的信息来影响比较，并返回一个整数，该整数指示这两个字符串在排序顺序中的关系。</summary>
      <returns>一个 32 位带符号整数，该整数指示 <paramref name="strA" /> 与 <paramref name="strB" /> 之间的词法关系，如下表所示 值 Condition 小于零 <paramref name="strA" /> 小于 <paramref name="strB" />。 零 <paramref name="strA" /> 等于 <paramref name="strB" />。 大于零 <paramref name="strA" /> 大于 <paramref name="strB" />。</returns>
      <param name="strA">要比较的第一个字符串。</param>
      <param name="strB">要比较的第二个字符串。</param>
      <param name="culture">提供区域性特定的比较信息的区域性。</param>
      <param name="options">要在执行比较时使用的选项（如忽略大小写或符号）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是一个 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 为 null。</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.StringComparison)">
      <summary>使用指定的规则比较两个指定的 <see cref="T:System.String" /> 对象，并返回一个整数，指示二者在排序顺序中的相对位置。</summary>
      <returns>一个 32 位带符号整数，指示两个比较数之间的词法关系。 值 Condition 小于零 <paramref name="strA" /> 小于 <paramref name="strB" />。 零 <paramref name="strA" /> 等于 <paramref name="strB" />。 大于零 <paramref name="strA" /> 大于 <paramref name="strB" />。</returns>
      <param name="strA">要比较的第一个字符串。</param>
      <param name="strB">要比较的第二个字符串。</param>
      <param name="comparisonType">一个枚举值，用于指定比较中要使用的规则。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是一个 <see cref="T:System.StringComparison" /> 值。</exception>
      <exception cref="T:System.NotSupportedException">不支持 <see cref="T:System.StringComparison" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>通过计算两个指定的 <see cref="T:System.String" /> 对象的每个子字符串中相应 <see cref="T:System.Char" /> 对象的数值比较子字符串。</summary>
      <returns>一个 32 位带符号整数，指示两个比较数之间的词法关系。 值 Condition 小于零 <paramref name="strA" /> 中的子字符串小于 <paramref name="strB" /> 中的子字符串。 零 子字符串相等，或者 <paramref name="length" /> 为零。 大于零 <paramref name="strA" /> 中的子字符串大于 <paramref name="strB" /> 中的子字符串。</returns>
      <param name="strA">要在比较中使用的第一个字符串。</param>
      <param name="indexA">
        <paramref name="strA" /> 中子字符串的起始索引。</param>
      <param name="strB">要在比较中使用的第二个字符串。</param>
      <param name="indexB">
        <paramref name="strB" /> 中子字符串的起始索引。</param>
      <param name="length">要比较的子字符串中字符的最大数量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="strA" /> 不为 null，且 <paramref name="indexA" /> 大于 <paramref name="strA" />。<see cref="P:System.String.Length" />。 - 或 - <paramref name="strB" /> 不为 null，且 <paramref name="indexB" /> 大于 <paramref name="strB" />。<see cref="P:System.String.Length" />。 - 或 - <paramref name="indexA" />、<paramref name="indexB" /> 或 <paramref name="length" /> 为负。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.String)">
      <summary>通过计算每个字符串中相应 <see cref="T:System.Char" /> 对象的数值来比较两个指定的 <see cref="T:System.String" /> 对象。</summary>
      <returns>一个整数，指示两个比较字之间的词法关系。 值 Condition 小于零 <paramref name="strA" /> 小于 <paramref name="strB" />。 零 <paramref name="strA" /> 与 <paramref name="strB" /> 相等。 大于零 <paramref name="strA" /> 大于 <paramref name="strB" />。</returns>
      <param name="strA">要比较的第一个字符串。</param>
      <param name="strB">要比较的第二个字符串。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.CompareTo(System.String)">
      <summary>将此实例与指定的 <see cref="T:System.String" /> 对象进行比较，并指示此实例在排序顺序中是位于指定的 <see cref="T:System.String" /> 之前、之后还是与其出现在同一位置。</summary>
      <returns>一个 32 位有符号整数，该整数指示此实例在排序顺序中是位于 <paramref name="value" /> 参数之前、之后还是与其出现在同一位置。 值 Condition 小于零 此实例位于 <paramref name="strB" /> 之前。 零 此实例在排序顺序中的位置与 <paramref name="strB" /> 相同。 大于零 此实例位于 <paramref name="strB" /> 之后。 - 或 - <paramref name="strB" /> 为 null。</returns>
      <param name="strB">要与此实例进行比较的字符串。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})">
      <summary>串联类型为 <see cref="T:System.String" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 构造集合的成员。</summary>
      <returns>
        <paramref name="values" /> 中的串联字符串。</returns>
      <param name="values">一个集合对象，该对象实现 <see cref="T:System.Collections.Generic.IEnumerable`1" />，且其泛型类型参数为 <see cref="T:System.String" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 为 null。</exception>
    </member>
    <member name="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>串联 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 实现的成员。</summary>
      <returns>
        <paramref name="values" /> 中的串联成员。</returns>
      <param name="values">一个实现 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 接口的集合对象。</param>
      <typeparam name="T">
        <paramref name="values" /> 成员的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 为 null。</exception>
    </member>
    <member name="M:System.String.Concat(System.Object)">
      <summary>创建指定对象的字符串表示形式。</summary>
      <returns>
        <paramref name="arg0" /> 或 <see cref="F:System.String.Empty" /> 值的字符串表示形式，如果为 <paramref name="arg0" />，则为 null。</returns>
      <param name="arg0">要表示的对象，或 null。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object)">
      <summary>连接两个指定对象的字符串表示形式。</summary>
      <returns>
        <paramref name="arg0" /> 和 <paramref name="arg1" /> 的值经过连接的字符串表示形式。</returns>
      <param name="arg0">要连接的第一个对象。</param>
      <param name="arg1">要连接的第二个对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object,System.Object)">
      <summary>连接三个指定对象的字符串表示形式。</summary>
      <returns>
        <paramref name="arg0" />、<paramref name="arg1" /> 和 <paramref name="arg2" /> 的值经过连接的字符串表示形式。</returns>
      <param name="arg0">要连接的第一个对象。</param>
      <param name="arg1">要连接的第二个对象。</param>
      <param name="arg2">要连接的第三个对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.Object[])">
      <summary>连接指定 <see cref="T:System.Object" /> 数组中的元素的字符串表示形式。</summary>
      <returns>
        <paramref name="args" /> 中元素的值经过连接的字符串表示形式。</returns>
      <param name="args">一个对象数组，其中包含要连接的元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="args" /> 为 null。</exception>
      <exception cref="T:System.OutOfMemoryException">内存不足。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.String,System.String)">
      <summary>连接 <see cref="T:System.String" /> 的两个指定实例。</summary>
      <returns>
        <paramref name="str0" /> 和 <paramref name="str1" /> 的连接。</returns>
      <param name="str0">要连接的第一个字符串。</param>
      <param name="str1">要连接的第二个字符串。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String)">
      <summary>连接 <see cref="T:System.String" /> 的三个指定实例。</summary>
      <returns>
        <paramref name="str0" />、<paramref name="str1" /> 和 <paramref name="str2" /> 的连接。</returns>
      <param name="str0">要连接的第一个字符串。</param>
      <param name="str1">要连接的第二个字符串。</param>
      <param name="str2">要连接的第三个字符串。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String,System.String)">
      <summary>连接 <see cref="T:System.String" /> 的四个指定实例。</summary>
      <returns>
        <paramref name="str0" />、<paramref name="str1" />、<paramref name="str2" /> 和 <paramref name="str3" /> 的连接。</returns>
      <param name="str0">要连接的第一个字符串。</param>
      <param name="str1">要连接的第二个字符串。</param>
      <param name="str2">要连接的第三个字符串。</param>
      <param name="str3">要连接的第四个字符串。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.String[])">
      <summary>连接指定的 <see cref="T:System.String" /> 数组的元素。</summary>
      <returns>
        <paramref name="values" /> 的连接元素。</returns>
      <param name="values">字符串实例的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 为 null。</exception>
      <exception cref="T:System.OutOfMemoryException">内存不足。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Contains(System.String)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.String" /> 对象是否出现在此字符串中。</summary>
      <returns>如果 <paramref name="value" /> 参数出现在此字符串中，或者 <paramref name="value" /> 为空字符串 ("")，则为 true；否则为 false。</returns>
      <param name="value">要搜寻的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>将指定数目的字符从此实例中的指定位置复制到 Unicode 字符数组中的指定位置。</summary>
      <param name="sourceIndex">要复制的此实例中第一个字符的索引。</param>
      <param name="destination">此实例中的字符所复制到的 Unicode 字符数组。</param>
      <param name="destinationIndex">
        <paramref name="destination" /> 中的索引，在此处开始复制操作。</param>
      <param name="count">此实例中要复制到 <paramref name="destination" /> 的字符数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" />、<paramref name="destinationIndex" /> 或 <paramref name="count" /> 为负 - 或 - <paramref name="count" /> 大于从 <paramref name="startIndex" /> 到此实例末尾的子字符串的长度 - 或 - <paramref name="count" /> 大于从 <paramref name="destinationIndex" /> 到 <paramref name="destination" /> 末尾的子数组的长度</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.String.Empty">
      <summary>表示空字符串。 此字段为只读。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.EndsWith(System.String)">
      <summary>确定此字符串实例的结尾是否与指定的字符串匹配。</summary>
      <returns>如果 <paramref name="value" /> 与此实例的末尾匹配，则为 true；否则为 false。</returns>
      <param name="value">要与此实例末尾的子字符串进行比较的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.EndsWith(System.String,System.StringComparison)">
      <summary>确定使用指定的比较选项进行比较时此字符串实例的结尾是否与指定的字符串匹配。</summary>
      <returns>如果此字符串的末尾与 <paramref name="value" /> 参数匹配，则为 true；否则为 false。</returns>
      <param name="value">要与此实例末尾的子字符串进行比较的字符串。</param>
      <param name="comparisonType">枚举值之一，用于确定如何比较此字符串与 <paramref name="value" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是一个 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.Equals(System.Object)">
      <summary>确定此实例是否与指定的对象（也必须是 <see cref="T:System.String" /> 对象）具有相同的值。</summary>
      <returns>如果 <paramref name="obj" /> 为 <see cref="T:System.String" /> 并且它的值与此实例相同，则为 true；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的字符串。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Equals(System.String)">
      <summary>确定此实例是否与另一个指定的 <see cref="T:System.String" /> 对象具有相同的值。</summary>
      <returns>如果 <paramref name="value" /> 参数的值与此实例相同，则为 true；否则为 false。</returns>
      <param name="value">要与此实例进行比较的字符串。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Equals(System.String,System.String)">
      <summary>确定两个指定的 <see cref="T:System.String" /> 对象是否具有相同的值。</summary>
      <returns>如果 <paramref name="a" /> 的值与 <paramref name="b" /> 的值相同，则为 true；否则为 false。 如果 <paramref name="a" /> 和 <paramref name="b" /> 均为 null，该方法返回 true。</returns>
      <param name="a">要比较的第一个字符串，或 null。</param>
      <param name="b">要比较的第二个字符串，或 null。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Equals(System.String,System.String,System.StringComparison)">
      <summary>确定两个指定的 <see cref="T:System.String" /> 对象是否具有相同的值。 参数指定区域性、大小写以及比较所用的排序规则。</summary>
      <returns>如果 <paramref name="a" /> 参数的值等于 <paramref name="b" /> 参数的值，则为 true；否则为 false。</returns>
      <param name="a">要比较的第一个字符串，或 null。</param>
      <param name="b">要比较的第二个字符串，或 null。</param>
      <param name="comparisonType">枚举值之一，用于指定比较的规则。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是一个 <see cref="T:System.StringComparison" /> 值。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Equals(System.String,System.StringComparison)">
      <summary>确定此字符串是否与指定的 <see cref="T:System.String" /> 对象具有相同的值。 参数指定区域性、大小写以及比较所用的排序规则。</summary>
      <returns>如果 <paramref name="value" /> 参数的值与此字符串相同，则为 true；否则为 false。</returns>
      <param name="value">要与此实例进行比较的字符串。</param>
      <param name="comparisonType">枚举值之一，用于指定将如何比较字符串。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是一个 <see cref="T:System.StringComparison" /> 值。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
      <summary>将指定字符串中的格式项替换为指定数组中相应对象的字符串表示形式。 指定的参数提供区域性特定的格式设置信息。</summary>
      <returns>
        <paramref name="format" /> 的一个副本，其中格式项已替换为 <paramref name="args" /> 中相应对象的字符串表示形式。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <param name="format">符合格式字符串（参见“备注”）。</param>
      <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 或 <paramref name="args" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。 - 或 - 格式项的索引小于零或大于等于 <paramref name="args" /> 数组的长度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Format(System.String,System.Object[])">
      <summary>将指定字符串中的格式项替换为指定数组中相应对象的字符串表示形式。</summary>
      <returns>
        <paramref name="format" /> 的一个副本，其中格式项已替换为 <paramref name="args" /> 中相应对象的字符串表示形式。</returns>
      <param name="format">符合格式字符串（参见“备注”）。</param>
      <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 或 <paramref name="args" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。 - 或 - 格式项的索引小于零或大于等于 <paramref name="args" /> 数组的长度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.GetHashCode">
      <summary>返回该字符串的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.Char)">
      <summary>报告指定 Unicode 字符在此字符串中的第一个匹配项的从零开始的索引。</summary>
      <returns>如果找到该字符，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到，则为 -1。</returns>
      <param name="value">要查找的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32)">
      <summary>报告指定 Unicode 字符在此字符串中的第一个匹配项的从零开始的索引。 该搜索从指定字符位置开始。</summary>
      <returns>如果找到该字符，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到，则为 -1。</returns>
      <param name="value">要查找的 Unicode 字符。</param>
      <param name="startIndex">搜索起始位置。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于零或大于字符串的长度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
      <summary>报告指定字符在此实例中的第一个匹配项的从零开始的索引。 搜索从指定字符位置开始，并检查指定数量的字符位置。</summary>
      <returns>如果找到该字符，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到，则为 -1。</returns>
      <param name="value">要查找的 Unicode 字符。</param>
      <param name="startIndex">搜索起始位置。</param>
      <param name="count">要检查的字符位置数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 或 <paramref name="startIndex" /> 为负。 - 或 - <paramref name="startIndex" /> 大于此字符串的长度。 - 或 - <paramref name="count" /> 大于此字符串的长度减去 <paramref name="startIndex" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.String)">
      <summary>报告指定字符串在此实例中的第一个匹配项的从零开始的索引。</summary>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到该字符串，则为 -1。 如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 0。</returns>
      <param name="value">要搜寻的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32)">
      <summary>报告指定字符串在此实例中的第一个匹配项的从零开始的索引。 该搜索从指定字符位置开始。</summary>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到该字符串，则为 -1。 如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" />。</returns>
      <param name="value">要搜寻的字符串。</param>
      <param name="startIndex">搜索起始位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于零或大于此字符串的长度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
      <summary>报告指定字符串在此实例中的第一个匹配项的从零开始的索引。 搜索从指定字符位置开始，并检查指定数量的字符位置。</summary>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到该字符串，则为 -1。 如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" />。</returns>
      <param name="value">要搜寻的字符串。</param>
      <param name="startIndex">搜索起始位置。</param>
      <param name="count">要检查的字符位置数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 或 <paramref name="startIndex" /> 为负。 - 或 - <paramref name="startIndex" /> 大于此字符串的长度。 - 或 - <paramref name="count" /> 大于此字符串的长度减去 <paramref name="startIndex" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>报告指定的字符串在当前 <see cref="T:System.String" /> 对象中的第一个匹配项的从零开始的索引。 参数指定当前字符串中的起始搜索位置、要搜索的当前字符串中的字符数量，以及要用于指定字符串的搜索类型。</summary>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 参数的从零开始的索引位置；如果未找到该字符串，则为 -1。 如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" />。</returns>
      <param name="value">要搜寻的字符串。</param>
      <param name="startIndex">搜索起始位置。</param>
      <param name="count">要检查的字符位置数。</param>
      <param name="comparisonType">指定搜索规则的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 或 <paramref name="startIndex" /> 为负。 - 或 - <paramref name="startIndex" /> 大于此实例的长度。 - 或 - <paramref name="count" /> 大于此字符串的长度减去 <paramref name="startIndex" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
      <summary>报告指定的字符串在当前 <see cref="T:System.String" /> 对象中的第一个匹配项的从零开始的索引。 参数指定当前字符串中的起始搜索位置以及用于指定字符串的搜索类型。</summary>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 参数的从零开始的索引位置；如果未找到该字符串，则为 -1。 如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" />。</returns>
      <param name="value">要搜寻的字符串。</param>
      <param name="startIndex">搜索起始位置。</param>
      <param name="comparisonType">指定搜索规则的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于零或大于此字符串的长度。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.StringComparison)">
      <summary>报告指定的字符串在当前 <see cref="T:System.String" /> 对象中的第一个匹配项的从零开始的索引。 一个参数指定要用于指定字符串的搜索类型。</summary>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 参数的索引位置；如果未找到该字符串，则为 -1。 如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 0。</returns>
      <param name="value">要搜寻的字符串。</param>
      <param name="comparisonType">指定搜索规则的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[])">
      <summary>报告指定 Unicode 字符数组中的任意字符在此实例中第一个匹配项的从零开始的索引。</summary>
      <returns>在此实例中第一次找到 <paramref name="anyOf" /> 中的任意字符的索引位置（从零开始）；如果未找到 <paramref name="anyOf" /> 中的字符，则为 -1。</returns>
      <param name="anyOf">Unicode 字符数组，包含一个或多个要查找的字符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32)">
      <summary>报告指定 Unicode 字符数组中的任意字符在此实例中第一个匹配项的从零开始的索引。 该搜索从指定字符位置开始。</summary>
      <returns>在此实例中第一次找到 <paramref name="anyOf" /> 中的任意字符的索引位置（从零开始）；如果未找到 <paramref name="anyOf" /> 中的字符，则为 -1。</returns>
      <param name="anyOf">Unicode 字符数组，包含一个或多个要查找的字符。</param>
      <param name="startIndex">搜索起始位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 为负数。 - 或 - <paramref name="startIndex" /> 大于此实例中的字符数。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>报告指定 Unicode 字符数组中的任意字符在此实例中第一个匹配项的从零开始的索引。 搜索从指定字符位置开始，并检查指定数量的字符位置。</summary>
      <returns>在此实例中第一次找到 <paramref name="anyOf" /> 中的任意字符的索引位置（从零开始）；如果未找到 <paramref name="anyOf" /> 中的字符，则为 -1。</returns>
      <param name="anyOf">Unicode 字符数组，包含一个或多个要查找的字符。</param>
      <param name="startIndex">搜索起始位置。</param>
      <param name="count">要检查的字符位置数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 或 <paramref name="startIndex" /> 为负。 - 或 - <paramref name="count" />+<paramref name="startIndex" /> 大于此实例中的字符数。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Insert(System.Int32,System.String)">
      <summary>返回指定字符串在这种情况下插入在指定索引位置的新字符串。</summary>
      <returns>与此实例等效的一个新字符串，但在该字符串的 <paramref name="startIndex" /> 位置处插入了 <paramref name="value" />。</returns>
      <param name="startIndex">插入的从零开始的索引位置。</param>
      <param name="value">要插入的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 为负，或大于此实例的长度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IsNullOrEmpty(System.String)">
      <summary>指示指定的字符串是 null 还是 <see cref="F:System.String.Empty" /> 字符串。</summary>
      <returns>如果 <paramref name="value" /> 参数为 null 或空字符串 ("")，则为 true；否则为 false。</returns>
      <param name="value">要测试的字符串。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IsNullOrWhiteSpace(System.String)">
      <summary>指示指定的字符串是 null、空还是仅由空白字符组成。</summary>
      <returns>如果 <paramref name="value" /> 参数为 null 或 <see cref="F:System.String.Empty" />，或者如果 <paramref name="value" /> 仅由空白字符组成，则为 true。</returns>
      <param name="value">要测试的字符串。</param>
    </member>
    <member name="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>串联类型为 <see cref="T:System.String" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 构造集合的成员，其中在每个成员之间使用指定的分隔符。</summary>
      <returns>一个由 <paramref name="values" /> 的成员组成的字符串，这些成员以 <paramref name="separator" /> 字符串分隔。 如果 <paramref name="values" />  无元素，则方法返回 <see cref="F:System.String.Empty" />。</returns>
      <param name="separator">要用作分隔符的字符串。 只有在 <paramref name="values" /> 具有多个元素时，<paramref name="separator" /> 才包括在返回的字符串中。</param>
      <param name="values">一个包含要串联的字符串的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 为 null。</exception>
    </member>
    <member name="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
      <summary>串联集合的成员，其中在每个成员之间使用指定的分隔符。</summary>
      <returns>一个由 <paramref name="values" /> 的成员组成的字符串，这些成员以 <paramref name="separator" /> 字符串分隔。 如果 <paramref name="values" />  无元素，则方法返回 <see cref="F:System.String.Empty" />。</returns>
      <param name="separator">要用作分隔符的字符串。 只有在 <paramref name="values" /> 具有多个元素时，<paramref name="separator" /> 才包括在返回的字符串中。</param>
      <param name="values">一个包含要串联的对象的集合。</param>
      <typeparam name="T">
        <paramref name="values" /> 成员的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 为 null。</exception>
    </member>
    <member name="M:System.String.Join(System.String,System.Object[])">
      <summary>串联对象数组的各个元素，其中在每个元素之间使用指定的分隔符。</summary>
      <returns>一个由 <paramref name="values" /> 的元素组成的字符串，这些元素以 <paramref name="separator" /> 字符串分隔。 如果 <paramref name="values" /> 为空数组，则 <see cref="F:System.String.Empty" /> 方法将返回 。</returns>
      <param name="separator">要用作分隔符的字符串。 只有在 <paramref name="values" /> 具有多个元素时，<paramref name="separator" /> 才包括在返回的字符串中。</param>
      <param name="values">一个数组，其中包含要连接的元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 为 null。</exception>
    </member>
    <member name="M:System.String.Join(System.String,System.String[])">
      <summary>串联字符串数组的所有元素，其中在每个元素之间使用指定的分隔符。</summary>
      <returns>一个由 <paramref name="value" /> 中的元素组成的字符串，这些元素以 <paramref name="separator" /> 字符串分隔。 如果 <paramref name="value" /> 为空数组，则 <see cref="F:System.String.Empty" /> 方法将返回 。</returns>
      <param name="separator">要用作分隔符的字符串。 只有在 <paramref name="value" /> 具有多个元素时，<paramref name="separator" /> 才包括在返回的字符串中。</param>
      <param name="value">一个数组，其中包含要连接的元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
      <summary>串联字符串数组的指定元素，其中在每个元素之间使用指定的分隔符。</summary>
      <returns>由 <paramref name="value" /> 中的字符串组成的字符串，这些字符串以 <paramref name="separator" /> 字符串分隔。 - 或 - 如果 <paramref name="count" /> 为零，<paramref name="value" /> 没有元素，或 <paramref name="separator" /> 以及 <paramref name="value" /> 的全部元素均为 <see cref="F:System.String.Empty" />，则为 <see cref="F:System.String.Empty" />。</returns>
      <param name="separator">要用作分隔符的字符串。 只有在 <paramref name="value" /> 具有多个元素时，<paramref name="separator" /> 才包括在返回的字符串中。</param>
      <param name="value">一个数组，其中包含要连接的元素。</param>
      <param name="startIndex">
        <paramref name="value" /> 中要使用的第一个元素。</param>
      <param name="count">要使用的 <paramref name="value" /> 的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="count" /> 小于 0。 - 或 - <paramref name="startIndex" /> 加上 <paramref name="count" /> 大于 <paramref name="value" /> 中的元素数。</exception>
      <exception cref="T:System.OutOfMemoryException">内存不足。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char)">
      <summary>报告指定 Unicode 字符在此实例中的最后一个匹配项的从零开始的索引位置。</summary>
      <returns>如果找到该字符，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到，则为 -1。</returns>
      <param name="value">要查找的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32)">
      <summary>报告指定 Unicode 字符在此实例中的最后一个匹配项的从零开始的索引位置。 在指定的字符位置开始和在向后的右边该字符串的开头处理的搜索。</summary>
      <returns>如果找到该字符，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到，则为 -1。或者如果当前实例等于 <see cref="F:System.String.Empty" /> 则也为 -1。</returns>
      <param name="value">要查找的 Unicode 字符。</param>
      <param name="startIndex">搜索的起始位置。 从 <paramref name="startIndex" /> 此实例的开头开始搜索。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">当前实例不等于 <see cref="F:System.String.Empty" />，而且 <paramref name="startIndex" /> 小于零，或者大于或等于此实例的长度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
      <summary>报告指定的 Unicode 字符在此实例内的子字符串中的最后一个匹配项的从零开始的索引位置。 搜索在指定字符位置的数目的字符串开始时，开始指定字符和其后面的位置。</summary>
      <returns>如果找到该字符，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到，则为 -1。或者如果当前实例等于 <see cref="F:System.String.Empty" /> 则也为 -1。</returns>
      <param name="value">要查找的 Unicode 字符。</param>
      <param name="startIndex">搜索的起始位置。 从 <paramref name="startIndex" /> 此实例的开头开始搜索。</param>
      <param name="count">要检查的字符位置数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">当前实例不等于 <see cref="F:System.String.Empty" />，而且 <paramref name="startIndex" /> 小于零，或者大于或等于此实例的长度。 - 或 - 当前实例不等于 <see cref="F:System.String.Empty" />，且 <paramref name="startIndex" />  -<paramref name="count" /> + 1 小于零。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.String)">
      <summary>报告指定字符串在此实例中的最后一个匹配项的从零开始的索引位置。</summary>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到该字符串，则为 -1。 如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为此实例中的最后一个索引位置。</returns>
      <param name="value">要搜寻的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32)">
      <summary>报告指定字符串在此实例中的最后一个匹配项的从零开始的索引位置。 在指定的字符位置开始和在向后的右边该字符串的开头处理的搜索。</summary>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到，则为 -1。或者如果当前实例等于 <see cref="F:System.String.Empty" /> 则也为 -1。 如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" /> 和此实例中的最后一个索引位置中的较小者。</returns>
      <param name="value">要搜寻的字符串。</param>
      <param name="startIndex">搜索起始位置。 从 <paramref name="startIndex" /> 此实例的开头开始搜索。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">当前实例不等于 <see cref="F:System.String.Empty" />，且 <paramref name="startIndex" /> 小于零，或者大于或等于当前实例的长度。 - 或 - 当前实例等于 <see cref="F:System.String.Empty" />，且 <paramref name="startIndex" /> 大于零。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
      <summary>报告指定字符串在此实例中的最后一个匹配项的从零开始的索引位置。 搜索在指定字符位置的数目的字符串开始时，开始指定字符和其后面的位置。</summary>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到，则为 -1。或者如果当前实例等于 <see cref="F:System.String.Empty" /> 则也为 -1。 如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" /> 和此实例中的最后一个索引位置中的较小者。</returns>
      <param name="value">要搜寻的字符串。</param>
      <param name="startIndex">搜索起始位置。 从 <paramref name="startIndex" /> 此实例的开头开始搜索。</param>
      <param name="count">要检查的字符位置数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 为负数。 - 或 - 当前实例不等于 <see cref="F:System.String.Empty" />，且 <paramref name="startIndex" /> 是负数。 - 或 - 当前实例不等于 <see cref="F:System.String.Empty" />，且 <paramref name="startIndex" /> 大于此实例的长度。 - 或 - 当前实例不等于 <see cref="F:System.String.Empty" />，且 <paramref name="startIndex" />  -<paramref name="count" /> + 1 指定一个不在此实例中的位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>报告指定字符串在此实例中的最后一个匹配项的从零开始的索引位置。 搜索在所指定的字符位置的数目的字符串开始时，开始指定字符和其后面的位置。 一个参数指定要执行搜索指定字符串的比较类型。</summary>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 参数的索引位置；如果未找到，则为 -1。或者如果当前实例等于 <see cref="F:System.String.Empty" /> 则也为 -1。 如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" /> 和此实例中的最后一个索引位置中的较小者。</returns>
      <param name="value">要搜寻的字符串。</param>
      <param name="startIndex">搜索起始位置。 从 <paramref name="startIndex" /> 此实例的开头开始搜索。</param>
      <param name="count">要检查的字符位置数。</param>
      <param name="comparisonType">指定搜索规则的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 为负数。 - 或 - 当前实例不等于 <see cref="F:System.String.Empty" />，且 <paramref name="startIndex" /> 是负数。 - 或 - 当前实例不等于 <see cref="F:System.String.Empty" />，且 <paramref name="startIndex" /> 大于此实例的长度。 - 或 - 当前实例不等于 <see cref="F:System.String.Empty" />，而且 <paramref name="startIndex" /> + 1 - <paramref name="count" /> 指定一个不在此实例中的位置。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
      <summary>报告指定字符串在当前 <see cref="T:System.String" /> 对象中最后一个匹配项的从零开始的索引。 在指定的字符位置开始和在向后的右边该字符串的开头处理的搜索。 一个参数指定要执行搜索指定字符串的比较类型。</summary>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 参数的索引位置；如果未找到，则为 -1。或者如果当前实例等于 <see cref="F:System.String.Empty" /> 则也为 -1。 如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" /> 和此实例中的最后一个索引位置中的较小者。</returns>
      <param name="value">要搜寻的字符串。</param>
      <param name="startIndex">搜索起始位置。 从 <paramref name="startIndex" /> 此实例的开头开始搜索。</param>
      <param name="comparisonType">指定搜索规则的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">当前实例不等于 <see cref="F:System.String.Empty" />，且 <paramref name="startIndex" /> 小于零，或者大于或等于当前实例的长度。 - 或 - 当前实例等于 <see cref="F:System.String.Empty" />，且 <paramref name="startIndex" /> 大于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.StringComparison)">
      <summary>报告指定字符串在当前 <see cref="T:System.String" /> 对象中最后一个匹配项的从零开始的索引。 一个参数指定要用于指定字符串的搜索类型。</summary>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 参数的索引位置；如果未找到该字符串，则为 -1。 如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为此实例中的最后一个索引位置。</returns>
      <param name="value">要搜寻的字符串。</param>
      <param name="comparisonType">指定搜索规则的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[])">
      <summary>报告在 Unicode 数组中指定的一个或多个字符在此实例中的最后一个匹配项的从零开始的索引位置。</summary>
      <returns>最后一次在此实例中找到 <paramref name="anyOf" /> 中的任意字符的索引位置；如果未找到 <paramref name="anyOf" /> 中的字符，则为 -1。</returns>
      <param name="anyOf">Unicode 字符数组，包含一个或多个要查找的字符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
      <summary>报告在 Unicode 数组中指定的一个或多个字符在此实例中的最后一个匹配项的从零开始的索引位置。 在指定的字符位置开始和在向后的右边该字符串的开头处理的搜索。</summary>
      <returns>最后一次在此实例中找到 <paramref name="anyOf" /> 中的任意字符的索引位置；如果未找到 <paramref name="anyOf" /> 中的字符或者当前实例等于<see cref="F:System.String.Empty" />，则为 -1。</returns>
      <param name="anyOf">Unicode 字符数组，包含一个或多个要查找的字符。</param>
      <param name="startIndex">搜索起始位置。 从 <paramref name="startIndex" /> 此实例的开头开始搜索。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">当前实例不等于 <see cref="F:System.String.Empty" />，而且 <paramref name="startIndex" /> 指定一个不在此实例中的位置。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>报告在 Unicode 数组中指定的一个或多个字符在此实例中的最后一个匹配项的从零开始的索引位置。 搜索在指定字符位置的数目的字符串开始时，开始指定字符和其后面的位置。</summary>
      <returns>最后一次在此实例中找到 <paramref name="anyOf" /> 中的任意字符的索引位置；如果未找到 <paramref name="anyOf" /> 中的字符或者当前实例等于<see cref="F:System.String.Empty" />，则为 -1。</returns>
      <param name="anyOf">Unicode 字符数组，包含一个或多个要查找的字符。</param>
      <param name="startIndex">搜索起始位置。 从 <paramref name="startIndex" /> 此实例的开头开始搜索。</param>
      <param name="count">要检查的字符位置数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">当前实例不等于 <see cref="F:System.String.Empty" />，且 <paramref name="count" /> 或 <paramref name="startIndex" /> 是负数。 - 或 - 当前实例不等于 <see cref="F:System.String.Empty" />，而且 <paramref name="startIndex" /> 减去 <paramref name="count" /> 指定一个不在此实例中的位置。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.String.Length">
      <summary>获取当前 <see cref="T:System.String" /> 对象中的字符数。</summary>
      <returns>当前字符串中字符的数量。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.op_Equality(System.String,System.String)">
      <summary>确定两个指定的字符串是否具有相同的值。</summary>
      <returns>如果 <paramref name="a" /> 的值与 <paramref name="b" /> 的值相同，则为 true；否则为 false。</returns>
      <param name="a">要比较的第一个字符串，或 null。</param>
      <param name="b">要比较的第二个字符串，或 null。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.String.op_Inequality(System.String,System.String)">
      <summary>确定两个指定的字符串是否具有不同的值。</summary>
      <returns>如果 <paramref name="a" /> 的值与 <paramref name="b" /> 的值不同，则为 true；否则为 false。</returns>
      <param name="a">要比较的第一个字符串，或 null。</param>
      <param name="b">要比较的第二个字符串，或 null。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.String.PadLeft(System.Int32)">
      <summary>返回一个新字符串，该字符串通过在此实例中的字符左侧填充空格来达到指定的总长度，从而实现右对齐。</summary>
      <returns>与此实例等效的一个新字符串，但该字符串为右对齐，因此，在左侧填充所需数量的空格，使长度达到 <paramref name="totalWidth" />。 但是，如果 <paramref name="totalWidth" /> 小于此事例的长度，则方法将返回对现有实例的引用。 如果 <paramref name="totalWidth" /> 等于此实例的长度，则返回为与此实例相同的新字符串。</returns>
      <param name="totalWidth">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> 小于零。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.PadLeft(System.Int32,System.Char)">
      <summary>返回一个新字符串，该字符串通过在此实例中的字符左侧填充指定的 Unicode 字符来达到指定的总长度，从而使这些字符右对齐。</summary>
      <returns>与此实例等效的一个新字符串，但该字符串为右对齐，因此，在左侧填充所需任意数量的 <paramref name="paddingChar" /> 字符，使长度达到 <paramref name="totalWidth" />。 但是，如果 <paramref name="totalWidth" /> 小于此事例的长度，则方法将返回对现有实例的引用。 如果 <paramref name="totalWidth" /> 等于此实例的长度，则返回为与此实例相同的新字符串。</returns>
      <param name="totalWidth">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</param>
      <param name="paddingChar">Unicode 填充字符。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> 小于零。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.PadRight(System.Int32)">
      <summary>返回一个新字符串，该字符串通过在此字符串中的字符右侧填充空格来达到指定的总长度，从而使这些字符左对齐。</summary>
      <returns>与此实例等效的一个新字符串，但该字符串为左对齐，因此，在右侧填充所需任意数量的空格，使长度达到 <paramref name="totalWidth" />。 但是，如果 <paramref name="totalWidth" /> 小于此事例的长度，则方法将返回对现有实例的引用。 如果 <paramref name="totalWidth" /> 等于此实例的长度，则返回为与此实例相同的新字符串。</returns>
      <param name="totalWidth">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> 小于零。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.PadRight(System.Int32,System.Char)">
      <summary>返回一个新字符串，该字符串通过在此字符串中的字符右侧填充指定的 Unicode 字符来达到指定的总长度，从而使这些字符左对齐。</summary>
      <returns>与此实例等效的一个新字符串，但该字符串为左对齐，因此，在右侧填充所需任意数量的 <paramref name="paddingChar" /> 字符，使长度达到 <paramref name="totalWidth" />。 但是，如果 <paramref name="totalWidth" /> 小于此事例的长度，则方法将返回对现有实例的引用。 如果 <paramref name="totalWidth" /> 等于此实例的长度，则返回为与此实例相同的新字符串。</returns>
      <param name="totalWidth">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</param>
      <param name="paddingChar">Unicode 填充字符。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> 小于零。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Remove(System.Int32)">
      <summary>返回当前实例中从指定位置到最后位置的所有以删除的字符的新字符串。</summary>
      <returns>一个新字符串，除所删除的字符之外，该字符串与此字符串等效。</returns>
      <param name="startIndex">开始删除字符的从零开始的位置。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于零。 - 或 - <paramref name="startIndex" /> 指定的位置不在此字符串内。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Remove(System.Int32,System.Int32)">
      <summary>返回指定数量字符在当前这个实例起始点在已删除的指定的位置的新字符串。</summary>
      <returns>一个新字符串，除所删除的字符之外，该字符串与此实例等效。</returns>
      <param name="startIndex">开始删除字符的从零开始的位置。</param>
      <param name="count">要删除的字符数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="count" /> 小于零。 - 或 - <paramref name="startIndex" /> 加 <paramref name="count" /> 之和指定一个此实例外的位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Replace(System.Char,System.Char)">
      <summary>返回一个新字符串，其中此实例中出现的所有指定 Unicode 字符都替换为另一个指定的 Unicode 字符。</summary>
      <returns>等效于此实例（除了 <paramref name="oldChar" /> 的所有实例都已替换为 <paramref name="newChar" /> 外）的字符串。</returns>
      <param name="oldChar">要被替换的 Unicode 字符。</param>
      <param name="newChar">要替换出现的所有 <paramref name="oldChar" /> 的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Replace(System.String,System.String)">
      <summary>返回一个新字符串，其中当前实例中出现的所有指定字符串都替换为另一个指定的字符串。</summary>
      <returns>等效于当前字符串（除了 <paramref name="oldValue" /> 的所有实例都已替换为 <paramref name="newValue" /> 外）的字符串。</returns>
      <param name="oldValue">要被替换的字符串。</param>
      <param name="newValue">要替换出现的所有 <paramref name="oldValue" /> 的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> 是空字符串 ("")。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Split(System.Char[])">
      <summary>返回的字符串数组包含此实例中的子字符串（由指定 Unicode 字符数组的元素分隔）。</summary>
      <returns>一个数组，其元素包含此实例中的子字符串，这些子字符串由 <paramref name="separator" /> 中的一个或多个字符分隔。 有关更多信息，请参见“备注”一节。</returns>
      <param name="separator">分隔此实例中子字符串的 Unicode 字符数组、不包含分隔符的空数组或 null。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Split(System.Char[],System.Int32)">
      <summary>返回的字符串数组包含此实例中的子字符串（由指定 Unicode 字符数组的元素分隔）。 参数指定返回的子字符串的最大数量。</summary>
      <returns>一个数组，其元素包含此实例中的子字符串，这些子字符串由 <paramref name="separator" /> 中的一个或多个字符分隔。 有关更多信息，请参见“备注”一节。</returns>
      <param name="separator">分隔此实例中子字符串的 Unicode 字符数组、不包含分隔符的空数组或 null。</param>
      <param name="count">要返回的子字符串的最大数量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 为负数。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
      <summary>返回的字符串数组包含此字符串中的子字符串（由指定 Unicode 字符数组的元素分隔）。 参数指定要返回子字符串的最大数量，以及是否返回空数组元素。</summary>
      <returns>一个数组，其元素包含此字符串中的子字符串，这些子字符串由 <paramref name="separator" /> 中的一个或多个字符分隔。 有关更多信息，请参见“备注”一节。</returns>
      <param name="separator">分隔此字符串中子字符串的 Unicode 字符数组、不包含分隔符的空数组或 null。</param>
      <param name="count">要返回的子字符串的最大数量。</param>
      <param name="options">要省略返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />；要包含返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.None" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是 <see cref="T:System.StringSplitOptions" /> 值之一。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Split(System.Char[],System.StringSplitOptions)">
      <summary>返回的字符串数组包含此字符串中的子字符串（由指定 Unicode 字符数组的元素分隔）。 参数指定是否返回空数组元素。</summary>
      <returns>一个数组，其元素包含此字符串中的子字符串，这些子字符串由 <paramref name="separator" /> 中的一个或多个字符分隔。 有关更多信息，请参见“备注”一节。</returns>
      <param name="separator">分隔此字符串中子字符串的 Unicode 字符数组、不包含分隔符的空数组或 null。</param>
      <param name="options">要省略返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />；要包含返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.None" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是 <see cref="T:System.StringSplitOptions" /> 值之一。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
      <summary>返回的字符串数组包含此字符串中的子字符串（由指定字符串数组的元素分隔）。 参数指定要返回子字符串的最大数量，以及是否返回空数组元素。</summary>
      <returns>一个数组，其元素包含此字符串中的子字符串，这些子字符串由 <paramref name="separator" /> 中的一个或多个字符串分隔。 有关更多信息，请参见“备注”一节。</returns>
      <param name="separator">分隔此字符串中子字符串的字符串数组、不包含分隔符的空数组或 null。</param>
      <param name="count">要返回的子字符串的最大数量。</param>
      <param name="options">要省略返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />；要包含返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.None" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是 <see cref="T:System.StringSplitOptions" /> 值之一。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Split(System.String[],System.StringSplitOptions)">
      <summary>返回的字符串数组包含此字符串中的子字符串（由指定字符串数组的元素分隔）。 参数指定是否返回空数组元素。</summary>
      <returns>一个数组，其元素包含此字符串中的子字符串，这些子字符串由 <paramref name="separator" /> 中的一个或多个字符串分隔。 有关更多信息，请参见“备注”一节。</returns>
      <param name="separator">分隔此字符串中子字符串的字符串数组、不包含分隔符的空数组或 null。</param>
      <param name="options">要省略返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />；要包含返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.None" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是 <see cref="T:System.StringSplitOptions" /> 值之一。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.StartsWith(System.String)">
      <summary>确定此字符串实例的开头是否与指定的字符串匹配。</summary>
      <returns>如果 <paramref name="value" /> 与此字符串的开头匹配，则为 true；否则为 false。</returns>
      <param name="value">要比较的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.StartsWith(System.String,System.StringComparison)">
      <summary>确定在使用指定的比较选项进行比较时此字符串实例的开头是否与指定的字符串匹配。</summary>
      <returns>true（如果该实例以 <paramref name="value" /> 开头；否则为 false）。</returns>
      <param name="value">要比较的字符串。</param>
      <param name="comparisonType">枚举值之一，用于确定如何比较此字符串与 <paramref name="value" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是一个 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.Substring(System.Int32)">
      <summary>从此实例检索子字符串。 子字符串从指定的字符位置开始。</summary>
      <returns>与此实例中在 <paramref name="startIndex" /> 处开头的子字符串等效的一个字符串；如果 <paramref name="startIndex" /> 等于此实例的长度，则为 <see cref="F:System.String.Empty" />。</returns>
      <param name="startIndex">此实例中子字符串的起始字符位置（从零开始）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于零或大于此实例的长度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Substring(System.Int32,System.Int32)">
      <summary>从此实例检索子字符串。 子字符串从指定的字符位置开始且具有指定的长度。</summary>
      <returns>与此实例中在 <paramref name="startIndex" /> 处开头、长度为 <paramref name="length" /> 的子字符串等效的一个字符串，如果 <paramref name="startIndex" /> 等于此实例的长度且 <paramref name="length" /> 为零，则为 <see cref="F:System.String.Empty" />。</returns>
      <param name="startIndex">此实例中子字符串的起始字符位置（从零开始）。</param>
      <param name="length">子字符串中的字符数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 加 <paramref name="length" /> 之和指示的位置不在此实例中。 - 或 - <paramref name="startIndex" /> 或 <paramref name="length" /> 小于零。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问当前 <see cref="T:System.String" /> 对象的枚举数。</summary>
      <returns>一个枚举器，可用于循环访问当前的字符串。</returns>
    </member>
    <member name="M:System.String.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。 返回值 含义 小于零 此实例按排序顺序在 <paramref name="value" /> 前面。 零 此实例与 <paramref name="value" /> 按排序顺序中出现的位置相同。 大于零 此实例按排序顺序在 <paramref name="value" /> 后面。 - 或 - <paramref name="value" /> 为 null。</returns>
      <param name="value">与此实例进行比较的 object，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.String" />。</exception>
    </member>
    <member name="M:System.String.ToCharArray">
      <summary>将此实例中的字符复制到 Unicode 字符数组。</summary>
      <returns>元素为此实例的各字符的 Unicode 字符数组。 如果此实例是空字符串，则返回的数组为空且长度为零。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.ToCharArray(System.Int32,System.Int32)">
      <summary>将此实例中的指定子字符串内的字符复制到 Unicode 字符数组。</summary>
      <returns>元素为此实例中从字符位置 <paramref name="startIndex" /> 开始的 <paramref name="length" /> 字符数的 Unicode 字符数组。</returns>
      <param name="startIndex">此实例内子字符串的起始位置。</param>
      <param name="length">此实例内子字符串的长度。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 小于零。 - 或 - <paramref name="startIndex" /> 加上 <paramref name="length" /> 大于此实例的长度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.ToLower">
      <summary>返回此字符串转换为小写形式的副本。</summary>
      <returns>一个小写字符串。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.String.ToLowerInvariant">
      <summary>返回此 <see cref="T:System.String" /> 对象的转换为小写形式的副本，返回时使用固定区域性的大小写规则。</summary>
      <returns>当前字符串的等效小写形式。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.String.ToString">
      <summary>返回 <see cref="T:System.String" /> 的此实例；不执行实际转换。</summary>
      <returns>当前的字符串。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.ToUpper">
      <summary>返回此字符串转换为大写形式的副本。</summary>
      <returns>当前字符串的大写形式。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.String.ToUpperInvariant">
      <summary>返回此 <see cref="T:System.String" /> 对象的转换为大写形式的副本，返回时使用固定区域性的大小写规则。</summary>
      <returns>当前字符串的大写形式。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.String.Trim">
      <summary>从当前 <see cref="T:System.String" /> 对象移除所有前导空白字符和尾部空白字符。</summary>
      <returns>从当前字符串的开头和结尾删除所有空白字符后剩余的字符串。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Trim(System.Char[])">
      <summary>从当前 <see cref="T:System.String" /> 对象移除数组中指定的一组字符的所有前导匹配项和尾部匹配项。</summary>
      <returns>从当前字符串的开头和结尾删除所出现的所有 <paramref name="trimChars" /> 参数中的字符后剩余的字符串。 如果 <paramref name="trimChars" /> 为 null 或空数组，则改为移除空白字符。</returns>
      <param name="trimChars">要删除的 Unicode 字符的数组，或 null。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.TrimEnd(System.Char[])">
      <summary>从当前 <see cref="T:System.String" /> 对象移除数组中指定的一组字符的所有尾部匹配项。</summary>
      <returns>从当前字符串的结尾移除所出现的所有 <paramref name="trimChars" /> 参数中的字符后剩余的字符串。 如果 <paramref name="trimChars" /> 为 null 或空数组，则改为删除 Unicode 空白字符。</returns>
      <param name="trimChars">要删除的 Unicode 字符的数组，或 null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.TrimStart(System.Char[])">
      <summary>从当前 <see cref="T:System.String" /> 对象移除数组中指定的一组字符的所有前导匹配项。</summary>
      <returns>从当前字符串的开头移除所出现的所有 <paramref name="trimChars" /> 参数中的字符后剩余的字符串。 如果 <paramref name="trimChars" /> 为 null 或空数组，则改为移除空白字符。</returns>
      <param name="trimChars">要删除的 Unicode 字符的数组，或 null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.StringComparer">
      <summary>表示一种字符串比较操作，该操作使用特定的大小写以及基于区域性的比较规则或序号比较规则。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.StringComparer.#ctor">
      <summary>初始化 <see cref="T:System.StringComparer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.StringComparer.Compare(System.String,System.String)">
      <summary>当在派生类中重写时，将比较两个字符串并返回其相对排序顺序的指示。</summary>
      <returns>一个有符号整数，指示 <paramref name="x" /> 与 <paramref name="y" /> 的相对值，如下表所示。 值 含义 小于零 <paramref name="x" /> 小于 <paramref name="y" />。 - 或 - <paramref name="x" /> 为 null。 零 <paramref name="x" /> 等于 <paramref name="y" />。 大于零 <paramref name="x" /> 大于 <paramref name="y" />。 - 或 - <paramref name="y" /> 为 null。</returns>
      <param name="x">要与 <paramref name="y" /> 比较的字符串。</param>
      <param name="y">要与 <paramref name="x" /> 比较的字符串。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
      <summary>创建 <see cref="T:System.StringComparer" /> 对象，该对象根据指定区域性的规则对字符串进行比较。</summary>
      <returns>一个新 <see cref="T:System.StringComparer" /> 对象，该对象根据 <paramref name="culture" /> 参数使用的比较规则以及 <paramref name="ignoreCase" /> 参数指定的大小写规则执行字符串比较。</returns>
      <param name="culture">一个区域性，其语言规则用于执行字符串比较。</param>
      <param name="ignoreCase">true 指定比较操作不区分大小写；false 指定比较操作区分大小写。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 为 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.StringComparer.CurrentCulture">
      <summary>获取一个 <see cref="T:System.StringComparer" /> 对象，该对象使用当前区域性的单词比较规则执行区分大小写的字符串比较。</summary>
      <returns>一个新的 <see cref="T:System.StringComparer" /> 对象。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.StringComparer.CurrentCultureIgnoreCase">
      <summary>获取一个 <see cref="T:System.StringComparer" /> 对象，该对象使用当前区域性的单词比较规则执行不区分大小写的字符串比较。</summary>
      <returns>一个新的 <see cref="T:System.StringComparer" /> 对象。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.StringComparer.Equals(System.String,System.String)">
      <summary>当在派生类中重写时，指示两个字符串是否相等。</summary>
      <returns>如果 <paramref name="x" /> 和 <paramref name="y" /> 引用同一对象，或者 <paramref name="x" /> 和 <paramref name="y" /> 相等，则为 true；否则为 false。</returns>
      <param name="x">要与 <paramref name="y" /> 比较的字符串。</param>
      <param name="y">要与 <paramref name="x" /> 比较的字符串。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.StringComparer.GetHashCode(System.String)">
      <summary>当在派生类中重写时，将获取指定字符串的哈希代码。</summary>
      <returns>根据 <paramref name="obj" /> 参数的值计算出的 32 位有符号哈希代码。</returns>
      <param name="obj">一个字符串。</param>
      <exception cref="T:System.ArgumentException">没有足够的内存可用于分配计算哈希代码所需的缓冲区。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.StringComparer.Ordinal">
      <summary>获取 <see cref="T:System.StringComparer" /> 对象，该对象执行区分大小写的序号字符串比较。</summary>
      <returns>
        <see cref="T:System.StringComparer" /> 对象。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.StringComparer.OrdinalIgnoreCase">
      <summary>获取 <see cref="T:System.StringComparer" /> 对象，该对象执行不区分大小写的序号字符串比较。</summary>
      <returns>
        <see cref="T:System.StringComparer" /> 对象。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.StringComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
      <summary>比较两个对象并返回一个值，指示一个对象是小于、等于还是大于另一个对象。</summary>
      <returns>一个有符号整数，指示 <paramref name="x" /> 与 <paramref name="y" /> 的相对值，如下表所示。 值 含义 小于零 <paramref name="x" /> 小于 <paramref name="y" />。 零 <paramref name="x" /> 等于 <paramref name="y" />。 大于零 <paramref name="x" /> 大于 <paramref name="y" />。</returns>
      <param name="x">要比较的第一个对象。</param>
      <param name="y">要比较的第二个对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> 和 <paramref name="y" /> 都不实现 <see cref="T:System.IComparable" /> 接口。 - 或 - <paramref name="x" /> 和 <paramref name="y" /> 的类型不同，它们都无法处理与另一个进行的比较。</exception>
    </member>
    <member name="M:System.StringComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
      <summary>确定指定的对象是否相等。</summary>
      <returns>如果指定的对象相等，则为 true；否则为 false。</returns>
      <param name="x">要比较的第一个对象。</param>
      <param name="y">要比较的第二个对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> 和 <paramref name="y" /> 的类型不同，它们都无法处理与另一个进行的比较。</exception>
    </member>
    <member name="M:System.StringComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
      <summary>返回指定对象的哈希代码。</summary>
      <returns>指定对象的哈希代码。</returns>
      <param name="obj">将为其返回哈希代码的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 的类型为引用类型，<paramref name="obj" /> 为 null。</exception>
    </member>
    <member name="T:System.StringComparison">
      <summary>指定 <see cref="M:System.String.Compare(System.String,System.String)" /> 和 <see cref="M:System.String.Equals(System.Object)" /> 方法的某些重载要使用的区域、大小写和排序规则。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.StringComparison.CurrentCulture">
      <summary>使用区域敏感排序规则和当前区域比较字符串。</summary>
    </member>
    <member name="F:System.StringComparison.CurrentCultureIgnoreCase">
      <summary>使用区域敏感排序规则、当前区域来比较字符串，同时忽略被比较字符串的大小写。</summary>
    </member>
    <member name="F:System.StringComparison.Ordinal">
      <summary>使用序号排序规则比较字符串。</summary>
    </member>
    <member name="F:System.StringComparison.OrdinalIgnoreCase">
      <summary>使用序号排序规则并忽略被比较字符串的大小写，对字符串进行比较。</summary>
    </member>
    <member name="T:System.StringSplitOptions">
      <summary>指定适用的 <see cref="Overload:System.String.Split" /> 方法重载包含还是省略返回值中的空子字符串。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.StringSplitOptions.None">
      <summary>返回值包括含有空字符串的数组元素</summary>
    </member>
    <member name="F:System.StringSplitOptions.RemoveEmptyEntries">
      <summary>返回值不包括含有空字符串的数组元素</summary>
    </member>
    <member name="T:System.ThreadStaticAttribute">
      <summary>指示静态字段的值对于每个线程都是唯一的。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.ThreadStaticAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ThreadStaticAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.TimeoutException">
      <summary>当为进程或操作分配的时间已过期时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeoutException.#ctor">
      <summary>初始化 <see cref="T:System.TimeoutException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.TimeoutException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误信息和内部异常初始化 <see cref="T:System.TimeoutException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.TimeSpan">
      <summary>表示一个时间间隔。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>将新的 <see cref="T:System.TimeSpan" /> 初始化为指定的小时数、分钟数和秒数。</summary>
      <param name="hours">小时数。</param>
      <param name="minutes">分钟数。</param>
      <param name="seconds">秒数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">该参数指定一个小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" /> 的 <see cref="T:System.TimeSpan" /> 值。</exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>将新的 <see cref="T:System.TimeSpan" /> 初始化为指定的天数、小时数、分钟数和秒数。</summary>
      <param name="days">天数。</param>
      <param name="hours">小时数。</param>
      <param name="minutes">分钟数。</param>
      <param name="seconds">秒数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">该参数指定一个小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" /> 的 <see cref="T:System.TimeSpan" /> 值。</exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>将新的 <see cref="T:System.TimeSpan" /> 初始化为指定的天数、小时数、分钟数、秒数和毫秒数。</summary>
      <param name="days">天数。</param>
      <param name="hours">小时数。</param>
      <param name="minutes">分钟数。</param>
      <param name="seconds">秒数。</param>
      <param name="milliseconds">毫秒数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">该参数指定一个小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" /> 的 <see cref="T:System.TimeSpan" /> 值。</exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int64)">
      <summary>将新的 <see cref="T:System.TimeSpan" /> 初始化为指定的刻度数。</summary>
      <param name="ticks">以 100 毫微秒为单位表示的时间段。</param>
    </member>
    <member name="M:System.TimeSpan.Add(System.TimeSpan)">
      <summary>返回其值为指定的 <see cref="T:System.TimeSpan" /> 对象和此实例的和的新的 <see cref="T:System.TimeSpan" /> 对象。</summary>
      <returns>一个新对象，表示此实例的值加 <paramref name="ts" /> 的值。</returns>
      <param name="ts">待添加的时间间隔。</param>
      <exception cref="T:System.OverflowException">所生成的 <see cref="T:System.TimeSpan" /> 小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" />.。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)">
      <summary>比较两个 <see cref="T:System.TimeSpan" /> 值，并返回一个整数，该整数指示第一个值是短于、等于还是长于第二个值。</summary>
      <returns>以下值之一。 值 描述 -1 <paramref name="t1" /> 短于 <paramref name="t2" />。 0 <paramref name="t1" /> 等于 <paramref name="t2" />。 1 <paramref name="t1" /> 长于 <paramref name="t2" />。</returns>
      <param name="t1">要比较的第一个时间间隔。</param>
      <param name="t2">要比较的第二个时间间隔。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.CompareTo(System.TimeSpan)">
      <summary>将此实例与指定的 <see cref="T:System.TimeSpan" /> 对象进行比较，并返回一个整数，该整数指示此实例是短于、等于还是长于 <see cref="T:System.TimeSpan" /> 对象。</summary>
      <returns>一个有符号数字，指示此实例和 <paramref name="value" /> 的相对值。 值 描述 负整数 此实例短于 <paramref name="value" />。 零 此实例等于 <paramref name="value" />。 正整数 此实例长于 <paramref name="value" />。</returns>
      <param name="value">要与此实例进行比较的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.Days">
      <summary>获取当前 <see cref="T:System.TimeSpan" /> 结构所表示的时间间隔的天数部分。</summary>
      <returns>此实例的天数部分。 返回值可以是正数也可以是负数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Duration">
      <summary>返回新的 <see cref="T:System.TimeSpan" /> 对象，其值是当前 <see cref="T:System.TimeSpan" /> 对象的绝对值。</summary>
      <returns>一个新对象，其值是当前 <see cref="T:System.TimeSpan" /> 对象的绝对值。</returns>
      <exception cref="T:System.OverflowException">此实例的值为 <see cref="F:System.TimeSpan.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果 <paramref name="value" /> 是表示与当前 <see cref="T:System.TimeSpan" /> 结构具有相同时间间隔的 <see cref="T:System.TimeSpan" /> 对象，则为 true；否则为 false。</returns>
      <param name="value">与此实例进行比较的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Equals(System.TimeSpan)">
      <summary>返回一个值，该值指示此实例是否与指定的 <see cref="T:System.TimeSpan" /> 对象相等。</summary>
      <returns>如果 <paramref name="obj" /> 表示的时间间隔与此实例相同，则为 true；否则为 false。</returns>
      <param name="obj">与此实例进行比较的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Equals(System.TimeSpan,System.TimeSpan)">
      <summary>返回一个值，该值指示 <see cref="T:System.TimeSpan" /> 的两个指定实例是否相等。</summary>
      <returns>如果 <paramref name="t1" /> 和 <paramref name="t2" /> 的值相等，则为 true；否则为 false。</returns>
      <param name="t1">要比较的第一个时间间隔。</param>
      <param name="t2">要比较的第二个时间间隔。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.FromDays(System.Double)">
      <summary>返回表示指定天数的 <see cref="T:System.TimeSpan" />，其中对天数的指定精确到最接近的毫秒。</summary>
      <returns>表示 <paramref name="value" /> 的对象。</returns>
      <param name="value">天数，精确到最接近的毫秒。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" />。 - 或 - <paramref name="value" /> 为 <see cref="F:System.Double.PositiveInfinity" />。 - 或 - <paramref name="value" /> 为 <see cref="F:System.Double.NegativeInfinity" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 等于 <see cref="F:System.Double.NaN" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.FromHours(System.Double)">
      <summary>返回表示指定小时数的 <see cref="T:System.TimeSpan" />，其中对小时数的指定精确到最接近的毫秒。</summary>
      <returns>表示 <paramref name="value" /> 的对象。</returns>
      <param name="value">精确到最接近的毫秒的小时数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" />。 - 或 - <paramref name="value" /> 为 <see cref="F:System.Double.PositiveInfinity" />。 - 或 - <paramref name="value" /> 为 <see cref="F:System.Double.NegativeInfinity" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 等于 <see cref="F:System.Double.NaN" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.FromMilliseconds(System.Double)">
      <summary>返回表示指定毫秒数的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>表示 <paramref name="value" /> 的对象。</returns>
      <param name="value">毫秒数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" />。 - 或 - <paramref name="value" /> 为 <see cref="F:System.Double.PositiveInfinity" />。 - 或 - <paramref name="value" /> 为 <see cref="F:System.Double.NegativeInfinity" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 等于 <see cref="F:System.Double.NaN" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.FromMinutes(System.Double)">
      <summary>返回表示指定分钟数的 <see cref="T:System.TimeSpan" />，其中对分钟数的指定精确到最接近的毫秒。</summary>
      <returns>表示 <paramref name="value" /> 的对象。</returns>
      <param name="value">分钟数，精确到最接近的毫秒。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" />。 - 或 - <paramref name="value" /> 为 <see cref="F:System.Double.PositiveInfinity" />。 - 或 - <paramref name="value" /> 为 <see cref="F:System.Double.NegativeInfinity" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 等于 <see cref="F:System.Double.NaN" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.FromSeconds(System.Double)">
      <summary>返回表示指定秒数的 <see cref="T:System.TimeSpan" />，其中对秒数的指定精确到最接近的毫秒。</summary>
      <returns>表示 <paramref name="value" /> 的对象。</returns>
      <param name="value">秒数，精确到最接近的毫秒。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" />。 - 或 - <paramref name="value" /> 为 <see cref="F:System.Double.PositiveInfinity" />。 - 或 - <paramref name="value" /> 为 <see cref="F:System.Double.NegativeInfinity" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 等于 <see cref="F:System.Double.NaN" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.FromTicks(System.Int64)">
      <summary>返回表示指定时间的 <see cref="T:System.TimeSpan" />，其中对时间的指定以刻度为单位。</summary>
      <returns>表示 <paramref name="value" /> 的对象。</returns>
      <param name="value">表示时间的刻度数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.TimeSpan.Hours">
      <summary>获取当前 <see cref="T:System.TimeSpan" /> 结构所表示的时间间隔的小时数部分。</summary>
      <returns>当前 <see cref="T:System.TimeSpan" /> 结构的小时分量。 返回值的范围为 -23 到 23。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.MaxValue">
      <summary>表示最大的 <see cref="T:System.TimeSpan" /> 值。 此字段为只读。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.Milliseconds">
      <summary>获取当前 <see cref="T:System.TimeSpan" /> 结构所表示的时间间隔的毫秒数部分。</summary>
      <returns>当前 <see cref="T:System.TimeSpan" /> 结构的毫秒分量。 返回值的范围为 -999 到 999。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.Minutes">
      <summary>获取当前 <see cref="T:System.TimeSpan" /> 结构所表示的时间间隔的分钟数部分。</summary>
      <returns>当前 <see cref="T:System.TimeSpan" /> 结构的分钟分量。 返回值的范围为 -59 到 59。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.MinValue">
      <summary>表示最小的 <see cref="T:System.TimeSpan" /> 值。 此字段为只读。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Negate">
      <summary>返回其值为此实例的相反值的新 <see cref="T:System.TimeSpan" /> 对象。</summary>
      <returns>与此实例的数值相同但符号相反的新对象。</returns>
      <exception cref="T:System.OverflowException">此实例的求反值不能用 <see cref="T:System.TimeSpan" /> 表示，即此实例的值为 <see cref="F:System.TimeSpan.MinValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_Addition(System.TimeSpan,System.TimeSpan)">
      <summary>添加两个指定的 <see cref="T:System.TimeSpan" /> 实例。</summary>
      <returns>一个对象，其值为 <paramref name="t1" /> 与 <paramref name="t2" /> 的值之和。</returns>
      <param name="t1">要加上的第一个时间间隔。</param>
      <param name="t2">要加上的第二个时间间隔。</param>
      <exception cref="T:System.OverflowException">所生成的 <see cref="T:System.TimeSpan" /> 小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_Equality(System.TimeSpan,System.TimeSpan)">
      <summary>指示两个 <see cref="T:System.TimeSpan" /> 实例是否相等。</summary>
      <returns>如果 <paramref name="t1" /> 和 <paramref name="t2" /> 的值相等，则为 true；否则为 false。</returns>
      <param name="t1">要比较的第一个时间间隔。</param>
      <param name="t2">要比较的第二个时间间隔。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThan(System.TimeSpan,System.TimeSpan)">
      <summary>指示指定的 <see cref="T:System.TimeSpan" /> 是否大于另一个指定的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>如果 <paramref name="t1" /> 的值大于 <paramref name="t2" /> 的值，则为 true；否则为 false。</returns>
      <param name="t1">要比较的第一个时间间隔。</param>
      <param name="t2">要比较的第二个时间间隔。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThanOrEqual(System.TimeSpan,System.TimeSpan)">
      <summary>指示指定的 <see cref="T:System.TimeSpan" /> 是否大于或等于另一个指定的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>如果 <paramref name="t1" /> 的值大于或等于 <paramref name="t2" /> 的值，则为 true；否则为 false。</returns>
      <param name="t1">要比较的第一个时间间隔。</param>
      <param name="t2">要比较的第二个时间间隔。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_Inequality(System.TimeSpan,System.TimeSpan)">
      <summary>指示两个 <see cref="T:System.TimeSpan" /> 实例是否不相等。</summary>
      <returns>如果 <paramref name="t1" /> 和 <paramref name="t2" /> 的值不相等，则为 true；否则为 false。</returns>
      <param name="t1">要比较的第一个时间间隔。</param>
      <param name="t2">要比较的第二个时间间隔。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_LessThan(System.TimeSpan,System.TimeSpan)">
      <summary>指示指定的 <see cref="T:System.TimeSpan" /> 是否小于另一个指定的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>如果 <paramref name="t1" /> 的值小于 <paramref name="t2" /> 的值，则为 true；否则为 false。</returns>
      <param name="t1">要比较的第一个时间间隔。</param>
      <param name="t2">要比较的第二个时间间隔。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_LessThanOrEqual(System.TimeSpan,System.TimeSpan)">
      <summary>指示指定的 <see cref="T:System.TimeSpan" /> 是否小于或等于另一个指定的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>如果 <paramref name="t1" /> 的值小于或等于 <paramref name="t2" /> 的值，则为 true；否则为 false。</returns>
      <param name="t1">要比较的第一个时间间隔。</param>
      <param name="t2">要比较的第二个时间间隔。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_Subtraction(System.TimeSpan,System.TimeSpan)">
      <summary>从另一个指定的 <see cref="T:System.TimeSpan" /> 中减去指定的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>一个对象，其值是 <paramref name="t1" /> 的值减去 <paramref name="t2" /> 的值后所得的结果。</returns>
      <param name="t1">被减数。</param>
      <param name="t2">减数。</param>
      <exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_UnaryNegation(System.TimeSpan)">
      <summary>返回其值为指定实例的相反值的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>与此实例的数值相同，但符号相反的对象。</returns>
      <param name="t">要求反的时间间隔。</param>
      <exception cref="T:System.OverflowException">此实例的求反值不能用 <see cref="T:System.TimeSpan" /> 表示，即此实例的值为 <see cref="F:System.TimeSpan.MinValue" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_UnaryPlus(System.TimeSpan)">
      <summary>返回指定的 <see cref="T:System.TimeSpan" /> 实例。</summary>
      <returns>
        <paramref name="t" /> 所指定的时间间隔。</returns>
      <param name="t">要返回的时间间隔。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Parse(System.String)">
      <summary>将时间间隔的字符串表示形式转换为等效的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>与 <paramref name="s" /> 对应的时间间隔。</returns>
      <param name="s">一个字符串，用于指定进行转换的时间间隔。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 具有无效的格式。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" /> 的数字。 - 或 - 天、小时、分钟或秒中至少有一个分量超出其有效范围。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Parse(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>与 <paramref name="input" /> 对应的时间间隔，由 <paramref name="formatProvider" /> 指定。</returns>
      <param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 具有无效的格式。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> 表示小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" /> 的数字。 - 或 - <paramref name="input" /> 中的天、小时、分钟或秒中至少有一个分量超出其有效范围。</exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan" />。 字符串表示形式的格式必须与指定的格式完全匹配。</summary>
      <returns>与 <paramref name="input" /> 对应的时间间隔，由 <paramref name="format" /> 和 <paramref name="formatProvider" /> 指定。</returns>
      <param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="format">用于定义所需的 <paramref name="input" /> 格式的标准或自定义格式字符串。</param>
      <param name="formatProvider">一个对象，提供区域性特定的格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 具有无效的格式。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> 表示小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" /> 的数字。 - 或 - <paramref name="input" /> 中的天、小时、分钟或秒中至少有一个分量超出其有效范围。</exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles)">
      <summary>使用指定的格式、区域性特定格式信息和样式，将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan" />。 字符串表示形式的格式必须与指定的格式完全匹配。</summary>
      <returns>与 <paramref name="input" /> 对应的时间间隔，由 <paramref name="format" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 指定。</returns>
      <param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="format">用于定义所需的 <paramref name="input" /> 格式的标准或自定义格式字符串。</param>
      <param name="formatProvider">一个对象，提供区域性特定的格式设置信息。</param>
      <param name="styles">枚举值的按位组合，用于定义可出现在 <paramref name="input" /> 中的样式元素。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" />是无效的 <see cref="T:System.Globalization.TimeSpanStyles" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 具有无效的格式。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> 表示小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" /> 的数字。 - 或 - <paramref name="input" /> 中的天、小时、分钟或秒中至少有一个分量超出其有效范围。</exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider)">
      <summary>使用指定的格式字符串数组和区域性特定格式信息，将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan" />。 字符串表示形式的格式必须与一种指定的格式完全匹配。</summary>
      <returns>与 <paramref name="input" /> 对应的时间间隔，由 <paramref name="formats" /> 和 <paramref name="formatProvider" /> 指定。</returns>
      <param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="formats">用于定义所需的 <paramref name="input" /> 格式的标准或自定义格式字符串的数组。</param>
      <param name="formatProvider">一个对象，提供区域性特定的格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 具有无效的格式。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> 表示小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" /> 的数字。 - 或 - <paramref name="input" /> 中的天、小时、分钟或秒中至少有一个分量超出其有效范围。</exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles)">
      <summary>使用指定的格式、区域性特定格式信息和样式，将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan" />。 字符串表示形式的格式必须与一种指定的格式完全匹配。</summary>
      <returns>与 <paramref name="input" /> 对应的时间间隔，由 <paramref name="formats" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 指定。</returns>
      <param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="formats">用于定义所需的 <paramref name="input" /> 格式的标准或自定义格式字符串的数组。</param>
      <param name="formatProvider">一个对象，提供区域性特定的格式设置信息。</param>
      <param name="styles">枚举值的按位组合，用于定义可出现在 input 中的样式元素。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" />是无效的 <see cref="T:System.Globalization.TimeSpanStyles" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 具有无效的格式。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> 表示小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" /> 的数字。 - 或 - <paramref name="input" /> 中的天、小时、分钟或秒中至少有一个分量超出其有效范围。</exception>
    </member>
    <member name="P:System.TimeSpan.Seconds">
      <summary>获取当前 <see cref="T:System.TimeSpan" /> 结构所表示的时间间隔的秒数部分。</summary>
      <returns>当前 <see cref="T:System.TimeSpan" /> 结构的秒分量。 返回值的范围为 -59 到 59。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Subtract(System.TimeSpan)">
      <summary>返回其值为指定的 <see cref="T:System.TimeSpan" /> 对象和此实例的差的新的 <see cref="T:System.TimeSpan" /> 对象。</summary>
      <returns>一个时间间隔，其值为此实例的值减去 <paramref name="ts" /> 的值所得的结果。</returns>
      <param name="ts">要减去的时间间隔。</param>
      <exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。 返回值 含义 小于零 此实例按排序顺序在 <paramref name="value" /> 前面。 零 此实例与 <paramref name="value" /> 按排序顺序中出现的位置相同。 大于零 此实例按排序顺序在 <paramref name="value" /> 后面。 - 或 - <paramref name="value" /> 为 null。</returns>
      <param name="value">与此实例进行比较的 object，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.TimeSpan" /> 对象。</exception>
    </member>
    <member name="P:System.TimeSpan.Ticks">
      <summary>获取表示当前 <see cref="T:System.TimeSpan" /> 结构的值的刻度数。</summary>
      <returns>此实例包含的刻度数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.TicksPerDay">
      <summary>表示一天中的刻度数。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.TicksPerHour">
      <summary>表示 1 小时的刻度数。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.TicksPerMillisecond">
      <summary>表示 1 毫秒的刻度数。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.TicksPerMinute">
      <summary>表示 1 分钟的刻度数。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.TicksPerSecond">
      <summary>表示 1 秒的刻度数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.ToString">
      <summary>将当前 <see cref="T:System.TimeSpan" /> 对象的值转换为其等效的字符串表示形式。</summary>
      <returns>当前 <see cref="T:System.TimeSpan" /> 值的字符串表示形式。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.ToString(System.String)">
      <summary>使用指定的格式将当前 <see cref="T:System.TimeSpan" /> 对象的值转换为其等效的字符串表示形式。</summary>
      <returns>当前 <see cref="T:System.TimeSpan" /> 值的字符串表示形式，该值使用 <paramref name="format" /> 参数指定的格式。</returns>
      <param name="format">标准或自定义的 <see cref="T:System.TimeSpan" /> 格式字符串。</param>
      <exception cref="T:System.FormatException">无法识别或不支持 <paramref name="format" /> 参数。</exception>
    </member>
    <member name="M:System.TimeSpan.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定的格式设置信息，将当前 <see cref="T:System.TimeSpan" /> 对象的值转换为其等效字符串表示形式。</summary>
      <returns>当前 <see cref="T:System.TimeSpan" /> 值的字符串表示形式，格式由 <paramref name="format" /> 和 <paramref name="formatProvider" /> 指定。</returns>
      <param name="format">标准或自定义的 <see cref="T:System.TimeSpan" /> 格式字符串。</param>
      <param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">无法识别或不支持 <paramref name="format" /> 参数。</exception>
    </member>
    <member name="P:System.TimeSpan.TotalDays">
      <summary>获取以整天数和天的小数部分表示的当前 <see cref="T:System.TimeSpan" /> 结构的值。</summary>
      <returns>此实例表示的总天数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.TotalHours">
      <summary>获取以整小时数和小时的小数部分表示的当前 <see cref="T:System.TimeSpan" /> 结构的值。</summary>
      <returns>此实例表示的总小时数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.TotalMilliseconds">
      <summary>获取以整毫秒数和毫秒的小数部分表示的当前 <see cref="T:System.TimeSpan" /> 结构的值。</summary>
      <returns>此实例表示的总毫秒数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.TotalMinutes">
      <summary>获取以整分钟数和分钟的小数部分表示的当前 <see cref="T:System.TimeSpan" /> 结构的值。</summary>
      <returns>此实例表示的总分钟数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.TotalSeconds">
      <summary>获取以整秒数和秒的小数部分表示的当前 <see cref="T:System.TimeSpan" /> 结构的值。</summary>
      <returns>此实例表示的总秒数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.TryParse(System.String,System.IFormatProvider,System.TimeSpan@)">
      <summary>使用指定的区域性特定格式设置信息，将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan" />，并返回一个指示转换是否成功的值。</summary>
      <returns>如果成功转换了 <paramref name="input" />，则为 true；否则为 false。 如果 <paramref name="input" /> 参数为 null 或 <see cref="F:System.String.Empty" />，格式无效，表示的时间间隔小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" />，或者天、小时、分钟或秒分量中至少有一个超出其有效范围，则此运算返回 false。</returns>
      <param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
      <param name="result">此方法返回时，包含表示由 <paramref name="input" /> 指定的时间间隔的对象；或者如果转换失败，则包含 <see cref="F:System.TimeSpan.Zero" />。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.TimeSpan.TryParse(System.String,System.TimeSpan@)">
      <summary>将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan" />，并返回一个指示转换是否成功的值。</summary>
      <returns>如果成功转换了 <paramref name="s" />，则为 true；否则为 false。 如果 <paramref name="s" /> 参数为 null 或 <see cref="F:System.String.Empty" />，格式无效，表示的时间间隔小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" />，或者天、小时、分钟或秒分量中至少有一个超出其有效范围，则此运算返回 false。</returns>
      <param name="s">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="result">此方法返回时，包含表示由 <paramref name="s" /> 指定的时间间隔的对象；或者如果转换失败，则包含 <see cref="F:System.TimeSpan.Zero" />。 该参数未经初始化即被传递。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
      <summary>使用指定的格式、区域性特定格式信息和样式，将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan" />，并返回一个指示转换是否成功的值。 字符串表示形式的格式必须与指定的格式完全匹配。</summary>
      <returns>如果成功转换了 <paramref name="input" />，则为 true；否则为 false。</returns>
      <param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="format">用于定义所需的 <paramref name="input" /> 格式的标准或自定义格式字符串。</param>
      <param name="formatProvider">一个对象，提供区域性特定的格式设置信息。</param>
      <param name="styles">用于指示 <paramref name="input" /> 的样式的一个或多个枚举值。</param>
      <param name="result">此方法返回时，包含表示由 <paramref name="input" /> 指定的时间间隔的对象；或者如果转换失败，则包含 <see cref="F:System.TimeSpan.Zero" />。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.TimeSpan@)">
      <summary>使用指定的格式和区域性特定格式信息，将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan" />，并返回一个指示转换是否成功的值。 字符串表示形式的格式必须与指定的格式完全匹配。</summary>
      <returns>如果成功转换了 <paramref name="input" />，则为 true；否则为 false。</returns>
      <param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="format">用于定义所需的 <paramref name="input" /> 格式的标准或自定义格式字符串。</param>
      <param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
      <param name="result">此方法返回时，包含表示由 <paramref name="input" /> 指定的时间间隔的对象；或者如果转换失败，则包含 <see cref="F:System.TimeSpan.Zero" />。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
      <summary>使用指定的格式、区域性特定格式信息和样式，将时间间隔的指定字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan" />，并返回一个指示转换是否成功的值。 字符串表示形式的格式必须与一种指定的格式完全匹配。</summary>
      <returns>如果成功转换了 <paramref name="input" />，则为 true；否则为 false。</returns>
      <param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="formats">用于定义可接受的 <paramref name="input" /> 格式的标准或自定义格式字符串的数组。</param>
      <param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
      <param name="styles">用于指示 <paramref name="input" /> 的样式的一个或多个枚举值。</param>
      <param name="result">此方法返回时，包含表示由 <paramref name="input" /> 指定的时间间隔的对象；或者如果转换失败，则包含 <see cref="F:System.TimeSpan.Zero" />。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.TimeSpan@)">
      <summary>使用指定的格式和区域性特定格式信息，将时间间隔的指定字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan" />，并返回一个指示转换是否成功的值。 字符串表示形式的格式必须与一种指定的格式完全匹配。</summary>
      <returns>如果成功转换了 <paramref name="input" />，则为 true；否则为 false。</returns>
      <param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="formats">用于定义可接受的 <paramref name="input" /> 格式的标准或自定义格式字符串的数组。</param>
      <param name="formatProvider">一个对象，提供区域性特定的格式设置信息。</param>
      <param name="result">此方法返回时，包含表示由 <paramref name="input" /> 指定的时间间隔的对象；或者如果转换失败，则包含 <see cref="F:System.TimeSpan.Zero" />。 该参数未经初始化即被传递。</param>
    </member>
    <member name="F:System.TimeSpan.Zero">
      <summary>表示零 <see cref="T:System.TimeSpan" /> 值。 此字段为只读。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.TimeZoneInfo">
      <summary>表示世界上的任何时区。</summary>
    </member>
    <member name="P:System.TimeZoneInfo.BaseUtcOffset">
      <summary>获取当前时区的标准时间与协调世界时 (UTC) 之间的时差。</summary>
      <returns>一个对象，指示当前时区的标准时间与协调世界时 (UTC) 之间的时差。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)">
      <summary>将时间转换为特定时区的时间。</summary>
      <returns>目标时区的日期和时间。</returns>
      <param name="dateTime">要转换的日期和时间。</param>
      <param name="destinationTimeZone">要将 <paramref name="dateTime" /> 转换到的时区。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 参数值表示无效时间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationTimeZone" /> 参数的值为 null。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)">
      <summary>将时间转换为特定时区的时间。</summary>
      <returns>目标时区的日期和时间。</returns>
      <param name="dateTimeOffset">要转换的日期和时间。</param>
      <param name="destinationTimeZone">要将 <paramref name="dateTime" /> 转换到的时区。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationTimeZone" /> 参数的值为 null。</exception>
    </member>
    <member name="P:System.TimeZoneInfo.DaylightName">
      <summary>获取当前时区的夏时制的本地化显示名称。</summary>
      <returns>时区的本地化夏时制的显示名称。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.DisplayName">
      <summary>获取表示时区的本地化一般显示名称。</summary>
      <returns>时区的本地化一般显示名称。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)">
      <summary>确定当前的 <see cref="T:System.TimeZoneInfo" /> 对象和另一个 <see cref="T:System.TimeZoneInfo" /> 对象是否相等。</summary>
      <returns>如果两个 <see cref="T:System.TimeZoneInfo" /> 对象相等，则为 true；否则为 false。</returns>
      <param name="other">要与当前对象进行比较的另一个对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)">
      <summary>返回不明确的日期和时间可能映射到的日期和时间的相关信息。</summary>
      <returns>对象的数组，它表示特定日期和时间可以映射到的可能的协调世界时 (UTC) 偏移量。</returns>
      <param name="dateTime">日期和时间。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 是明确的时间。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)">
      <summary>返回不明确的日期和时间可能映射到的日期和时间的相关信息。</summary>
      <returns>对象的数组，它表示特定日期和时间可以映射到的可能的协调世界时 (UTC) 偏移量。</returns>
      <param name="dateTimeOffset">日期和时间。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 是明确的时间。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeZoneInfo.GetHashCode">
      <summary>用作哈希算法的哈希函数和数据结构（如哈希表）。</summary>
      <returns>一个 32 位有符号整数，用作此 <see cref="T:System.TimeZoneInfo" /> 对象的哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)">
      <summary>计算此时区中的时间与协调世界时 (UTC) 之间针对特定日期和时间的偏移量或差值。</summary>
      <returns>一个对象，该对象指示两个时区之间的时差。</returns>
      <param name="dateTime">要为其确定偏移量的日期和时间。</param>
    </member>
    <member name="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)">
      <summary>计算此时区中的时间与协调世界时 (UTC) 之间针对特定日期和时间的偏移量或差值。</summary>
      <returns>一个对象，该对象指示协调世界时 (UTC) 与当前时区之间的时差。</returns>
      <param name="dateTimeOffset">要为其确定偏移量的日期和时间。</param>
    </member>
    <member name="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)">
      <summary>确定特定时区中的特定日期和时间是否不明确以及是否可以映射至两个或多个协调世界时 (UTC) 时间。</summary>
      <returns>如果 <paramref name="dateTime" /> 参数不明确，则为 true；否则为 false。</returns>
      <param name="dateTime">日期和时间值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 值的 <see cref="P:System.DateTime.Kind" /> 属性为 <see cref="F:System.DateTimeKind.Local" />，并且 <paramref name="dateTime" /> 为无效时间。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)">
      <summary>确定特定时区中的特定日期和时间是否不明确以及是否可以映射至两个或多个协调世界时 (UTC) 时间。</summary>
      <returns>如果 <paramref name="dateTimeOffset" /> 参数在当前时区中不明确，则为 true；否则为 false。</returns>
      <param name="dateTimeOffset">日期和时间。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)">
      <summary>指示指定日期和时间是否处于当前 <see cref="T:System.TimeZoneInfo" /> 对象时区的夏时制范围内。</summary>
      <returns>如果 <paramref name="dateTime" /> 参数为夏时制，则为 true；否则为 false。</returns>
      <param name="dateTime">日期和时间值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 值的 <see cref="P:System.DateTime.Kind" /> 属性为 <see cref="F:System.DateTimeKind.Local" />，并且 <paramref name="dateTime" /> 为无效时间。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)">
      <summary>指示指定日期和时间是否处于当前 <see cref="T:System.TimeZoneInfo" /> 对象时区的夏时制范围内。</summary>
      <returns>如果 <paramref name="dateTimeOffset" /> 参数为夏时制，则为 true；否则为 false。</returns>
      <param name="dateTimeOffset">日期和时间值。</param>
    </member>
    <member name="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)">
      <summary>指示特定日期和时间是否无效。</summary>
      <returns>如果 <paramref name="dateTime" /> 无效，则为 true；否则为 false。</returns>
      <param name="dateTime">日期和时间值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.TimeZoneInfo.Local">
      <summary>获取表示本地时区的 <see cref="T:System.TimeZoneInfo" /> 对象。</summary>
      <returns>一个对象，表示本地时区。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.StandardName">
      <summary>获取时区标准时间的本地化显示名称。</summary>
      <returns>时区标准时间的本地化显示名称。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.SupportsDaylightSavingTime">
      <summary>获取一个值，该值指示时区是否具有任何夏时制规则。</summary>
      <returns>如果时区支持夏时制，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.ToString">
      <summary>返回当前 <see cref="T:System.TimeZoneInfo" /> 对象的显示名称。</summary>
      <returns>当前 <see cref="T:System.TimeZoneInfo" /> 对象的 <see cref="P:System.TimeZoneInfo.DisplayName" /> 属性值。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.Utc">
      <summary>获取表示协调世界时 (UTC) 时区的 <see cref="T:System.TimeZoneInfo" /> 对象。</summary>
      <returns>一个对象，表示协调世界时 (UTC) 时区。</returns>
    </member>
    <member name="T:System.Tuple">
      <summary>提供用于创建元组对象的静态方法。</summary>
    </member>
    <member name="M:System.Tuple.Create``1(``0)">
      <summary>创建新的 1 元组，即单一实例。</summary>
      <returns>值为 (<paramref name="item1" />) 的元组。</returns>
      <param name="item1">元组仅有的分量的值。</param>
      <typeparam name="T1">元组的唯一一个分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``2(``0,``1)">
      <summary>创建新的 2 元组，即二元组。</summary>
      <returns>值为 (<paramref name="item1" />, <paramref name="item2" />) 的 2 元组。</returns>
      <param name="item1">此元组的第一个分量的值。</param>
      <param name="item2">此元组的第二个分量的值。</param>
      <typeparam name="T1">此元组的第一个分量的类型。</typeparam>
      <typeparam name="T2">元组的第二个分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``3(``0,``1,``2)">
      <summary>创建新的 3 元组，即三元组。</summary>
      <returns>值为 (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />) 的 3 元组。</returns>
      <param name="item1">此元组的第一个分量的值。</param>
      <param name="item2">此元组的第二个分量的值。</param>
      <param name="item3">此元组的第三个分量的值。</param>
      <typeparam name="T1">此元组的第一个分量的类型。</typeparam>
      <typeparam name="T2">元组的第二个分量的类型。</typeparam>
      <typeparam name="T3">元组的第三个分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``4(``0,``1,``2,``3)">
      <summary>创建新的 4 元组，即四元组。</summary>
      <returns>值为 (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />) 的 4 元组。</returns>
      <param name="item1">此元组的第一个分量的值。</param>
      <param name="item2">此元组的第二个分量的值。</param>
      <param name="item3">此元组的第三个分量的值。</param>
      <param name="item4">此元组的第四个分量的值。</param>
      <typeparam name="T1">此元组的第一个分量的类型。</typeparam>
      <typeparam name="T2">元组的第二个分量的类型。</typeparam>
      <typeparam name="T3">元组的第三个分量的类型。</typeparam>
      <typeparam name="T4">此元组的第四个分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``5(``0,``1,``2,``3,``4)">
      <summary>创建新的 5 元组，即五元组。</summary>
      <returns>值为 (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />) 的 5 元组。</returns>
      <param name="item1">此元组的第一个分量的值。</param>
      <param name="item2">此元组的第二个分量的值。</param>
      <param name="item3">此元组的第三个分量的值。</param>
      <param name="item4">此元组的第四个分量的值。</param>
      <param name="item5">此元组的第五个分量的值。</param>
      <typeparam name="T1">此元组的第一个分量的类型。</typeparam>
      <typeparam name="T2">元组的第二个分量的类型。</typeparam>
      <typeparam name="T3">元组的第三个分量的类型。</typeparam>
      <typeparam name="T4">此元组的第四个分量的类型。</typeparam>
      <typeparam name="T5">此元组的第五个分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
      <summary>创建新的 6 元组，即六元组。</summary>
      <returns>值为 (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />) 的 6 元组。</returns>
      <param name="item1">此元组的第一个分量的值。</param>
      <param name="item2">此元组的第二个分量的值。</param>
      <param name="item3">此元组的第三个分量的值。</param>
      <param name="item4">此元组的第四个分量的值。</param>
      <param name="item5">此元组的第五个分量的值。</param>
      <param name="item6">此元组的第六个分量的值。</param>
      <typeparam name="T1">此元组的第一个分量的类型。</typeparam>
      <typeparam name="T2">元组的第二个分量的类型。</typeparam>
      <typeparam name="T3">元组的第三个分量的类型。</typeparam>
      <typeparam name="T4">此元组的第四个分量的类型。</typeparam>
      <typeparam name="T5">此元组的第五个分量的类型。</typeparam>
      <typeparam name="T6">此元组的第六个分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
      <summary>创建新的 7 元组，即七元组。</summary>
      <returns>值为 (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />, <paramref name="item7" />) 的 7 元组。</returns>
      <param name="item1">此元组的第一个分量的值。</param>
      <param name="item2">此元组的第二个分量的值。</param>
      <param name="item3">此元组的第三个分量的值。</param>
      <param name="item4">此元组的第四个分量的值。</param>
      <param name="item5">此元组的第五个分量的值。</param>
      <param name="item6">此元组的第六个分量的值。</param>
      <param name="item7">元组的第七个分量的值。</param>
      <typeparam name="T1">此元组的第一个分量的类型。</typeparam>
      <typeparam name="T2">元组的第二个分量的类型。</typeparam>
      <typeparam name="T3">元组的第三个分量的类型。</typeparam>
      <typeparam name="T4">此元组的第四个分量的类型。</typeparam>
      <typeparam name="T5">此元组的第五个分量的类型。</typeparam>
      <typeparam name="T6">此元组的第六个分量的类型。</typeparam>
      <typeparam name="T7">元组的第七个分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
      <summary>创建新的 8 元组，即八元组。</summary>
      <returns>值为 (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />, <paramref name="item7" />, <paramref name="item8" />) 的 8 元祖（八元组）。</returns>
      <param name="item1">此元组的第一个分量的值。</param>
      <param name="item2">此元组的第二个分量的值。</param>
      <param name="item3">此元组的第三个分量的值。</param>
      <param name="item4">此元组的第四个分量的值。</param>
      <param name="item5">此元组的第五个分量的值。</param>
      <param name="item6">此元组的第六个分量的值。</param>
      <param name="item7">元组的第七个分量的值。</param>
      <param name="item8">元组的第八个分量的值。</param>
      <typeparam name="T1">此元组的第一个分量的类型。</typeparam>
      <typeparam name="T2">元组的第二个分量的类型。</typeparam>
      <typeparam name="T3">元组的第三个分量的类型。</typeparam>
      <typeparam name="T4">此元组的第四个分量的类型。</typeparam>
      <typeparam name="T5">此元组的第五个分量的类型。</typeparam>
      <typeparam name="T6">此元组的第六个分量的类型。</typeparam>
      <typeparam name="T7">元组的第七个分量的类型。</typeparam>
      <typeparam name="T8">元组的第八个分量的类型。</typeparam>
    </member>
    <member name="T:System.Tuple`1">
      <summary>表示 1 元组，即单一实例。</summary>
      <typeparam name="T1">元组的唯一一个分量的类型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Tuple`1.#ctor(`0)">
      <summary>初始化 <see cref="T:System.Tuple`1" /> 类的新实例。</summary>
      <param name="item1">元组的唯一一个分量的值。</param>
    </member>
    <member name="M:System.Tuple`1.Equals(System.Object)">
      <summary>返回一个值，该值指示当前的 <see cref="T:System.Tuple`1" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="obj">与该实例进行比较的对象。</param>
    </member>
    <member name="M:System.Tuple`1.GetHashCode">
      <summary>返回当前 <see cref="T:System.Tuple`1" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`1.Item1">
      <summary>获取 <see cref="T:System.Tuple`1" /> 对象的单一分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`1" /> 对象的单一分量的值。</returns>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`1" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。 值 描述 负整数 此实例在 <paramref name="other" /> 之前。 零 此实例与 <paramref name="other" /> 在排序顺序中的位置相同。 正整数 此实例在 <paramref name="other" /> 之后。</returns>
      <param name="other">与当前实例进行比较的对象。</param>
      <param name="comparer">一个对象，提供自定义比较规则。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`1" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值根据指定的比较方法指示当前的 <see cref="T:System.Tuple`1" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，定义用于评估两个对象是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`1" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.Tuple`1" /> 对象的哈希代码。</param>
    </member>
    <member name="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
      <summary>将当前 <see cref="T:System.Tuple`1" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是位于指定对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。 值 描述 负整数 此实例在 <paramref name="obj" /> 之前。 零 此实例与 <paramref name="obj" /> 在排序顺序中的位置相同。 正整数 此实例在 <paramref name="obj" /> 之后。</returns>
      <param name="obj">与当前实例进行比较的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`1" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`1.ToString">
      <summary>返回一个字符串，该字符串表示此 <see cref="T:System.Tuple`1" /> 实例的值。</summary>
      <returns>此 <see cref="T:System.Tuple`1" /> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Tuple`2">
      <summary>表示 2 元组，即二元组。</summary>
      <typeparam name="T1">此元组的第一个组件的类型。</typeparam>
      <typeparam name="T2">此元组的第二个组件的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`2.#ctor(`0,`1)">
      <summary>初始化 <see cref="T:System.Tuple`2" /> 类的新实例。</summary>
      <param name="item1">此元组的第一个组件的值。</param>
      <param name="item2">此元组的第二个组件的值。</param>
    </member>
    <member name="M:System.Tuple`2.Equals(System.Object)">
      <summary>返回一个值，该值指示当前的 <see cref="T:System.Tuple`2" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="obj">与该实例进行比较的对象。</param>
    </member>
    <member name="M:System.Tuple`2.GetHashCode">
      <summary>返回当前 <see cref="T:System.Tuple`2" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`2.Item1">
      <summary>获取当前 <see cref="T:System.Tuple`2" /> 对象的第一个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`2" /> 对象的第一个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`2.Item2">
      <summary>获取当前 <see cref="T:System.Tuple`2" /> 对象的第二个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`2" /> 对象的第二个分量的值。</returns>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`2" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。 值 描述 负整数 此实例在 <paramref name="other" /> 之前。 零 此实例与 <paramref name="other" /> 在排序顺序中的位置相同。 正整数 此实例在 <paramref name="other" /> 之后。</returns>
      <param name="other">与当前实例进行比较的对象。</param>
      <param name="comparer">一个对象，提供自定义比较规则。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`2" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值根据指定的比较方法指示当前的 <see cref="T:System.Tuple`2" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，定义用于评估两个对象是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`2" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.Tuple`2" /> 对象的哈希代码。</param>
    </member>
    <member name="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
      <summary>将当前 <see cref="T:System.Tuple`2" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是位于指定对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。 值 描述 负整数 此实例在 <paramref name="obj" /> 之前。 零 此实例与 <paramref name="obj" /> 在排序顺序中的位置相同。 正整数 此实例在 <paramref name="obj" /> 之后。</returns>
      <param name="obj">与当前实例进行比较的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`2" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`2.ToString">
      <summary>返回一个字符串，该字符串表示此 <see cref="T:System.Tuple`2" /> 实例的值。</summary>
      <returns>此 <see cref="T:System.Tuple`2" /> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Tuple`3">
      <summary>表示 3 元组，即三元组。</summary>
      <typeparam name="T1">此元组的第一个组件的类型。</typeparam>
      <typeparam name="T2">此元组的第二个组件的类型。</typeparam>
      <typeparam name="T3">此元组的第三个组件的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`3.#ctor(`0,`1,`2)">
      <summary>初始化 <see cref="T:System.Tuple`3" /> 类的新实例。</summary>
      <param name="item1">此元组的第一个组件的值。</param>
      <param name="item2">此元组的第二个组件的值。</param>
      <param name="item3">此元组的第三个组件的值。</param>
    </member>
    <member name="M:System.Tuple`3.Equals(System.Object)">
      <summary>返回一个值，该值指示当前的 <see cref="T:System.Tuple`3" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="obj">与该实例进行比较的对象。</param>
    </member>
    <member name="M:System.Tuple`3.GetHashCode">
      <summary>返回当前 <see cref="T:System.Tuple`3" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`3.Item1">
      <summary>获取当前 <see cref="T:System.Tuple`3" /> 对象的第一个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`3" /> 对象的第一个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`3.Item2">
      <summary>获取当前 <see cref="T:System.Tuple`3" /> 对象的第二个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`3" /> 对象的第二个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`3.Item3">
      <summary>获取当前 <see cref="T:System.Tuple`3" /> 对象的第三个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`3" /> 对象的第三个分量的值。</returns>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`3" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。 值 描述 负整数 此实例在 <paramref name="other" /> 之前。 零 此实例与 <paramref name="other" /> 在排序顺序中的位置相同。 正整数 此实例在 <paramref name="other" /> 之后。</returns>
      <param name="other">与当前实例进行比较的对象。</param>
      <param name="comparer">一个对象，提供自定义比较规则。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`3" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值根据指定的比较方法指示当前的 <see cref="T:System.Tuple`3" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，定义用于评估两个对象是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`3" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.Tuple`3" /> 对象的哈希代码。</param>
    </member>
    <member name="M:System.Tuple`3.System#IComparable#CompareTo(System.Object)">
      <summary>将当前 <see cref="T:System.Tuple`3" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是位于指定对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。 值 描述 负整数 此实例在 <paramref name="obj" /> 之前。 零 此实例与 <paramref name="obj" /> 在排序顺序中的位置相同。 正整数 此实例在 <paramref name="obj" /> 之后。</returns>
      <param name="obj">与当前实例进行比较的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`3" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`3.ToString">
      <summary>返回一个字符串，该字符串表示此 <see cref="T:System.Tuple`3" /> 实例的值。</summary>
      <returns>此 <see cref="T:System.Tuple`3" /> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Tuple`4">
      <summary>表示 4 元组，即四元组。</summary>
      <typeparam name="T1">此元组的第一个组件的类型。</typeparam>
      <typeparam name="T2">此元组的第二个组件的类型。</typeparam>
      <typeparam name="T3">此元组的第三个组件的类型。</typeparam>
      <typeparam name="T4">此元组的第四个组件的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`4.#ctor(`0,`1,`2,`3)">
      <summary>初始化 <see cref="T:System.Tuple`4" /> 类的新实例。</summary>
      <param name="item1">此元组的第一个组件的值。</param>
      <param name="item2">此元组的第二个组件的值。</param>
      <param name="item3">此元组的第三个组件的值。</param>
      <param name="item4">此元组的第四个组件的值</param>
    </member>
    <member name="M:System.Tuple`4.Equals(System.Object)">
      <summary>返回一个值，该值指示当前的 <see cref="T:System.Tuple`4" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="obj">与该实例进行比较的对象。</param>
    </member>
    <member name="M:System.Tuple`4.GetHashCode">
      <summary>返回当前 <see cref="T:System.Tuple`4" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`4.Item1">
      <summary>获取当前 <see cref="T:System.Tuple`4" /> 对象的第一个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`4" /> 对象的第一个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`4.Item2">
      <summary>获取当前 <see cref="T:System.Tuple`4" /> 对象的第二个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`4" /> 对象的第二个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`4.Item3">
      <summary>获取当前 <see cref="T:System.Tuple`4" /> 对象的第三个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`4" /> 对象的第三个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`4.Item4">
      <summary>获取当前 <see cref="T:System.Tuple`4" /> 对象的第四个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`4" /> 对象的第四个分量的值。</returns>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`4" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。 值 描述 负整数 此实例在 <paramref name="other" /> 之前。 零 此实例与 <paramref name="other" /> 在排序顺序中的位置相同。 正整数 此实例在 <paramref name="other" /> 之后。</returns>
      <param name="other">与当前实例进行比较的对象。</param>
      <param name="comparer">一个对象，提供自定义比较规则。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`4" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值根据指定的比较方法指示当前的 <see cref="T:System.Tuple`4" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，定义用于评估两个对象是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`4" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.Tuple`4" /> 对象的哈希代码。</param>
    </member>
    <member name="M:System.Tuple`4.System#IComparable#CompareTo(System.Object)">
      <summary>将当前 <see cref="T:System.Tuple`4" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是位于指定对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。 值 描述 负整数 此实例在 <paramref name="obj" /> 之前。 零 此实例与 <paramref name="obj" /> 在排序顺序中的位置相同。 正整数 此实例在 <paramref name="obj" /> 之后。</returns>
      <param name="obj">与当前实例进行比较的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`4" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`4.ToString">
      <summary>返回一个字符串，该字符串表示此 <see cref="T:System.Tuple`4" /> 实例的值。</summary>
      <returns>此 <see cref="T:System.Tuple`4" /> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Tuple`5">
      <summary>表示 5 元组，即五元组。</summary>
      <typeparam name="T1">此元组的第一个组件的类型。</typeparam>
      <typeparam name="T2">此元组的第二个组件的类型。</typeparam>
      <typeparam name="T3">此元组的第三个组件的类型。</typeparam>
      <typeparam name="T4">此元组的第四个组件的类型。</typeparam>
      <typeparam name="T5">元组的第五个分量的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`5.#ctor(`0,`1,`2,`3,`4)">
      <summary>初始化 <see cref="T:System.Tuple`5" /> 类的新实例。</summary>
      <param name="item1">此元组的第一个组件的值。</param>
      <param name="item2">此元组的第二个组件的值。</param>
      <param name="item3">此元组的第三个组件的值。</param>
      <param name="item4">此元组的第四个组件的值</param>
      <param name="item5">元组的第五个分量的值。</param>
    </member>
    <member name="M:System.Tuple`5.Equals(System.Object)">
      <summary>返回一个值，该值指示当前的 <see cref="T:System.Tuple`5" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="obj">与该实例进行比较的对象。</param>
    </member>
    <member name="M:System.Tuple`5.GetHashCode">
      <summary>返回当前 <see cref="T:System.Tuple`5" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`5.Item1">
      <summary>获取当前 <see cref="T:System.Tuple`5" /> 对象的第一个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`5" /> 对象的第一个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`5.Item2">
      <summary>获取当前 <see cref="T:System.Tuple`5" /> 对象的第二个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`5" /> 对象的第二个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`5.Item3">
      <summary>获取当前 <see cref="T:System.Tuple`5" /> 对象的第三个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`5" /> 对象的第三个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`5.Item4">
      <summary>获取当前 <see cref="T:System.Tuple`5" /> 对象的第四个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`5" /> 对象的第四个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`5.Item5">
      <summary>获取当前 <see cref="T:System.Tuple`5" /> 对象的第五个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`5" /> 对象的第五个分量的值。</returns>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`5" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。 值 描述 负整数 此实例在 <paramref name="other" /> 之前。 零 此实例与 <paramref name="other" /> 在排序顺序中的位置相同。 正整数 此实例在 <paramref name="other" /> 之后。</returns>
      <param name="other">与当前实例进行比较的对象。</param>
      <param name="comparer">一个对象，提供自定义比较规则。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`5" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值根据指定的比较方法指示当前的 <see cref="T:System.Tuple`5" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，定义用于评估两个对象是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`5" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.Tuple`5" /> 对象的哈希代码。</param>
    </member>
    <member name="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
      <summary>将当前 <see cref="T:System.Tuple`5" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是位于指定对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。 值 描述 负整数 此实例在 <paramref name="obj" /> 之前。 零 此实例与 <paramref name="obj" /> 在排序顺序中的位置相同。 正整数 此实例在 <paramref name="obj" /> 之后。</returns>
      <param name="obj">与当前实例进行比较的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`5" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`5.ToString">
      <summary>返回一个字符串，该字符串表示此 <see cref="T:System.Tuple`5" /> 实例的值。</summary>
      <returns>此 <see cref="T:System.Tuple`5" /> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Tuple`6">
      <summary>表示 6 元组，即六元组。</summary>
      <typeparam name="T1">此元组的第一个组件的类型。</typeparam>
      <typeparam name="T2">此元组的第二个组件的类型。</typeparam>
      <typeparam name="T3">此元组的第三个组件的类型。</typeparam>
      <typeparam name="T4">此元组的第四个组件的类型。</typeparam>
      <typeparam name="T5">元组的第五个分量的类型。</typeparam>
      <typeparam name="T6">元组的第六个分量的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
      <summary>初始化 <see cref="T:System.Tuple`6" /> 类的新实例。</summary>
      <param name="item1">此元组的第一个组件的值。</param>
      <param name="item2">此元组的第二个组件的值。</param>
      <param name="item3">此元组的第三个组件的值。</param>
      <param name="item4">此元组的第四个组件的值</param>
      <param name="item5">元组的第五个分量的值。</param>
      <param name="item6">元组的第六个分量的值。</param>
    </member>
    <member name="M:System.Tuple`6.Equals(System.Object)">
      <summary>返回一个值，该值指示当前 <see cref="T:System.Tuple`6" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="obj">与该实例进行比较的对象。</param>
    </member>
    <member name="M:System.Tuple`6.GetHashCode">
      <summary>返回当前 <see cref="T:System.Tuple`6" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`6.Item1">
      <summary>获取当前 <see cref="T:System.Tuple`6" /> 对象的第一个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`6" /> 对象的第一个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item2">
      <summary>获取当前 <see cref="T:System.Tuple`6" /> 对象的第二个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`6" /> 对象的第二个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item3">
      <summary>获取当前 <see cref="T:System.Tuple`6" /> 对象的第三个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`6" /> 对象的第三个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item4">
      <summary>获取当前 <see cref="T:System.Tuple`6" /> 对象的第四个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`6" /> 对象的第四个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item5">
      <summary>获取当前 <see cref="T:System.Tuple`6" /> 对象的第五个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`6" /> 对象的第五个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item6">
      <summary>获取当前 <see cref="T:System.Tuple`6" /> 对象的第六个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`6" /> 对象的第六个分量的值。</returns>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`6" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。 值 描述 负整数 此实例在 <paramref name="other" /> 之前。 零 此实例与 <paramref name="other" /> 在排序顺序中的位置相同。 正整数 此实例在 <paramref name="other" /> 之后。</returns>
      <param name="other">与当前实例进行比较的对象。</param>
      <param name="comparer">一个对象，提供自定义比较规则。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`6" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值根据指定的比较方法指示当前 <see cref="T:System.Tuple`6" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，定义用于评估两个对象是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`6" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.Tuple`6" /> 对象的哈希代码。</param>
    </member>
    <member name="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
      <summary>将当前 <see cref="T:System.Tuple`6" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是位于指定对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。 值 描述 负整数 此实例在 <paramref name="obj" /> 之前。 零 此实例与 <paramref name="obj" /> 在排序顺序中的位置相同。 正整数 此实例在 <paramref name="obj" /> 之后。</returns>
      <param name="obj">与当前实例进行比较的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`6" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`6.ToString">
      <summary>返回一个字符串，该字符串表示此 <see cref="T:System.Tuple`6" /> 实例的值。</summary>
      <returns>此 <see cref="T:System.Tuple`6" /> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Tuple`7">
      <summary>表示 7 元组，即七元组。</summary>
      <typeparam name="T1">此元组的第一个组件的类型。</typeparam>
      <typeparam name="T2">此元组的第二个组件的类型。</typeparam>
      <typeparam name="T3">此元组的第三个组件的类型。</typeparam>
      <typeparam name="T4">此元组的第四个组件的类型。</typeparam>
      <typeparam name="T5">元组的第五个分量的类型。</typeparam>
      <typeparam name="T6">元组的第六个分量的类型。</typeparam>
      <typeparam name="T7">元组的第七个分量的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
      <summary>初始化 <see cref="T:System.Tuple`7" /> 类的新实例。</summary>
      <param name="item1">此元组的第一个组件的值。</param>
      <param name="item2">此元组的第二个组件的值。</param>
      <param name="item3">此元组的第三个组件的值。</param>
      <param name="item4">此元组的第四个组件的值</param>
      <param name="item5">元组的第五个分量的值。</param>
      <param name="item6">元组的第六个分量的值。</param>
      <param name="item7">元组的第七个分量的值。</param>
    </member>
    <member name="M:System.Tuple`7.Equals(System.Object)">
      <summary>返回一个值，该值指示当前的 <see cref="T:System.Tuple`7" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="obj">与该实例进行比较的对象。</param>
    </member>
    <member name="M:System.Tuple`7.GetHashCode">
      <summary>返回当前 <see cref="T:System.Tuple`7" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`7.Item1">
      <summary>获取当前 <see cref="T:System.Tuple`7" /> 对象的第一个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`7" /> 对象的第一个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item2">
      <summary>获取当前 <see cref="T:System.Tuple`7" /> 对象的第二个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`7" /> 对象的第二个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item3">
      <summary>获取当前 <see cref="T:System.Tuple`7" /> 对象的第三个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`7" /> 对象的第三个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item4">
      <summary>获取当前 <see cref="T:System.Tuple`7" /> 对象的第四个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`7" /> 对象的第四个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item5">
      <summary>获取当前 <see cref="T:System.Tuple`7" /> 对象的第五个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`7" /> 对象的第五个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item6">
      <summary>获取当前 <see cref="T:System.Tuple`7" /> 对象的第六个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`7" /> 对象的第六个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item7">
      <summary>获取当前 <see cref="T:System.Tuple`7" /> 对象的第七个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`7" /> 对象的第七个分量的值。</returns>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`7" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。 值 描述 负整数 此实例在 <paramref name="other" /> 之前。 零 此实例与 <paramref name="other" /> 在排序顺序中的位置相同。 正整数 此实例在 <paramref name="other" /> 之后。</returns>
      <param name="other">与当前实例进行比较的对象。</param>
      <param name="comparer">一个对象，提供自定义比较规则。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`7" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值根据指定的比较方法指示当前的 <see cref="T:System.Tuple`7" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，定义用于评估两个对象是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`7" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.Tuple`7" /> 对象的哈希代码。</param>
    </member>
    <member name="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
      <summary>将当前 <see cref="T:System.Tuple`7" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是位于指定对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。 值 描述 负整数 此实例在 <paramref name="obj" /> 之前。 零 此实例与 <paramref name="obj" /> 在排序顺序中的位置相同。 正整数 此实例在 <paramref name="obj" /> 之后。</returns>
      <param name="obj">与当前实例进行比较的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`7" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`7.ToString">
      <summary>返回一个字符串，该字符串表示此 <see cref="T:System.Tuple`7" /> 实例的值。</summary>
      <returns>此 <see cref="T:System.Tuple`7" /> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Tuple`8">
      <summary>表示 n 元组，其中 n 为 8 或更大。</summary>
      <typeparam name="T1">此元组的第一个组件的类型。</typeparam>
      <typeparam name="T2">此元组的第二个组件的类型。</typeparam>
      <typeparam name="T3">此元组的第三个组件的类型。</typeparam>
      <typeparam name="T4">此元组的第四个组件的类型。</typeparam>
      <typeparam name="T5">元组的第五个分量的类型。</typeparam>
      <typeparam name="T6">元组的第六个分量的类型。</typeparam>
      <typeparam name="T7">元组的第七个分量的类型。</typeparam>
      <typeparam name="TRest">任何常规 Tuple 对象，用于定义元组的剩余分量的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
      <summary>初始化 <see cref="T:System.Tuple`8" /> 类的新实例。</summary>
      <param name="item1">此元组的第一个组件的值。</param>
      <param name="item2">此元组的第二个组件的值。</param>
      <param name="item3">此元组的第三个组件的值。</param>
      <param name="item4">此元组的第四个组件的值</param>
      <param name="item5">元组的第五个分量的值。</param>
      <param name="item6">元组的第六个分量的值。</param>
      <param name="item7">元组的第七个分量的值。</param>
      <param name="rest">任何常规 Tuple 对象，其中包含元组的剩余分量的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rest" /> 不是泛型 Tuple 对象。</exception>
    </member>
    <member name="M:System.Tuple`8.Equals(System.Object)">
      <summary>返回一个值，该值指示当前的 <see cref="T:System.Tuple`8" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="obj">与该实例进行比较的对象。</param>
    </member>
    <member name="M:System.Tuple`8.GetHashCode">
      <summary>计算当前 <see cref="T:System.Tuple`8" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`8.Item1">
      <summary>获取当前 <see cref="T:System.Tuple`8" /> 对象的第一个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`8" /> 对象的第一个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item2">
      <summary>获取当前 <see cref="T:System.Tuple`8" /> 对象的第二个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`8" /> 对象的第二个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item3">
      <summary>获取当前 <see cref="T:System.Tuple`8" /> 对象的第三个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`8" /> 对象的第三个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item4">
      <summary>获取当前 <see cref="T:System.Tuple`8" /> 对象的第四个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`8" /> 对象的第四个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item5">
      <summary>获取当前 <see cref="T:System.Tuple`8" /> 对象的第五个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`8" /> 对象的第五个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item6">
      <summary>获取当前 <see cref="T:System.Tuple`8" /> 对象的第六个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`8" /> 对象的第六个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item7">
      <summary>获取当前 <see cref="T:System.Tuple`8" /> 对象的第七个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`8" /> 对象的第七个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Rest">
      <summary>获取当前 <see cref="T:System.Tuple`8" /> 对象的剩余分量。</summary>
      <returns>当前 <see cref="T:System.Tuple`8" /> 对象的剩余分量的值。</returns>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`8" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。 值 描述 负整数 此实例在 <paramref name="other" /> 之前。 零 此实例与 <paramref name="other" /> 在排序顺序中的位置相同。 正整数 此实例在 <paramref name="other" /> 之后。</returns>
      <param name="other">与当前实例进行比较的对象。</param>
      <param name="comparer">一个对象，提供自定义比较规则。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`8" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值根据指定的比较方法指示当前的 <see cref="T:System.Tuple`8" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，定义用于评估两个对象是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`8" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.Tuple`8" /> 对象的哈希代码。</param>
    </member>
    <member name="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
      <summary>将当前 <see cref="T:System.Tuple`8" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是位于指定对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。 值 描述 负整数 此实例在 <paramref name="obj" /> 之前。 零 此实例与 <paramref name="obj" /> 在排序顺序中的位置相同。 正整数 此实例在 <paramref name="obj" /> 之后。</returns>
      <param name="obj">与当前实例进行比较的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`8" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`8.ToString">
      <summary>返回一个字符串，该字符串表示此 <see cref="T:System.Tuple`8" /> 实例的值。</summary>
      <returns>此 <see cref="T:System.Tuple`8" /> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Type">
      <summary>表示类型声明：类类型、接口类型、数组类型、值类型、枚举类型、类型参数、泛型类型定义，以及开放或封闭构造的泛型类型。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Type.Assembly">
      <summary>获取在其中声明该类型 <see cref="T:System.Reflection.Assembly" />。 对于泛型类型，则获取在其中定义该泛型类型的 <see cref="T:System.Reflection.Assembly" />。</summary>
      <returns>描述包含当前类型的程序集的 <see cref="T:System.Reflection.Assembly" /> 实例。 对于泛型类型，该实例描述包含泛型类型定义的程序集，而不是创建和使用特定构造类型的程序集。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Type.AssemblyQualifiedName">
      <summary>获取 <see cref="T:System.Type" /> 的程序集限定名，其中包括从中加载 <see cref="T:System.Type" /> 的程序集的名称。</summary>
      <returns>
        <see cref="T:System.Type" /> 的程序集限定名，其中包括从中加载 <see cref="T:System.Type" /> 的程序集的名称；或者为 null（如果当前实例表示泛型类型参数）。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.Attributes">
      <summary>获取与 <see cref="T:System.Type" /> 关联的属性。</summary>
      <returns>表示 <see cref="T:System.Type" /> 的属性集的 <see cref="T:System.Reflection.TypeAttributes" /> 对象，除非 <see cref="T:System.Type" /> 表示泛型类型形参，在此情况下该值未指定。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.BaseType">
      <summary>获取当前 <see cref="T:System.Type" /> 直接从中继承的类型。</summary>
      <returns>当前的 <see cref="T:System.Type" /> 直接从中继承的 <see cref="T:System.Type" />；或者如果当前的 Type 表示 <see cref="T:System.Object" /> 类或一个接口，则为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.ContainsGenericParameters">
      <summary>获取一个值，该值指示当前 <see cref="T:System.Type" /> 对象是否具有尚未被特定类型替代的类型参数。</summary>
      <returns>如果 <see cref="T:System.Type" /> 对象本身是泛型类型形参或者具有尚未提供特定类型的类型形参，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.DeclaringMethod">
      <summary>获取一个表示声明方法的 <see cref="T:System.Reflection.MethodBase" />（如果当前 <see cref="T:System.Type" /> 表示泛型方法的一个类型参数）。</summary>
      <returns>如果当前 <see cref="T:System.Type" /> 表示泛型方法的一个类型参数，则为一个表示声明方法的 <see cref="T:System.Reflection.MethodBase" />；否则为 null。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Type.DeclaringType">
      <summary>获取用来声明当前的嵌套类型或泛型类型参数的类型。</summary>
      <returns>如果当前的类型是嵌套类型，则为表示封闭类型的 <see cref="T:System.Type" /> 对象；如果当前的类型是泛型类型的类型参数，则为泛型类型的定义；如果当前的类型是泛型方法的类型参数，则为用来声明泛型方法的类型；否则为 null。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Type.Equals(System.Type)">
      <summary>确定当前 <see cref="T:System.Type" /> 的基础系统类型是否与指定 <see cref="T:System.Type" /> 的基础系统类型相同。</summary>
      <returns>如果 <paramref name="o" /> 的基础系统类型与当前 <see cref="T:System.Type" /> 的基础系统类型相同，则为 true；否则为 false。</returns>
      <param name="o">该对象，其基础系统类型将与当前 <see cref="T:System.Type" /> 的基础系统类型相比较。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.FullName">
      <summary>获取 <see cref="T:System.Type" /> 的完全限定名，包括 <see cref="T:System.Type" /> 的命名空间，但不包括程序集。</summary>
      <returns>
        <see cref="T:System.Type" /> 的完全限定名，包括 <see cref="T:System.Type" /> 的命名空间，但不包括程序集；如果当前实例表示泛型类型参数、数组类型、指针类型或基于类型参数的 byref 类型，或表示不属于泛型类型定义但包含无法解析的类型参数的泛型类型，则返回 null。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Type.GenericParameterAttributes">
      <summary>获取描述当前泛型类型参数的协变和特殊约束的 <see cref="T:System.Reflection.GenericParameterAttributes" /> 标志。</summary>
      <returns>
        <see cref="T:System.Reflection.GenericParameterAttributes" /> 值的按位组合，用于描述当前泛型类型参数的协变和特殊约束。</returns>
      <exception cref="T:System.InvalidOperationException">当前的 <see cref="T:System.Type" /> 对象不是泛型类型参数。 即，<see cref="P:System.Type.IsGenericParameter" /> 属性返回 false。</exception>
      <exception cref="T:System.NotSupportedException">基类不支持所调用的方法。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Type.GenericParameterPosition">
      <summary>当 <see cref="T:System.Type" /> 对象表示泛型类型或泛型方法的类型参数时，获取类型参数在声明它的泛型类型或方法的类型参数列表中的位置。</summary>
      <returns>类型参数在定义它的泛型类型或方法的类型参数列表中的位置。 位置编号从 0 开始。</returns>
      <exception cref="T:System.InvalidOperationException">当前类型不表示类型参数。 即 <see cref="P:System.Type.IsGenericParameter" /> 返回 false。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetArrayRank">
      <summary>获取 <see cref="T:System.Array" /> 中的维数。</summary>
      <returns>包含当前 Type 中维数的 <see cref="T:System.Int32" />。</returns>
      <exception cref="T:System.NotSupportedException">此方法的功能在基类中不受支持，而必须在派生类中实现。</exception>
      <exception cref="T:System.ArgumentException">当前 Type 不是数组。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetConstructor(System.Type[])">
      <summary>搜索其参数与指定数组中的类型匹配的公共实例构造函数。</summary>
      <returns>为表示某个公共实例构造函数（该构造函数的参数与参数类型数组中的类型匹配）的对象（如果找到的话）；否则为  null。</returns>
      <param name="types">表示需要的构造函数的参数个数、顺序和类型的 <see cref="T:System.Type" /> 对象的数组。 - 或 - <see cref="T:System.Type" /> 对象的空数组，用于获取不带参数的构造函数。 这样的空数组由 static 字段 <see cref="F:System.Type.EmptyTypes" /> 提供。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> 为 null。 - 或 - <paramref name="types" /> 中的一个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 是多维的。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetConstructors">
      <summary>返回为当前 <see cref="T:System.Type" /> 定义的所有公共构造函数。</summary>
      <returns>
        <see cref="T:System.Reflection.ConstructorInfo" /> 对象数组，表示当前 <see cref="T:System.Type" /> 定义的所有公共实例构造函数，但不包括类型初始值设定项（静态构造函数）。 如果没有为当前 <see cref="T:System.Type" /> 定义公共实例构造函数，或者当前 <see cref="T:System.Type" /> 表示泛型类型或泛型方法的定义中的类型参数，则返回 <see cref="T:System.Reflection.ConstructorInfo" /> 类型的空数组。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetConstructors(System.Reflection.BindingFlags)">
      <summary>当在派生类中重写时，使用指定 BindingFlags 搜索为当前 <see cref="T:System.Type" /> 定义的构造函数。</summary>
      <returns>表示为当前 <see cref="T:System.Type" /> 定义的匹配指定绑定约束的所有构造函数的 <see cref="T:System.Reflection.ConstructorInfo" /> 对象数组，包括类型初始值设定项（如果定义的话）。 在以下情况下返回 <see cref="T:System.Reflection.ConstructorInfo" /> 类型的空数组：没有为当前 <see cref="T:System.Type" /> 定义构造函数，没有与绑定约束匹配的已定义构造函数，或者当前 <see cref="T:System.Type" /> 表示泛型类型或泛型方法的定义中的类型参数。</returns>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。 - 或 - 零，以返回 null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetDefaultMembers">
      <summary>搜索为设置了 <see cref="T:System.Reflection.DefaultMemberAttribute" /> 的当前 <see cref="T:System.Type" /> 定义的成员。</summary>
      <returns>表示当前 <see cref="T:System.Type" /> 的所有默认成员的 <see cref="T:System.Reflection.MemberInfo" /> 对象数组。 - 或 - 如果当前 <see cref="T:System.Type" /> 没有默认成员，则为 <see cref="T:System.Reflection.MemberInfo" /> 类型的空数组。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetElementType">
      <summary>当在派生类中重写时，返回当前数组、指针或引用类型包含的或引用的对象的 <see cref="T:System.Type" />。</summary>
      <returns>当前数组、指针或引用类型包含或引用的对象的 <see cref="T:System.Type" />；如果当前 <see cref="T:System.Type" /> 不是数组或指针，不是按引用传递，或者表示泛型类型或泛型方法的定义中的泛型类型或类型参数，则为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetEvent(System.String)">
      <summary>返回表示指定的公共事件的 <see cref="T:System.Reflection.EventInfo" /> 对象。</summary>
      <returns>如找到，则为表示由当前 <see cref="T:System.Type" /> 声明或继承的指定公共事件的对象；否则为 null。</returns>
      <param name="name">该字符串包含事件名称，该事件是由当前 <see cref="T:System.Type" /> 声明或继承的。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>当在派生类中重写时，使用指定绑定约束，返回表示指定事件的 <see cref="T:System.Reflection.EventInfo" /> 对象。</summary>
      <returns>该对象表示当前 <see cref="T:System.Type" /> 所声明或继承的指定事件；如果找到，则为该对象，否则为 null。</returns>
      <param name="name">字符串包含由当前的 <see cref="T:System.Type" /> 声明或继承的事件的名称。</param>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。 - 或 - 零，以返回 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetEvents">
      <summary>返回由当前 <see cref="T:System.Type" /> 声明或继承的所有公共事件。</summary>
      <returns>表示由当前 <see cref="T:System.Type" /> 声明或继承的所有公共事件的 <see cref="T:System.Reflection.EventInfo" /> 对象数组。 - 或 - 如果当前 <see cref="T:System.Type" /> 没有公共事件，则为 <see cref="T:System.Reflection.EventInfo" /> 类型的空数组。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetEvents(System.Reflection.BindingFlags)">
      <summary>当在派生类中重写时，使用指定绑定约束，搜索由当前 <see cref="T:System.Type" /> 声明或继承的事件。</summary>
      <returns>
        <see cref="T:System.Reflection.EventInfo" /> 对象数组，表示当前 <see cref="T:System.Type" /> 所声明或继承的与指定绑定约束匹配的所有事件。 - 或 - 如果当前 <see cref="T:System.Type" /> 没有事件，或者如果没有一个事件匹配绑定约束，则为 <see cref="T:System.Reflection.EventInfo" /> 类型的空数组。</returns>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。 - 或 - 零，以返回 null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetField(System.String)">
      <summary>搜索具有指定名称的公共字段。</summary>
      <returns>如找到，则为表示具有指定名称的公共字段的对象；否则为 null。</returns>
      <param name="name">包含要获取的数据字段的名称的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">该 <see cref="T:System.Type" /> 对象为 <see cref="T:System.Reflection.Emit.TypeBuilder" />，其 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 方法尚未被调用。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>使用指定绑定约束搜索指定字段。</summary>
      <returns>表示符合指定要求的字段的对象（如果找到的话）；否则为 null。</returns>
      <param name="name">包含要获取的数据字段的名称的字符串。</param>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。 - 或 - 零，以返回 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetFields">
      <summary>返回当前 <see cref="T:System.Type" /> 的所有公共字段。</summary>
      <returns>表示为当前 <see cref="T:System.Type" /> 定义的所有公共字段的 <see cref="T:System.Reflection.FieldInfo" /> 对象数组。 - 或 - 如果没有为当前 <see cref="T:System.Type" /> 定义的公共字段，则为 <see cref="T:System.Reflection.FieldInfo" /> 类型的空数组。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetFields(System.Reflection.BindingFlags)">
      <summary>当在派生类中重写时，使用指定绑定约束，搜索为当前 <see cref="T:System.Type" /> 定义的字段。</summary>
      <returns>表示为当前 <see cref="T:System.Type" /> 定义的匹配指定绑定约束的所有字段的 <see cref="T:System.Reflection.FieldInfo" /> 对象数组。 - 或 - 如果没有为当前 <see cref="T:System.Type" /> 定义的字段，或者如果没有一个定义的字段匹配绑定约束，则为 <see cref="T:System.Reflection.FieldInfo" /> 类型的空数组。</returns>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。 - 或 - 零，以返回 null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetGenericArguments">
      <summary>返回表示泛型类型的类型实参或泛型类型定义的类型形参的 <see cref="T:System.Type" /> 对象的数组。</summary>
      <returns>表示泛型类型的类型实参的 <see cref="T:System.Type" /> 对象的数组。 如果当前类型不是泛型类型，则返回一个空数组。</returns>
      <exception cref="T:System.NotSupportedException">基类不支持所调用的方法。 派生类必须提供一个实现。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetGenericParameterConstraints">
      <summary>返回表示当前泛型类型参数约束的 <see cref="T:System.Type" /> 对象的数组。</summary>
      <returns>表示当前泛型类型参数上的约束的 <see cref="T:System.Type" /> 对象的数组。</returns>
      <exception cref="T:System.InvalidOperationException">当前的 <see cref="T:System.Type" /> 对象不是泛型类型参数。 即，<see cref="P:System.Type.IsGenericParameter" /> 属性返回 false。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Type.GetGenericTypeDefinition">
      <summary>返回一个表示可用于构造当前泛型类型的泛型类型定义的 <see cref="T:System.Type" /> 对象。</summary>
      <returns>表示可用于构造当前类型的泛型类型的 <see cref="T:System.Type" /> 对象。</returns>
      <exception cref="T:System.InvalidOperationException">当前对象不是泛型类型。 即 <see cref="P:System.Type.IsGenericType" /> 返回 false。</exception>
      <exception cref="T:System.NotSupportedException">基类不支持所调用的方法。 派生类必须提供一个实现。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetInterfaces">
      <summary>当在派生类中重写时，获取由当前 <see cref="T:System.Type" /> 实现或继承的所有接口。</summary>
      <returns>表示由当前 <see cref="T:System.Type" /> 实现或继承的所有接口的 <see cref="T:System.Type" /> 对象数组。 - 或 - 如果没有由当前 <see cref="T:System.Type" /> 实现或继承的接口，则为 <see cref="T:System.Type" /> 类型的空数组。</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">调用静态初始值设定项并引发异常。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetMember(System.String)">
      <summary>搜索具有指定名称的公共成员。</summary>
      <returns>一个表示具有指定名称的公共成员的 <see cref="T:System.Reflection.MemberInfo" /> 对象数组（如果找到的话）；否则为空数组。</returns>
      <param name="name">包含要获取的公共成员名称的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>使用指定绑定约束搜索指定成员。</summary>
      <returns>一个表示具有指定名称的公共成员的 <see cref="T:System.Reflection.MemberInfo" /> 对象数组（如果找到的话）；否则为空数组。</returns>
      <param name="name">包含要获取的成员的名称的字符串。</param>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。 - 或 - 零，返回空数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetMembers">
      <summary>返回当前 <see cref="T:System.Type" /> 的所有公共成员。</summary>
      <returns>表示当前 <see cref="T:System.Type" /> 的所有公共成员的 <see cref="T:System.Reflection.MemberInfo" /> 对象数组。 - 或 - 如果当前 <see cref="T:System.Type" /> 没有公共成员，则为 <see cref="T:System.Reflection.MemberInfo" /> 类型的空数组。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetMembers(System.Reflection.BindingFlags)">
      <summary>当在派生类中重写时，使用指定绑定约束，搜索为当前 <see cref="T:System.Type" /> 定义的成员。</summary>
      <returns>表示为当前 <see cref="T:System.Type" /> 定义的匹配指定绑定约束的所有成员的 <see cref="T:System.Reflection.MemberInfo" /> 对象数组。 - 或 - 如果没有为当前 <see cref="T:System.Type" /> 定义的成员，或者如果没有一个定义的成员匹配绑定约束，则为 <see cref="T:System.Reflection.MemberInfo" /> 类型的空数组。</returns>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。 - 或 - 零，以返回 null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetMethod(System.String)">
      <summary>搜索具有指定名称的公共方法。</summary>
      <returns>表示具有指定名称的公共方法的对象（如果找到的话）；否则为 null。</returns>
      <param name="name">包含要获取的公共方法的名称的字符串。</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到不止一个具有指定名称的方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)">
      <summary>使用指定绑定约束搜索指定方法。</summary>
      <returns>表示符合指定要求的方法的对象（如果找到的话）；否则为 null。</returns>
      <param name="name">包含要获取的方法名称的字符串。</param>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。 - 或 - 零，以返回 null。</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个有指定名称且与指定绑定约束匹配的方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Type[])">
      <summary>搜索其参数与指定参数类型匹配的指定公共方法。</summary>
      <returns>表示其参数与指定参数类型匹配的公共方法的对象（如果找到的话）；否则为 null。</returns>
      <param name="name">包含要获取的公共方法的名称的字符串。</param>
      <param name="types">表示此方法要获取的参数的个数、顺序和类型的 <see cref="T:System.Type" /> 对象数组。 - 或 - 空的 <see cref="T:System.Type" /> 对象数组（由 <see cref="F:System.Type.EmptyTypes" /> 字段提供），用来获取不采用参数的方法。</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到不止一个具有指定名称和指定参数的方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。 - 或 - <paramref name="types" /> 为 null。 - 或 - <paramref name="types" /> 中的一个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 是多维的。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetMethods">
      <summary>返回当前 <see cref="T:System.Type" /> 的所有公共方法。</summary>
      <returns>表示为当前 <see cref="T:System.Type" /> 定义的所有公共方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象数组。 - 或 - 如果没有为当前 <see cref="T:System.Type" /> 定义的公共方法，则为 <see cref="T:System.Reflection.MethodInfo" /> 类型的空数组。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetMethods(System.Reflection.BindingFlags)">
      <summary>当在派生类中重写时，使用指定绑定约束，搜索为当前 <see cref="T:System.Type" /> 定义的方法。</summary>
      <returns>表示为当前 <see cref="T:System.Type" /> 定义的匹配指定绑定约束的所有方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象数组。 - 或 - 如果没有为当前 <see cref="T:System.Type" /> 定义的方法，或者如果没有一个定义的方法匹配绑定约束，则为 <see cref="T:System.Reflection.MethodInfo" /> 类型的空数组。</returns>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。 - 或 - 零，以返回 null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>当在派生类中重写时，使用指定绑定约束搜索指定嵌套类型。</summary>
      <returns>表示符合指定要求的嵌套类型的对象（如果找到的话）；否则为 null。</returns>
      <param name="name">包含要获取的嵌套类型的名称的字符串。</param>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。 - 或 - 零，以返回 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>当在派生类中重写时，使用指定绑定约束搜索嵌套在当前 <see cref="T:System.Type" /> 中的类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象数组，这些对象表示嵌套在当前 <see cref="T:System.Type" /> 中的所有与指定的绑定约束匹配的类型（搜索是非递归的）；如果没有找到与绑定约束匹配的嵌套类型，则为 <see cref="T:System.Type" /> 类型的空数组。</returns>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。 - 或 - 零，以返回 null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetProperties">
      <summary>返回当前 <see cref="T:System.Type" /> 的所有公共属性。</summary>
      <returns>表示当前 <see cref="T:System.Type" /> 的所有公共属性的 <see cref="T:System.Reflection.PropertyInfo" /> 对象数组。 - 或 - 如果当前 <see cref="T:System.Type" /> 没有公共属性，则为 <see cref="T:System.Reflection.PropertyInfo" /> 类型的空数组。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetProperties(System.Reflection.BindingFlags)">
      <summary>当在派生类中重写时，使用指定绑定约束，搜索当前 <see cref="T:System.Type" /> 的如果属性至少有一个为公共的访问器，则该属性被视为对于反射是公共的。</summary>
      <returns>表示当前 <see cref="T:System.Type" /> 的匹配指定绑定约束的所有属性的 <see cref="T:System.Reflection.PropertyInfo" /> 对象数组。 - 或 - 如果当前 <see cref="T:System.Type" /> 没有属性，或者如果没有一个属性匹配绑定约束，则为 <see cref="T:System.Reflection.PropertyInfo" /> 类型的空数组。</returns>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。 - 或 - 零，以返回 null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetProperty(System.String)">
      <summary>搜索具有指定名称的公共属性。</summary>
      <returns>表示具有指定名称的公共属性的对象（如果找到的话）；否则为 null。</returns>
      <param name="name">包含要获取的公共属性名的字符串。</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到不止一个具有指定名称的属性。 请参见"备注"。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)">
      <summary>使用指定的绑定约束搜索指定属性。</summary>
      <returns>表示符合指定要求的属性的对象（如果找到的话）；否则为 null。</returns>
      <param name="name">包含要获取的属性名的字符串。</param>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。 - 或 - 零，以返回 null。</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个有指定名称且与指定绑定约束匹配的属性。 请参见"备注"。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type)">
      <summary>搜索具有指定名称和返回类型的公共属性。</summary>
      <returns>表示具有指定名称的公共属性的对象（如果找到的话）；否则为 null。</returns>
      <param name="name">包含要获取的公共属性名的字符串。</param>
      <param name="returnType">属性的返回类型。</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到不止一个具有指定名称的属性。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null 或 <paramref name="returnType" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type,System.Type[])">
      <summary>搜索其参数与指定参数类型匹配的指定公共属性。</summary>
      <returns>表示其参数与指定参数类型匹配的公共属性的对象（如果找到的话）；否则为 null。</returns>
      <param name="name">包含要获取的公共属性名的字符串。</param>
      <param name="returnType">属性的返回类型。</param>
      <param name="types">一个 <see cref="T:System.Type" /> 对象数组，表示要获取的索引属性的参数的数目、顺序和类型。 - 或 - 获取未被索引的属性的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到不止一个具有指定名称并与指定参数类型匹配的属性。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。 - 或 - <paramref name="types" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 是多维的。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="types" /> 的一个元素为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetType(System.String)">
      <summary>获取具有指定名称的 <see cref="T:System.Type" />，执行区分大小写的搜索。</summary>
      <returns>具有指定名称的类型（如果找到的话）；否则为 null。</returns>
      <param name="typeName">要获取的类型的程序集限定名称。 请参见 <see cref="P:System.Type.AssemblyQualifiedName" />。 如果该类型位于当前正在执行的程序集中或者 Mscorlib.dll 中，则提供由命名空间限定的类型名称就足够了。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 为 null。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">调用类初始值设定项并引发异常。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> 表示具有指针类型、ByRef 类型或 <see cref="T:System.Void" /> 作为其类型参数之一的泛型类型。 - 或 - <paramref name="typeName" /> 表示具有不正确数量的类型参数的泛型类型。 - 或 - <paramref name="typeName" /> 表示泛型类型，其类型参数之一不满足对应类型参数的约束。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typeName" /> 表示 <see cref="T:System.TypedReference" /> 的数组。</exception>
      <exception cref="T:System.IO.FileLoadException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.IO.IOException" />。 找到了该程序集或它的某个依赖项，但是无法加载它们。</exception>
      <exception cref="T:System.BadImageFormatException">该程序集或它的某个依赖项无效。 - 或 - 当前加载的是 2.0 或更高版本的公共语言运行时，而该程序集是用更高版本的公共语言运行时编译的。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Boolean)">
      <summary>获取具有指定名称的 <see cref="T:System.Type" />，同时执行大小写敏感的搜索，并指定是否要在没有找到该类型时引发异常。</summary>
      <returns>具有指定名称的类型。 如果找不到该类型，则 <paramref name="throwOnError" /> 参数指定是返回 null 还是引发异常。 在某些情况下，将引发异常，而不考虑 <paramref name="throwOnError" /> 的值。 请参见"异常"部分。</returns>
      <param name="typeName">要获取的类型的程序集限定名称。 请参见 <see cref="P:System.Type.AssemblyQualifiedName" />。 如果该类型位于当前正在执行的程序集中或者 Mscorlib.dll 中，则提供由命名空间限定的类型名称就足够了。</param>
      <param name="throwOnError">如果为 true，则在找不到该类型时引发异常；如果为 false，则返回 null。 指定 false 还会取消某些其他异常条件，但并不取消所有条件。 请参见"异常"部分。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 为 null。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">调用类初始值设定项并引发异常。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> 为 true，未找到该类型。 - 或 - <paramref name="throwOnError" /> 为 true 并且 <paramref name="typeName" /> 包含无效的字符，如内嵌选项卡。 - 或 - <paramref name="throwOnError" /> 为 true 并且 <paramref name="typeName" /> 为空字符串。 - 或 - <paramref name="throwOnError" /> 为 true 并且 <paramref name="typeName" /> 表示具有无效大小的数组类型。 - 或 - <paramref name="typeName" /> 表示 <see cref="T:System.TypedReference" /> 的数组。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="throwOnError" /> 为 true 且 <paramref name="typeName" /> 包含无效的语法。 例如，"MyType[,*,]"。 - 或 - <paramref name="typeName" /> 表示具有指针类型、ByRef 类型或 <see cref="T:System.Void" /> 作为其类型参数之一的泛型类型。 - 或 - <paramref name="typeName" /> 表示具有不正确数量的类型参数的泛型类型。 - 或 - <paramref name="typeName" /> 表示泛型类型，其类型参数之一不满足对应类型参数的约束。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwOnError" /> 为 true，并且未找到该程序集或其依赖项之一。</exception>
      <exception cref="T:System.IO.FileLoadException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.IO.IOException" />。 找到了该程序集或它的某个依赖项，但是无法加载它们。</exception>
      <exception cref="T:System.BadImageFormatException">该程序集或它的某个依赖项无效。 - 或 - 当前加载的是 2.0 或更高版本的公共语言运行时，而该程序集是用更高版本的公共语言运行时编译的。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Type.GetTypeCode(System.Type)">
      <summary>获取指定 <see cref="T:System.Type" /> 的基础类型代码。</summary>
      <returns>如果 <paramref name="type" /> 为 null，则为基础类型代码或 <see cref="F:System.TypeCode.Empty" />。</returns>
      <param name="type">要获取其基础代码的类型。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Type.GetTypeFromCLSID(System.Guid)">
      <summary>获取与指定类标识符 (CLSID) 关联的类型。</summary>
      <returns>System.__ComObject，无论 CLSID 是否有效。</returns>
      <param name="clsid">要获取的类型的 CLSID。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)">
      <summary>获取由指定类型句柄引用的类型。</summary>
      <returns>如果 <paramref name="handle" /> 的 <see cref="P:System.RuntimeTypeHandle.Value" /> 属性为 null，则为由指定的 <see cref="T:System.RuntimeTypeHandle" /> 引用的类型，或者为 null。</returns>
      <param name="handle">引用类型的对象。</param>
      <exception cref="T:System.Reflection.TargetInvocationException">调用类初始值设定项并引发异常。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Type.GetTypeHandle(System.Object)">
      <summary>获取指定对象的 <see cref="T:System.Type" /> 的句柄。</summary>
      <returns>指定 <see cref="T:System.Object" /> 的 <see cref="T:System.Type" /> 的句柄。</returns>
      <param name="o">要获取类型句柄的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> 为 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Type.HasElementType">
      <summary>获取一个值，通过该值指示当前 <see cref="T:System.Type" /> 是包含还是引用另一类型，即当前 <see cref="T:System.Type" /> 是数组、指针还是通过引用传递。</summary>
      <returns>如果 <see cref="T:System.Type" /> 为数组、指针或按引用传递，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.HasElementTypeImpl">
      <summary>当在派生类中重写时，实现 <see cref="P:System.Type.HasElementType" /> 属性，确定当前 <see cref="T:System.Type" /> 是否包含另一类型或对其引用；即，当前 <see cref="T:System.Type" /> 是否是数组、指针或由引用传递。</summary>
      <returns>如果 <see cref="T:System.Type" /> 为数组、指针或按引用传递，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsAbstract">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否为抽象的并且必须被重写。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是抽象的，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsArray">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否为数组。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是数组，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.IsArrayImpl">
      <summary>当在派生类中重写时，实现 <see cref="P:System.Type.IsArray" /> 属性并确定 <see cref="T:System.Type" /> 是否为数组。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是数组，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Type.IsAssignableFrom(System.Type)">
      <summary>确定当前的 <see cref="T:System.Type" /> 的实例是否可以从指定 Type 的实例分配。</summary>
      <returns>如果满足下列任一条件，则为 true：<paramref name="c" /> 和当前 Type 表示同一类型；当前 Type 位于 <paramref name="c" /> 的继承层次结构中；当前 Type 是 <paramref name="c" /> 实现的接口；<paramref name="c" /> 是泛型类型参数且当前 Type 表示 <paramref name="c" /> 的约束之一。 如果不满足上述任何一个条件或者 <paramref name="c" /> 为 null，则为 false。</returns>
      <param name="c">要与当前类型进行比较的类型。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsByRef">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否由引用传递。</summary>
      <returns>如果 <see cref="T:System.Type" /> 按引用传递，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.IsByRefImpl">
      <summary>当在派生类中重写时，实现 <see cref="P:System.Type.IsByRef" /> 属性并确定 <see cref="T:System.Type" /> 是否由引用传递。</summary>
      <returns>如果 <see cref="T:System.Type" /> 按引用传递，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsClass">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否是一个类；即，不是值类型或接口。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是类，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsEnum">
      <summary>获取一个值，该值指示当前的 <see cref="T:System.Type" /> 是否表示枚举。</summary>
      <returns>如果当前 <see cref="T:System.Type" /> 表示枚举，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsGenericParameter">
      <summary>获取一个值，该值指示当前 <see cref="T:System.Type" /> 是否表示泛型类型或方法的定义中的类型参数。</summary>
      <returns>如果 <see cref="T:System.Type" /> 对象表示泛型类型定义或泛型方法定义的类型参数，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsGenericType">
      <summary>获取一个值，该值指示当前类型是否是泛型类型。</summary>
      <returns>如果当前类型是泛型类型，则为 true；否则为  false。</returns>
    </member>
    <member name="P:System.Type.IsGenericTypeDefinition">
      <summary>获取一个值，该值指示当前 <see cref="T:System.Type" /> 是否表示可以用来构造其他泛型类型的泛型类型定义。</summary>
      <returns>如果此 <see cref="T:System.Type" /> 对象表示泛型类型定义，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.IsInstanceOfType(System.Object)">
      <summary>确定指定的对象是否是当前 <see cref="T:System.Type" /> 的实例。</summary>
      <returns>如果满足下列任一条件，则为 true：当前 Type 位于由 <paramref name="o" /> 表示的对象的继承层次结构中；当前 Type 是 <paramref name="o" /> 支持的接口。 如果不属于其中任一种情况，或者 <paramref name="o" /> 为 null，或者当前 Type 为开放式泛型类型（即 <see cref="P:System.Type.ContainsGenericParameters" /> 返回 true），则为 false。</returns>
      <param name="o">要与当前类型进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsInterface">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否为接口（即不是类或值类型）。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是接口，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsNested">
      <summary>获取一个指示当前 <see cref="T:System.Type" /> 对象是否表示其定义嵌套在另一个类型的定义之内的类型的值。</summary>
      <returns>如果 <see cref="T:System.Type" /> 嵌套在另一个类型内，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsNestedAssembly">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否是嵌套的并且只能在它自己的程序集内可见。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是嵌套的并且仅在它自己的程序集中可见，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsNestedFamANDAssem">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否是嵌套的并且只对同时属于自己家族和自己程序集的类可见。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是嵌套的并且只对同时属于它自己的家族和它自己的程序集的类可见，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsNestedFamily">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否是嵌套的并且只在它自己的家族内可见。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是嵌套的并且仅在它自己的家族中可见，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsNestedFamORAssem">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否是嵌套的并且只对属于它自己的家族或它自己的程序集的类可见。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是嵌套的并且只对属于它自己的家族或属于它自己的程序集的类可见，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsNestedPrivate">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否是嵌套的并声明为私有。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是嵌套的并声明为私有的，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsNestedPublic">
      <summary>获取一个值，通过该值指示类是否是嵌套的并且声明为公共的。</summary>
      <returns>如果类是嵌套的并且声明为公共的，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsNotPublic">
      <summary>获取一个值，该值指示 <see cref="T:System.Type" /> 是否声明为公共类型。</summary>
      <returns>如果 <see cref="T:System.Type" /> 未声明为公共类型且不是嵌套类型，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsPointer">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否为指针。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是指针，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.IsPointerImpl">
      <summary>当在派生类中重写时，实现 <see cref="P:System.Type.IsPointer" /> 属性并确定 <see cref="T:System.Type" /> 是否为指针。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是指针，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsPrimitive">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否为基元类型之一。</summary>
      <returns>如果 <see cref="T:System.Type" /> 为基元类型之一，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.IsPrimitiveImpl">
      <summary>当在派生类中重写时，实现 <see cref="P:System.Type.IsPrimitive" /> 属性并确定 <see cref="T:System.Type" /> 是否为基元类型之一。</summary>
      <returns>如果 <see cref="T:System.Type" /> 为基元类型之一，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsPublic">
      <summary>获取一个值，该值指示 <see cref="T:System.Type" /> 是否声明为公共类型。</summary>
      <returns>如果 <see cref="T:System.Type" /> 声明为公共类型且不是嵌套类型，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsSealed">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否声明为密封的。</summary>
      <returns>如果 <see cref="T:System.Type" /> 被声明为密封的，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsSpecialName">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否具有需要特殊处理的名称。</summary>
      <returns>如果 <see cref="T:System.Type" /> 具有需要特殊处理的名称，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.IsSubclassOf(System.Type)">
      <summary>确定当前 <see cref="T:System.Type" /> 表示的类是否是从指定的 <see cref="T:System.Type" /> 表示的类派生的。</summary>
      <returns>如果 Type 由 <paramref name="c" /> 参数表示并且当前的 Type 表示类，并且当前的 Type 所表示的类是从 <paramref name="c" /> 所表示的类派生的，则为 true；否则为 false。 如果 <paramref name="c" /> 和当前的 Type 表示相同的类，则此方法还返回 false。</returns>
      <param name="c">要与当前类型进行比较的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> 参数为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsValueType">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否为值类型。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是值类型，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.IsValueTypeImpl">
      <summary>实现 <see cref="P:System.Type.IsValueType" /> 属性并确定 <see cref="T:System.Type" /> 是否是值类型；即，它不是类或接口。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是值类型，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsVisible">
      <summary>获取一个指示 <see cref="T:System.Type" /> 是否可由程序集之外的代码访问的值。</summary>
      <returns>如果当前 <see cref="T:System.Type" /> 是公共类型或公共嵌套类型从而使所有封闭类型都是公共类型，则为 true；否则为 false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.MakeArrayType">
      <summary>返回一个表示当前类型的一维数组（下限为零）的 <see cref="T:System.Type" /> 对象。</summary>
      <returns>返回一个表示当前类型的一维数组（下限为零）的 <see cref="T:System.Type" /> 对象。</returns>
      <exception cref="T:System.NotSupportedException">基类不支持所调用的方法。 派生类必须提供一个实现。</exception>
      <exception cref="T:System.TypeLoadException">当前类型为 <see cref="T:System.TypedReference" />。 - 或 - 当前类型是 ByRef 类型。 即，<see cref="P:System.Type.IsByRef" /> 返回 true。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.MakeArrayType(System.Int32)">
      <summary>返回表示当前类型的指定维数的数组的 <see cref="T:System.Type" /> 对象。</summary>
      <returns>表示当前类型的指定维数的数组的对象。</returns>
      <param name="rank">数组的维数。 该数字必须小于或等于 32。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="rank" /> 无效。 例如，0 或负数。</exception>
      <exception cref="T:System.NotSupportedException">基类不支持所调用的方法。</exception>
      <exception cref="T:System.TypeLoadException">当前类型为 <see cref="T:System.TypedReference" />。 - 或 - 当前类型是 ByRef 类型。 即，<see cref="P:System.Type.IsByRef" /> 返回 true。 - 或 - <paramref name="rank" /> 大于 32。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.MakeByRefType">
      <summary>返回表示作为 ref 参数（在 Visual Basic 中为 ByRef 参数）传递时的当前类型的 <see cref="T:System.Type" /> 对象。</summary>
      <returns>表示作为 ref 参数（在 Visual Basic 中为 ByRef 参数）传递时的当前类型的 <see cref="T:System.Type" /> 对象。</returns>
      <exception cref="T:System.NotSupportedException">基类不支持所调用的方法。</exception>
      <exception cref="T:System.TypeLoadException">当前类型为 <see cref="T:System.TypedReference" />。 - 或 - 当前类型是 ByRef 类型。 即，<see cref="P:System.Type.IsByRef" /> 返回 true。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.MakeGenericType(System.Type[])">
      <summary>替代由当前泛型类型定义的类型参数组成的类型数组的元素，并返回表示结果构造类型的 <see cref="T:System.Type" /> 对象。</summary>
      <returns>
        <see cref="T:System.Type" /> 表示的构造类型通过以下方式形成：用 <paramref name="typeArguments" /> 的元素取代当前泛型类型的类型参数。</returns>
      <param name="typeArguments">将代替当前泛型类型的类型参数的类型数组。</param>
      <exception cref="T:System.InvalidOperationException">当前类型不表示泛型类型定义。 即，<see cref="P:System.Type.IsGenericTypeDefinition" /> 返回 false。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArguments" /> 为 null。 - 或 - <paramref name="typeArguments" /> 的所有元素均为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArguments" /> 中元素的个数不等于当前泛型类型定义中类型参数的个数。 - 或 - <paramref name="typeArguments" /> 的所有元素都不满足为当前泛型类型的对应类型参数指定的约束。 - 或 - <paramref name="typeArguments" />包含元素，它是一个指针类型 (<see cref="P:System.Type.IsPointer" />返回true），by-ref 类型 (<see cref="P:System.Type.IsByRef" />返回true)，或 <see cref="T:System.Void" />。</exception>
      <exception cref="T:System.NotSupportedException">基类不支持所调用的方法。 派生类必须提供一个实现。</exception>
    </member>
    <member name="M:System.Type.MakePointerType">
      <summary>返回表示指向当前类型的指针的 <see cref="T:System.Type" /> 对象。</summary>
      <returns>表示指向当前类型的指针的 <see cref="T:System.Type" /> 对象。</returns>
      <exception cref="T:System.NotSupportedException">基类不支持所调用的方法。</exception>
      <exception cref="T:System.TypeLoadException">当前类型为 <see cref="T:System.TypedReference" />。 - 或 - 当前类型是 ByRef 类型。 即，<see cref="P:System.Type.IsByRef" /> 返回 true。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Type.Missing">
      <summary>表示 <see cref="T:System.Type" /> 信息中的缺少值。 此字段为只读。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Type.Namespace">
      <summary>获取 <see cref="T:System.Type" /> 的命名空间。</summary>
      <returns>
        <see cref="T:System.Type" /> 的命名空间；如果当前实例没有命名空间或表示泛型参数，则为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.ReflectedType">
      <summary>获取用于获取该成员的类对象。</summary>
      <returns>Type 对象，通过它获取了该 <see cref="T:System.Type" /> 对象。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Type.ToString">
      <summary>返回表示当前 Type 的名称的 String。</summary>
      <returns>表示当前 <see cref="T:System.Type" /> 的名称的 <see cref="T:System.String" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.TypeHandle">
      <summary>获取当前 <see cref="T:System.Type" /> 的句柄。</summary>
      <returns>当前 <see cref="T:System.Type" /> 的句柄。</returns>
      <exception cref="T:System.NotSupportedException">.NET Compact Framework 当前不支持此属性。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Type.UnderlyingSystemType">
      <summary>指示表示该类型的公共语言运行时提供的类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 的基础系统类型。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.TypeAccessException">
      <summary>当方法试图使用它无权访问的类型时引发的异常。</summary>
    </member>
    <member name="M:System.TypeAccessException.#ctor">
      <summary>使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.TypeAccessException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.TypeAccessException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.TypeAccessException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方必须确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.TypeAccessException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.TypeAccessException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方必须确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.TypeCode">
      <summary>指定对象的类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.TypeCode.Boolean">
      <summary>简单类型，表示 true 或 false 的布尔值。</summary>
    </member>
    <member name="F:System.TypeCode.Byte">
      <summary>整型，表示值介于 0 到 255 之间的无符号 8 位整数。</summary>
    </member>
    <member name="F:System.TypeCode.Char">
      <summary>整型，表示值介于 0 到 65535 之间的无符号 16 位整数。 <see cref="F:System.TypeCode.Char" /> 类型的可能值集与 Unicode 字符集相对应。</summary>
    </member>
    <member name="F:System.TypeCode.DateTime">
      <summary>表示一个日期和时间值的类型。</summary>
    </member>
    <member name="F:System.TypeCode.Decimal">
      <summary>简单类型，表示从 1.0 x 10 -28 到大约 7.9 x 10 28 且有效位数为 28 到 29 位的值。</summary>
    </member>
    <member name="F:System.TypeCode.Double">
      <summary>浮点型，表示从大约 5.0 x 10 -324 到 1.7 x 10 308 且精度为 15 到 16 位的值。</summary>
    </member>
    <member name="F:System.TypeCode.Empty">
      <summary>空引用。</summary>
    </member>
    <member name="F:System.TypeCode.Int16">
      <summary>整型，表示值介于 -32768 到 32767 之间的有符号 16 位整数。</summary>
    </member>
    <member name="F:System.TypeCode.Int32">
      <summary>整型，表示值介于 -2147483648 到 2147483647 之间的有符号 32 位整数。</summary>
    </member>
    <member name="F:System.TypeCode.Int64">
      <summary>整型，表示值介于 -9223372036854775808 到 9223372036854775807 之间的有符号 64 位整数。</summary>
    </member>
    <member name="F:System.TypeCode.Object">
      <summary>常规类型，表示不会由另一个 TypeCode 显式表示的任何引用或值类型。</summary>
    </member>
    <member name="F:System.TypeCode.SByte">
      <summary>整型，表示值介于 -128 到 127 之间的有符号 8 位整数。</summary>
    </member>
    <member name="F:System.TypeCode.Single">
      <summary>浮点型，表示从大约 1.5 x 10 -45 到 3.4 x 10 38 且精度为 7 位的值。</summary>
    </member>
    <member name="F:System.TypeCode.String">
      <summary>密封类类型，表示 Unicode 字符串。</summary>
    </member>
    <member name="F:System.TypeCode.UInt16">
      <summary>整型，表示值介于 0 到 65535 之间的无符号 16 位整数。</summary>
    </member>
    <member name="F:System.TypeCode.UInt32">
      <summary>整型，表示值介于 0 到 4294967295 之间的无符号 32 位整数。</summary>
    </member>
    <member name="F:System.TypeCode.UInt64">
      <summary>整型，表示值介于 0 到 18446744073709551615 之间的无符号 64 位整数。</summary>
    </member>
    <member name="T:System.TypeInitializationException">
      <summary>作为类初始值设定项引发的异常的包装而引发的异常。 此类不能被继承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
      <summary>用默认错误消息、指定的类型名称和对内部异常（为该异常的根源）的引用来初始化 <see cref="T:System.TypeInitializationException" /> 类的新实例。</summary>
      <param name="fullTypeName">未能初始化类型的完全限定名。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不是空引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="P:System.TypeInitializationException.TypeName">
      <summary>获取未能初始化类型的完全限定名。</summary>
      <returns>未能初始化类型的完全限定名。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.TypeLoadException">
      <summary>类型加载失败发生时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TypeLoadException.#ctor">
      <summary>初始化 <see cref="T:System.TypeLoadException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.TypeLoadException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.TypeLoadException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="P:System.TypeLoadException.Message">
      <summary>获取此异常的错误消息。</summary>
      <returns>错误消息字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.TypeLoadException.TypeName">
      <summary>获取导致异常的类型的完全限定名。</summary>
      <returns>完全限定的类型名。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.UInt16">
      <summary>表示 16 位无符号整数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.CompareTo(System.UInt16)">
      <summary>将此实例与指定的 16 位无符号整数进行比较并返回对其相对值的指示。</summary>
      <returns>一个有符号数字，指示此实例和 <paramref name="value" /> 的相对值。 返回值 描述 小于零 此实例小于 <paramref name="value" />。 零 此实例等于 <paramref name="value" />。 大于零 此实例大于 <paramref name="value" />。</returns>
      <param name="value">要比较的无符号整数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt16.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.UInt16" /> 的实例并且等于此实例的值，则为 true；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt16.Equals(System.UInt16)">
      <summary>返回一个值，该值指示此实例是否与指定的 <see cref="T:System.UInt16" /> 值相等。</summary>
      <returns>如果 <paramref name="obj" /> 的值与此实例相同，则为 true；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的 16 位无符号整数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt16.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.UInt16.MaxValue">
      <summary>表示 <see cref="T:System.UInt16" /> 的最大可能值。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UInt16.MinValue">
      <summary>表示 <see cref="T:System.UInt16" /> 的最小可能值。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效 16 位无符号整数。</summary>
      <returns>与 <paramref name="s" /> 中包含的数字等效的 16 位无符号整数。</returns>
      <param name="s">表示要转换的数字的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将指定样式的数字的字符串表示形式转换为它的等效 16 位无符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 16 位无符号整数。</returns>
      <param name="s">表示要转换的数字的字符串。 该字符串使用由 <paramref name="style" /> 参数指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，这些枚举值指定 <paramref name="s" /> 所允许的格式。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不符合 <paramref name="style" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" /> 的数字。 - 或 - <paramref name="s" /> 包含非零的小数位。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 16 位无符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 16 位无符号整数。</returns>
      <param name="s">表示要转换的数字的字符串。 该字符串使用由 <paramref name="style" /> 参数指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不符合 <paramref name="style" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" /> 的数字。 - 或 - <paramref name="s" /> 包含非零的小数位。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.IFormatProvider)">
      <summary>将指定区域性特定格式的数字的字符串表示形式转换为它的等效 16 位无符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 16 位无符号整数。</returns>
      <param name="s">表示要转换的数字的字符串。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。 返回值 含义 小于零 此实例按排序顺序在 <paramref name="value" /> 前面。 零 此实例与 <paramref name="value" /> 按排序顺序中出现的位置相同。 大于零 此实例按排序顺序在 <paramref name="value" /> 后面。 - 或 - <paramref name="value" /> 为 null。</returns>
      <param name="value">与此实例进行比较的 object，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.UInt16" /> 对象。</exception>
    </member>
    <member name="M:System.UInt16.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由一系列 0 到 9 之间的数字组成，不包含符号或前导零。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由一系列 0 到 9 之间的数字组成，不包含符号或前导零。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.ToString(System.String)">
      <summary>使用指定的格式将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <param name="format">一个数值格式字符串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 参数无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
      <param name="format">一个数值格式字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt16@)">
      <summary>尝试将数字的指定样式和区域性特定格式的字符串表示形式转换为其等效的 16 位无符号整数。 一个指示转换是否成功的返回值。</summary>
      <returns>如果成功转换了 <paramref name="s" />，则为 true；否则为 false。</returns>
      <param name="s">表示要转换的数字的字符串。 该字符串使用由 <paramref name="style" /> 参数指定的样式来进行解释。</param>
      <param name="style">枚举值的一个按位组合，指示 <paramref name="s" /> 所允许的格式。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 所包含的数字等效的 16 位无符号整数值；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 null，格式不符合 <paramref name="style" />，或者表示的数字小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" />，则转换会失败。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.TryParse(System.String,System.UInt16@)">
      <summary>尝试将数字的字符串表示形式转换为等效的 16 位无符号整数。 一个指示转换是否成功的返回值。</summary>
      <returns>如果成功转换了 <paramref name="s" />，则为 true；否则为 false。</returns>
      <param name="s">表示要转换的数字的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所含数字等效的 16 位无符号整数值；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 null，格式不正确， 或者表示的数字小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" />，则转换失败。 该参数未经初始化即被传递。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.UInt32">
      <summary>表示 32 位无符号整数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.CompareTo(System.UInt32)">
      <summary>将此实例与指定的 32 位无符号整数进行比较并返回对其相对值的指示。</summary>
      <returns>一个有符号数字，指示此实例和 <paramref name="value" /> 的相对值。 返回值 描述 小于零 此实例小于 <paramref name="value" />。 零 此实例等于 <paramref name="value" />。 大于零 此实例大于 <paramref name="value" />。</returns>
      <param name="value">要比较的无符号整数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt32.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.UInt32" /> 的实例并且等于此实例的值，则为 true；否则为 false。</returns>
      <param name="obj">与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt32.Equals(System.UInt32)">
      <summary>返回一个值，该值指示此实例是否与指定的 <see cref="T:System.UInt32" /> 相等。</summary>
      <returns>如果 <paramref name="obj" /> 的值与此实例相同，则为 true；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt32.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.UInt32.MaxValue">
      <summary>表示 <see cref="T:System.UInt32" /> 的最大可能值。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UInt32.MinValue">
      <summary>表示 <see cref="T:System.UInt32" /> 的最小可能值。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效 32 位无符号整数。</summary>
      <returns>与 <paramref name="s" /> 中包含的数字等效的 32 位无符号整数。</returns>
      <param name="s">一个字符串，表示要转换的数字。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 参数的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 参数表示小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将指定样式的数字的字符串表示形式转换为它的等效 32 位无符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 32 位无符号整数。</returns>
      <param name="s">一个字符串，表示要转换的数字。 该字符串使用由 <paramref name="style" /> 参数指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，这些枚举值指定 <paramref name="s" /> 所允许的格式。 一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不符合 <paramref name="style" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" /> 的数字。 - 或 - <paramref name="s" /> 包含非零的小数位。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 32 位无符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 32 位无符号整数。</returns>
      <param name="s">一个字符串，表示要转换的数字。 该字符串使用由 <paramref name="style" /> 参数指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不符合 <paramref name="style" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" /> 的数字。 - 或 - <paramref name="s" /> 包含非零的小数位。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.IFormatProvider)">
      <summary>将指定区域性特定格式的数字的字符串表示形式转换为它的等效 32 位无符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 32 位无符号整数。</returns>
      <param name="s">表示要转换的数字的字符串。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 采用的样式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。 返回值 含义 小于零 此实例按排序顺序在 <paramref name="value" /> 前面。 零 此实例与 <paramref name="value" /> 按排序顺序中出现的位置相同。 大于零 此实例按排序顺序在 <paramref name="value" /> 后面。 - 或 - <paramref name="value" /> 为 null。</returns>
      <param name="value">与此实例进行比较的 object，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.UInt32" /> 对象。</exception>
    </member>
    <member name="M:System.UInt32.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由一系列从 0 到 9 之间的数字组成，不包含符号或前导零。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由一系列 0 到 9 之间的数字组成，不包含符号或前导零。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.ToString(System.String)">
      <summary>使用指定的格式将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <param name="format">一个数值格式字符串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 参数无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
      <param name="format">一个数值格式字符串。</param>
      <param name="provider">一个对象，它提供有关此实例的区域性特定格式设置信息。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 参数无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32@)">
      <summary>尝试将数字的指定样式和区域性特定格式的字符串表示形式转换为其等效的 32 位无符号整数。 一个指示转换是否成功的返回值。</summary>
      <returns>如果成功转换了 <paramref name="s" />，则为 true；否则为 false。</returns>
      <param name="s">表示要转换的数字的字符串。 该字符串使用由 <paramref name="style" /> 参数指定的样式来进行解释。</param>
      <param name="style">枚举值的一个按位组合，指示 <paramref name="s" /> 所允许的格式。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 所包含的数字等效的 32 位无符号整数值；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 null，格式不符合 <paramref name="style" />，或者表示的数字小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" />，则转换会失败。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.TryParse(System.String,System.UInt32@)">
      <summary>尝试将数字的字符串表示形式转换为等效的 32 位无符号整数。 一个指示转换是否成功的返回值。</summary>
      <returns>如果成功转换了 <paramref name="s" />，则为 true；否则为 false。</returns>
      <param name="s">表示要转换的数字的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所含数字等效的 32 位无符号整数值；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 null，格式不正确，或者表示的数字小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" />，则转换会失败。 该参数未经初始化即被传递。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.UInt64">
      <summary>表示 64 位无符号整数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.CompareTo(System.UInt64)">
      <summary>将此实例与指定的 64 位无符号整数进行比较并返回对其相对值的指示。</summary>
      <returns>一个有符号数字，指示此实例和 <paramref name="value" /> 的相对值。 返回值 描述 小于零 此实例小于 <paramref name="value" />。 零 此实例等于 <paramref name="value" />。 大于零 此实例大于 <paramref name="value" />。</returns>
      <param name="value">要比较的无符号整数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt64.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.UInt64" /> 的实例并且等于此实例的值，则为 true；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt64.Equals(System.UInt64)">
      <summary>返回一个值，该值指示此实例是否与指定的 <see cref="T:System.UInt64" /> 值相等。</summary>
      <returns>如果 <paramref name="obj" /> 的值与此实例相同，则为 true；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的 <see cref="T:System.UInt64" /> 值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt64.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.UInt64.MaxValue">
      <summary>表示 <see cref="T:System.UInt64" /> 的最大可能值。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UInt64.MinValue">
      <summary>表示 <see cref="T:System.UInt64" /> 的最小可能值。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效 64 位无符号整数。</summary>
      <returns>与 <paramref name="s" /> 中包含的数字等效的 64 位无符号整数。</returns>
      <param name="s">表示要转换的数字的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 参数的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 参数表示小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将指定样式的数字的字符串表示形式转换为它的等效 64 位无符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 64 位无符号整数。</returns>
      <param name="s">表示要转换的数字的字符串。 该字符串使用由 <paramref name="style" /> 参数指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，这些枚举值指定 <paramref name="s" /> 所允许的格式。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 参数的格式不符合 <paramref name="style" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 参数表示小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" /> 的数字。 - 或 - <paramref name="s" /> 包含非零的小数位。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 64 位无符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 64 位无符号整数。</returns>
      <param name="s">表示要转换的数字的字符串。 该字符串使用由 <paramref name="style" /> 参数指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 参数的格式不符合 <paramref name="style" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 参数表示小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" /> 的数字。 - 或 - <paramref name="s" /> 包含非零的小数位。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.IFormatProvider)">
      <summary>将指定区域性特定格式的数字的字符串表示形式转换为它的等效 64 位无符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 64 位无符号整数。</returns>
      <param name="s">表示要转换的数字的字符串。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 参数的样式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 参数表示小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" /> 的数字。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。 返回值 含义 小于零 此实例按排序顺序在 <paramref name="value" /> 前面。 零 此实例与 <paramref name="value" /> 按排序顺序中出现的位置相同。 大于零 此实例按排序顺序在 <paramref name="value" /> 后面。 - 或 - <paramref name="value" /> 为 null。</returns>
      <param name="value">与此实例进行比较的 object，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.UInt64" /> 对象。</exception>
    </member>
    <member name="M:System.UInt64.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由一系列从 0 到 9 之间的数字组成，不包含符号或前导零。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="provider" /> 指定。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.ToString(System.String)">
      <summary>使用指定的格式将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <param name="format">一个数值格式字符串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 参数无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
      <param name="format">一个数值格式字符串。</param>
      <param name="provider">一个对象，它提供有关此实例的区域性特定格式设置信息。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 参数无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt64@)">
      <summary>尝试将数字的指定样式和区域性特定格式的字符串表示形式转换为其等效的 64 位无符号整数。 一个指示转换是否成功的返回值。</summary>
      <returns>如果成功转换了 <paramref name="s" />，则为 true；否则为 false。</returns>
      <param name="s">表示要转换的数字的字符串。 该字符串使用由 <paramref name="style" /> 参数指定的样式来进行解释。</param>
      <param name="style">枚举值的一个按位组合，指示 <paramref name="s" /> 所允许的格式。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 所包含的数字等效的 64 位无符号整数值；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 null，格式不符合 <paramref name="style" />，或者表示的数字小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" />，则转换会失败。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是一个 <see cref="T:System.Globalization.NumberStyles" /> 值。 - 或 - <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.TryParse(System.String,System.UInt64@)">
      <summary>尝试将数字的字符串表示形式转换为等效的 64 位无符号整数。 一个指示转换是否成功的返回值。</summary>
      <returns>如果成功转换了 <paramref name="s" />，则为 true；否则为 false。</returns>
      <param name="s">表示要转换的数字的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所含数字等效的 64 位无符号整数值；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 null，格式不正确，或者表示的数字小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" />，则转换会失败。 该参数未经初始化即被传递。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.UIntPtr">
      <summary>用于表示指针或句柄的平台特定类型。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt32)">
      <summary>使用指定的 32 位指针或句柄初始化 <see cref="T:System.UIntPtr" /> 的新实例。</summary>
      <param name="value">包含于 32 位无符号整数中的指针或句柄。</param>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt64)">
      <summary>使用指定的 64 位指针或句柄初始化 <see cref="T:System.UIntPtr" /> 的新实例。</summary>
      <param name="value">包含于 64 位无符号整数中的指针或句柄。</param>
      <exception cref="T:System.OverflowException">在 32 位的平台上，<paramref name="value" /> 太大，无法表示为一个 <see cref="T:System.UIntPtr" />。</exception>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.Void*)">
      <summary>使用指定的指向未指定类型的指针来初始化 <see cref="T:System.UIntPtr" /> 的新实例。</summary>
      <param name="value">指向未指定类型的指针。</param>
    </member>
    <member name="M:System.UIntPtr.Add(System.UIntPtr,System.Int32)">
      <summary>为无符号指针的值增加偏移量。</summary>
      <returns>新的无符号指针，反映向 <paramref name="pointer" /> 增加 <paramref name="offset" /> 的结果。</returns>
      <param name="pointer">要为其增加偏移量的无符号指针。</param>
      <param name="offset">要增加的偏移量。</param>
    </member>
    <member name="M:System.UIntPtr.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.UIntPtr" /> 的实例并且等于此实例的值，则为 true；否则为 false。</returns>
      <param name="obj">与此实例进行比较的对象或为 null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UIntPtr.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Addition(System.UIntPtr,System.Int32)">
      <summary>为无符号指针的值增加偏移量。</summary>
      <returns>新的无符号指针，反映向 <paramref name="pointer" /> 增加 <paramref name="offset" /> 的结果。</returns>
      <param name="pointer">要为其增加偏移量的无符号指针。</param>
      <param name="offset">要增加的偏移量。</param>
    </member>
    <member name="M:System.UIntPtr.op_Equality(System.UIntPtr,System.UIntPtr)">
      <summary>确定 <see cref="T:System.UIntPtr" /> 的两个指定的实例是否相等。</summary>
      <returns>如果 <paramref name="value1" /> 等于 <paramref name="value2" />，则为 true；否则为 false。</returns>
      <param name="value1">要比较的第一个指针或句柄。</param>
      <param name="value2">要比较的第二个指针或句柄。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt32)~System.UIntPtr">
      <summary>将 32 位无符号整数的值转换成 <see cref="T:System.UIntPtr" />。</summary>
      <returns>初始化为 <paramref name="value" /> 的 <see cref="T:System.UIntPtr" /> 新实例。</returns>
      <param name="value">32 位无符号整数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt64)~System.UIntPtr">
      <summary>将 64 位无符号整数的值转换成 <see cref="T:System.UIntPtr" />。</summary>
      <returns>初始化为 <paramref name="value" /> 的 <see cref="T:System.UIntPtr" /> 新实例。</returns>
      <param name="value">64 位无符号整数。</param>
      <exception cref="T:System.OverflowException">在 32 位的平台上，<paramref name="value" /> 太大，无法表示为一个 <see cref="T:System.UIntPtr" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt64">
      <summary>将指定的 <see cref="T:System.UIntPtr" /> 的值转换为 64 位无符号整数。</summary>
      <returns>
        <paramref name="value" /> 的内容。</returns>
      <param name="value">要转换的指针或句柄。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.Void*">
      <summary>将指定的 <see cref="T:System.UIntPtr" /> 的值转换为指向未指定的类型的指针。</summary>
      <returns>
        <paramref name="value" /> 的内容。</returns>
      <param name="value">要转换的指针或句柄。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt32">
      <summary>将指定的 <see cref="T:System.UIntPtr" /> 的值转换为 32 位无符号整数。</summary>
      <returns>
        <paramref name="value" /> 的内容。</returns>
      <param name="value">要转换的指针或句柄。</param>
      <exception cref="T:System.OverflowException">在 64 位平台上，<paramref name="value" /> 的值太大，无法表示为 32 位无符号整数。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.Void*)~System.UIntPtr">
      <summary>将指定的指向未指定类型的指针转换为 <see cref="T:System.UIntPtr" />。</summary>
      <returns>初始化为 <paramref name="value" /> 的 <see cref="T:System.UIntPtr" /> 新实例。</returns>
      <param name="value">指向未指定类型的指针。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Inequality(System.UIntPtr,System.UIntPtr)">
      <summary>确定 <see cref="T:System.UIntPtr" /> 的两个指定的实例是否不等。</summary>
      <returns>如果 <paramref name="value1" /> 不等于 <paramref name="value2" />，则为 true；否则为 false。</returns>
      <param name="value1">要比较的第一个指针或句柄。</param>
      <param name="value2">要比较的第二个指针或句柄。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Subtraction(System.UIntPtr,System.Int32)">
      <summary>从无符号指针的值中减去偏移量。</summary>
      <returns>新的无符号指针，反映从 <paramref name="pointer" /> 中减去 <paramref name="offset" /> 的结果。</returns>
      <param name="pointer">要从中减去偏移量的无符号指针。</param>
      <param name="offset">要减去的偏移量。</param>
    </member>
    <member name="P:System.UIntPtr.Size">
      <summary>获得此实例的大小。</summary>
      <returns>此平台上的指针或句柄的大小，按字节计。 此属性的值在 32 位平台上为 4，在 64 位平台上为 8。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UIntPtr.Subtract(System.UIntPtr,System.Int32)">
      <summary>从无符号指针的值中减去偏移量。</summary>
      <returns>新的无符号指针，反映从 <paramref name="pointer" /> 中减去 <paramref name="offset" /> 的结果。</returns>
      <param name="pointer">要从中减去偏移量的无符号指针。</param>
      <param name="offset">要减去的偏移量。</param>
    </member>
    <member name="M:System.UIntPtr.ToPointer">
      <summary>将此实例的值转换为指向未指定的类型的指针。</summary>
      <returns>指向 <see cref="T:System.Void" /> 的指针，即是说，该指针所指向的内存包含有未指定的类型的数据。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UIntPtr.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UIntPtr.ToUInt32">
      <summary>将此实例的值转换成 32 位无符号整数。</summary>
      <returns>等于此实例的值的 32 位无符号整数。</returns>
      <exception cref="T:System.OverflowException">在 64 位平台上，此实例的值太大，无法表示为 32 位无符号整数。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UIntPtr.ToUInt64">
      <summary>将此实例的值转换成 64 位无符号整数。</summary>
      <returns>等于此实例的值的 64 位无符号整数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UIntPtr.Zero">
      <summary>一个只读字段，代表已初始化为零的指针或句柄。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.UnauthorizedAccessException">
      <summary>当操作系统因 I/O 错误或指定类型的安全错误而拒绝访问时所引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor">
      <summary>初始化 <see cref="T:System.UnauthorizedAccessException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.UnauthorizedAccessException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.UnauthorizedAccessException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不是空引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="T:System.ValueType">
      <summary>提供值类型的基类。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ValueType.#ctor">
      <summary>初始化 <see cref="T:System.ValueType" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ValueType.Equals(System.Object)">
      <summary>指示此实例与指定对象是否相等。</summary>
      <returns>如果 <paramref name="obj" /> 和该实例具有相同的类型并表示相同的值，则为 true；否则为 false。</returns>
      <param name="obj">要比较的另一个对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ValueType.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>一个 32 位有符号整数，它是该实例的哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ValueType.ToString">
      <summary>返回该实例的完全限定类型名。</summary>
      <returns>包含完全限定类型名的 <see cref="T:System.String" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Version">
      <summary>表示程序集、操作系统、或者公共语言运行时的版本号。 此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32)">
      <summary>使用指定的主要版本号值和次要版本号值初始化 <see cref="T:System.Version" /> 类的新实例。</summary>
      <param name="major">主版本号。</param>
      <param name="minor">次版本号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" /> 或 <paramref name="minor" /> 小于零。</exception>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>使用指定的主要版本号、次要版本号和内部版本号值初始化 <see cref="T:System.Version" /> 类的新实例。</summary>
      <param name="major">主版本号。</param>
      <param name="minor">次版本号。</param>
      <param name="build">生成号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" />、<paramref name="minor" /> 或 <paramref name="build" /> 小于零。</exception>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>使用指定的主版本号、次版本号、内部版本号和修订号初始化 <see cref="T:System.Version" /> 类的新实例。</summary>
      <param name="major">主版本号。</param>
      <param name="minor">次版本号。</param>
      <param name="build">生成号。</param>
      <param name="revision">修订号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" />、<paramref name="minor" />、<paramref name="build" /> 或 <paramref name="revision" /> 小于零。</exception>
    </member>
    <member name="M:System.Version.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Version" /> 类的新实例。</summary>
      <param name="version">一个包含主要版本号、次要版本号、内部版本号和修订号的字符串，其中的各个号之间以句点字符（“.”）分隔。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="version" /> 少于两个部分或多于四个部分。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">主要版本号、次要版本号、内部版本号或修订号部分小于零。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="version" /> 的至少一个部分未分析为整数。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="version" /> 至少有一个部分表示大于 <see cref="F:System.Int32.MaxValue" /> 的数。</exception>
    </member>
    <member name="P:System.Version.Build">
      <summary>获取当前 <see cref="T:System.Version" /> 对象版本号的内部版本号部分的值。</summary>
      <returns>生成号或为 -1（如果未定义生成号）。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.CompareTo(System.Version)">
      <summary>将当前 <see cref="T:System.Version" /> 对象与指定的 <see cref="T:System.Version" /> 对象进行比较，并返回二者相对值的一个指示。</summary>
      <returns>一个有符号整数，它指示两个对象的相对值，如下表所示。 返回值 含义 小于零 当前 <see cref="T:System.Version" /> 对象是 <paramref name="value" /> 之前的一个版本。 零 当前 <see cref="T:System.Version" /> 对象是与 <paramref name="value" /> 相同的版本。 大于零 当前 <see cref="T:System.Version" /> 对象是 <paramref name="value" /> 之后的一个版本。 - 或 - <paramref name="value" /> 为 null。</returns>
      <param name="value">要与当前的 <see cref="T:System.Version" /> 对象进行比较的 <see cref="T:System.Version" /> 对象，或者为 null。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.Equals(System.Object)">
      <summary>返回一个值，该值指示当前 <see cref="T:System.Version" /> 对象是否等于指定的对象。</summary>
      <returns>如果当前 <see cref="T:System.Version" /> 对象和 <paramref name="obj" /> 都为 <see cref="T:System.Version" /> 对象，并且当前 <see cref="T:System.Version" /> 对象的每个部分都与 <paramref name="obj" /> 的相应部分匹配，则为 true；否则为 false。</returns>
      <param name="obj">要与当前 <see cref="T:System.Version" /> 对象进行比较的对象，或者为 null。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.Equals(System.Version)">
      <summary>返回一个值，该值指示当前 <see cref="T:System.Version" /> 对象和指定的 <see cref="T:System.Version" /> 对象是否表示同一个值。</summary>
      <returns>如果当前 <see cref="T:System.Version" /> 对象的每个部分都与 <paramref name="obj" /> 参数的相应部分匹配，则为 true；否则为 false。</returns>
      <param name="obj">要与当前的 <see cref="T:System.Version" /> 对象进行比较的 <see cref="T:System.Version" /> 对象，或者为 null。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.GetHashCode">
      <summary>返回当前 <see cref="T:System.Version" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Version.Major">
      <summary>获取当前 <see cref="T:System.Version" /> 对象版本号的主要版本号部分的值。</summary>
      <returns>主版本号。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Version.MajorRevision">
      <summary>获取修订号的高 16 位。</summary>
      <returns>16 位带符号整数。</returns>
    </member>
    <member name="P:System.Version.Minor">
      <summary>获取当前 <see cref="T:System.Version" /> 对象版本号的次要版本号部分的值。</summary>
      <returns>次版本号。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Version.MinorRevision">
      <summary>获取修订号的低 16 位。</summary>
      <returns>16 位带符号整数。</returns>
    </member>
    <member name="M:System.Version.op_Equality(System.Version,System.Version)">
      <summary>确定指定的两个 <see cref="T:System.Version" /> 对象是否相等。</summary>
      <returns>如果 <paramref name="v1" /> 等于 <paramref name="v2" />，则为 true；否则为 false。</returns>
      <param name="v1">第一个 <see cref="T:System.Version" /> 对象。</param>
      <param name="v2">第二个 <see cref="T:System.Version" /> 对象。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Version.op_GreaterThan(System.Version,System.Version)">
      <summary>确定指定的第一个 <see cref="T:System.Version" /> 对象是否大于指定的第二个 <see cref="T:System.Version" /> 对象。</summary>
      <returns>如果 <paramref name="v1" /> 大于 <paramref name="v2" />，则为 true；否则为 false。</returns>
      <param name="v1">第一个 <see cref="T:System.Version" /> 对象。</param>
      <param name="v2">第二个 <see cref="T:System.Version" /> 对象。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Version.op_GreaterThanOrEqual(System.Version,System.Version)">
      <summary>确定指定的第一个 <see cref="T:System.Version" /> 对象是否大于等于指定的第二个 <see cref="T:System.Version" /> 对象。</summary>
      <returns>如果 <paramref name="v1" /> 大于等于 <paramref name="v2" />，则为 true；否则为 false。</returns>
      <param name="v1">第一个 <see cref="T:System.Version" /> 对象。</param>
      <param name="v2">第二个 <see cref="T:System.Version" /> 对象。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Version.op_Inequality(System.Version,System.Version)">
      <summary>确定指定的两个 <see cref="T:System.Version" /> 对象是否不相等。</summary>
      <returns>如果 <paramref name="v1" /> 不等于 <paramref name="v2" />，则为 true；否则为 false。</returns>
      <param name="v1">第一个 <see cref="T:System.Version" /> 对象。</param>
      <param name="v2">第二个 <see cref="T:System.Version" /> 对象。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Version.op_LessThan(System.Version,System.Version)">
      <summary>确定指定的第一个 <see cref="T:System.Version" /> 对象是否小于指定的第二个 <see cref="T:System.Version" /> 对象。</summary>
      <returns>如果 <paramref name="v1" /> 小于 <paramref name="v2" />，则为 true；否则为 false。</returns>
      <param name="v1">第一个 <see cref="T:System.Version" /> 对象。</param>
      <param name="v2">第二个 <see cref="T:System.Version" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="v1" /> 为 null。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Version.op_LessThanOrEqual(System.Version,System.Version)">
      <summary>确定指定的第一个 <see cref="T:System.Version" /> 对象是否小于或等于第二个 <see cref="T:System.Version" /> 对象。</summary>
      <returns>如果 <paramref name="v1" /> 小于等于 <paramref name="v2" />，则为 true；否则为 false。</returns>
      <param name="v1">第一个 <see cref="T:System.Version" /> 对象。</param>
      <param name="v2">第二个 <see cref="T:System.Version" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="v1" /> 为 null。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Version.Parse(System.String)">
      <summary>将版本号的字符串表示形式转换为等效的 <see cref="T:System.Version" /> 对象。</summary>
      <returns>一个等效于 <paramref name="input" /> 参数中指定的版本号的对象。</returns>
      <param name="input">包含要转换的版本号的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 少于两个组件或多于四个版本组件。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">在 <paramref name="input" /> 中至少有一个组件小于零。</exception>
      <exception cref="T:System.FormatException">在 <paramref name="input" /> 中至少有一个组件不是整数。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> 中至少有一个组件表示大于 <see cref="F:System.Int32.MaxValue" /> 的数。</exception>
    </member>
    <member name="P:System.Version.Revision">
      <summary>获取当前 <see cref="T:System.Version" /> 对象版本号的修订号部分的值。</summary>
      <returns>修订号或为 -1（如果未定义修订号）。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。 返回值 含义 小于零 此实例按排序顺序在 <paramref name="value" /> 前面。 零 此实例与 <paramref name="value" /> 按排序顺序中出现的位置相同。 大于零 此实例按排序顺序在 <paramref name="value" /> 后面。 - 或 - <paramref name="value" /> 为 null。</returns>
      <param name="version">与此实例进行比较的 object，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Version" /> 对象。</exception>
    </member>
    <member name="M:System.Version.ToString">
      <summary>将当前 <see cref="T:System.Version" /> 对象的值转换为其等效的 <see cref="T:System.String" /> 表示形式。</summary>
      <returns>当前 <see cref="T:System.Version" /> 对象的主要版本号、次要版本号、内部版本号和修订号部分的值的 <see cref="T:System.String" /> 表示形式（遵循下面所示格式）。 各部分之间由句点字符（“.”）分隔。 方括号（“[”和“]”）指示在返回值中不会出现的部分（如果未定义该部分）： 主要版本号.次要版本号[.内部版本号[.修订号]] 例如，如果使用构造函数 Version(1,1) 创建 <see cref="T:System.Version" /> 对象，则返回的字符串为“1.1”。 如果使用构造函数 Version(1,3,4,2) 创建 <see cref="T:System.Version" /> 对象，则返回的字符串为“1.3.4.2”。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.ToString(System.Int32)">
      <summary>将当前 <see cref="T:System.Version" /> 对象的值转换为其等效的 <see cref="T:System.String" /> 表示形式。 指定的计数指示要返回的部分数。</summary>
      <returns>当前 <see cref="T:System.Version" /> 对象的主要版本号、次要版本号、内部版本号和修订号部分的值的 <see cref="T:System.String" /> 表示形式，各部分之间用句点字符（“.”）分隔。 <paramref name="fieldCount" /> 参数确定返回多少个部分。 fieldCount 返回值 0 空字符串 ("")。 1 主要版本号 2 主要版本号.次要版本号 3 主要版本号.次要版本号.内部版本号 4 主要版本号.次要版本号.内部版本号.修订号 例如，如果使用构造函数 Version(1,3,5) 创建 <see cref="T:System.Version" /> 对象，则 ToString(2) 返回“1.3”，并且 ToString(4) 引发异常。</returns>
      <param name="fieldCount">要返回的部分数。 <paramref name="fieldCount" /> 的范围是从 0 到 4。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldCount" /> 小于 0 或大于 4。 - 或 - <paramref name="fieldCount" /> 多于在当前 <see cref="T:System.Version" /> 对象中定义的部分的数量。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.TryParse(System.String,System.Version@)">
      <summary>尝试将版本号的字符串表示形式转换为等效的 <see cref="T:System.Version" /> 对象，并返回一个指示转换是否成功的值。</summary>
      <returns>如果 <paramref name="input" /> 参数成功转换，则为 true；否则为 false。</returns>
      <param name="input">包含要转换的版本号的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input" /> 中所含编号等效的 <see cref="T:System.Version" />；如果转换失败，则包含主版本号和次版本号都为 0 的 <see cref="T:System.Version" /> 对象。</param>
    </member>
    <member name="T:System.Void">
      <summary>为不返回值的方法指定返回值类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.WeakReference">
      <summary>表示弱引用，即在引用对象的同时仍然允许垃圾回收来回收该对象。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object)">
      <summary>引用指定的对象初始化 <see cref="T:System.WeakReference" /> 类的新实例。</summary>
      <param name="target">要跟踪的对象或为 null。</param>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
      <summary>初始化 <see cref="T:System.WeakReference" /> 类的新实例，引用指定的对象并使用指定的复活跟踪。</summary>
      <param name="target">要跟踪的对象。</param>
      <param name="trackResurrection">指示何时停止跟踪对象。 如果为 true，则在终结后跟踪对象；如果为 false，则仅在终结前跟踪对象。</param>
    </member>
    <member name="M:System.WeakReference.Finalize">
      <summary>丢弃对当前 <see cref="T:System.WeakReference" /> 对象表示的目标的引用。</summary>
    </member>
    <member name="P:System.WeakReference.IsAlive">
      <summary>获取当前 <see cref="T:System.WeakReference" /> 对象引用的对象是否已被垃圾回收的指示。</summary>
      <returns>如果当前 <see cref="T:System.WeakReference" /> 对象引用的对象尚未被垃圾回收且仍然可访问，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.WeakReference.Target">
      <summary>获取或设置当前 <see cref="T:System.WeakReference" /> 对象引用的对象（目标）。</summary>
      <returns>如果当前 <see cref="T:System.WeakReference" /> 对象引用的对象已被垃圾回收，则为 null；否则为对该对象（当前 <see cref="T:System.WeakReference" /> 对象引用的对象）的引用。</returns>
      <exception cref="T:System.InvalidOperationException">对目标对象的引用无效。 如果值为 null 引用或者已经在设置操作过程中完成对象，则设置该属性时可能引发此异常。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.WeakReference.TrackResurrection">
      <summary>获取当前 <see cref="T:System.WeakReference" /> 对象引用的对象在终止后是否会被跟踪的指示。</summary>
      <returns>如果当前 <see cref="T:System.WeakReference" /> 对象引用的对象在终止后会被跟踪，则为 true；否则，如果该对象仅在终止前被跟踪，则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.BitArray">
      <summary>管理位值的压缩数组，该值表示为布尔值，其中 true 表示位是打开的 (1)，false 表示位是关闭的 (0)。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Boolean[])">
      <summary>初始化 <see cref="T:System.Collections.BitArray" /> 类的新实例，该实例包含从指定的布尔值数组复制的位值。</summary>
      <param name="values">要复制的布尔值数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Byte[])">
      <summary>初始化 <see cref="T:System.Collections.BitArray" /> 类的新实例，该实例包含从指定的字节数组复制的位值。</summary>
      <param name="bytes">包含要复制的值的字节数组，其中每个字节表示 8 个连续位。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bytes" /> 的长度大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Collections.BitArray)">
      <summary>初始化 <see cref="T:System.Collections.BitArray" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.BitArray" /> 复制的位值。</summary>
      <param name="bits">要复制的 <see cref="T:System.Collections.BitArray" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bits" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.BitArray" /> 类的新实例，该实例可拥有指定数目的位值，位值最初设置为 false。</summary>
      <param name="length">新 <see cref="T:System.Collections.BitArray" /> 中位值的数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)">
      <summary>初始化 <see cref="T:System.Collections.BitArray" /> 类的新实例，该实例可拥有指定数目的位值，位值最初设置为指定值。</summary>
      <param name="length">新 <see cref="T:System.Collections.BitArray" /> 中位值的数目。</param>
      <param name="defaultValue">要分配给每个位的布尔值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32[])">
      <summary>初始化 <see cref="T:System.Collections.BitArray" /> 类的新实例，该实例包括从指定的 32 位整数数组复制的位值。</summary>
      <param name="values">包含要复制的值的整数数组，其中每个整数表示 32 个连续位。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="values" /> 的长度大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Collections.BitArray.And(System.Collections.BitArray)">
      <summary>对当前 <see cref="T:System.Collections.BitArray" /> 中的元素和指定的 <see cref="T:System.Collections.BitArray" /> 中的相应元素执行按位 AND 运算。</summary>
      <returns>当前实例，包含对当前 <see cref="T:System.Collections.BitArray" /> 中的元素和指定的 <see cref="T:System.Collections.BitArray" /> 中的相应元素执行按位“与”运算的结果。</returns>
      <param name="value">要对其执行按位 AND 运算的 <see cref="T:System.Collections.BitArray" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 和当前 <see cref="T:System.Collections.BitArray" /> 的元素数不同。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.BitArray.Get(System.Int32)">
      <summary>获取 <see cref="T:System.Collections.BitArray" /> 中特定位置处的位的值。</summary>
      <returns>在 <paramref name="index" /> 位置处的位的值。</returns>
      <param name="index">要获取的值的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。 - 或 - <paramref name="index" /> 大于或等于 <see cref="T:System.Collections.BitArray" /> 中的元素数。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.BitArray.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.BitArray" /> 的枚举数。</summary>
      <returns>用于整个 <see cref="T:System.Collections.BitArray" /> 的 <see cref="T:System.Collections.IEnumerator" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.BitArray.Item(System.Int32)">
      <summary>获取或设置 <see cref="T:System.Collections.BitArray" /> 中特定位置的位的值。</summary>
      <returns>在 <paramref name="index" /> 位置处的位的值。</returns>
      <param name="index">要获取或设置的值的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。 - 或 - <paramref name="index" /> 等于或大于 <see cref="P:System.Collections.BitArray.Count" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.BitArray.Length">
      <summary>获取或设置 <see cref="T:System.Collections.BitArray" /> 中元素的数目。</summary>
      <returns>
        <see cref="T:System.Collections.BitArray" /> 中元素的数目。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">属性设置为一个小于零的值。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.BitArray.Not">
      <summary>反转当前 <see cref="T:System.Collections.BitArray" /> 中的所有位值，以便将设置为 true 的元素更改为 false；将设置为 false 的元素更改为 true。</summary>
      <returns>具有已反转的位值的当前实例。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
      <summary>对当前 <see cref="T:System.Collections.BitArray" /> 中的元素和指定的 <see cref="T:System.Collections.BitArray" /> 中的相应元素执行按位"或"运算。</summary>
      <returns>当前实例，包含对当前 <see cref="T:System.Collections.BitArray" /> 中的元素和指定的 <see cref="T:System.Collections.BitArray" /> 中的相应元素执行按位“或”运算的结果。</returns>
      <param name="value">要对其执行按位"或"运算的 <see cref="T:System.Collections.BitArray" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 和当前 <see cref="T:System.Collections.BitArray" /> 的元素数不同。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
      <summary>将 <see cref="T:System.Collections.BitArray" /> 中特定位置处的位设置为指定值。</summary>
      <param name="index">要设置的位的从零开始的索引。</param>
      <param name="value">要分配给位的布尔值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。 - 或 - <paramref name="index" /> 大于或等于 <see cref="T:System.Collections.BitArray" /> 中的元素数。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.BitArray.SetAll(System.Boolean)">
      <summary>将 <see cref="T:System.Collections.BitArray" /> 中的所有位设置为指定值。</summary>
      <param name="value">要分配给所有位的布尔值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.BitArray.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从指定的 <see cref="T:System.Array" /> 索引位置开始，将 <see cref="T:System.Collections.BitArray" /> 的元素复制到 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.BitArray" /> 复制的元素的目标的一维 <see cref="T:System.Array" />。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。 - 或 - 源 <see cref="T:System.Collections.BitArray" /> 中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。 - 或 - 源 <see cref="T:System.Collections.BitArray" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="P:System.Collections.BitArray.System#Collections#ICollection#Count">
      <summary>获取 <see cref="T:System.Collections.BitArray" /> 中元素的数目。</summary>
      <returns>
        <see cref="T:System.Collections.BitArray" /> 中元素的数目。</returns>
    </member>
    <member name="P:System.Collections.BitArray.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.BitArray" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see cref="T:System.Collections.BitArray" /> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Collections.BitArray.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.BitArray" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.BitArray" /> 的访问的对象。</returns>
    </member>
    <member name="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
      <summary>对当前 <see cref="T:System.Collections.BitArray" /> 中的元素和指定的 <see cref="T:System.Collections.BitArray" /> 中的相应元素执行按位"异或"运算。</summary>
      <returns>当前实例，包含对当前 <see cref="T:System.Collections.BitArray" /> 中的元素和指定的 <see cref="T:System.Collections.BitArray" /> 中的相应元素执行按位“异或”运算的结果。</returns>
      <param name="value">要对其执行按位"异或"运算的 <see cref="T:System.Collections.BitArray" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 和当前 <see cref="T:System.Collections.BitArray" /> 的元素数不同。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.DictionaryEntry">
      <summary>定义可设置或检索的字典键/值对。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.DictionaryEntry.#ctor(System.Object,System.Object)">
      <summary>使用指定的键和值初始化 <see cref="T:System.Collections.DictionaryEntry" /> 类型的实例。</summary>
      <param name="key">每个键/值对中定义的对象。</param>
      <param name="value">与 <paramref name="key" /> 相关联的定义。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null，并且 .NET Framework 版本为 1.0 或 1.1。</exception>
    </member>
    <member name="P:System.Collections.DictionaryEntry.Key">
      <summary>获取或设置键/值对中的键。</summary>
      <returns>键/值对中的键。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Collections.DictionaryEntry.Value">
      <summary>获取或设置键/值对中的值。</summary>
      <returns>键/值对中的值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Collections.ICollection">
      <summary>定义所有非泛型集合的大小、枚举数和同步方法。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
      <summary>从特定的 <see cref="T:System.Array" /> 索引处开始，将 <see cref="T:System.Collections.ICollection" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标的一维 <see cref="T:System.Array" />。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。 - 或 - 源 <see cref="T:System.Collections.ICollection" /> 中的元素数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 结尾处之间的可用空间。 - 或 - 源 <see cref="T:System.Collections.ICollection" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.ICollection.Count">
      <summary>获取 <see cref="T:System.Collections.ICollection" /> 中包含的元素数。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 中包含的元素个数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.ICollection.IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.ICollection.SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IComparer">
      <summary>公开一种比较两个对象的方法。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.IComparer.Compare(System.Object,System.Object)">
      <summary>比较两个对象并返回一个值，该值指示一个对象小于、等于还是大于另一个对象。</summary>
      <returns>一个有符号整数，指示 <paramref name="x" /> 与 <paramref name="y" /> 的相对值，如下表所示。 值 含义 小于零 <paramref name="x" /> 小于 <paramref name="y" />。 零 <paramref name="x" /> 等于 <paramref name="y" />。 大于零 <paramref name="x" /> 大于 <paramref name="y" />。</returns>
      <param name="x">要比较的第一个对象。</param>
      <param name="y">要比较的第二个对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> 和 <paramref name="y" /> 都不实现 <see cref="T:System.IComparable" /> 接口。 - 或 - <paramref name="x" /> 和 <paramref name="y" /> 的类型不同，它们都无法处理与另一个进行的比较。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IDictionary">
      <summary>表示键/值对的非通用集合。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
      <summary>在 <see cref="T:System.Collections.IDictionary" /> 对象中添加一个带有所提供的键和值的元素。</summary>
      <param name="key">用作要添加的元素的键的 <see cref="T:System.Object" />。</param>
      <param name="value">用作要添加的元素的值的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.IDictionary" /> 对象中已存在具有相同键的元素。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IDictionary" /> 为只读。 - 或 - <see cref="T:System.Collections.IDictionary" /> 具有固定大小。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IDictionary.Clear">
      <summary>从 <see cref="T:System.Collections.IDictionary" /> 对象中移除所有元素。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IDictionary" /> 对象为只读。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IDictionary.Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IDictionary" /> 对象是否包含具有指定键的元素。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 包含带有该键的元素，则为 true；否则为 false。</returns>
      <param name="key">要在 <see cref="T:System.Collections.IDictionary" /> 对象中定位的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IDictionary.GetEnumerator">
      <summary>返回一个用于 <see cref="T:System.Collections.IDictionary" /> 对象的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象。</summary>
      <returns>一个用于 <see cref="T:System.Collections.IDictionary" /> 对象的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionary.IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 对象是否具有固定大小。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 对象具有固定大小，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionary.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 对象是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 对象为只读，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionary.Item(System.Object)">
      <summary>获取或设置具有指定键的元素。</summary>
      <returns>具有指定键的元素，如果该键不存在，则为 null。</returns>
      <param name="key">要获取或设置的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">设置该属性，而且 <see cref="T:System.Collections.IDictionary" /> 对象为只读。 - 或 - 设置该属性，集合中不存在 <paramref name="key" />，而且 <see cref="T:System.Collections.IDictionary" /> 具有固定大小。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionary.Keys">
      <summary>获取 <see cref="T:System.Collections.ICollection" /> 对象，它包含 <see cref="T:System.Collections.IDictionary" /> 对象的键。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 对象，它包含 <see cref="T:System.Collections.IDictionary" /> 对象的键。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IDictionary.Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IDictionary" /> 对象中移除带有指定键的元素。</summary>
      <param name="key">要移除的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IDictionary" /> 对象为只读。 - 或 - <see cref="T:System.Collections.IDictionary" /> 具有固定大小。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionary.Values">
      <summary>获取 <see cref="T:System.Collections.ICollection" /> 对象，它包含 <see cref="T:System.Collections.IDictionary" /> 对象中的值。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 对象，它包含 <see cref="T:System.Collections.IDictionary" /> 对象中的值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IDictionaryEnumerator">
      <summary>枚举非泛型字典的元素。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Entry">
      <summary>同时获取当前字典项的键和值。</summary>
      <returns>同时包含当前字典项的键和值的 <see cref="T:System.Collections.DictionaryEntry" />。</returns>
      <exception cref="T:System.InvalidOperationException">将 <see cref="T:System.Collections.IDictionaryEnumerator" /> 定位于字典的第一项之前或最后一项之后。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Key">
      <summary>获取当前字典项的键。</summary>
      <returns>当前枚举元素的键。</returns>
      <exception cref="T:System.InvalidOperationException">将 <see cref="T:System.Collections.IDictionaryEnumerator" /> 定位于字典的第一项之前或最后一项之后。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Value">
      <summary>获取当前字典项的值。</summary>
      <returns>当前枚举元素的值。</returns>
      <exception cref="T:System.InvalidOperationException">将 <see cref="T:System.Collections.IDictionaryEnumerator" /> 定位于字典的第一项之前或最后一项之后。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IEnumerable">
      <summary>公开枚举数，该枚举数支持在非泛型集合上进行简单迭代。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.IEnumerable.GetEnumerator">
      <summary>返回一个循环访问集合的枚举数。</summary>
      <returns>一个可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IEnumerator">
      <summary>支持对非泛型集合的简单迭代。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Collections.IEnumerator.Current">
      <summary>获取集合中的当前元素。</summary>
      <returns>集合中的当前元素。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IEnumerator.MoveNext">
      <summary>将枚举数推进到集合的下一个元素。</summary>
      <returns>如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IEnumerator.Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IEqualityComparer">
      <summary>定义方法以支持对象的相等比较。</summary>
    </member>
    <member name="M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)">
      <summary>确定指定的对象是否相等。</summary>
      <returns>如果指定的对象相等，则为 true；否则为 false。</returns>
      <param name="x">要比较的第一个对象。</param>
      <param name="y">要比较的第二个对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> 和 <paramref name="y" /> 的类型不同，它们都无法处理与另一个进行的比较。</exception>
    </member>
    <member name="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)">
      <summary>返回指定对象的哈希代码。</summary>
      <returns>指定对象的哈希代码。</returns>
      <param name="obj">
        <see cref="T:System.Object" />，将为其返回哈希代码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 的类型为引用类型，<paramref name="obj" /> 为 null。</exception>
    </member>
    <member name="T:System.Collections.IList">
      <summary>表示可按照索引单独访问的对象的非泛型集合。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.IList.Add(System.Object)">
      <summary>将某项添加到 <see cref="T:System.Collections.IList" /> 中。</summary>
      <returns>新元素所插入到的位置，或为 -1 以指示未将该项插入到集合中。</returns>
      <param name="value">要添加到 <see cref="T:System.Collections.IList" /> 的对象。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 为只读。 - 或 - <see cref="T:System.Collections.IList" /> 具有固定大小。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IList.Clear">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 为只读。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IList.Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
      <returns>如果在 <see cref="T:System.Collections.IList" /> 中找到 <see cref="T:System.Object" />，则为 true；否则为 false。</returns>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中查找的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IList.IndexOf(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 中特定项的索引。</summary>
      <returns>如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中查找的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IList.Insert(System.Int32,System.Object)">
      <summary>将一个项插入指定索引处的 <see cref="T:System.Collections.IList" />。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="value" />。</param>
      <param name="value">要插入 <see cref="T:System.Collections.IList" /> 的对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 为只读。 - 或 - <see cref="T:System.Collections.IList" /> 具有固定大小。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> 在 <see cref="T:System.Collections.IList" /> 中是 null 引用。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IList.IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 具有固定大小，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IList.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 为只读，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IList.Item(System.Int32)">
      <summary>获取或设置位于指定索引处的元素。</summary>
      <returns>位于指定索引处的元素。</returns>
      <param name="index">要获得或设置的元素从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">设置该属性，而且 <see cref="T:System.Collections.IList" /> 为只读。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IList.Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除特定对象的第一个匹配项。</summary>
      <param name="value">要从 <see cref="T:System.Collections.IList" /> 中移除的对象。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 为只读。 - 或 - <see cref="T:System.Collections.IList" /> 具有固定大小。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IList.RemoveAt(System.Int32)">
      <summary>移除指定索引处的 <see cref="T:System.Collections.IList" /> 项。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 为只读。 - 或 - <see cref="T:System.Collections.IList" /> 具有固定大小。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IStructuralComparable">
      <summary>支持集合对象的结构比较。</summary>
    </member>
    <member name="M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)">
      <summary>确定当前集合对象在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个指示当前集合对象与 <paramref name="other" /> 的关系的整数，如下表所示。 返回值 描述 -1 当前实例位于 <paramref name="other" /> 之前。 0 当前实例与 <paramref name="other" /> 位于同一位置。 1 当前实例位于 <paramref name="other" /> 之后。</returns>
      <param name="other">要与当前实例进行比较的对象。</param>
      <param name="comparer">一个将当前集合对象的成员与 <paramref name="other" /> 的对应成员进行比较的对象。</param>
      <exception cref="T:System.ArgumentException">此实例与 <paramref name="other" /> 不是同一类型。</exception>
    </member>
    <member name="T:System.Collections.IStructuralEquatable">
      <summary>定义方法以支持对象的结构相等性比较。</summary>
    </member>
    <member name="M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>确定某个对象与当前实例在结构上是否相等。</summary>
      <returns>如果两个对象相等，则为 true；否则为 false。</returns>
      <param name="other">要与当前实例进行比较的对象。</param>
      <param name="comparer">一个可确定当前实例与 <paramref name="other" /> 是否相等的对象。</param>
    </member>
    <member name="M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)">
      <summary>返回当前实例的哈希代码。</summary>
      <returns>当前实例的哈希代码。</returns>
      <param name="comparer">一个计算当前对象的哈希代码的对象。</param>
    </member>
    <member name="T:System.Collections.StructuralComparisons">
      <summary>提供用于对两个集合对象执行结构比较的对象。</summary>
    </member>
    <member name="P:System.Collections.StructuralComparisons.StructuralComparer">
      <summary>获取可执行两个对象的结构比较的预定义对象。</summary>
      <returns>一个用于执行两个集合对象的结构比较的预定义对象。</returns>
    </member>
    <member name="P:System.Collections.StructuralComparisons.StructuralEqualityComparer">
      <summary>获取一个可比较两个对象的结构是否相等的预定义对象。</summary>
      <returns>一个用于比较两个集合对象的结构是否相等的预定义对象。</returns>
    </member>
    <member name="T:System.Collections.Concurrent.ConcurrentDictionary`2">
      <summary>表示可由多个线程同时访问的键值对的线程安全集合。</summary>
      <typeparam name="TKey">字典中的值的类型。</typeparam>
      <typeparam name="TValue">字典中的键的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 类的新实例，该实例为空，具有默认的并发级别和默认的初始容量，并为键类型使用默认比较器。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>初始化 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 中复制的元素，具有默认的并发级别和默认的初始容量，并为键类型使用默认比较器。</summary>
      <param name="collection">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素被复制到新的 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 或其任何键是空引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collection" /> 包含一个或多个重复键。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>初始化 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.IEnumerable" /> 中复制的元素，具有默认的并发级别和默认的初始容量，并使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</summary>
      <param name="collection">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素被复制到新的 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中。</param>
      <param name="comparer">在比较键时要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 实现。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 是 null 引用（在 Visual Basic 中为 Nothing）。 - 或 - <paramref name="comparer" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>初始化 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 类的新实例，该实例为空，具有默认的并发级别和容量，并使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</summary>
      <param name="comparer">在比较键时要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 实现。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>初始化 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.IEnumerable" /> 中复制的元素并使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</summary>
      <param name="concurrencyLevel">将同时更新 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 的线程的估计数量。</param>
      <param name="collection">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素被复制到新的 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中。</param>
      <param name="comparer">在比较键时要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 实现。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 是 null 引用（在 Visual Basic 中为 Nothing）。  - 或 - <paramref name="comparer" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="concurrencyLevel" /> 小于 1。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collection" /> 包含一个或多个重复键。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 类的新实例，该实例为空，具有指定的并发级别和容量，并为键类型使用默认比较器。</summary>
      <param name="concurrencyLevel">将同时更新 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 的线程的估计数量。</param>
      <param name="capacity">
        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 可包含的初始元素数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="concurrencyLevel" /> 小于 1。 - 或 - <paramref name="capacity" /> 小于 0。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>初始化 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 类的新实例，该实例为空，具有指定的并发级别和指定的初始容量，并使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</summary>
      <param name="concurrencyLevel">将同时更新 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 的线程的估计数量。</param>
      <param name="capacity">
        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 可包含的初始元素数。</param>
      <param name="comparer">在比较键时要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 实现。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="concurrencyLevel" /> 小于 1。 - 或 - <paramref name="capacity" /> 小于 0。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})">
      <summary>如果指定的键尚不存在，则将键/值对添加到 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中；如果指定的键已存在，则更新 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中的键/值对。</summary>
      <returns>键的新值。 这将是 addValueFactory 的结果（如果缺少键）或 updateValueFactory 的结果（如果存在键）。</returns>
      <param name="key">要添加的键或应更新其值的键</param>
      <param name="addValueFactory">用于为空缺键生成值的函数</param>
      <param name="updateValueFactory">用于根据现有键的现有值为键生成新值的函数</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 是 null 引用（在 Visual Basic 中为 Nothing）。 - 或 - <paramref name="addValueFactory" /> 是 null 引用（在 Visual Basic 中为 Nothing）。 - 或 - <paramref name="updateValueFactory" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OverflowException">字典已包含最大数目的元素，<see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})">
      <summary>如果指定的键尚不存在，则将键/值对添加到 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中；如果指定的键已存在，则更新 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中的键/值对。</summary>
      <returns>键的新值。 这将是 addValue 的结果（如果缺少键）或 updateValueFactory 的结果（如果存在键）。</returns>
      <param name="key">要添加的键或应更新其值的键</param>
      <param name="addValue">要为空缺键添加的值</param>
      <param name="updateValueFactory">用于根据现有键的现有值为键生成新值的函数</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 是 null 引用（在 Visual Basic 中为 Nothing）。 - 或 - <paramref name="updateValueFactory" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OverflowException">字典已包含最大数目的元素，<see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.Clear">
      <summary>从 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中移除所有的键和值。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)">
      <summary>确定 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 是否包含指定的键。</summary>
      <returns>如果 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 包含具有指定键的元素，则为 true；否则为 false。</returns>
      <param name="key">要在 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中定位的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.Count">
      <summary>获取包含在 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中的键/值对的数目。</summary>
      <returns>包含在 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中的键/值对的数目。</returns>
      <exception cref="T:System.OverflowException">字典已包含最大数目的元素，<see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 的枚举数。</summary>
      <returns>
        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 的一个枚举数。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})">
      <summary>如果指定的键尚不存在，则将键/值对添加到 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中。</summary>
      <returns>键的值。 如果字典中已存在指定的键，则为该键的现有值；如果字典中不存在指定的键，则为 valueFactory 返回的键的新值。</returns>
      <param name="key">要添加的元素的键。</param>
      <param name="valueFactory">用于为键生成值的函数</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 是 null 引用（在 Visual Basic 中为 Nothing）。 - 或 - <paramref name="valueFactory" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OverflowException">字典已包含最大数目的元素，<see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)">
      <summary>如果指定的键尚不存在，则将键/值对添加到 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中。</summary>
      <returns>键的值。 如果字典中已存在指定的键，则为该键的现有值；如果字典中不存在指定的键，则为新值。</returns>
      <param name="key">要添加的元素的键。</param>
      <param name="value">指定的键不存在时要添加的值</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OverflowException">字典已包含最大数目的元素，<see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty">
      <summary>获取一个指示 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 是否为空的值。</summary>
      <returns>如果 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 为空，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)">
      <summary>获取或设置与指定的键相关联的值。</summary>
      <returns>返回指定索引处的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的 Value 属性。</returns>
      <param name="key">要获取或设置的值的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">已检索该属性，并且集合中不存在 <paramref name="key" />。</exception>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.Keys">
      <summary>获取包含 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的键的集合。</summary>
      <returns>包含 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的键的 <see cref="T:System.Collections.Generic.ICollection`1" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>向集合中添加一项。</summary>
      <param name="keyValuePair">要添加到字典中的 <see cref="T:System.Collections.Generic.KeyValuePair`2" />。</param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含具有指定键的元素。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 包含具有指定键的元素，则为 true；否则为 false。</returns>
      <param name="keyValuePair">要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中定位的键。</param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>从指定的数组索引开始，将 <see cref="T:System.Collections.ICollection" /> 中的元素复制到一个数组中。</summary>
      <param name="array">一维数组，它是从 <see cref="T:System.Collections.ICollection" /> 中复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.ICollection" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.ICollection" /> 为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>将指定的键/值对从集合中移除。</summary>
      <returns>如果成功移除该元素，则为 true；否则为 false。 如果在原始 <see cref="T:System.Collections.Generic.ICollection`1" /> 中未找到 <paramref name="key" />，则此方法也会返回 false。</returns>
      <param name="keyValuePair">要移除的 <see cref="T:System.Collections.Generic.KeyValuePair`2" />。</param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <summary>向 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中添加指定的键和值。</summary>
      <param name="key">用作要添加的元素的键的对象。</param>
      <param name="value">作为要添加的元素的值的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中已存在具有相同键的元素。</exception>
      <exception cref="T:System.OverflowException">字典已包含最大数目的元素，<see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <summary>从 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中移除带有指定键的元素。</summary>
      <returns>如果成功移除该元素，则为 true；否则为 false。 如果在原始 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中未找到 <paramref name="key" />，则此方法也会返回 false。</returns>
      <param name="key">要移除的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从指定的数组索引开始，将 <see cref="T:System.Collections.ICollection" /> 中的元素复制到一个数组中。</summary>
      <param name="array">一维数组，它是从 <see cref="T:System.Collections.ICollection" /> 中复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度。 - 或 - 源 <see cref="T:System.Collections.ICollection" /> 中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示对 <see cref="T:System.Collections.ICollection" /> 的访问是否与 SyncRoot 保持同步。</summary>
      <returns>如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。 对于 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。 不支持此属性。</summary>
      <returns>始终返回 null。</returns>
      <exception cref="T:System.NotSupportedException">不支持 SyncRoot 属性。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>将指定的键和值添加到字典中。</summary>
      <param name="key">要用作键的对象。</param>
      <param name="value">要用作值的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 所属类型不可分配给 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的键类型。 - 或 - <paramref name="value" /> 所属类型不可赋值给 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的值类型。  - 或 - <see cref="T:System.Collections.Generic.Dictionary`2" /> 中已存在相同键的值。</exception>
      <exception cref="T:System.OverflowException">字典已包含最大数目的元素，<see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.IDictionary`2" /> 是否包含具有指定键的元素。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.IDictionary`2" /> 包含具有指定键的元素，则为 true；否则为 false。</returns>
      <param name="key">要在 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中定位的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>为 <see cref="T:System.Collections.Generic.IDictionary`2" /> 提供 <see cref="T:System.Collections.IDictionaryEnumerator" />。</summary>
      <returns>用于 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的 <see cref="T:System.Collections.IDictionaryEnumerator" />。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.IDictionary`2" /> 是否具有固定大小。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.IDictionary`2" /> 具有固定大小，则为 true；否则为 false。 对于 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.IDictionary`2" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.IDictionary`2" /> 为只读，则为 true；否则为 false。 对于 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>获取或设置与指定的键相关联的值。</summary>
      <returns>与指定键关联的值，如果 <paramref name="key" /> 不在字典中或者 <paramref name="key" /> 属于不能分配给 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 的键类型的类型，则为 null 引用（在 Visual Basic 中为 Nothing）。</returns>
      <param name="key">要获取或设置的值的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentException">正在赋值，<paramref name="key" /> 所属类型不可赋值给 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 的键类型。 - 或 - 正在赋值，<paramref name="key" /> 所属类型不可赋值给 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 的值类型。</exception>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Keys">
      <summary>获取包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的键的 <see cref="T:System.Collections.ICollection" />。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的键。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IDictionary" /> 中移除带有指定键的元素。</summary>
      <param name="key">要移除的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Values">
      <summary>获取包含 <see cref="T:System.Collections.IDictionary" /> 中的值的 <see cref="T:System.Collections.ICollection" />。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 中的值。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 的枚举数。</summary>
      <returns>
        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 的一个枚举数。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.ToArray">
      <summary>将 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中存储的键和值对复制到新数组中。</summary>
      <returns>一个新数组，其中包含从 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 复制的键和值对的快照。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)">
      <summary>尝试将指定的键和值添加到 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中。</summary>
      <returns>如果已将键/值对成功添加到 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中，则为 true。 如果键已存在，则此方法返回 false。</returns>
      <param name="key">要添加的元素的键。</param>
      <param name="value">要添加的元素的值。 该值对于引用类型可以是空引用（在 Visual Basic 中为 Nothing）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OverflowException">字典已包含最大数目的元素，<see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)">
      <summary>尝试从 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 获取与指定的键关联的值。</summary>
      <returns>如果在 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中找到该键，则为 true；否则为 false。</returns>
      <param name="key">要获取的值的键。</param>
      <param name="value">此方法返回时，<paramref name="value" /> 包含 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中具有指定键的对象；如果操作失败，则包含默认值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)">
      <summary>尝试从 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中移除并返回具有指定键的值。</summary>
      <returns>如果成功移除了对象，则为 true；否则为 false。</returns>
      <param name="key">要移除并返回的元素的键。</param>
      <param name="value">此方法返回时，<paramref name="value" /> 包含从 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中移除的对象；如果操作失败，则包含默认值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)">
      <summary>将指定键的现有值与指定值进行比较，如果相等，则用第三个值更新该键。</summary>
      <returns>如果具有 <paramref name="key" /> 的值与 <paramref name="comparisonValue" /> 相等并替换为 <paramref name="newValue" />，则为 true；否则为 false。</returns>
      <param name="key">其值将与 <paramref name="comparisonValue" /> 进行比较并且可能被替换的键。</param>
      <param name="newValue">一个值，当比较结果相等时，将用该值替换具有 <paramref name="key" /> 的元素的值。</param>
      <param name="comparisonValue">与具有 <paramref name="key" /> 的元素的值进行比较的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null 引用。</exception>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.Values">
      <summary>获取包含 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的值的集合。</summary>
      <returns>包含 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的值的 <see cref="T:System.Collections.Generic.ICollection`1" /></returns>
    </member>
    <member name="T:System.Collections.Concurrent.ConcurrentQueue`1">
      <summary>表示线程安全的先进先出 (FIFO) 集合。</summary>
      <typeparam name="T">队列中包含的元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>初始化 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 类的新实例，该类包含从指定集合中复制的元素</summary>
      <param name="collection">其元素被复制到新的 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 中的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)">
      <summary>从指定数组索引开始将 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 元素复制到现有一维 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，用作从 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 所复制的元素的目标数组。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度 - 或 - 源 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 中的元素数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 结尾的可用空间。</exception>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentQueue`1.Count">
      <summary>获取 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 中包含的元素数。</summary>
      <returns>
        <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 中包含的元素个数。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)">
      <summary>将对象添加到 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 的结尾处。</summary>
      <param name="item">要添加到 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 的结尾处的对象。 该值对于引用类型可以是空引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 的枚举数。</summary>
      <returns>可枚举 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 的内容的枚举器。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty">
      <summary>获取一个指示 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 是否为空的值。</summary>
      <returns>如果 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 为空，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)">
      <summary>尝试将一个对象添加到 XXX <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 中。</summary>
      <returns>如果成功添加了对象，则为 true；否则为 false。</returns>
      <param name="item">要添加到 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 的对象。 该值对于引用类型可以是空引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)">
      <summary>尝试从 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 中移除并返回一个对象。</summary>
      <returns>如果成功移除并返回了元素，则为 true；否则为 false。</returns>
      <param name="item">此方法返回时，如果操作成功，则 <paramref name="item" /> 包含所移除的对象。 如果没有可供移除的对象，则不指定该值。</param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的 <see cref="T:System.Array" /> 索引处开始，将 <see cref="T:System.Collections.ICollection" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，用作从 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 所复制的元素的目标数组。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。 - 或 -<paramref name="array" /> 没有从零开始的索引。 - 或 - <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度 - 或 - 源 <see cref="T:System.Collections.ICollection" /> 中的元素数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 结尾的可用空间。 - 或 - 源 <see cref="T:System.Collections.ICollection" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示对 <see cref="T:System.Collections.ICollection" /> 的访问是否与 SyncRoot 保持同步。</summary>
      <returns>如果对 <see cref="T:System.Collections.ICollection" /> 的访问与 SyncRoot 保持同步，则为 true；否则为 false。 对于 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。 不支持此属性。</summary>
      <returns>返回 null（在 Visual Basic 中为 Nothing）。</returns>
      <exception cref="T:System.NotSupportedException">不支持 SyncRoot 属性。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.ToArray">
      <summary>将 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 中存储的元素复制到新数组中。</summary>
      <returns>一个新数组，其中包含从 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 复制的元素的快照。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
      <summary>尝试移除并返回位于 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 开始处的对象。</summary>
      <returns>如果成功移除并返回了 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 开始处的元素，则为 true；否则为 false。</returns>
      <param name="result">此方法返回时，如果操作成功，则 <paramref name="result" /> 包含所移除的对象。 如果没有可供移除的对象，则不指定该值。</param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)">
      <summary>尝试返回 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 开始处的对象但不将其移除。</summary>
      <returns>如果成功返回了对象，则为 true；否则为 false。</returns>
      <param name="result">此方法返回时，<paramref name="result" /> 包含 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 开始处的对象；如果操作失败，则包含未指定的值。</param>
    </member>
    <member name="T:System.Collections.Concurrent.ConcurrentStack`1">
      <summary>表示线程安全的后进先出 (LIFO) 集合。</summary>
      <typeparam name="T">堆栈中包含的元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>初始化 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 类的新实例，该类包含从指定集合中复制的元素</summary>
      <param name="collection">其元素被复制到新的 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 中的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.Clear">
      <summary>从 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 中移除所有对象。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.CopyTo(`0[],System.Int32)">
      <summary>从指定数组索引开始将 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 元素复制到现有一维 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，用作从 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 所复制的元素的目标数组。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度 - 或 - 源 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 中的元素数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 结尾的可用空间。</exception>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentStack`1.Count">
      <summary>获取 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 中包含的元素数。</summary>
      <returns>
        <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 中包含的元素个数。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 的枚举数。</summary>
      <returns>
        <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 的一个枚举数。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentStack`1.IsEmpty">
      <summary>获取一个指示 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 是否为空的值。</summary>
      <returns>如果 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 为空，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.Push(`0)">
      <summary>将对象插入 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 的顶部。</summary>
      <param name="item">要推入到 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 中的对象。 该值对于引用类型可以是空引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[])">
      <summary>自动将多个对象插入 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 的顶部。</summary>
      <param name="items">要推入到 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)">
      <summary>自动将多个对象插入 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 的顶部。</summary>
      <param name="items">要推入到 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 中的对象。</param>
      <param name="startIndex">
        <paramref name="items" /> 中从零开始的偏移量，从此处开始将元素插入到 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 的顶部。</param>
      <param name="count">要插入到 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 的顶部的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="count" /> 为负。 或 <paramref name="startIndex" /> 大于或等于 <paramref name="items" /> 的长度。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> + <paramref name="count" /> 大于 <paramref name="items" /> 的长度。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)">
      <summary>尝试将一个对象添加到 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 中。</summary>
      <returns>如果成功添加了对象，则为 true；否则为 false。</returns>
      <param name="item">要添加到 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 的对象。 该值对于引用类型可以是空引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)">
      <summary>尝试从 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 中移除并返回一个对象。</summary>
      <returns>如果成功移除并返回了元素，则为 true；否则为 false。</returns>
      <param name="item">此方法返回时，如果操作成功，则 <paramref name="item" /> 包含所移除的对象。 如果没有可供移除的对象，则不指定该值。</param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的 <see cref="T:System.Array" /> 索引处开始，将 <see cref="T:System.Collections.ICollection" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，用作从 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 所复制的元素的目标数组。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。 - 或 -<paramref name="array" /> 没有从零开始的索引。 - 或 - <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度 - 或 - 源 <see cref="T:System.Collections.ICollection" /> 中的元素数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 结尾的可用空间。 - 或 - 源 <see cref="T:System.Collections.ICollection" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示对 <see cref="T:System.Collections.ICollection" /> 的访问是否与 SyncRoot 保持同步。</summary>
      <returns>如果对 <see cref="T:System.Collections.ICollection" /> 的访问与 SyncRoot 保持同步，则为 true；否则为 false。 对于 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。 不支持此属性。</summary>
      <returns>返回 null（在 Visual Basic 中为 Nothing）。</returns>
      <exception cref="T:System.NotSupportedException">不支持 SyncRoot 属性。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.ToArray">
      <summary>将 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 中存储的项复制到新数组。</summary>
      <returns>一个新数组，其中包含从 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 复制的元素的快照。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.TryPeek(`0@)">
      <summary>尝试返回 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 顶部的对象但不将其移除。</summary>
      <returns>如果成功返回了对象，则为 true；否则为 false。</returns>
      <param name="result">此方法返回时，<paramref name="result" /> 包含 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 顶部的对象；如果操作失败，则包含未指定的值。</param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.TryPop(`0@)">
      <summary>尝试弹出并返回 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 顶部的对象。</summary>
      <returns>如果成功移除并返回了 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 顶部的元素，则为 true；否则为 false。</returns>
      <param name="result">此方法返回时，如果操作成功，则 <paramref name="result" /> 包含所移除的对象。 如果没有可供移除的对象，则不指定该值。</param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[])">
      <summary>尝试自动弹出并返回 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 顶部的多个对象。</summary>
      <returns>已成功从 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 顶部弹出并插入到 <paramref name="items" /> 中的对象数。</returns>
      <param name="items">要将从 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 顶部弹出的对象添加到的 <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> 是 null 参数（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)">
      <summary>尝试自动弹出并返回 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 顶部的多个对象。</summary>
      <returns>已成功从堆栈顶部弹出并插入到 <paramref name="items" /> 中的对象数。</returns>
      <param name="items">要将从 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 顶部弹出的对象添加到的 <see cref="T:System.Array" />。</param>
      <param name="startIndex">
        <paramref name="items" /> 中从零开始的偏移量，从此处开始插入 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 顶部的元素。</param>
      <param name="count">将从 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 顶部弹出并插入到 <paramref name="items" /> 中的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="count" /> 为负。 或 <paramref name="startIndex" /> 大于或等于 <paramref name="items" /> 的长度。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> + <paramref name="count" /> 大于 <paramref name="items" /> 的长度。</exception>
    </member>
    <member name="T:System.Collections.Concurrent.IProducerConsumerCollection`1">
      <summary>定义供制造者/使用者用来操作线程安全集合的方法。 此接口提供一个统一的表示（为生产者/消费者集合），从而更高级别抽象如 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 可以使用集合作为基础的存储机制。</summary>
      <typeparam name="T">指定集合中的元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)">
      <summary>从指定的索引位置开始，将 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 的元素复制到 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，用作从 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 所复制的元素的目标数组。  该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度 - 或 - 集合中的元素数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 结尾的可用空间。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray">
      <summary>将 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 中包含的元素复制到新数组中。</summary>
      <returns>一个新数组，其中包含从 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 复制的元素。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)">
      <summary>尝试将一个对象添加到 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 中。</summary>
      <returns>如果成功添加了对象，则为 true；否则为 false。</returns>
      <param name="item">要添加到 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> 对于此集合无效。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)">
      <summary>尝试从 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 中移除并返回一个对象。</summary>
      <returns>如果成功移除并返回了对象，则为 true；否则为 false。</returns>
      <param name="item">此方法返回时，如果成功移除并返回了对象，则 <paramref name="item" /> 包含所移除的对象。 如果没有可供移除的对象，则不指定该值。</param>
    </member>
    <member name="T:System.Collections.Concurrent.OrderablePartitioner`1">
      <summary>表示将一个可排序数据源拆分成多个分区的特定方式。</summary>
      <typeparam name="TSource">集合中的元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.OrderablePartitioner`1.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>从派生类中的构造函数进行调用以便使用索引键上指定的约束初始化 <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> 类。</summary>
      <param name="keysOrderedInEachPartition">指示是否按键增加的顺序生成每个分区中的元素。</param>
      <param name="keysOrderedAcrossPartitions">指示前一分区中的元素是否始终排在后一分区中的元素之前。 如果为 true，则分区 0 中的每个元素的顺序键比分区 1 中的任何元素都要小，分区 1 中的每个元素的顺序键比分区 2 中的任何元素都要小，依次类推。</param>
      <param name="keysNormalized">指示是否规范化键。 如果为 true，则所有顺序键为 [0 .. numberOfElements-1]。 如果为 false，顺序键仍必须互不相同，但只考虑其相对顺序，而不考虑其绝对值。</param>
    </member>
    <member name="M:System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions">
      <summary>创建一个可将基础集合分区成可变数目的分区的对象。</summary>
      <returns>一个可针对基础数据源创建分区的对象。</returns>
      <exception cref="T:System.NotSupportedException">该基类不支持动态分区。 它必须在派生类中实现。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions">
      <summary>创建一个可将基础集合分区成可变数目的分区的对象。</summary>
      <returns>一个可针对基础数据源创建分区的对象。</returns>
      <exception cref="T:System.NotSupportedException">此分区程序不支持动态分区。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)">
      <summary>将基础集合分区成指定数目的可排序分区。</summary>
      <returns>一个包含 <paramref name="partitionCount" /> 枚举器的列表。</returns>
      <param name="partitionCount">要创建的分区数。</param>
    </member>
    <member name="M:System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)">
      <summary>将基础集合分区成给定数目的可排序分区。</summary>
      <returns>一个包含 <paramref name="partitionCount" /> 枚举器的列表。</returns>
      <param name="partitionCount">要创建的分区数。</param>
    </member>
    <member name="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized">
      <summary>获取是否规范化顺序键。</summary>
      <returns>如果规范化键，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions">
      <summary>获取前一分区中的元素是否始终排在后一分区中的元素之前。</summary>
      <returns>如果前一分区中的元素始终排在后一分区中的元素之前，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition">
      <summary>获取是否按键增加的顺序生成每个分区中的元素。</summary>
      <returns>如果按键增加的顺序生成每个分区中的元素，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Collections.Concurrent.Partitioner">
      <summary>提供针对数组、列表和可枚举项的常见分区策略。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 实例创建一个可排序分区程序。</summary>
      <returns>基于输入数组的可排序分区程序。</returns>
      <param name="source">要进行分区的可枚举项。</param>
      <typeparam name="TSource">源可枚举项中的元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IList{``0},System.Boolean)">
      <summary>从 <see cref="T:System.Collections.Generic.IList`1" /> 实例创建一个可排序分区程序。</summary>
      <returns>基于输入列表的可排序分区程序。</returns>
      <param name="list">要进行分区的列表。</param>
      <param name="loadBalance">一个布尔值，该值指示创建的分区程序是否应在各分区之间保持动态负载平衡，而不是静态负载平衡。</param>
      <typeparam name="TSource">源列表中的元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32)">
      <summary>创建一个按用户指定的范围划分区块的分区程序。</summary>
      <returns>一个分区程序。</returns>
      <param name="fromInclusive">范围下限（含）。</param>
      <param name="toExclusive">范围上限（不含）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="toExclusive" /> 参数小于或等于 <paramref name="fromInclusive" /> 参数。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32,System.Int32)">
      <summary>创建一个按用户指定的范围划分区块的分区程序。</summary>
      <returns>一个分区程序。</returns>
      <param name="fromInclusive">范围下限（含）。</param>
      <param name="toExclusive">范围上限（不含）。</param>
      <param name="rangeSize">每个子范围的大小。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="toExclusive" /> 参数小于或等于 <paramref name="fromInclusive" /> 参数。 - 或 - <paramref name="rangeSize" /> 参数小于或等于 0。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64)">
      <summary>创建一个按用户指定的范围划分区块的分区程序。</summary>
      <returns>一个分区程序。</returns>
      <param name="fromInclusive">范围下限（含）。</param>
      <param name="toExclusive">范围上限（不含）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="toExclusive" /> 参数小于或等于 <paramref name="fromInclusive" /> 参数。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64,System.Int64)">
      <summary>创建一个按用户指定的范围划分区块的分区程序。</summary>
      <returns>一个分区程序。</returns>
      <param name="fromInclusive">范围下限（含）。</param>
      <param name="toExclusive">范围上限（不含）。</param>
      <param name="rangeSize">每个子范围的大小。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="toExclusive" /> 参数小于或等于 <paramref name="fromInclusive" /> 参数。 - 或 - <paramref name="rangeSize" /> 参数小于或等于 0。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create``1(``0[],System.Boolean)">
      <summary>从 <see cref="T:System.Array" /> 实例创建一个可排序分区程序。</summary>
      <returns>基于输入数组的可排序分区程序。</returns>
      <param name="array">要进行分区的数组。</param>
      <param name="loadBalance">一个布尔值，该值指示创建的分区程序是否应在各分区之间保持动态负载平衡，而不是静态负载平衡。</param>
      <typeparam name="TSource">源数组中的元素的类型。</typeparam>
    </member>
    <member name="T:System.Collections.Concurrent.Partitioner`1">
      <summary>表示将一个数据源拆分成多个分区的特定方式。</summary>
      <typeparam name="TSource">集合中的元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner`1.#ctor">
      <summary>创建新的分区程序实例。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions">
      <summary>创建一个可将基础集合分区成可变数目的分区的对象。</summary>
      <returns>一个可针对基础数据源创建分区的对象。</returns>
      <exception cref="T:System.NotSupportedException">该基类不支持动态分区。 必须在派生类中实现它。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)">
      <summary>将基础集合分区成给定数目的分区。</summary>
      <returns>一个包含 <paramref name="partitionCount" /> 枚举器的列表。</returns>
      <param name="partitionCount">要创建的分区数。</param>
    </member>
    <member name="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions">
      <summary>获取是否可以动态创建附加分区。</summary>
      <returns>如果 <see cref="T:System.Collections.Concurrent.Partitioner`1" /> 可以根据分区请求动态创建分区，则为 true；如果 <see cref="T:System.Collections.Concurrent.Partitioner`1" /> 只能以静态方式分配分区，则为 false。</returns>
    </member>
    <member name="T:System.Collections.Generic.Comparer`1">
      <summary>为 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型接口的实现提供基类。</summary>
      <typeparam name="T">要比较的对象的类型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Generic.Comparer`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)">
      <summary>在派生类中重写时，对同一类型的两个对象执行比较并返回一个值，指示一个对象是小于、等于还是大于另一个对象。</summary>
      <returns>一个有符号整数，指示 <paramref name="x" /> 与 <paramref name="y" /> 的相对值，如下表所示。 值 含义 小于零 <paramref name="x" /> 小于 <paramref name="y" />。 零 <paramref name="x" /> 等于 <paramref name="y" />。 大于零 <paramref name="x" /> 大于 <paramref name="y" />。</returns>
      <param name="x">要比较的第一个对象。</param>
      <param name="y">要比较的第二个对象。</param>
      <exception cref="T:System.ArgumentException">类型 <paramref name="T" /> 没有实现 <see cref="T:System.IComparable`1" /> 泛型接口或 <see cref="T:System.IComparable" /> 接口。</exception>
    </member>
    <member name="P:System.Collections.Generic.Comparer`1.Default">
      <summary>返回由泛型参数指定的类型的默认排序顺序比较器。</summary>
      <returns>继承 <see cref="T:System.Collections.Generic.Comparer`1" /> 并作为 <paramref name="T" /> 类型的排序顺序比较器的对象。</returns>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)">
      <summary>比较两个对象并返回一个值，该值指示一个对象小于、等于还是大于另一个对象。</summary>
      <returns>一个有符号整数，指示 <paramref name="x" /> 与 <paramref name="y" /> 的相对值，如下表所示。 值 含义 小于零 <paramref name="x" /> 小于 <paramref name="y" />。 零 <paramref name="x" /> 等于 <paramref name="y" />。 大于零 <paramref name="x" /> 大于 <paramref name="y" />。</returns>
      <param name="x">要比较的第一个对象。</param>
      <param name="y">要比较的第二个对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> 或 <paramref name="y" /> 所属的类型无法被强制转换为类型 <paramref name="T" />。 - 或 - <paramref name="x" /> 和 <paramref name="y" /> 不实现 <see cref="T:System.IComparable`1" /> 泛型接口或 <see cref="T:System.IComparable" /> 接口。</exception>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2">
      <summary>表示键和值的集合。</summary>
      <typeparam name="TKey">字典中的键的类型。</typeparam>
      <typeparam name="TValue">字典中的值的类型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Generic.Dictionary`2" /> 类的新实例，该实例为空且具有默认的初始容量，并使用键类型的默认相等比较器。</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>初始化 <see cref="T:System.Collections.Generic.Dictionary`2" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中复制的元素并为键类型使用默认的相等比较器。</summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.IDictionary`2" />，它的元素被复制到新的 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> 包含一个或多个重复键。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.Dictionary`2" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中复制的元素并使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.IDictionary`2" />，它的元素被复制到新的 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中。</param>
      <param name="comparer">比较键时要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 实现，或者为 null，以便为键类型使用默认的 <see cref="T:System.Collections.Generic.EqualityComparer`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> 包含一个或多个重复键。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.Dictionary`2" /> 类的新实例，该实例为空且具有默认的初始容量，并使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</summary>
      <param name="comparer">比较键时要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 实现，或者为 null，以便为键类型使用默认的 <see cref="T:System.Collections.Generic.EqualityComparer`1" />。</param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.Generic.Dictionary`2" /> 类的新实例，该实例为空且具有指定的初始容量，并为键类型使用默认的相等比较器。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 可包含的初始元素数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于 0。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.Dictionary`2" /> 类的新实例，该实例为空且具有指定的初始容量，并使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 可包含的初始元素数。</param>
      <param name="comparer">比较键时要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 实现，或者为 null，以便为键类型使用默认的 <see cref="T:System.Collections.Generic.EqualityComparer`1" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于 0。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
      <summary>将指定的键和值添加到字典中。</summary>
      <param name="key">要添加的元素的键。</param>
      <param name="value">要添加的元素的值。 对于引用类型，该值可以为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 中已存在具有相同键的元素。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Clear">
      <summary>从 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中移除所有的键和值。</summary>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Comparer">
      <summary>获取用于确定字典中的键是否相等的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</summary>
      <returns>用于确定当前 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的键是否相等并为键提供哈希值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 泛型接口实现。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)">
      <summary>确定 <see cref="T:System.Collections.Generic.Dictionary`2" /> 是否包含指定的键。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.Dictionary`2" /> 包含具有指定键的元素，则为 true；否则为 false。</returns>
      <param name="key">要在 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中定位的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)">
      <summary>确定 <see cref="T:System.Collections.Generic.Dictionary`2" /> 是否包含特定值。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.Dictionary`2" /> 包含具有指定值的元素，则为 true；否则为 false。</returns>
      <param name="value">要在 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中定位的值。 对于引用类型，该值可以为 null。</param>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Count">
      <summary>获取包含在 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的键/值对的数目。</summary>
      <returns>包含在 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的键/值对的数目。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的枚举数。</summary>
      <returns>用于 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的 <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" /> 结构。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Item(`0)">
      <summary>获取或设置与指定的键相关联的值。</summary>
      <returns>与指定的键相关联的值。 如果找不到指定的键，get 操作便会引发 <see cref="T:System.Collections.Generic.KeyNotFoundException" />，而 set 操作会创建一个具有指定键的新元素。</returns>
      <param name="key">要获取或设置的值的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">已检索该属性，并且集合中不存在 <paramref name="key" />。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Keys">
      <summary>获取包含 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的键的集合。</summary>
      <returns>包含 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的键的 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Remove(`0)">
      <summary>从 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中移除所指定的键的值。</summary>
      <returns>如果成功找到并移除该元素，则为 true；否则为 false。 如果在 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中没有找到 <paramref name="key" />，此方法则返回 false。</returns>
      <param name="key">要移除的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>将指定值添加到具有指定键的 <see cref="T:System.Collections.Generic.ICollection`1" /> 中。</summary>
      <param name="keyValuePair">表示要添加到 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的键和值的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 结构。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyValuePair" /> 的键为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 中已存在具有相同键的元素。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>确定 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含特定的键和值。</summary>
      <returns>如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中找到 <paramref name="keyValuePair" />，则为 true；否则为 false。</returns>
      <param name="keyValuePair">要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中查找的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 结构。</param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>从指定的数组索引开始，将 <see cref="T:System.Collections.Generic.ICollection`1" /> 的元素复制到类型 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的数组中。</summary>
      <param name="array">类型 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的一维数组，是从 <see cref="T:System.Collections.Generic.ICollection`1" /> 复制的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 元素的目标数组。 该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.Generic.ICollection`1" /> 中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示字典是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读，则为 true；否则为 false。 在 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>从字典中移除键和值。</summary>
      <returns>如果成功找到并移除 <paramref name="keyValuePair" /> 所表示的键和值，则为 true；否则为 false。 如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中没有找到 <paramref name="keyValuePair" />，此方法则返回 false。</returns>
      <param name="keyValuePair">表示要从 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中移除的键和值的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 结构。</param>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>获取包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的键的 <see cref="T:System.Collections.Generic.ICollection`1" />。</summary>
      <returns>包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的键的类型 <paramref name="TKey" /> 的 <see cref="T:System.Collections.Generic.ICollection`1" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>获取包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值的 <see cref="T:System.Collections.Generic.ICollection`1" />。</summary>
      <returns>包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值的类型 <paramref name="TValue" /> 的 <see cref="T:System.Collections.Generic.ICollection`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从指定的数组索引开始，将 <see cref="T:System.Collections.Generic.ICollection`1" /> 中的元素复制到一个数组中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.Generic.ICollection`1" /> 复制的元素的目标数组的一维数组。 该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。 - 或 - <paramref name="array" /> 没有从零开始的索引。 - 或 - 源 <see cref="T:System.Collections.Generic.ICollection`1" /> 中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。 - 或 - 源 <see cref="T:System.Collections.Generic.ICollection`1" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。 在 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>将指定的键和值添加到字典中。</summary>
      <param name="key">要用作键的对象。</param>
      <param name="value">要用作值的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 属于不能分配给 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的键类型 <paramref name="TKey" /> 的类型。 - 或 - <paramref name="value" /> 属于不能分配给 <paramref name="TValue" />（<see cref="T:System.Collections.Generic.Dictionary`2" /> 中的值的类型）的类型。 - 或 - <see cref="T:System.Collections.Generic.Dictionary`2" /> 中已存在相同键的值。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IDictionary" /> 是否包含具有指定键的元素。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 包含具有指定键的元素，则为 true；否则为 false。</returns>
      <param name="key">要在 <see cref="T:System.Collections.IDictionary" /> 中查找的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.IDictionary" /> 的 <see cref="T:System.Collections.IDictionaryEnumerator" />。</summary>
      <returns>用于 <see cref="T:System.Collections.IDictionary" /> 的 <see cref="T:System.Collections.IDictionaryEnumerator" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 是否具有固定大小。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 具有固定大小，则为 true；否则为 false。 在 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 是只读的，则为 true；否则为 false。 在 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>获取或设置具有指定键的值。</summary>
      <returns>与指定键关联的值，如果 <paramref name="key" /> 不在字典中或者 <paramref name="key" /> 属于不能分配给 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的键类型 <paramref name="TKey" /> 的类型，则为 null。</returns>
      <param name="key">要获取的值的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">正在分配值，并且 <paramref name="key" /> 属于不能分配给 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的键类型 <paramref name="TKey" /> 的类型。 - 或 - 正在分配值，并且 <paramref name="value" /> 属于不能分配给 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的值类型 <paramref name="TValue" /> 的类型。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys">
      <summary>获取包含 <see cref="T:System.Collections.IDictionary" /> 的键的 <see cref="T:System.Collections.ICollection" />。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 的键。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IDictionary" /> 中移除带有指定键的元素。</summary>
      <param name="key">要移除的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values">
      <summary>获取包含 <see cref="T:System.Collections.IDictionary" /> 中的值的 <see cref="T:System.Collections.ICollection" />。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 中的值。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)">
      <summary>获取与指定的键相关联的值。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.Dictionary`2" /> 包含具有指定键的元素，则为 true；否则为 false。</returns>
      <param name="key">要获取的值的键。</param>
      <param name="value">当此方法返回值时，如果找到该键，便会返回与指定的键相关联的值；否则，则会返回 <paramref name="value" /> 参数的类型默认值。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Values">
      <summary>获取包含 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的值的集合。</summary>
      <returns>包含 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的值的 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />。</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.Enumerator`0">
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator`0.Current">
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator`0.Dispose">
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator`0.MoveNext">
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator`0.System#Collections#IDictionaryEnumerator#Entry">
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator`0.System#Collections#IDictionaryEnumerator#Key">
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator`0.System#Collections#IDictionaryEnumerator#Value">
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator`0.System#Collections#IEnumerator#Current">
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator`0.System#Collections#IEnumerator#Reset">
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.KeyCollection`0">
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection`0.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection`0.CopyTo(`0[],System.Int32)">
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection`0.Count">
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection`0.GetEnumerator">
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection`0.System#Collections#Generic#ICollection{T}#Add(`0)">
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection`0.System#Collections#Generic#ICollection{T}#Clear">
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection`0.System#Collections#Generic#ICollection{T}#Contains(`0)">
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection`0.System#Collections#Generic#ICollection{T}#IsReadOnly">
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection`0.System#Collections#Generic#ICollection{T}#Remove(`0)">
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection`0.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection`0.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection`0.System#Collections#ICollection#IsSynchronized">
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection`0.System#Collections#ICollection#SyncRoot">
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection`0.System#Collections#IEnumerable#GetEnumerator">
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.KeyCollection`0.Enumerator`0">
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection`0.Enumerator`0.Current">
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection`0.Enumerator`0.Dispose">
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection`0.Enumerator`0.MoveNext">
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection`0.Enumerator`0.System#Collections#IEnumerator#Current">
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection`0.Enumerator`0.System#Collections#IEnumerator#Reset">
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.ValueCollection`0">
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection`0.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection`0.CopyTo(`1[],System.Int32)">
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection`0.Count">
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection`0.GetEnumerator">
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection`0.System#Collections#Generic#ICollection{T}#Add(`1)">
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection`0.System#Collections#Generic#ICollection{T}#Clear">
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection`0.System#Collections#Generic#ICollection{T}#Contains(`1)">
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection`0.System#Collections#Generic#ICollection{T}#IsReadOnly">
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection`0.System#Collections#Generic#ICollection{T}#Remove(`1)">
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection`0.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection`0.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection`0.System#Collections#ICollection#IsSynchronized">
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection`0.System#Collections#ICollection#SyncRoot">
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection`0.System#Collections#IEnumerable#GetEnumerator">
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.ValueCollection`0.Enumerator`0">
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection`0.Enumerator`0.Current">
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection`0.Enumerator`0.Dispose">
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection`0.Enumerator`0.MoveNext">
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection`0.Enumerator`0.System#Collections#IEnumerator#Current">
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection`0.Enumerator`0.System#Collections#IEnumerator#Reset">
    </member>
    <member name="T:System.Collections.Generic.EqualityComparer`1">
      <summary>为 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 泛型接口的实现提供基类。</summary>
      <typeparam name="T">要比较的对象的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Generic.EqualityComparer`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Collections.Generic.EqualityComparer`1.Default">
      <summary>返回一个默认的相等比较器，用于比较此泛型参数指定的类型。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.EqualityComparer`1" /> 类的类型为 <paramref name="T" /> 的默认实例。</returns>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)">
      <summary>当在派生类中被重写时，确定两个类型为 <paramref name="T" /> 的对象是否相等。</summary>
      <returns>如果指定的对象相等，则为 true；否则为 false。</returns>
      <param name="x">要比较的第一个对象。</param>
      <param name="y">要比较的第二个对象。</param>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.GetHashCode(`0)">
      <summary>当在派生类中被重写时，用作指定对象的哈希算法和数据结构（如哈希表）的哈希函数。</summary>
      <returns>指定对象的哈希代码。</returns>
      <param name="obj">要为其获取哈希代码的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 的类型为引用类型，<paramref name="obj" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
      <summary>确定指定的对象是否相等。</summary>
      <returns>如果指定的对象相等，则为 true；否则为 false。</returns>
      <param name="x">要比较的第一个对象。</param>
      <param name="y">要比较的第二个对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> 或 <paramref name="y" /> 所属的类型无法被强制转换为类型 <paramref name="T" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
      <summary>返回指定对象的哈希代码。</summary>
      <returns>指定对象的哈希代码。</returns>
      <param name="obj">
        <see cref="T:System.Object" />，将为其返回哈希代码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 的类型为引用类型，<paramref name="obj" /> 为 null。 - 或 - <paramref name="obj" /> 所属的类型无法被强制转换为类型 <paramref name="T" />。</exception>
    </member>
    <member name="T:System.Collections.Generic.ICollection`1">
      <summary>定义操作泛型集合的方法。</summary>
      <typeparam name="T">集合中元素的类型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Add(`0)">
      <summary>将某项添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 中。</summary>
      <param name="item">要添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 的对象。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读。</exception>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Clear">
      <summary>从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读。</exception>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Contains(`0)">
      <summary>确定 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含特定值。</summary>
      <returns>如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中找到 <paramref name="item" />，则为 true；否则为 false。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中定位的对象。</param>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)">
      <summary>从特定的 <see cref="T:System.Array" /> 索引开始，将 <see cref="T:System.Collections.Generic.ICollection`1" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.Generic.ICollection`1" /> 复制的元素的目标的一维 <see cref="T:System.Array" />。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.Generic.ICollection`1" /> 中的元素数目大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
    </member>
    <member name="P:System.Collections.Generic.ICollection`1.Count">
      <summary>获取 <see cref="T:System.Collections.Generic.ICollection`1" /> 中包含的元素数。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> 中包含的元素个数。</returns>
    </member>
    <member name="P:System.Collections.Generic.ICollection`1.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Remove(`0)">
      <summary>从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除特定对象的第一个匹配项。</summary>
      <returns>如果已从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中成功移除 <paramref name="item" />，则为 true；否则为 false。 如果在原始 <see cref="T:System.Collections.Generic.ICollection`1" /> 中没有找到 <paramref name="item" />，该方法也会返回 false。</returns>
      <param name="item">要从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除的对象。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读。</exception>
    </member>
    <member name="T:System.Collections.Generic.IComparer`1">
      <summary>定义类型为比较两个对象而实现的方法。</summary>
      <typeparam name="T">要比较的对象的类型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)">
      <summary>比较两个对象并返回一个值，该值指示一个对象小于、等于还是大于另一个对象。</summary>
      <returns>一个有符号整数，指示 <paramref name="x" /> 与 <paramref name="y" /> 的相对值，如下表所示。 值 含义 小于零 <paramref name="x" /> 小于 <paramref name="y" />。 零 <paramref name="x" /> 等于 <paramref name="y" />。 大于零 <paramref name="x" /> 大于 <paramref name="y" />。</returns>
      <param name="x">要比较的第一个对象。</param>
      <param name="y">要比较的第二个对象。</param>
    </member>
    <member name="T:System.Collections.Generic.IDictionary`2">
      <summary>表示键/值对的泛型集合。</summary>
      <typeparam name="TKey">字典中键的类型。</typeparam>
      <typeparam name="TValue">字典中值的类型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
      <summary>在 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中添加一个带有所提供的键和值的元素。</summary>
      <param name="key">用作要添加的元素的键的对象。</param>
      <param name="value">作为要添加的元素的值的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 中已存在具有相同键的元素。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 为只读。</exception>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
      <summary>确定 <see cref="T:System.Collections.Generic.IDictionary`2" /> 是否包含具有指定键的元素。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.IDictionary`2" /> 包含带有该键的元素，则为 true；否则，为 false。</returns>
      <param name="key">要在 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中定位的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Item(`0)">
      <summary>获取或设置具有指定键的元素。</summary>
      <returns>带有指定键的元素。</returns>
      <param name="key">要获取或设置的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">检索了属性但没有找到 <paramref name="key" />。</exception>
      <exception cref="T:System.NotSupportedException">设置该属性，而且 <see cref="T:System.Collections.Generic.IDictionary`2" /> 为只读。</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Keys">
      <summary>获取包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的键的 <see cref="T:System.Collections.Generic.ICollection`1" />。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象的键。</returns>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
      <summary>从 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中移除带有指定键的元素。</summary>
      <returns>如果该元素已成功移除，则为 true；否则为 false。 如果在原始 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中没有找到 <paramref name="key" />，此方法也会返回 false。</returns>
      <param name="key">要移除的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 为只读。</exception>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
      <summary>获取与指定的键相关联的值。</summary>
      <returns>如果实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象包含具有指定键的元素，则为 true；否则，为 false。</returns>
      <param name="key">要获取其值的键。</param>
      <param name="value">当此方法返回时，如果找到指定键，则返回与该键相关联的值；否则，将返回 <paramref name="value" /> 参数的类型的默认值。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Values">
      <summary>获取包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值的 <see cref="T:System.Collections.Generic.ICollection`1" />。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象中的值。</returns>
    </member>
    <member name="T:System.Collections.Generic.IEnumerable`1">
      <summary>公开枚举数，该枚举数支持在指定类型的集合上进行简单迭代。</summary>
      <typeparam name="T">要枚举的对象的类型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Collections.Generic.IEnumerator`1">
      <summary>支持在泛型集合上进行简单迭代。</summary>
      <typeparam name="T">要枚举的对象的类型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Collections.Generic.IEnumerator`1.Current">
      <summary>获取集合中位于枚举数当前位置的元素。</summary>
      <returns>集合中位于枚举数当前位置的元素。</returns>
    </member>
    <member name="T:System.Collections.Generic.IEqualityComparer`1">
      <summary>定义方法以支持对象的相等比较。</summary>
      <typeparam name="T">要比较的对象的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)">
      <summary>确定指定的对象是否相等。</summary>
      <returns>如果指定的对象相等，则为 true；否则为 false。</returns>
      <param name="x">要比较的第一个类型为 <paramref name="T" /> 的对象。</param>
      <param name="y">要比较的第二个类型为 <paramref name="T" /> 的对象。</param>
    </member>
    <member name="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)">
      <summary>返回指定对象的哈希代码。</summary>
      <returns>指定对象的哈希代码。</returns>
      <param name="obj">
        <see cref="T:System.Object" />，将为其返回哈希代码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 的类型为引用类型，<paramref name="obj" /> 为 null。</exception>
    </member>
    <member name="T:System.Collections.Generic.IList`1">
      <summary>表示可按照索引单独访问的一组对象。</summary>
      <typeparam name="T">列表中元素的类型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.IList`1.IndexOf(`0)">
      <summary>确定 <see cref="T:System.Collections.Generic.IList`1" /> 中特定项的索引。</summary>
      <returns>如果在列表中找到，则为 <paramref name="item" /> 的索引；否则为 -1。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.IList`1" /> 中定位的对象。</param>
    </member>
    <member name="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)">
      <summary>将一个项插入指定索引处的 <see cref="T:System.Collections.Generic.IList`1" />。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="item" />。</param>
      <param name="item">要插入到 <see cref="T:System.Collections.Generic.IList`1" /> 中的对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.Generic.IList`1" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IList`1" /> 为只读。</exception>
    </member>
    <member name="P:System.Collections.Generic.IList`1.Item(System.Int32)">
      <summary>获取或设置位于指定索引处的元素。</summary>
      <returns>位于指定索引处的元素。</returns>
      <param name="index">要获得或设置的元素从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.Generic.IList`1" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">设置该属性，而且 <see cref="T:System.Collections.Generic.IList`1" /> 为只读。</exception>
    </member>
    <member name="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)">
      <summary>移除指定索引处的 <see cref="T:System.Collections.Generic.IList`1" /> 项。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.Generic.IList`1" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IList`1" /> 为只读。</exception>
    </member>
    <member name="T:System.Collections.Generic.KeyNotFoundException">
      <summary>指定用于访问集合中元素的键与集合中的任何键都不匹配时所引发的异常。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor">
      <summary>使用默认属性值初始化 <see cref="T:System.Collections.Generic.KeyNotFoundException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.Collections.Generic.KeyNotFoundException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对导致此异常的内部异常的引用来初始化 <see cref="T:System.Collections.Generic.KeyNotFoundException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Collections.Generic.KeyValuePair`2">
      <summary>定义可设置或检索的键/值对。</summary>
      <typeparam name="TKey">键的类型。</typeparam>
      <typeparam name="TValue">值的类型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.#ctor(`0,`1)">
      <summary>用指定的键和值初始化 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 结构的新实例。</summary>
      <param name="key">每个键/值对中定义的对象。</param>
      <param name="value">与 <paramref name="key" /> 相关联的定义。</param>
    </member>
    <member name="P:System.Collections.Generic.KeyValuePair`2.Key">
      <summary>获取键/值对中的键。</summary>
      <returns>一个 <paramref name="TKey" />，它是 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的键。</returns>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.ToString">
      <summary>使用键和值的字符串表示形式返回 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的字符串表示形式，它包括键和值的字符串表示形式。</returns>
    </member>
    <member name="P:System.Collections.Generic.KeyValuePair`2.Value">
      <summary>获取键/值对中的值。</summary>
      <returns>一个 <paramref name="TValue" />，它是 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的值。</returns>
    </member>
    <member name="T:System.Collections.Generic.List`1">
      <summary>表示可通过索引访问的对象的强类型列表。 提供用于对列表进行搜索、排序和操作的方法。</summary>
      <typeparam name="T">列表中元素的类型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Generic.List`1" /> 类的新实例，该实例为空并且具有默认初始容量。</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.List`1" /> 类的新实例，该实例包含从指定集合复制的元素并且具有足够的容量来容纳所复制的元素。</summary>
      <param name="collection">一个集合，其元素被复制到新列表中。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.Generic.List`1" /> 类的新实例，该实例为空并且具有指定的初始容量。</summary>
      <param name="capacity">新列表最初可以存储的元素数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于 0。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Add(`0)">
      <summary>将对象添加到 <see cref="T:System.Collections.Generic.List`1" /> 的结尾处。</summary>
      <param name="item">要添加到 <see cref="T:System.Collections.Generic.List`1" /> 的末尾处的对象。 对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>将指定集合的元素添加到 <see cref="T:System.Collections.Generic.List`1" /> 的末尾。</summary>
      <param name="collection">一个集合，其元素应被添加到 <see cref="T:System.Collections.Generic.List`1" /> 的末尾。 集合自身不能为 null，但它可以包含为 null 的元素（如果类型 <paramref name="T" /> 为引用类型）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary>使用指定的比较器在已排序 <see cref="T:System.Collections.Generic.List`1" /> 的某个元素范围中搜索元素，并返回该元素从零开始的索引。</summary>
      <returns>如果找到 <paramref name="item" />，则为已排序的 <see cref="T:System.Collections.Generic.List`1" /> 中 <paramref name="item" /> 的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="item" /> 的第一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.Collections.Generic.List`1.Count" /> 的按位求补。</returns>
      <param name="index">要搜索的范围从零开始的起始索引。</param>
      <param name="count">要搜索的范围的长度。</param>
      <param name="item">要定位的对象。 对于引用类型，该值可以为 null。</param>
      <param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现，或者为 null，表示使用默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。 - 或 - <paramref name="count" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 不表示 <see cref="T:System.Collections.Generic.List`1" /> 中的有效范围。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 null，且默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <paramref name="T" /> 类型的 <see cref="T:System.IComparable`1" /> 泛型接口或 <see cref="T:System.IComparable" /> 接口的实现。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(`0)">
      <summary>使用默认的比较器在整个已排序的 <see cref="T:System.Collections.Generic.List`1" /> 中搜索元素，并返回该元素从零开始的索引。</summary>
      <returns>如果找到 <paramref name="item" />，则为已排序的 <see cref="T:System.Collections.Generic.List`1" /> 中 <paramref name="item" /> 的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="item" /> 的第一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.Collections.Generic.List`1.Count" /> 的按位求补。</returns>
      <param name="item">要定位的对象。 对于引用类型，该值可以为 null。</param>
      <exception cref="T:System.InvalidOperationException">默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <paramref name="T" /> 类型的 <see cref="T:System.IComparable`1" /> 泛型接口或 <see cref="T:System.IComparable" /> 接口的实现。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>使用指定的比较器在整个已排序的 <see cref="T:System.Collections.Generic.List`1" /> 中搜索元素，并返回该元素从零开始的索引。</summary>
      <returns>如果找到 <paramref name="item" />，则为已排序的 <see cref="T:System.Collections.Generic.List`1" /> 中 <paramref name="item" /> 的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="item" /> 的第一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.Collections.Generic.List`1.Count" /> 的按位求补。</returns>
      <param name="item">要定位的对象。 对于引用类型，该值可以为 null。</param>
      <param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现。 - 或 - 为 null 以使用默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" />。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 null，且默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <paramref name="T" /> 类型的 <see cref="T:System.IComparable`1" /> 泛型接口或 <see cref="T:System.IComparable" /> 接口的实现。</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Capacity">
      <summary>获取或设置该内部数据结构在不调整大小的情况下能够容纳的元素总数。</summary>
      <returns>在需要调整大小之前 <see cref="T:System.Collections.Generic.List`1" /> 能够容纳的元素的数目。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Collections.Generic.List`1.Capacity" /> 设置为小于 <see cref="P:System.Collections.Generic.List`1.Count" /> 的值。</exception>
      <exception cref="T:System.OutOfMemoryException">系统中没有足够的可用内存。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Clear">
      <summary>从 <see cref="T:System.Collections.Generic.List`1" /> 中移除所有元素。</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Contains(`0)">
      <summary>确定某元素是否在 <see cref="T:System.Collections.Generic.List`1" /> 中。</summary>
      <returns>如果在 <see cref="T:System.Collections.Generic.List`1" /> 中找到 <paramref name="item" />，则为 true，否则为 false。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.List`1" /> 中定位的对象。 对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>将一定范围的元素从 <see cref="T:System.Collections.Generic.List`1" /> 复制到兼容的一维数组中，从目标数组的指定索引位置开始放置。</summary>
      <param name="index">源 <see cref="T:System.Collections.Generic.List`1" /> 中复制开始位置的从零开始的索引。</param>
      <param name="array">作为从 <see cref="T:System.Collections.Generic.List`1" /> 复制的元素的目标位置的一维 <see cref="T:System.Array" />。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <param name="count">要复制的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。 - 或 - <paramref name="arrayIndex" /> 小于 0。 - 或 - <paramref name="count" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 等于或大于源 <see cref="T:System.Collections.Generic.List`1" /> 的 <see cref="P:System.Collections.Generic.List`1.Count" />。 - 或 - 从 <paramref name="index" /> 到源 <see cref="T:System.Collections.Generic.List`1" /> 的末尾的元素数大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 的末尾的可用空间。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(`0[])">
      <summary>将整个 <see cref="T:System.Collections.Generic.List`1" /> 复制到兼容的一维数组中，从目标数组的开头开始放置。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.Generic.List`1" /> 复制的元素的目标位置的一维 <see cref="T:System.Array" />。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.Generic.List`1" /> 中的元素数大于目标 <paramref name="array" /> 可包含的元素数。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
      <summary>将整个 <see cref="T:System.Collections.Generic.List`1" /> 复制到兼容的一维数组中，从目标数组的指定索引位置开始放置。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.Generic.List`1" /> 复制的元素的目标位置的一维 <see cref="T:System.Array" />。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.Generic.List`1" /> 中的元素数目大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Count">
      <summary>获取 <see cref="T:System.Collections.Generic.List`1" /> 中实际包含的元素数。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.List`1" /> 中实际包含的元素数。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
      <summary>确定 <see cref="T:System.Collections.Generic.List`1" /> 是否包含与指定谓词所定义的条件相匹配的元素。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.List`1" /> 包含一个或多个与指定谓词所定义的条件相匹配的元素，则为 true；否则为 false。</returns>
      <param name="match">
        <see cref="T:System.Predicate`1" /> 委托，用于定义要搜索的元素应满足的条件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回整个 <see cref="T:System.Collections.Generic.List`1" /> 中的第一个匹配元素。</summary>
      <returns>如果找到与指定谓词定义的条件匹配的第一个元素，则为该元素；否则为类型 <paramref name="T" /> 的默认值。</returns>
      <param name="match">
        <see cref="T:System.Predicate`1" /> 委托，用于定义要搜索的元素的条件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
      <summary>检索与指定谓词定义的条件匹配的所有元素。</summary>
      <returns>如果找到，则为一个 <see cref="T:System.Collections.Generic.List`1" />，其中包含与指定谓词所定义的条件相匹配的所有元素；否则为一个空 <see cref="T:System.Collections.Generic.List`1" />。</returns>
      <param name="match">
        <see cref="T:System.Predicate`1" /> 委托，用于定义要搜索的元素应满足的条件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>搜索与指定谓词所定义的条件相匹配的一个元素，并返回 <see cref="T:System.Collections.Generic.List`1" /> 中从指定的索引开始、包含指定元素个数的元素范围内第一个匹配项的从零开始的索引。</summary>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
      <param name="startIndex">从零开始的搜索的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" /> 委托，用于定义要搜索的元素的条件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 不在 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引范围内。 - 或 - <paramref name="count" /> 小于 0。 - 或 - <paramref name="startIndex" /> 和 <paramref name="count" /> 未指定 <see cref="T:System.Collections.Generic.List`1" /> 中的有效部分。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回 <see cref="T:System.Collections.Generic.List`1" /> 中从指定索引到最后一个元素的元素范围内第一个匹配项的从零开始的索引。</summary>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
      <param name="startIndex">从零开始的搜索的起始索引。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" /> 委托，用于定义要搜索的元素的条件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 不在 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引范围内。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回整个 <see cref="T:System.Collections.Generic.List`1" /> 中第一个匹配元素的从零开始的索引。</summary>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
      <param name="match">
        <see cref="T:System.Predicate`1" /> 委托，用于定义要搜索的元素的条件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回整个 <see cref="T:System.Collections.Generic.List`1" /> 中的最后一个匹配元素。</summary>
      <returns>如果找到，则为与指定谓词所定义的条件相匹配的最后一个元素；否则为类型 <paramref name="T" /> 的默认值。</returns>
      <param name="match">
        <see cref="T:System.Predicate`1" /> 委托，用于定义要搜索的元素的条件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回 <see cref="T:System.Collections.Generic.List`1" /> 中包含指定元素个数、到指定索引结束的元素范围内最后一个匹配项的从零开始的索引。</summary>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" /> 委托，用于定义要搜索的元素的条件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 不在 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引范围内。 - 或 - <paramref name="count" /> 小于 0。 - 或 - <paramref name="startIndex" /> 和 <paramref name="count" /> 未指定 <see cref="T:System.Collections.Generic.List`1" /> 中的有效部分。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary>搜索与由指定谓词定义的条件相匹配的元素，并返回 <see cref="T:System.Collections.Generic.List`1" /> 中从第一个元素到指定索引的元素范围内最后一个匹配项的从零开始的索引。</summary>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" /> 委托，用于定义要搜索的元素的条件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 不在 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引范围内。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回整个 <see cref="T:System.Collections.Generic.List`1" /> 中最后一个匹配元素的从零开始的索引。</summary>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
      <param name="match">
        <see cref="T:System.Predicate`1" /> 委托，用于定义要搜索的元素的条件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Generic.List`1" /> 的枚举数。</summary>
      <returns>用于 <see cref="T:System.Collections.Generic.List`1" /> 的 <see cref="T:System.Collections.Generic.List`1.Enumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
      <summary>创建源 <see cref="T:System.Collections.Generic.List`1" /> 中的元素范围的浅表副本。</summary>
      <returns>源 <see cref="T:System.Collections.Generic.List`1" /> 中的元素范围的浅表副本。</returns>
      <param name="index">范围开始处的从零开始的 <see cref="T:System.Collections.Generic.List`1" /> 索引。</param>
      <param name="count">范围中的元素数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。 - 或 - <paramref name="count" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 不表示 <see cref="T:System.Collections.Generic.List`1" /> 中元素的有效范围。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0)">
      <summary>搜索指定的对象，并返回整个 <see cref="T:System.Collections.Generic.List`1" /> 中第一个匹配项的从零开始的索引。</summary>
      <returns>如果在整个 <see cref="T:System.Collections.Generic.List`1" /> 中找到 <paramref name="item" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.List`1" /> 中定位的对象。 对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
      <summary>搜索指定的对象，并返回 <see cref="T:System.Collections.Generic.List`1" /> 中从指定索引到最后一个元素的元素范围内第一个匹配项的从零开始的索引。</summary>
      <returns>如果在 <see cref="T:System.Collections.Generic.List`1" /> 中从 <paramref name="index" /> 到最后一个元素的元素范围内找到 <paramref name="item" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.List`1" /> 中定位的对象。 对于引用类型，该值可以为 null。</param>
      <param name="index">从零开始的搜索的起始索引。 空列表中 0（零）为有效值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不在 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引范围内。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary>搜索指定的对象，并返回 <see cref="T:System.Collections.Generic.List`1" /> 中从指定的索引开始并包含指定的元素数的元素范围内第一个匹配项的从零开始的索引。</summary>
      <returns>如果在 <see cref="T:System.Collections.Generic.List`1" /> 中从 <paramref name="index" /> 开始并包含 <paramref name="count" /> 个元素的元素范围内找到 <paramref name="item" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.List`1" /> 中定位的对象。 对于引用类型，该值可以为 null。</param>
      <param name="index">从零开始的搜索的起始索引。 空列表中 0（零）为有效值。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不在 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引范围内。 - 或 - <paramref name="count" /> 小于 0。 - 或 - <paramref name="index" /> 和 <paramref name="count" /> 未指定 <see cref="T:System.Collections.Generic.List`1" /> 中的有效部分。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
      <summary>将元素插入 <see cref="T:System.Collections.Generic.List`1" /> 的指定索引处。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="item" />。</param>
      <param name="item">要插入的对象。 对于引用类型，该值可以为 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。 - 或 - <paramref name="index" /> 大于 <see cref="P:System.Collections.Generic.List`1.Count" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>将集合中的某个元素插入 <see cref="T:System.Collections.Generic.List`1" /> 的指定索引处。</summary>
      <param name="index">应在此处插入新元素的从零开始的索引。</param>
      <param name="collection">一个集合，应将其元素插入到 <see cref="T:System.Collections.Generic.List`1" /> 中。 集合自身不能为 null，但它可以包含为 null 的元素（如果类型 <paramref name="T" /> 为引用类型）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。 - 或 - <paramref name="index" /> 大于 <see cref="P:System.Collections.Generic.List`1.Count" />。</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Item(System.Int32)">
      <summary>获取或设置位于指定索引处的元素。</summary>
      <returns>位于指定索引处的元素。</returns>
      <param name="index">要获得或设置的元素从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。 - 或 - <paramref name="index" /> 等于或大于 <see cref="P:System.Collections.Generic.List`1.Count" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
      <summary>搜索指定的对象，并返回整个 <see cref="T:System.Collections.Generic.List`1" /> 中最后一个匹配项的从零开始的索引。</summary>
      <returns>如果在整个 <see cref="T:System.Collections.Generic.List`1" /> 中找到 <paramref name="item" /> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.List`1" /> 中定位的对象。 对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
      <summary>搜索指定的对象，并返回 <see cref="T:System.Collections.Generic.List`1" /> 中从第一个元素到指定索引的元素范围内最后一个匹配项的从零开始的索引。</summary>
      <returns>如果在 <see cref="T:System.Collections.Generic.List`1" /> 中从第一个元素到 <paramref name="index" /> 的元素范围内找到 <paramref name="item" /> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.List`1" /> 中定位的对象。 对于引用类型，该值可以为 null。</param>
      <param name="index">向后搜索的从零开始的起始索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不在 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引范围内。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>搜索指定的对象，并返回 <see cref="T:System.Collections.Generic.List`1" /> 中包含指定的元素数并在指定索引处结束的元素范围内最后一个匹配项的从零开始的索引。</summary>
      <returns>如果在 <see cref="T:System.Collections.Generic.List`1" /> 中包含 <paramref name="count" /> 个元素、在 <paramref name="index" /> 处结尾的元素范围内找到 <paramref name="item" /> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.List`1" /> 中定位的对象。 对于引用类型，该值可以为 null。</param>
      <param name="index">向后搜索的从零开始的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不在 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引范围内。 - 或 - <paramref name="count" /> 小于 0。 - 或 - <paramref name="index" /> 和 <paramref name="count" /> 未指定 <see cref="T:System.Collections.Generic.List`1" /> 中的有效部分。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Remove(`0)">
      <summary>从 <see cref="T:System.Collections.Generic.List`1" /> 中移除特定对象的第一个匹配项。</summary>
      <returns>如果成功移除 <paramref name="item" />，则为 true；否则为 false。 如果在 <see cref="T:System.Collections.Generic.List`1" /> 中没有找到 <paramref name="item" />，该方法也会返回 false。</returns>
      <param name="item">要从 <see cref="T:System.Collections.Generic.List`1" /> 中移除的对象。 对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
      <summary>移除与指定的谓词所定义的条件相匹配的所有元素。</summary>
      <returns>从 <see cref="T:System.Collections.Generic.List`1" /> 中移除的元素的数目。</returns>
      <param name="match">
        <see cref="T:System.Predicate`1" /> 委托，用于定义要移除的元素应满足的条件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
      <summary>移除 <see cref="T:System.Collections.Generic.List`1" /> 的指定索引处的元素。</summary>
      <param name="index">要移除的元素的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。 - 或 - <paramref name="index" /> 等于或大于 <see cref="P:System.Collections.Generic.List`1.Count" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
      <summary>从 <see cref="T:System.Collections.Generic.List`1" /> 中移除一定范围的元素。</summary>
      <param name="index">要移除的元素的范围从零开始的起始索引。</param>
      <param name="count">要移除的元素数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。 - 或 - <paramref name="count" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 不表示 <see cref="T:System.Collections.Generic.List`1" /> 中元素的有效范围。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Reverse">
      <summary>将整个 <see cref="T:System.Collections.Generic.List`1" /> 中元素的顺序反转。</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
      <summary>将指定范围中元素的顺序反转。</summary>
      <param name="index">要反转的范围的从零开始的起始索引。</param>
      <param name="count">要反转的范围内的元素数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。 - 或 - <paramref name="count" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 不表示 <see cref="T:System.Collections.Generic.List`1" /> 中元素的有效范围。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort">
      <summary>使用默认比较器对整个 <see cref="T:System.Collections.Generic.List`1" /> 中的元素进行排序。</summary>
      <exception cref="T:System.InvalidOperationException">默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <paramref name="T" /> 类型的 <see cref="T:System.IComparable`1" /> 泛型接口或 <see cref="T:System.IComparable" /> 接口的实现。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>使用指定的比较器对整个 <see cref="T:System.Collections.Generic.List`1" /> 中的元素进行排序。</summary>
      <param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现，或者为 null，表示使用默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" />。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 null，且默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <paramref name="T" /> 类型的 <see cref="T:System.IComparable`1" /> 泛型接口或 <see cref="T:System.IComparable" /> 接口的实现。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> 的实现导致排序时出现错误。 例如，将某个项与其自身进行比较时，<paramref name="comparer" /> 可能不返回 0。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
      <summary>使用指定的 <see cref="T:System.Comparison`1" /> 对整个 <see cref="T:System.Collections.Generic.List`1" /> 中的元素进行排序。</summary>
      <param name="comparison">比较元素时要使用的 <see cref="T:System.Comparison`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">在排序过程中，<paramref name="comparison" /> 的实现会导致错误。 例如，将某个项与其自身进行比较时，<paramref name="comparison" /> 可能不返回 0。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>使用指定的比较器对 <see cref="T:System.Collections.Generic.List`1" /> 中某个范围内的元素进行排序。</summary>
      <param name="index">要排序的范围的从零开始的起始索引。</param>
      <param name="count">要排序的范围的长度。</param>
      <param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现，或者为 null，表示使用默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。 - 或 - <paramref name="count" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 未指定 <see cref="T:System.Collections.Generic.List`1" /> 中的有效范围。 - 或 - <paramref name="comparer" /> 的实现导致排序时出现错误。 例如，将某个项与其自身进行比较时，<paramref name="comparer" /> 可能不返回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 null，且默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <paramref name="T" /> 类型的 <see cref="T:System.IComparable`1" /> 泛型接口或 <see cref="T:System.IComparable" /> 接口的实现。</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读，则为 true；否则为 false。 在 <see cref="T:System.Collections.Generic.List`1" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回一个循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的 <see cref="T:System.Array" /> 索引处开始，将 <see cref="T:System.Collections.ICollection" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标的一维 <see cref="T:System.Array" />。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。 - 或 - <paramref name="array" /> 没有从零开始的索引。 - 或 - 源 <see cref="T:System.Collections.ICollection" /> 中的元素数目大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。 - 或 - 源 <see cref="T:System.Collections.ICollection" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。 在 <see cref="T:System.Collections.Generic.List`1" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。 在 <see cref="T:System.Collections.Generic.List`1" /> 的默认实现中，此属性始终返回当前实例。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
      <summary>将某项添加到 <see cref="T:System.Collections.IList" /> 中。</summary>
      <returns>新元素的插入位置。</returns>
      <param name="item">要添加到 <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> 属于不能分配给 <see cref="T:System.Collections.IList" /> 的类型。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
      <returns>如果在 <see cref="T:System.Collections.IList" /> 中找到 <paramref name="item" />，则为 true；否则为 false。</returns>
      <param name="item">要在 <see cref="T:System.Collections.IList" /> 中查找的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 中特定项的索引。</summary>
      <returns>如果在列表中找到，则为 <paramref name="item" /> 的索引；否则为 -1。</returns>
      <param name="item">要在 <see cref="T:System.Collections.IList" /> 中查找的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> 属于不能分配给 <see cref="T:System.Collections.IList" /> 的类型。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>将一个项插入指定索引处的 <see cref="T:System.Collections.IList" />。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="item" />。</param>
      <param name="item">要插入 <see cref="T:System.Collections.IList" /> 的对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> 属于不能分配给 <see cref="T:System.Collections.IList" /> 的类型。</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 具有固定大小，则为 true；否则为 false。 在 <see cref="T:System.Collections.Generic.List`1" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 为只读，则为 true；否则为 false。 在 <see cref="T:System.Collections.Generic.List`1" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置位于指定索引处的元素。</summary>
      <returns>位于指定索引处的元素。</returns>
      <param name="index">要获得或设置的元素从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">已设置属性，且 <paramref name="value" /> 属于不能对 <see cref="T:System.Collections.IList" /> 赋值的类型。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除特定对象的第一个匹配项。</summary>
      <param name="item">要从 <see cref="T:System.Collections.IList" /> 中移除的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> 属于不能分配给 <see cref="T:System.Collections.IList" /> 的类型。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.ToArray">
      <summary>将 <see cref="T:System.Collections.Generic.List`1" /> 的元素复制到新数组中。</summary>
      <returns>一个数组，它包含 <see cref="T:System.Collections.Generic.List`1" /> 的元素的副本。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.TrimExcess">
      <summary>将容量设置为 <see cref="T:System.Collections.Generic.List`1" /> 中的实际元素数目（如果该数目小于某个阈值）。</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
      <summary>确定是否 <see cref="T:System.Collections.Generic.List`1" /> 中的每个元素都与指定的谓词所定义的条件相匹配。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.List`1" /> 中的每个元素都与指定的谓词所定义的条件相匹配，则为 true；否则为 false。 如果列表不包含任何元素，则返回值为 true。</returns>
      <param name="match">
        <see cref="T:System.Predicate`1" /> 委托，定义要据以检查元素的条件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 null。</exception>
    </member>
    <member name="T:System.Collections.Generic.List`1.Enumerator`0">
    </member>
    <member name="P:System.Collections.Generic.List`1.Enumerator`0.Current">
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator`0.Dispose">
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator`0.MoveNext">
    </member>
    <member name="P:System.Collections.Generic.List`1.Enumerator`0.System#Collections#IEnumerator#Current">
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator`0.System#Collections#IEnumerator#Reset">
    </member>
    <member name="T:System.Collections.ObjectModel.Collection`1">
      <summary>提供泛型集合的基类。</summary>
      <typeparam name="T">集合中的元素类型。</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.#ctor">
      <summary>初始化为空的 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>将 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 类的新实例初始化为指定列表的包装。</summary>
      <param name="list">由新的集合包装的列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Add(`0)">
      <summary>将对象添加到 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的结尾处。</summary>
      <param name="item">要添加到 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的末尾处的对象。 对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Clear">
      <summary>从 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中移除所有元素。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.ClearItems">
      <summary>从 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中移除所有元素。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Contains(`0)">
      <summary>确定某元素是否在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中。</summary>
      <returns>如果在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中找到 <paramref name="item" />，则为 true；否则为 false。</returns>
      <param name="item">要在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中定位的对象。 对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)">
      <summary>从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 复制到兼容的一维 <see cref="T:System.Array" />。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 复制的元素的目标位置的一维 <see cref="T:System.Array" />。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Count">
      <summary>获取 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中实际包含的元素数。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中实际包含的元素数。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的枚举数。</summary>
      <returns>用于 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)">
      <summary>搜索指定的对象，并返回整个 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中第一个匹配项的从零开始的索引。</summary>
      <returns>如果在整个 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中找到 <paramref name="item" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.List`1" /> 中定位的对象。 对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)">
      <summary>将元素插入 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的指定索引处。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="item" />。</param>
      <param name="item">要插入的对象。 对于引用类型，该值可以为 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。 - 或 - <paramref name="index" /> 大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)">
      <summary>将元素插入 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的指定索引处。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="item" />。</param>
      <param name="item">要插入的对象。 对于引用类型，该值可以为 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。 - 或 - <paramref name="index" /> 大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)">
      <summary>获取或设置位于指定索引处的元素。</summary>
      <returns>位于指定索引处的元素。</returns>
      <param name="index">要获得或设置的元素从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。 - 或 - <paramref name="index" /> 等于或大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Items">
      <summary>获取 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 周围的 <see cref="T:System.Collections.Generic.IList`1" /> 包装。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> 周围的 <see cref="T:System.Collections.Generic.IList`1" /> 包装。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Remove(`0)">
      <summary>从 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中移除特定对象的第一个匹配项。</summary>
      <returns>如果成功移除 <paramref name="item" />，则为 true；否则为 false。 如果在原始 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中没有找到 <paramref name="item" />，此方法也会返回 false。</returns>
      <param name="item">要从 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中移除的对象。 对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)">
      <summary>移除 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的指定索引处的元素。</summary>
      <param name="index">要移除的元素的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。 - 或 - <paramref name="index" /> 等于或大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)">
      <summary>移除 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的指定索引处的元素。</summary>
      <param name="index">要移除的元素的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。 - 或 - <paramref name="index" /> 等于或大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)">
      <summary>替换指定索引处的元素。</summary>
      <param name="index">待替换元素的从零开始的索引。</param>
      <param name="item">位于指定索引处的元素的新值。 对于引用类型，该值可以为 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。 - 或 - <paramref name="index" /> 大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读，则为 true；否则为 false。 在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的 <see cref="T:System.Array" /> 索引处开始，将 <see cref="T:System.Collections.ICollection" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标的一维 <see cref="T:System.Array" />。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。 - 或 - <paramref name="array" /> 没有从零开始的索引。 - 或 - 源 <see cref="T:System.Collections.ICollection" /> 中的元素数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 结尾处之间的可用空间。 - 或 - 源 <see cref="T:System.Collections.ICollection" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。 在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。 在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的默认实现中，此属性始终返回当前实例。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)">
      <summary>将某项添加到 <see cref="T:System.Collections.IList" /> 中。</summary>
      <returns>新元素的插入位置。</returns>
      <param name="value">要添加到 <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 属于不能分配给 <see cref="T:System.Collections.IList" /> 的类型。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
      <returns>如果在 <see cref="T:System.Collections.IList" /> 中找到 <see cref="T:System.Object" />，则为 true；否则为 false。</returns>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中查找的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 属于不能分配给 <see cref="T:System.Collections.IList" /> 的类型。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 中特定项的索引。</summary>
      <returns>如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中查找的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 属于不能分配给 <see cref="T:System.Collections.IList" /> 的类型。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>将某项插入 <see cref="T:System.Collections.IList" /> 中指定的索引处。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="value" />。</param>
      <param name="value">要插入 <see cref="T:System.Collections.IList" /> 中的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 属于不能分配给 <see cref="T:System.Collections.IList" /> 的类型。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 具有固定大小，则为 true；否则为 false。 在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 为只读，则为 true；否则为 false。 在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置位于指定索引处的元素。</summary>
      <returns>位于指定索引处的元素。</returns>
      <param name="index">要获得或设置的元素从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">已设置属性，且 <paramref name="value" /> 属于不能对 <see cref="T:System.Collections.IList" /> 赋值的类型。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除特定对象的第一个匹配项。</summary>
      <param name="value">要从 <see cref="T:System.Collections.IList" /> 移除的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 属于不能分配给 <see cref="T:System.Collections.IList" /> 的类型。</exception>
    </member>
    <member name="T:System.Collections.ObjectModel.KeyedCollection`2">
      <summary>提供集合键嵌入在值中的集合的抽象基类。</summary>
      <typeparam name="TKey">集合中的键的类型。</typeparam>
      <typeparam name="TItem">集合中的项的类型。</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
      <summary>初始化使用默认相等比较器的 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>初始化使用指定相等比较器的 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 类的新实例。</summary>
      <param name="comparer">比较键时要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 泛型接口的实现，如果为 null，则使用从 <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /> 获取的该类型的键的默认相等比较器。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 类的新实例，该新实例使用指定的相等比较器并在超过指定阈值时创建一个查找字典。</summary>
      <param name="comparer">比较键时要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 泛型接口的实现，如果为 null，则使用从 <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /> 获取的该类型的键的默认相等比较器。</param>
      <param name="dictionaryCreationThreshold">在不创建查找字典的情况下集合可容纳的元素的数目（0 表示添加第一项时创建查找字典）；或者为 -1，表示指定永远不会创建查找字典。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dictionaryCreationThreshold" /> 小于 -1。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
      <summary>更改与查找字典中指定元素相关联的键。</summary>
      <param name="item">要更改其键的元素。</param>
      <param name="newKey">
        <paramref name="item" /> 的新键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> 为 null。 - 或 - <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">未找到 <paramref name="item" />。 - 或 - <paramref name="key" /> 在 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 中已存在。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
      <summary>从 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 中移除所有元素。</summary>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer">
      <summary>获取用于确定集合中的键是否相等的泛型相等比较器。</summary>
      <returns>用于确定集合中的键是否相等的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 泛型接口的实现。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
      <summary>确定集合是否包含具有指定键的元素。</summary>
      <returns>如果 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 包含具有指定键的元素，则为 true；否则为 false。</returns>
      <param name="key">要在 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 中定位的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
      <summary>获取 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 的查找字典。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 的查找字典（如果存在），否则为 null。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
      <summary>在派生类中实现时，将从指定元素提取键。</summary>
      <returns>指定元素的键。</returns>
      <param name="item">从中提取键的元素。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
      <summary>将元素插入 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 的指定索引处。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="item" />。</param>
      <param name="item">要插入的对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。 - 或 - <paramref name="index" /> 大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
      <summary>获取具有指定键的元素。</summary>
      <returns>带有指定键的元素。 如果未找到具有指定键的元素，则引发异常。</returns>
      <param name="key">要获取的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">集合中不存在具有指定键的元素。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
      <summary>从 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 中移除带有指定键的元素。</summary>
      <returns>如果该元素已成功移除，则为 true；否则为 false。 如果在 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 中没有找到 <paramref name="key" />，此方法也会返回 false。</returns>
      <param name="key">要移除的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
      <summary>移除 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 的指定索引处的元素。</summary>
      <param name="index">要移除的元素的索引。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
      <summary>使用指定项替换指定索引处的项。</summary>
      <param name="index">要替换的项的从零开始的索引。</param>
      <param name="item">新项。</param>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyCollection`1">
      <summary>提供泛型只读集合的基类。</summary>
      <typeparam name="T">集合中的元素类型。</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>初始化 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类的新实例，该实例是指定列表周围的只读包装。</summary>
      <param name="list">要包装的列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)">
      <summary>确定某元素是否在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 中。</summary>
      <returns>如果在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 中找到 <paramref name="value" />，则为 true，否则为 false。</returns>
      <param name="value">要在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 中定位的对象。 对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
      <summary>从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 复制到兼容的一维 <see cref="T:System.Array" />。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 复制的元素的目标位置的一维 <see cref="T:System.Array" />。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Count">
      <summary>获取包含在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 实例中的元素数。</summary>
      <returns>包含在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 实例中的元素数。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的枚举数。</summary>
      <returns>用于 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)">
      <summary>搜索指定的对象，并返回整个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 中第一个匹配项的从零开始的索引。</summary>
      <returns>如果在整个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 中找到 <paramref name="item" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
      <param name="value">要在 <see cref="T:System.Collections.Generic.List`1" /> 中定位的对象。 对于引用类型，该值可以为 null。</param>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Item(System.Int32)">
      <summary>获取指定索引处的元素。</summary>
      <returns>位于指定索引处的元素。</returns>
      <param name="index">要获取的元素的索引（索引从零开始）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。 - 或 - <paramref name="index" /> 等于或大于 <see cref="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Count" />。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Items">
      <summary>返回 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 包装的 <see cref="T:System.Collections.Generic.IList`1" />。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 包装的 <see cref="T:System.Collections.Generic.IList`1" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>将某项添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 中。 此实现总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 的对象。</param>
      <exception cref="T:System.NotSupportedException">总是引发。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除所有项。 此实现总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">总是引发。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读，则为 true；否则为 false。 在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的默认实现中，此属性始终返回 true。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除特定对象的第一个匹配项。 此实现总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>如果已从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中成功移除了 <paramref name="value" />，则为 true；否则为 false。</returns>
      <param name="value">要从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除的对象。</param>
      <exception cref="T:System.NotSupportedException">总是引发。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>将一个项插入指定索引处的 <see cref="T:System.Collections.Generic.IList`1" />。 此实现总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="value" />。</param>
      <param name="value">要插入到 <see cref="T:System.Collections.Generic.IList`1" /> 中的对象。</param>
      <exception cref="T:System.NotSupportedException">总是引发。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>获取或设置位于指定索引处的元素。</summary>
      <returns>位于指定索引处的元素。</returns>
      <param name="index">要获得或设置的元素从零开始的索引。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>移除指定索引处的 <see cref="T:System.Collections.Generic.IList`1" /> 项。 此实现总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">总是引发。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的 <see cref="T:System.Array" /> 索引处开始，将 <see cref="T:System.Collections.ICollection" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标的一维 <see cref="T:System.Array" />。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。 - 或 - <paramref name="array" /> 没有从零开始的索引。 - 或 - 源 <see cref="T:System.Collections.ICollection" /> 中的元素数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 结尾处之间的可用空间。 - 或 - 源 <see cref="T:System.Collections.ICollection" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。 在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。 在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的默认实现中，此属性始终返回当前实例。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add(System.Object)">
      <summary>将某项添加到 <see cref="T:System.Collections.IList" /> 中。 此实现总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>新元素的插入位置。</returns>
      <param name="value">要添加到 <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">总是引发。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除所有项。 此实现总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">总是引发。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
      <returns>如果在 <see cref="T:System.Collections.IList" /> 中找到 <see cref="T:System.Object" />，则为 true；否则为 false。</returns>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中查找的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 所属的类型不是泛型类型参数 <paramref name="T" /> 的指定类型。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 中特定项的索引。</summary>
      <returns>如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中查找的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 所属的类型不是泛型类型参数 <paramref name="T" /> 的指定类型。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>将一个项插入指定索引处的 <see cref="T:System.Collections.IList" />。 此实现总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="value" />。</param>
      <param name="value">要插入 <see cref="T:System.Collections.IList" /> 中的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">总是引发。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 具有固定大小，则为 true；否则为 false。 在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的默认实现中，此属性始终返回 true。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 为只读，则为 true；否则为 false。 在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的默认实现中，此属性始终返回 true。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置位于指定索引处的元素。</summary>
      <returns>位于指定索引处的元素。</returns>
      <param name="index">要获取的元素的索引（索引从零开始）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">如果设置了该属性，则总是引发此异常。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除特定对象的第一个匹配项。 此实现总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要从 <see cref="T:System.Collections.IList" /> 移除的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">总是引发。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除指定索引处的 <see cref="T:System.Collections.IList" /> 项。 此实现总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">总是引发。</exception>
    </member>
    <member name="T:System.Diagnostics.ConditionalAttribute">
      <summary>指示编译器应忽略方法调用或属性，除非已定义指定的条件编译符号。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.ConditionalAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.ConditionalAttribute" /> 类的新实例。</summary>
      <param name="conditionString">一个字符串，它指定与此属性关联的区分大小写的条件编译符号。</param>
    </member>
    <member name="P:System.Diagnostics.ConditionalAttribute.ConditionString">
      <summary>获取与 <see cref="T:System.Diagnostics.ConditionalAttribute" /> 属性相关的条件编译符号。</summary>
      <returns>一个字符串，它指定与 <see cref="T:System.Diagnostics.ConditionalAttribute" /> 属性关联的区分大小写的条件编译符号。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.DebuggableAttribute">
      <summary>修改运行库实时 (JIT) 调试的代码生成。 此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.DebuggableAttribute.#ctor(System.Diagnostics.DebuggableAttribute.DebuggingModes)">
      <summary>使用为实时 (JIT) 编译器指定的调试模式来初始化 <see cref="T:System.Diagnostics.DebuggableAttribute" /> 类的新实例。</summary>
      <param name="modes">
        <see cref="T:System.Diagnostics.DebuggableAttribute.DebuggingModes" /> 值的按位组合，它指定 JIT 编译器的调试模式。</param>
    </member>
    <member name="T:System.Diagnostics.DebuggableAttribute.DebuggingModes">
      <summary>指定实时 (JIT) 编译器的调试模式。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default">
      <summary>指示实时 (JIT) 编译器使用其默认行为，包括启用优化、禁用“编辑并继续”支持以及使用符号存储区序列点（如果存在）。 在 .NET Framework 2.0 版本中，始终生成 JIT 跟踪信息，即方法中本机代码偏移量的 Microsoft 中间语言 (MSIL) 偏移量。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations">
      <summary>禁用编译器为使输出文件更小、更快、更有效而执行的优化。 优化会导致输出文件中的代码重排，这会增加调试的难度。 在调试时通常应禁用优化。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.EnableEditAndContinue">
      <summary>启用“编辑并继续”。 “编辑并继续”允许在程序处于中断模式时对源代码进行更改。 能否编辑代码并继续取决于具体的编译器。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints">
      <summary>使用隐式 MSIL 序列点，而非程序数据库 (PDB) 序列点。 符号信息中的每个源行通常至少对应一个 Microsoft 中间语言 (MSIL) 偏移量。 当实时 (JIT) 编译器要编译方法时，它请求分析服务提供应保留的 MSIL 偏移量列表。 这些 MSIL 偏移量称为序列点。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.None">
      <summary>在 .NET Framework 2.0 版本中，始终生成 JIT 跟踪信息，并且此标志与 <see cref="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default" />（<see cref="P:System.Diagnostics.DebuggableAttribute.IsJITTrackingEnabled" /> 属性为 false 除外）具有相同效果，这在 2.0 版本中没有任何意义。</summary>
    </member>
    <member name="T:System.Diagnostics.Debugger">
      <summary>启用与调试器的通讯。 此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Debugger.Break">
      <summary>发出信号表示连接调试器的断点。</summary>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.UIPermission" /> 未设置为在调试器中设置断点。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.Debugger.IsAttached">
      <summary>获取一个值，它指示调试器是否已附加到进程。</summary>
      <returns>如果调试器已连接，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Debugger.Launch">
      <summary>启动调试器并将其连接到进程。</summary>
      <returns>如果启动成功或者调试器已连接，则为 true；否则为 false。</returns>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.UIPermission" /> 未设置为启动调试器。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.Diagnostics.DebuggerBrowsableAttribute">
      <summary>确定是否在调试器变量窗口中显示成员以及如何显示成员。 此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.DebuggerBrowsableAttribute.#ctor(System.Diagnostics.DebuggerBrowsableState)">
      <summary>初始化 <see cref="T:System.Diagnostics.DebuggerBrowsableAttribute" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Diagnostics.DebuggerBrowsableState" /> 值之一，指定成员的显示方式。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="state" /> 不是 <see cref="T:System.Diagnostics.DebuggerBrowsableState" /> 值之一。</exception>
    </member>
    <member name="P:System.Diagnostics.DebuggerBrowsableAttribute.State">
      <summary>获取属性的显示状态。</summary>
      <returns>
        <see cref="T:System.Diagnostics.DebuggerBrowsableState" /> 值之一。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.DebuggerBrowsableState">
      <summary>指定调试器的显示方式。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.DebuggerBrowsableState.Collapsed">
      <summary>以折叠方式显示元素。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggerBrowsableState.Never">
      <summary>从不显示元素。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggerBrowsableState.RootHidden">
      <summary>不显示根元素；如果元素是项的集合或数组，则显示子元素。</summary>
    </member>
    <member name="T:System.Diagnostics.DebuggerDisplayAttribute">
      <summary>确定类或字段在调试器的变量窗口中的显示方式。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.DebuggerDisplayAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.DebuggerDisplayAttribute" /> 类的新实例。</summary>
      <param name="value">要在值列中为该类型的实例显示的字符串；空字符串 ("") 将使值列隐藏。</param>
    </member>
    <member name="P:System.Diagnostics.DebuggerDisplayAttribute.Name">
      <summary>获取或设置要在调试器的变量窗口中显示的名称。</summary>
      <returns>要在调试器的变量窗口中显示的名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.DebuggerDisplayAttribute.Target">
      <summary>获取或设置该属性的目标类型。</summary>
      <returns>该特性的目标类型。</returns>
      <exception cref="T:System.ArgumentNullException">将 <see cref="P:System.Diagnostics.DebuggerDisplayAttribute.Target" /> 设置为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.DebuggerDisplayAttribute.TargetTypeName">
      <summary>获取或设置该属性的目标类型的名称。</summary>
      <returns>该属性的目标类型的名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.DebuggerDisplayAttribute.Type">
      <summary>获取或设置要在调试器的变量窗口的类型列中显示的字符串。</summary>
      <returns>要在调试器的变量窗口的类型列中显示的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.DebuggerDisplayAttribute.Value">
      <summary>获取要在调试器变量窗口的值列中显示的字符串。</summary>
      <returns>要在调试器变量窗口的值列中显示的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.DebuggerHiddenAttribute">
      <summary>指定 <see cref="T:System.Diagnostics.DebuggerHiddenAttribute" />。 此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.DebuggerHiddenAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.DebuggerHiddenAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Diagnostics.DebuggerNonUserCodeAttribute">
      <summary>标识不属于应用程序用户代码的类型或成员。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.DebuggerNonUserCodeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.DebuggerNonUserCodeAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Diagnostics.DebuggerStepThroughAttribute">
      <summary>指示调试器逐句通过代码，而不是进入并单步执行代码。 此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.DebuggerStepThroughAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.DebuggerStepThroughAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Diagnostics.DebuggerTypeProxyAttribute">
      <summary>指定类型的显示代理。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.DebuggerTypeProxyAttribute.#ctor(System.String)">
      <summary>使用代理类型名称初始化 <see cref="T:System.Diagnostics.DebuggerTypeProxyAttribute" /> 类的新实例。</summary>
      <param name="typeName">代理类型的类型名称。</param>
    </member>
    <member name="M:System.Diagnostics.DebuggerTypeProxyAttribute.#ctor(System.Type)">
      <summary>将使用此类型代理的 <see cref="T:System.Diagnostics.DebuggerTypeProxyAttribute" /> 类的新实例初始化。</summary>
      <param name="type">代理类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="P:System.Diagnostics.DebuggerTypeProxyAttribute.ProxyTypeName">
      <summary>获取代理类型的类型名称。</summary>
      <returns>代理类型的类型名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.DebuggerTypeProxyAttribute.Target">
      <summary>获取或设置属性的目标类型。</summary>
      <returns>特性的目标类型。</returns>
      <exception cref="T:System.ArgumentNullException">将 <see cref="P:System.Diagnostics.DebuggerTypeProxyAttribute.Target" /> 设置为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.DebuggerTypeProxyAttribute.TargetTypeName">
      <summary>获取或设置目标类型的名称。</summary>
      <returns>目标类型的名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute">
      <summary>取消报告特定的静态分析工具规则冲突，允许一个代码项目上应用多个取消报告设置。</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute" /> 类的新实例，同时指定静态分析工具的类别和分析规则的标识符。</summary>
      <param name="category">该属性的类别。</param>
      <param name="checkId">应用该属性的分析工具规则的标识符。</param>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.Category">
      <summary>获取标识特性分类的类别。</summary>
      <returns>标识特性的类别。</returns>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.CheckId">
      <summary>获取要取消的静态分析工具规则的标识符。</summary>
      <returns>要取消的静态分析工具规则的标识符。</returns>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.Justification">
      <summary>获取或设置用于取消代码分析消息的规则。</summary>
      <returns>用于取消消息的规则。</returns>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.MessageId">
      <summary>获取或设置扩展排除条件的可选参数。</summary>
      <returns>一个包含扩展的排除条件的字符串。</returns>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.Scope">
      <summary>获取或设置与属性相关的代码的范围。</summary>
      <returns>与属性相关的代码的范围。</returns>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.Target">
      <summary>获取或设置表示属性目标的完全限定路径。</summary>
      <returns>表示属性目标的完全限定路径。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.Contract">
      <summary>包含用于表示程序协定（如前置条件、后置条件和对象固定）的静态方法。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)">
      <summary>检查条件；如果条件为 false，则遵循为分析器设置的升级策略。</summary>
      <param name="condition">要测试的条件表达式。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
      <summary>检查条件；如果条件为 false，则遵循由分析器设置的升级策略，并显示指定的消息。</summary>
      <param name="condition">要测试的条件表达式。</param>
      <param name="userMessage">在不满足条件时要显示的消息。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)">
      <summary>指示代码分析工具假设指定的条件为 true（即使无法静态地证明该条件始终为 true）。</summary>
      <param name="condition">假设为 true 的条件表达式。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
      <summary>指示代码分析工具假设某个条件为 true（即使无法静态地证明该条件始终为 true），并在假设失败时显示一条消息。</summary>
      <param name="condition">假设为 true 的条件表达式。</param>
      <param name="userMessage">假设失败时要发布的消息。</param>
    </member>
    <member name="E:System.Diagnostics.Contracts.Contract.ContractFailed">
      <summary>协定失败时发生。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
      <summary>当方法的协定仅包含 if-then-throw 形式的前置条件时，标记协定部分的结尾。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
      <summary>为封闭方法或属性指定一个后置条件协定。</summary>
      <param name="condition">要测试的条件表达式。 该表达式可以包括 <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" />、<see cref="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)" /> 和 <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" /> 值。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
      <summary>为提供的退出条件指定后置条件协定，并指定条件为 false 时要显示的消息。</summary>
      <param name="condition">要测试的条件表达式。 该表达式可以包括 <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" /> 和 <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" /> 值。</param>
      <param name="userMessage">表达式不为 true 时要显示的消息。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
      <summary>基于提供的异常和条件为封闭方法或属性指定一个后置条件协定。</summary>
      <param name="condition">要测试的条件表达式。</param>
      <typeparam name="TException">引发后置条件检查的异常的类型。</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
      <summary>基于提供的异常和条件为封闭方法或属性指定后置条件协定，并指定条件为 false 时要显示的消息。</summary>
      <param name="condition">要测试的条件表达式。</param>
      <param name="userMessage">表达式为 false 时要显示的消息。</param>
      <typeparam name="TException">引发后置条件检查的异常的类型。</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary>确定函数中是否存在某个元素集合中的元素。</summary>
      <returns>当且仅当 <paramref name="predicate" /> 对于 <paramref name="collection" /> 中的 <paramref name="T" /> 类型的任何元素都返回 true 时，才为 true。</returns>
      <param name="collection">将从中提取 <paramref name="T" /> 类型的元素以将其传递给 <paramref name="predicate" /> 的集合。</param>
      <param name="predicate">用于计算 <paramref name="collection" /> 中某个元素的函数。</param>
      <typeparam name="T">
        <paramref name="collection" /> 中包含的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary>确定指定的测试对某个整数范围中的任何整数是否为 true。</summary>
      <returns>如果 <paramref name="predicate" /> 对于从 <paramref name="fromInclusive" /> 开始到 <paramref name="toExclusive" /> - 1 的范围内的任何整数都返回 true，则为 true。</returns>
      <param name="fromInclusive">要传递给 <paramref name="predicate" /> 的第一个整数。</param>
      <param name="toExclusive">要传递给 <paramref name="predicate" /> 的最后一个整数加一。</param>
      <param name="predicate">用于计算指定范围内整数的任何值的函数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="toExclusive " />小于 <paramref name="fromInclusive" />。</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary>确定函数中是否存在某个集合中的所有元素。</summary>
      <returns>当且仅当 <paramref name="predicate" /> 对于 <paramref name="collection" /> 中的 <paramref name="T" /> 类型的所有元素都返回 true 时，才为 true。</returns>
      <param name="collection">将从中提取 <paramref name="T" /> 类型的元素以将其传递给 <paramref name="predicate" /> 的集合。</param>
      <param name="predicate">用于计算 <paramref name="collection" /> 中所有元素是否存在的函数。</param>
      <typeparam name="T">
        <paramref name="collection" /> 中包含的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary>确定某个特定条件是否对指定范围内的所有整数都有效。</summary>
      <returns>如果 <paramref name="predicate" /> 对于从 <paramref name="fromInclusive" /> 开始到 <paramref name="toExclusive" /> - 1 的范围内的所有整数都返回 true，则为 true。</returns>
      <param name="fromInclusive">要传递给 <paramref name="predicate" /> 的第一个整数。</param>
      <param name="toExclusive">要传递给 <paramref name="predicate" /> 的最后一个整数加一。</param>
      <param name="predicate">要计算其中是否存在指定范围内的整数的函数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="toExclusive " />小于 <paramref name="fromInclusive" />。</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
      <summary>为封闭方法或属性指定一个固定的协定。</summary>
      <param name="condition">要测试的条件表达式。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
      <summary>为封闭方法或属性指定一个不变的协定，并在该协定的条件失败时显示一条消息。</summary>
      <param name="condition">要测试的条件表达式。</param>
      <param name="userMessage">条件为 false 时要显示的消息。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
      <summary>表示方法或属性开始时的值。</summary>
      <returns>一个方法或属性开始处的参数或字段的值。</returns>
      <param name="value">要表示的值（字段或参数）。</param>
      <typeparam name="T">值的类型。</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
      <summary>为封闭方法或属性指定一个前置条件协定，并在该协定的条件失败时引发异常。</summary>
      <param name="condition">要测试的条件表达式。</param>
      <typeparam name="TException">条件为 false 时要引发的异常。</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
      <summary>为封闭方法或属性指定一个前置条件协定。</summary>
      <param name="condition">要测试的条件表达式。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
      <summary>为封闭方法或属性指定一个前置条件协定，并在该协定的条件失败时显示一条消息。</summary>
      <param name="condition">要测试的条件表达式。</param>
      <param name="userMessage">条件为 false 时要显示的消息。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
      <summary>为封闭方法或属性指定一个前置条件协定，并在该协定的条件失败时引发异常，其中包含提供的消息。</summary>
      <param name="condition">要测试的条件表达式。</param>
      <param name="userMessage">条件为 false 时要显示的消息。</param>
      <typeparam name="TException">条件为 false 时要引发的异常。</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Result``1">
      <summary>表示一个方法或属性的返回值。</summary>
      <returns>封闭方法或属性的返回值。</returns>
      <typeparam name="T">封闭方法或属性的返回值的类型。</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
      <summary>表示从一个方法返回时 out 参数的最终（输出）值。</summary>
      <returns>out 参数的输出值。</returns>
      <param name="value">out 参数。</param>
      <typeparam name="T">out 参数的类型。</typeparam>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassAttribute">
      <summary>指定一个单独的类型包含此类型的代码协定。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Diagnostics.Contracts.ContractClassAttribute" /> 类的新实例。</summary>
      <param name="typeContainingContracts">包含此类型的代码协定的类型。</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassAttribute.TypeContainingContracts">
      <summary>获取包含此类型的代码协定的类型。</summary>
      <returns>包含此类型的代码协定的类型。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassForAttribute">
      <summary>指定一个类是某个类型的协定。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassForAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Diagnostics.Contracts.ContractClassForAttribute" /> 类的新实例，并指定使用当前类作为协定的类型。</summary>
      <param name="typeContractsAreFor">使用当前类作为协定的类型。</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassForAttribute.TypeContractsAreFor">
      <summary>获取此代码协定应用于的类型。</summary>
      <returns>此协定应用于的类型。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailedEventArgs">
      <summary>为 <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> 事件提供方法和数据。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.#ctor(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
      <summary>为 <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> 事件提供数据。</summary>
      <param name="failureKind">用于指定失败的协定的枚举值之一。</param>
      <param name="message">事件的消息。</param>
      <param name="condition">事件的条件。</param>
      <param name="originalException">导致事件的异常。</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Condition">
      <summary>获取协定失败的条件。</summary>
      <returns>失败的条件。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.FailureKind">
      <summary>获取失败的协定的类型。</summary>
      <returns>用于指定失败的协定的类型的枚举值之一。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled">
      <summary>指示是否已处理 <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> 事件。</summary>
      <returns>如果事件已被处理，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Message">
      <summary>获取描述 <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> 事件的消息。</summary>
      <returns>描述事件的消息。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.OriginalException">
      <summary>获取导致 <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> 事件的原始异常。</summary>
      <returns>导致事件的异常。</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled">
      <summary>将 <see cref="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled" /> 属性设置为 true。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind">
      <summary>将 <see cref="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind" /> 属性设置为 true。</summary>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind">
      <summary>指示是否应该应用代码协定升级策略。</summary>
      <returns>若为 true，则应用升级策略；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailureKind">
      <summary>指定失败的协定的类型。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assert">
      <summary>一个失败的 <see cref="Overload:System.Diagnostics.Contracts.Contract.Assert" /> 协定。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assume">
      <summary>一个失败的 <see cref="Overload:System.Diagnostics.Contracts.Contract.Assume" /> 协定。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Invariant">
      <summary>一个失败的 <see cref="Overload:System.Diagnostics.Contracts.Contract.Invariant" /> 协定。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Postcondition">
      <summary>一个失败的 <see cref="Overload:System.Diagnostics.Contracts.Contract.Ensures" /> 协定。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.PostconditionOnException">
      <summary>一个失败的 <see cref="Overload:System.Diagnostics.Contracts.Contract.EnsuresOnThrow" /> 协定。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Precondition">
      <summary>一个失败的 <see cref="Overload:System.Diagnostics.Contracts.Contract.Requires" /> 协定。</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute">
      <summary>将一个方法标记为某个类的固定方法。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractInvariantMethodAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute">
      <summary>指定在某个字段的可见性低于方法时可在方法协定中使用该字段。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute" /> 类的新实例。</summary>
      <param name="name">要应用于字段的属性名称。</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.Name">
      <summary>获取要应用于字段的属性名称。</summary>
      <returns>要应用于字段的属性名称。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute">
      <summary>指定一个程序集是包含协定的引用程序集。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute">
      <summary>标识没有运行时行为的成员。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractVerificationAttribute">
      <summary>指示分析工具假定程序集、类型或成员的正确性，而不执行静态验证。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractVerificationAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Diagnostics.Contracts.ContractVerificationAttribute" /> 类的新实例。</summary>
      <param name="value">若为 true，则需要验证；否则为 false。</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractVerificationAttribute.Value">
      <summary>获取指示是否验证目标的协定的值。</summary>
      <returns>如果需要验证，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.PureAttribute">
      <summary>指示一个类型或方法为纯类型或纯方法，即它不进行任何可视的状态更改。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.PureAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.Contracts.PureAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.Internal.ContractHelper">
      <summary>提供二进制重写工具用来处理协定失败的方法。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Internal.ContractHelper.RaiseContractFailedEvent(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
      <summary>由二进制重写工具用来激活默认失败行为。</summary>
      <returns>如果事件已经过处理且不应触发失败，则为空引用（在 Visual Basic 中为 Nothing）；否则返回本地化的失败消息。</returns>
      <param name="failureKind">失败的类型。</param>
      <param name="userMessage">其他用户信息。</param>
      <param name="conditionText">对导致失败的条件的说明。</param>
      <param name="innerException">导致当前异常的内部异常。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="failureKind" /> 不是有效的 <see cref="T:System.Diagnostics.Contracts.ContractFailureKind" /> 值。</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Internal.ContractHelper.TriggerFailure(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.String,System.Exception)">
      <summary>触发默认失败行为。</summary>
      <param name="kind">失败的类型。</param>
      <param name="displayMessage">要显示的消息。</param>
      <param name="userMessage">其他用户信息。</param>
      <param name="conditionText">对导致失败的条件的说明。</param>
      <param name="innerException">导致当前异常的内部异常。</param>
    </member>
    <member name="T:System.Globalization.Calendar">
      <summary>将时间分成段来表示，如分成星期、月和年。</summary>
    </member>
    <member name="M:System.Globalization.Calendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.Calendar" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)">
      <summary>返回与指定 <see cref="T:System.DateTime" /> 相距指定天数的 <see cref="T:System.DateTime" />。</summary>
      <returns>将指定天数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <param name="time">
        <see cref="T:System.DateTime" />，将向其添加天数。</param>
      <param name="days">要添加的天数。</param>
      <exception cref="T:System.ArgumentException">得到的 <see cref="T:System.DateTime" /> 超出了此日历支持的范围。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="days" /> 超出了 <see cref="T:System.DateTime" /> 返回值支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)">
      <summary>返回与指定 <see cref="T:System.DateTime" /> 相距指定小时数的 <see cref="T:System.DateTime" />。</summary>
      <returns>将指定小时数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <param name="time">
        <see cref="T:System.DateTime" />，将向其添加小时数。</param>
      <param name="hours">要添加的小时数。</param>
      <exception cref="T:System.ArgumentException">得到的 <see cref="T:System.DateTime" /> 超出了此日历支持的范围。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="hours" /> 超出了 <see cref="T:System.DateTime" /> 返回值支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)">
      <summary>返回与指定 <see cref="T:System.DateTime" /> 相距指定毫秒数的 <see cref="T:System.DateTime" />。</summary>
      <returns>将指定毫秒数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <param name="time">要添加毫秒的 <see cref="T:System.DateTime" />。</param>
      <param name="milliseconds">要添加的毫秒数。</param>
      <exception cref="T:System.ArgumentException">得到的 <see cref="T:System.DateTime" /> 超出了此日历支持的范围。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="milliseconds" /> 超出了 <see cref="T:System.DateTime" /> 返回值支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)">
      <summary>返回与指定的 <see cref="T:System.DateTime" /> 相距指定分钟数的 <see cref="T:System.DateTime" />。</summary>
      <returns>将指定分钟数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <param name="time">
        <see cref="T:System.DateTime" />，将向其添加分钟数。</param>
      <param name="minutes">要添加的分钟数。</param>
      <exception cref="T:System.ArgumentException">得到的 <see cref="T:System.DateTime" /> 超出了此日历支持的范围。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minutes" /> 超出了 <see cref="T:System.DateTime" /> 返回值支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)">
      <summary>当在派生类中重写时，将返回与指定的 <see cref="T:System.DateTime" /> 相距指定月数的 <see cref="T:System.DateTime" />。</summary>
      <returns>将指定的月数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <param name="time">
        <see cref="T:System.DateTime" />，将向其添加月数。</param>
      <param name="months">要添加的月数。</param>
      <exception cref="T:System.ArgumentException">得到的 <see cref="T:System.DateTime" /> 超出了此日历支持的范围。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 超出了 <see cref="T:System.DateTime" /> 返回值支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)">
      <summary>返回与指定 <see cref="T:System.DateTime" /> 相距指定秒数的 <see cref="T:System.DateTime" />。</summary>
      <returns>将指定的秒数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <param name="time">
        <see cref="T:System.DateTime" />，将向其添加秒数。</param>
      <param name="seconds">要添加的秒数。</param>
      <exception cref="T:System.ArgumentException">得到的 <see cref="T:System.DateTime" /> 超出了此日历支持的范围。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="seconds" /> 超出了 <see cref="T:System.DateTime" /> 返回值支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)">
      <summary>返回与指定 <see cref="T:System.DateTime" /> 相距指定周数的 <see cref="T:System.DateTime" />。</summary>
      <returns>将指定周数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <param name="time">
        <see cref="T:System.DateTime" />，将向其添加星期数。</param>
      <param name="weeks">要添加的星期数。</param>
      <exception cref="T:System.ArgumentException">得到的 <see cref="T:System.DateTime" /> 超出了此日历支持的范围。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="weeks" /> 超出了 <see cref="T:System.DateTime" /> 返回值支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)">
      <summary>当在派生类中重写时，将返回与指定的 <see cref="T:System.DateTime" /> 相距指定年数的 <see cref="T:System.DateTime" />。</summary>
      <returns>将指定年数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <param name="time">
        <see cref="T:System.DateTime" />，将向其添加年数。</param>
      <param name="years">要添加的年数。</param>
      <exception cref="T:System.ArgumentException">得到的 <see cref="T:System.DateTime" /> 超出了此日历支持的范围。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="years" /> 超出了 <see cref="T:System.DateTime" /> 返回值支持的范围。</exception>
    </member>
    <member name="F:System.Globalization.Calendar.CurrentEra">
      <summary>表示当前日历的当前纪元。</summary>
    </member>
    <member name="P:System.Globalization.Calendar.Eras">
      <summary>当在派生类中重写时，获取当前日历中的纪元列表。</summary>
      <returns>表示当前日历中的纪元的整数数组。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetDayOfMonth(System.DateTime)">
      <summary>当在派生类中重写时，将返回指定 <see cref="T:System.DateTime" /> 中的日期是该月的几号。</summary>
      <returns>一个正整数，表示 <paramref name="time" /> 参数中的月中日期。</returns>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.Calendar.GetDayOfWeek(System.DateTime)">
      <summary>当在派生类中重写时，将返回指定 <see cref="T:System.DateTime" /> 中的日期是星期几。</summary>
      <returns>一个 <see cref="T:System.DayOfWeek" /> 值，表示 <paramref name="time" /> 参数中的周中日期。</returns>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)">
      <summary>当在派生类中重写时，将返回指定 <see cref="T:System.DateTime" /> 中的日期是该年中的第几天。</summary>
      <returns>一个正整数，表示 <paramref name="time" /> 参数中的年中日期。</returns>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)">
      <summary>返回当前纪元的指定月份和年份中的天数。</summary>
      <returns>当前纪元中指定年份的指定月份中的天数。</returns>
      <param name="year">表示年份的整数。</param>
      <param name="month">一个表示月份的正整数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。 - 或 - <paramref name="month" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>当在派生类中重写时，返回指定月份、纪元年份中的天数。</summary>
      <returns>指定纪元中指定年份的指定月份中的天数。</returns>
      <param name="year">表示年份的整数。</param>
      <param name="month">一个表示月份的正整数。</param>
      <param name="era">表示纪元的整数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。 - 或 - <paramref name="month" /> 超出了日历支持的范围。 - 或 - <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInYear(System.Int32)">
      <summary>返回当前纪元的指定年份中的天数。</summary>
      <returns>当前纪元中指定年份的天数。</returns>
      <param name="year">表示年份的整数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>当在派生类中重写时，返回指定纪元年份中的天数。</summary>
      <returns>指定纪元中指定年份的天数。</returns>
      <param name="year">表示年份的整数。</param>
      <param name="era">表示纪元的整数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。 - 或 - <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetEra(System.DateTime)">
      <summary>当在派生类中重写时，将返回指定的 <see cref="T:System.DateTime" /> 中的纪元。</summary>
      <returns>表示 <paramref name="time" /> 中的纪元的整数。</returns>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.Calendar.GetHour(System.DateTime)">
      <summary>返回指定的 <see cref="T:System.DateTime" /> 中的小时值。</summary>
      <returns>0 与 23 之间的一个整数，它表示 <paramref name="time" /> 中的小时。</returns>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>计算指定纪元年份的闰月。</summary>
      <returns>一个正整数，表示指定纪元年份中的闰月。 - 或 - 如果此日历不支持闰月，或者 <paramref name="year" /> 和 <paramref name="era" /> 参数未指定闰年，则为零。</returns>
      <param name="year">年份。</param>
      <param name="era">纪元。</param>
    </member>
    <member name="M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)">
      <summary>返回指定的 <see cref="T:System.DateTime" /> 中的毫秒值。</summary>
      <returns>一个介于 0 到 999 之间的双精度浮点数字，表示 <paramref name="time" /> 参数中的毫秒数。</returns>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.Calendar.GetMinute(System.DateTime)">
      <summary>返回指定的 <see cref="T:System.DateTime" /> 中的分钟值。</summary>
      <returns>0 到 59 之间的一个整数，它表示 <paramref name="time" /> 中的分钟值。</returns>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.Calendar.GetMonth(System.DateTime)">
      <summary>当在派生类中重写时，将返回指定的 <see cref="T:System.DateTime" /> 中的月份。</summary>
      <returns>一个正整数，表示 <paramref name="time" /> 中的月份。</returns>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.Calendar.GetMonthsInYear(System.Int32)">
      <summary>返回当前纪元中指定年份的月数。</summary>
      <returns>当前纪元中指定年份的月数。</returns>
      <param name="year">表示年份的整数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>当在派生类中重写时，将返回指定纪元中指定年份的月数。</summary>
      <returns>指定纪元中指定年份的月数。</returns>
      <param name="year">表示年份的整数。</param>
      <param name="era">表示纪元的整数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。 - 或 - <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetSecond(System.DateTime)">
      <summary>返回指定的 <see cref="T:System.DateTime" /> 中的秒值。</summary>
      <returns>0 到 59 之间的一个整数，它表示 <paramref name="time" /> 中的秒数。</returns>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>返回一年中包括指定 <see cref="T:System.DateTime" /> 值中的日期的那个星期。</summary>
      <returns>一个正整数，表示一年中包括 <paramref name="time" /> 参数中的日期的那个星期。</returns>
      <param name="time">日期和时间值。</param>
      <param name="rule">定义日历周枚举值。</param>
      <param name="firstDayOfWeek">表示一周的第一天的枚举值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 早于 <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> 或晚于 <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />。 - 或 - <paramref name="firstDayOfWeek" /> 不是有效的 <see cref="T:System.DayOfWeek" /> 值。 - 或 - <paramref name="rule" /> 不是有效的 <see cref="T:System.Globalization.CalendarWeekRule" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetYear(System.DateTime)">
      <summary>当在派生类中重写时，将返回指定的 <see cref="T:System.DateTime" /> 中的年份。</summary>
      <returns>表示 <paramref name="time" /> 中的年份的整数。</returns>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)">
      <summary>确定当前纪元中的指定日期是否为闰日。</summary>
      <returns>如果指定的日期是闰日，则为 true；否则为 false。</returns>
      <param name="year">表示年份的整数。</param>
      <param name="month">一个表示月份的正整数。</param>
      <param name="day">一个表示天的正整数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。 - 或 - <paramref name="month" /> 超出了日历支持的范围。 - 或 - <paramref name="day" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>当在派生类中重写时，将确定指定纪元中的指定日期是否为闰日。</summary>
      <returns>如果指定的日期是闰日，则为 true；否则为 false。</returns>
      <param name="year">表示年份的整数。</param>
      <param name="month">一个表示月份的正整数。</param>
      <param name="day">一个表示天的正整数。</param>
      <param name="era">表示纪元的整数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。 - 或 - <paramref name="month" /> 超出了日历支持的范围。 - 或 - <paramref name="day" /> 超出了日历支持的范围。 - 或 - <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)">
      <summary>确定当前纪元中指定年份的指定月份是否为闰月。</summary>
      <returns>如果指定的月份是闰月，则为 true；否则为 false。</returns>
      <param name="year">表示年份的整数。</param>
      <param name="month">一个表示月份的正整数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。 - 或 - <paramref name="month" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>当在派生类中重写时，将确定指定纪元中指定年份的指定月份是否为闰月。</summary>
      <returns>如果指定的月份是闰月，则为 true；否则为 false。</returns>
      <param name="year">表示年份的整数。</param>
      <param name="month">一个表示月份的正整数。</param>
      <param name="era">表示纪元的整数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。 - 或 - <paramref name="month" /> 超出了日历支持的范围。 - 或 - <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapYear(System.Int32)">
      <summary>确定当前纪元中的指定年份是否为闰年。</summary>
      <returns>如果指定的年是闰年，则为 true；否则为 false。</returns>
      <param name="year">表示年份的整数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>当在派生类中重写时，将确定指定纪元中的指定年份是否为闰年。</summary>
      <returns>如果指定的年是闰年，则为 true；否则为 false。</returns>
      <param name="year">表示年份的整数。</param>
      <param name="era">表示纪元的整数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。 - 或 - <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="P:System.Globalization.Calendar.IsReadOnly">
      <summary>获取一个值，该值指示此 <see cref="T:System.Globalization.Calendar" /> 对象是否为只读。</summary>
      <returns>如果此 <see cref="T:System.Globalization.Calendar" /> 对象为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Globalization.Calendar.MaxSupportedDateTime">
      <summary>获取此 <see cref="T:System.Globalization.Calendar" /> 对象支持的最晚日期和时间。</summary>
      <returns>此日历支持的最晚日期和时间。 默认值为 <see cref="F:System.DateTime.MaxValue" />。</returns>
    </member>
    <member name="P:System.Globalization.Calendar.MinSupportedDateTime">
      <summary>获取此 <see cref="T:System.Globalization.Calendar" /> 对象支持的最早日期和时间。</summary>
      <returns>此日历支持的最早日期和时间。 默认值为 <see cref="F:System.DateTime.MinValue" />。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>返回设置为当前纪元中的指定日期和时间的 <see cref="T:System.DateTime" />。</summary>
      <returns>设置为当前纪元中的指定日期和时间的 <see cref="T:System.DateTime" />。</returns>
      <param name="year">表示年份的整数。</param>
      <param name="month">一个表示月份的正整数。</param>
      <param name="day">一个表示天的正整数。</param>
      <param name="hour">0 与 23 之间的一个整数，它表示小时。</param>
      <param name="minute">0 与 59 之间的一个整数，它表示分钟。</param>
      <param name="second">0 与 59 之间的一个整数，它表示秒。</param>
      <param name="millisecond">0 与 999 之间的一个整数，它表示毫秒。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。 - 或 - <paramref name="month" /> 超出了日历支持的范围。 - 或 - <paramref name="day" /> 超出了日历支持的范围。 - 或 - <paramref name="hour" /> 小于零或大于 23。 - 或 - <paramref name="minute" /> 小于零或大于 59。 - 或 - <paramref name="second" /> 小于零或大于 59。 - 或 - <paramref name="millisecond" /> 小于零或大于 999。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>当在派生类中重写时，将返回设置为指定纪元中的指定日期和时间的 <see cref="T:System.DateTime" />。</summary>
      <returns>设置为当前纪元中的指定日期和时间的 <see cref="T:System.DateTime" />。</returns>
      <param name="year">表示年份的整数。</param>
      <param name="month">一个表示月份的正整数。</param>
      <param name="day">一个表示天的正整数。</param>
      <param name="hour">0 与 23 之间的一个整数，它表示小时。</param>
      <param name="minute">0 与 59 之间的一个整数，它表示分钟。</param>
      <param name="second">0 与 59 之间的一个整数，它表示秒。</param>
      <param name="millisecond">0 与 999 之间的一个整数，它表示毫秒。</param>
      <param name="era">表示纪元的整数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。 - 或 - <paramref name="month" /> 超出了日历支持的范围。 - 或 - <paramref name="day" /> 超出了日历支持的范围。 - 或 - <paramref name="hour" /> 小于零或大于 23。 - 或 - <paramref name="minute" /> 小于零或大于 59。 - 或 - <paramref name="second" /> 小于零或大于 59。 - 或 - <paramref name="millisecond" /> 小于零或大于 999。 - 或 - <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.ToFourDigitYear(System.Int32)">
      <summary>使用 <see cref="P:System.Globalization.Calendar.TwoDigitYearMax" /> 属性将指定的年份转换为四位数年份，以确定相应的纪元。</summary>
      <returns>包含 <paramref name="year" /> 的四位数表示形式的整数。</returns>
      <param name="year">一个两位数或四位数的整数，表示要转换的年份。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="P:System.Globalization.Calendar.TwoDigitYearMax">
      <summary>获取或设置可以用两位数年份表示的 100 年范围内的最后一年。</summary>
      <returns>可以用两位数年份表示的 100 年范围内的最后一年。</returns>
      <exception cref="T:System.InvalidOperationException">当前的 <see cref="T:System.Globalization.Calendar" /> 对象为只读。</exception>
    </member>
    <member name="T:System.Globalization.CalendarWeekRule">
      <summary>定义确定年份第一周的不同规则。</summary>
    </member>
    <member name="F:System.Globalization.CalendarWeekRule.FirstDay">
      <summary>指示年的第一周从该年的第一天开始，到所指定周的下一个首日前结束。 值为 0。</summary>
    </member>
    <member name="F:System.Globalization.CalendarWeekRule.FirstFourDayWeek">
      <summary>指示年的第一周是第一个在指定的周首日前包含四天或更多天的周。 值为 2。</summary>
    </member>
    <member name="F:System.Globalization.CalendarWeekRule.FirstFullWeek">
      <summary>指示年的第一周从所指定周首日的第一个匹配项开始，可以是年的第一天或其后某一天。 值为 1。</summary>
    </member>
    <member name="T:System.Globalization.CharUnicodeInfo">
      <summary>检索 Unicode 字符的信息。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)">
      <summary>获取与指定字符关联的数值。</summary>
      <returns>与指定的字符关联的数值。 - 或 - -1，如果指定的字符不是一个数值型字符。</returns>
      <param name="ch">要获取其数值的 Unicode 字符。</param>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)">
      <summary>获取与位于指定字符串的指定索引位置的字符关联的数值。</summary>
      <returns>与位于指定字符串的指定索引位置的字符关联的数值。 - 或 - -1，如果位于指定字符串的指定索引位置的字符不是一个数值型字符。</returns>
      <param name="s">
        <see cref="T:System.String" />，包含要获取其数值的 Unicode 字符。</param>
      <param name="index">要获取其数值的 Unicode 字符的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出了 <paramref name="s" /> 中的有效索引范围。</exception>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)">
      <summary>获取指定字符的 Unicode 类别。</summary>
      <returns>一个 <see cref="T:System.Globalization.UnicodeCategory" /> 值，指示指定字符的类别。</returns>
      <param name="ch">要获取其 Unicode 类别的 Unicode 字符。</param>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)">
      <summary>获取位于指定字符串的指定索引位置的字符的 Unicode 类别。</summary>
      <returns>一个 <see cref="T:System.Globalization.UnicodeCategory" /> 值，指示位于指定字符串的指定索引位置的字符的类别。</returns>
      <param name="s">
        <see cref="T:System.String" />，包含要获取其 Unicode 类别的 Unicode 字符。</param>
      <param name="index">要获取其 Unicode 类别的 Unicode 字符的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出了 <paramref name="s" /> 中的有效索引范围。</exception>
    </member>
    <member name="T:System.Globalization.CompareInfo">
      <summary>实现一组方法进行区分区域性的字符串比较。</summary>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>将一个字符串的一部分与另一个字符串的一部分相比较。</summary>
      <returns>一个 32 位有符号整数，指示两个比较数之间的词法关系。 值 Condition 零 这两个字符串相等。 小于零 <paramref name="string1" /> 的指定部分小于 <paramref name="string2" /> 的指定部分。 大于零 <paramref name="string1" /> 的指定部分大于 <paramref name="string2" /> 的指定部分。</returns>
      <param name="string1">要比较的第一个字符串。</param>
      <param name="offset1">
        <paramref name="string1" /> 中的字符从零开始的索引，将从此位置开始比较。</param>
      <param name="length1">
        <paramref name="string1" /> 中要比较的连续字符数。</param>
      <param name="string2">要比较的第二个字符串。</param>
      <param name="offset2">
        <paramref name="string2" /> 中的字符从零开始的索引，将从此位置开始比较。</param>
      <param name="length2">
        <paramref name="string2" /> 中要比较的连续字符数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset1" />、<paramref name="length1" />、<paramref name="offset2" /> 或 <paramref name="length2" /> 小于零。 - 或 - <paramref name="offset1" /> 大于或等于 <paramref name="string1" /> 中的字符数。 - 或 - <paramref name="offset2" /> 大于或等于 <paramref name="string2" /> 中的字符数。 - 或 - <paramref name="length1" /> 大于从 <paramref name="offset1" /> 到 <paramref name="string1" /> 末尾的字符数。 - 或 - <paramref name="length2" /> 大于从 <paramref name="offset2" /> 到 <paramref name="string2" /> 末尾的字符数。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值将一个字符串的一部分与另一个字符串的一部分相比较。</summary>
      <returns>一个 32 位有符号整数，指示两个比较数之间的词法关系。 值 Condition 零 这两个字符串相等。 小于零 <paramref name="string1" /> 的指定部分小于 <paramref name="string2" /> 的指定部分。 大于零 <paramref name="string1" /> 的指定部分大于 <paramref name="string2" /> 的指定部分。</returns>
      <param name="string1">要比较的第一个字符串。</param>
      <param name="offset1">
        <paramref name="string1" /> 中的字符从零开始的索引，将从此位置开始比较。</param>
      <param name="length1">
        <paramref name="string1" /> 中要比较的连续字符数。</param>
      <param name="string2">要比较的第二个字符串。</param>
      <param name="offset2">
        <paramref name="string2" /> 中的字符从零开始的索引，将从此位置开始比较。</param>
      <param name="length2">
        <paramref name="string2" /> 中要比较的连续字符数。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="string1" /> 和 <paramref name="string2" />。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> 和 <see cref="F:System.Globalization.CompareOptions.StringSort" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset1" />、<paramref name="length1" />、<paramref name="offset2" /> 或 <paramref name="length2" /> 小于零。 - 或 - <paramref name="offset1" /> 大于或等于 <paramref name="string1" /> 中的字符数。 - 或 - <paramref name="offset2" /> 大于或等于 <paramref name="string2" /> 中的字符数。 - 或 - <paramref name="length1" /> 大于从 <paramref name="offset1" /> 到 <paramref name="string1" /> 末尾的字符数。 - 或 - <paramref name="length2" /> 大于从 <paramref name="offset2" /> 到 <paramref name="string2" /> 末尾的字符数。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)">
      <summary>将一个字符串的结尾部分与另一个字符串的结尾部分相比较。</summary>
      <returns>一个 32 位有符号整数，指示两个比较数之间的词法关系。 值 Condition 零 这两个字符串相等。 小于零 <paramref name="string1" /> 的指定部分小于 <paramref name="string2" /> 的指定部分。 大于零 <paramref name="string1" /> 的指定部分大于 <paramref name="string2" /> 的指定部分。</returns>
      <param name="string1">要比较的第一个字符串。</param>
      <param name="offset1">
        <paramref name="string1" /> 中的字符从零开始的索引，将从此位置开始比较。</param>
      <param name="string2">要比较的第二个字符串。</param>
      <param name="offset2">
        <paramref name="string2" /> 中的字符从零开始的索引，将从此位置开始比较。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset1" /> 或 <paramref name="offset2" /> 小于零。 - 或 - <paramref name="offset1" /> 大于或等于 <paramref name="string1" /> 中的字符数。 - 或 - <paramref name="offset2" /> 大于或等于 <paramref name="string2" /> 中的字符数。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值将一个字符串的结尾部分与另一个字符串的结尾部分相比较。</summary>
      <returns>一个 32 位有符号整数，指示两个比较数之间的词法关系。 值 Condition 零 这两个字符串相等。 小于零 <paramref name="string1" /> 的指定部分小于 <paramref name="string2" /> 的指定部分。 大于零 <paramref name="string1" /> 的指定部分大于 <paramref name="string2" /> 的指定部分。</returns>
      <param name="string1">要比较的第一个字符串。</param>
      <param name="offset1">
        <paramref name="string1" /> 中的字符从零开始的索引，将从此位置开始比较。</param>
      <param name="string2">要比较的第二个字符串。</param>
      <param name="offset2">
        <paramref name="string2" /> 中的字符从零开始的索引，将从此位置开始比较。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="string1" /> 和 <paramref name="string2" />。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> 和 <see cref="F:System.Globalization.CompareOptions.StringSort" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset1" /> 或 <paramref name="offset2" /> 小于零。 - 或 - <paramref name="offset1" /> 大于或等于 <paramref name="string1" /> 中的字符数。 - 或 - <paramref name="offset2" /> 大于或等于 <paramref name="string2" /> 中的字符数。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.String)">
      <summary>比较两个字符串。</summary>
      <returns>一个 32 位有符号整数，指示两个比较数之间的词法关系。 值 Condition 零 这两个字符串相等。 小于零 <paramref name="string1" /> 小于 <paramref name="string2" />。 大于零 <paramref name="string1" /> 大于 <paramref name="string2" />。</returns>
      <param name="string1">要比较的第一个字符串。</param>
      <param name="string2">要比较的第二个字符串。</param>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值比较两个字符串。</summary>
      <returns>一个 32 位有符号整数，指示两个比较数之间的词法关系。 值 Condition 零 这两个字符串相等。 小于零 <paramref name="string1" /> 小于 <paramref name="string2" />。 大于零 <paramref name="string1" /> 大于 <paramref name="string2" />。</returns>
      <param name="string1">要比较的第一个字符串。</param>
      <param name="string2">要比较的第二个字符串。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="string1" /> 和 <paramref name="string2" />。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> 和 <see cref="F:System.Globalization.CompareOptions.StringSort" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前的 <see cref="T:System.Globalization.CompareInfo" /> 对象。</summary>
      <returns>如果指定的对象等于当前的 <see cref="T:System.Globalization.CompareInfo" />，则为 true；否则为 false。</returns>
      <param name="value">将与当前 <see cref="T:System.Globalization.CompareInfo" /> 进行比较的对象。</param>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetCompareInfo(System.String)">
      <summary>初始化与具有指定名称的区域性关联的新 <see cref="T:System.Globalization.CompareInfo" /> 对象。</summary>
      <returns>一个新 <see cref="T:System.Globalization.CompareInfo" /> 对象，它与具有指定标识符的区域性关联，并使用当前 <see cref="T:System.Reflection.Assembly" /> 中的字符串比较方法。</returns>
      <param name="name">表示区域性名称的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 是无效的区域性名称。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetHashCode">
      <summary>用作当前 <see cref="T:System.Globalization.CompareInfo" /> 的哈希函数，适合在哈希算法和数据结构（如哈希表）中使用。</summary>
      <returns>当前 <see cref="T:System.Globalization.CompareInfo" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)">
      <summary>搜索指定的字符并返回整个源字符串内第一个匹配项的从零开始的索引。</summary>
      <returns>如果找到，则为 <paramref name="value" /> 在 <paramref name="source" /> 内的第一个匹配项从零开始的索引；否则为 -1。 如果 <paramref name="value" /> 为可忽略字符，则将返回 0（零）。</returns>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜索指定的字符，并返回整个源字符串内第一个匹配项的从零开始的索引。</summary>
      <returns>如果在 <paramref name="source" /> 中找到 <paramref name="value" /> 的第一个匹配项的从零开始的索引，使用指定的比较选项；否则为 -1。 如果 <paramref name="value" /> 为可忽略字符，则将返回 0（零）。</returns>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符。</param>
      <param name="options">一个值，用于定义应如何比较这些字符串。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜索指定的字符，并返回源字符串中从指定的索引位置到字符串结尾这一部分中第一个匹配项的从零开始的索引。</summary>
      <returns>使用指定的比较选项，如果在 <paramref name="source" /> 中从 <paramref name="startIndex" /> 一直到 <paramref name="source" /> 的结尾这部分找到 <paramref name="value" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。 如果 <paramref name="value" /> 为可忽略字符，则将返回 <paramref name="startIndex" />。</returns>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符。</param>
      <param name="startIndex">从零开始的搜索的起始索引。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="source" /> 的有效索引范围。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)">
      <summary>搜索指定的字符，并返回源字符串内从指定的索引位置开始、包含所指定元素数的部分中第一个匹配项的从零开始的索引。</summary>
      <returns>如果在 <paramref name="source" /> 的从 <paramref name="startIndex" /> 开始、包含 <paramref name="count" /> 所指定的元素数的部分中，找到 <paramref name="value" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。 如果 <paramref name="value" /> 为可忽略字符，则将返回 <paramref name="startIndex" />。</returns>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符。</param>
      <param name="startIndex">从零开始的搜索的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="source" /> 的有效索引范围。 - 或 - <paramref name="count" /> 小于零。 - 或 - <paramref name="startIndex" /> 和 <paramref name="count" /> 指定的不是 <paramref name="source" /> 中的有效部分。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜索指定的字符，并返回源字符串内从指定的索引位置开始、包含所指定元素数的部分中第一个匹配项的从零开始的索引。</summary>
      <returns>使用指定的比较选项，如果在 <paramref name="source" /> 中从 <paramref name="startIndex" /> 开始、包含 <paramref name="count" /> 指定的元素数的部分找到 <paramref name="value" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。 如果 <paramref name="value" /> 为可忽略字符，则将返回 <paramref name="startIndex" />。</returns>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符。</param>
      <param name="startIndex">从零开始的搜索的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="source" /> 的有效索引范围。 - 或 - <paramref name="count" /> 小于零。 - 或 - <paramref name="startIndex" /> 和 <paramref name="count" /> 指定的不是 <paramref name="source" /> 中的有效部分。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)">
      <summary>搜索指定的子字符串并返回整个源字符串内第一个匹配项的从零开始的索引。</summary>
      <returns>如果找到，则为 <paramref name="value" /> 在 <paramref name="source" /> 内的第一个匹配项从零开始的索引；否则为 -1。 如果 <paramref name="value" /> 为可忽略字符，则将返回 0（零）。</returns>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。 - 或 - <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜索指定的子字符串，并返回整个源字符串内第一个匹配项的从零开始的索引。</summary>
      <returns>如果在 <paramref name="source" /> 中找到 <paramref name="value" /> 的第一个匹配项的从零开始的索引，使用指定的比较选项；否则为 -1。 如果 <paramref name="value" /> 为可忽略字符，则将返回 0（零）。</returns>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符串。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。 - 或 - <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜索指定的子字符串，并返回源字符串内从指定的索引位置到字符串结尾这一部分中第一个匹配项的从零开始的索引。</summary>
      <returns>使用指定的比较选项，如果在 <paramref name="source" /> 中从 <paramref name="startIndex" /> 一直到 <paramref name="source" /> 的结尾这部分找到 <paramref name="value" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。 如果 <paramref name="value" /> 为可忽略字符，则将返回 <paramref name="startIndex" />。</returns>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符串。</param>
      <param name="startIndex">从零开始的搜索的起始索引。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。 - 或 - <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="source" /> 的有效索引范围。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)">
      <summary>搜索指定的子字符串，并返回源字符串内从指定的索引位置开始、包含所指定元素数的部分中第一个匹配项的从零开始的索引。</summary>
      <returns>如果在 <paramref name="source" /> 的从 <paramref name="startIndex" /> 开始、包含 <paramref name="count" /> 所指定的元素数的部分中，找到 <paramref name="value" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。 如果 <paramref name="value" /> 为可忽略字符，则将返回 <paramref name="startIndex" />。</returns>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符串。</param>
      <param name="startIndex">从零开始的搜索的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。 - 或 - <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="source" /> 的有效索引范围。 - 或 - <paramref name="count" /> 小于零。 - 或 - <paramref name="startIndex" /> 和 <paramref name="count" /> 指定的不是 <paramref name="source" /> 中的有效部分。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜索指定的子字符串，并返回源字符串内从指定的索引位置开始、包含所指定元素数的部分中第一个匹配项的从零开始的索引。</summary>
      <returns>使用指定的比较选项，如果在 <paramref name="source" /> 中从 <paramref name="startIndex" /> 开始、包含 <paramref name="count" /> 指定的元素数的部分找到 <paramref name="value" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。 如果 <paramref name="value" /> 为可忽略字符，则将返回 <paramref name="startIndex" />。</returns>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符串。</param>
      <param name="startIndex">从零开始的搜索的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。 - 或 - <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="source" /> 的有效索引范围。 - 或 - <paramref name="count" /> 小于零。 - 或 - <paramref name="startIndex" /> 和 <paramref name="count" /> 指定的不是 <paramref name="source" /> 中的有效部分。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String)">
      <summary>确定指定的源字符串是否以指定的前缀开头。</summary>
      <returns>如果 <paramref name="prefix" /> 的长度小于或等于 <paramref name="source" /> 的长度，并且 <paramref name="source" /> 以 <paramref name="prefix" /> 开始，则为 true；否则为 false。</returns>
      <param name="source">要在其中搜索的字符串。</param>
      <param name="prefix">要与 <paramref name="source" /> 的开头进行比较的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。 - 或 - <paramref name="prefix" /> 为 null。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值确定指定的源字符串是否以指定的前缀开头。</summary>
      <returns>如果 <paramref name="prefix" /> 的长度小于或等于 <paramref name="source" /> 的长度，并且 <paramref name="source" /> 以 <paramref name="prefix" /> 开始，则为 true；否则为 false。</returns>
      <param name="source">要在其中搜索的字符串。</param>
      <param name="prefix">要与 <paramref name="source" /> 的开头进行比较的字符串。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="source" /> 和 <paramref name="prefix" />。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。 - 或 - <paramref name="prefix" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String)">
      <summary>确定指定的源字符串是否以指定的后缀结尾。</summary>
      <returns>如果 <paramref name="suffix" /> 的长度小于或等于 <paramref name="source" /> 的长度，并且 <paramref name="source" /> 以 <paramref name="suffix" /> 结尾，则为 true；否则为 false。</returns>
      <param name="source">要在其中搜索的字符串。</param>
      <param name="suffix">要与 <paramref name="source" /> 的结尾进行比较的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。 - 或 - <paramref name="suffix" /> 为 null。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值确定指定的源字符串是否以指定的后缀结尾。</summary>
      <returns>如果 <paramref name="suffix" /> 的长度小于或等于 <paramref name="source" /> 的长度，并且 <paramref name="source" /> 以 <paramref name="suffix" /> 结尾，则为 true；否则为 false。</returns>
      <param name="source">要在其中搜索的字符串。</param>
      <param name="suffix">要与 <paramref name="source" /> 的结尾进行比较的字符串。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="source" /> 和 <paramref name="suffix" />。 <paramref name="options" /> 可以为其自身使用的枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。 - 或 - <paramref name="suffix" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)">
      <summary>搜索指定的字符，并返回整个源字符串内最后一个匹配项的从零开始的索引。</summary>
      <returns>如果找到，则为 <paramref name="value" /> 在 <paramref name="source" /> 内的最后一个匹配项从零开始的索引；否则为 -1。</returns>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜索指定的字符，并返回整个源字符串内最后一个匹配项的从零开始的索引。</summary>
      <returns>使用指定的比较选项，如果在<paramref name="source" /> 中找到 <paramref name="value" /> 的最后一个匹配项，则为从零开始的索引；否则为 -1。</returns>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜索指定的字符，并返回源字符串内从字符串开头到指定的索引位置这一部分中最后一个匹配项的从零开始的索引。</summary>
      <returns>使用指定的比较选项，如果在 <paramref name="source" /> 中从 <paramref name="source" /> 一直到 <paramref name="startIndex" /> 的开始这部分找到 <paramref name="value" /> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。 如果 <paramref name="value" /> 为可忽略字符，则将返回 <paramref name="startIndex" />。</returns>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="source" /> 的有效索引范围。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)">
      <summary>搜索指定的字符，并返回源字符串内包含所指定元素数、以指定索引位置结尾的部分中最后一个匹配项的从零开始的索引。</summary>
      <returns>在包含 <paramref name="count" /> 所指定的元素数并以 <paramref name="startIndex" /> 结尾的这部分 <paramref name="source" /> 中，如果找到 <paramref name="value" /> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。 如果 <paramref name="value" /> 为可忽略字符，则将返回 <paramref name="startIndex" />。</returns>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="source" /> 的有效索引范围。 - 或 - <paramref name="count" /> 小于零。 - 或 - <paramref name="startIndex" /> 和 <paramref name="count" /> 指定的不是 <paramref name="source" /> 中的有效部分。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜索指定的字符，并返回源字符串内包含所指定元素数、以指定的索引位置结尾的部分中最后一个匹配项的从零开始的索引。</summary>
      <returns>使用指定的比较选项，如果在 <paramref name="source" /> 中结束于 <paramref name="startIndex" /> 、包含 <paramref name="count" /> 指定的元素数的部分找到 <paramref name="value" /> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。 如果 <paramref name="value" /> 为可忽略字符，则将返回 <paramref name="startIndex" />。</returns>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="source" /> 的有效索引范围。 - 或 - <paramref name="count" /> 小于零。 - 或 - <paramref name="startIndex" /> 和 <paramref name="count" /> 指定的不是 <paramref name="source" /> 中的有效部分。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)">
      <summary>搜索指定的子字符串，并返回整个源字符串内最后一个匹配项的从零开始的索引。</summary>
      <returns>如果找到，则为 <paramref name="value" /> 在 <paramref name="source" /> 内的最后一个匹配项从零开始的索引；否则为 -1。</returns>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。 - 或 - <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜索指定的子字符串，并返回整个源字符串内最后一个匹配项的从零开始的索引。</summary>
      <returns>使用指定的比较选项，如果在<paramref name="source" /> 中找到 <paramref name="value" /> 的最后一个匹配项，则为从零开始的索引；否则为 -1。</returns>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符串。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。 - 或 - <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜索指定的子字符串，并返回源字符串内从字符串开头到指定的索引位置这一部分中最后一个匹配项的从零开始的索引。</summary>
      <returns>使用指定的比较选项，如果在 <paramref name="source" /> 中从 <paramref name="source" /> 一直到 <paramref name="startIndex" /> 的开始这部分找到 <paramref name="value" /> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。 如果 <paramref name="value" /> 为可忽略字符，则将返回 <paramref name="startIndex" />。</returns>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符串。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。 - 或 - <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="source" /> 的有效索引范围。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)">
      <summary>搜索指定的子字符串，并返回源字符串内包含所指定元素数、以指定的索引位置结尾的部分中最后一个匹配项的从零开始的索引。</summary>
      <returns>在包含 <paramref name="count" /> 所指定的元素数并以 <paramref name="startIndex" /> 结尾的这部分 <paramref name="source" /> 中，如果找到 <paramref name="value" /> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。 如果 <paramref name="value" /> 为可忽略字符，则将返回 <paramref name="startIndex" />。</returns>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符串。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。 - 或 - <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="source" /> 的有效索引范围。 - 或 - <paramref name="count" /> 小于零。 - 或 - <paramref name="startIndex" /> 和 <paramref name="count" /> 指定的不是 <paramref name="source" /> 中的有效部分。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜索指定的子字符串，并返回源字符串内包含所指定元素数、以指定的索引位置结尾的部分中最后一个匹配项的从零开始的索引。</summary>
      <returns>使用指定的比较选项，如果在 <paramref name="source" /> 中结束于 <paramref name="startIndex" /> 、包含 <paramref name="count" /> 指定的元素数的部分找到 <paramref name="value" /> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。 如果 <paramref name="value" /> 为可忽略字符，则将返回 <paramref name="startIndex" />。</returns>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符串。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。 - 或 - <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="source" /> 的有效索引范围。 - 或 - <paramref name="count" /> 小于零。 - 或 - <paramref name="startIndex" /> 和 <paramref name="count" /> 指定的不是 <paramref name="source" /> 中的有效部分。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="P:System.Globalization.CompareInfo.Name">
      <summary>获取用于通过 <see cref="T:System.Globalization.CompareInfo" /> 对象执行排序操作的区域性的名称。</summary>
      <returns>区域性的名称。</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.ToString">
      <summary>返回表示当前 <see cref="T:System.Globalization.CompareInfo" /> 对象的字符串。</summary>
      <returns>表示当前 <see cref="T:System.Globalization.CompareInfo" /> 对象的字符串。</returns>
    </member>
    <member name="T:System.Globalization.CompareOptions">
      <summary>定义要用于 <see cref="T:System.Globalization.CompareInfo" /> 的字符串比较选项。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreCase">
      <summary>指示字符串比较必须忽略大小写。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreKanaType">
      <summary>指示字符串比较必须忽略 Kana 类型。 假名类型是指日语平假名和片假名字符，它们表示日语中的语音。 平假名用于表示日语自有的短语和字词，而片假名用于表示从其他语言借用的字词，如“computer”或“Internet”。 语音既可以用平假名也可以用片假名表示。 如果选择该值，则认为一个语音的平假名字符等于同一语音的片假名字符。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreNonSpace">
      <summary>指示字符串比较必须忽略不占空间的组合字符，比如音调符号。 Unicode 标准将组合字符定义为与基字符组合起来产生新字符的字符。 不占空间的组合字符在呈现时其本身不占用空间位置。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreSymbols">
      <summary>指示字符串比较必须忽略符号，如空白字符、标点符号、货币符号、百分号、数学符号、“&amp;”符等等。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreWidth">
      <summary>指示字符串比较必须忽略字符宽度。 例如，日语片假名字符可以写为全角或半角形式。 如果选择此值，则认为片假名字符的全角形式等同于半角形式。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.None">
      <summary>指定字符串比较的默认选项设置。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.Ordinal">
      <summary>指示必须使用字符串的连续 Unicode UTF-16 编码值进行字符串比较（使用代码单元进行代码单元比较），这样可以提高比较速度，但不能区分区域性。 如果 XXXX16 小于 YYYY16，则以“XXXX16”代码单元开头的字符串位于以“YYYY16”代码单元开头的字符串之前。 此值必须单独使用，而不能与其他 <see cref="T:System.Globalization.CompareOptions" /> 值组合在一起。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.OrdinalIgnoreCase">
      <summary>字符串比较必须忽略大小写，然后执行序号比较。 此方法相当于先使用固定区域性将字符串转换为大写，然后再对结果执行序号比较。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.StringSort">
      <summary>指示字符串比较必须使用字符串排序算法。 在字符串排序中，连字符、撇号以及其他非字母数字符号都排在字母数字字符之前。</summary>
    </member>
    <member name="T:System.Globalization.CultureInfo">
      <summary>提供有关特定区域性的信息（对于非托管代码开发，则称为“区域设置”）。 这些信息包括区域性的名称、书写系统、使用的日历以及对日期和排序字符串的格式化设置。</summary>
    </member>
    <member name="M:System.Globalization.CultureInfo.#ctor(System.String)">
      <summary>根据由名称指定的区域性初始化 <see cref="T:System.Globalization.CultureInfo" /> 类的新实例。</summary>
      <param name="name">预定义的 <see cref="T:System.Globalization.CultureInfo" /> 名称、现有 <see cref="T:System.Globalization.CultureInfo" /> 的 <see cref="P:System.Globalization.CultureInfo.Name" /> 或仅 Windows 区域性名称。 <paramref name="name" /> 不区分大小写。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.Globalization.CultureNotFoundException">
        <paramref name="name" /> 不是有效的区域性名称。</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.Calendar">
      <summary>获取区域性使用的默认日历。</summary>
      <returns>表示区域性使用的默认日历的 <see cref="T:System.Globalization.Calendar" />。</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.Clone">
      <summary>创建当前 <see cref="T:System.Globalization.CultureInfo" /> 的副本。</summary>
      <returns>当前 <see cref="T:System.Globalization.CultureInfo" /> 的副本。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.CompareInfo">
      <summary>获取为区域性定义如何比较字符串的 <see cref="T:System.Globalization.CompareInfo" />。</summary>
      <returns>为区域性定义如何比较字符串的 <see cref="T:System.Globalization.CompareInfo" />。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Globalization.CultureInfo.CurrentCulture">
      <summary>获取表示当前线程使用的区域性的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</summary>
      <returns>表示当前线程使用的区域性的对象。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.CurrentUICulture">
      <summary>获取表示资源管理器在运行时查找区域性特定资源所用的当前用户接口的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</summary>
      <returns>资源管理器使用的当前区域性以便在运行时查找区域性特定的资源。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Globalization.CultureInfo.DateTimeFormat">
      <summary>获取或设置 <see cref="T:System.Globalization.DateTimeFormatInfo" />，它定义适合区域性的、显示日期和时间的格式。</summary>
      <returns>一个 <see cref="T:System.Globalization.DateTimeFormatInfo" />，它定义适合区域性的、显示日期和时间的格式。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">设置了 <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> 属性或任何 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 属性，但 <see cref="T:System.Globalization.CultureInfo" /> 是只读的。</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.DisplayName">
      <summary>获取完整的本地化区域性名称。</summary>
      <returns>格式为 languagefull [country/regionfull] 的完整本地化区域性名称，其中 languagefull 是语言的全名，country/regionfull 是国家/地区的全名。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.EnglishName">
      <summary>获取格式为 languagefull [country/regionfull] 的英语区域性名称。</summary>
      <returns>格式为 languagefull [country/regionfull] 的英语区域性名称，其中 languagefull 是语言的全名，country/regionfull 是国家/地区的全名。</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.Equals(System.Object)">
      <summary>确定指定的对象是否与当前 <see cref="T:System.Globalization.CultureInfo" /> 具有相同的区域性。</summary>
      <returns>如果 <paramref name="value" /> 与当前 <see cref="T:System.Globalization.CultureInfo" /> 具有相同的区域性，则为 true；否则为 false。</returns>
      <param name="value">将与当前 <see cref="T:System.Globalization.CultureInfo" /> 进行比较的对象。</param>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetFormat(System.Type)">
      <summary>获取一个定义如何格式化指定类型的对象。</summary>
      <returns>
        <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> 属性的值，如果 <paramref name="formatType" /> 是 <see cref="T:System.Globalization.NumberFormatInfo" /> 类的 <see cref="T:System.Type" /> 对象，则该属性为包含当前 <see cref="T:System.Globalization.CultureInfo" /> 的默认数字格式信息的 <see cref="T:System.Globalization.NumberFormatInfo" />。 - 或 - <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> 属性的值，如果 <paramref name="formatType" /> 是 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 类的 <see cref="T:System.Type" /> 对象，则该属性为包含当前 <see cref="T:System.Globalization.CultureInfo" /> 的默认日期和时间格式信息的 <see cref="T:System.Globalization.DateTimeFormatInfo" />。 - 或 - 如果 <paramref name="formatType" /> 是其他任何对象，则为 null。</returns>
      <param name="formatType">要为其获取格式化对象的 <see cref="T:System.Type" />。 此方法仅支持 <see cref="T:System.Globalization.NumberFormatInfo" /> 和 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 两种类型。</param>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetHashCode">
      <summary>用作当前 <see cref="T:System.Globalization.CultureInfo" /> 的哈希函数，适合用在哈希算法和数据结构（如哈希表）中。</summary>
      <returns>当前 <see cref="T:System.Globalization.CultureInfo" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.InvariantCulture">
      <summary>获取不依赖于区域性（固定）的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</summary>
      <returns>不依赖于区域性（固定）的对象。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.IsNeutralCulture">
      <summary>获取一个值，该值指示当前 <see cref="T:System.Globalization.CultureInfo" /> 是否表示非特定区域性。</summary>
      <returns>如果当前 <see cref="T:System.Globalization.CultureInfo" /> 表示非特定区域性，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.IsReadOnly">
      <summary>获取一个值，该值指示当前 <see cref="T:System.Globalization.CultureInfo" /> 是否为只读。</summary>
      <returns>如果当前 <see cref="T:System.Globalization.CultureInfo" /> 为只读，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.Name">
      <summary>获取格式为 languagecode2-country/regioncode2 的区域性名称。</summary>
      <returns>格式为 languagecode2-country/regioncode2 的区域性名称，其中 languagecode2 是从 ISO 639-1 派生的由两个小写字母构成的代码， country/regioncode2 是从 ISO 3166 派生的由两个大写字母构成的代码。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.NativeName">
      <summary>获取为区域性设置的显示名称，它由语言、国家/地区以及可选的书写符号组成。</summary>
      <returns>区域性名称。 由语言全名、国家/地区全名以及可选的书写符号组成的区域性名称。 有关其格式的讨论，请参见对 <see cref="T:System.Globalization.CultureInfo" /> 类的说明。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.NumberFormat">
      <summary>获取或设置 <see cref="T:System.Globalization.NumberFormatInfo" />，它定义适合区域性的、显示数字、货币和百分比的格式。</summary>
      <returns>一个 <see cref="T:System.Globalization.NumberFormatInfo" />，它定义适合区域性的、显示数字、货币和百分比的格式。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">设置了 <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> 属性或任何 <see cref="T:System.Globalization.NumberFormatInfo" /> 属性，但 <see cref="T:System.Globalization.CultureInfo" /> 是只读的。</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.OptionalCalendars">
      <summary>获取该区域性可使用的日历的列表。</summary>
      <returns>类型为 <see cref="T:System.Globalization.Calendar" /> 的数组，表示当前 <see cref="T:System.Globalization.CultureInfo" /> 代表的区域性所使用的日历。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.Parent">
      <summary>获取表示当前 <see cref="T:System.Globalization.CultureInfo" /> 的父区域性的 <see cref="T:System.Globalization.CultureInfo" />。</summary>
      <returns>表示当前 <see cref="T:System.Globalization.CultureInfo" /> 的父区域性的 <see cref="T:System.Globalization.CultureInfo" />。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)">
      <summary>返回指定的 <see cref="T:System.Globalization.CultureInfo" /> 的只读包装。</summary>
      <returns>
        <paramref name="ci" /> 的只读 <see cref="T:System.Globalization.CultureInfo" /> 包装。</returns>
      <param name="ci">要包装的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ci" /> 为 null。</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.TextInfo">
      <summary>获取定义与区域性关联的书写体系的 <see cref="T:System.Globalization.TextInfo" />。</summary>
      <returns>定义与区域性关联的书写体系的 <see cref="T:System.Globalization.TextInfo" />。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Globalization.CultureInfo.ToString">
      <summary>返回一个字符串，该字符串包含当前 <see cref="T:System.Globalization.CultureInfo" /> 的名称，其格式为 languagecode2-country/regioncode2。</summary>
      <returns>包含当前 <see cref="T:System.Globalization.CultureInfo" /> 名称的字符串。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName">
      <summary>获取当前 <see cref="T:System.Globalization.CultureInfo" /> 的语言的由两个字母构成的 ISO 639-1 代码。</summary>
      <returns>当前 <see cref="T:System.Globalization.CultureInfo" /> 的语言的由两个字母构成的 ISO 639-1 代码。</returns>
    </member>
    <member name="T:System.Globalization.CultureNotFoundException">
      <summary>当调用的方法尝试构造一个计算机上不可用的区域性时引发的异常。</summary>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.CultureNotFoundException" /> 类的新实例，将其消息字符串设置为系统提供的消息。</summary>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.Globalization.CultureNotFoundException" /> 类的新实例。</summary>
      <param name="message">与此异常一起显示的错误消息。</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Globalization.CultureNotFoundException" /> 类的新实例。</summary>
      <param name="message">与此异常一起显示的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为空引用，则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.String)">
      <summary>使用指定的错误消息和导致此异常的参数的名称来初始化 <see cref="T:System.Globalization.CultureNotFoundException" /> 类的新实例。</summary>
      <param name="paramName">导致当前异常的参数的名称。</param>
      <param name="message">与此异常一起显示的错误消息。</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.String,System.Exception)">
      <summary>使用指定的错误消息、无效的区域性名称和对导致此异常的内部异常的引用来初始化 <see cref="T:System.Globalization.CultureNotFoundException" /> 类的新实例。</summary>
      <param name="message">与此异常一起显示的错误消息。</param>
      <param name="invalidCultureName">找不到的区域性名称。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为空引用，则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.String,System.String)">
      <summary>使用指定的错误消息、无效的区域性名称和导致此异常的参数的名称来初始化 <see cref="T:System.Globalization.CultureNotFoundException" /> 类的新实例。</summary>
      <param name="paramName">导致当前异常的参数的名称。</param>
      <param name="invalidCultureName">找不到的区域性名称。</param>
      <param name="message">与此异常一起显示的错误消息。</param>
    </member>
    <member name="P:System.Globalization.CultureNotFoundException.InvalidCultureName">
      <summary>获取找不到的区域性名称。</summary>
      <returns>无效的区域性名称。</returns>
    </member>
    <member name="P:System.Globalization.CultureNotFoundException.Message">
      <summary>获取解释异常原因的错误消息。</summary>
      <returns>描述异常的详细信息的文本字符串。</returns>
    </member>
    <member name="T:System.Globalization.DateTimeFormatInfo">
      <summary>提供有关日期和时间值格式的区域性特定信息。</summary>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.#ctor">
      <summary>初始化不依赖于区域性的（固定的）<see cref="T:System.Globalization.DateTimeFormatInfo" /> 类的新可写实例。</summary>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames">
      <summary>获取或设置类型 <see cref="T:System.String" /> 的一维数组，它包含周中各天的特定于区域性的缩写名称。</summary>
      <returns>一个类型 <see cref="T:System.String" /> 的一维数组，它包含周中各天的特定于区域性的缩写名称。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的数组包含"Sun"、"Mon"、"Tue"、"Wed"、"Thu"、"Fri"和"Sat"。</returns>
      <exception cref="T:System.ArgumentNullException">该属性被设置为 null。</exception>
      <exception cref="T:System.ArgumentException">该属性正被设置为一个多维数组或者长度不是正好为 7 的数组。</exception>
      <exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames">
      <summary>获取或设置与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的月份缩写名称的字符串数组。</summary>
      <returns>月份缩写名称的数组。</returns>
      <exception cref="T:System.ArgumentException">在设置操作中，该数组是多维数组或者长度不是正好为 13 的数组。</exception>
      <exception cref="T:System.ArgumentNullException">在设置操作中，值数组或值数组的元素之一为 null。</exception>
      <exception cref="T:System.InvalidOperationException">在设置操作中，当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames">
      <summary>获取或设置包含各月的特定于区域性的缩写名称的一维字符串数组。</summary>
      <returns>一个具有 13 个元素的一维字符串数组，包含各月的特定于区域性的缩写名称。 在 12 个月的日历中，数组的第 13 个元素是一个空字符串。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 数组包含"Jan"、"Feb"、"Mar"、"Apr"、"May"、"Jun"、"Jul"、"Aug"、"Sep"、"Oct"、"Nov"、"Dec"和""。</returns>
      <exception cref="T:System.ArgumentNullException">该属性被设置为 null。</exception>
      <exception cref="T:System.ArgumentException">该属性正被设置为一个多维数组或者长度不是正好为 13 的数组。</exception>
      <exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AMDesignator">
      <summary>获取或设置表示处于"上午"（中午前）的各小时的字符串指示项。</summary>
      <returns>表示属于上午的各小时的字符串指示项。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的默认值为"AM"。</returns>
      <exception cref="T:System.ArgumentNullException">该属性被设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.Calendar">
      <summary>获取或设置用于当前区域性的日历。</summary>
      <returns>用于当前区域性的日历。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的默认值是一个 <see cref="T:System.Globalization.GregorianCalendar" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">该属性被设置为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性被设置为 <see cref="T:System.Globalization.Calendar" /> 对象，这对于当前区域性是无效的。</exception>
      <exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.CalendarWeekRule">
      <summary>获取或设置一个值，该值指定使用哪一规则确定该年的第一个日历周。</summary>
      <returns>一个值，该值确定该年的第一个日历周。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的默认值是 <see cref="F:System.Globalization.CalendarWeekRule.FirstDay" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性被设置的值不是有效的 <see cref="T:System.Globalization.CalendarWeekRule" /> 值。</exception>
      <exception cref="T:System.InvalidOperationException">在设置操作中，当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.Clone">
      <summary>创建 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 的浅表副本。</summary>
      <returns>从原始 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 复制的新 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.CurrentInfo">
      <summary>获取基于当前区域性对值进行格式设置的只读 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象。</summary>
      <returns>一个基于当前线程的 <see cref="T:System.Globalization.CultureInfo" /> 对象的只读 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.DayNames">
      <summary>获取或设置包含该周中各天的特定于区域性的完整名称的一维字符串数组。</summary>
      <returns>一个一维字符串数组，它包含周中各天的特定于区域性的完整名称。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 数组包含"Sunday"、"Monday"、"Tuesday"、"Wednesday"、"Thursday"、"Friday"和"Saturday"。</returns>
      <exception cref="T:System.ArgumentNullException">该属性被设置为 null。</exception>
      <exception cref="T:System.ArgumentException">该属性正被设置为一个多维数组或者长度不是正好为 7 的数组。</exception>
      <exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek">
      <summary>获取或设置该周的第一天。</summary>
      <returns>表示一周的第一天的枚举值。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的默认值是 <see cref="F:System.DayOfWeek.Sunday" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性被设置的值不是有效的 <see cref="T:System.DayOfWeek" /> 值。</exception>
      <exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.FullDateTimePattern">
      <summary>为长日期和长时间值获取或设置自定义格式字符串。</summary>
      <returns>长日期和时间值的自定义格式字符串。</returns>
      <exception cref="T:System.ArgumentNullException">该属性被设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedDayName(System.DayOfWeek)">
      <summary>基于与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的区域性，返回周中指定天的特定于区域性的缩写名称。</summary>
      <returns>由 <paramref name="dayofweek" /> 表示的周中某天的特定于区域性的缩写名称。</returns>
      <param name="dayofweek">一个 <see cref="T:System.DayOfWeek" /> 值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dayofweek" /> 不是有效的 <see cref="T:System.DayOfWeek" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)">
      <summary>返回包含指定纪元的缩写名称的字符串（如果缩写名称存在）。</summary>
      <returns>包含指定纪元的缩写名称的字符串（如果缩写名称存在）。 - 或 - 包含纪元的完整名称的字符串（如果缩写名称不存在）。</returns>
      <param name="era">表示纪元的整数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 不表示在 <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> 属性中指定的日历中的有效纪元。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedMonthName(System.Int32)">
      <summary>基于与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的区域性，返回指定月份的特定于区域性的缩写名称。</summary>
      <returns>由 <paramref name="month" /> 表示的月的特定于区域性的缩写名称。</returns>
      <param name="month">一个从 1 到 13 的整数，表示要检索的月份的名称。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> 小于 1 或大于 13。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetDayName(System.DayOfWeek)">
      <summary>基于与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的区域性，返回周中指定天的特定于区域性的完整名称。</summary>
      <returns>由 <paramref name="dayofweek" /> 表示的周中某天的特定于区域性的完整名称。</returns>
      <param name="dayofweek">一个 <see cref="T:System.DayOfWeek" /> 值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dayofweek" /> 不是有效的 <see cref="T:System.DayOfWeek" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetEra(System.String)">
      <summary>返回表示指定纪元的整数。</summary>
      <returns>如果 <paramref name="eraName" /> 有效，则为表示纪元的整数；否则为 -1。</returns>
      <param name="eraName">包含纪元名称的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="eraName" /> 为 null。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)">
      <summary>返回包含指定纪元名称的字符串。</summary>
      <returns>包含纪元名称的字符串。</returns>
      <param name="era">表示纪元的整数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 不表示在 <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> 属性中指定的日历中的有效纪元。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetFormat(System.Type)">
      <summary>返回指定类型的对象，它提供日期和时间格式化服务。</summary>
      <returns>如果 <paramref name="formatType" /> 与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 相同，则为当前对象，否则为 null。</returns>
      <param name="formatType">所需格式化服务的类型。</param>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetInstance(System.IFormatProvider)">
      <summary>返回与指定的 <see cref="T:System.IFormatProvider" /> 关联的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象。</summary>
      <returns>与 <see cref="T:System.IFormatProvider" /> 关联的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象。</returns>
      <param name="provider">用于获取 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象的 <see cref="T:System.IFormatProvider" />。 - 或 - 为 null，以获取 <see cref="P:System.Globalization.DateTimeFormatInfo.CurrentInfo" />。</param>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetMonthName(System.Int32)">
      <summary>基于与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的区域性，返回指定月中特定于区域性的完整名称。</summary>
      <returns>由 <paramref name="month" /> 表示的月的特定于区域性的完整名称。</returns>
      <param name="month">一个从 1 到 13 的整数，表示要检索的月份的名称。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> 小于 1 或大于 13。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.InvariantInfo">
      <summary>获取不依赖于区域性的（固定的）默认只读 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象。</summary>
      <returns>不依赖于区域性的（固定的）默认只读对象。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是否为只读。</summary>
      <returns>如果 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.LongDatePattern">
      <summary>获取或设置长日期值的自定义格式字符串。</summary>
      <returns>长日期值的自定义格式字符串。</returns>
      <exception cref="T:System.ArgumentNullException">该属性被设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.LongTimePattern">
      <summary>为长时间值获取或设置自定义格式字符串。</summary>
      <returns>长时间值的格式模式。</returns>
      <exception cref="T:System.ArgumentNullException">该属性被设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.MonthDayPattern">
      <summary>为月和日值获取或设置自定义格式字符串。</summary>
      <returns>可排序的月份和日期值的自定义格式字符串。</returns>
      <exception cref="T:System.ArgumentNullException">该属性被设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames">
      <summary>获取或设置与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的月份名称的字符串数组。</summary>
      <returns>月份名称的字符串数组。</returns>
      <exception cref="T:System.ArgumentException">在设置操作中，该数组是多维数组或者长度不是正好为 13 的数组。</exception>
      <exception cref="T:System.ArgumentNullException">在设置操作中，元素的其中一个或一个数组为 null。</exception>
      <exception cref="T:System.InvalidOperationException">在设置操作中，当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.MonthNames">
      <summary>获取或设置类型 <see cref="T:System.String" /> 的一维数组，该数组包含月份的特定于区域性的完整名称。</summary>
      <returns>一个类型 <see cref="T:System.String" /> 的一维数组，该数组包含月份的特定于区域性的完整名称。 在 12 个月的日历中，数组的第 13 个元素是一个空字符串。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 数组包含"January"、"February"、"March"、"April"、"May"、"June"、"July"、"August"、"September"、"October"、"November"、"December"和""。</returns>
      <exception cref="T:System.ArgumentNullException">该属性被设置为 null。</exception>
      <exception cref="T:System.ArgumentException">该属性正被设置为一个多维数组或者长度不是正好为 13 的数组。</exception>
      <exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.PMDesignator">
      <summary>获取或设置表示处于"下午"（中午后）的各小时的字符串指示项。</summary>
      <returns>表示处于"下午"（中午后）的各小时的字符串指示项。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的默认值为"PM"。</returns>
      <exception cref="T:System.ArgumentNullException">该属性被设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.ReadOnly(System.Globalization.DateTimeFormatInfo)">
      <summary>返回只读的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 包装。</summary>
      <returns>一个只读的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 包装。</returns>
      <param name="dtfi">要包装的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dtfi" /> 为 null。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.RFC1123Pattern">
      <summary>获取自定义的格式字符串，该字符串用于基于 Internet 工程任务组 (IETF) 征求意见文档 (RFC) 1123 规范的时间值。</summary>
      <returns>基于 IETF RFC 1123 规范的自定时间值格式字符串。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.ShortDatePattern">
      <summary>为短日期值获取或设置自定义格式字符串。</summary>
      <returns>短日期值的自定义格式字符串。</returns>
      <exception cref="T:System.ArgumentNullException">该属性被设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.ShortestDayNames">
      <summary>获取或设置与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的最短唯一日期缩写名称的字符串数组。</summary>
      <returns>日期名称的字符串数组。</returns>
      <exception cref="T:System.ArgumentException">在设置操作中，该数组中不会正好有七个元素。</exception>
      <exception cref="T:System.ArgumentNullException">在设置操作中，值数组或值数组的元素之一为 null。</exception>
      <exception cref="T:System.InvalidOperationException">在设置操作中，当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.ShortTimePattern">
      <summary>为短时间值获取或设置自定义格式字符串。</summary>
      <returns>短时间值的自定义格式字符串。</returns>
      <exception cref="T:System.ArgumentNullException">该属性被设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern">
      <summary>获取可排序数据和时间值的自定义格式字符串。</summary>
      <returns>可排序的日期和时间值的自定义格式字符串。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern">
      <summary>获取通用可排序数据和时间字符串的自定义格式字符串。</summary>
      <returns>通用、可排序的日期和时间字符串的自定义格式字符串。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.YearMonthPattern">
      <summary>为年和月值获取或设置自定义格式字符串。</summary>
      <returns>可排序的年份和月份值的自定义格式字符串。</returns>
      <exception cref="T:System.ArgumentNullException">该属性被设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">正在设置该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
    </member>
    <member name="T:System.Globalization.DateTimeStyles">
      <summary>定义一些格式设置选项，这些选项可自定义许多日期和时间分析方法的字符串分析方法。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AdjustToUniversal">
      <summary>以协调世界时 (UTC) 形式返回日期和时间。 如果输入字符串表示本地时间（通过时区说明符或 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />），则会将日期和时间从本地时间转换为 UTC。 如果输入字符串表示 UTC 时间（通过时区说明符或 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />），则不进行任何转换。 如果输入字符串不表示本地时间或 UTC 时间，则不进行任何转换，并且生成的 <see cref="P:System.DateTime.Kind" /> 属性为 <see cref="F:System.DateTimeKind.Unspecified" />。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowInnerWhite">
      <summary>在分析期间必须忽略字符串中间的多余空白字符，但空白字符出现在 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 格式模式中的情况除外。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowLeadingWhite">
      <summary>在分析期间必须忽略前导空白字符，但空白字符出现在 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 格式模式中的情况除外。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowTrailingWhite">
      <summary>在分析期间必须忽略尾随空白字符，但空白字符出现在 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 格式模式中的情况除外。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces">
      <summary>在分析期间必须忽略字符串任意位置的多余空白字符，但空白字符出现在 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 格式模式中的情况除外。 该值是 <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite" /> 值的组合。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AssumeLocal">
      <summary>如果分析的字符串中未指定任何时区，则假定该字符串表示本地时间。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AssumeUniversal">
      <summary>如果分析的字符串中未指定任何时区，则假定该字符串表示 UTC。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault">
      <summary>如果分析的字符串只包含时间而不包含日期，则分析方法会假定以下公历日期：年 = 1、月 = 1 并且日 = 1。 如果没有使用此值，则假定为当前日期。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.None">
      <summary>必须使用默认格式设置选项。 此值表示 <see cref="M:System.DateTime.Parse(System.String)" />、 <see cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" /> 和 <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)" /> 方法的默认样式。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.RoundtripKind">
      <summary>在使用“o”或“r”标准格式说明符将 <see cref="T:System.DateTime" /> 对象先转换为字符串，然后再将该字符串转换回 <see cref="T:System.DateTime" /> 对象时，将保留日期的 <see cref="T:System.DateTimeKind" /> 字段。</summary>
    </member>
    <member name="T:System.Globalization.NumberFormatInfo">
      <summary>根据区域性定义如何设置数值格式以及如何显示数值。</summary>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.#ctor">
      <summary>初始化不依赖于区域性的（固定的）<see cref="T:System.Globalization.NumberFormatInfo" /> 类的新可写实例。</summary>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.Clone">
      <summary>创建 <see cref="T:System.Globalization.NumberFormatInfo" /> 的浅表副本。</summary>
      <returns>从原始 <see cref="T:System.Globalization.NumberFormatInfo" /> 复制的新 <see cref="T:System.Globalization.NumberFormatInfo" />。</returns>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits">
      <summary>获取或设置在货币值中使用的小数位数。</summary>
      <returns>要在货币值中使用的小数位数。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值为 2。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性被设置为小于 0 或大于 99 的值。</exception>
      <exception cref="T:System.InvalidOperationException">设置该属性，并且 <see cref="T:System.Globalization.NumberFormatInfo" /> 是只读的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator">
      <summary>获取或设置要在货币值中用作小数点分隔符的字符串。</summary>
      <returns>要在货币值中用作小数点分隔符的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值为"."。</returns>
      <exception cref="T:System.ArgumentNullException">该属性被设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">设置该属性，并且 <see cref="T:System.Globalization.NumberFormatInfo" /> 是只读的。</exception>
      <exception cref="T:System.ArgumentException">此属性当前设置为空字符串。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator">
      <summary>获取或设置在货币值中对小数点左边数字进行分组的字符串。</summary>
      <returns>在货币值中对小数点左边数字进行分组的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值为","。</returns>
      <exception cref="T:System.ArgumentNullException">该属性被设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">设置该属性，并且 <see cref="T:System.Globalization.NumberFormatInfo" /> 是只读的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes">
      <summary>获取或设置货币值中小数点左边每一组的位数。</summary>
      <returns>货币值中小数点左边每一组的位数。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值是一个一维数组，该数组只包含一个设置为 3 的元素。</returns>
      <exception cref="T:System.ArgumentNullException">该属性被设置为 null。</exception>
      <exception cref="T:System.ArgumentException">试图设置该属性，但此数组包含一个小于 0 或大于 9 的项。 - 或 - 试图设置该属性，但此数组包含一个设置为 0 的项（最后一项除外）。</exception>
      <exception cref="T:System.InvalidOperationException">设置该属性，并且 <see cref="T:System.Globalization.NumberFormatInfo" /> 是只读的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern">
      <summary>获取或设置负货币值的格式模式。</summary>
      <returns>负货币值的格式模式。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值是 0，它表示"($n)"，其中"$"是 <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> 并且 <paramref name="n" /> 是一个数字。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性被设置为小于 0 或大于 15 的值。</exception>
      <exception cref="T:System.InvalidOperationException">设置该属性，并且 <see cref="T:System.Globalization.NumberFormatInfo" /> 是只读的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern">
      <summary>获取或设置正货币值的格式模式。</summary>
      <returns>正货币值的格式模式。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值是 0，这表示"$n"，其中"$"是 <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> 并且 <paramref name="n" /> 是一个数字。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性被设置为小于 0 或大于 3 的值。</exception>
      <exception cref="T:System.InvalidOperationException">设置该属性，并且 <see cref="T:System.Globalization.NumberFormatInfo" /> 是只读的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencySymbol">
      <summary>获取或设置用作货币符号的字符串。</summary>
      <returns>用作货币符号的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值为"¤"。</returns>
      <exception cref="T:System.ArgumentNullException">该属性被设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">设置该属性，并且 <see cref="T:System.Globalization.NumberFormatInfo" /> 是只读的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrentInfo">
      <summary>获取基于当前区域性对值进行格式设置的只读 <see cref="T:System.Globalization.NumberFormatInfo" />。</summary>
      <returns>基于当前线程的 <see cref="T:System.Globalization.CultureInfo" /> 的只读 <see cref="T:System.Globalization.NumberFormatInfo" />。</returns>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.GetFormat(System.Type)">
      <summary>获取提供数字格式化服务的指定类型的对象。</summary>
      <returns>如果 <paramref name="formatType" /> 与当前 <see cref="T:System.Globalization.NumberFormatInfo" /> 的类型相同，则为当前 <see cref="T:System.Globalization.NumberFormatInfo" />；否则为 null。</returns>
      <param name="formatType">所需格式化服务的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.GetInstance(System.IFormatProvider)">
      <summary>获取与指定 <see cref="T:System.IFormatProvider" /> 关联的 <see cref="T:System.Globalization.NumberFormatInfo" />。</summary>
      <returns>与指定 <see cref="T:System.IFormatProvider" /> 关联的 <see cref="T:System.Globalization.NumberFormatInfo" />。</returns>
      <param name="formatProvider">用于获取 <see cref="T:System.Globalization.NumberFormatInfo" /> 的 <see cref="T:System.IFormatProvider" />。 - 或 - 为 null，以获取 <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo" />。</param>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.InvariantInfo">
      <summary>获取不依赖于区域性的（固定的）默认只读 <see cref="T:System.Globalization.NumberFormatInfo" />。</summary>
      <returns>不依赖于区域性的（固定的）默认只读 <see cref="T:System.Globalization.NumberFormatInfo" />。</returns>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.IsReadOnly">
      <summary>获取一个指示此 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象是否为只读的值。</summary>
      <returns>如果 <see cref="T:System.Globalization.NumberFormatInfo" /> 为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NaNSymbol">
      <summary>获取或设置表示 IEEE NaN（非数字）值的字符串。</summary>
      <returns>表示 IEEE NaN（非数字）值的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值为"NaN"。</returns>
      <exception cref="T:System.ArgumentNullException">该属性被设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">设置该属性，并且 <see cref="T:System.Globalization.NumberFormatInfo" /> 是只读的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol">
      <summary>获取或设置表示负无穷大的字符串。</summary>
      <returns>表示负无穷大的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值为"-Infinity"。</returns>
      <exception cref="T:System.ArgumentNullException">该属性被设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">设置该属性，并且 <see cref="T:System.Globalization.NumberFormatInfo" /> 是只读的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NegativeSign">
      <summary>获取或设置表示关联数字是负值的字符串。</summary>
      <returns>表示关联数字是负值的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值为"-"。</returns>
      <exception cref="T:System.ArgumentNullException">该属性被设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">设置该属性，并且 <see cref="T:System.Globalization.NumberFormatInfo" /> 是只读的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits">
      <summary>获取或设置在数值中使用的小数位数。</summary>
      <returns>在数值中使用的小数位数。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值为 2。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性被设置为小于 0 或大于 99 的值。</exception>
      <exception cref="T:System.InvalidOperationException">设置该属性，并且 <see cref="T:System.Globalization.NumberFormatInfo" /> 是只读的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator">
      <summary>获取或设置在数值中用作小数点分隔符的字符串。</summary>
      <returns>在数值中用作小数点分隔符的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值为"."。</returns>
      <exception cref="T:System.ArgumentNullException">该属性被设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">设置该属性，并且 <see cref="T:System.Globalization.NumberFormatInfo" /> 是只读的。</exception>
      <exception cref="T:System.ArgumentException">此属性当前设置为空字符串。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator">
      <summary>获取或设置在数值中对小数点左边数字进行分组的字符串。</summary>
      <returns>在数值中对小数点左边数字进行分组的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值为","。</returns>
      <exception cref="T:System.ArgumentNullException">该属性被设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">设置该属性，并且 <see cref="T:System.Globalization.NumberFormatInfo" /> 是只读的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberGroupSizes">
      <summary>获取或设置数值中小数点左边每一组的位数。</summary>
      <returns>数值中小数点左边每一组的位数。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值是一个一维数组，该数组只包含一个设置为 3 的元素。</returns>
      <exception cref="T:System.ArgumentNullException">该属性被设置为 null。</exception>
      <exception cref="T:System.ArgumentException">试图设置该属性，但此数组包含一个小于 0 或大于 9 的项。 - 或 - 试图设置该属性，但此数组包含一个设置为 0 的项（最后一项除外）。</exception>
      <exception cref="T:System.InvalidOperationException">设置该属性，并且 <see cref="T:System.Globalization.NumberFormatInfo" /> 是只读的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberNegativePattern">
      <summary>获取或设置负数值的格式模式。</summary>
      <returns>负数值的格式模式。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值为 1，这表示"-n"，其中 <paramref name="n" /> 是一个数字。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性被设置为小于 0 或大于 4 的值。</exception>
      <exception cref="T:System.InvalidOperationException">设置该属性，并且 <see cref="T:System.Globalization.NumberFormatInfo" /> 是只读的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits">
      <summary>获取或设置在数值中使用的小数位数。</summary>
      <returns>在百分比值中使用的小数位数。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值为 2。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性被设置为小于 0 或大于 99 的值。</exception>
      <exception cref="T:System.InvalidOperationException">设置该属性，并且 <see cref="T:System.Globalization.NumberFormatInfo" /> 是只读的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator">
      <summary>获取或设置在百分比值中用作小数点分隔符的字符串。</summary>
      <returns>在百分比值中用作小数点分隔符的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值为"."。</returns>
      <exception cref="T:System.ArgumentNullException">该属性被设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">设置该属性，并且 <see cref="T:System.Globalization.NumberFormatInfo" /> 是只读的。</exception>
      <exception cref="T:System.ArgumentException">此属性当前设置为空字符串。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator">
      <summary>获取或设置在百分比值中对小数点左边数字进行分组的字符串。</summary>
      <returns>在百分比值中对小数点左边数字进行分组的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值为","。</returns>
      <exception cref="T:System.ArgumentNullException">该属性被设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">设置该属性，并且 <see cref="T:System.Globalization.NumberFormatInfo" /> 是只读的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentGroupSizes">
      <summary>获取或设置百分比值中小数点左边每一组的位数。</summary>
      <returns>百分比值中小数点左边的每一组的位数。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值是一个一维数组，该数组只包含一个设置为 3 的元素。</returns>
      <exception cref="T:System.ArgumentNullException">该属性被设置为 null。</exception>
      <exception cref="T:System.ArgumentException">试图设置该属性，但此数组包含一个小于 0 或大于 9 的项。 - 或 - 试图设置该属性，但此数组包含一个设置为 0 的项（最后一项除外）。</exception>
      <exception cref="T:System.InvalidOperationException">设置该属性，并且 <see cref="T:System.Globalization.NumberFormatInfo" /> 是只读的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentNegativePattern">
      <summary>获取或设置负百分比值的格式模式。</summary>
      <returns>负百分比值的格式模式。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值是 0，这表示"-n %"，其中"%"是 <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />，并且 <paramref name="n" /> 是一个数字。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性被设置为小于 0 或大于 11 的值。</exception>
      <exception cref="T:System.InvalidOperationException">设置该属性，并且 <see cref="T:System.Globalization.NumberFormatInfo" /> 是只读的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentPositivePattern">
      <summary>获取或设置正百分比值的格式模式。</summary>
      <returns>正百分比值的格式模式。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值是 0，这表示"n %"，其中"%"是 <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />，并且 <paramref name="n" /> 是一个数字。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性被设置为小于 0 或大于 3 的值。</exception>
      <exception cref="T:System.InvalidOperationException">设置该属性，并且 <see cref="T:System.Globalization.NumberFormatInfo" /> 是只读的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentSymbol">
      <summary>获取或设置用作百分比符号的字符串。</summary>
      <returns>用作百分比符号的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值为"%"。</returns>
      <exception cref="T:System.ArgumentNullException">该属性被设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">设置该属性，并且 <see cref="T:System.Globalization.NumberFormatInfo" /> 是只读的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PerMilleSymbol">
      <summary>获取或设置用作千分比符号的字符串。</summary>
      <returns>用作千分比符号的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值为"‰"，它是 Unicode 字符 U+2030。</returns>
      <exception cref="T:System.ArgumentNullException">该属性被设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">设置该属性，并且 <see cref="T:System.Globalization.NumberFormatInfo" /> 是只读的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol">
      <summary>获取或设置表示正无穷大的字符串。</summary>
      <returns>表示正无穷大的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值为"Infinity"。</returns>
      <exception cref="T:System.ArgumentNullException">该属性被设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">设置该属性，并且 <see cref="T:System.Globalization.NumberFormatInfo" /> 是只读的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PositiveSign">
      <summary>获取或设置指示关联数字是正值的字符串。</summary>
      <returns>指示关联数字是正值的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值为"+"。</returns>
      <exception cref="T:System.ArgumentNullException">在设置操作中，要分配的值为 null。</exception>
      <exception cref="T:System.InvalidOperationException">设置该属性，并且 <see cref="T:System.Globalization.NumberFormatInfo" /> 是只读的。</exception>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)">
      <summary>返回只读的 <see cref="T:System.Globalization.NumberFormatInfo" /> 包装。</summary>
      <returns>
        <paramref name="nfi" /> 周围的只读 <see cref="T:System.Globalization.NumberFormatInfo" /> 包装。</returns>
      <param name="nfi">要包装的 <see cref="T:System.Globalization.NumberFormatInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nfi" /> 为 null。</exception>
    </member>
    <member name="T:System.Globalization.NumberStyles">
      <summary>确定数字字符串参数中允许的样式，这些参数已传递到整数和浮点数类型的 Parse 和 TryParse 方法。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowCurrencySymbol">
      <summary>指示数字字符串可以包含货币符号。 有效的货币符号由 <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> 属性确定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowDecimalPoint">
      <summary>指示数字字符串可以具有小数点。 如果 <see cref="T:System.Globalization.NumberStyles" /> 值包括 <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" /> 标志，分析的字符串包括货币符号，则小数分隔符字符由 <see cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" /> 属性确定。 否则，小数分隔符由 <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" /> 属性来确定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowExponent">
      <summary>指示数字字符串用于指数符号中。 该 <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> 标志允许分析的字符串包含以“E”或“e”字符开始并且后接可选的正号或负号以及整数的指数。 换句话说，它成功地分析 nnnExx， nnnE +xx，以及 nnnE-xx 格式的字符串。 它不允许小数点分隔符或者有效数或尾数中的符号；若要允许要分析的字符串中的这些元素，请使用 <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" /> 标志，或使用包括这些个别标志的复合样式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowHexSpecifier">
      <summary>指示数值字符串表示一个十六进制值。 有效的十六进制值包括数字 0-9 和十六进制数字 A-F 和 a-f。 使用此样式分析的字符串不能带有“0x”或“&amp;h”前缀。 总是把与 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 样式一起解析的字符串解释为十六进制值。 可以与的其他标志只有 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 为 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />。 （<see cref="T:System.Globalization.NumberStyles" /> 枚举具有复合样式 <see cref="F:System.Globalization.NumberStyles.HexNumber" />，其中包含这三种标志。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowLeadingSign">
      <summary>指示数字字符串可以具有前导符号。 有效的前导符号字符是由 <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign" /> 和 <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign" /> 属性确定的。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowLeadingWhite">
      <summary>指示分析的字符串中可以存在前导空白字符。 有效的空白字符具有 Unicode 值 U+0009、U+000A、U+000B、U+000C、U+000D 和 U+0020。 请注意，这是 <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> 方法返回 true 的字符的子集。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowParentheses">
      <summary>指示数字字符串可以具有一对将数字括起来的括号。 圆括号指示待解析的字符串表示负数。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowThousands">
      <summary>指示数字字符串可以具有组分隔符，例如将百位与千位分隔开来。 如果 <see cref="T:System.Globalization.NumberStyles" /> 值包括 <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" /> 标志，要分析的字符串包括货币符号，则有效组分隔符字符由 <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" /> 属性确定，且每个组中的位数由 <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" /> 属性确定。 否则，有效的组分隔符是由 <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" /> 属性确定的，而每个组中的位数是由 <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" /> 属性确定的。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowTrailingSign">
      <summary>指示数字字符串可以具有结尾符号。 有效的结尾符号字符是由 <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign" /> 和 <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign" /> 属性确定的。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowTrailingWhite">
      <summary>指示分析的字符串中可以存在尾随空白字符。 有效的空白字符具有 Unicode 值 U+0009、U+000A、U+000B、U+000C、U+000D 和 U+0020。 请注意，这是 <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> 方法返回 true 的字符的子集。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Any">
      <summary>指示使用 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 以外的所有样式。 这是复合数字样式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Currency">
      <summary>指示使用 <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 以外的所有样式。 这是复合数字样式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Float">
      <summary>指示使用 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />、<see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> 样式。 这是复合数字样式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.HexNumber">
      <summary>指示使用 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 样式。 这是复合数字样式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Integer">
      <summary>指示使用 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" /> 样式。 这是复合数字样式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.None">
      <summary>指示没有样式元素（比如前导或尾随空白、千位分隔符或小数分隔符）可出现在分析的字符串中。 要对其进行分析的字符串必须仅包含积分小数位数。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Number">
      <summary>指示使用 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingSign" />、<see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 样式。 这是复合数字样式。</summary>
    </member>
    <member name="T:System.Globalization.RegionInfo">
      <summary>包含有关国家/地区的信息。</summary>
    </member>
    <member name="M:System.Globalization.RegionInfo.#ctor(System.String)">
      <summary>基于按名称指定的国家/地区或特定区域性初始化 <see cref="T:System.Globalization.RegionInfo" /> 类的一个新实例。</summary>
      <param name="name">一个字符串，它包含 ISO 3166 中为国家/地区定义的由两个字母组成的代码。 - 或 - 包含特定区域、自定义区域或仅 Windows 区域的区域名称的字符串。 如果区域性名称未采用 RFC 4646 格式，应用程序应指定整个区域性名称，而不是仅指定国家/地区。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 不是有效的国家/地区名称或特定的区域性名称。</exception>
    </member>
    <member name="P:System.Globalization.RegionInfo.CurrencySymbol">
      <summary>获取与国家/地区关联的货币符号。</summary>
      <returns>与国家/地区关联的货币符号。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.CurrentRegion">
      <summary>获取表示当前线程所使用的国家/地区的 <see cref="T:System.Globalization.RegionInfo" />。</summary>
      <returns>表示当前线程所使用的国家/地区的 <see cref="T:System.Globalization.RegionInfo" />。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.DisplayName">
      <summary>获取以 .NET Framework 本地化版本语言表示的国家/地区的全名。</summary>
      <returns>以 .NET Framework 本地化版本语言表示的国家/地区的全名。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.EnglishName">
      <summary>获取以英文表示的国家/地区的全名。</summary>
      <returns>以英文表示的国家/地区的全名。</returns>
    </member>
    <member name="M:System.Globalization.RegionInfo.Equals(System.Object)">
      <summary>确定指定的对象与当前 <see cref="T:System.Globalization.RegionInfo" /> 是否为同一实例。</summary>
      <returns>如果 <paramref name="value" /> 参数是 <see cref="T:System.Globalization.RegionInfo" /> 对象并且其 <see cref="P:System.Globalization.RegionInfo.Name" /> 属性与当前 <see cref="T:System.Globalization.RegionInfo" /> 对象的 <see cref="P:System.Globalization.RegionInfo.Name" /> 属性相同，则为 true；否则，为 false。</returns>
      <param name="value">将与当前 <see cref="T:System.Globalization.RegionInfo" /> 进行比较的对象。</param>
    </member>
    <member name="M:System.Globalization.RegionInfo.GetHashCode">
      <summary>用作当前 <see cref="T:System.Globalization.RegionInfo" /> 的哈希函数，适合用在哈希算法和数据结构（如哈希表）中。</summary>
      <returns>当前 <see cref="T:System.Globalization.RegionInfo" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.IsMetric">
      <summary>获取一个值，该值指示该国家/地区是否使用公制进行度量。</summary>
      <returns>如果该国家/地区使用公制进行度量，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.ISOCurrencySymbol">
      <summary>获取与国家/地区关联的由三个字符组成的 ISO 4217 货币符号。</summary>
      <returns>与国家/地区关联的由三个字符组成的 ISO 4217 货币符号。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.Name">
      <summary>获取当前 <see cref="T:System.Globalization.RegionInfo" /> 对象的名称或 ISO 3166 双字母国家/地区代码。</summary>
      <returns>
        <see cref="M:System.Globalization.RegionInfo.#ctor(System.String)" /> 构造函数的 <paramref name="name" /> 参数指定的值。 返回值为大写。 - 或 - ISO 3166 中为 <see cref="M:System.Globalization.RegionInfo.#ctor(System.Int32)" /> 构造函数的 <paramref name="culture" /> 参数指定的国家/地区定义的双字母代码。 返回值为大写。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.NativeName">
      <summary>获取一个国家/地区的名称，它使用该国家/地区的本地语言格式表示。</summary>
      <returns>该国家/地区的本地名称，它使用与 ISO 3166 国家/地区代码关联的语言格式表示。</returns>
    </member>
    <member name="M:System.Globalization.RegionInfo.ToString">
      <summary>返回一个字符串，它包含区域性名称或 ISO 3166 中为当前 <see cref="T:System.Globalization.RegionInfo" /> 指定的双字母国家/地区代码。</summary>
      <returns>一个字符串，它包含区域性名称或 ISO 3166 中为当前 <see cref="T:System.Globalization.RegionInfo" /> 定义的双字母国家/地区代码。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.TwoLetterISORegionName">
      <summary>获取在 ISO 3166 中定义的由两个字母组成的国家/地区代码。</summary>
      <returns>在 ISO 3166 中定义的由两个字母组成的国家/地区代码。</returns>
    </member>
    <member name="T:System.Globalization.StringInfo">
      <summary>提供功能将字符串拆分为文本元素并循环访问这些文本元素。</summary>
    </member>
    <member name="M:System.Globalization.StringInfo.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.StringInfo" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Globalization.StringInfo.#ctor(System.String)">
      <summary>将 <see cref="T:System.Globalization.StringInfo" /> 类的新实例初始化为指定的字符串。</summary>
      <param name="value">用于初始化此 <see cref="T:System.Globalization.StringInfo" /> 对象的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.Globalization.StringInfo.Equals(System.Object)">
      <summary>指示当前 <see cref="T:System.Globalization.StringInfo" /> 对象是否与指定的对象相等。</summary>
      <returns>如果 <paramref name="value" /> 参数是 <see cref="T:System.Globalization.StringInfo" /> 对象并且其 <see cref="P:System.Globalization.StringInfo.String" /> 属性等同于此 <see cref="T:System.Globalization.StringInfo" /> 对象的 <see cref="P:System.Globalization.StringInfo.String" /> 属性，则为 true；否则，为 false。</returns>
      <param name="value">一个对象。</param>
    </member>
    <member name="M:System.Globalization.StringInfo.GetHashCode">
      <summary>计算当前 <see cref="T:System.Globalization.StringInfo" /> 对象的值的哈希代码。</summary>
      <returns>基于此 <see cref="T:System.Globalization.StringInfo" /> 对象的字符串值的 32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Globalization.StringInfo.GetNextTextElement(System.String)">
      <summary>获取指定字符串中的第一个文本元素。</summary>
      <returns>包含指定字符串中的第一个文本元素的字符串。</returns>
      <param name="str">要从其获取文本元素的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 为 null。</exception>
    </member>
    <member name="M:System.Globalization.StringInfo.GetNextTextElement(System.String,System.Int32)">
      <summary>获取指定字符串中指定索引处的文本元素。</summary>
      <returns>包含指定字符串中指定索引处的文本元素的字符串。</returns>
      <param name="str">要从其获取文本元素的字符串。</param>
      <param name="index">文本元素开始位置的从零开始的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出了 <paramref name="str" /> 的有效索引范围。</exception>
    </member>
    <member name="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)">
      <summary>返回一个循环访问整个字符串的文本元素的枚举数。</summary>
      <returns>整个字符串的 <see cref="T:System.Globalization.TextElementEnumerator" />。</returns>
      <param name="str">要循环访问的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 为 null。</exception>
    </member>
    <member name="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)">
      <summary>返回一个枚举数，它循环访问字符串的文本元素并从指定索引处开始。</summary>
      <returns>在 <paramref name="index" /> 处开始的字符串的 <see cref="T:System.Globalization.TextElementEnumerator" />。</returns>
      <param name="str">要循环访问的字符串。</param>
      <param name="index">开始迭代处的从零开始的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出了 <paramref name="str" /> 的有效索引范围。</exception>
    </member>
    <member name="P:System.Globalization.StringInfo.LengthInTextElements">
      <summary>获取当前 <see cref="T:System.Globalization.StringInfo" /> 对象中的文本元素的数目。</summary>
      <returns>此 <see cref="T:System.Globalization.StringInfo" /> 对象中的基本字符、代理项对和组合字符序列的数目。</returns>
    </member>
    <member name="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)">
      <summary>返回指定字符串中每个基字符、高代理项或控制字符的索引。</summary>
      <returns>一个整数数组，它包含指定字符串中每个基字符、高代理项或控制字符的索引（从零开始）。</returns>
      <param name="str">要搜索的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 为 null。</exception>
    </member>
    <member name="P:System.Globalization.StringInfo.String">
      <summary>获取或设置当前 <see cref="T:System.Globalization.StringInfo" /> 对象的值。</summary>
      <returns>作为当前 <see cref="T:System.Globalization.StringInfo" /> 对象的值的字符串。</returns>
      <exception cref="T:System.ArgumentNullException">设置操作中的值为 null。</exception>
    </member>
    <member name="T:System.Globalization.TextElementEnumerator">
      <summary>枚举字符串的文本元素。</summary>
    </member>
    <member name="P:System.Globalization.TextElementEnumerator.Current">
      <summary>获取字符串中的当前文本元素。</summary>
      <returns>包含字符串中当前文本元素的对象。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数位于字符串的第一个文本元素之前或最后一个文本元素之后。</exception>
    </member>
    <member name="P:System.Globalization.TextElementEnumerator.ElementIndex">
      <summary>获取枚举数当前所在的文本元素的索引。</summary>
      <returns>枚举数当前所在的文本元素的索引。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数位于字符串的第一个文本元素之前或最后一个文本元素之后。</exception>
    </member>
    <member name="M:System.Globalization.TextElementEnumerator.GetTextElement">
      <summary>获取字符串中的当前文本元素。</summary>
      <returns>包含所读取字符串中当前文本元素的新字符串。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数位于字符串的第一个文本元素之前或最后一个文本元素之后。</exception>
    </member>
    <member name="M:System.Globalization.TextElementEnumerator.MoveNext">
      <summary>将枚举数前移到字符串的下一个文本元素。</summary>
      <returns>如果枚举数成功前移到下一个文本元素，则为 true；如果枚举数已超过字符串的结尾，则为 false。</returns>
    </member>
    <member name="M:System.Globalization.TextElementEnumerator.Reset">
      <summary>将枚举数设置为其初始位置，该位置位于字符串中第一个文本元素之前。</summary>
    </member>
    <member name="T:System.Globalization.TextInfo">
      <summary>定义特定于书写体系的文本属性和行为（如大小写）。</summary>
    </member>
    <member name="P:System.Globalization.TextInfo.CultureName">
      <summary>获取与当前 <see cref="T:System.Globalization.TextInfo" /> 对象关联的区域性的名称。</summary>
      <returns>区域性的名称。</returns>
    </member>
    <member name="M:System.Globalization.TextInfo.Equals(System.Object)">
      <summary>确定指定的对象是否与当前 <see cref="T:System.Globalization.TextInfo" /> 对象表示同一书写体系。</summary>
      <returns>如果 <paramref name="obj" /> 与当前 <see cref="T:System.Globalization.TextInfo" /> 表示同一书写体系，则为 true；否则为 false。</returns>
      <param name="obj">将与当前 <see cref="T:System.Globalization.TextInfo" /> 进行比较的对象。</param>
    </member>
    <member name="M:System.Globalization.TextInfo.GetHashCode">
      <summary>用作当前 <see cref="T:System.Globalization.TextInfo" /> 的哈希函数，适合用在哈希算法和数据结构（如哈希表）中。</summary>
      <returns>当前 <see cref="T:System.Globalization.TextInfo" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.Globalization.TextInfo.IsReadOnly">
      <summary>获取一个值，该值指示当前 <see cref="T:System.Globalization.TextInfo" /> 对象是否为只读。</summary>
      <returns>如果当前 <see cref="T:System.Globalization.TextInfo" /> 对象为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Globalization.TextInfo.ListSeparator">
      <summary>获取或设置在列表中分隔项的字符串。</summary>
      <returns>在列表中分隔项的字符串。</returns>
      <exception cref="T:System.ArgumentNullException">设置操作中的值为 null。</exception>
      <exception cref="T:System.InvalidOperationException">在设置操作中，当前 <see cref="T:System.Globalization.TextInfo" /> 对象是只读的。</exception>
    </member>
    <member name="M:System.Globalization.TextInfo.ToLower(System.Char)">
      <summary>将指定的字符转换为小写。</summary>
      <returns>转换为小写的指定字符。</returns>
      <param name="c">要转换为小写的字符。</param>
    </member>
    <member name="M:System.Globalization.TextInfo.ToLower(System.String)">
      <summary>将指定的字符串转换为小写。</summary>
      <returns>转换为小写的指定字符串。</returns>
      <param name="str">要转换为小写的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 为 null。</exception>
    </member>
    <member name="M:System.Globalization.TextInfo.ToString">
      <summary>返回表示当前 <see cref="T:System.Globalization.TextInfo" /> 的字符串。</summary>
      <returns>表示当前 <see cref="T:System.Globalization.TextInfo" /> 的字符串。</returns>
    </member>
    <member name="M:System.Globalization.TextInfo.ToUpper(System.Char)">
      <summary>将指定的字符转换为大写。</summary>
      <returns>转换为大写的指定字符。</returns>
      <param name="c">要转换为大写的字符。</param>
    </member>
    <member name="M:System.Globalization.TextInfo.ToUpper(System.String)">
      <summary>将指定的字符串转换为大写。</summary>
      <returns>转换为大写的指定字符串。</returns>
      <param name="str">要转换为大写的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 为 null。</exception>
    </member>
    <member name="T:System.Globalization.TimeSpanStyles">
      <summary>定义一些格式设置选项，这些选项可自定义 <see cref="Overload:System.TimeSpan.ParseExact" /> 和 <see cref="Overload:System.TimeSpan.TryParseExact" /> 方法的字符串分析方法。</summary>
    </member>
    <member name="F:System.Globalization.TimeSpanStyles.AssumeNegative">
      <summary>指示输入始终解释为一个负时间间隔。</summary>
    </member>
    <member name="F:System.Globalization.TimeSpanStyles.None">
      <summary>指示仅当存在一个负号时输入解释为一个负时间间隔。</summary>
    </member>
    <member name="T:System.Globalization.UnicodeCategory">
      <summary>定义字符的 Unicode 类别。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ClosePunctuation">
      <summary>成对的标点符号（例如括号、方括号和大括号）的结束字符。 由 Unicode 代码“Pe”（标点，结束）表示。 值为 21。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ConnectorPunctuation">
      <summary>连接两个字符的连接符标点字符。 由 Unicode 代码“Pc”（标点，连接符）表示。 值为 18。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.Control">
      <summary>控制代码字符，其 Unicode 值是 U+007F，或者位于 U+0000 到 U+001F 或 U+0080 到 U+009F 范围内。 由 Unicode 代码“Cc”（其他，控制）表示。 值为 14。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.CurrencySymbol">
      <summary>货币符号字符。 由 Unicode 代码“Sc”（符号，货币）表示。 值为 26。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.DashPunctuation">
      <summary>短划线或连字符字符。 由 Unicode 代码“Pd”（标点，短划线）表示。 值为 19。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.DecimalDigitNumber">
      <summary>十进制数字字符，即范围 0 到 9 内的字符。 由 Unicode 代码“Nd”（数字，十进制数字）表示。 值为 8。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.EnclosingMark">
      <summary>封闭符号字符，它将基字符前面的所有字符（包括基字符）括起来。 由 Unicode 代码“Me”（符号，封闭）表示。 值为 7。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.FinalQuotePunctuation">
      <summary>右引号或后引号字符。 由 Unicode 代码“Pf”（标点，后引号）表示。 值为 23。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.Format">
      <summary>格式字符，它影响文本布局或文本处理操作，但是它通常不会呈现。 由 Unicode 代码“Cf”（其他，格式）表示。 值为 15。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.InitialQuotePunctuation">
      <summary>左引号或前引号字符。 由 Unicode 代码“Pi”（标点，前引号）表示。 值为 22。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.LetterNumber">
      <summary>由字母表示的数字，而不是十进制数字，例如，罗马数字 5 由字母“V”表示。 此指示符由 Unicode 代码“Nl”（数字，字母）表示。 值为 9。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.LineSeparator">
      <summary>用于分隔文本各行的字符。 由 Unicode 代码“Zl”（分隔符，行）表示。 值为 12。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.LowercaseLetter">
      <summary>小写字母。 由 Unicode 代码“Ll”（字母，小写）表示。 值为 1。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.MathSymbol">
      <summary>数学符号字符，例如“+”或“=”。 由 Unicode 代码“Sm”（符号，数学）表示。 值为 25。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ModifierLetter">
      <summary>修饰符字母字符，它是独立式的间距字符，指示前面字母的修改。 由 Unicode 代码“Lm”（字母，修饰符）表示。 值为 3。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ModifierSymbol">
      <summary>修饰符符号字符，它指示环绕字符的修改。 例如，分数斜线号指示其左侧的数字为分子，右侧的数字为分母。 此指示符由 Unicode 代码“Sk”（符号，修饰符）表示。 值为 27。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.NonSpacingMark">
      <summary>指示基字符的修改的非间距字符。 由 Unicode 代码“Mn”（符号，非间距）表示。 值为 5。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OpenPunctuation">
      <summary>成对的标点符号（例如括号、方括号和大括号）的开始字符。 由 Unicode 代码“Ps”（标点，开始）表示。 值为 20。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherLetter">
      <summary>不属于大写字母、小写字母、词首字母大写或修饰符字母的字母。 由 Unicode 代码“Lo”（字母，其他）表示。 值为 4。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherNotAssigned">
      <summary>未指派给任何 Unicode 类别的字符。 由 Unicode 代码“Cn”（其他，未分配）表示。 值为 29。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherNumber">
      <summary>既不是十进制数字也不是字母数字的数字，例如分数 1/2。 此指示符由 Unicode 代码“No”（数字，其他）表示。 值为 10。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherPunctuation">
      <summary>不属于连接符、短划线、开始标点、结束标点、前引号或后引号的标点字符。 由 Unicode 代码“Po”（标点，其他）表示。 值为 24。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherSymbol">
      <summary>不属于数学符号、货币符号或修饰符符号的符号字符。 由 Unicode 代码“So”（符号，其他）表示。 值为 28。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ParagraphSeparator">
      <summary>用于分隔段落的字符。 由 Unicode 代码“Zp”（分隔符，段落）表示。 值为 13。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.PrivateUse">
      <summary>专用字符，其 Unicode 值在范围 U+E000 到 U+F8FF 内。 由 Unicode 代码“Co”（其他，专用）表示。 值为 17。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.SpaceSeparator">
      <summary>没有标志符号但不属于控制或格式字符的空白字符。 由 Unicode 代码“Zs”（分隔符，空白）表示。 值为 11。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.SpacingCombiningMark">
      <summary>间距字符，它指示基字符的修改并影响基字符的标志符号的宽度。 由 Unicode 代码“Mc”（符号，间距组合）表示。 值为 6。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.Surrogate">
      <summary>高代理项或低代理项字符。 代理项代码值在范围 U+D800 到 U+DFFF 内。 由 Unicode 代码“Cs”（其他，代理项）表示。 值为 16。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.TitlecaseLetter">
      <summary>词首字母大写的字母。 由 Unicode 代码“Lt”（字母，词首字母大写）表示。 值为 2。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.UppercaseLetter">
      <summary>大写字母。 由 Unicode 代码“Lu”（字母，大写）表示。 值为 0。</summary>
    </member>
    <member name="T:System.IO.BinaryReader">
      <summary>用特定的编码将基元数据类型读作二进制值。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream)">
      <summary>基于所指定的流和特定的 UTF-8 编码，初始化 <see cref="T:System.IO.BinaryReader" /> 类的新实例。</summary>
      <param name="input">输入流。</param>
      <exception cref="T:System.ArgumentException">该流不支持读取，为null 或已关闭。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>基于所指定的流和特定的字符编码，初始化 <see cref="T:System.IO.BinaryReader" /> 类的新实例。</summary>
      <param name="input">输入流。</param>
      <param name="encoding">要使用的字符编码。</param>
      <exception cref="T:System.ArgumentException">该流不支持读取，为null 或已关闭。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoding" /> 为 null。</exception>
    </member>
    <member name="P:System.IO.BinaryReader.BaseStream">
      <summary>公开对 <see cref="T:System.IO.BinaryReader" /> 的基础流的访问。</summary>
      <returns>与 BinaryReader 关联的基础流。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.BinaryReader.Dispose">
      <summary>释放由 <see cref="T:System.IO.BinaryReader" /> 类的当前实例占用的所有资源。</summary>
    </member>
    <member name="M:System.IO.BinaryReader.Dispose(System.Boolean)">
      <summary>释放 <see cref="T:System.IO.BinaryReader" /> 类使用的非托管资源，并可以选择释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
      <summary>用从流中读取的指定字节数填充内部缓冲区。</summary>
      <param name="numBytes">要读取的字节数。</param>
      <exception cref="T:System.IO.EndOfStreamException">在可以读取 <paramref name="numBytes" /> 之前到达了流的末尾。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">请求的 <paramref name="numBytes" /> 大于内部缓冲区大小。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.PeekChar">
      <summary>返回下一个可用的字符，并且不提升字节或字符的位置。</summary>
      <returns>下一个可用的字符，或者，如果没有可用字符或者流不支持查找时为 -1。</returns>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.ArgumentException">当前字符无法通过使用为该流选择的 <see cref="T:System.Text.Encoding" /> 解码到内部字符缓冲区中。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.BinaryReader.Read">
      <summary>从基础流中读取字符，并根据所使用的 Encoding 和从流中读取的特定字符，提升流的当前位置。</summary>
      <returns>输入流中的下一个字符，如果当前无可用字符则为 -1。</returns>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>从字节数组中的指定点开始，从流中读取指定的字节数。</summary>
      <returns>读入 <paramref name="buffer" /> 的字节数。 如果可用的字节没有请求的那么多，此数可能小于所请求的字节数；如果到达了流的末尾，此数可能为零。</returns>
      <param name="buffer">要读入数据的缓冲区。</param>
      <param name="index">缓冲区中的起始点，在该处开始读入缓冲区。</param>
      <param name="count">要读取的字节数。</param>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。 - 或 - 要读取的解码字符数大于 <paramref name="count" />。 如果 Unicode 解码器返回回退字符或代理项对，则可能发生此情况。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>从字符数组中的指定点开始，从流中读取指定的字符数。</summary>
      <returns>读入缓冲区的总字符数。 如果当前可用的字节没有请求的那么多，此数可能小于所请求的字符数；如果到达了流的末尾，此数可能为零。</returns>
      <param name="buffer">要读入数据的缓冲区。</param>
      <param name="index">缓冲区中的起始点，在该处开始读入缓冲区。</param>
      <param name="count">要读取的字符数。</param>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。 - 或 - 要读取的解码字符数大于 <paramref name="count" />。 如果 Unicode 解码器返回回退字符或代理项对，则可能发生此情况。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.BinaryReader.Read7BitEncodedInt">
      <summary>以压缩格式读入 32 位整数。</summary>
      <returns>压缩格式的 32 位整数。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.FormatException">流已损坏。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadBoolean">
      <summary>从当前流中读取 Boolean 值，并使该流的当前位置提升 1 个字节。</summary>
      <returns>如果字节为非零则为 true，否则为 false。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.BinaryReader.ReadByte">
      <summary>从当前流中读取下一个字节，并使流的当前位置提升 1 个字节。</summary>
      <returns>从当前流中读取的下一个字节。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
      <summary>从当前流中读取指定的字节数以写入字节数组中，并将当前位置前移相应的字节数。</summary>
      <returns>包含从基础流中读取的数据的字节数组。 如果到达了流的末尾，则该字节数组可能小于所请求的字节数。</returns>
      <param name="count">要读取的字节数。</param>
      <exception cref="T:System.ArgumentException">要读取的解码字符数大于 <paramref name="count" />。 如果 Unicode 解码器返回回退字符或代理项对，则可能发生此情况。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 为负数。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.BinaryReader.ReadChar">
      <summary>从当前流中读取下一个字符，并根据所使用的 Encoding 和从流中读取的特定字符，提升流的当前位置。</summary>
      <returns>从当前流中读取的字符。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.ArgumentException">读取了一个代理项字符。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.BinaryReader.ReadChars(System.Int32)">
      <summary>从当前流中读取指定的字符数，并以字符数组的形式返回数据，然后根据所使用的 Encoding 和从流中读取的特定字符，将当前位置前移。</summary>
      <returns>包含从基础流中读取的数据的字节数组。 如果到达了流的末尾，则该字符数组可能小于所请求的字符数。</returns>
      <param name="count">要读取的字符数。</param>
      <exception cref="T:System.ArgumentException">要读取的解码字符数大于 <paramref name="count" />。 如果 Unicode 解码器返回回退字符或代理项对，则可能发生此情况。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 为负数。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.BinaryReader.ReadDecimal">
      <summary>从当前流中读取十进制数值，并将该流的当前位置提升十六个字节。</summary>
      <returns>从当前流中读取的十进制数值。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.BinaryReader.ReadDouble">
      <summary>从当前流中读取 8 字节浮点值，并使流的当前位置提升 8 个字节。</summary>
      <returns>从当前流中读取的 8 字节浮点值。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt16">
      <summary>从当前流中读取 2 字节有符号整数，并使流的当前位置提升 2 个字节。</summary>
      <returns>从当前流中读取的 2 字节有符号整数。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt32">
      <summary>从当前流中读取 4 字节有符号整数，并使流的当前位置提升 4 个字节。</summary>
      <returns>从当前流中读取的 4 字节有符号整数。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt64">
      <summary>从当前流中读取 8 字节有符号整数，并使流的当前位置向前移动 8 个字节。</summary>
      <returns>从当前流中读取的 8 字节有符号整数。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.BinaryReader.ReadSByte">
      <summary>从此流中读取一个有符号字节，并使流的当前位置提升 1 个字节。</summary>
      <returns>从当前流中读取的一个有符号字节。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.BinaryReader.ReadSingle">
      <summary>从当前流中读取 4 字节浮点值，并使流的当前位置提升 4 个字节。</summary>
      <returns>从当前流中读取的 4 字节浮点值。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.BinaryReader.ReadString">
      <summary>从当前流中读取一个字符串。 字符串有长度前缀，一次 7 位地被编码为整数。</summary>
      <returns>正被读取的字符串。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt16">
      <summary>使用 Little-Endian 编码从当前流中读取 2 字节无符号整数，并将流的位置提升 2 个字节。</summary>
      <returns>从该流中读取的 2 字节无符号整数。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt32">
      <summary>从当前流中读取 4 字节无符号整数并使流的当前位置提升 4 个字节。</summary>
      <returns>从该流中读取的 4 字节无符号整数。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt64">
      <summary>从当前流中读取 8 字节无符号整数并使流的当前位置提升 8 个字节。</summary>
      <returns>从该流中读取的 8 字节无符号整数。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IO.BinaryWriter">
      <summary>以二进制形式将基元类型写入流，并支持用特定的编码写入字符串。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor">
      <summary>初始化向流中写入的 <see cref="T:System.IO.BinaryWriter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream)">
      <summary>基于所指定的流和特定的 UTF-8 编码，初始化 <see cref="T:System.IO.BinaryWriter" /> 类的新实例。</summary>
      <param name="output">输出流。</param>
      <exception cref="T:System.ArgumentException">该流不支持写入或者该流已关闭。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> 为 null。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>基于所指定的流和特定的字符编码，初始化 <see cref="T:System.IO.BinaryWriter" /> 类的新实例。</summary>
      <param name="output">输出流。</param>
      <param name="encoding">要使用的字符编码。</param>
      <exception cref="T:System.ArgumentException">该流不支持写入或者该流已关闭。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> 或 <paramref name="encoding" /> 为 null。</exception>
    </member>
    <member name="P:System.IO.BinaryWriter.BaseStream">
      <summary>获取 <see cref="T:System.IO.BinaryWriter" /> 的基础流。</summary>
      <returns>与 BinaryWriter 关联的基础流。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.BinaryWriter.Dispose">
      <summary>释放由 <see cref="T:System.IO.BinaryWriter" /> 类的当前实例占用的所有资源。</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.IO.BinaryWriter" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Flush">
      <summary>清理当前编写器的所有缓冲区，使所有缓冲数据写入基础设备。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.IO.BinaryWriter.Null">
      <summary>指定无后备存储区的 <see cref="T:System.IO.BinaryWriter" />。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.IO.BinaryWriter.OutStream">
      <summary>持有基础流。</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
      <summary>设置当前流中的位置。</summary>
      <returns>包含当前流的位置。</returns>
      <param name="offset">相对于 <paramref name="origin" /> 的字节偏移量。</param>
      <param name="origin">
        <see cref="T:System.IO.SeekOrigin" /> 的一个字段，指示获取新位置所依据的参考点。</param>
      <exception cref="T:System.IO.IOException">文件指针被移到无效位置。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.IO.SeekOrigin" /> 值无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Boolean)">
      <summary>将单字节 Boolean 值写入当前流，其中 0 表示 false，1 表示 true。</summary>
      <param name="value">要写入的 Boolean 值（0 或 1）。</param>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte)">
      <summary>将一个无符号字节写入当前流，并将流的位置提升 1 个字节。</summary>
      <param name="value">要写入的无符号字节。</param>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte[])">
      <summary>将字节数组写入基础流。</summary>
      <param name="buffer">包含要写入的数据的字节数组。</param>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>将字节数组部分写入当前流。</summary>
      <param name="buffer">包含要写入的数据的字节数组。</param>
      <param name="index">
        <paramref name="buffer" /> 中开始写入的起始点。</param>
      <param name="count">要写入的字节数。</param>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char)">
      <summary>将 Unicode 字符写入当前流，并根据所使用的 Encoding 和向流中写入的特定字符，提升流的当前位置。</summary>
      <param name="ch">要写入的非代理项 Unicode 字符。</param>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ch" /> 是单一代理项字符。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char[])">
      <summary>将字符数组写入当前流，并根据所使用的 Encoding 和向流中写入的特定字符，提升流的当前位置。</summary>
      <param name="chars">包含要写入的数据的字符数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 为 null。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>将字符数组部分写入当前流，并根据所使用的 Encoding（可能还根据向流中写入的特定字符），提升流的当前位置。</summary>
      <param name="chars">包含要写入的数据的字符数组。</param>
      <param name="index">
        <paramref name="chars" /> 中开始写入的起始点。</param>
      <param name="count">要写入的字符数。</param>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Decimal)">
      <summary>将一个十进制值写入当前流，并将流位置提升十六个字节。</summary>
      <param name="value">要写入的十进制值。</param>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Double)">
      <summary>将 8 字节浮点值写入当前流，并将流的位置提升 8 个字节。</summary>
      <param name="value">要写入的 8 字节浮点值。</param>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int16)">
      <summary>将 2 字节有符号整数写入当前流，并将流的位置提升 2 个字节。</summary>
      <param name="value">要写入的 2 字节有符号整数。</param>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int32)">
      <summary>将 4 字节有符号整数写入当前流，并将流的位置提升 4 个字节。</summary>
      <param name="value">要写入的 4 字节有符号整数。</param>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int64)">
      <summary>将 8 字节有符号整数写入当前流，并将流的位置提升 8 个字节。</summary>
      <param name="value">要写入的 8 字节有符号整数。</param>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.SByte)">
      <summary>将一个有符号字节写入当前流，并将流的位置提升 1 个字节。</summary>
      <param name="value">要写入的有符号字节。</param>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Single)">
      <summary>将 4 字节浮点值写入当前流，并将流的位置提升 4 个字节。</summary>
      <param name="value">要写入的 4 字节浮点值。</param>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.String)">
      <summary>将有长度前缀的字符串按 <see cref="T:System.IO.BinaryWriter" /> 的当前编码写入此流，并根据所使用的编码和写入流的特定字符，提升流的当前位置。</summary>
      <param name="value">要写入的值。</param>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt16)">
      <summary>将 2 字节无符号整数写入当前流，并将流的位置提升 2 个字节。</summary>
      <param name="value">要写入的 2 字节无符号整数。</param>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt32)">
      <summary>将 4 字节无符号整数写入当前流，并将流的位置提升 4 个字节。</summary>
      <param name="value">要写入的 4 字节无符号整数。</param>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt64)">
      <summary>将 8 字节无符号整数写入当前流，并将流的位置提升 8 个字节。</summary>
      <param name="value">要写入的 8 字节无符号整数。</param>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
      <summary>以压缩格式写出 32 位整数。</summary>
      <param name="value">要写出的 32 位整数。</param>
      <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">流已关闭。</exception>
    </member>
    <member name="T:System.IO.EndOfStreamException">
      <summary>读操作试图超出流的末尾时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor">
      <summary>初始化 <see cref="T:System.IO.EndOfStreamException" /> 类的新实例，将其消息字符串设置为系统提供的消息，其 HRESULT 设置为 COR_E_ENDOFSTREAM。</summary>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.IO.EndOfStreamException" /> 类的新实例，使其消息字符串设置为 <paramref name="message" />，其 HRESULT 设置为 COR_E_ENDOFSTREAM。</summary>
      <param name="message">描述错误的字符串。 <paramref name="message" /> 的内容被设计为人可理解的形式。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IO.EndOfStreamException" /> 类的新实例。</summary>
      <param name="message">描述错误的字符串。 <paramref name="message" /> 的内容被设计为人可理解的形式。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.IO.FileNotFoundException">
      <summary>尝试访问磁盘上不存在的文件失败时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor">
      <summary>初始化 <see cref="T:System.IO.FileNotFoundException" /> 类的新实例，使其消息字符串设置为系统所提供的消息，其 HRESULT 设置为 COR_E_FILENOTFOUND。</summary>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.IO.FileNotFoundException" /> 类的新实例，使其消息字符串设置为 <paramref name="message" />，其 HRESULT 设置为 COR_E_FILENOTFOUND。</summary>
      <param name="message">错误说明。 <paramref name="message" /> 的内容被设计为人可理解的形式。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对导致此异常的内部异常的引用来初始化 <see cref="T:System.IO.FileNotFoundException" /> 类的新实例。</summary>
      <param name="message">错误说明。 <paramref name="message" /> 的内容被设计为人可理解的形式。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.IO.FileNotFoundException" /> 类的新实例，使其消息字符串设置为 <paramref name="message" />（用于指定无法找到的文件名），其 HRESULT 设置为 COR_E_FILENOTFOUND。</summary>
      <param name="message">错误说明。 <paramref name="message" /> 的内容被设计为人可理解的形式。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="fileName">包含无效图像的文件的全名。</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.String,System.Exception)">
      <summary>使用指定错误消息和对导致此异常的内部异常的引用来初始化 <see cref="T:System.IO.FileNotFoundException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="fileName">包含无效图像的文件的全名。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="P:System.IO.FileNotFoundException.FileName">
      <summary>获取无法找到的文件的名称。</summary>
      <returns>文件的名称，如果没有将文件名传递给此实例的构造函数，则为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.FileNotFoundException.Message">
      <summary>获取解释异常原因的错误消息。</summary>
      <returns>错误消息。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.FileNotFoundException.ToString">
      <summary>返回该异常的完全限定名，还可能返回错误消息、内部异常的名称和堆栈跟踪。</summary>
      <returns>此异常的完全限定名，还可能包含错误消息、内部异常的名称和堆栈跟踪。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="T:System.IO.IOException">
      <summary>发生 I/O 错误时引发的异常。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.IOException.#ctor">
      <summary>初始化 <see cref="T:System.IO.IOException" /> 类的新实例，使其消息字符串设置为空字符串 ("")，其 HRESULT 设置为 COR_E_IO，而其内部异常设置为空引用。</summary>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.IO.IOException" /> 类的新实例，使其消息字符串设置为 <paramref name="message" />，其 HRESULT 设置为 COR_E_IO，而其内部异常设置为 null。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。 <paramref name="message" /> 的内容被设计为人可理解的形式。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IO.IOException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String,System.Int32)">
      <summary>初始化 <see cref="T:System.IO.IOException" /> 类的新实例，使其消息字符串设置为 <paramref name="message" />，而其 HRESULT 由用户定义。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。 <paramref name="message" /> 的内容被设计为人可理解的形式。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="hresult">标识已发生的错误的整数。</param>
    </member>
    <member name="T:System.IO.MemoryStream">
      <summary>创建其支持存储区为内存的流。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor">
      <summary>使用初始化为零的可扩展容量初始化 <see cref="T:System.IO.MemoryStream" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[])">
      <summary>基于指定的字节数组初始化 <see cref="T:System.IO.MemoryStream" /> 类的无法调整大小的新实例。</summary>
      <param name="buffer">从中创建当前流的无符号字节数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)">
      <summary>使用按指定要求设置的 <see cref="P:System.IO.MemoryStream.CanWrite" /> 属性基于指定的字节数组初始化 <see cref="T:System.IO.MemoryStream" /> 类的无法调整大小的新实例。</summary>
      <param name="buffer">从中创建该流的无符号字节数组。</param>
      <param name="writable">
        <see cref="P:System.IO.MemoryStream.CanWrite" /> 属性的设置，确定流是否支持写入。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>基于字节数组的指定区域（索引）初始化 <see cref="T:System.IO.MemoryStream" /> 类的无法调整大小的新实例。</summary>
      <param name="buffer">从中创建该流的无符号字节数组。</param>
      <param name="index">
        <paramref name="buffer" /> 内的索引，流从此处开始。</param>
      <param name="count">流的长度（以字节为单位）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>使用按指定要求设置的 <see cref="P:System.IO.MemoryStream.CanWrite" /> 属性基于字节数组的指定区域初始化 <see cref="T:System.IO.MemoryStream" /> 类的无法调整大小的新实例。</summary>
      <param name="buffer">从中创建该流的无符号字节数组。</param>
      <param name="index">
        <paramref name="buffer" /> 内的索引，流从此处开始。</param>
      <param name="count">流的长度（以字节为单位）。</param>
      <param name="writable">
        <see cref="P:System.IO.MemoryStream.CanWrite" /> 属性的设置，确定流是否支持写入。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负。</exception>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Int32)">
      <summary>使用按指定要求初始化的可扩展容量初始化 <see cref="T:System.IO.MemoryStream" /> 类的新实例。</summary>
      <param name="capacity">内部数组的初始大小（以字节为单位）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 为负。</exception>
    </member>
    <member name="P:System.IO.MemoryStream.CanRead">
      <summary>获取一个值，该值指示当前流是否支持读取。</summary>
      <returns>如果流是打开的，则为 true。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.MemoryStream.CanSeek">
      <summary>获取一个值，该值指示当前流是否支持查找。</summary>
      <returns>如果流是打开的，则为 true。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.MemoryStream.CanWrite">
      <summary>获取一个值，该值指示当前流是否支持写入。</summary>
      <returns>如果流支持写入，为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.MemoryStream.Capacity">
      <summary>获取或设置分配给该流的字节数。</summary>
      <returns>流的缓冲区可使用部分的长度。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">容量设置为负或小于流的当前长度。</exception>
      <exception cref="T:System.ObjectDisposedException">当前流已关闭。</exception>
      <exception cref="T:System.NotSupportedException">对不能修改其容量的流调用 set。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.MemoryStream.Dispose(System.Boolean)">
      <summary>释放 <see cref="T:System.IO.MemoryStream" /> 类使用的非托管资源，并可以选择释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.IO.MemoryStream.Flush">
      <summary>重写 <see cref="M:System.IO.Stream.Flush" /> 方法以便不执行任何操作。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.MemoryStream.Length">
      <summary>获取用字节表示的流长度。</summary>
      <returns>流的长度（以字节为单位）。</returns>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.MemoryStream.Position">
      <summary>获取或设置流中的当前位置。</summary>
      <returns>流中的当前位置。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">此位置设置为负值或大于 <see cref="F:System.Int32.MaxValue" /> 的值。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>从当前流中读取字节块并将数据写入缓冲区中。</summary>
      <returns>写入缓冲区中的总字节数。 如果当前可用字节数不到所请求的字节数，则这一总字节数可能小于所请求的字节数，或者如果在读取任何字节前已到达流的末尾，则为零。</returns>
      <param name="buffer">当此方法返回时，包含指定的字节数组，该数组中从 <paramref name="offset" /> 到 (<paramref name="offset" /> + <paramref name="count" /> -1) 之间的值由从当前流中读取的字符替换。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始存储从当前流中的数据。</param>
      <param name="count">最多读取的字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负。</exception>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="offset" /> 的结果小于 <paramref name="count" />。</exception>
      <exception cref="T:System.ObjectDisposedException">当前流实例已关闭。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.MemoryStream.ReadByte">
      <summary>从当前流中读取一个字节。</summary>
      <returns>强制转换为 <see cref="T:System.Int32" /> 的字节；或者如果已到达流的末尾，则为 -1。</returns>
      <exception cref="T:System.ObjectDisposedException">当前流实例已关闭。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>将当前流中的位置设置为指定值。</summary>
      <returns>流内的新位置，通过将初始参考点和偏移量合并计算而得。</returns>
      <param name="offset">流内的新位置。 它是相对于 <paramref name="loc" /> 参数的位置，而且可正可负。</param>
      <param name="loc">类型 <see cref="T:System.IO.SeekOrigin" /> 的值，它用作查找参考点。</param>
      <exception cref="T:System.IO.IOException">试图在流的开始位置之前查找。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.IO.SeekOrigin" /> 无效。 - 或 - <paramref name="offset" /> 导致算法溢出。</exception>
      <exception cref="T:System.ObjectDisposedException">当前流实例已关闭。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.MemoryStream.SetLength(System.Int64)">
      <summary>将当前流的长度设为指定值。</summary>
      <param name="value">值，通过该值设置长度。</param>
      <exception cref="T:System.NotSupportedException">当前流无法调整大小，而且 <paramref name="value" /> 大于当前容量。 - 或 - 当前流不支持写入。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 为负或者大于 <see cref="T:System.IO.MemoryStream" /> 的最大长度，其中最大长度为 (<see cref="F:System.Int32.MaxValue" />- origin)，origin 为基础缓冲区中作为流的起点的索引。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.MemoryStream.ToArray">
      <summary>将流内容写入字节数组，而与 <see cref="P:System.IO.MemoryStream.Position" /> 属性无关。</summary>
      <returns>新字节数组。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>使用从某个缓冲区读取的数据将字节块写入当前流。</summary>
      <param name="buffer">从中写入数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</param>
      <param name="count">最多写入的字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">流不支持写入。 有关其他信息，请参见 <see cref="P:System.IO.Stream.CanWrite" />。 - 或 - 当前位置到流结尾的距离小于 <paramref name="count" /> 字节，并且无法修改容量。</exception>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="offset" /> 的结果小于 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">当前流实例已关闭。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.MemoryStream.WriteByte(System.Byte)">
      <summary>将一个字节写入当前流中的当前位置。</summary>
      <param name="value">写入的字节。</param>
      <exception cref="T:System.NotSupportedException">流不支持写入。 有关其他信息，请参见 <see cref="P:System.IO.Stream.CanWrite" />。 - 或 - 当前位置位于流的末尾，而且容量不能被修改。</exception>
      <exception cref="T:System.ObjectDisposedException">当前流已关闭。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.MemoryStream.WriteTo(System.IO.Stream)">
      <summary>将此内存流的整个内容写入另一个流中。</summary>
      <param name="stream">要将此内存流写入的流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
      <exception cref="T:System.ObjectDisposedException">当前流或目标流已关闭。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IO.SeekOrigin">
      <summary>指定在流的位置以查找使用。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IO.SeekOrigin.Begin">
      <summary>指定流的开头。</summary>
    </member>
    <member name="F:System.IO.SeekOrigin.Current">
      <summary>指定流内的当前位置。</summary>
    </member>
    <member name="F:System.IO.SeekOrigin.End">
      <summary>指定流的结尾。</summary>
    </member>
    <member name="T:System.IO.Stream">
      <summary>提供字节序列的一般视图。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Stream.#ctor">
      <summary>初始化 <see cref="T:System.IO.Stream" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步读操作。 （考虑使用<see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" />进行替换；请参见“备注”部分。）</summary>
      <returns>表示异步读取的 <see cref="T:System.IAsyncResult" />（可能仍处于挂起状态）。</returns>
      <param name="buffer">数据读入的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的字节偏移量，从该偏移量开始写入从流中读取的数据。</param>
      <param name="count">最多读取的字节数。</param>
      <param name="callback">可选的异步回调，在完成读取时调用。</param>
      <param name="state">一个用户提供的对象，它将该特定的异步读取请求与其他请求区别开来。</param>
      <exception cref="T:System.IO.IOException">尝试的异步读取超过了流的结尾，或者发生了磁盘错误。</exception>
      <exception cref="T:System.ArgumentException">一个或多个参数无效。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
      <exception cref="T:System.NotSupportedException">当前 Stream 实现不支持读取操作。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步写操作。 （考虑使用<see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" />进行替换；请参见“备注”部分。）</summary>
      <returns>表示异步写入的 IAsyncResult（可能仍处于挂起状态）。</returns>
      <param name="buffer">从中写入数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的字节偏移量，从此处开始写入。</param>
      <param name="count">最多写入的字节数。</param>
      <param name="callback">可选的异步回调，在完成写入时调用。</param>
      <param name="state">一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。</param>
      <exception cref="T:System.IO.IOException">尝试进行的异步写入超过了流的结尾，或者发生了磁盘错误。</exception>
      <exception cref="T:System.ArgumentException">一个或多个参数无效。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
      <exception cref="T:System.NotSupportedException">当前 Stream 实现不支持写入操作。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Stream.CanRead">
      <summary>当在派生类中重写时，获取指示当前流是否支持读取的值。</summary>
      <returns>如果流支持读取，为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Stream.CanSeek">
      <summary>当在派生类中重写时，获取指示当前流是否支持查找功能的值。</summary>
      <returns>如果流支持查找，为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Stream.CanTimeout">
      <summary>获取一个值，该值确定当前流是否可以超时。</summary>
      <returns>一个确定当前流是否可以超时的值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Stream.CanWrite">
      <summary>当在派生类中重写时，获取指示当前流是否支持写入功能的值。</summary>
      <returns>如果流支持写入，为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Stream.CopyTo(System.IO.Stream)">
      <summary>从当前流中读取字节并将其写入到另一流中。</summary>
      <param name="destination">当前流的内容将复制到的流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">当前流不支持读取。 - 或 - <paramref name="destination" /> 不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException">在调用 <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> 方法前当前流或 <paramref name="destination" /> 已关闭。</exception>
      <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
      <summary>从当前流中读取字节并将其写入到另一流中（使用指定的缓冲区大小）。</summary>
      <param name="destination">当前流的内容将复制到的流。</param>
      <param name="bufferSize">缓冲区的大小。 此值必须大于零。 默认大小为 4096。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 为负或为零。</exception>
      <exception cref="T:System.NotSupportedException">当前流不支持读取。 - 或 - <paramref name="destination" /> 不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException">在调用 <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> 方法前当前流或 <paramref name="destination" /> 已关闭。</exception>
      <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.Stream.Dispose">
      <summary>释放由 <see cref="T:System.IO.Stream" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.IO.Stream.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.IO.Stream" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.IO.Stream.EndRead(System.IAsyncResult)">
      <summary>等待挂起的异步读取完成。 （考虑使用<see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" />进行替换；请参见“备注”部分。）</summary>
      <returns>从流中读取的字节数，介于零 (0) 和所请求的字节数之间。 流仅在流的末尾返回零 (0)，否则应一直阻止到至少有 1 个字节可用为止。</returns>
      <param name="asyncResult">对要完成的挂起异步请求的引用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">处于挂起状态的读取操作的句柄不可用。 - 或 - 悬挂操作不支持读取。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="asyncResult" /> 并非源自当前流上的 <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.IO.IOException">此流关闭或发生内部错误。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
      <summary>结束异步写操作。 （考虑使用<see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" />进行替换；请参见“备注”部分。）</summary>
      <param name="asyncResult">对未完成的异步 I/O 请求的引用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">处于挂起状态的写入操作的句柄不可用。 - 或 - 悬挂操作不支持写入。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="asyncResult" /> 并非源自当前流上的 <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.IO.IOException">此流关闭或发生内部错误。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Stream.Flush">
      <summary>当在派生类中重写时，将清除该流的所有缓冲区，并使得所有缓冲数据被写入到基础设备。</summary>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Stream.Length">
      <summary>当在派生类中重写时，获取用字节表示的流长度。</summary>
      <returns>用字节表示流长度的长值。</returns>
      <exception cref="T:System.NotSupportedException">从 Stream 派生的类不支持查找。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.IO.Stream.Null">
      <summary>无后备存储区的 Stream。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Stream.Position">
      <summary>当在派生类中重写时，获取或设置当前流中的位置。</summary>
      <returns>流中的当前位置。</returns>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.NotSupportedException">流不支持查找。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>当在派生类中重写时，从当前流读取字节序列，并将此流中的位置提升读取的字节数。</summary>
      <returns>读入缓冲区中的总字节数。 如果当前可用的字节数没有请求的字节数那么多，则总字节数可能小于请求的字节数，或者如果已到达流的末尾，则为零 (0)。</returns>
      <param name="buffer">字节数组。 此方法返回时，该缓冲区包含指定的字符数组，该数组的 <paramref name="offset" /> 和 (<paramref name="offset" /> + <paramref name="count" /> -1) 之间的值由从当前源中读取的字节替换。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始存储从当前流中读取的数据。</param>
      <param name="count">要从当前流中最多读取的字节数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 与 <paramref name="count" /> 的和大于缓冲区长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.NotSupportedException">流不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Stream.ReadByte">
      <summary>从流中读取一个字节，并将流内的位置向前推进一个字节，或者如果已到达流的末尾，则返回 -1。</summary>
      <returns>转换为 Int32 的无符号字节，或者如果到达流的末尾，则为 -1。</returns>
      <exception cref="T:System.NotSupportedException">流不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Stream.ReadTimeout">
      <summary>获取或设置一个值（以毫秒为单位），该值确定流在超时前尝试读取多长时间。</summary>
      <returns>一个确定流在超时前尝试读取多长时间的值（以毫秒为单位）。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IO.Stream.ReadTimeout" /> 方法总是引发 <see cref="T:System.InvalidOperationException" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>当在派生类中重写时，设置当前流中的位置。</summary>
      <returns>当前流中的新位置。</returns>
      <param name="offset">相对于 <paramref name="origin" /> 参数的字节偏移量。</param>
      <param name="origin">
        <see cref="T:System.IO.SeekOrigin" /> 类型的值，指示用于获取新位置的参考点。</param>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.NotSupportedException">流不支持查找，例如在流通过管道或控制台输出构造的情况下即为如此。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Stream.SetLength(System.Int64)">
      <summary>当在派生类中重写时，设置当前流的长度。</summary>
      <param name="value">所需的当前流的长度（以字节表示）。</param>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.NotSupportedException">流不支持写入和查找，例如在流通过管道或控制台输出构造的情况下即为如此。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>当在派生类中重写时，向当前流中写入字节序列，并将此流中的当前位置提升写入的字节数。</summary>
      <param name="buffer">字节数组。 此方法将 <paramref name="count" /> 个字节从 <paramref name="buffer" /> 复制到当前流。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</param>
      <param name="count">要写入当前流的字节数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Stream.WriteByte(System.Byte)">
      <summary>将一个字节写入流内的当前位置，并将流内的位置向前推进一个字节。</summary>
      <param name="value">要写入流的字节。</param>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.NotSupportedException">该流不支持写入，或者该流已关闭。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Stream.WriteTimeout">
      <summary>获取或设置一个值（以毫秒为单位），该值确定流在超时前尝试写入多长时间。</summary>
      <returns>一个确定流在超时前尝试写入多长时间的值（以毫秒为单位）。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IO.Stream.WriteTimeout" /> 方法总是引发 <see cref="T:System.InvalidOperationException" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IO.StreamReader">
      <summary>实现一个 <see cref="T:System.IO.TextReader" />，使其以一种特定的编码从字节流中读取字符。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream)">
      <summary>为指定的流初始化 <see cref="T:System.IO.StreamReader" /> 类的新实例。</summary>
      <param name="stream">要读取的流。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不支持读取。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Boolean)">
      <summary>用指定的字节顺序标记检测选项，为指定的流初始化 <see cref="T:System.IO.StreamReader" /> 类的一个新实例。</summary>
      <param name="stream">要读取的流。</param>
      <param name="detectEncodingFromByteOrderMarks">指示是否在文件头查找字节顺序标记。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不支持读取。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>用指定的字符编码为指定的流初始化 <see cref="T:System.IO.StreamReader" /> 类的一个新实例。</summary>
      <param name="stream">要读取的流。</param>
      <param name="encoding">要使用的字符编码。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不支持读取。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="encoding" /> 为 null。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>为指定的流初始化 <see cref="T:System.IO.StreamReader" /> 类的新实例，带有指定的字符编码和字节顺序标记检测选项。</summary>
      <param name="stream">要读取的流。</param>
      <param name="encoding">要使用的字符编码。</param>
      <param name="detectEncodingFromByteOrderMarks">指示是否在文件头查找字节顺序标记。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不支持读取。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="encoding" /> 为 null。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
      <summary>为指定的流初始化 <see cref="T:System.IO.StreamReader" /> 类的新实例，带有指定的字符编码、字节顺序标记检测选项和缓冲区大小。</summary>
      <param name="stream">要读取的流。</param>
      <param name="encoding">要使用的字符编码。</param>
      <param name="detectEncodingFromByteOrderMarks">指示是否在文件头查找字节顺序标记。</param>
      <param name="bufferSize">最小缓冲区大小。</param>
      <exception cref="T:System.ArgumentException">流不支持读取。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="encoding" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 小于或等于零。</exception>
    </member>
    <member name="P:System.IO.StreamReader.BaseStream">
      <summary>返回基础流。</summary>
      <returns>基础流。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.StreamReader.CurrentEncoding">
      <summary>获取当前 <see cref="T:System.IO.StreamReader" /> 对象正在使用的当前字符编码。</summary>
      <returns>当前读取器所使用的当前字符编码。 第一次调用 <see cref="T:System.IO.StreamReader" /> 的任何 <see cref="Overload:System.IO.StreamReader.Read" /> 方法后，该值可能会不同，因为直到第一次调用 <see cref="Overload:System.IO.StreamReader.Read" /> 方法时，才会进行编码的自动检测。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.StreamReader.DiscardBufferedData">
      <summary>清除内部缓冲区。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.StreamReader.Dispose(System.Boolean)">
      <summary>关闭基础流，释放 <see cref="T:System.IO.StreamReader" /> 使用的未托管资源，同时还可以根据需要释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="P:System.IO.StreamReader.EndOfStream">
      <summary>获取一个值，该值表示当前的流位置是否在流的末尾。</summary>
      <returns>如果当前的流位置在流的末尾，则为 true；否则为 false。</returns>
      <exception cref="T:System.ObjectDisposedException">基础流已释放。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.IO.StreamReader.Null">
      <summary>空流周围的 <see cref="T:System.IO.StreamReader" />。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.StreamReader.Peek">
      <summary>返回下一个可用的字符，但不使用它。</summary>
      <returns>表示下一个要读取的字符的整数，或者，如果没有要读取的字符或该流不支持查找，则为 -1。</returns>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.StreamReader.Read">
      <summary>读取输入流中的下一个字符并使该字符的位置提升一个字符。</summary>
      <returns>输入流中表示为 <see cref="T:System.Int32" /> 对象的下一个字符。如果不再有可用的字符，则为 -1。</returns>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>从当前流中将指定的最多个字符读到指定索引位置开始的缓冲区。</summary>
      <returns>已读取的字符数，或者如果已到达流的末尾并且未读取任何数据，则为 0。 该数小于或等于 <paramref name="count" /> 参数，具体取决于流中是否有可用的数据。</returns>
      <param name="buffer">此方法返回时，包含指定的字符数组，该数组的 <paramref name="index" /> 和 (<paramref name="index + count - 1" />) 之间的值由从当前源中读取的字符替换。</param>
      <param name="index">开始写入的 <paramref name="buffer" /> 的索引。</param>
      <param name="count">最多读取的字符数。</param>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误，如流被关闭。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.StreamReader.ReadLine">
      <summary>从当前流中读取一行字符并将数据作为字符串返回。</summary>
      <returns>输入流中的下一行；如果到达了输入流的末尾，则为 null。</returns>
      <exception cref="T:System.OutOfMemoryException">内存不足，无法为返回的字符串分配缓冲区。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.StreamReader.ReadToEnd">
      <summary>从流的当前位置到末尾读取所有字符。</summary>
      <returns>字符串形式的流的其余部分（从当前位置到末尾）。 如果当前位置位于流的末尾，则返回空字符串 (“”)。</returns>
      <exception cref="T:System.OutOfMemoryException">内存不足，无法为返回的字符串分配缓冲区。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.IO.StreamWriter">
      <summary>实现一个 <see cref="T:System.IO.TextWriter" />，使其以一种特定的编码向流中写入字符。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream)">
      <summary>用 UTF-8 编码及默认缓冲区大小，为指定的流初始化 <see cref="T:System.IO.StreamWriter" /> 类的一个新实例。</summary>
      <param name="stream">要写入的流。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不可写。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>用指定的编码及默认缓冲区大小，为指定的流初始化 <see cref="T:System.IO.StreamWriter" /> 类的新实例。</summary>
      <param name="stream">要写入的流。</param>
      <param name="encoding">要使用的字符编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="encoding" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不可写。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)">
      <summary>用指定的编码及缓冲区大小，为指定的流初始化 <see cref="T:System.IO.StreamWriter" /> 类的新实例。</summary>
      <param name="stream">要写入的流。</param>
      <param name="encoding">要使用的字符编码。</param>
      <param name="bufferSize">缓冲区大小（以字节为单位）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="encoding" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 为负。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不可写。</exception>
    </member>
    <member name="P:System.IO.StreamWriter.AutoFlush">
      <summary>获取或设置一个值，该值指示 <see cref="T:System.IO.StreamWriter" /> 是否在每次调用 <see cref="M:System.IO.StreamWriter.Write(System.Char)" /> 之后，将其缓冲区刷新到基础流。</summary>
      <returns>强制 <see cref="T:System.IO.StreamWriter" /> 刷新其缓冲区时，为 true；否则，为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.StreamWriter.BaseStream">
      <summary>获取同后备存储区连接的基础流。</summary>
      <returns>此 StreamWriter 正在写入的基础流。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.StreamWriter.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.IO.StreamWriter" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
      <exception cref="T:System.Text.EncoderFallbackException">当前编码不支持显示半个 Unicode 代理项对。</exception>
    </member>
    <member name="P:System.IO.StreamWriter.Encoding">
      <summary>获取将输出写入到其中的 <see cref="T:System.Text.Encoding" />。</summary>
      <returns>在当前实例的构造函数中指定的 <see cref="T:System.Text.Encoding" />；或者如果未指定编码，则为 <see cref="T:System.Text.UTF8Encoding" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.StreamWriter.Flush">
      <summary>清理当前编写器的所有缓冲区，并使所有缓冲数据写入基础流。</summary>
      <exception cref="T:System.ObjectDisposedException">当前编写器已关闭。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">当前编码不支持显示半个 Unicode 代理项对。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.IO.StreamWriter.Null">
      <summary>提供 StreamWriter，它不带任何可写入但无法从中读取的后备存储。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char)">
      <summary>将字符写入流。</summary>
      <param name="value">要写入流中的字符。</param>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 为 true 或 <see cref="T:System.IO.StreamWriter" /> 缓冲区已满，并且当前编写器已关闭。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 为 true 或 <see cref="T:System.IO.StreamWriter" /> 缓冲区已满，并且由于 <see cref="T:System.IO.StreamWriter" /> 位于基础固定大小流的结尾，缓冲区的内容无法写入该流。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char[])">
      <summary>将字符数组写入流。</summary>
      <param name="buffer">包含要写入的数据的字符数组。 如果 <paramref name="buffer" /> 为 null，则不写入任何内容。</param>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 为 true 或 <see cref="T:System.IO.StreamWriter" /> 缓冲区已满，并且当前编写器已关闭。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 为 true 或 <see cref="T:System.IO.StreamWriter" /> 缓冲区已满，并且由于 <see cref="T:System.IO.StreamWriter" /> 位于基础固定大小流的结尾，缓冲区的内容无法写入该流。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>将字符的子数组写入流。</summary>
      <param name="buffer">包含要写入的数据的字符数组。</param>
      <param name="index">在开始读取数据时缓存中的字符位置。</param>
      <param name="count">要写入的最大字符数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 为 true 或 <see cref="T:System.IO.StreamWriter" /> 缓冲区已满，并且当前编写器已关闭。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 为 true 或 <see cref="T:System.IO.StreamWriter" /> 缓冲区已满，并且由于 <see cref="T:System.IO.StreamWriter" /> 位于基础固定大小流的结尾，缓冲区的内容无法写入该流。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String)">
      <summary>将字符串写入流。</summary>
      <param name="value">要写入流的字符串。 如果 <paramref name="value" /> 为 null，则不写入任何内容。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 为 true 或 <see cref="T:System.IO.StreamWriter" /> 缓冲区已满，并且当前编写器已关闭。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 为 true 或 <see cref="T:System.IO.StreamWriter" /> 缓冲区已满，并且由于 <see cref="T:System.IO.StreamWriter" /> 位于基础固定大小流的结尾，缓冲区的内容无法写入该流。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.IO.StringReader">
      <summary>实现从字符串进行读取的 <see cref="T:System.IO.TextReader" />。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.StringReader.#ctor(System.String)">
      <summary>初始化从指定字符串进行读取的 <see cref="T:System.IO.StringReader" /> 类的新实例。</summary>
      <param name="s">应将 <see cref="T:System.IO.StringReader" /> 初始化为的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数为 null。</exception>
    </member>
    <member name="M:System.IO.StringReader.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.IO.StringReader" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.IO.StringReader.Peek">
      <summary>返回下一个可用的字符，但不使用它。</summary>
      <returns>一个表示下一个要读取的字符的整数；如果没有更多可读取的字符或该流不支持查找，则为 -1。</returns>
      <exception cref="T:System.ObjectDisposedException">当前读取器已关闭。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.StringReader.Read">
      <summary>读取输入字符串中的下一个字符并将该字符的位置提升一个字符。</summary>
      <returns>基础字符串中的下一个字符，或者如果没有更多的可用字符，则为 -1。</returns>
      <exception cref="T:System.ObjectDisposedException">当前读取器已关闭。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.StringReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>读取输入字符串中的字符块，并将字符位置提升 <paramref name="count" />。</summary>
      <returns>读入缓冲区的总字符数。 如果当前没有那么多字符可用，则总字符数可能会少于所请求的字符数，或者如果已到达基础字符串的结尾，则总字符数为零。</returns>
      <param name="buffer">此方法返回时，包含指定的字符数组，该数组的 <paramref name="index" /> 和 (<paramref name="index" /> + <paramref name="count" /> - 1) 之间的值由从当前源中读取的字符替换。</param>
      <param name="index">缓存区中的起始索引。</param>
      <param name="count">要读取的字符数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负。</exception>
      <exception cref="T:System.ObjectDisposedException">当前读取器已关闭。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.StringReader.ReadLine">
      <summary>从当前字符串中读取一行字符并将数据作为字符串返回。</summary>
      <returns>当前字符串中的下一行；或为 null （如果到达了字符串的末尾）。</returns>
      <exception cref="T:System.ObjectDisposedException">当前读取器已关闭。</exception>
      <exception cref="T:System.OutOfMemoryException">内存不足，无法为返回的字符串分配缓冲区。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.StringReader.ReadToEnd">
      <summary>读取从当前位置到字符串的结尾的所有字符并将它们作为单个字符串返回。</summary>
      <returns>从当前位置到基础字符串的结尾之间的内容。</returns>
      <exception cref="T:System.OutOfMemoryException">内存不足，无法为返回的字符串分配缓冲区。</exception>
      <exception cref="T:System.ObjectDisposedException">当前读取器已关闭。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IO.StringWriter">
      <summary>实现一个用于将信息写入字符串的 <see cref="T:System.IO.TextWriter" />。 该信息存储在基础 <see cref="T:System.Text.StringBuilder" /> 中。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.StringWriter.#ctor">
      <summary>初始化 <see cref="T:System.IO.StringWriter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.IFormatProvider)">
      <summary>使用指定的格式控制初始化 <see cref="T:System.IO.StringWriter" /> 类的新实例。</summary>
      <param name="formatProvider">控制格式设置的 <see cref="T:System.IFormatProvider" /> 对象。</param>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.Text.StringBuilder)">
      <summary>初始化写入指定 <see cref="T:System.Text.StringBuilder" /> 的 <see cref="T:System.IO.StringWriter" /> 类的新实例。</summary>
      <param name="sb">要写入的 StringBuilder。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sb" /> 为 null。</exception>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.Text.StringBuilder,System.IFormatProvider)">
      <summary>初始化写入指定 <see cref="T:System.Text.StringBuilder" /> 并具有指定格式提供程序的 <see cref="T:System.IO.StringWriter" /> 类的新实例。</summary>
      <param name="sb">要写入的 StringBuilder。</param>
      <param name="formatProvider">控制格式设置的 <see cref="T:System.IFormatProvider" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sb" /> 为 null。</exception>
    </member>
    <member name="M:System.IO.StringWriter.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.IO.StringWriter" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="P:System.IO.StringWriter.Encoding">
      <summary>获取将输出写入到其中的 <see cref="T:System.Text.Encoding" />。</summary>
      <returns>用来写入输出的 Encoding。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.StringWriter.GetStringBuilder">
      <summary>返回基础 <see cref="T:System.Text.StringBuilder" />。</summary>
      <returns>基础 StringBuilder。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.StringWriter.ToString">
      <summary>返回包含迄今为止写入到当前 StringWriter 中的字符的字符串。</summary>
      <returns>包含写入到当前 StringWriter 中的字符的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Char)">
      <summary>将字符写入该字符串。</summary>
      <param name="value">要写入的字符。</param>
      <exception cref="T:System.ObjectDisposedException">编写器已关闭。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>将字符的子数组写入该字符串。</summary>
      <param name="buffer">要从中写出数据的字符数组。</param>
      <param name="index">在开始读取数据缓存中的位置。</param>
      <param name="count">要写入的最大字符数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负。</exception>
      <exception cref="T:System.ArgumentException">(<paramref name="index" /> + <paramref name="count" />)&gt; <paramref name="buffer" />。 Length.</exception>
      <exception cref="T:System.ObjectDisposedException">编写器已关闭。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.String)">
      <summary>将字符串写入当前流。</summary>
      <param name="value">要写入的字符串。</param>
      <exception cref="T:System.ObjectDisposedException">编写器已关闭。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IO.TextReader">
      <summary>表示可读取连续字符系列的读取器。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.TextReader.#ctor">
      <summary>初始化 <see cref="T:System.IO.TextReader" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.TextReader.Dispose">
      <summary>释放由 <see cref="T:System.IO.TextReader" /> 对象使用的所有资源。</summary>
    </member>
    <member name="M:System.IO.TextReader.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.IO.TextReader" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="F:System.IO.TextReader.Null">
      <summary>提供一个无数据可供读取的 TextReader。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextReader.Peek">
      <summary>读取下一个字符，而不更改读取器状态或字符源。 返回下一个可用字符，而实际上并不从读取器中读取此字符。</summary>
      <returns>一个表示下一个要读取的字符的整数；如果没有更多可读取的字符或该读取器不支持查找，则为 -1。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextReader.Read">
      <summary>读取文本读取器中的下一个字符并使该字符的位置提升一个字符。</summary>
      <returns>文本读取器中的下一个字符，或为 -1 （如果没有更多的可用字符）。 默认实现将返回 -1。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>从当前读取器中读取指定数目的字符并从指定索引开始将该数据写入缓冲区。</summary>
      <returns>已读取的字符数。 该数会小于或等于 <paramref name="count" />，具体取决于读取器中是否有可用的数据。 如果调用此方法时没有更多的字符留下可供读取，则此方法返回 0（零）。</returns>
      <param name="buffer">此方法返回时，包含指定的字符数组，该数组的 <paramref name="index" /> 和 (<paramref name="index" /> + <paramref name="count" /> - 1) 之间的值由从当前源中读取的字符替换。</param>
      <param name="index">在 <paramref name="buffer" /> 中开始写入的位置。</param>
      <param name="count">最多读取的字符数。 如果在读取指定数目的字符到缓冲区之前，读取器就已达到末尾，那么该方法返回。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
      <summary>从当前文本读取器中读取指定数目的字符并从指定索引开始将该数据写入缓冲区。</summary>
      <returns>已读取的字符数。 该数字将小于或等于 <paramref name="count" />，具体取决于是否所有的输入字符都已读取。</returns>
      <param name="buffer">此方法返回时，此参数包含指定的字符数组，该数组中从 <paramref name="index" /> 到 (<paramref name="index" /> + <paramref name="count" /> -1) 之间的值由从当前源中读取的字符替换。</param>
      <param name="index">在 <paramref name="buffer" /> 中开始写入的位置。</param>
      <param name="count">最多读取的字符数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.TextReader.ReadLine">
      <summary>从文本读取器中读取一行字符并将数据作为字符串返回。</summary>
      <returns>读取器中的下一行，或为 null （如果已读取了所有字符）。</returns>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.OutOfMemoryException">内存不足，无法为返回的字符串分配缓冲区。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> 是关闭的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">下一行中的字符数大于 <see cref="F:System.Int32.MaxValue" /></exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextReader.ReadToEnd">
      <summary>读取从当前位置到文本读取器末尾的所有字符并将它们作为一个字符串返回。</summary>
      <returns>一个包含从当前位置到文本读取器末尾的所有字符的字符串。</returns>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> 是关闭的。</exception>
      <exception cref="T:System.OutOfMemoryException">内存不足，无法为返回的字符串分配缓冲区。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">下一行中的字符数大于 <see cref="F:System.Int32.MaxValue" /></exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.IO.TextWriter">
      <summary>表示可以编写一个有序字符系列的编写器。 该类为抽象类。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.#ctor">
      <summary>初始化 <see cref="T:System.IO.TextWriter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.TextWriter.#ctor(System.IFormatProvider)">
      <summary>使用指定的格式提供程序初始化 <see cref="T:System.IO.TextWriter" /> 类的新实例。</summary>
      <param name="formatProvider">控制格式设置的 <see cref="T:System.IFormatProvider" /> 对象。</param>
    </member>
    <member name="F:System.IO.TextWriter.CoreNewLine">
      <summary>存储用于此 TextWriter 的换行符。</summary>
    </member>
    <member name="M:System.IO.TextWriter.Dispose">
      <summary>释放由 <see cref="T:System.IO.TextWriter" /> 对象使用的所有资源。</summary>
    </member>
    <member name="M:System.IO.TextWriter.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.IO.TextWriter" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="P:System.IO.TextWriter.Encoding">
      <summary>当在派生类中重写时，返回用来写输出的该字符编码。</summary>
      <returns>用来写入输出的字符编码。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Flush">
      <summary>清理当前编写器的所有缓冲区，使所有缓冲数据写入基础设备。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.TextWriter.FormatProvider">
      <summary>获取控制格式设置的对象。</summary>
      <returns>特定区域性的 <see cref="T:System.IFormatProvider" /> 对象，或者如果未指定任何其他区域性，则为当前区域性的格式设置。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.TextWriter.NewLine">
      <summary>获取或设置由当前 TextWriter 使用的行结束符字符串。</summary>
      <returns>当前 TextWriter 的行结束符字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IO.TextWriter.Null">
      <summary>提供 TextWriter，它不带任何可写入但无法从中读取的后备存储。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Boolean)">
      <summary>将 Boolean 值的文本表示形式写入文本字符串或流。</summary>
      <param name="value">要编写的 Boolean 值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char)">
      <summary>将字符写入该文本字符串或流。</summary>
      <param name="value">要写入文本流中的字符。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char[])">
      <summary>将字符数组写入该文本字符串或流。</summary>
      <param name="buffer">要写入文本流中的字符数组。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>将字符的子数组写入文本字符串或流。</summary>
      <param name="buffer">要从中写出数据的字符数组。</param>
      <param name="index">在开始接收数据时缓存中的字符位置。</param>
      <param name="count">要写入的字符数。</param>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Decimal)">
      <summary>将十进制值的文本表示形式写入文本字符串或流。</summary>
      <param name="value">要写入的十进制值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Double)">
      <summary>将 8 字节浮点值的文本表示形式写入文本字符串或流。</summary>
      <param name="value">要写入的 8 字节浮点值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Int32)">
      <summary>将 4 字节有符号整数的文本表示形式写入文本字符串或流。</summary>
      <param name="value">要写入的 4 字节有符号整数。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Int64)">
      <summary>将 8 字节有符号整数的文本表示形式写入文本字符串或流。</summary>
      <param name="value">要写入的 8 字节有符号整数。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Object)">
      <summary>通过在对象上调用 ToString 方法将此对象的文本表示形式写入文本字符串或流。</summary>
      <param name="value">要写入的对象。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Single)">
      <summary>将 4 字节浮点值的文本表示形式写入文本字符串或流。</summary>
      <param name="value">要写入的 4 字节浮点值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String)">
      <summary>以异步形式将字符串写入到文本字符串或流。</summary>
      <param name="value">要写入的字符串。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object[])">
      <summary>使用与 <see cref="M:System.String.Format(System.String,System.Object[])" /> 方法相同的语义将格式化字符串和新行写入文本字符串或流。</summary>
      <param name="format">符合格式字符串（参见“备注”）。</param>
      <param name="arg">一个对象数组，其中包含零个或多个要设置格式和写入的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 或 <paramref name="arg" /> 为 null。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的复合格式字符串。 - 或 - 格式项的索引小于 0（零）或大于等于 <paramref name="arg" /> 数组的长度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.UInt32)">
      <summary>将 4 字节无符号整数的文本表示形式写入文本字符串或流。</summary>
      <param name="value">要写入的 4 字节无符号整数。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.UInt64)">
      <summary>将 8 字节无符号整数的文本表示形式写入文本字符串或流。</summary>
      <param name="value">要写入的 8 字节无符号整数。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine">
      <summary>将行结束符的字符串写入文本字符串或流。</summary>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Boolean)">
      <summary>将后面带有行结束符的 Boolean 值的文本表示形式写入文本字符串或流。</summary>
      <param name="value">要编写的 Boolean 值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char)">
      <summary>将后跟行结束符的字符写入文本字符串或流。</summary>
      <param name="value">要写入文本流中的字符。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char[])">
      <summary>将后跟行结束符的字符数组写入文本字符串或流。</summary>
      <param name="buffer">从其读取数据的字符数组。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>将后跟行结束符的字符子数组写入文本字符串或流。</summary>
      <param name="buffer">从其读取数据的字符数组。</param>
      <param name="index">在开始读取数据时 <paramref name="buffer" /> 中的字符位置。</param>
      <param name="count">要写入的最大字符数。</param>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Decimal)">
      <summary>将后面带有行结束符的十进制值的文本表示形式写入文本字符串或流。</summary>
      <param name="value">要写入的十进制值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Double)">
      <summary>将后跟行结束符的 8 字节浮点值的文本表示形式写入文本字符串或流。</summary>
      <param name="value">要写入的 8 字节浮点值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Int32)">
      <summary>将后跟行结束符的 4 字节有符号整数的文本表示形式写入文本字符串或流。</summary>
      <param name="value">要写入的 4 字节有符号整数。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Int64)">
      <summary>将后跟行结束符的 8 字节有符号整数的文本表示形式写入文本字符串或流。</summary>
      <param name="value">要写入的 8 字节有符号整数。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Object)">
      <summary>通过在对象上调用 ToString 方法将后跟行结束符的此对象的文本表示形式写入文本字符串或流。</summary>
      <param name="value">要写入的对象。 如果 <paramref name="value" /> 为 null，则只写入行终止符。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Single)">
      <summary>将后跟行结束符的 4 字节浮点值的文本表示形式写入文本字符串或流。</summary>
      <param name="value">要写入的 4 字节浮点值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String)">
      <summary>将后跟行结束符的字符串写入文本字符串或流。</summary>
      <param name="value">要写入的字符串。 如果 <paramref name="value" /> 为 null，则只写入行终止符。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object[])">
      <summary>使用与 <see cref="M:System.String.Format(System.String,System.Object)" /> 相同的语义写出格式化的字符串和一个新行。</summary>
      <param name="format">符合格式字符串（参见“备注”）。</param>
      <param name="arg">一个对象数组，其中包含零个或多个要设置格式和写入的对象。</param>
      <exception cref="T:System.ArgumentNullException">字符串或对象作为 null 传入。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的复合格式字符串。 - 或 - 格式项的索引小于 0（零）或大于等于 <paramref name="arg" /> 数组的长度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.UInt32)">
      <summary>将后跟行结束符的 4 字节无符号整数的文本表示形式写入文本字符串或流。</summary>
      <param name="value">要写入的 4 字节无符号整数。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.UInt64)">
      <summary>将后跟行结束符的 8 字节无符号整数的文本表示形式写入文本字符串或流。</summary>
      <param name="value">要写入的 8 字节无符号整数。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Reflection.AmbiguousMatchException">
      <summary>当绑定到成员的操作导致一个以上的成员匹配绑定条件时引发的异常。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Reflection.AmbiguousMatchException.#ctor">
      <summary>通过使用空消息字符串和将根源异常设置为 null 来初始化 <see cref="T:System.Reflection.AmbiguousMatchException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Reflection.AmbiguousMatchException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AmbiguousMatchException" /> 类的一个新实例，将其消息字符串设置为给定消息，将根源异常设置为 null。</summary>
      <param name="message">指示此异常的引发原因的字符串。</param>
    </member>
    <member name="M:System.Reflection.AmbiguousMatchException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Reflection.AmbiguousMatchException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Reflection.Assembly">
      <summary>表示一个程序集，它是一个可重用、无版本冲突并且可自我描述的公共语言运行时应用程序构造块。</summary>
    </member>
    <member name="P:System.Reflection.Assembly.EntryPoint">
      <summary>获取此程序集的入口点。</summary>
      <returns>表示此程序集入口点的对象。 如果没有找到入口点（例如，此程序集是一个 DLL），则返回 null。</returns>
    </member>
    <member name="P:System.Reflection.Assembly.FullName">
      <summary>获取程序集的显示名称。</summary>
      <returns>程序集的显示名称。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetCallingAssembly">
      <summary>返回调用当前正在执行的方法的方法的 <see cref="T:System.Reflection.Assembly" />。</summary>
      <returns>调用当前正在执行的方法的方法的 Assembly 对象。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)">
      <summary>获取此程序集的所有自定义属性。</summary>
      <returns>包含此程序集自定义特性的数组。</returns>
      <param name="inherit">对于 <see cref="T:System.Reflection.Assembly" /> 类型的对象，将忽略此参数。</param>
    </member>
    <member name="M:System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>获取按类型指定的此程序集的自定义属性。</summary>
      <returns>一个数组，它包含由 <paramref name="attributeType" /> 指定的此程序集的自定义特性。</returns>
      <param name="attributeType">要为其返回自定义特性的类型。</param>
      <param name="inherit">对于 <see cref="T:System.Reflection.Assembly" /> 类型的对象，将忽略此参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是运行时类型。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetExecutingAssembly">
      <summary>获取包含当前执行的代码的程序集。</summary>
      <returns>包含当前执行的代码的程序集。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetExportedTypes">
      <summary>获取此程序集中定义的公共类型，这些公共类型在程序集外可见。</summary>
      <returns>一个数组，表示此程序集中定义并在程序集外可见的类型。</returns>
      <exception cref="T:System.NotSupportedException">该程序集是个动态程序集。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceInfo(System.String)">
      <summary>返回关于给定资源如何保持的信息。</summary>
      <returns>用关于资源拓扑的信息填充的对象；如果未找到资源，则为 null。</returns>
      <param name="resourceName">区分大小写的资源名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resourceName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="resourceName" /> 参数是空字符串 ("")。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceNames">
      <summary>返回此程序集中的所有资源的名称。</summary>
      <returns>包含所有资源名称的数组。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)">
      <summary>从此程序集加载指定的清单资源。</summary>
      <returns>如果在编译期间没有指定任何资源，或者资源对调用方不可见，则为清单资源或者null。</returns>
      <param name="name">所请求的清单资源的名称（区分大小写）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数是空字符串 ("")。</exception>
      <exception cref="T:System.IO.FileLoadException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.IO.IOException" />。 发现一个未能加载的文件。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="name" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> 不是有效程序集。</exception>
      <exception cref="T:System.NotImplementedException">资源长度大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceStream(System.Type,System.String)">
      <summary>从此程序集加载指定清单资源，清单资源的范围由指定类型的命名空间确定。</summary>
      <returns>如果在编译期间没有指定任何资源，或者资源对调用方不可见，则为清单资源或者null。</returns>
      <param name="type">其命名空间用于确定清单资源名的范围的类型。</param>
      <param name="name">所请求的清单资源的名称（区分大小写）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数是空字符串 ("")。</exception>
      <exception cref="T:System.IO.FileLoadException">发现一个未能加载的文件。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="name" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> 不是有效程序集。</exception>
      <exception cref="T:System.NotImplementedException">资源长度大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetModules">
      <summary>获取作为此程序集的一部分的所有模块。</summary>
      <returns>模块的数组。</returns>
      <exception cref="T:System.IO.FileNotFoundException">要加载的模块未指定文件扩展名。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetType(System.String)">
      <summary>获取程序集实例中具有指定名称的 <see cref="T:System.Type" /> 对象。</summary>
      <returns>表示指定类的对象，若未找到该类则为 null。</returns>
      <param name="name">该类型的全名。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="name" /> 需要一个无法找到的依赖程序集。</exception>
      <exception cref="T:System.IO.FileLoadException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.IO.IOException" />。 <paramref name="name" /> 需要一个已找到但无法加载的依赖程序集。 - 或 - 当前程序集被加载到只反射上下文中，<paramref name="name" /> 需要一个未预先加载的依赖程序集。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> 需要一个依赖程序集，但该文件不是一个有效的程序集。 - 或 - <paramref name="name" /> 需要一个针对高于当前加载版本的运行库版本编译的依赖程序集。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetType(System.String,System.Boolean)">
      <summary>获取程序集实例中具有指定名称的 <see cref="T:System.Type" /> 对象，并选择在找不到该类型时引发异常。</summary>
      <returns>表示指定类的对象。</returns>
      <param name="name">该类型的全名。</param>
      <param name="throwOnError">true 表示在找不到该类型时引发异常；false 则表示返回 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 无效。 - 或 - <paramref name="name" /> 的长度超过 1024 个字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> 为 true，找不到该类型。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="name" /> 需要一个无法找到的依赖程序集。</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="name" /> 需要一个已找到但无法加载的依赖程序集。 - 或 - 当前程序集被加载到只反射上下文中，<paramref name="name" /> 需要一个未预先加载的依赖程序集。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> 需要一个依赖程序集，但该文件不是一个有效的程序集。 - 或 - <paramref name="name" /> 需要一个针对高于当前加载版本的运行库版本编译的依赖程序集。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetTypes">
      <summary>获取此程序集中定义的类型。</summary>
      <returns>一个数组，包含此程序集中定义的所有类型。</returns>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException">该程序集包含一个或多个无法加载的类型。 对于加载的每个类型，由此异常的 <see cref="P:System.Reflection.ReflectionTypeLoadException.Types" /> 属性返回的数组包含一个 <see cref="T:System.Type" /> 对象；对于无法加载的每个类型，该数组包含 null，而 <see cref="P:System.Reflection.ReflectionTypeLoadException.LoaderExceptions" /> 属性则包含一个异常。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.IsDefined(System.Type,System.Boolean)">
      <summary>指示指定的属性是否已应用于该程序集。</summary>
      <returns>如果已将该属性应用于程序集，则为 true；否则为 false。</returns>
      <param name="attributeType">要为此程序集检查的特性类型。</param>
      <param name="inherit">对于该类型的对象，该参数被忽略。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 使用的类型无效。</exception>
    </member>
    <member name="P:System.Reflection.Assembly.IsDynamic">
      <summary>获取一个值，该值指示当前程序集是否是通过使用反射发出在当前进程中动态生成的。</summary>
      <returns>如果当前程序集是在当前进程中动态生成的，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.String)">
      <summary>通过给定程序集的长格式名称加载程序集。</summary>
      <returns>加载的程序集。</returns>
      <param name="assemblyString">程序集名称的长格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyString" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyString" /> 是零长度字符串。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyString" />。</exception>
      <exception cref="T:System.IO.FileLoadException">发现一个未能加载的文件。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyString" /> 不是有效程序集。 - 或 - 当前加载的是 2.0 或更高版本的公共语言运行时，而 <paramref name="assemblyString" /> 是用更高版本的公共语言运行时编译的。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Reflection.Assembly.ManifestModule">
      <summary>获取包含当前程序集清单的模块。</summary>
      <returns>包含程序集清单的模块。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.ToString">
      <summary>返回程序集的全名，即所谓的显示名称。</summary>
      <returns>程序集的全名；如果不能确定程序集的全名，则为类名。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyCompanyAttribute">
      <summary>定义程序集清单的公司名称自定义属性。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCompanyAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyCompanyAttribute" /> 类的新实例。</summary>
      <param name="company">公司名称信息。</param>
    </member>
    <member name="P:System.Reflection.AssemblyCompanyAttribute.Company">
      <summary>获取公司名称信息。</summary>
      <returns>包含公司名称的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyConfigurationAttribute">
      <summary>为程序集指定生成配置，例如发布或调试。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyConfigurationAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyConfigurationAttribute" /> 类的新实例。</summary>
      <param name="configuration">程序集配置。</param>
    </member>
    <member name="P:System.Reflection.AssemblyConfigurationAttribute.Configuration">
      <summary>获取程序集配置信息。</summary>
      <returns>包含程序集配置信息的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyCopyrightAttribute">
      <summary>定义程序集清单的版权自定义属性。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCopyrightAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyCopyrightAttribute" /> 类的新实例。</summary>
      <param name="copyright">版权信息。</param>
    </member>
    <member name="P:System.Reflection.AssemblyCopyrightAttribute.Copyright">
      <summary>获取版权信息。</summary>
      <returns>包含版权信息的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyCultureAttribute">
      <summary>指定程序集支持哪个区域性。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCultureAttribute.#ctor(System.String)">
      <summary>用正在属性化的程序集支持的区域性初始化 <see cref="T:System.Reflection.AssemblyCultureAttribute" /> 类的新实例。</summary>
      <param name="culture">属性化程序集支持的区域性。</param>
    </member>
    <member name="P:System.Reflection.AssemblyCultureAttribute.Culture">
      <summary>获取属性化程序集支持的区域性。</summary>
      <returns>包含受支持区域性的名称的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDefaultAliasAttribute">
      <summary>定义程序集清单的友好默认别名。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDefaultAliasAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyDefaultAliasAttribute" /> 类的新实例。</summary>
      <param name="defaultAlias">程序集默认别名信息。</param>
    </member>
    <member name="P:System.Reflection.AssemblyDefaultAliasAttribute.DefaultAlias">
      <summary>获取默认别名信息。</summary>
      <returns>包含默认别名信息的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDelaySignAttribute">
      <summary>指定程序集在创建时未完全签名。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDelaySignAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyDelaySignAttribute" /> 类的新实例。</summary>
      <param name="delaySign">如果此属性表示的功能被激活，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.Reflection.AssemblyDelaySignAttribute.DelaySign">
      <summary>获取指示该属性状态的值。</summary>
      <returns>如果此程序集已采用延迟签名方式生成，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDescriptionAttribute">
      <summary>提供程序集的文本说明。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDescriptionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyDescriptionAttribute" /> 类的新实例。</summary>
      <param name="description">程序集说明。</param>
    </member>
    <member name="P:System.Reflection.AssemblyDescriptionAttribute.Description">
      <summary>获取程序集说明信息。</summary>
      <returns>包含程序集说明的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyFileVersionAttribute">
      <summary>指示编译器使用 Win32 文件版本资源的特定版本号。 不要求 Win32 文件版本与程序集的版本号相同。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyFileVersionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyFileVersionAttribute" /> 类的新实例，指定文件版本。</summary>
      <param name="version">文件版本。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> 为 null。</exception>
    </member>
    <member name="P:System.Reflection.AssemblyFileVersionAttribute.Version">
      <summary>获取 Win32 文件版本资源名称。</summary>
      <returns>包含文件版本资源名称的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyFlagsAttribute">
      <summary>为程序集指定 <see cref="T:System.Reflection.AssemblyNameFlags" /> 标志的按位组合，从而描述实时 (JIT) 编译器选项，该程序集是否可重定目标以及是否有完整或已标记化的公钥。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyFlagsAttribute.#ctor(System.Reflection.AssemblyNameFlags)">
      <summary>使用 <see cref="T:System.Reflection.AssemblyNameFlags" /> 标志的指定组合初始化 <see cref="T:System.Reflection.AssemblyFlagsAttribute" /> 类的新实例。</summary>
      <param name="assemblyFlags">
        <see cref="T:System.Reflection.AssemblyNameFlags" /> 标志的按位组合，表示实时 (JIT) 编译器选项、寿命、程序集是否可重定目标以及是否有完整或已标记化的公钥。</param>
    </member>
    <member name="P:System.Reflection.AssemblyFlagsAttribute.AssemblyFlags">
      <summary>获取一个整数值，该值表示在创建此属性实例时指定的 <see cref="T:System.Reflection.AssemblyNameFlags" /> 标志的组合。</summary>
      <returns>一个整数值，表示 <see cref="T:System.Reflection.AssemblyNameFlags" /> 标志的按位组合。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyInformationalVersionAttribute">
      <summary>定义程序集清单的其他版本信息。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyInformationalVersionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute" /> 类的新实例。</summary>
      <param name="informationalVersion">程序集版本信息。</param>
    </member>
    <member name="P:System.Reflection.AssemblyInformationalVersionAttribute.InformationalVersion">
      <summary>获取版本信息。</summary>
      <returns>包含版本信息的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyKeyFileAttribute">
      <summary>指定包含用于生成强名称的密钥对的文件名称。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyKeyFileAttribute.#ctor(System.String)">
      <summary>使用文件的名称初始化 AssemblyKeyFileAttribute 类的新实例，该文件包含为正在属性化的程序集生成强名称的密钥对。</summary>
      <param name="keyFile">包含密钥对的文件的名称。</param>
    </member>
    <member name="P:System.Reflection.AssemblyKeyFileAttribute.KeyFile">
      <summary>获取文件的名称，该文件包含用于为属性化程序集生成强名称的密钥对。</summary>
      <returns>包含密钥对所在文件的名称的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyKeyNameAttribute">
      <summary>指定 CSP 内某密钥容器的名称，该密钥容器包含用于生成强名称的密钥对。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyKeyNameAttribute.#ctor(System.String)">
      <summary>使用某容器的名称（该容器保存用于为正在属性化的程序集生成强名称的密钥对）来初始化 <see cref="T:System.Reflection.AssemblyKeyNameAttribute" /> 类的新实例。</summary>
      <param name="keyName">包含密钥对的容器的名称。</param>
    </member>
    <member name="P:System.Reflection.AssemblyKeyNameAttribute.KeyName">
      <summary>获取容器的名称，该容器包含用于为属性化程序集生成强名称的密钥对。</summary>
      <returns>一个字符串，它包含带有相关密钥对的容器的名称。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyName">
      <summary>完整描述程序集的唯一标识。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyName.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyName" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyName.#ctor(System.String)">
      <summary>用指定的显示名称初始化 <see cref="T:System.Reflection.AssemblyName" /> 类的新实例。</summary>
      <param name="assemblyName">程序集的显示名称，由 <see cref="P:System.Reflection.AssemblyName.FullName" /> 属性返回。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyName" /> 是一个零长度字符串。</exception>
      <exception cref="T:System.IO.FileLoadException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.IO.IOException" />。 无法找到或无法加载引用的程序集。</exception>
    </member>
    <member name="P:System.Reflection.AssemblyName.CultureInfo">
      <summary>获取或设置程序集支持的区域性。</summary>
      <returns>一个对象，它表示程序集支持的区域性。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.Flags">
      <summary>获取或设置该程序集的属性。</summary>
      <returns>表示程序集特性的值。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.FullName">
      <summary>获取程序集的全名（也称为显示名称）。</summary>
      <returns>作为程序集的全名（也称为显示名称）的字符串。</returns>
    </member>
    <member name="M:System.Reflection.AssemblyName.GetPublicKey">
      <summary>获取程序集的公钥。</summary>
      <returns>字节数组，包含程序集的公钥。</returns>
      <exception cref="T:System.Security.SecurityException">提供了公钥（例如使用 <see cref="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])" /> 方法），但未提供公钥标记。</exception>
    </member>
    <member name="M:System.Reflection.AssemblyName.GetPublicKeyToken">
      <summary>获取公钥标记，该标记为应用程序或程序集签名时所用公钥的 SHA-1 哈希值的最后 8 个字节。</summary>
      <returns>包含公钥调用的字节数组。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.Name">
      <summary>获取或设置程序集的简单名称。 这通常（但不一定）是程序集的清单文件的文件名，不包括其扩展名。</summary>
      <returns>程序集的简单名称。</returns>
    </member>
    <member name="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
      <summary>设置用于标识程序集的公钥。</summary>
      <param name="publicKey">字节数组，包含程序集的公钥。</param>
    </member>
    <member name="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
      <summary>设置公钥标记，该标记为应用程序或程序集签名时所用公钥的 SHA-1 哈希值的最后 8 个字节。</summary>
      <param name="publicKeyToken">字节数组，包含程序集的公钥标记。</param>
    </member>
    <member name="M:System.Reflection.AssemblyName.ToString">
      <summary>返回程序集的全名，即所谓的显示名称。</summary>
      <returns>程序集的全名；如果不能确定程序集的全名，则为类名。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.Version">
      <summary>获取或设置程序集的主版本号、次版本号、内部版本号和修订号。</summary>
      <returns>一个对象，表示程序集的主版本号、次版本号、内部版本号和修订号。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyNameFlags">
      <summary>提供有关 <see cref="T:System.Reflection.Assembly" /> 引用的信息。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.None">
      <summary>指定没有有效标志。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.PublicKey">
      <summary>指定公钥基于完整公钥而不是公钥标记构成。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.Retargetable">
      <summary>指定可以在运行时将程序集重定向到来自其他发行者的程序集。 此值支持 .NET Framework 基础结构，但不适合在代码中直接使用。</summary>
    </member>
    <member name="T:System.Reflection.AssemblyProductAttribute">
      <summary>定义程序集清单的产品名称自定义属性。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyProductAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyProductAttribute" /> 类的新实例。</summary>
      <param name="product">产品名称信息。</param>
    </member>
    <member name="P:System.Reflection.AssemblyProductAttribute.Product">
      <summary>获取产品名称信息。</summary>
      <returns>包含产品名称的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyTitleAttribute">
      <summary>指定程序集的说明。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyTitleAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyTitleAttribute" /> 类的新实例。</summary>
      <param name="title">程序集标题。</param>
    </member>
    <member name="P:System.Reflection.AssemblyTitleAttribute.Title">
      <summary>获取程序集标题信息。</summary>
      <returns>程序集标题。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyTrademarkAttribute">
      <summary>定义程序集清单的商标自定义属性。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyTrademarkAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyTrademarkAttribute" /> 类的新实例。</summary>
      <param name="trademark">商标信息。</param>
    </member>
    <member name="P:System.Reflection.AssemblyTrademarkAttribute.Trademark">
      <summary>获取商标信息。</summary>
      <returns>包含商标信息的 String。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyVersionAttribute">
      <summary>指定正在属性化的程序集的版本。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyVersionAttribute.#ctor(System.String)">
      <summary>使用正在属性化的程序集的版本号来初始化 AssemblyVersionAttribute 类的新实例。</summary>
      <param name="version">属性化程序集的版本号。</param>
    </member>
    <member name="P:System.Reflection.AssemblyVersionAttribute.Version">
      <summary>获取属性化程序集的版本号。</summary>
      <returns>包含程序集的版本号的字符串。</returns>
    </member>
    <member name="T:System.Reflection.BindingFlags">
      <summary>指定控制绑定和由反射执行的成员和类型搜索方法的标志。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.DeclaredOnly">
      <summary>指定只应考虑在所提供类型的层次结构级别上声明的成员。 不考虑继承成员。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.ExactBinding">
      <summary>指定提供参数的类型必须与对应形参的类型完全匹配。 如果调用方提供一个非空 Binder 对象，则“反射”将引发异常，因为这意味着调用方正在提供的 BindToXXX 实现将选取适当的方法。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.FlattenHierarchy">
      <summary>指定应返回层次结构上的公共静态成员和受保护的静态成员。 不返回继承类中的私有静态成员。 静态成员包括字段、方法、事件和属性。 不返回嵌套类型。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.IgnoreCase">
      <summary>指定当绑定时不应考虑成员名的大小写。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Instance">
      <summary>指定实例成员将包括在搜索中。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.NonPublic">
      <summary>指定非公共成员将包括在搜索中。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.OptionalParamBinding">
      <summary>返回其参数计数与提供参数的数目匹配的成员集。 此绑定标志用于所带参数具有默认值的方法和带变量参数 (varargs) 的方法。 此标志应只与 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 一起使用。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Public">
      <summary>指定公共成员将包括在搜索中。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Static">
      <summary>指定静态成员将包括在搜索中。</summary>
    </member>
    <member name="T:System.Reflection.CallingConventions">
      <summary>定义方法的有效调用约定。</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.Any">
      <summary>指定可以使用 Standard 调用约定或 VarArgs 调用约定。</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.ExplicitThis">
      <summary>指定该签名是函数指针签名，它表示对实例或虚方法（不是静态方法）的调用。 如果设置了 ExplicitThis，则还须设置 HasThis。 传递到被调用方法的第一个参数仍然是 this 指针，但第一个参数的类型现在未知。 因此，应将描述 this 指针的类型（或类）的标记显式存储到其元数据签名中。</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.HasThis">
      <summary>指定一个实例或虚方法（不是静态方法）。 运行时，向被调用方法传递一个指向目标对象的指针作为此方法的第一个参数（this 指针）。 存储在元数据中的签名不包括此第一个参数的类型，因为此方法是已知的，并且其所有者类能够从元数据中发现。</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.Standard">
      <summary>指定公共语言运行时确定的默认调用约定。 对静态方法使用此调用约定。 对实例或虚方法使用 HasThis。</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.VarArgs">
      <summary>指定包含变量参数的方法的调用约定。</summary>
    </member>
    <member name="T:System.Reflection.ConstructorInfo">
      <summary>发现类构造函数的属性并提供对构造函数元数据的访问权。</summary>
    </member>
    <member name="F:System.Reflection.ConstructorInfo.ConstructorName">
      <summary>表示存储在元数据中的类构造函数方法的名称。 该名称始终为“.ctor”。 此字段为只读。</summary>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.Invoke(System.Object[])">
      <summary>调用具有指定参数的实例所反映的构造函数，并为不常用的参数提供默认值。</summary>
      <returns>与构造函数关联的类的实例。</returns>
      <param name="parameters">与此构造函数的参数的个数、顺序和类型（受默认联编程序的约束）相匹配的值数组。 如果此构造函数没有参数，则像 Object[] parameters = new Object[0] 中那样，使用包含零元素或 null 的数组。 如果此数组中的对象未用值来显式初始化，则该对象将包含该对象类型的默认值。 对于引用类型的元素，该值为 null。 对于值类型的元素，该值为 0、0.0 或 false，具体取决于特定的元素类型。</param>
      <exception cref="T:System.MemberAccessException">此类是抽象类。 - 或 - 构造函数是类初始值设定项。</exception>
      <exception cref="T:System.MethodAccessException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.MemberAccessException" />。 构造函数是私有的或受保护的，而且调用方不具有 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> 数组不包含与此构造函数所接受的类型相匹配的值。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">调用的构造函数引发异常。</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">传递的参数个数不正确。</exception>
      <exception cref="T:System.NotSupportedException">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型。</exception>
      <exception cref="T:System.Security.SecurityException">调用方不具有所需的代码访问权限。</exception>
    </member>
    <member name="F:System.Reflection.ConstructorInfo.TypeConstructorName">
      <summary>表示存储于元数据中的类型构造函数方法的名称。 该名称始终为“.cctor”。 此属性是只读的。</summary>
    </member>
    <member name="T:System.Reflection.DefaultMemberAttribute">
      <summary>定义某类型的成员，该成员是 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 使用的默认成员。</summary>
    </member>
    <member name="M:System.Reflection.DefaultMemberAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.DefaultMemberAttribute" /> 类的新实例。</summary>
      <param name="memberName">包含要调用的成员名称的 String。 这可能是一个构造函数、方法、属性或字段。 在调用成员时必须指定合适的调用属性。 通过传递一个空 String 作为成员名称，可以指定类的默认成员。 类型的默认成员由 DefaultMemberAttribute 自定义属性标记，或按通常的方法在 COM 中标记。</param>
    </member>
    <member name="P:System.Reflection.DefaultMemberAttribute.MemberName">
      <summary>从属性中获取名称。</summary>
      <returns>表示成员名称的字符串。</returns>
    </member>
    <member name="T:System.Reflection.EventAttributes">
      <summary>指定事件的属性。</summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.None">
      <summary>指定该事件不具有属性。</summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.RTSpecialName">
      <summary>指定公共语言运行时应检查名称编码。</summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.SpecialName">
      <summary>指定事件特殊，具体之处由名称描述。</summary>
    </member>
    <member name="T:System.Reflection.EventInfo">
      <summary>发现事件的属性并提供对事件元数据的访问权。</summary>
    </member>
    <member name="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary>将事件处理程序添加到事件源。</summary>
      <param name="target">事件源。</param>
      <param name="handler">封装目标引发事件时将调用的方法。</param>
      <exception cref="T:System.InvalidOperationException">该事件没有公共的 add 访问器。</exception>
      <exception cref="T:System.ArgumentException">传入的处理程序无法使用。</exception>
      <exception cref="T:System.MethodAccessException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.MemberAccessException" />。 调用方无权访问该成员。</exception>
      <exception cref="T:System.Reflection.TargetException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获 <see cref="T:System.Exception" />。 <paramref name="target" /> 参数为 null 并且该事件不是静态的。 - 或 - 目标上没有声明 <see cref="T:System.Reflection.EventInfo" />。</exception>
    </member>
    <member name="P:System.Reflection.EventInfo.Attributes">
      <summary>获取此事件的属性。</summary>
      <returns>此事件的只读特性。</returns>
    </member>
    <member name="P:System.Reflection.EventInfo.EventHandlerType">
      <summary>获取与此事件关联的基础事件处理程序委托的 Type 对象。</summary>
      <returns>表示委托事件处理程序的只读 Type 对象。</returns>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetAddMethod">
      <summary>返回用于将事件处理程序委托添加到事件源的方法。</summary>
      <returns>一个 <see cref="T:System.Reflection.MethodInfo" /> 对象，它表示用于将事件处理程序委托添加到事件源的方法。</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
      <summary>当在派生类中重写时，检索事件的 <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> 方法的 MethodInfo 对象，指定是否返回非公共方法。</summary>
      <returns>一个 <see cref="T:System.Reflection.MethodInfo" /> 对象，它表示用于将事件处理程序委托添加到事件源的方法。</returns>
      <param name="nonPublic">如果可以返回非公共方法，则为 true；否则为 false。</param>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> 为 true，表示用于添加事件处理程序委托的方法为非公共的，并且调用方无权对非公共方法进行反射。</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRaiseMethod">
      <summary>返回在引发该事件时所调用的方法。</summary>
      <returns>引发该事件时所调用的方法。</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
      <summary>当在派生类中重写时，返回引发事件时调用的方法，指定是否返回非公共方法。</summary>
      <returns>在引发事件时调用的 MethodInfo 对象。</returns>
      <param name="nonPublic">如果可以返回非公共方法，则为 true；否则为 false。</param>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> 为 true，表示用于添加事件处理程序委托的方法为非公共的，并且调用方无权对非公共方法进行反射。</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRemoveMethod">
      <summary>返回用于从事件源中移除事件处理程序委托的方法。</summary>
      <returns>一个 <see cref="T:System.Reflection.MethodInfo" /> 对象，它表示用于从事件源中移除事件处理程序委托的方法。</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
      <summary>当在派生类中重写时，检索用于移除事件的方法的 MethodInfo 对象，指定是否返回非公共方法。</summary>
      <returns>一个 <see cref="T:System.Reflection.MethodInfo" /> 对象，它表示用于从事件源中移除事件处理程序委托的方法。</returns>
      <param name="nonPublic">如果可以返回非公共方法，则为 true；否则为 false。</param>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> 为 true，表示用于添加事件处理程序委托的方法为非公共的，并且调用方无权对非公共方法进行反射。</exception>
    </member>
    <member name="P:System.Reflection.EventInfo.IsMulticast">
      <summary>获取一个值，通过该值指示此事件是否为多路广播。</summary>
      <returns>如果该委托是多路广播委托的实例，则为 true；否则为 false。</returns>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="P:System.Reflection.EventInfo.IsSpecialName">
      <summary>获取一个值，通过该值指示 EventInfo 是否具有一个有特殊意义的名称。</summary>
      <returns>如果此事件具有一个特殊名称，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>从事件源中移除事件处理程序。</summary>
      <param name="target">事件源。</param>
      <param name="handler">将解除与由目标引发的事件的关联的委托。</param>
      <exception cref="T:System.InvalidOperationException">该事件没有公共的 remove 访问器。</exception>
      <exception cref="T:System.ArgumentException">传入的处理程序无法使用。</exception>
      <exception cref="T:System.Reflection.TargetException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获 <see cref="T:System.Exception" />。 <paramref name="target" /> 参数为 null 并且该事件不是静态的。 - 或 - 目标上没有声明 <see cref="T:System.Reflection.EventInfo" />。</exception>
      <exception cref="T:System.MethodAccessException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.MemberAccessException" />。 调用方无权访问该成员。</exception>
    </member>
    <member name="T:System.Reflection.FieldAttributes">
      <summary>指定描述字段特性的标志。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Assembly">
      <summary>指定该字段可由整个程序集访问。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.FamANDAssem">
      <summary>指定该字段只能由此程序集中的子类型访问。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Family">
      <summary>指定该字段只能由类型和子类型访问。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.FamORAssem">
      <summary>指定该字段可由任意位置的子类型访问，也可由整个程序集访问。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.FieldAccessMask">
      <summary>指定给定字段的访问级别。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.HasDefault">
      <summary>指定该字段具有默认值。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.HasFieldMarshal">
      <summary>指定该字段包含封送处理信息。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.HasFieldRVA">
      <summary>指定该字段具有相对虚拟地址 (RVA)。 RVA 是方法体在当前图像中的位置，它是相对于它所在的图像文件的开始的地址。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.InitOnly">
      <summary>指明该字段只能初始化，只可在构造函数的函数体中设置。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Literal">
      <summary>指定该字段的值是一个编译时（静态或早期绑定）常数。 设置它的任何试图将引出 <see cref="T:System.FieldAccessException" />。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.NotSerialized">
      <summary>指定扩展类型时不必序列化该字段。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.PinvokeImpl">
      <summary>保留供将来使用。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Private">
      <summary>指定该字段只能由父类型访问。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.PrivateScope">
      <summary>指定该字段不能被引用。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Public">
      <summary>指定该字段可由任何可看见此范围的成员访问。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.RTSpecialName">
      <summary>指定公共语言运行时（元数据内部 API）应检查名称编码。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.SpecialName">
      <summary>指定一个特殊方法，并用名称说明该方法的特殊性。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Static">
      <summary>指定该字段表示已定义的类型，否则为每实例方式。</summary>
    </member>
    <member name="T:System.Reflection.FieldInfo">
      <summary>发现字段属性并提供对字段元数据的访问权。</summary>
    </member>
    <member name="P:System.Reflection.FieldInfo.Attributes">
      <summary>获取与此字段关联的特性。</summary>
      <returns>此字段的 FieldAttributes。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.FieldHandle">
      <summary>获取 RuntimeFieldHandle，它是字段的内部元数据表示形式的句柄。</summary>
      <returns>某个字段的内部元数据表示形式的句柄。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.FieldType">
      <summary>获取此字段对象的类型。</summary>
      <returns>此字段对象的类型。</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
      <summary>获取由指定句柄表示的字段的 <see cref="T:System.Reflection.FieldInfo" />。</summary>
      <returns>
        <see cref="T:System.Reflection.FieldInfo" /> 对象，表示由 <paramref name="handle" /> 指定的字段。</returns>
      <param name="handle">
        <see cref="T:System.RuntimeFieldHandle" /> 结构，它包含字段的内部元数据表示形式的句柄。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> 无效。</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
      <summary>获取由指定句柄表示的指定泛型类型字段的 <see cref="T:System.Reflection.FieldInfo" />。</summary>
      <returns>
        <see cref="T:System.Reflection.FieldInfo" /> 对象，表示由 <paramref name="handle" /> 指定的字段，该字段的类型为 <paramref name="declaringType" /> 指定的泛型类型。</returns>
      <param name="handle">
        <see cref="T:System.RuntimeFieldHandle" /> 结构，它包含字段的内部元数据表示形式的句柄。</param>
      <param name="declaringType">
        <see cref="T:System.RuntimeTypeHandle" /> 结构，它包含定义该字段的泛型类型的句柄。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> 无效。 - 或 - <paramref name="declaringType" /> 与 <paramref name="handle" /> 不兼容。 例如，<paramref name="declaringType" /> 是泛型类型定义的运行时类型句柄，且 <paramref name="handle" /> 来自于构造类型。 请参见"备注"。</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetValue(System.Object)">
      <summary>在派生类中被重写时，返回给定对象支持的字段的值。</summary>
      <returns>包含此实例反映的字段值的对象。</returns>
      <param name="obj">其字段值将返回的对象。</param>
      <exception cref="T:System.Reflection.TargetException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获 <see cref="T:System.Exception" />。 此字段是非静态的且 <paramref name="obj" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">字段被标记为文本，但是该字段没有一个可接受的文本类型。</exception>
      <exception cref="T:System.FieldAccessException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.MemberAccessException" />。 调用方没有访问此字段的权限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 类既不声明该方法也不继承该方法。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsAssembly">
      <summary>获取一个值，该值指示此字段的潜在可见性是否由 <see cref="F:System.Reflection.FieldAttributes.Assembly" /> 描述；也就是说，此字段只对同一程序集中的其他类型可见，而对该程序集以外的派生类型则不可见。</summary>
      <returns>如果此字段的可见性由 <see cref="F:System.Reflection.FieldAttributes.Assembly" /> 准确描述，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsFamily">
      <summary>获取一个值，该值指示此字段的可见性是否由 <see cref="F:System.Reflection.FieldAttributes.Family" /> 描述；也就是说，此字段仅在其类和派生类内可见。</summary>
      <returns>如果对此字段的访问由 <see cref="F:System.Reflection.FieldAttributes.Family" /> 准确描述，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
      <summary>获取一个值，该值指示此字段的可见性是否由 <see cref="F:System.Reflection.FieldAttributes.FamANDAssem" /> 描述；也就是说，可从派生类访问此字段，但仅当这些派生类在同一程序集中时。</summary>
      <returns>如果对此字段的访问由 <see cref="F:System.Reflection.FieldAttributes.FamANDAssem" /> 准确描述，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
      <summary>获取一个值，该值指示此字段的潜在可见性是否由 <see cref="F:System.Reflection.FieldAttributes.FamORAssem" /> 描述；也就是说，可通过派生类（无论其位置如何）和同一程序集中的类访问此字段。</summary>
      <returns>如果对此字段的访问由 <see cref="F:System.Reflection.FieldAttributes.FamORAssem" /> 准确描述，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsInitOnly">
      <summary>获取一个值，通过该值指示此字段是否只能在构造函数的主体中设置。</summary>
      <returns>如果字段设置了 InitOnly 属性，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsLiteral">
      <summary>获取一个值，通过该值指示该值是否在编译时写入并且不能更改。</summary>
      <returns>如果字段设置了 Literal 属性，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsPrivate">
      <summary>获取一个值，通过该值指示此字段是否为私有字段。</summary>
      <returns>如果此字段为私有字段，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsPublic">
      <summary>获取一个值，通过该值指示此字段是否为公共字段。</summary>
      <returns>如果此字段为公共字段，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsSpecialName">
      <summary>获取一个值，该值指示是否已在 <see cref="T:System.Reflection.FieldAttributes" /> 枚举数中设置相应的 SpecialName 特性。</summary>
      <returns>如果在 <see cref="T:System.Reflection.FieldAttributes" /> 中设置了 SpecialName 特性，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsStatic">
      <summary>获取一个值，通过该值指示此字段是否为静态字段。</summary>
      <returns>如果此字段为静态字段，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
      <summary>设置给定对象支持的字段值。</summary>
      <param name="obj">将设置其字段值的对象。</param>
      <param name="value">分配给字段的值。</param>
      <exception cref="T:System.FieldAccessException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.MemberAccessException" />。 调用方没有访问此字段的权限。</exception>
      <exception cref="T:System.Reflection.TargetException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获 <see cref="T:System.Exception" />。 <paramref name="obj" /> 参数为 null 并且该字段是一个实例字段。</exception>
      <exception cref="T:System.ArgumentException">对象上不存在该字段。 - 或 - <paramref name="value" /> 参数无法转换并存储在该字段中。</exception>
    </member>
    <member name="T:System.Reflection.GenericParameterAttributes">
      <summary>描述对泛型类型或泛型方法的泛型类型参数的约束。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.Contravariant">
      <summary>该泛型类型参数是逆变的。 逆变类型参数可以作为参数类型出现在方法签名中。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.Covariant">
      <summary>该泛型类型参数是协变的。 协变类型参数可以作为方法的结果类型、只读字段的类型、声明的基类型或实现接口出现。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint">
      <summary>仅当类型具有无参数构造函数时，才能替代泛型类型参数。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.None">
      <summary>没有任何特殊标志。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint">
      <summary>仅当类型是值类型且不可为空时，才能替代泛型类型参数。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint">
      <summary>仅当类型为引用类型时，才能替代泛型类型参数。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.SpecialConstraintMask">
      <summary>选择所有特殊约束标志的组合。 此值是使用逻辑“或”将标志 <see cref="F:System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint" />、<see cref="F:System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint" /> 和 <see cref="F:System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint" /> 进行组合的结果。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.VarianceMask">
      <summary>选择所有方差标志的组合。 此值是使用逻辑“或”将标志 <see cref="F:System.Reflection.GenericParameterAttributes.Contravariant" /> 和 <see cref="F:System.Reflection.GenericParameterAttributes.Covariant" /> 进行组合的结果。</summary>
    </member>
    <member name="T:System.Reflection.ManifestResourceInfo">
      <summary>提供对清单资源的访问，这些资源是描述应用程序依赖项的 XML 文件。</summary>
    </member>
    <member name="M:System.Reflection.ManifestResourceInfo.#ctor(System.Reflection.Assembly,System.String,System.Reflection.ResourceLocation)">
      <summary>为由指定的程序集和文件包含且具有指定位置的资源初始化 <see cref="T:System.Reflection.ManifestResourceInfo" /> 类的新实例。</summary>
      <param name="containingAssembly">包含清单资源的程序集。</param>
      <param name="containingFileName">包含清单资源的文件名（如果该文件与清单文件不同）。</param>
      <param name="resourceLocation">一个枚举值的按位组合，提供有关清单资源位置的信息。</param>
    </member>
    <member name="P:System.Reflection.ManifestResourceInfo.FileName">
      <summary>获取包含清单资源的文件名（如果该文件与清单文件不同）。</summary>
      <returns>清单资源的文件名。</returns>
    </member>
    <member name="P:System.Reflection.ManifestResourceInfo.ReferencedAssembly">
      <summary>获取包含清单资源的程序集。</summary>
      <returns>包含清单资源的程序集。</returns>
    </member>
    <member name="P:System.Reflection.ManifestResourceInfo.ResourceLocation">
      <summary>获取清单资源的位置。</summary>
      <returns>指示清单资源位置的 <see cref="T:System.Reflection.ResourceLocation" /> 标志的按位组合。</returns>
    </member>
    <member name="T:System.Reflection.MemberInfo">
      <summary>获取有关成员属性的信息并提供对成员元数据的访问。</summary>
    </member>
    <member name="P:System.Reflection.MemberInfo.DeclaringType">
      <summary>获取声明该成员的类。</summary>
      <returns>声明该成员的类的 Type 对象。</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
      <summary>在派生类中重写时，返回应用于此成员的所有自定义特性的数组。</summary>
      <returns>一个包含应用于此成员的所有自定义特性的数组，在未定义任何特性时为包含零个元素的数组。</returns>
      <param name="inherit">搜索此成员的继承链以查找这些属性，则为 true；否则为 false。 属性和事件中忽略此参数，请参见“备注”。</param>
      <exception cref="T:System.InvalidOperationException">该成员属于加载到仅反射上下文的类型。 请参见如何：将程序集加载到仅反射上下文中。</exception>
      <exception cref="T:System.TypeLoadException">未能加载自定义特性类型。</exception>
    </member>
    <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>在派生类中重写时，返回应用于此成员并由 <see cref="T:System.Type" /> 标识的自定义特性的数组。</summary>
      <returns>应用于此成员的自定义特性的数组；如果未应用任何可分配给 <paramref name="attributeType" /> 的特性，则为包含零个元素的数组。</returns>
      <param name="attributeType">要搜索的特性类型。 只返回可分配给此类型的属性。</param>
      <param name="inherit">搜索此成员的继承链以查找这些属性，则为 true；否则为 false。 属性和事件中忽略此参数，请参见“备注”。</param>
      <exception cref="T:System.TypeLoadException">无法加载自定义特性类型。</exception>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="attributeType" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">该成员属于加载到仅反射上下文的类型。 请参见如何：将程序集加载到仅反射上下文中。</exception>
    </member>
    <member name="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
      <summary>在派生类中重写时，指示是否将指定类型或其派生类型的一个或多个特性应用于此成员。</summary>
      <returns>如果将 <paramref name="attributeType" /> 或其任何派生类型的一个或多个实例应用于此成员，则为 true；否则为 false。</returns>
      <param name="attributeType">要搜索的自定义属性的类型。 该搜索包括派生类型。</param>
      <param name="inherit">搜索此成员的继承链以查找这些属性，则为 true；否则为 false。 属性和事件中忽略此参数，请参见“备注”。</param>
    </member>
    <member name="P:System.Reflection.MemberInfo.Name">
      <summary>获取当前成员的名称。</summary>
      <returns>包含此成员名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Reflection.MemberInfo.ReflectedType">
      <summary>获取用于获取 MemberInfo 的此实例的类对象。</summary>
      <returns>Type 对象，通过它获取了该 MemberInfo 对象。</returns>
    </member>
    <member name="T:System.Reflection.MethodAttributes">
      <summary>指定方法属性的标志。 这些标志在 corhdr.h 文件中定义。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Abstract">
      <summary>指示此类不提供此方法的实现。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Assembly">
      <summary>指示此方法可由该程序集的任何类访问。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.CheckAccessOnOverride">
      <summary>指示仅当此方法可访问时，才可以对其进行重写。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.FamANDAssem">
      <summary>指示此方法只能由该类型和它在此程序集中的派生类型的成员访问。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Family">
      <summary>指示此方法只可由该类及其派生类的成员访问。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.FamORAssem">
      <summary>指示此方法可由任意位置的派生类访问，也可由程序集中的任何类访问。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Final">
      <summary>指示无法重写此方法。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.HasSecurity">
      <summary>指示此方法具有关联的安全性。 保留此标志仅供运行时使用。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.HideBySig">
      <summary>指示此方法按名称和签名隐藏，否则只按名称隐藏。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.MemberAccessMask">
      <summary>检索可访问性信息。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.NewSlot">
      <summary>指示此方法总是获取 vtable 中的新槽。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.PinvokeImpl">
      <summary>指示此方法的实现通过 PInvoke（平台调用服务）转发。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Private">
      <summary>指示此方法只能由当前类访问。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.PrivateScope">
      <summary>指示该成员不能被引用。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Public">
      <summary>指示此方法可由任何包括该对象的对象访问。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.RequireSecObject">
      <summary>指示此方法调用另一个包含安全性代码的方法。 保留此标志仅供运行时使用。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.ReuseSlot">
      <summary>指示此方法将重复使用 vtable 中的现有槽。 这是默认行为。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.RTSpecialName">
      <summary>指示公共语言运行时检查名称编码。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.SpecialName">
      <summary>指示此方法是特殊的。 名称描述此方法的特殊性。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Static">
      <summary>指示在类型上定义此方法，否则基于每个实例定义此方法。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.UnmanagedExport">
      <summary>指示此托管方法由 thunk 导出为非托管代码。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Virtual">
      <summary>指示此方法为虚方法。</summary>
    </member>
    <member name="T:System.Reflection.MethodBase">
      <summary>提供有关方法和构造函数的信息。</summary>
    </member>
    <member name="P:System.Reflection.MethodBase.Attributes">
      <summary>获取与此方法关联的属性。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodAttributes" /> 值之一。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.CallingConvention">
      <summary>获取一个值，该值指示此方法的调用约定。</summary>
      <returns>此方法的 <see cref="T:System.Reflection.CallingConventions" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.ContainsGenericParameters">
      <summary>获取一个值，该值指示泛型方法是否包含未赋值的泛型类型参数。</summary>
      <returns>如果当前 <see cref="T:System.Reflection.MethodBase" /> 对象表示的泛型方法包含未赋值的泛型类型参数，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.GetGenericArguments">
      <summary>返回 <see cref="T:System.Type" /> 对象的数组，这些对象表示泛型方法的类型实参或泛型方法定义的类型形参。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象的数组，这些对象表示泛型方法的类型变量或泛型方法定义的类型参数。 如果当前方法不是泛型方法，则返回空数组。</returns>
      <exception cref="T:System.NotSupportedException">当前对象是 <see cref="T:System.Reflection.ConstructorInfo" />。 .NET Framework 2.0 版不支持泛型构造函数。 如果派生类未重写此方法，此异常即为默认行为。</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)">
      <summary>通过使用方法的内部元数据表示形式（句柄）获取方法信息。</summary>
      <returns>MethodBase，包含方法的有关信息。</returns>
      <param name="handle">方法的句柄。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> 无效。</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
      <summary>以指定泛型类型，获取指定句柄所表示的构造函数或方法的 <see cref="T:System.Reflection.MethodBase" /> 对象。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodBase" /> 对象，表示由 <paramref name="handle" /> 指定的方法或构造函数，为由 <paramref name="declaringType" /> 指定的泛型类型。</returns>
      <param name="handle">构造函数或方法的内部元数据表示形式的句柄。</param>
      <param name="declaringType">定义构造函数或方法的泛型类型的句柄。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> 无效。</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetParameters">
      <summary>当在派生类中重写时，获取指定的方法或构造函数的参数。</summary>
      <returns>ParameterInfo 类型的数组，包含与此 MethodBase 实例所反射的方法（或构造函数）的签名匹配的信息。</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])">
      <summary>使用指定的参数调用当前实例所表示的方法或构造函数。</summary>
      <returns>一个对象，包含被调用方法的返回值，如果调用的是构造函数，则为 null。 也可以修改表示用 ref 或 out 关键字声明的参数的 <paramref name="parameters" /> 数组元素。</returns>
      <param name="obj">对其调用方法或构造函数的对象。 如果方法是静态的，则忽略此参数。 如果构造函数是静态的，则此参数必须为 null 或定义该构造函数的类的实例。</param>
      <param name="parameters">调用的方法或构造函数的参数列表。 这是一个对象数组，这些对象与要调用的方法或构造函数的参数具有相同的数量、顺序和类型。 如果没有任何参数，则 <paramref name="parameters" /> 应为 null。 如果此实例所表示的方法或构造函数采用 ref 参数（在 Visual Basic 中为 ByRef），使用此函数调用该方法或构造函数时，该参数不需要任何特殊属性。 如果此数组中的对象未用值来显式初始化，则该对象将包含该对象类型的默认值。 对于引用类型的元素，该值为 null。 对于值类型的元素，该值为 0、0.0 或 false，具体取决于特定的元素类型。</param>
      <exception cref="T:System.Reflection.TargetException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获 <see cref="T:System.Exception" />。 <paramref name="obj" /> 参数为 null 并且此方法不是静态的。 - 或 - <paramref name="obj" /> 的类既不声明也不继承此方法。 - 或 - 调用了静态构造函数，并且 <paramref name="obj" /> 既不是 null 也不是声明该构造函数的类的实例。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> 数组的元素与此实例所反射的方法或构造函数的签名不匹配。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">调用的方法或构造函数引发异常。 - 或 - 当前实例是包含不可验证代码的 <see cref="T:System.Reflection.Emit.DynamicMethod" />。 请参见 <see cref="T:System.Reflection.Emit.DynamicMethod" /> 的备注中的“验证”一节。</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">
        <paramref name="parameters" /> 数组的参数数目不正确。</exception>
      <exception cref="T:System.MethodAccessException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.MemberAccessException" />。 调用方没有调用此构造函数的权限。</exception>
      <exception cref="T:System.InvalidOperationException">声明此方法的类型是开放式泛型类型。 即，<see cref="P:System.Type.ContainsGenericParameters" /> 属性为声明类型返回 true。</exception>
      <exception cref="T:System.NotSupportedException">当前实例等于 <see cref="T:System.Reflection.Emit.MethodBuilder" />。</exception>
    </member>
    <member name="P:System.Reflection.MethodBase.IsAbstract">
      <summary>获取一个值，该值指示此方法是否为抽象方法。</summary>
      <returns>如果该方法是抽象的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsAssembly">
      <summary>获取一个值，该值指示此方法或构造函数的潜在可见性是否由 <see cref="F:System.Reflection.MethodAttributes.Assembly" /> 描述；也就是说，此方法或构造函数只对同一程序集中的其他类型可见，而对该程序集以外的派生类型则不可见。</summary>
      <returns>如果此方法或构造函数的可见性由 <see cref="F:System.Reflection.MethodAttributes.Assembly" /> 准确描述，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsConstructor">
      <summary>获取一个值，该值指示此方法是否为构造函数。</summary>
      <returns>如果此方法是 <see cref="T:System.Reflection.ConstructorInfo" /> 对象（参见"备注"中有关 <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> 对象的说明）所表示的构造函数，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFamily">
      <summary>获取一个值，该值指示此方法或构造函数的可见性是否由 <see cref="F:System.Reflection.MethodAttributes.Family" /> 描述；也就是说，此方法或构造函数仅在其类和派生类内可见。</summary>
      <returns>如果对此方法或构造函数的访问由 <see cref="F:System.Reflection.MethodAttributes.Family" /> 准确描述，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFamilyAndAssembly">
      <summary>获取一个值，该值指示此方法或构造函数的可见性是否由 <see cref="F:System.Reflection.MethodAttributes.FamANDAssem" /> 描述；也就是说，此方法或构造函数可由派生类调用，但仅当这些派生类在同一程序集中时。</summary>
      <returns>如果对此方法或构造函数的访问由 <see cref="F:System.Reflection.MethodAttributes.FamANDAssem" /> 准确描述，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFamilyOrAssembly">
      <summary>获取一个值，该值指示此方法或构造函数的潜在可见性是否由 <see cref="F:System.Reflection.MethodAttributes.FamORAssem" /> 描述；也就是说，此方法或构造函数可由派生类（无论其位置如何）和同一程序集中的类调用。</summary>
      <returns>如果对此方法或构造函数的访问由 <see cref="F:System.Reflection.MethodAttributes.FamORAssem" /> 准确描述，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFinal">
      <summary>获取一个值，该值指示此方法是否为 final。</summary>
      <returns>如果此方法是 final 方法，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsGenericMethod">
      <summary>获取一个值，该值指示方法是否为泛型方法。</summary>
      <returns>如果当前 <see cref="T:System.Reflection.MethodBase" /> 表示泛型方法，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsGenericMethodDefinition">
      <summary>获取一个值，该值指示方法是否为泛型方法定义。</summary>
      <returns>如果当前 <see cref="T:System.Reflection.MethodBase" /> 对象表示泛型方法的定义，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsHideBySig">
      <summary>获取一个值，该值指示是否只有一个签名完全相同的同一种类的成员在派生类中是隐藏的。</summary>
      <returns>如果此成员被签名隐藏，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsPrivate">
      <summary>获取一个值，该值指示此成员是否是私有的。</summary>
      <returns>如果对此方法的访问只限于该类本身的其他成员，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsPublic">
      <summary>获取一个值，该值指示这是否是一个公共方法。</summary>
      <returns>如果此方法是公共的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsSpecialName">
      <summary>获取一个值，该值指示此方法是否具有特殊名称。</summary>
      <returns>如果此方法具有特殊名称，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsStatic">
      <summary>获取一个值，该值指示方法是否为 static。</summary>
      <returns>如果此方法为 static，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsVirtual">
      <summary>获取一个值，该值指示方法是否为 virtual。</summary>
      <returns>如果此方法为 virtual，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.MethodHandle">
      <summary>获取方法的内部元数据表示形式的句柄。</summary>
      <returns>
        <see cref="T:System.RuntimeMethodHandle" /> 对象。</returns>
    </member>
    <member name="T:System.Reflection.MethodInfo">
      <summary>发现方法的属性并提供对方法元数据的访问。</summary>
    </member>
    <member name="M:System.Reflection.MethodInfo.GetBaseDefinition">
      <summary>当在派生类中被重写时，为直接或间接的基类（用该实例表示的方法首先在此类中声明）上的方法返回 MethodInfo 对象。</summary>
      <returns>表示此方法第一个实现的 MethodInfo 对象。</returns>
    </member>
    <member name="M:System.Reflection.MethodInfo.GetGenericArguments">
      <summary>返回 <see cref="T:System.Type" /> 对象的数组，这些对象表示泛型方法的类型实参或泛型方法定义的类型形参。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象的数组，这些对象表示泛型方法的类型变量或泛型方法定义的类型参数。 如果当前方法不是泛型方法，则返回空数组。</returns>
      <exception cref="T:System.NotSupportedException">此方法不受支持。</exception>
    </member>
    <member name="M:System.Reflection.MethodInfo.GetGenericMethodDefinition">
      <summary>返回一个 <see cref="T:System.Reflection.MethodInfo" /> 对象，该对象表示可从其构造当前方法的泛型方法定义。</summary>
      <returns>一个 <see cref="T:System.Reflection.MethodInfo" /> 对象，表示可从其构造当前方法的泛型方法定义。</returns>
      <exception cref="T:System.InvalidOperationException">当前方法不是泛型方法。 也就是说，<see cref="P:System.Reflection.MethodInfo.IsGenericMethod" /> 返回 false。</exception>
      <exception cref="T:System.NotSupportedException">此方法不受支持。</exception>
    </member>
    <member name="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
      <summary>用类型数组的元素替代当前泛型方法定义的类型参数，并返回表示结果构造方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Reflection.MethodInfo" /> 对象，表示通过将当前泛型方法定义的类型参数替换为 <paramref name="typeArguments" /> 的元素生成的构造方法。</returns>
      <param name="typeArguments">要替换当前泛型方法定义的类型参数的类型数组。</param>
      <exception cref="T:System.InvalidOperationException">当前 <see cref="T:System.Reflection.MethodInfo" /> 不表示泛型方法定义。 也就是说，<see cref="P:System.Reflection.MethodInfo.IsGenericMethodDefinition" /> 返回 false。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArguments" /> 为 null。 - 或 - <paramref name="typeArguments" /> 的所有元素均为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArguments" /> 中元素的数目与当前泛型方法定义的类型参数的数目不同。 - 或 - <paramref name="typeArguments" /> 的某个元素不满足为当前泛型方法定义的相应类型参数指定的约束。</exception>
      <exception cref="T:System.NotSupportedException">此方法不受支持。</exception>
    </member>
    <member name="P:System.Reflection.MethodInfo.ReturnParameter">
      <summary>获取一个 <see cref="T:System.Reflection.ParameterInfo" /> 对象，该对象包含有关方法的返回类型的信息（例如返回类型是否具有自定义修饰符）。</summary>
      <returns>一个 <see cref="T:System.Reflection.ParameterInfo" /> 对象，包含有关返回类型的信息。</returns>
      <exception cref="T:System.NotImplementedException">此方法未实现。</exception>
    </member>
    <member name="P:System.Reflection.MethodInfo.ReturnType">
      <summary>获取此方法的返回类型。</summary>
      <returns>此方法的返回类型。</returns>
    </member>
    <member name="T:System.Reflection.Missing">
      <summary>表示缺少的 <see cref="T:System.Object" />。 此类不能被继承。</summary>
    </member>
    <member name="F:System.Reflection.Missing.Value">
      <summary>表示 <see cref="T:System.Reflection.Missing" /> 类的唯一实例。</summary>
    </member>
    <member name="T:System.Reflection.Module">
      <summary>在模块上执行反射。</summary>
    </member>
    <member name="P:System.Reflection.Module.Assembly">
      <summary>为此 <see cref="T:System.Reflection.Module" /> 实例获取适当的 <see cref="T:System.Reflection.Assembly" />。</summary>
      <returns>Assembly 对象。</returns>
    </member>
    <member name="P:System.Reflection.Module.Name">
      <summary>获取 String，它表示移除了路径的模块名。</summary>
      <returns>不带路径的模块名。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.Reflection.ParameterAttributes">
      <summary>定义可与参数关联的属性。 这些属性在 CorHdr.h 中定义。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.HasDefault">
      <summary>指定参数具有默认值。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.HasFieldMarshal">
      <summary>指定该参数具有字段封送处理信息。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.In">
      <summary>指定该参数是一个输入参数。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Lcid">
      <summary>指定该参数是一个区域设置标识符 (lcid)。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.None">
      <summary>指定不存在参数属性。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Optional">
      <summary>指定参数为可选。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Out">
      <summary>指定该参数是一个输出参数。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Retval">
      <summary>指定该参数是一个返回值。</summary>
    </member>
    <member name="T:System.Reflection.ParameterInfo">
      <summary>发现参数属性并提供对参数元数据的访问。</summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Attributes">
      <summary>获取该参数的属性。</summary>
      <returns>表示该参数的特性的 ParameterAttributes 对象。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.DefaultValue">
      <summary>如果此参数有默认值，则获取指示此参数的默认值的值。</summary>
      <returns>此参数的默认值；如果此参数没有默认值，则为 <see cref="F:System.DBNull.Value" />。</returns>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
      <summary>获取该参数上定义的所有自定义属性。</summary>
      <returns>包含应用于此参数的所有自定义特性的数组。</returns>
      <param name="inherit">对于该类型的对象，该参数被忽略。 请参见"备注"。</param>
      <exception cref="T:System.TypeLoadException">未能加载自定义特性类型。</exception>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>获取应用于此参数的指定类型或其派生类型的自定义特性。</summary>
      <returns>一个包含指定类型或其派生类型的自定义特性的数组。</returns>
      <param name="attributeType">由类型标识的自定义属性。</param>
      <param name="inherit">对于该类型的对象，该参数被忽略。 请参见"备注"。</param>
      <exception cref="T:System.ArgumentException">该类型必须是由基础运行时系统提供的类型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 为 null。</exception>
      <exception cref="T:System.TypeLoadException">未能加载自定义特性类型。</exception>
    </member>
    <member name="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
      <summary>确定指定类型或其派生类型的自定义特性是否应用于此参数。</summary>
      <returns>如果将 <paramref name="attributeType" /> 或其派生类型的一个或多个实例应用于此参数，则为 true；否则为 false。</returns>
      <param name="attributeType">要搜索的 Type 对象。</param>
      <param name="inherit">对于该类型的对象，该参数被忽略。 请参见"备注"。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是一个由公共语言运行时提供的 <see cref="T:System.Type" /> 对象。</exception>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsIn">
      <summary>获取一个值，通过该值指示这是否为输入参数。</summary>
      <returns>如果此参数是输入参数，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsLcid">
      <summary>获取一个值，通过该值指示该参数是否为区域设置标识符 (lcid)。</summary>
      <returns>如果此参数是区域设置标识符，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsOptional">
      <summary>获取一个值，通过该值指示该参数是否可选。</summary>
      <returns>如果此参数是可选的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsOut">
      <summary>获取一个值，通过该值指示这是否为输出参数。</summary>
      <returns>如果此参数是输出参数，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsRetval">
      <summary>获取一个值，通过该值指示这是否为 Retval 参数。</summary>
      <returns>如果此参数是 Retval，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Member">
      <summary>获取一个值，通过该值指示实现此参数的成员。</summary>
      <returns>植入由此 <see cref="T:System.Reflection.ParameterInfo" /> 表示的参数的成员。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Name">
      <summary>获取参数名。</summary>
      <returns>此参数的简单名称。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.ParameterType">
      <summary>获取该参数的 Type。</summary>
      <returns>表示该参数 Type 的 Type 对象。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Position">
      <summary>获取参数在形参表中的位置（从零开始）。</summary>
      <returns>表示该参数在参数列表中所占位置的整数。</returns>
    </member>
    <member name="M:System.Reflection.ParameterInfo.ToString">
      <summary>获取表示为字符串的参数类型和名称。</summary>
      <returns>包含参数的类型和名称的字符串。</returns>
    </member>
    <member name="T:System.Reflection.PropertyAttributes">
      <summary>定义可能与属性 (Property) 关联的属性 (Attribute)。 这些特性值定义在 corhdr.h 中。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.HasDefault">
      <summary>指定属性具有默认值。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.None">
      <summary>指定没有与属性 (Property) 关联的属性 (Attribute)。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.RTSpecialName">
      <summary>指定由元数据内部 API 检查名称编码。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.SpecialName">
      <summary>指定属性是特殊的，并用名称描述属性的特殊性。</summary>
    </member>
    <member name="T:System.Reflection.PropertyInfo">
      <summary>发现属性 (Property) 的属性 (Attribute) 并提供对属性 (Property) 元数据的访问。</summary>
    </member>
    <member name="P:System.Reflection.PropertyInfo.Attributes">
      <summary>获取此属性 (Property) 的属性 (Attribute)。</summary>
      <returns>此属性 (Property) 的属性 (Attribute)。</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.CanRead">
      <summary>获取一个值，该值指示此属性是否可读。</summary>
      <returns>如果此属性可读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.CanWrite">
      <summary>获取一个值，该值指示此属性是否可写。</summary>
      <returns>如果此属性可写，则为 true；否则，为 false。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetAccessors">
      <summary>返回一个数组，其元素反射了由当前实例反射的属性的公共 get、set 以及其他访问器。</summary>
      <returns>如果找到访问器，此方法将返回一个 <see cref="T:System.Reflection.MethodInfo" /> 对象的数组，这些对象反射了由当前实例反射的属性的公共 get、set 以及其他访问器；如果没有找到，此方法将返回包含零 (0) 个元素的数组。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
      <summary>返回一个数组，其元素反射了当前实例反射的属性的公共及非公共（如果指定）get、set 以及其他访问器。</summary>
      <returns>一个 <see cref="T:System.Reflection.MethodInfo" /> 对象的数组，其元素反射了由当前实例反射的属性的 get、set 及其他访问器。 如果 <paramref name="nonPublic" /> 为 true，则此数组包含公共及非公共 get、set 及其他访问器。 如果 <paramref name="nonPublic" /> 为 false，则此数组仅包含公共 get、set 及其他访问器。 如果没有找到具有指定可见性的访问器，则此方法将返回包含零 (0) 个元素的数组。</returns>
      <param name="nonPublic">指示非公共方法是否应在 MethodInfo 数组中返回。 如果要包括非公共方法，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetConstantValue">
      <summary>由编译器返回与属性关联的文本值。</summary>
      <returns>一个 <see cref="T:System.Object" />，它包含与此属性关联的文本值。 如果文本值是一个元素值为零的类类型，则返回值为 null。</returns>
      <exception cref="T:System.InvalidOperationException">非托管元数据中的常数表不包含当前属性的常数值。</exception>
      <exception cref="T:System.FormatException">值的类型不是公共语言规范 (CLS) 许可的类型。 请参见“ECMA Partition II”（ECMA 第二部分）规范中的“Metadata”（元数据）。</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetGetMethod">
      <summary>返回此属性的公共 get 访问器。</summary>
      <returns>MethodInfo 对象，表示此属性的公共 get 访问器；如果 get 访问器是非公共的或不存在，则为 null。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
      <summary>当在派生类中重写时，返回此属性的公共或非公共 get 访问器。</summary>
      <returns>如果 <paramref name="nonPublic" /> 为 true，则返回表示该属性的 get 访问器的 MethodInfo 对象。 如果 <paramref name="nonPublic" /> 为 false 且 get 访问器是非公共的，或者如果 <paramref name="nonPublic" /> 为 true 但不存在 get 访问器，则返回 null。</returns>
      <param name="nonPublic">指示是否应返回非公共 get 取值函数。 如果将要返回非公共访问器，则为 true；否则为 false。</param>
      <exception cref="T:System.Security.SecurityException">请求的方法为非公共的，并且调用方不具有对该非公共方法进行反射的 <see cref="T:System.Security.Permissions.ReflectionPermission" />。</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetIndexParameters">
      <summary>当在派生类中重写时，返回此属性的所有索引参数的数组。</summary>
      <returns>ParameterInfo 类型的数组，它包含索引的参数。 如果该属性未编制索引，则该数组具有 0 （零） 个元素。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetSetMethod">
      <summary>返回此属性的公共 set 访问器。</summary>
      <returns>如果 set 访问器是公共的，则为表示此属性的 Set 方法的 MethodInfo 对象；如果 set 访问器是非公共的，则为 null。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
      <summary>当在派生类中重写时，返回此属性的 set 访问器。</summary>
      <returns>值 Condition 表示此属性的 Set 方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象。 set 访问器是公共的。 - 或 - <paramref name="nonPublic" /> 为 true，set 访问器是非公共的。 null <paramref name="nonPublic" /> 为 true，但属性是只读的。 - 或 - <paramref name="nonPublic" /> 为 false，set 访问器是非公共的。 - 或 - 不存在 set 访问器。</returns>
      <param name="nonPublic">指示在取值函数是非公共的情况下是否应将其返回。 如果将要返回非公共访问器，则为 true；否则为 false。</param>
      <exception cref="T:System.Security.SecurityException">请求的方法为非公共的，并且调用方不具有对该非公共方法进行反射的 <see cref="T:System.Security.Permissions.ReflectionPermission" />。</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
      <summary>用索引化属性的可选索引值返回指定对象的该属性值。</summary>
      <returns>指定对象的属性值。</returns>
      <param name="obj">将返回其属性值的对象。</param>
      <param name="index">索引化属性的可选索引值。 对于非索引化属性，该值应为 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 数组不包含所需类型的参数。 - 或 - 未找到该属性的 get 访问器。</exception>
      <exception cref="T:System.Reflection.TargetException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获 <see cref="T:System.Exception" />。 该对象与目标类型不匹配，或者某属性是实例属性但 <paramref name="obj" /> 为 null。</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">
        <paramref name="index" /> 中参数的数目与已编制索引的属性所采用的参数的数目不相符。</exception>
      <exception cref="T:System.MethodAccessException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.MemberAccessException" />。 尝试非法访问某类中私有或受保护的方法。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">检索属性值时出错。 例如，为索引属性指定的索引值超出范围。 <see cref="P:System.Exception.InnerException" /> 属性指示错误的原因。</exception>
    </member>
    <member name="P:System.Reflection.PropertyInfo.IsSpecialName">
      <summary>获取一个值，该值指示此属性是否是特殊名称。</summary>
      <returns>如果此属性是特殊名称，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.PropertyType">
      <summary>获取此属性的类型。</summary>
      <returns>此属性的类型。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
      <summary>用索引化属性的可选索引值设置指定对象的该属性值。</summary>
      <param name="obj">将设置其属性值的对象。</param>
      <param name="value">新的属性值。</param>
      <param name="index">索引化属性的可选索引值。 对于非索引化属性，该值应为 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 数组不包含所需类型的参数。 - 或 - 未找到该属性的 set 访问器。</exception>
      <exception cref="T:System.Reflection.TargetException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获 <see cref="T:System.Exception" />。 该对象与目标类型不匹配，或者某属性是实例属性但 <paramref name="obj" /> 为 null。</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">
        <paramref name="index" /> 中参数的数目与已编制索引的属性所采用的参数的数目不相符。</exception>
      <exception cref="T:System.MethodAccessException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.MemberAccessException" />。 尝试非法访问某类中私有或受保护的方法。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">设置属性值时出错。 例如，为索引属性指定的索引值超出范围。 <see cref="P:System.Exception.InnerException" /> 属性指示错误的原因。</exception>
    </member>
    <member name="T:System.Reflection.ReflectionTypeLoadException">
      <summary>当模块中有任何类无法加载时由 <see cref="M:System.Reflection.Module.GetTypes" /> 方法引发的异常。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[])">
      <summary>用给定类及其关联的异常初始化 <see cref="T:System.Reflection.ReflectionTypeLoadException" /> 类的新实例。</summary>
      <param name="classes">Type 类型的数组，其中包含在模块中定义并加载的类。 该数组可以包含空引用（在 Visual Basic 中为 Nothing）值。</param>
      <param name="exceptions">Exception 类型的数组，其中包含由类加载程序引发的异常。 <paramref name="classes" /> 数组中的空引用（在 Visual Basic 中为 Nothing）值与此 <paramref name="exceptions" /> 数组中的异常保持对应。</param>
    </member>
    <member name="M:System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[],System.String)">
      <summary>用给定类、与此类关联的异常以及异常说明初始化 <see cref="T:System.Reflection.ReflectionTypeLoadException" /> 类的新实例。</summary>
      <param name="classes">Type 类型的数组，其中包含在模块中定义并加载的类。 该数组可以包含空引用（在 Visual Basic 中为 Nothing）值。</param>
      <param name="exceptions">Exception 类型的数组，其中包含由类加载程序引发的异常。 <paramref name="classes" /> 数组中的空引用（在 Visual Basic 中为 Nothing）值与此 <paramref name="exceptions" /> 数组中的异常保持对应。</param>
      <param name="message">描述此异常的引发原因的 String。</param>
    </member>
    <member name="P:System.Reflection.ReflectionTypeLoadException.LoaderExceptions">
      <summary>获取类加载程序引发的异常数组。</summary>
      <returns>Exception 类型的数组，其中包含由类加载程序引发的异常。 此实例的 <paramref name="classes" /> 数组中的空值也属于该数组中的异常。</returns>
    </member>
    <member name="P:System.Reflection.ReflectionTypeLoadException.Types">
      <summary>获取模块中定义并加载的类的数组。</summary>
      <returns>Type 类型的数组，其中包含在模块中定义并加载的类。 该数组可以包含一些 null 值。</returns>
    </member>
    <member name="T:System.Reflection.ResourceLocation">
      <summary>指定资源位置。</summary>
    </member>
    <member name="F:System.Reflection.ResourceLocation.ContainedInAnotherAssembly">
      <summary>指定资源包含在另一个程序集中。</summary>
    </member>
    <member name="F:System.Reflection.ResourceLocation.ContainedInManifestFile">
      <summary>指定资源包含在清单文件中。</summary>
    </member>
    <member name="F:System.Reflection.ResourceLocation.Embedded">
      <summary>指定嵌入（即非链接）资源。</summary>
    </member>
    <member name="T:System.Reflection.TargetInvocationException">
      <summary>由通过反射调用的方法引发的异常。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Reflection.TargetInvocationException.#ctor(System.Exception)">
      <summary>用对作为此异常原因的内部异常的引用初始化 <see cref="T:System.Reflection.TargetInvocationException" /> 类的新实例。</summary>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.Reflection.TargetInvocationException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Reflection.TargetInvocationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Reflection.TargetParameterCountException">
      <summary>当调用的参数数目与预期的数目不匹配时引发的异常。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Reflection.TargetParameterCountException.#ctor">
      <summary>用空消息字符串和异常的根源初始化 <see cref="T:System.Reflection.TargetParameterCountException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Reflection.TargetParameterCountException.#ctor(System.String)">
      <summary>用设置为给定消息的消息字符串和根源异常初始化 <see cref="T:System.Reflection.TargetParameterCountException" /> 类的新实例。</summary>
      <param name="message">描述此异常的引发原因的 String。</param>
    </member>
    <member name="M:System.Reflection.TargetParameterCountException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Reflection.TargetParameterCountException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Reflection.TypeAttributes">
      <summary>指定类型属性。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Abstract">
      <summary>指定该类型为抽象类型。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.AnsiClass">
      <summary>LPTSTR 被解释为 ANSI。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.AutoClass">
      <summary>LPTSTR 自动被解释。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.AutoLayout">
      <summary>指定类字段由公共语言运行时自动布局。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.BeforeFieldInit">
      <summary>指定调用此类型的静态方法并不强制系统初始化此类型。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Class">
      <summary>指定该类型为一个类。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.ClassSemanticsMask">
      <summary>指定类语义信息；当前类与上下文相关（否则是灵活的）。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.CustomFormatClass">
      <summary>LPSTR 由一些特定于实现的方式解释，这些方式有可能引发 <see cref="T:System.NotSupportedException" />。 不用于 Microsoft .NET Framework 的实现中。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.CustomFormatMask">
      <summary>用于检索本机互操作的非标准编码信息。 未指定这些 2 位值的含义。 不用于 Microsoft .NET Framework 的实现中。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.ExplicitLayout">
      <summary>指定类字段按指定的偏移量布局。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.HasSecurity">
      <summary>类型具有与之关联的安全性。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Import">
      <summary>指定此类或接口从另一个模块导入。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Interface">
      <summary>指定该类型为一个接口。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.LayoutMask">
      <summary>指定类布局信息。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedAssembly">
      <summary>指定此类是用程序集可见性嵌套的，因此只能由其程序集内的方法访问。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedFamANDAssem">
      <summary>指定此类是用程序集和族可见性嵌套的，因此只能由其族和程序集的交集中的方法访问。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedFamily">
      <summary>指定此类是用族可见性嵌套的，因此只能由它自己的类型和任何派生类型中的方法访问。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedFamORAssem">
      <summary>指定此类是用族或程序集可见性嵌套的，因此只能由其族和程序集的并集中的方法访问。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedPrivate">
      <summary>指定此类是用私有可见性嵌套的。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedPublic">
      <summary>指定此类是用公共可见性嵌套的。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NotPublic">
      <summary>指定此类不是公共的。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Public">
      <summary>指定此类是公共的。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.RTSpecialName">
      <summary>运行时应检查名称编码。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Sealed">
      <summary>指定此类是具体的，无法扩展。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.SequentialLayout">
      <summary>指定类字段按字段发出到元数据的顺序依次布局。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Serializable">
      <summary>指定此类可以序列化。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.SpecialName">
      <summary>指定此类特殊，具体由名称表示。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.StringFormatMask">
      <summary>用于检索本机互操作性的字符串信息。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.UnicodeClass">
      <summary>LPTSTR 被解释为 UNICODE。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.VisibilityMask">
      <summary>指定类型可见性信息。</summary>
    </member>
    <member name="T:System.Resources.MissingManifestResourceException">
      <summary>主程序集不包含非特定区域性的资源和适当的附属程序集缺少时引发的异常。</summary>
    </member>
    <member name="M:System.Resources.MissingManifestResourceException.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.Resources.MissingManifestResourceException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Resources.MissingManifestResourceException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.Resources.MissingManifestResourceException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.Resources.MissingManifestResourceException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对导致此异常的内部异常的引用来初始化 <see cref="T:System.Resources.MissingManifestResourceException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Resources.NeutralResourcesLanguageAttribute">
      <summary>通知应用程序默认区域性的资源控制器。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Resources.NeutralResourcesLanguageAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Resources.NeutralResourcesLanguageAttribute" /> 类的新实例。</summary>
      <param name="cultureName">用其编写的当前程序集的非特定语言资源的区域性的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cultureName" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Resources.NeutralResourcesLanguageAttribute.CultureName">
      <summary>获取区域性名称。</summary>
      <returns>主程序集的默认区域性的名称。</returns>
    </member>
    <member name="T:System.Resources.ResourceManager">
      <summary>表示资源管理器，其可在运行时提供对于特定文化资源的便利访问</summary>
    </member>
    <member name="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
      <summary>初始化 <see cref="T:System.Resources.ResourceManager" /> 类的新实例，该实例在给定的程序集中查找从指定根名称导出的文件中包含的资源。</summary>
      <param name="baseName">资源文件的根名称，没有其扩展名但是包含所有完全限定的命名空间名称。 例如，名为"MyApplication.MyResource.en-US.resources"的资源文件的根名称为"MyApplication.MyResource"。</param>
      <param name="assembly">资源的主程序集。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseName" /> 或 <paramref name="assembly" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.#ctor(System.Type)">
      <summary>它根据指定的对象中的信息在附属程序集内查找资源来初始化 <see cref="T:System.Resources.ResourceManager" /> 类的新实例。</summary>
      <param name="resourceSource">一个类型，从资源管理器中派生所有用于查找 .resources 文件的信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resourceSource" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetString(System.String)">
      <summary>返回指定的字符串资源的值。</summary>
      <returns>该资源的值为调用方的当前 UI 区域性或 null 如果 <paramref name="name" /> 不能在资源集找到。</returns>
      <param name="name">要检索的资源的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">指定资源的值不是字符串。</exception>
      <exception cref="T:System.Resources.MissingManifestResourceException">未找到可用的资源集，并且没有默认区域性的资源。 有关如何处理此异常的信息，请参见<see cref="T:System.Resources.ResourceManager" /> 选件类主题中的“处理 MissingManifestResourceException 和 MissingSatelliteAssemblyException 异常”一节。</exception>
      <exception cref="T:System.Resources.MissingSatelliteAssemblyException">默认区域性的资源位于无法找到的附属程序集。 有关如何处理此异常的信息，请参见<see cref="T:System.Resources.ResourceManager" /> 选件类主题中的“处理 MissingManifestResourceException 和 MissingSatelliteAssemblyException 异常”一节。</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
      <summary>返回为指定区域性本地化的字符串资源的值。</summary>
      <returns>该资源的值为指定区域性或 null 如果 <paramref name="name" /> 不能在资源集找到。</returns>
      <param name="name">要检索的资源的名称。</param>
      <param name="culture">一个表示区域性的对象，为此区域性，资源被本地化。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">指定资源的值不是字符串。</exception>
      <exception cref="T:System.Resources.MissingManifestResourceException">未找到可用的资源集，并且没有默认区域性的资源。 有关如何处理此异常的信息，请参见<see cref="T:System.Resources.ResourceManager" /> 选件类主题中的“处理 MissingManifestResourceException 和 MissingSatelliteAssemblyException 异常”一节。</exception>
      <exception cref="T:System.Resources.MissingSatelliteAssemblyException">默认区域性的资源位于无法找到的附属程序集。 有关如何处理此异常的信息，请参见<see cref="T:System.Resources.ResourceManager" /> 选件类主题中的“处理 MissingManifestResourceException 和 MissingSatelliteAssemblyException 异常”一节。</exception>
    </member>
    <member name="T:System.Resources.SatelliteContractVersionAttribute">
      <summary>指示 <see cref="T:System.Resources.ResourceManager" /> 对象要求附属程序集的特定版本。</summary>
    </member>
    <member name="M:System.Resources.SatelliteContractVersionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Resources.SatelliteContractVersionAttribute" /> 类的新实例。</summary>
      <param name="version">一个字符串，指定要加载的附属程序集的版本。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Resources.SatelliteContractVersionAttribute.Version">
      <summary>获取具有所需资源的附属程序集的版本。</summary>
      <returns>一个字符串，它包含具有所需资源的附属程序集的版本。</returns>
    </member>
    <member name="T:System.Runtime.GCLatencyMode">
      <summary>调整垃圾收集器侵入应用程序的时间。</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.Batch">
      <summary>在批调用中禁用垃圾回收并发，并回收对象。 这是最高级别的侵入模式。</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.Interactive">
      <summary>在应用程序运行时启用垃圾回收并发，并回收对象。 这是工作站上垃圾回收的默认模式，并且较少受侵入 <see cref="F:System.Runtime.GCLatencyMode.Batch" />。 它可以平衡响应性和吞吐量。</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.LowLatency">
      <summary>启用回收对象时比较保守的垃圾回收。 仅在系统遇到内存压力时才发生完全回收，而通常情况下发生 0 代和 1 代回收</summary>
    </member>
    <member name="T:System.Runtime.GCSettings">
      <summary>指定当前进程的垃圾回收设置。</summary>
    </member>
    <member name="P:System.Runtime.GCSettings.IsServerGC">
      <summary>获取一个值，该值指示是否启用了服务器垃圾回收。</summary>
      <returns>如果启用了服务器垃圾回收，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.GCSettings.LatencyMode">
      <summary>获取或设置垃圾收集的当前滞后时间模式。</summary>
      <returns>指定滞后时间模式的枚举值之一。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="T:System.Runtime.GCLatencyMode" /> 设置为无效值。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute">
      <summary>指定访问属性化字段的属性的名称。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.#ctor(System.String)">
      <summary>使用用于访问属性化字段的属性的名称初始化 AccessedThroughPropertyAttribute 类的新实例。</summary>
      <param name="propertyName">用于访问属性化字段的属性的名称。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.PropertyName">
      <summary>获取用于访问属性化字段的属性的名称。</summary>
      <returns>用于访问属性化字段的属性的名称。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute">
      <summary>控制由公共语言运行时的实时 (JIT) 编译器生成的代码的严格性。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.#ctor(System.Int32)">
      <summary>使用指定的编译松弛法初始化 <see cref="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute" /> 类的新实例。</summary>
      <param name="relaxations">编译松弛法。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.CompilationRelaxations">
      <summary>获取构造当前对象时指定的编译松弛法。</summary>
      <returns>构造当前对象时指定的编译松弛法。 将 <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations" /> 枚举与 <see cref="P:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.CompilationRelaxations" /> 属性一起使用。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute">
      <summary>区分编译器生成的元素与用户生成的元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilerGeneratedAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
      <summary>使编译器可以将对象字段动态附加到托管对象。</summary>
      <typeparam name="TKey">字段所附加到的引用类型。</typeparam>
      <typeparam name="TValue">字段的类型。 此类型必须是引用类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)">
      <summary>将键添加到表中。</summary>
      <param name="key">要添加的键。 <paramref name="key" /> 表示属性所附加到的对象。</param>
      <param name="value">该键的属性值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 已存在。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)">
      <summary>以原子方式在表中搜索指定键，并返回对应的值。 如果表中不存在该键，此方法将调用表示表值的类的默认构造函数，以创建绑定到指定键的值。</summary>
      <returns>如果表中已存在 <paramref name="key" />，则为对应于 <paramref name="key" /> 的值；否则为 <paramref name="TValue" /> 范型类型参数定义的类的默认构造函数创建的新值。</returns>
      <param name="key">要搜索的键。 <paramref name="key" /> 表示属性所附加到的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.MissingMethodException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.MissingMemberException" />。 表示表中值的类未定义默认构造函数。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)">
      <summary>以原子方式在表中搜索指定键，并返回对应的值。 如果表中不存在该键，此方法将调用一个回调方法来创建绑定到指定键的值。</summary>
      <returns>如果表中已存在 <paramref name="key" />，则为附加到 <paramref name="key" /> 的值；否则为 <paramref name="createValueCallback" /> 委托返回的新值。</returns>
      <param name="key">要搜索的键。 <paramref name="key" /> 表示属性所附加到的对象。</param>
      <param name="createValueCallback">可以为给定 <paramref name="key" /> 创建值的方法的委托。 它只有一个 <paramref name="TKey" /> 类型的参数，并返回一个 <paramref name="TValue" /> 类型的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 或 <paramref name="createValueCallback" /> 为 null。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)">
      <summary>从表中移除某个键及其值。</summary>
      <returns>如果找到并移除该键，则为 true；否则为 false。</returns>
      <param name="key">要移除的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)">
      <summary>获取指定键的值。</summary>
      <returns>如果找到 <paramref name="key" />，则为 true；否则为 false。</returns>
      <param name="key">一个键，表示具有所附加的属性的对象。</param>
      <param name="value">此方法返回时，将包含所附加的属性值。 如果找不到 <paramref name="key" />，则 <paramref name="value" /> 包含默认值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback`0">
    </member>
    <member name="T:System.Runtime.CompilerServices.CustomConstantAttribute">
      <summary>定义一个编译器可以为字段或方法参数永久保存的常数值。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CustomConstantAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CustomConstantAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CustomConstantAttribute.Value">
      <summary>获取该属性存储的常数值。</summary>
      <returns>该属性存储的常数值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DateTimeConstantAttribute">
      <summary>为字段或参数永久保存一个 8 字节的 <see cref="T:System.DateTime" /> 常数。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DateTimeConstantAttribute.#ctor(System.Int64)">
      <summary>用表示此实例日期和时间的以 100 毫微秒为单位的数字初始化 DateTimeConstantAttribute 类的新实例。</summary>
      <param name="ticks">表示此实例日期和时间的以 100 毫微秒为单位的数字。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DateTimeConstantAttribute.Value">
      <summary>获取表示此实例日期和时间的以 100 毫微秒为单位的数字。</summary>
      <returns>表示此实例日期和时间的以 100 毫微秒为单位的数字。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DecimalConstantAttribute">
      <summary>在元数据中存储 <see cref="T:System.Decimal" /> 常数的值。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.Int32,System.Int32,System.Int32)">
      <summary>使用指定的有符号整数值初始化 <see cref="T:System.Runtime.CompilerServices.DecimalConstantAttribute" /> 类的新实例。</summary>
      <param name="scale">比例因子（10 的幂），它指示小数点右边的数字位数。 有效值为从 0 到 28（含）。</param>
      <param name="sign">值 0 指示正值，值 1 指示负值。</param>
      <param name="hi">96 位 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的高 32 位。</param>
      <param name="mid">96 位 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的中间 32 位。</param>
      <param name="low">96 位 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的低 32 位。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)">
      <summary>使用指定的无符号整数值初始化 <see cref="T:System.Runtime.CompilerServices.DecimalConstantAttribute" /> 类的新实例。</summary>
      <param name="scale">比例因子（10 的幂），它指示小数点右边的数字位数。 有效值为从 0 到 28（含）。</param>
      <param name="sign">值 0 指示正值，值 1 指示负值。</param>
      <param name="hi">96 位 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的高 32 位。</param>
      <param name="mid">96 位 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的中间 32 位。</param>
      <param name="low">96 位 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的低 32 位。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scale" /> &gt; 28.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value">
      <summary>获取存储在此属性中的十进制常数。</summary>
      <returns>存储在此属性中的十进制常数。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.FixedBufferAttribute">
      <summary>指示字段应被视为包含指定基元类型的固定数目的元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.FixedBufferAttribute.#ctor(System.Type,System.Int32)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.FixedBufferAttribute" /> 类的新实例。</summary>
      <param name="elementType">缓冲区中包含的元素的类型。</param>
      <param name="length">缓冲区中元素的数目。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.FixedBufferAttribute.ElementType">
      <summary>获取固定缓冲区中包含的元素的类型。</summary>
      <returns>元素的类型。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.FixedBufferAttribute.Length">
      <summary>获取缓冲区中元素的数目。</summary>
      <returns>固定缓冲区中元素的数目。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IndexerNameAttribute">
      <summary>指示使索引器在不直接支持索引器的编程语言中已知的名称。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IndexerNameAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.IndexerNameAttribute" /> 类的新实例。</summary>
      <param name="indexerName">显示给其他语言的索引器名称。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
      <summary>指定通常仅在当前程序集中可见的类型对指定程序集可见。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
      <summary>用指定的友元程序集的名称初始化 <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" /> 类的新实例。</summary>
      <param name="assemblyName">友元程序集的名称。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName">
      <summary>获取友元程序集的名称，采用 internal 关键字标记的所有类型和类型成员对该程序集均为可见。</summary>
      <returns>一个表示友元程序集名称的字符串。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsVolatile">
      <summary>将字段标记为易失。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodImplAttribute">
      <summary>指定如何实现某方法的详细信息。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor(System.Runtime.CompilerServices.MethodImplOptions)">
      <summary>使用指定的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值初始化 <see cref="T:System.Runtime.CompilerServices.MethodImplAttribute" /> 类的新实例。</summary>
      <param name="methodImplOptions">一个 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值，该值指定属性化方法的属性。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.MethodImplAttribute.Value">
      <summary>获取描述属性化方法的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值。</summary>
      <returns>描述特性化方法的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodImplOptions">
      <summary>定义如何实现某方法的详细信息。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoInlining">
      <summary>不能内联该方法。 内联是用方法主体代替方法调用的优化。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoOptimization">
      <summary>调试可能的代码生成问题时优化该方法不是实时 (JIT) 编译器和本机代码生成（请参见 Ngen.exe）。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.PreserveSig">
      <summary>此方法签名完全按声明的样子导出。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute">
      <summary>指定是否使用 <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> 对象包装不是从 <see cref="T:System.Exception" /> 类派生的异常。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows">
      <summary>获取或设置一个值，该值指示是否使用 <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> 对象包装不是从 <see cref="T:System.Exception" /> 类派生的异常。</summary>
      <returns>如果不是从 <see cref="T:System.Exception" /> 类派生的异常应包装在 <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> 对象中，则返回 true；否则为 false。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeHelpers">
      <summary>提供一组为编译器提供支持的静态方法和属性。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)">
      <summary>用作特定类型的哈希函数，适合在哈希算法和数据结构（如哈希表）中使用。</summary>
      <returns>
        <paramref name="o" /> 参数标识的 <see cref="T:System.Object" /> 的哈希代码。</returns>
      <param name="o">要检索其哈希代码的对象。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetObjectValue(System.Object)">
      <summary>将值类型装箱。</summary>
      <returns>如果 <paramref name="obj" /> 是一个值类，则返回其装箱的副本；否则返回 <paramref name="obj" /> 本身。</returns>
      <param name="obj">要装箱的值类型。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.InitializeArray(System.Array,System.RuntimeFieldHandle)">
      <summary>提供从存储在模块中的数据初始化数组的快速方法。</summary>
      <param name="array">要初始化的数组。</param>
      <param name="fldHandle">一个字段句柄，它指定用于初始化数组的数据的位置。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeHelpers.OffsetToStringData">
      <summary>获取给定字符串中数据的偏移量（以字节为单位）。</summary>
      <returns>字节偏移量，从 <see cref="T:System.String" /> 对象的起始位置到字符串中的第一个字符。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(System.RuntimeTypeHandle)">
      <summary>运行指定的类构造函数方法。</summary>
      <param name="type">一个用于指定要运行的类构造函数方法的类型句柄。</param>
      <exception cref="T:System.TypeInitializationException">在类初始值设定项引发异常。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.TypeForwardedFromAttribute">
      <summary>指定另一个程序集中的源 <see cref="T:System.Type" />。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TypeForwardedFromAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.TypeForwardedFromAttribute" /> 类的新实例。</summary>
      <param name="assemblyFullName">另一个程序集中的源 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFullName" /> 为 null 或为空。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.TypeForwardedFromAttribute.AssemblyFullName">
      <summary>获取源类型的程序集限定名称。</summary>
      <returns>源类型的程序集限定名称。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.TypeForwardedToAttribute">
      <summary>指定另一个程序集中的目标 <see cref="T:System.Type" />。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TypeForwardedToAttribute.#ctor(System.Type)">
      <summary>初始化指定目标 <see cref="T:System.Type" /> 的 <see cref="T:System.Runtime.CompilerServices.TypeForwardedToAttribute" /> 类的新实例。</summary>
      <param name="destination">另一个程序集中的目标 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.TypeForwardedToAttribute.Destination">
      <summary>获取另一个程序集中的目标 <see cref="T:System.Type" />。</summary>
      <returns>另一个程序集中的目标 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.UnsafeValueTypeAttribute">
      <summary>指定某个类型包含可能溢出的非托管数组。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.UnsafeValueTypeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.UnsafeValueTypeAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ArrayWithOffset">
      <summary>在指定的数组中封装数组和偏移量。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.#ctor(System.Object,System.Int32)">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 结构的新实例。</summary>
      <param name="array">托管数组。</param>
      <param name="offset">要通过平台调用传递的元素的偏移量（以字节为单位）。</param>
      <exception cref="T:System.ArgumentException">数组大于 2 GB。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Object)">
      <summary>指示指定的对象是否与当前的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象匹配。</summary>
      <returns>如果对象与此 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 匹配，则为 true；否则，为 false。</returns>
      <param name="obj">要与该实例进行比较的对象。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>指示指定的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象是否与当前实例匹配。</summary>
      <returns>如果指定的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象与当前实例相匹配，则为 true；否则为 false。</returns>
      <param name="obj">与此实例进行比较的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetArray">
      <summary>返回此 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 引用的托管数组。</summary>
      <returns>此实例引用的托管数组。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetHashCode">
      <summary>返回此值类型的哈希代码。</summary>
      <returns>此实例的哈希代码。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetOffset">
      <summary>返回当构造此 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 时提供的偏移量。</summary>
      <returns>此实例的偏移量。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Equality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>确定两个指定的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象是否具有相同的值。</summary>
      <returns>如果 <paramref name="a" /> 的值与 <paramref name="b" /> 的值相同，则为 true；否则为 false。</returns>
      <param name="a">与 <paramref name="b" /> 参数进行比较的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。</param>
      <param name="b">与 <paramref name="a" /> 参数进行比较的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Inequality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>确定两个指定的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象是否具有不同值。</summary>
      <returns>如果 <paramref name="a" /> 的值与 <paramref name="b" /> 的值不同，则为 true；否则为 false。</returns>
      <param name="a">与 <paramref name="b" /> 参数进行比较的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。</param>
      <param name="b">与 <paramref name="a" /> 参数进行比较的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.BestFitMappingAttribute">
      <summary>控制是否将 Unicode 字符转换为最接近的匹配 ANSI 字符。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BestFitMappingAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.BestFitMappingAttribute" /> 类的新实例，并将其设置为 <see cref="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping" /> 属性的值。</summary>
      <param name="BestFitMapping">true 指示启用最佳映射；否则为 false。 默认值为 true。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping">
      <summary>获取将 Unicode 字符转换为 ANSI 字符时的最佳映射行为。</summary>
      <returns>如果启用最佳映射则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="F:System.Runtime.InteropServices.BestFitMappingAttribute.ThrowOnUnmappableChar">
      <summary>启用或禁用在遇到已被转换为 ANSI“?”字符的无法映射的 Unicode 字符时引发异常。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.BStrWrapper">
      <summary>将 VT_BSTR 类型的数据从托管代码封送到非托管代码。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.Object)">
      <summary>用指定的 <see cref="T:System.Object" /> 对象初始化 <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> 类的新实例。</summary>
      <param name="value">要包装并作为 VT_BSTR 进行封送的对象。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.String)">
      <summary>用指定的 <see cref="T:System.String" /> 对象初始化 <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> 类的新实例。</summary>
      <param name="value">要包装并作为 VT_BSTR 进行封送的对象。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BStrWrapper.WrappedObject">
      <summary>获取将作为 VT_BSTR 类型进行封送的包装的 <see cref="T:System.String" /> 对象。</summary>
      <returns>由 <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> 包装的对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CallingConvention">
      <summary>指定调用在非托管代码中实现的方法所需的调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Cdecl">
      <summary>调用方清理堆栈。 这使您能够调用具有 varargs 的函数（如 Printf），使之可用于接受可变数目的参数的方法。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.StdCall">
      <summary>被调用方清理堆栈。 这是使用平台 invoke 调用非托管函数的默认约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.ThisCall">
      <summary>第一个参数是 this 指针，它存储在寄存器 ECX 中。 其他参数被推送到堆栈上。 此调用约定用于对从非托管 DLL 导出的类调用方法。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Winapi">
      <summary>此成员实际上不是调用约定，而是使用了默认平台调用约定。 例如，在 Windows 上默认为 <see cref="F:System.Runtime.InteropServices.CallingConvention.StdCall" />，在 Windows CE.NET 上默认为 <see cref="F:System.Runtime.InteropServices.CallingConvention.Cdecl" />。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CharSet">
      <summary>规定封送字符串应使用何种字符集。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Ansi">
      <summary>以多字节字符串的形式封送字符串。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Unicode">
      <summary>以 Unicode 2 字节字符的形式封送字符串。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
      <summary>为公开给 COM 的类指定要生成的类接口的类型（如果有接口生成）。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)">
      <summary>用指定的 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 枚举值初始化 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 类的新实例。</summary>
      <param name="classInterfaceType">描述为类生成的接口的类型。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Runtime.InteropServices.ClassInterfaceType)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 枚举成员初始化 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 类的新实例。</summary>
      <param name="classInterfaceType">
        <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 值之一，描述为类生成的接口的类型。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ClassInterfaceAttribute.Value">
      <summary>获取 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 值，该值描述应该为该类生成哪种类型的接口。</summary>
      <returns>描述应该为该类生成哪种类型的接口的 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceType">
      <summary>标识为某个类生成的类接口的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch">
      <summary>指示该类只支持 COM 客户端的后期绑定。 在请求时，该类的 dispinterface 将自动向 COM 客户端公开。 Tlbexp.exe (Type Library Exporter) 生成的类型库不包含 dispinterface 的类型信息，以防止客户端缓存接口的 DISPID。 由于客户端只能后期绑定到接口，因此 dispinterface 不会出现 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 中所述的版本控制问题。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDual">
      <summary>指示自动为类生成双重类接口并向 COM 公开。 为该类接口生成类型信息并在类型库中发布。 由于 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 中描述的版本控制方面的限制，极力建议不要使用 AutoDual。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.None">
      <summary>指示不为类生成类接口。 如果未显式实现任何接口，则该类将只能通过 IDispatch 接口提供后期绑定访问。 这是 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 的推荐设置。 要通过由类显式实现的接口来公开功能，唯一的方法是使用 ClassInterfaceType.None。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CoClassAttribute">
      <summary>指定从类型库中导入的 coclass 的类标识符。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CoClassAttribute.#ctor(System.Type)">
      <summary>用原始 coclass 的类标识符初始化 <see cref="T:System.Runtime.InteropServices.CoClassAttribute" /> 的新实例。</summary>
      <param name="coClass">一个 <see cref="T:System.Type" />，它包含原始 coclass 的类标识符。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.CoClassAttribute.CoClass">
      <summary>获取原始 coclass 的类标识符。</summary>
      <returns>一个 <see cref="T:System.Type" />，它包含原始 coclass 的类标识符。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute">
      <summary>指定要向 COM 公开的默认接口。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.#ctor(System.Type)">
      <summary>以指定的 <see cref="T:System.Type" /> 对象作为向 COM 公开的默认接口初始化 <see cref="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute" /> 类的新实例。</summary>
      <param name="defaultInterface">一个 <see cref="T:System.Type" /> 值，指示要向 COM 公开的默认接口。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.Value">
      <summary>获取 <see cref="T:System.Type" /> 对象，该对象指定要向 COM 公开的默认接口。</summary>
      <returns>指定要向 COM 公开的默认接口的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventInterfaceAttribute">
      <summary>标识源接口和实现事件接口（从 COM 类型库导入 coclass 时生成）的方法的类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventInterfaceAttribute.#ctor(System.Type,System.Type)">
      <summary>用源接口和事件提供程序类初始化 <see cref="T:System.Runtime.InteropServices.ComEventInterfaceAttribute" /> 类的新实例。</summary>
      <param name="SourceInterface">一个 <see cref="T:System.Type" />，它包含类型库中的原始源接口。 COM 使用此接口回调到托管类。</param>
      <param name="EventProvider">一个 <see cref="T:System.Type" />，它包含实现事件接口的方法的类。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.EventProvider">
      <summary>获取实现事件接口的方法的类。</summary>
      <returns>一个 <see cref="T:System.Type" />，它包含实现事件接口的方法的类。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.SourceInterface">
      <summary>从类型库获取原始源接口。</summary>
      <returns>一个包含源接口的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventsHelper">
      <summary>提供允许将处理事件的 .NET Framework 委托添加到 COM 对象和从 COM 对象中删除这些委托的方法。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Combine(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary>将委托添加到源自 COM 对象的事件的调用列表。</summary>
      <param name="rcw">触发事件的 COM 对象，调用方希望响应这些事件。</param>
      <param name="iid">COM 对象用来触发事件的源接口的标识符。</param>
      <param name="dispid">源接口上的方法的调度标识符。</param>
      <param name="d">要在激发 COM 事件时调用的委托。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Remove(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary>从源自 COM 对象的事件的调用列表中移除委托。</summary>
      <returns>已从调用列表中移除的委托。</returns>
      <param name="rcw">委托附加到的 COM 对象。</param>
      <param name="iid">COM 对象用来触发事件的源接口的标识符。</param>
      <param name="dispid">源接口上的方法的调度标识符。</param>
      <param name="d">要从调用列表中移除的委托。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.COMException">
      <summary>当从 COM 方法调用返回无法识别的 HRESULT 时引发的异常。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.Runtime.InteropServices.COMException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String)">
      <summary>用指定的消息初始化 <see cref="T:System.Runtime.InteropServices.COMException" /> 类的新实例。</summary>
      <param name="message">指示异常原因的消息。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.COMException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Int32)">
      <summary>使用指定的消息和错误代码初始化 <see cref="T:System.Runtime.InteropServices.COMException" /> 类的新实例。</summary>
      <param name="message">指示所发生异常的原因的消息。</param>
      <param name="errorCode">与该异常关联的错误代码 (HRESULT) 值。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComImportAttribute">
      <summary>指示该属性化类型是以前在 COM 中定义的。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComImportAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> 的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComInterfaceType">
      <summary>标识如何向 COM 公开接口。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual">
      <summary>指示接口将作为双重接口向 COM 公开，这将支持早期绑定和后期绑定。 <see cref="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual" /> 为默认值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch">
      <summary>指示接口将作为dispinterface向 COM 公开，这将仅启用后期绑定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown">
      <summary>指示接口将作为 IUnknown 派生的接口向 COM 公开，这将仅启用早期绑定。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComMemberType">
      <summary>描述 COM 成员的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.Method">
      <summary>该成员是一个一般方法。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropGet">
      <summary>该成员获取属性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropSet">
      <summary>该成员设置属性。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute">
      <summary>为属性化类标识公开为 COM 事件源的一组接口。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.String)">
      <summary>使用事件源接口的名称初始化 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 类的新实例。</summary>
      <param name="sourceInterfaces">事件源接口的完全限定名列表，名称之间用 null 分隔。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type)">
      <summary>使用要用作源接口的类型初始化 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 类的新实例。</summary>
      <param name="sourceInterface">源接口的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type)">
      <summary>在以要使用的类型作为源接口的情况下初始化 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 类的新实例。</summary>
      <param name="sourceInterface1">默认源接口的 <see cref="T:System.Type" />。</param>
      <param name="sourceInterface2">源接口的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type)">
      <summary>在以要使用的类型作为源接口的情况下初始化 ComSourceInterfacesAttribute 类的新实例。</summary>
      <param name="sourceInterface1">默认源接口的 <see cref="T:System.Type" />。</param>
      <param name="sourceInterface2">源接口的 <see cref="T:System.Type" />。</param>
      <param name="sourceInterface3">源接口的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type,System.Type)">
      <summary>在以要使用的类型作为源接口的情况下初始化 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 类的新实例。</summary>
      <param name="sourceInterface1">默认源接口的 <see cref="T:System.Type" />。</param>
      <param name="sourceInterface2">源接口的 <see cref="T:System.Type" />。</param>
      <param name="sourceInterface3">源接口的 <see cref="T:System.Type" />。</param>
      <param name="sourceInterface4">源接口的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComSourceInterfacesAttribute.Value">
      <summary>获取事件源接口的完全限定名。</summary>
      <returns>事件源接口的完全限定名。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComVisibleAttribute">
      <summary>控制程序集中个别托管类型、成员或所有类型对 COM 的可访问性。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean)">
      <summary>初始化 ComVisibleAttribute 类的新实例。</summary>
      <param name="visibility">true 指示该类型对 COM 可见；否则为 false。 默认值为 true。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComVisibleAttribute.Value">
      <summary>获取一个值，该值指示 COM 类型是否可见。</summary>
      <returns>如果该类型可见，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CriticalHandle">
      <summary>表示句柄资源的包装类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.#ctor(System.IntPtr)">
      <summary>用指定的无效句柄值初始化 <see cref="T:System.Runtime.InteropServices.CriticalHandle" /> 类的新实例。</summary>
      <param name="invalidHandleValue">无效句柄的值（通常为 0 或 -1）。</param>
      <exception cref="T:System.TypeLoadException">该派生类位于没有非托管代码访问权限的程序集中。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Dispose">
      <summary>释放由 <see cref="T:System.Runtime.InteropServices.CriticalHandle" /> 使用的所有资源。</summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Dispose(System.Boolean)">
      <summary>释放 <see cref="T:System.Runtime.InteropServices.CriticalHandle" /> 类所使用的非托管资源，并指定是否执行常规释放 (Dispose) 操作。</summary>
      <param name="disposing">如进行常规释放操作，则为 true；如终结句柄，则为 false。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Finalize">
      <summary>释放与句柄关联的所有资源。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CriticalHandle.handle">
      <summary>指定要包装的句柄。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.CriticalHandle.IsClosed">
      <summary>获取一个值，该值指示句柄是否已关闭。</summary>
      <returns>如果句柄已关闭，则为 true；否则为 false。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Runtime.InteropServices.CriticalHandle.IsInvalid">
      <summary>在派生类中重写后，获取一个值，该值指示句柄值是否无效。</summary>
      <returns>如果句柄有效，则为 true；否则为 false。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.ReleaseHandle">
      <summary>如果在派生类中重写，执行释放句柄所需的代码。</summary>
      <returns>如果句柄释放成功，则为 true；如果出现灾难性故障，则为 false。 这种情况下，该方法生成一个 releaseHandleFailed MDA 托管调试助手。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.SetHandle(System.IntPtr)">
      <summary>将句柄设置为预先存在的指定句柄。</summary>
      <param name="handle">要使用的预先存在的句柄。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.SetHandleAsInvalid">
      <summary>将句柄标记为无效。</summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="T:System.Runtime.InteropServices.CurrencyWrapper">
      <summary>对封送拆收器应该将其作为 VT_CY 封送的对象进行包装。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Decimal)">
      <summary>用要包装并作为 VT_CY 类型进行封送的 Decimal 来初始化 <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> 类的新实例。</summary>
      <param name="obj">要包装并作为 VT_CY 进行封送的 Decimal。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Object)">
      <summary>用包含要包装并作为 VT_CY 类型进行封送的 Decimal 的对象来初始化 <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> 类的新实例。</summary>
      <param name="obj">包含要包装并作为 VT_CY 进行封送的 Decimal 的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 参数不是 <see cref="T:System.Decimal" /> 类型。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.CurrencyWrapper.WrappedObject">
      <summary>获取将作为 VT_CY 类型进行封送的包装对象。</summary>
      <returns>将作为 VT_CY 类型进行封送的包装对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceMode">
      <summary>指示 <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> 方法的 IUnknown::QueryInterface 调用是否可以使用 <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> 接口。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Allow">
      <summary>IUnknown::QueryInterface 方法调用可以使用 <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> 接口。 使用此值时，<see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> 方法重载的功能与 <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)" /> 重载的功能类似。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Ignore">
      <summary>IUnknown::QueryInterface 方法调用应忽略 <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> 接口。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceResult">
      <summary>提供 <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" /> 方法的返回值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Failed">
      <summary>特定接口 ID 的接口不可用。 在这种情况下，返回的接口为 null。 E_NOINTERFACE 将返回给 IUnknown::QueryInterface 的调用方。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled">
      <summary>从 <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" /> 方法返回的接口指针可用作 IUnknown::QueryInterface 的结果。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled">
      <summary>未使用自定义的 QueryInterface。 相反，应该使用 IUnknown::QueryInterface 的默认实现。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultCharSetAttribute">
      <summary>指定 <see cref="T:System.Runtime.InteropServices.CharSet" /> 枚举的值。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultCharSetAttribute.#ctor(System.Runtime.InteropServices.CharSet)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.CharSet" /> 值初始化 <see cref="T:System.Runtime.InteropServices.DefaultCharSetAttribute" /> 类的新实例。</summary>
      <param name="charSet">
        <see cref="T:System.Runtime.InteropServices.CharSet" /> 值之一。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultCharSetAttribute.CharSet">
      <summary>获取对 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> 的任何调用的 <see cref="T:System.Runtime.InteropServices.CharSet" /> 的默认值。</summary>
      <returns>对 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> 的任何调用的 <see cref="T:System.Runtime.InteropServices.CharSet" /> 的默认值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispatchWrapper">
      <summary>对封送拆收器应该将其作为 VT_DISPATCH 封送的对象进行包装。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispatchWrapper.#ctor(System.Object)">
      <summary>使用正在包装的对象初始化 <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> 类的新实例。</summary>
      <param name="obj">要包装并转换成 <see cref="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH" /> 的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是类或数组。 - 或 - <paramref name="obj" /> 不支持 IDispatch。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="obj" /> 参数是用传递给一个 false 值的 <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> 特性标记的。 - 或 - <paramref name="obj" /> 参数继承自传递给一个 false 值的用 <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> 标记的类型。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject">
      <summary>获取由 <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> 包装的对象。</summary>
      <returns>由 <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> 包装的对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispIdAttribute">
      <summary>指定方法、字段或属性的 COM 调度标识符 (DISPID)。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispIdAttribute.#ctor(System.Int32)">
      <summary>用指定的 DISPID 初始化 DispIdAttribute 类的新实例。</summary>
      <param name="dispId">成员的 DISPID。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DispIdAttribute.Value">
      <summary>获取成员的 DISPID。</summary>
      <returns>成员的 DISPID。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportAttribute">
      <summary>指示该属性化方法由非托管动态链接库 (DLL) 作为静态入口点公开。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
      <summary>使用包含要导入的方法的 DLL 的名称初始化 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> 类的新实例。</summary>
      <param name="dllName">包含非托管方法的 DLL 的名称。 如果 DLL 包含在某个程序集中，则可以包含程序集显示名称。</param>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
      <summary>将 Unicode 字符转换为 ANSI 字符时，启用或禁用最佳映射行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
      <summary>指示入口点的调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
      <summary>指示如何向方法封送字符串参数，并控制名称重整。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
      <summary>指示要调用的 DLL 入口点的名称或序号。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
      <summary>控制 <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> 字段是否使公共语言运行时在非托管 DLL 中搜索入口点名称，而不使用指定的入口点名称。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
      <summary>指示是否直接转换具有 HRESULT 或 retval 返回值的非托管方法，或是否自动将 HRESULT 或 retval 返回值转换为异常。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
      <summary>指示被调用方在从属性化方法返回之前是否调用 SetLastError Win32 API 函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
      <summary>启用或禁用在遇到已被转换为 ANSI“?”字符的无法映射的 Unicode 字符时引发异常。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.DllImportAttribute.Value">
      <summary>获取包含入口点的 DLL 文件的名称。</summary>
      <returns>包含入口点的 DLL 文件的名称。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ErrorWrapper">
      <summary>对封送拆收器应该将其作为 VT_ERROR 封送的对象进行包装。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Exception)">
      <summary>使用与所提供的异常相对应的 HRESULT 初始化 <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> 类的新实例。</summary>
      <param name="e">要转换为错误代码的异常。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Int32)">
      <summary>使用错误的 HRESULT 初始化 <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> 类的新实例。</summary>
      <param name="errorCode">错误的 HRESULT。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Object)">
      <summary>用包含错误的 HRESULT 的对象初始化 <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> 类的新实例。</summary>
      <param name="errorCode">包含错误的 HRESULT 的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="errorCode" /> 参数不是 <see cref="T:System.Int32" /> 类型。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ErrorWrapper.ErrorCode">
      <summary>获取包装的错误代码。</summary>
      <returns>错误的 HRESULT。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.FieldOffsetAttribute">
      <summary>指示字段在类或结构的非托管表示形式内的物理位置。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.FieldOffsetAttribute.#ctor(System.Int32)">
      <summary>使用结构内到字段开始的偏移量初始化 <see cref="T:System.Runtime.InteropServices.FieldOffsetAttribute" /> 类的新实例。</summary>
      <param name="offset">从结构开始处到字段开始处的偏移量（以字节为单位）。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.FieldOffsetAttribute.Value">
      <summary>获取从结构开始到字段开始的偏移量。</summary>
      <returns>从结构开始到字段开始的偏移量。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.GCHandle">
      <summary>提供用于从非托管内存访问托管对象的方法。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
      <summary>在 <see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned" /> 句柄中检索对象的地址。</summary>
      <returns>
        <see cref="T:System.IntPtr" /> 形式的 Pinned 对象的地址。</returns>
      <exception cref="T:System.InvalidOperationException">该句柄是 <see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned" /> 以外的任何类型。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
      <summary>为指定的对象分配 <see cref="F:System.Runtime.InteropServices.GCHandleType.Normal" /> 句柄。</summary>
      <returns>一个新的 <see cref="T:System.Runtime.InteropServices.GCHandle" />，它保护对象不被垃圾回收。 当不再需要 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 时，必须通过 <see cref="M:System.Runtime.InteropServices.GCHandle.Free" /> 将其释放。</returns>
      <param name="value">使用 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 的对象。</param>
      <exception cref="T:System.ArgumentException">具有非基元（非直接复制到本机结构中的）成员的实例不能被固定。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
      <summary>为指定的对象分配指定类型的句柄。</summary>
      <returns>指定的类型的新 <see cref="T:System.Runtime.InteropServices.GCHandle" />。 当不再需要 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 时，必须通过 <see cref="M:System.Runtime.InteropServices.GCHandle.Free" /> 将其释放。</returns>
      <param name="value">使用 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 的对象。</param>
      <param name="type">
        <see cref="T:System.Runtime.InteropServices.GCHandleType" /> 值之一，指示要创建的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 的类型。</param>
      <exception cref="T:System.ArgumentException">具有非基元（非直接复制到本机结构中的）成员的实例不能被固定。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象是否等同于当前的 <see cref="T:System.Runtime.InteropServices.GCHandle" />。</summary>
      <returns>如果指定的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象等于当前的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象，则为 true；否则为 false。</returns>
      <param name="o">要与当前 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象进行比较的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Free">
      <summary>释放 <see cref="T:System.Runtime.InteropServices.GCHandle" />。</summary>
      <exception cref="T:System.InvalidOperationException">该句柄已被释放或从未初始化。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
      <summary>返回从某个托管对象的句柄创建的新 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。</summary>
      <returns>对应于值参数的新的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。</returns>
      <param name="value">某个托管对象的 <see cref="T:System.IntPtr" /> 句柄，将从该句柄创建 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 参数的值为 <see cref="F:System.IntPtr.Zero" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.GetHashCode">
      <summary>返回当前 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象的标识符。</summary>
      <returns>当前 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象的标识符。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.GCHandle.IsAllocated">
      <summary>获取一个值，该值指示是否分配了句柄。</summary>
      <returns>如果分配了句柄，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Equality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
      <summary>返回一个值，该值指示两个 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象是否相等。</summary>
      <returns>如果 <paramref name="a" /> 和 <paramref name="b" /> 参数相等，则为 true；否则为 false。</returns>
      <param name="a">要与 <paramref name="b" /> 参数进行比较的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。</param>
      <param name="b">要与 <paramref name="a" /> 参数进行比较的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle">
      <summary>
        <see cref="T:System.Runtime.InteropServices.GCHandle" /> 以内部整数表示形式存储。</summary>
      <returns>
        <see cref="T:System.Runtime.InteropServices.GCHandle" />。</returns>
      <param name="value">一个 <see cref="T:System.IntPtr" />，它指示需要该转换的句柄。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr">
      <summary>
        <see cref="T:System.Runtime.InteropServices.GCHandle" /> 以内部整数表示形式存储。</summary>
      <returns>整数值。</returns>
      <param name="value">需要该整数的 <see cref="T:System.Runtime.InteropServices.GCHandle" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Inequality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
      <summary>返回一个值，该值指示两个 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象是否不相等。</summary>
      <returns>如果 <paramref name="a" /> 和 <paramref name="b" /> 参数相等，则为 true；否则为 false。</returns>
      <param name="a">要与 <paramref name="b" /> 参数进行比较的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。</param>
      <param name="b">要与 <paramref name="a" /> 参数进行比较的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.GCHandle.Target">
      <summary>获取或设置该句柄表示的对象。</summary>
      <returns>该句柄表示的对象。</returns>
      <exception cref="T:System.InvalidOperationException">该句柄被释放，或从未初始化。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)">
      <summary>返回 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象的内部整数表示形式。</summary>
      <returns>表示 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象的 <see cref="T:System.IntPtr" /> 对象。</returns>
      <param name="value">要从其中检索内部整数表示形式的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.GCHandleType">
      <summary>表示 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 类可以分配的句柄的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Normal">
      <summary>此句柄类型表示不透明句柄，这意味着无法通过此句柄解析固定对象的地址。 可以使用此类型跟踪对象，并防止它被垃圾回收器回收。 当非托管客户端持有对托管对象的唯一引用（从垃圾回收器检测不到该引用）时，此枚举成员很有用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Pinned">
      <summary>此句柄类型类似于 <see cref="F:System.Runtime.InteropServices.GCHandleType.Normal" />，但允许使用固定对象的地址。 这将防止垃圾回收器移动对象，因此将降低垃圾回收器的效率。 使用 <see cref="M:System.Runtime.InteropServices.GCHandle.Free" /> 方法可尽快释放已分配的句柄。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Weak">
      <summary>此句柄类型用于跟踪对象，但允许回收该对象。 当回收某个对象时，<see cref="T:System.Runtime.InteropServices.GCHandle" /> 的内容归零。 在终结器运行之前，Weak 引用归零，因此即使终结器使该对象复活，Weak 引用仍然是归零的。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.WeakTrackResurrection">
      <summary>该句柄类型类似于 <see cref="F:System.Runtime.InteropServices.GCHandleType.Weak" />，但如果对象在终结过程中复活，此句柄不归零。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.GuidAttribute">
      <summary>当不需要自动 GUID 时提供显式的 <see cref="T:System.Guid" />。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GuidAttribute.#ctor(System.String)">
      <summary>用指定的 GUID 初始化 <see cref="T:System.Runtime.InteropServices.GuidAttribute" /> 类的新实例。</summary>
      <param name="guid">要分配的 <see cref="T:System.Guid" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.GuidAttribute.Value">
      <summary>获取类的 <see cref="T:System.Guid" />。</summary>
      <returns>类的 <see cref="T:System.Guid" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomAdapter">
      <summary>为客户端访问实际对象（而不是自定义封送拆收器分发的适配器对象）提供了一种方式。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomAdapter.GetUnderlyingObject">
      <summary>提供对自定义封送拆收器包装的基础对象的访问权限。</summary>
      <returns>适配器对象包含的对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomQueryInterface">
      <summary>允许开发人员提供 IUnknown::QueryInterface(REFIID riid, void **ppvObject) 方法的自定义托管实现。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)">
      <summary>根据指定的接口 ID 返回接口。</summary>
      <returns>枚举值之一，指示是否使用了 IUnknown::QueryInterface 的自定义实现。</returns>
      <param name="iid">请求的接口的 GUID。</param>
      <param name="ppv">此方法返回时，对所请求的接口的引用。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.InAttribute">
      <summary>指示应将数据从调用方封送到被调用方，而不返回到调用方。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.InAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.InterfaceTypeAttribute">
      <summary>指示向 COM 公开时，托管接口是双重的、仅支持调度的、还是仅支持 IUnknown 的。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Int16)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 枚举成员初始化 <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> 类的新实例。</summary>
      <param name="interfaceType">描述应如何向 COM 客户端公开接口。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Runtime.InteropServices.ComInterfaceType)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 枚举成员初始化 <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> 类的新实例。</summary>
      <param name="interfaceType">
        <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 值之一，指定如何向 COM 客户端公开接口。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.InterfaceTypeAttribute.Value">
      <summary>获取 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 值，该值描述应如何向 COM 公开接口。</summary>
      <returns>
        <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 值，该值描述应如何向 COM 公开接口。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidComObjectException">
      <summary>当使用无效的 COM 对象时引发的异常。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor">
      <summary>用默认属性初始化 InvalidComObjectException 的实例。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String)">
      <summary>用消息初始化 InvalidComObjectException 的实例。</summary>
      <param name="message">指示异常原因的消息。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.InvalidComObjectException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
      <summary>封送拆收器在遇到不能封送到托管代码的 Variant 类型的参数时引发的异常。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor">
      <summary>使用默认值初始化 InvalidOleVariantTypeException 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String)">
      <summary>用指定的消息初始化 InvalidOleVariantTypeException 类的新实例。</summary>
      <param name="message">指示异常原因的消息。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.LayoutKind">
      <summary>控制当导出到非托管代码时对象的布局。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Auto">
      <summary>运行库自动为非托管内存中的对象的成员选择适当的布局。 使用此枚举成员定义的对象不能在托管代码的外部公开。 尝试这样做将引发异常。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Explicit">
      <summary>在未管理内存中的每一个对象成员的精确位置是被显式控制的，服从于 <see cref="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" /> 字段的设置。 每个成员必须使用 <see cref="T:System.Runtime.InteropServices.FieldOffsetAttribute" /> 指示该字段在类型中的位置。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Sequential">
      <summary>对象的成员按照它们在被导出到非托管内存时出现的顺序依次布局。 这些成员根据在 <see cref="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" /> 中指定的封装进行布局，并且可以是不连续的。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshal">
      <summary>提供了一个方法集，这些方法用于分配非托管内存、复制非托管内存块、将托管类型转换为非托管类型，此外还提供了在与非托管代码交互时使用的其他杂项方法。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)">
      <summary>递增指定接口上的引用计数。</summary>
      <returns>
        <paramref name="pUnk" /> 参数上的引用计数的新值。</returns>
      <param name="pUnk">要递增的接口引用计数。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)">
      <summary>从 COM 任务内存分配器分配指定大小的内存块。</summary>
      <returns>整数，表示分配的内存块的地址。 该内存必须用 <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" /> 来释放。</returns>
      <param name="cb">要分配的内存块的大小。</param>
      <exception cref="T:System.OutOfMemoryException">内存不足，无法满足请求。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)">
      <summary>通过使用指定的字节数，从进程的非托管内存中分配内存。</summary>
      <returns>指向新分配的内存的指针。 必须使用 <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> 方法释放此内存。</returns>
      <param name="cb">内存中的所需字节数。</param>
      <exception cref="T:System.OutOfMemoryException">内存不足，无法满足请求。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)">
      <summary>通过使用指向指定字节数的指针，从进程的非托管内存中分配内存。</summary>
      <returns>指向新分配的内存的指针。 必须使用 <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> 方法释放此内存。</returns>
      <param name="cb">内存中的所需字节数。</param>
      <exception cref="T:System.OutOfMemoryException">内存不足，无法满足请求。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup">
      <summary>指示是否可以清除任何上下文中的运行时可调用包装 (RCW)。</summary>
      <returns>如果存在任何可清除的 RCW，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)">
      <summary>将一维的托管 8 位无符号整数数组中的数据复制到非托管内存指针。</summary>
      <param name="source">从中进行复制的一维数组。</param>
      <param name="startIndex">源数组中复制起始位置的索引（从零开始）。</param>
      <param name="destination">要复制到的内存指针。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)">
      <summary>将数据从一维的托管字符数组复制到非托管内存指针。</summary>
      <param name="source">从中进行复制的一维数组。</param>
      <param name="startIndex">源数组中复制起始位置的索引（从零开始）。</param>
      <param name="destination">要复制到的内存指针。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)">
      <summary>将数据从一维的托管双精度浮点数组复制到非托管内存指针。</summary>
      <param name="source">从中进行复制的一维数组。</param>
      <param name="startIndex">源数组中复制起始位置的索引（从零开始）。</param>
      <param name="destination">要复制到的内存指针。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)">
      <summary>将一维的托管 16 位有符号整数数组中的数据复制到非托管内存指针。</summary>
      <param name="source">从中进行复制的一维数组。</param>
      <param name="startIndex">源数组中复制起始位置的索引（从零开始）。</param>
      <param name="destination">要复制到的内存指针。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)">
      <summary>将数据从一维的托管 32 位有符号整数数组复制到非托管内存指针。</summary>
      <param name="source">从中进行复制的一维数组。</param>
      <param name="startIndex">源数组中复制起始位置的索引（从零开始）。</param>
      <param name="destination">要复制到的内存指针。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)">
      <summary>将一维的托管 64 位有符号整数数组中的数据复制到非托管内存指针。</summary>
      <param name="source">从中进行复制的一维数组。</param>
      <param name="startIndex">源数组中复制起始位置的索引（从零开始）。</param>
      <param name="destination">要复制到的内存指针。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
      <summary>将数据从非托管内存指针复制到托管 8 位无符号整数数组。</summary>
      <param name="source">内存指针，从中进行复制。</param>
      <param name="destination">要复制到的数组。</param>
      <param name="startIndex">目标数组中复制起始位置的索引（从零开始）。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)">
      <summary>将数据从非托管内存指针复制到托管字符数组。</summary>
      <param name="source">内存指针，从中进行复制。</param>
      <param name="destination">要复制到的数组。</param>
      <param name="startIndex">目标数组中复制起始位置的索引（从零开始）。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)">
      <summary>将数据从非托管内存指针复制到托管双精度浮点数组。</summary>
      <param name="source">内存指针，从中进行复制。</param>
      <param name="destination">要复制到的数组。</param>
      <param name="startIndex">目标数组中复制起始位置的索引（从零开始）。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)">
      <summary>将非托管内存指针中的数据复制到托管 16 位有符号整数数组。</summary>
      <param name="source">内存指针，从中进行复制。</param>
      <param name="destination">要复制到的数组。</param>
      <param name="startIndex">目标数组中复制起始位置的索引（从零开始）。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)">
      <summary>将非托管内存指针中的数据复制到托管 32 位有符号整数数组。</summary>
      <param name="source">内存指针，从中进行复制。</param>
      <param name="destination">要复制到的数组。</param>
      <param name="startIndex">目标数组中复制起始位置的索引（从零开始）。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)">
      <summary>将非托管内存指针中的数据复制到托管 64 位有符号整数数组。</summary>
      <param name="source">内存指针，从中进行复制。</param>
      <param name="destination">要复制到的数组。</param>
      <param name="startIndex">目标数组中复制起始位置的索引（从零开始）。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)">
      <summary>将数据从非托管内存指针复制到托管 <see cref="T:System.IntPtr" /> 数组。</summary>
      <param name="source">内存指针，从中进行复制。</param>
      <param name="destination">要复制到的数组。</param>
      <param name="startIndex">目标数组中复制起始位置的索引（从零开始）。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 null。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)">
      <summary>将数据从非托管内存指针复制到托管单精度浮点数组。</summary>
      <param name="source">内存指针，从中进行复制。</param>
      <param name="destination">要复制到的数组。</param>
      <param name="startIndex">目标数组中复制起始位置的索引（从零开始）。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)">
      <summary>将数据从一维托管 <see cref="T:System.IntPtr" /> 数组复制到非托管内存指针。</summary>
      <param name="source">从中进行复制的一维数组。</param>
      <param name="startIndex">源数组中复制起始位置的索引（从零开始）。</param>
      <param name="destination">要复制到的内存指针。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 null。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)">
      <summary>将数据从一维的托管单精度浮点数组复制到非托管内存指针。</summary>
      <param name="source">从中进行复制的一维数组。</param>
      <param name="startIndex">源数组中复制起始位置的索引（从零开始）。</param>
      <param name="destination">要复制到的内存指针。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)">
      <summary>聚合托管对象和指定的 COM 对象。</summary>
      <returns>托管对象的内部 IUnknown 指针。</returns>
      <param name="pOuter">外部 IUnknown 指针。</param>
      <param name="o">要聚合的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> 是 Windows 运行时 对象。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)">
      <summary>在指定类型的对象中包装指定的 COM 对象。</summary>
      <returns>新包装的对象，该对象是所需类型的实例。</returns>
      <param name="o">要包装的对象。</param>
      <param name="t">要创建的包装的类型。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> 必须从 __ComObject 派生。 - 或 - <paramref name="t" /> 是一种 Windows 运行时 类型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> 无法转换为目标类型，因为它不支持所有所需的接口。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)">
      <summary>释放指定的非托管内存块所指向的所有子结构。</summary>
      <param name="ptr">指向非托管内存块的指针。</param>
      <param name="structuretype">格式化类的类型。 该类型提供删除 <paramref name="ptr" /> 参数指向的缓冲区时必需的布局信息。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="structureType" /> 具有自动布局。 但请使用连续或显式布局。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)">
      <summary>通过将 运行时可调用包装 (RCW) 的引用计数设置为 0，释放对它的所有引用。</summary>
      <returns>与 <paramref name="o" /> 参数关联的 RCW 引用计数的新值释放成功时为 0。</returns>
      <param name="o">要释放的 RCW。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> 不是一个有效的 COM 对象。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> 为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)">
      <summary>使用 COM SysFreeString 函数释放 BSTR。</summary>
      <param name="ptr">要释放的 BSTR 的地址。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)">
      <summary>释放由非托管 COM 任务内存分配器分配的内存块。</summary>
      <param name="ptr">要释放的内存的地址。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)">
      <summary>释放以前从进程的非托管内存中分配的内存。</summary>
      <param name="hglobal">由对 <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> 的原始匹配调用返回的句柄。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)">
      <summary>返回一个指向 IUnknown 接口的指针，该指针表示指定对象上的指定接口。 默认情况下，启用自定义查询接口访问。</summary>
      <returns>表示对象的指定接口的接口指针。</returns>
      <param name="o">提供接口的对象。</param>
      <param name="T">所请求的接口的类型。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" /> 参数不是接口。 - 或 - 该类型对 COM 不可见。 - 或 - <paramref name="T" /> 参数是泛型类型。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> 参数不支持请求的接口。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> 参数为 null。 - 或 - <paramref name="T" /> 参数为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)">
      <summary>返回一个指向 IUnknown 接口的指针，该指针表示指定对象上的指定接口。 自定义查询接口访问由指定的自定义模式控制。</summary>
      <returns>表示对象的接口的接口指针。</returns>
      <param name="o">提供接口的对象。</param>
      <param name="T">所请求的接口的类型。</param>
      <param name="mode">指示是否要应用 <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> 提供的 IUnknown::QueryInterface 自定义的枚举值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" /> 参数不是接口。 - 或 - 该类型对 COM 不可见。 - 或 - <paramref name="T" /> 参数是泛型类型。</exception>
      <exception cref="T:System.InvalidCastException">对象 <paramref name="o" /> 不支持请求的接口。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> 参数为 null。 - 或 - <paramref name="T" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)">
      <summary>将非托管函数指针转换为委托。</summary>
      <returns>委托实例，可强制转换为适当的委托类型。</returns>
      <param name="ptr">要转换的非托管函数指针。</param>
      <param name="t">要返回的委托的类型。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> 参数不是委托或泛型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ptr" /> 参数为 null。 - 或 - <paramref name="t" /> 参数为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionCode">
      <summary>检索标识所发生异常的类型的代码。</summary>
      <returns>异常的类型。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)">
      <summary>将指定的 HRESULT 错误代码转换为对应的 <see cref="T:System.Exception" /> 对象。</summary>
      <returns>一个对象，表示转换后的 HRESULT。</returns>
      <param name="errorCode">要转换的 HRESULT。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)">
      <summary>通过传入异常对象的 IErrorInfo 接口的附加错误消息，将指定的 HRESULT 错误代码转换为对应的 <see cref="T:System.Exception" /> 对象。</summary>
      <returns>一个对象，表示转换后的 HRESULT 以及从 <paramref name="errorInfo" /> 获取的信息。</returns>
      <param name="errorCode">要转换的 HRESULT。</param>
      <param name="errorInfo">指向 IErrorInfo 接口的指针，该接口提供有关错误的更多信息。 您可以指定 IntPtr(0) 以使用当前 IErrorInfo 接口，或者指定 IntPtr(-1) 以忽略当前 IErrorInfo 接口，并仅从错误代码构造异常。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)">
      <summary>将委托转换为可从非托管代码调用的函数指针。</summary>
      <returns>一个可传递给非托管代码的值，非托管代码使用该值来调用基础托管委托。</returns>
      <param name="d">要传递给非托管代码的委托。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="d" /> 参数是泛型类型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 参数为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)">
      <summary>将指定异常转换为 HRESULT。</summary>
      <returns>映射到所提供的异常的 HRESULT。</returns>
      <param name="e">要转换为 HRESULT 的异常。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error">
      <summary>返回 HRESULT，它对应于使用 <see cref="T:System.Runtime.InteropServices.Marshal" /> 执行的 Win32 代码引起的最后一个错误。</summary>
      <returns>对应于最后一个 Win32 错误代码的 HRESULT。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)">
      <summary>从托管对象返回 IUnknown 接口。</summary>
      <returns>
        <paramref name="o" /> 参数的 IUnknown 指针。</returns>
      <param name="o">其 IUnknown 接口被请求的对象。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error">
      <summary>返回由上一个非托管函数返回的错误代码，该函数是使用设置了 <see cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" /> 标志的平台调用来调用的。</summary>
      <returns>通过调用 Win32 SetLastError 函数设置的最后一个错误代码。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)">
      <summary>将对象转换为 COM VARIANT。</summary>
      <param name="obj">为其获取 COM VARIANT 的对象。</param>
      <param name="pDstNativeVariant">一个指针，接收对应于 <paramref name="obj" /> 参数的 VARIANT。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 参数是泛型类型。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)">
      <summary>返回一个类型实例，该实例通过指向 COM 对象的 IUnknown 接口的指针表示该对象。</summary>
      <returns>一个对象，表示指定的非托管 COM 对象。</returns>
      <param name="pUnk">指向 IUnknown 接口的指针。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)">
      <summary>将 COM VARIANT 转换为对象。</summary>
      <returns>一个对象，对应于 <paramref name="pSrcNativeVariant" /> 参数。</returns>
      <param name="pSrcNativeVariant">指向 COM VARIANT 的指针。</param>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
        <paramref name="pSrcNativeVariant" /> 不是有效的 VARIANT 类型。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pSrcNativeVariant" /> 包含不受支持的类型。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)">
      <summary>将 COM VARIANTs 数组转换为对象数组。</summary>
      <returns>一个对象数组，对应于 <paramref name="aSrcNativeVariant" />。</returns>
      <param name="aSrcNativeVariant">指向 COM VARIANT 数组中第一个元素的指针。</param>
      <param name="cVars">
        <paramref name="aSrcNativeVariant" /> 中的 COM VARIANT 的计数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cVars" /> 是一个负数。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)">
      <summary>获取虚函数表（v 表或 VTBL）中第一个包含用户定义的方法的槽。</summary>
      <returns>第一个包含用户定义的方法的 VTBL 槽。 如果接口基于 IUnknown，则第一个槽为 3；如果接口基于 IDispatch，则为 7。</returns>
      <param name="t">表示接口的类型。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> 在 COM 中不可见。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)">
      <summary>检索由 ITypeInfo 对象表示的类型的名称。</summary>
      <returns>
        <paramref name="typeInfo" /> 参数指向的类型的名称。</returns>
      <param name="typeInfo">表示 ITypeInfo 指针的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeInfo" /> 参数为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)">
      <summary>为给定的 IUnknown 接口创建唯一的 运行时可调用包装 (RCW) 对象。</summary>
      <returns>指定的 IUnknown 接口的唯一 RCW。</returns>
      <param name="unknown">指向 IUnknown 接口的托管指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsComObject(System.Object)">
      <summary>指示指定对象是否表示 COM 对象。</summary>
      <returns>如果 <paramref name="o" /> 参数是 COM 类型，则为 true；否则为 false。</returns>
      <param name="o">要检查的对象。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)">
      <summary>返回托管类的非托管形式的字段偏移量。</summary>
      <returns>平台调用声明的指定类中 <paramref name="fieldName" /> 参数的偏移量（以字节为单位）。</returns>
      <param name="t">指定托管类的值类型或格式化引用类型。 必须将 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 应用于该类。</param>
      <param name="fieldName">
        <paramref name="t" /> 参数中的字段。</param>
      <exception cref="T:System.ArgumentException">该类无法作为结构导出，或者字段为非公共字段。 从 .NET Framework 2.0 版开始，该字段可以是私有的。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> 参数为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)">
      <summary>将非托管 ANSI 字符串中第一个 null 字符之前的所有字符复制到托管 <see cref="T:System.String" />，并将每个 ANSI 字符扩展为 Unicode 字符。</summary>
      <returns>一个托管字符串，包含非托管 ANSI 字符串的副本。 如果 <paramref name="ptr" /> 为 null，则该方法返回空字符串。</returns>
      <param name="ptr">非托管字符串第一个字符的地址。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)">
      <summary>分配托管 <see cref="T:System.String" />，然后从非托管 ANSI 字符串向其复制指定数目的字符，并将每个 ANSI 字符扩展为 Unicode 字符。</summary>
      <returns>如果 <paramref name="ptr" /> 参数的值不是 null，则为包含本机 ANSI 字符串副本的托管字符串；否则，此方法返回 null。</returns>
      <param name="ptr">非托管字符串第一个字符的地址。</param>
      <param name="len">要复制的输入字符串的字节数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="len" /> 小于零。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)">
      <summary>分配托管 <see cref="T:System.String" />，并向其复制存储在非托管内存中的 BSTR Data Type 字符串。</summary>
      <returns>如果 <paramref name="ptr" /> 参数的值不是 null，则为包含非托管字符串副本的托管字符串；否则，此方法返回 null。</returns>
      <param name="ptr">非托管字符串第一个字符的地址。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)">
      <summary>分配托管 <see cref="T:System.String" />，并从非托管 Unicode 字符串向其复制第一个空字符之前的所有字符。</summary>
      <returns>如果 <paramref name="ptr" /> 参数的值不是 null，则为包含非托管字符串副本的托管字符串；否则，此方法返回 null。</returns>
      <param name="ptr">非托管字符串第一个字符的地址。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)">
      <summary>分配托管 <see cref="T:System.String" />，并从非托管 Unicode 字符串向其复制指定数目的字符。</summary>
      <returns>如果 <paramref name="ptr" /> 参数的值不是 null，则为包含非托管字符串副本的托管字符串；否则，此方法返回 null。</returns>
      <param name="ptr">非托管字符串第一个字符的地址。</param>
      <param name="len">要复制的 Unicode 字符数。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)">
      <summary>将数据从非托管内存块封送到托管对象。</summary>
      <param name="ptr">指向非托管内存块的指针。</param>
      <param name="structure">将数据复制到其中的对象。 这必须是格式化类的实例。</param>
      <exception cref="T:System.ArgumentException">结构布局不是连续或显式的。 - 或 - 结构为装箱的值类型。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)">
      <summary>将数据从非托管内存块封送到新分配的指定类型的托管对象。</summary>
      <returns>一个托管对象，包含 <paramref name="ptr" /> 参数指向的数据。</returns>
      <param name="ptr">指向非托管内存块的指针。</param>
      <param name="structureType">待创建对象的类型。 此对象必须表示格式化类或结构。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="structureType" /> 参数布局不是连续或显式的。 - 或 - <paramref name="structureType" /> 参数是泛型类型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="structureType" /> 为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)">
      <summary>从 COM 对象请求指向指定接口的指针。</summary>
      <returns>一个 HRESULT，指示调用成功还是失败。</returns>
      <param name="pUnk">要查询的接口。</param>
      <param name="iid">所请求的接口的接口标识符 (IID)。</param>
      <param name="ppv">此方法返回时，包含对返回接口的引用。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)">
      <summary>从非托管内存读取单个字节。</summary>
      <returns>从非托管内存读取的字节。</returns>
      <param name="ptr">非托管内存中开始读取的地址。</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不是识别的格式。 - 或 - <paramref name="ptr" /> 为 null。 - 或 - <paramref name="ptr" /> 无效。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)">
      <summary>从非托管内存按给定的偏移量（或索引）读取单个字节。</summary>
      <returns>从非托管内存按给定的偏移量读取的字节。</returns>
      <param name="ptr">非托管内存中开始读取的基址。</param>
      <param name="ofs">额外的字节偏移量，在读取前添加到 <paramref name="ptr" /> 参数中。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节(<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)">
      <summary>从非托管内存按给定的偏移量（或索引）读取单个字节。</summary>
      <returns>从非托管内存按给定的偏移量读取的字节。</returns>
      <param name="ptr">源对象的非托管内存中的基址。</param>
      <param name="ofs">额外的字节偏移量，在读取前添加到 <paramref name="ptr" /> 参数中。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节(<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)">
      <summary>从非托管内存中读取一个 16 位有符号整数。</summary>
      <returns>从非托管内存中读取的 16 位带符号整数。</returns>
      <param name="ptr">非托管内存中开始读取的地址。</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不是识别的格式。 - 或 - <paramref name="ptr" /> 为 null。 - 或 - <paramref name="ptr" /> 无效。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)">
      <summary>从非托管内存按给定的偏移量读取一个 16 位带符号整数。</summary>
      <returns>从非托管内存按给定的偏移量读取的 16 位带符号整数。</returns>
      <param name="ptr">非托管内存中开始读取的基址。</param>
      <param name="ofs">额外的字节偏移量，在读取前添加到 <paramref name="ptr" /> 参数中。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节(<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)">
      <summary>从非托管内存按给定的偏移量读取一个 16 位带符号整数。</summary>
      <returns>从非托管内存按给定的偏移量读取的 16 位带符号整数。</returns>
      <param name="ptr">源对象的非托管内存中的基址。</param>
      <param name="ofs">额外的字节偏移量，在读取前添加到 <paramref name="ptr" /> 参数中。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节(<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)">
      <summary>从非托管内存中读取一个 32 位有符号整数。</summary>
      <returns>从非托管内存中读取的 32 位带符号整数。</returns>
      <param name="ptr">非托管内存中开始读取的地址。</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不是识别的格式。 - 或 - <paramref name="ptr" /> 为 null。 - 或 - <paramref name="ptr" /> 无效。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)">
      <summary>从非托管内存按给定的偏移量读取一个 32 位带符号整数。</summary>
      <returns>从非托管内存中读取的 32 位带符号整数。</returns>
      <param name="ptr">非托管内存中开始读取的基址。</param>
      <param name="ofs">额外的字节偏移量，在读取前添加到 <paramref name="ptr" /> 参数中。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节(<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)">
      <summary>从非托管内存按给定的偏移量读取一个 32 位带符号整数。</summary>
      <returns>从非托管内存按给定的偏移量读取的 32 位带符号整数。</returns>
      <param name="ptr">源对象的非托管内存中的基址。</param>
      <param name="ofs">额外的字节偏移量，在读取前添加到 <paramref name="ptr" /> 参数中。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节(<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)">
      <summary>从非托管内存中读取一个 64 位有符号整数。</summary>
      <returns>从非托管内存中读取的 64 位带符号整数。</returns>
      <param name="ptr">非托管内存中开始读取的地址。</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不是识别的格式。 - 或 - <paramref name="ptr" /> 为 null。 - 或 - <paramref name="ptr" /> 无效。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)">
      <summary>从非托管内存按给定的偏移量读取一个 64 位带符号整数。</summary>
      <returns>从非托管内存按给定的偏移量读取的 64 位带符号整数。</returns>
      <param name="ptr">非托管内存中开始读取的基址。</param>
      <param name="ofs">额外的字节偏移量，在读取前添加到 <paramref name="ptr" /> 参数中。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节(<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)">
      <summary>从非托管内存按给定的偏移量读取一个 64 位带符号整数。</summary>
      <returns>从非托管内存按给定的偏移量读取的 64 位带符号整数。</returns>
      <param name="ptr">源对象的非托管内存中的基址。</param>
      <param name="ofs">额外的字节偏移量，在读取前添加到 <paramref name="ptr" /> 参数中。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节(<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)">
      <summary>从非托管内存中读取处理器本机大小的整数。</summary>
      <returns>从非托管内存读取的整数。 在 32 位计算机上返回 32 位整数，在 64 位计算机上返回 64 位整数。</returns>
      <param name="ptr">非托管内存中开始读取的地址。</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不是识别的格式。 - 或 - <paramref name="ptr" /> 为 null。 - 或 - <paramref name="ptr" /> 无效。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)">
      <summary>从非托管内存按给定的偏移量读取处理器本机大小的整数。</summary>
      <returns>从非托管内存按给定的偏移量读取的整数。</returns>
      <param name="ptr">非托管内存中开始读取的基址。</param>
      <param name="ofs">额外的字节偏移量，在读取前添加到 <paramref name="ptr" /> 参数中。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节(<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)">
      <summary>从非托管内存中读取处理器本机大小的整数。</summary>
      <returns>从非托管内存按给定的偏移量读取的整数。</returns>
      <param name="ptr">源对象的非托管内存中的基址。</param>
      <param name="ofs">额外的字节偏移量，在读取前添加到 <paramref name="ptr" /> 参数中。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节(<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)">
      <summary>调整以前用 <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" /> 分配的内存块的大小。</summary>
      <returns>一个整数，表示重新分配的内存块的地址。 该内存必须用 <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" /> 来释放。</returns>
      <param name="pv">指向用 <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" /> 分配的内存的指针。</param>
      <param name="cb">已分配块的新大小。</param>
      <exception cref="T:System.OutOfMemoryException">内存不足，无法满足请求。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)">
      <summary>调整以前用 <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> 分配的内存块的大小。</summary>
      <returns>指向重新分配的内存的指针。 该内存必须用 <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> 来释放。</returns>
      <param name="pv">指向用 <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> 分配的内存的指针。</param>
      <param name="cb">已分配块的新大小。 这不是指针；它是您请求的字节数，转换为类型 <see cref="T:System.IntPtr" />。 如果您传递指针，则其将是为大小。</param>
      <exception cref="T:System.OutOfMemoryException">内存不足，无法满足请求。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)">
      <summary>递减指定接口上的引用计数。</summary>
      <returns>
        <paramref name="pUnk" /> 参数指定的接口上引用计数的新值。</returns>
      <param name="pUnk">要释放的接口。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)">
      <summary>递减与指定的 COM 对象关联的指定 运行时可调用包装 (RCW) 的引用计数。</summary>
      <returns>与 <paramref name="o" /> 关联的 RCW 的引用计数的新值。 此值通常为零，因为无论调用包装 COM 对象的托管客户端有多少，RCW 仅保留对该对象的一次引用。</returns>
      <param name="o">要释放的 COM 对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> 不是一个有效的 COM 对象。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="o" /> 为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)">
      <summary>返回对象的非托管大小（以字节为单位）。</summary>
      <returns>非托管代码中指定对象的大小。</returns>
      <param name="structure">要返回其大小的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="structure" /> 参数为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Type)">
      <summary>返回非托管类型的大小（以字节为单位）。</summary>
      <returns>非托管代码中指定类型的大小。</returns>
      <param name="t">要返回其大小的类型。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> 参数是泛型类型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> 参数为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)">
      <summary>分配 BSTR Data Type 并向其复制托管 <see cref="T:System.String" /> 的内容。</summary>
      <returns>指向 BSTR 的非托管指针；如果 <paramref name="s" /> 为 null，则为 0。</returns>
      <param name="s">要复制的托管字符串。</param>
      <exception cref="T:System.OutOfMemoryException">没有足够的可用内存。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="s" /> 的长度超出范围。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)">
      <summary>将托管 <see cref="T:System.String" /> 的内容复制到从非托管 COM 任务分配器分配的内存块。</summary>
      <returns>一个整数，表示指向为字符串分配的内存块的指针；如果 <paramref name="s" /> 为 null，则为 0。</returns>
      <param name="s">要复制的托管字符串。</param>
      <exception cref="T:System.OutOfMemoryException">没有足够的可用内存。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="s" /> 参数超过了操作系统所允许的最大长度。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)">
      <summary>将托管 <see cref="T:System.String" /> 的内容复制到从非托管 COM 任务分配器分配的内存块。</summary>
      <returns>一个整数，表示指向为字符串分配的内存块的指针；如果 s 为 null，则为 0。</returns>
      <param name="s">要复制的托管字符串。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="s" /> 参数超过了操作系统所允许的最大长度。</exception>
      <exception cref="T:System.OutOfMemoryException">没有足够的可用内存。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)">
      <summary>将托管 <see cref="T:System.String" /> 中的内容复制到非托管内存，并在复制时转换为 ANSI 格式。</summary>
      <returns>非托管内存中将 <paramref name="s" /> 复制到的地址；如果 <paramref name="s" /> 为 null，则为 0。</returns>
      <param name="s">要复制的托管字符串。</param>
      <exception cref="T:System.OutOfMemoryException">没有足够的可用内存。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="s" /> 参数超过了操作系统所允许的最大长度。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)">
      <summary>向非托管内存复制托管 <see cref="T:System.String" /> 的内容。</summary>
      <returns>非托管内存中将 <paramref name="s" /> 复制到的地址；如果 <paramref name="s" /> 为 null，则为 0。</returns>
      <param name="s">要复制的托管字符串。</param>
      <exception cref="T:System.OutOfMemoryException">此方法未能分配足够的本机堆内存。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="s" /> 参数超过了操作系统所允许的最大长度。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)">
      <summary>将数据从托管对象封送到非托管内存块。</summary>
      <param name="structure">托管对象，包含要封送的数据。 该对象必须是格式化类的结构或实例。</param>
      <param name="ptr">指向非托管内存块的指针，必须在调用此方法之前分配该指针。</param>
      <param name="fDeleteOld">如果在此方法复制该数据前在 <paramref name="ptr" /> 参数上调用 <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)" />， 则为true 。 该块必须包含有效的数据。 请注意，在内存块已包含数据时传递 false 可能会导致内存泄漏。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="structure" /> 一个不是格式化类的引用类型。 - 或 - <paramref name="structure" /> 是一个泛型类型。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize">
      <summary>表示系统上的默认字符大小；Unicode 系统上默认值为 2，ANSI 系统上默认值为 1。 此字段为只读。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize">
      <summary>表示用于当前操作系统的双字节字符集 (DBCS) 的最大大小（以字节为单位）。 此字段为只读。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)">
      <summary>用特定的失败 HRESULT 值引发异常。</summary>
      <param name="errorCode">与所需异常相对应的 HRESULT。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)">
      <summary>基于指定的 IErrorInfo Interface 接口，以特定的失败 HRESULT 引发异常。</summary>
      <param name="errorCode">与所需异常相对应的 HRESULT。</param>
      <param name="errorInfo">指向 IErrorInfo 接口的指针，该接口提供有关错误的更多信息。 您可以指定 IntPtr(0) 以使用当前 IErrorInfo 接口，或者指定 IntPtr(-1) 以忽略当前 IErrorInfo 接口，并仅从错误代码构造异常。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)">
      <summary>获取指定数组中指定索引处的元素的地址。</summary>
      <returns>
        <paramref name="arr" /> 内的 <paramref name="index" /> 的地址。</returns>
      <param name="arr">包含所需元素的数组。</param>
      <param name="index">所需元素的 <paramref name="arr" /> 参数中的索引。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)">
      <summary>将单个字节值写入到非托管内存。</summary>
      <param name="ptr">非托管内存中要写入的地址。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不是识别的格式。 - 或 - <paramref name="ptr" /> 为 null。 - 或 - <paramref name="ptr" /> 无效。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)">
      <summary>将单字节值写入非托管内存中的指定偏移位置。</summary>
      <param name="ptr">非托管内存中要写入的基址。</param>
      <param name="ofs">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节(<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)">
      <summary>将单字节值写入非托管内存中的指定偏移位置。</summary>
      <param name="ptr">非托管内存中目标对象的基址。</param>
      <param name="ofs">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节(<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)">
      <summary>将一个字符作为 16 位整数值写入非托管内存。</summary>
      <param name="ptr">非托管内存中要写入的地址。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不是识别的格式。 - 或 - <paramref name="ptr" /> 为 null。 - 或 - <paramref name="ptr" /> 无效。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)">
      <summary>将 16 位整数值写入非托管内存。</summary>
      <param name="ptr">非托管内存中要写入的地址。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不是识别的格式。 - 或 - <paramref name="ptr" /> 为 null。 - 或 - <paramref name="ptr" /> 无效。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)">
      <summary>将 16 位带符号整数值写入非托管内存中的指定偏移位置。</summary>
      <param name="ptr">本机堆中要写入的基址。</param>
      <param name="ofs">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节(<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)">
      <summary>将 16 位带符号整数值写入非托管内存中的指定偏移位置。</summary>
      <param name="ptr">非托管内存中要写入的基址。</param>
      <param name="ofs">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节(<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)">
      <summary>将 16 位带符号整数值写入非托管内存中的指定偏移位置。</summary>
      <param name="ptr">非托管内存中目标对象的基址。</param>
      <param name="ofs">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节(<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)">
      <summary>将 16 位带符号整数值写入非托管内存中的指定偏移位置。</summary>
      <param name="ptr">非托管内存中目标对象的基址。</param>
      <param name="ofs">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节(<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)">
      <summary>将 32 位有符号整数值写入非托管内存。</summary>
      <param name="ptr">非托管内存中要写入的地址。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不是识别的格式。 - 或 - <paramref name="ptr" /> 为 null。 - 或 - <paramref name="ptr" /> 无效。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)">
      <summary>将 32 位带符号整数值写入非托管内存中的指定偏移位置。</summary>
      <param name="ptr">非托管内存中要写入的基址。</param>
      <param name="ofs">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节(<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)">
      <summary>将 32 位带符号整数值写入非托管内存中的指定偏移位置。</summary>
      <param name="ptr">非托管内存中目标对象的基址。</param>
      <param name="ofs">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节(<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)">
      <summary>将 64 位带符号整数值写入非托管内存中的指定偏移位置。</summary>
      <param name="ptr">非托管内存中要写入的基址。</param>
      <param name="ofs">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节(<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)">
      <summary>将 64 位有符号整数值写入非托管内存。</summary>
      <param name="ptr">非托管内存中要写入的地址。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不是识别的格式。 - 或 - <paramref name="ptr" /> 为 null。 - 或 - <paramref name="ptr" /> 无效。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)">
      <summary>将 64 位带符号整数值写入非托管内存中的指定偏移位置。</summary>
      <param name="ptr">非托管内存中目标对象的基址。</param>
      <param name="ofs">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节(<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)">
      <summary>按指定的偏移量将一个处理器本机大小的整数值写入非托管内存。</summary>
      <param name="ptr">非托管内存中要写入的基址。</param>
      <param name="ofs">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节(<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)">
      <summary>将一个处理器本机大小的整数值写入非托管内存。</summary>
      <param name="ptr">非托管内存中要写入的地址。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不是识别的格式。 - 或 - <paramref name="ptr" /> 为 null。 - 或 - <paramref name="ptr" /> 无效。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)">
      <summary>将一个处理器本机大小的整数值写入非托管内存。</summary>
      <param name="ptr">非托管内存中目标对象的基址。</param>
      <param name="ofs">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节(<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)">
      <summary>释放 BSTR Data Type 指针，该指针是使用 <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)" /> 方法分配的。</summary>
      <param name="s">要释放的 BSTR 的地址。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)">
      <summary>释放非托管字符串指针，该指针是使用 <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)" /> 方法分配的。</summary>
      <param name="s">要释放的非托管字符串的地址。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)">
      <summary>释放非托管字符串指针，该指针是使用 <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)" /> 方法分配的。</summary>
      <param name="s">要释放的非托管字符串的地址。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)">
      <summary>释放非托管字符串指针，该指针是使用 <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)" /> 方法分配的。</summary>
      <param name="s">要释放的非托管字符串的地址。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)">
      <summary>释放非托管字符串指针，该指针是使用 <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)" /> 方法分配的。</summary>
      <param name="s">要释放的非托管字符串的地址。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalAsAttribute">
      <summary>指示如何在托管代码和非托管代码之间封送数据。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Int16)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 值初始化 <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> 类的新实例。</summary>
      <param name="unmanagedType">数据将封送为的值。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 枚举成员初始化 <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> 类的新实例。</summary>
      <param name="unmanagedType">数据将封送为的值。</param>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType">
      <summary>指定非托管 <see cref="F:System.Runtime.InteropServices.UnmanagedType.LPArray" /> 或 <see cref="F:System.Runtime.InteropServices.UnmanagedType.ByValArray" /> 的元素类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.IidParameterIndex">
      <summary>指定 COM 使用的非托管 iid_is 属性的参数索引。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie">
      <summary>向自定义封送拆收器提供附加信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType">
      <summary>指定自定义封送拆收器的完全限定名。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef">
      <summary>将 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> 作为类型实现。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType">
      <summary>指示 <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" /> 的元素类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArrayUserDefinedSubType">
      <summary>指示用户定义的 <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" /> 元素类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst">
      <summary>指示固定长度数组中的元素数，或要导入的字符串中的字符（不是字节）数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex">
      <summary>指示从零开始的参数，该参数包含数组元素的计数，与 COM 中的 size_is 类似。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.MarshalAsAttribute.Value">
      <summary>获取 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 值，数据将被作为该值封送。</summary>
      <returns>
        <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 值，数据将被作为该值封送。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalDirectiveException">
      <summary>当封送拆收器遇到它不支持的 <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> 时由该封送拆收器引发的异常。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor">
      <summary>使用默认属性初始化 MarshalDirectiveException 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 MarshalDirectiveException 类的新实例。</summary>
      <param name="message">指定异常原因的错误信息。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.MarshalDirectiveException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.OptionalAttribute">
      <summary>指示参数是可选的。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OptionalAttribute.#ctor">
      <summary>使用默认值初始化 OptionalAttribute 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.OutAttribute">
      <summary>指示应将数据从被调用方封送回调用方。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OutAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.OutAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PreserveSigAttribute">
      <summary>指示应取消在 COM 互操作调用期间发生的 HRESULT 或 retval 签名转换。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PreserveSigAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.PreserveSigAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayRankMismatchException">
      <summary>当传入的 SAFEARRAY 的秩与托管签名中指定的秩不匹配时引发的异常。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor">
      <summary>使用默认值初始化 SafeArrayTypeMismatchException 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String)">
      <summary>用指定消息初始化 SafeArrayRankMismatchException 类的新实例。</summary>
      <param name="message">指示异常原因的消息。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.SafeArrayRankMismatchException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException">
      <summary>当传入的 SAFEARRAY 的类型与托管签名中指定的类型不匹配时引发的异常。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor">
      <summary>使用默认值初始化 SafeArrayTypeMismatchException 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String)">
      <summary>用指定消息初始化 SafeArrayTypeMismatchException 类的新实例。</summary>
      <param name="message">指示异常原因的消息。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeBuffer">
      <summary>提供可用于读写的受控内存缓冲区。 尝试访问受控缓冲区（不足和溢出）之外的访问内存将引发异常。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)">
      <summary>创建 <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> 类的新实例，并指定是否可靠地释放缓冲区句柄。</summary>
      <param name="ownsHandle">如果为 true，则在完成阶段可靠地释放句柄；如果为 false，则阻止可靠释放（建议不要这样做）。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
      <summary>从内存块的 <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> 对象中获取一个指针。</summary>
      <param name="pointer">通过引用传递的字节指针，用于从 <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> 对象内接收指针。 您必须在调用此方法之前将此指针设置为 null。</param>
      <exception cref="T:System.InvalidOperationException">未调用 <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 方法。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeBuffer.ByteLength">
      <summary>获取缓冲区的大小（以字节为单位）。</summary>
      <returns>内存缓冲区中的字节数。</returns>
      <exception cref="T:System.InvalidOperationException">未调用 <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 方法。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)">
      <summary>通过指定值类型的数目，定义内存区域的分配大小。 在使用 <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> 实例之前，必须调用此方法。</summary>
      <param name="numElements">要为其分配内存的值类型的元素数。</param>
      <typeparam name="T">要为其分配内存的值类型。</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numElements" /> 小于零。 - 或 - <paramref name="numElements" /> 与每个元素大小的乘积大于可用地址空间。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)">
      <summary>通过使用指定的元素数和元素大小，指定内存缓冲区的分配大小。 在使用 <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> 实例之前，必须调用此方法。</summary>
      <param name="numElements">缓冲区中元素的数目。</param>
      <param name="sizeOfEachElement">缓冲区中每个元素的大小。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numElements" /> 小于零。 - 或 - <paramref name="sizeOfEachElement" /> 小于零。 - 或 - <paramref name="numElements" /> 与 <paramref name="sizeOfEachElement" /> 的乘积大于可用地址空间。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)">
      <summary>定义内存区域的分配大小（以字节为单位）。 在使用 <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> 实例之前，必须调用此方法。</summary>
      <param name="numBytes">缓冲区中的字节数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numBytes" /> 小于零。 - 或 - <paramref name="numBytes" /> 大于可用地址空间。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)">
      <summary>按指定的偏移量从内存中读取值类型。</summary>
      <returns>从内存中读取的值类型。</returns>
      <param name="byteOffset">从中读取值类型的位置。 可能必须考虑对齐问题。</param>
      <typeparam name="T">要读取的值类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">未调用 <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 方法。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
      <summary>从自偏移量开始的内存中读取指定数量的值类型，并将它们写入从索引开始的数组中。</summary>
      <param name="byteOffset">从其开始读取的位置。</param>
      <param name="array">要写入的输出数组。</param>
      <param name="index">输出数组中要开始写入的位置。</param>
      <param name="count">要从输入数组中读取并写入输出数组的值类型的数目。</param>
      <typeparam name="T">要读取的值类型。</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。 - 或 - <paramref name="count" /> 小于零。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">数组的长度减去索引小于 <paramref name="count" /> 。</exception>
      <exception cref="T:System.InvalidOperationException">未调用 <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 方法。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.ReleasePointer">
      <summary>释放由 <see cref="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)" /> 方法获取的指针。</summary>
      <exception cref="T:System.InvalidOperationException">未调用 <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 方法。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)">
      <summary>将值类型写入内存中的给定位置。</summary>
      <param name="byteOffset">开始写入的位置。 可能必须考虑对齐问题。</param>
      <param name="value">要写入的值。</param>
      <typeparam name="T">要写入的值类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">未调用 <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 方法。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
      <summary>通过读取从输入数组中指定位置开始的字节，将指定数目的值类型写入内存位置。</summary>
      <param name="byteOffset">内存中要写入的位置。</param>
      <param name="array">输入数组。</param>
      <param name="index">数组中从其开始读取的偏移量。</param>
      <param name="count">要写入的值类型的数目。</param>
      <typeparam name="T">要写入的值类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">输入数组的长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
      <exception cref="T:System.InvalidOperationException">未调用 <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 方法。</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeHandle">
      <summary>表示操作系统句柄的包装类。 必须继承此类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>使用指定的无效句柄值初始化 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 类的新实例。</summary>
      <param name="invalidHandleValue">无效句柄的值（通常为 0 或 -1）。 <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /> 的实现应对此值返回 true。</param>
      <param name="ownsHandle">在终止阶段使 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 可靠地释放句柄，则为 true；否则为 false（不建议使用）。</param>
      <exception cref="T:System.TypeLoadException">该派生类位于没有非托管代码访问权限的程序集中。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
      <summary>手动递增 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 实例中的引用计数器。</summary>
      <param name="success">如果成功递增引用计数器，则为 true；否则为 false。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
      <summary>返回 <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> 字段的值。</summary>
      <returns>IntPtr，表示 <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> 字段的值。 如果句柄已使用 <see cref="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid" /> 标记为无效，此方法仍返回原来的句柄值，该值可能已失效。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease">
      <summary>手动递减 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 实例中的引用计数器。</summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Dispose">
      <summary>释放 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 类使用的所有资源。</summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)">
      <summary>释放 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 类所使用的非托管资源，并指定是否执行常规处置操作。</summary>
      <param name="disposing">如进行常规释放操作，则为 true；如终结句柄，则为 false。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Finalize">
      <summary>释放与句柄关联的所有资源。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.SafeHandle.handle">
      <summary>指定要包装的句柄。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeHandle.IsClosed">
      <summary>获取一个值，该值指示句柄是否已关闭。</summary>
      <returns>如果句柄已关闭，则为 true；否则为 false。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
      <summary>在派生类中重写后，获取一个值，该值指示句柄值是否无效。</summary>
      <returns>如果句柄值无效，则为 true；否则为 false。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
      <summary>如果在派生类中重写，执行释放句柄所需的代码。</summary>
      <returns>如果句柄释放成功，则为 true；如果出现灾难性故障，则为 false。 这种情况下，该方法生成一个 releaseHandleFailed MDA 托管调试助手。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)">
      <summary>将句柄设置为预先存在的指定句柄。</summary>
      <param name="handle">要使用的预先存在的句柄。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid">
      <summary>将句柄标记为不再使用。</summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="T:System.Runtime.InteropServices.SEHException">
      <summary>表示结构化异常处理程序 (SEH) 错误。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.SEHException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String)">
      <summary>用指定的消息初始化 <see cref="T:System.Runtime.InteropServices.SEHException" /> 类的新实例。</summary>
      <param name="message">指示异常原因的消息。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.SEHException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.CanResume">
      <summary>指示是否可以从异常中恢复，以及代码是否可以从引发异常的地方继续。</summary>
      <returns>始终为 false，因为未实现可恢复的异常。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.StructLayoutAttribute">
      <summary>允许您控制类或结构的数据字段的物理布局。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)">
      <summary>用指定的 <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 枚举成员初始化 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 类的新实例。</summary>
      <param name="layoutKind">枚举值之一，指定应该如何排列类或结构。</param>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet">
      <summary>指示在默认情况下是否应将类中的字符串数据字段作为 LPWSTR 或 LPSTR 进行封送处理。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
      <summary>控制类或结构的数据字段在内存中的对齐方式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.Size">
      <summary>指示类或结构的绝对大小。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.StructLayoutAttribute.Value">
      <summary>获取 <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 值，该值指定如何排列类或结构。</summary>
      <returns>枚举值之一，指定如何排列类或结构。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeIdentifierAttribute">
      <summary>提供对类型等效性的支持。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor">
      <summary>创建 <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)">
      <summary>用指定的范围和标识符创建 <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /> 类的新实例。</summary>
      <param name="scope">第一个类型等效性字符串。</param>
      <param name="identifier">第二个类型等效性字符串。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Identifier">
      <summary>获取传递给 <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" /> 构造函数的 <paramref name="identifier" /> 参数的值。</summary>
      <returns>构造函数的 <paramref name="identifier" /> 参数的值。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Scope">
      <summary>获取传递给 <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" /> 构造函数的 <paramref name="scope" /> 参数的值。</summary>
      <returns>构造函数的 <paramref name="scope" /> 参数的值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnknownWrapper">
      <summary>对封送拆收器应该将其作为 VT_UNKNOWN 封送的对象进行包装。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnknownWrapper.#ctor(System.Object)">
      <summary>使用要被包装的对象初始化 <see cref="T:System.Runtime.InteropServices.UnknownWrapper" /> 类的新实例。</summary>
      <param name="obj">被包装的对象。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject">
      <summary>获取此包装包含的对象。</summary>
      <returns>被包装的对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute">
      <summary>控制作为非托管函数指针传入或传出非托管代码的委托签名的封送行为。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)">
      <summary>使用指定的调用约定初始化 <see cref="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute" /> 类的新实例。</summary>
      <param name="callingConvention">指定的调用约定。</param>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.BestFitMapping">
      <summary>将 Unicode 字符转换为 ANSI 字符时，启用或禁用最佳映射行为。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CallingConvention">
      <summary>获取调用约定的值。</summary>
      <returns>
        <see cref="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)" /> 构造函数指定的调用约定的值。</returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CharSet">
      <summary>指示如何向方法封送字符串参数，并控制名称重整。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.SetLastError">
      <summary>指示被调用方在从属性化方法返回之前是否调用 SetLastError Win32 API 函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.ThrowOnUnmappableChar">
      <summary>启用或禁用在遇到已被转换为 ANSI“?”字符的无法映射的 Unicode 字符时引发异常。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedType">
      <summary>指定如何将参数或字段封送到非托管代码。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AnsiBStr">
      <summary>ANSI 字符串是一个带有长度前缀的单字节字符串。 可以在 <see cref="T:System.String" /> 数据类型上使用此成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AsAny">
      <summary>一个动态类型，将在运行时确定对象的类型，并将该对象作为所确定的类型进行封送处理。 该值仅对平台调用方法有效。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Bool">
      <summary>4 字节布尔值（true != 0、false = 0）。 这是 Win32 BOOL 类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.BStr">
      <summary>长度前缀为双字节的 Unicode 字符串。 可以在 <see cref="T:System.String" /> 数据类型上使用此成员（它是 COM 中的默认字符串）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValArray">
      <summary>当 <see cref="P:System.Runtime.InteropServices.MarshalAsAttribute.Value" /> 属性被设置为 ByValArray 时，必须设置 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> 字段以指示该数组中的元素数。 当需要区分字符串类型时，<see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType" /> 字段可以选择包含数组元素的 <see cref="T:System.Runtime.InteropServices.UnmanagedType" />。 此 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 只可用于作为结构中其元素作为字段出现的数组。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValTStr">
      <summary>用于在结构中出现的内联定长字符数组。 与 <see cref="F:System.Runtime.InteropServices.UnmanagedType.ByValTStr" /> 一起使用的字符类型由应用于包含结构的 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 特性的 <see cref="T:System.Runtime.InteropServices.CharSet" /> 参数确定。 应始终使用 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> 字段来指示数组的大小。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Currency">
      <summary>货币类型。 在 <see cref="T:System.Decimal" /> 上使用，以将十进制数值作为 COM 货币类型而不是 Decimal 封送。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler">
      <summary>当与 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> 或 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef" /> 字段一起使用时，指定自定义封送拆收器类。 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie" /> 字段可用于将附加信息传递给自定义封送拆收器。 可以在任何引用类型上使用此成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Error">
      <summary>此与 <see cref="F:System.Runtime.InteropServices.UnmanagedType.I4" /> 或 <see cref="F:System.Runtime.InteropServices.UnmanagedType.U4" /> 关联的本机类型将导致参数作为导出类型库中的 HRESULT 导出。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.FunctionPtr">
      <summary>一个可用作 C 样式函数指针的整数。 可将此成员用于 <see cref="T:System.Delegate" /> 数据类型或从 <see cref="T:System.Delegate" /> 继承的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I1">
      <summary>1 字节有符号整数。 可使用此成员将布尔值转换为 1 字节、C 样式的 bool（true = 1、false = 0）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I2">
      <summary>2 字节带符号整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I4">
      <summary>4 字节有符号整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I8">
      <summary>8 字节有符号整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IDispatch">
      <summary>一个 COM IDispatch 指针（在 Microsoft Visual Basic 6.0 中为 Object）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Interface">
      <summary>COM 接口指针。 从类元数据获得接口的 <see cref="T:System.Guid" />。 如果将此成员应用于类，则可以使用该成员指定确切的接口类型或默认的接口类型。 当应用于 <see cref="T:System.Object" /> 数据类型时，此成员将产生与 <see cref="F:System.Runtime.InteropServices.UnmanagedType.IUnknown" /> 相同的行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IUnknown">
      <summary>COMIUnknown 指针。 可以在 <see cref="T:System.Object" /> 数据类型上使用此成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPArray">
      <summary>指向 C 样式数组的第一个元素的指针。 当从托管到非托管代码进行封送处理时，该数组的长度由托管数组的长度确定。 当从非托管到托管代码进行封送处理时，将根据 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> 和 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex" /> 字段确定该数组的长度，当需要区分字符串类型时，还可以后跟数组中元素的非托管类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStr">
      <summary>单字节、空终止的 ANSI 字符串。 可在 <see cref="T:System.String" /> 和 <see cref="T:System.Text.StringBuilder" /> 数据类型上使用此成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStruct">
      <summary>一个指针，它指向用于封送托管格式化类的 C 样式结构。 该值仅对平台调用方法有效。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPTStr">
      <summary>与平台相关的字符串：在 Windows 98 上为 ANSI，在 Windows NT 和 Windows XP 上为 Unicode。 该值仅支持平台调用持而不支持OM 互操作，因为导出 LPTStr 类型的字符串不受支持。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPWStr">
      <summary>一个 2 字节、空终止的 Unicode 字符串。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R4">
      <summary>4 字节浮点数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R8">
      <summary>8 字节浮点数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SafeArray">
      <summary>SafeArray 是自我描述的数组，它带有关联数组数据的类型、秩和界限。 可将此成员与 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType" /> 字段一起使用，以重写默认元素类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Struct">
      <summary>一个用于封送托管格式化类和值类型的 VARIANT。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysInt">
      <summary>与平台相关的有符号整数：在 32 位 Windows 为 4 个字节，在 64 位 Windows 为 8 个字节。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysUInt">
      <summary>与平台相关的无符号整数：在 32 位 Windows 为 4 个字节，在 64 位 Windows 为 8 个字节。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.TBStr">
      <summary>一个有长度前缀的与平台相关的 char 字符串；在 Windows 98 上为 ANSI，在 Windows NT 上为 Unicode。 很少用到这个类似于 BSTR 的成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U1">
      <summary>1 字节无符号整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U2">
      <summary>2 字节无符号整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U4">
      <summary>4 字节无符号整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U8">
      <summary>8 字节无符号整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VariantBool">
      <summary>2 字节、OLE 定义的 VARIANT_BOOL 类型（true = -1、false = 0）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VBByRefStr">
      <summary>一个值，该值使 Visual Basic 能够更改非托管代码中的字符串，并使结果在托管代码中反映出来。 该值仅对平台调用受支持。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VarEnum">
      <summary>指示当数组作为 <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" /> 从托管代码封送到非托管代码时，如何封送该数组的元素。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ARRAY">
      <summary>指示 SAFEARRAY 指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB">
      <summary>指示以长度为前缀的字节。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB_OBJECT">
      <summary>指示 Blob 包含对象。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BOOL">
      <summary>指示一个布尔值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BSTR">
      <summary>指示 BSTR 字符串。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BYREF">
      <summary>指示值为引用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CARRAY">
      <summary>指示 C 样式数组。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CF">
      <summary>指示剪贴板格式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CLSID">
      <summary>指示类 ID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CY">
      <summary>指示货币值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DATE">
      <summary>指示 DATE 值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DECIMAL">
      <summary>指示 decimal 值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH">
      <summary>指示 IDispatch 指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_EMPTY">
      <summary>指示未指定值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ERROR">
      <summary>指示 SCODE。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_FILETIME">
      <summary>指示 FILETIME 值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_HRESULT">
      <summary>指示 HRESULT。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I1">
      <summary>指示 char 值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I2">
      <summary>指示 short 整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I4">
      <summary>指示 long 整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I8">
      <summary>指示 64 位整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_INT">
      <summary>指示整数值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPSTR">
      <summary>指示一个以 NULL 结尾的字符串。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPWSTR">
      <summary>指示由 null 终止的宽字符串。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_NULL">
      <summary>指示空值（类似于 SQL 中的空值）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_PTR">
      <summary>指示指针类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R4">
      <summary>指示 float 值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R8">
      <summary>指示 double 值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_RECORD">
      <summary>指示用户定义的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_SAFEARRAY">
      <summary>指示 SAFEARRAY。 在 VARIANT 中无效。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORAGE">
      <summary>指示随后是存储的名称。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORED_OBJECT">
      <summary>指示存储包含对象。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAM">
      <summary>指示随后是流的名称。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAMED_OBJECT">
      <summary>指示流包含对象。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI1">
      <summary>指示 byte。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI2">
      <summary>指示 unsignedshort。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI4">
      <summary>指示 unsignedlong。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI8">
      <summary>指示 64 位无符号整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UINT">
      <summary>指示 unsigned 整数值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UNKNOWN">
      <summary>指示 IUnknown 指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_USERDEFINED">
      <summary>指示用户定义的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VARIANT">
      <summary>指示 VARIANTfar 指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VECTOR">
      <summary>指示简单的已计数数组。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VOID">
      <summary>指示 C 样式 void。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VariantWrapper">
      <summary>将 VT_VARIANT | VT_BYREF 类型的数据从托管代码封送到非托管代码。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)">
      <summary>使用指定的 <see cref="T:System.Object" /> 参数初始化 <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> 类的新实例。</summary>
      <param name="obj">要封送的对象。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.VariantWrapper.WrappedObject">
      <summary>获取由 <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> 对象包装的对象。</summary>
      <returns>由 <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> 对象包装的对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BIND_OPTS">
      <summary>存储在名字对象绑定操作期间使用的参数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.cbStruct">
      <summary>指定 BIND_OPTS 结构的大小（以字节为单位）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.dwTickCountDeadline">
      <summary>指示调用方指定的用于完成绑定操作的时间（由 GetTickCount 函数返回的以毫秒为单位的时钟时间）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfFlags">
      <summary>控制名字对象绑定操作的各个方面。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfMode">
      <summary>表示当打开包含由该名字对象标识的对象的文件时应使用的标志。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BINDPTR">
      <summary>包含指向绑定到 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 结构、<see cref="T:System.Runtime.InteropServices.VARDESC" /> 结构或 ITypeComp 接口的指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpfuncdesc">
      <summary>表示指向 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 结构的指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lptcomp">
      <summary>表示指向 <see cref="T:System.Runtime.InteropServices.ComTypes.ITypeComp" /> 接口的指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpvardesc">
      <summary>表示指向 <see cref="T:System.Runtime.InteropServices.VARDESC" /> 结构的指针。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CALLCONV">
      <summary>标识 METHODDATA Data Type 结构中描述的方法所使用的调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_CDECL">
      <summary>指示对方法使用 C 声明 (CDECL) 调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MACPASCAL">
      <summary>指示对方法使用 Macintosh Pascal (MACPASCAL) 调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MAX">
      <summary>指示 <see cref="T:System.Runtime.InteropServices.ComTypes.CALLCONV" /> 枚举的结尾。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWCDECL">
      <summary>指示对方法使用 Macintosh Programmers' Workbench (MPW) CDECL 调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWPASCAL">
      <summary>指示对方法使用 Macintosh Programmers' Workbench (MPW) PASCAL 调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MSCPASCAL">
      <summary>指示对方法使用 MSC Pascal (MSCPASCAL) 调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_PASCAL">
      <summary>指示对方法使用 Pascal 调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_RESERVED">
      <summary>保留此值供将来使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_STDCALL">
      <summary>指示对方法使用标准调用约定 (STDCALL)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_SYSCALL">
      <summary>指示对方法使用标准 SYSCALL 调用约定。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CONNECTDATA">
      <summary>描述现有的到给定连接点的连接。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.dwCookie">
      <summary>表示从 <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" /> 调用中返回的连接标记。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.pUnk">
      <summary>表示指向已连接的通知接收器上的 IUnknown 接口的指针。 当不再需要 CONNECTDATA 结构时，调用方必须在此指针上调用 IUnknown::Release。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DESCKIND">
      <summary>标识绑定到的类型说明。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_FUNCDESC">
      <summary>指示返回了 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 结构。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_IMPLICITAPPOBJ">
      <summary>指示返回了 IMPLICITAPPOBJ。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_MAX">
      <summary>指示枚举结尾标记。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_NONE">
      <summary>指示未找到匹配。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_TYPECOMP">
      <summary>指示返回了 TYPECOMP。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_VARDESC">
      <summary>指示返回了 VARDESC。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DISPPARAMS">
      <summary>包含通过 IDispatch::Invoke 传递给方法或属性的参数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cArgs">
      <summary>表示参数的计数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cNamedArgs">
      <summary>表示命名参数的计数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgdispidNamedArgs">
      <summary>表示命名参数的调度 ID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgvarg">
      <summary>表示对参数数组的引用。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC">
      <summary>包含变量、函数或函数参数的类型说明以及进程传输信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.desc">
      <summary>包含有关元素的信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.tdesc">
      <summary>标识元素的类型。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION">
      <summary>包含有关元素的信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.idldesc">
      <summary>包含有关远程处理该元素的信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.paramdesc">
      <summary>包含有关参数的信息。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.EXCEPINFO">
      <summary>描述在 IDispatch::Invoke 过程中发生的异常。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrDescription">
      <summary>描述用户可能遇到的错误。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrHelpFile">
      <summary>包含帮助文件的完全限定驱动器、路径和文件名，该帮助文件包含有关错误的更多信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrSource">
      <summary>指示异常源的名称。 该名称通常是一个应用程序名称。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.dwHelpContext">
      <summary>指示该主题在帮助文件中的帮助上下文 ID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pfnDeferredFillIn">
      <summary>表示指向一个函数的指针，该函数采用 <see cref="T:System.Runtime.InteropServices.EXCEPINFO" /> 结构作为参数并返回 HRESULT 值。 如果不想推迟填充，则将此字段设置为 null。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pvReserved">
      <summary>此字段为保留字段；必须将其设置为 null。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.scode">
      <summary>描述错误的返回值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wCode">
      <summary>表示用于标识错误的错误代码。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wReserved">
      <summary>此字段为保留字段；必须将其设置为 0。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FILETIME">
      <summary>表示从 1601 年 1 月 1 日起的 100 毫微秒间隔数。 此结构是一个 64 位值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwHighDateTime">
      <summary>指定 FILETIME 的高 32 位。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwLowDateTime">
      <summary>指定 FILETIME 的低 32 位。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCDESC">
      <summary>定义函数说明。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.callconv">
      <summary>指定函数的调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParams">
      <summary>计算参数的总数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParamsOpt">
      <summary>计算可选参数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cScodes">
      <summary>计算允许的返回值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.elemdescFunc">
      <summary>包含函数的返回类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.funckind">
      <summary>指定函数是虚拟的、静态的还是仅支持调度的。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.invkind">
      <summary>指定属性函数的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgelemdescParam">
      <summary>指示 <see cref="F:System.Runtime.InteropServices.FUNCDESC.cParams" /> 的大小。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgscode">
      <summary>存储函数可在 16 位系统中返回的错误的计数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.memid">
      <summary>标识函数成员 ID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.oVft">
      <summary>指定 <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_VIRTUAL" /> 在 VTBL 中的偏移量。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.wFuncFlags">
      <summary>指示函数的 <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" />。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCFLAGS">
      <summary>标识定义函数属性的常数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FBINDABLE">
      <summary>支持数据绑定的函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTBIND">
      <summary>最佳表示此对象的函数。 一个类型中只能有一个函数可以具有此特性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTCOLLELEM">
      <summary>允许进行一种优化，使编译器查找“abc”类型上名为“xyz”的成员。 如果找到这样的成员，而且该成员标志为默认集合的某元素的访问器函数，则生成对该成员函数的调用。 可以对调度接口和接口中的成员使用；不能对模块使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDISPLAYBIND">
      <summary>作为可绑定函数显示给用户的函数。 还必须设置 <see cref="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FBINDABLE" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FHIDDEN">
      <summary>不应将此函数显示给用户，尽管它存在并且为可绑定函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FIMMEDIATEBIND">
      <summary>作为单独的可绑定属性映射。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FNONBROWSABLE">
      <summary>该属性出现在对象浏览器而非属性浏览器中。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREPLACEABLE">
      <summary>将该接口标记为具有默认行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREQUESTEDIT">
      <summary>设置后，任何对设置此属性的方法的调用都首先导致对 IPropertyNotifySink::OnRequestEdit 的调用。 OnRequestEdit 的实现确定是否允许该调用设置属性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FRESTRICTED">
      <summary>此函数不应该是可从宏语言访问的。 此标志用于系统级函数或类型浏览器不应显示的函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FSOURCE">
      <summary>该函数返回一个对象，此对象为事件的源。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUIDEFAULT">
      <summary>类型信息成员是在用户界面中显示的默认成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUSESGETLASTERROR">
      <summary>该函数支持 GetLastError。 如果在函数过程中发生错误，则调用方可以调用 GetLastError 来检索错误代码。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCKIND">
      <summary>定义如何访问函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_DISPATCH">
      <summary>该函数只能通过 IDispatch 访问。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_NONVIRTUAL">
      <summary>该函数通过 static 地址访问，并采用隐式 this 指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_PUREVIRTUAL">
      <summary>该函数通过虚函数表 (VTBL) 访问，并采用隐式 this 指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_STATIC">
      <summary>该函数通过 static 地址访问，不采用隐式 this 指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_VIRTUAL">
      <summary>该函数与 <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_PUREVIRTUAL" /> 的访问方式相同，不同之处在于该函数具有实现。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IBindCtx">
      <summary>提供 IBindCtx 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.EnumObjectParam(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary>枚举字符串，这些字符串是在内部维护的上下文对象参数表的项。</summary>
      <param name="ppenum">此方法返回时，包含对对象参数枚举数的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary>返回当前存储在当前绑定上下文中的绑定选项。</summary>
      <param name="pbindopts">指向接收绑定选项的结构的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetObjectParam(System.String,System.Object@)">
      <summary>在内部维护的上下文对象参数表中查找给定的项并返回相应的对象（如果此对象存在的话）。</summary>
      <param name="pszKey">要搜索的对象名称。</param>
      <param name="ppunk">此方法返回时，包含对象接口指针。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetRunningObjectTable(System.Runtime.InteropServices.ComTypes.IRunningObjectTable@)">
      <summary>返回对与此绑定进程相关的运行对象表 (ROT) 的访问权。</summary>
      <param name="pprot">此方法返回时，包含对运行对象表 (ROT) 的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)">
      <summary>将传递的对象注册为已在名字对象操作期间绑定且应在此操作完成之后释放的对象之一。</summary>
      <param name="punk">要为释放而注册的对象。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectParam(System.String,System.Object)">
      <summary>以内部维护的对象指针表中的指定名称注册指定的对象指针。</summary>
      <param name="pszKey">用于注册 <paramref name="punk" /> 的名称。</param>
      <param name="punk">要注册的对象。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.ReleaseBoundObjects">
      <summary>释放所有当前由 <see cref="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)" /> 方法用绑定上下文注册的对象。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectBound(System.Object)">
      <summary>从需要释放的注册对象集中移除该对象。</summary>
      <param name="punk">要为释放而注销的对象。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectParam(System.String)">
      <summary>撤消当前在指定项（位于内部维护的上下文对象参数表中）下可找到的对象的注册（如果该项当前已注册）。</summary>
      <returns>如果从表中成功移除指定键，则为 S_OKHRESULT 值；否则为 S_FALSEHRESULT 值。</returns>
      <param name="pszKey">要注销的项。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.SetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary>在绑定上下文中存储参数块。 这些参数将应用于稍后使用此绑定上下文的 UCOMIMoniker 操作。</summary>
      <param name="pbindopts">包含要设置的绑定选项的结构。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPoint">
      <summary>提供 IConnectionPoint 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)">
      <summary>在连接点和调用方的接收器对象之间建立一个通知连接。</summary>
      <param name="pUnkSink">对接收器的引用，该接收器为此连接点所管理的输出接口接收调用。</param>
      <param name="pdwCookie">此方法返回时，包含连接 Cookie。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.EnumConnections(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary>创建枚举数对象，以便循环访问到此连接点的现有连接。</summary>
      <param name="ppEnum">此方法返回时，包含新创建的枚举数。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionInterface(System.Guid@)">
      <summary>返回由此连接点管理的输出接口的 IID。</summary>
      <param name="pIID">此参数返回时，包含由此连接点管理的输出接口的 IID。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionPointContainer(System.Runtime.InteropServices.ComTypes.IConnectionPointContainer@)">
      <summary>检索指向在概念上拥有此连接点的可连接对象的 IConnectionPointContainer 接口指针。</summary>
      <param name="ppCPC">此参数返回时，包含可连接对象的 IConnectionPointContainer 接口。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Unadvise(System.Int32)">
      <summary>终止先前通过 <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" /> 方法建立的顾问连接。</summary>
      <param name="dwCookie">先前从 <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" /> 方法返回的连接 Cookie。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer">
      <summary>提供 IConnectionPointContainer 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.EnumConnectionPoints(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary>创建在可连接对象中支持的所有连接点的枚举数，每个 IID 一个连接点。</summary>
      <param name="ppEnum">此方法返回时，包含枚举数的接口指针。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.FindConnectionPoint(System.Guid@,System.Runtime.InteropServices.ComTypes.IConnectionPoint@)">
      <summary>询问可连接对象是否具有某个特定 IID 的连接点，如果是，则返回指向此连接点的 IConnectionPoint 接口指针。</summary>
      <param name="riid">对输出接口 IID 的引用，此输出接口 IID 的连接点正在被请求。</param>
      <param name="ppCP">此方法返回时，包含管理输出接口 <paramref name="riid" /> 的连接点。 该参数未经初始化即被传递。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLDESC">
      <summary>包含在进程之间传输结构元素、参数或函数返回值时所需的信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.dwReserved">
      <summary>保留；设置为 null。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.wIDLFlags">
      <summary>指示描述类型的 <see cref="T:System.Runtime.InteropServices.IDLFLAG" /> 值。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLFLAG">
      <summary>描述如何在进程之间传输结构元素、参数或函数返回值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FIN">
      <summary>参数将信息从调用方传递到被调用方。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FLCID">
      <summary>参数是客户端应用程序的本地标识符。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FOUT">
      <summary>参数将信息从被调用方返回到调用方。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FRETVAL">
      <summary>参数是成员的返回值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_NONE">
      <summary>不会指定该参数传递还是接收信息。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints">
      <summary>管理 IEnumConnectionPoints 接口的定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary>创建与当前枚举数包含相同枚举状态的一个新枚举数。</summary>
      <param name="ppenum">此方法返回时，包含对该新创建的枚举数的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IConnectionPoint[],System.IntPtr)">
      <summary>检索枚举序列中指定数目的项。</summary>
      <returns>如果 <paramref name="pceltFetched" /> 参数与 <paramref name="celt" /> 参数相等，则为 S_OK；否则为 S_FALSE。</returns>
      <param name="celt">要在 <paramref name="rgelt" /> 中返回的 IConnectionPoint 引用的数目。</param>
      <param name="rgelt">此方法返回时，包含对枚举连接的引用。 该参数未经初始化即被传递。</param>
      <param name="pceltFetched">此方法返回时，包含对 <paramref name="rgelt" /> 中枚举的连接的实际数目的引用。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Reset">
      <summary>将枚举序列重置到开始处。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Skip(System.Int32)">
      <summary>跳过枚举序列中指定数目的项。</summary>
      <returns>如果跳过的元素数目与 <paramref name="celt" /> 参数相等，则为 S_OK；否则为 S_FALSE。</returns>
      <param name="celt">枚举中要跳过的元素数目。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnections">
      <summary>管理 IEnumConnections 接口的定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary>创建与当前枚举数包含相同枚举状态的一个新枚举数。</summary>
      <param name="ppenum">此方法返回时，包含对该新创建的枚举数的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Next(System.Int32,System.Runtime.InteropServices.ComTypes.CONNECTDATA[],System.IntPtr)">
      <summary>检索枚举序列中指定数目的项。</summary>
      <returns>如果 <paramref name="pceltFetched" /> 参数与 <paramref name="celt" /> 参数相等，则为 S_OK；否则为 S_FALSE。</returns>
      <param name="celt">要在 <paramref name="rgelt" /> 中返回的 <see cref="T:System.Runtime.InteropServices.CONNECTDATA" /> 结构的数目。</param>
      <param name="rgelt">此方法返回时，包含对枚举连接的引用。 该参数未经初始化即被传递。</param>
      <param name="pceltFetched">此方法返回时，包含对 <paramref name="rgelt" /> 中枚举的连接的实际数目的引用。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Reset">
      <summary>将枚举序列重置到开始处。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Skip(System.Int32)">
      <summary>跳过枚举序列中指定数目的项。</summary>
      <returns>如果跳过的元素数目与 <paramref name="celt" /> 参数相等，则为 S_OK；否则为 S_FALSE。</returns>
      <param name="celt">枚举中要跳过的元素数目。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumMoniker">
      <summary>管理 IEnumMoniker 接口的定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Clone(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary>创建与当前枚举数包含相同枚举状态的一个新枚举数。</summary>
      <param name="ppenum">此方法返回时，包含对该新创建的枚举数的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker[],System.IntPtr)">
      <summary>检索枚举序列中指定数目的项。</summary>
      <returns>如果 <paramref name="pceltFetched" /> 参数与 <paramref name="celt" /> 参数相等，则为 S_OK；否则为 S_FALSE。</returns>
      <param name="celt">要在 <paramref name="rgelt" /> 中返回的名字对象的数目。</param>
      <param name="rgelt">此方法返回时，包含对枚举的名字对象的引用。 该参数未经初始化即被传递。</param>
      <param name="pceltFetched">此方法返回时，包含对在 <paramref name="rgelt" /> 中枚举的名字对象的实际数目的引用。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Reset">
      <summary>将枚举序列重置到开始处。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Skip(System.Int32)">
      <summary>跳过枚举序列中指定数目的项。</summary>
      <returns>如果跳过的元素数目与 <paramref name="celt" /> 参数相等，则为 S_OK；否则为 S_FALSE。</returns>
      <param name="celt">枚举中要跳过的元素数目。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumString">
      <summary>管理 IEnumString 接口的定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Clone(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary>创建与当前枚举数包含相同枚举状态的一个新枚举数。</summary>
      <param name="ppenum">此方法返回时，包含对该新创建的枚举数的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Next(System.Int32,System.String[],System.IntPtr)">
      <summary>检索枚举序列中指定数目的项。</summary>
      <returns>如果 <paramref name="pceltFetched" /> 参数与 <paramref name="celt" /> 参数相等，则为 S_OK；否则为 S_FALSE。</returns>
      <param name="celt">要在 <paramref name="rgelt" /> 中返回的字符串的数目。</param>
      <param name="rgelt">此方法返回时，包含对枚举字符串的引用。 该参数未经初始化即被传递。</param>
      <param name="pceltFetched">此方法返回时，包含对在 <paramref name="rgelt" /> 中枚举的字符串的实际数目的引用。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Reset">
      <summary>将枚举序列重置到开始处。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Skip(System.Int32)">
      <summary>跳过枚举序列中指定数目的项。</summary>
      <returns>如果跳过的元素数目与 <paramref name="celt" /> 参数相等，则为 S_OK；否则为 S_FALSE。</returns>
      <param name="celt">枚举中要跳过的元素数目。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT">
      <summary>管理 IEnumVARIANT 接口的定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Clone">
      <summary>创建与当前枚举数包含相同枚举状态的一个新枚举数。</summary>
      <returns>对新创建枚举数的 <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT" /> 引用。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Next(System.Int32,System.Object[],System.IntPtr)">
      <summary>检索枚举序列中指定数目的项。</summary>
      <returns>如果 <paramref name="pceltFetched" /> 参数与 <paramref name="celt" /> 参数相等，则为 S_OK；否则为 S_FALSE。</returns>
      <param name="celt">要在 <paramref name="rgelt" /> 中返回的元素的数目。</param>
      <param name="rgVar">此方法返回时，包含对枚举元素的引用。 该参数未经初始化即被传递。</param>
      <param name="pceltFetched">此方法返回时，包含对在 <paramref name="rgelt" /> 中枚举的元素的实际数目的引用。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Reset">
      <summary>将枚举序列重置到开始处。</summary>
      <returns>具有值 S_OK 的 HRESULT。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Skip(System.Int32)">
      <summary>跳过枚举序列中指定数目的项。</summary>
      <returns>如果跳过的元素的数目与 <paramref name="celt" /> 参数相等，则为 S_OK；否则为 S_FALSE。</returns>
      <param name="celt">枚举中要跳过的元素数目。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMoniker">
      <summary>提供 IMoniker 接口的托管定义，具有 IPersist 和 IPersistStream 中的 COM 功能。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToObject(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary>使用名字对象绑定到它所标识的对象。</summary>
      <param name="pbc">对在此绑定操作中使用的绑定上下文对象上的 IBindCtx 接口的引用。</param>
      <param name="pmkToLeft">如果名字对象是复合名字对象的一部分，则为对当前名字对象左边的名字对象的引用。</param>
      <param name="riidResult">接口的接口标识符 (IID)，客户端打算使用该接口与名字对象标识的对象进行通信。</param>
      <param name="ppvResult">此方法返回时，包含对 <paramref name="riidResult" /> 请求的接口的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToStorage(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary>检索指向存储（该存储包含名字对象所标识的对象）的接口指针。</summary>
      <param name="pbc">对在此绑定操作过程中使用的绑定上下文对象上的 IBindCtx 接口的引用。</param>
      <param name="pmkToLeft">如果名字对象是复合名字对象的一部分，则为对当前名字对象左边的名字对象的引用。</param>
      <param name="riid">所请求的存储接口的接口标识符 (IID)。</param>
      <param name="ppvObj">此方法返回时，包含对 <paramref name="riid" /> 请求的接口的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.CommonPrefixWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>基于此名字对象与另一名字对象共有的公共前缀创建新的名字对象。</summary>
      <param name="pmkOther">对另一名字对象上的 IMoniker 接口的引用，将使用该名字对象与当前名字对象进行比较，以获得公共前缀。</param>
      <param name="ppmkPrefix">此方法返回时，包含作为当前名字对象和 <paramref name="pmkOther" /> 的公共前缀的名字对象。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ComposeWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Boolean,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>将当前名字对象与另一名字对象组合，创建一个新的复合名字对象。</summary>
      <param name="pmkRight">对名字对象上的 IMoniker 接口的引用，该引用将追加到当前名字对象的末尾。</param>
      <param name="fOnlyIfNotGeneric">true 指示调用方需要非通用复合。 仅当 <paramref name="pmkRight" /> 为当前名字对象可以采用不同于构成通用复合的方式与其组合的名字对象类时，该操作才继续。 而 false 指示该方法可以在必要时创建通用复合。</param>
      <param name="ppmkComposite">此方法返回时，包含对结果复合名字对象的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Enum(System.Boolean,System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary>提供一个指向枚举器（该枚举器可枚举复合名字对象的组件）的指针。</summary>
      <param name="fForward">true 表示按从左到右的顺序枚举名字对象。 而 false 表示按从右到左的顺序枚举。</param>
      <param name="ppenumMoniker">此方法返回时，包含对名字对象的枚举数对象的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetClassID(System.Guid@)">
      <summary>检索对象的类标识符 (CLSID)。</summary>
      <param name="pClassID">此方法返回时，包含 CLSID。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String@)">
      <summary>获取显示名称，该名称是当前名字对象的用户可读表示形式。</summary>
      <param name="pbc">对在此操作中使用的绑定上下文的引用。</param>
      <param name="pmkToLeft">如果名字对象是复合名字对象的一部分，则为对当前名字对象左边的名字对象的引用。</param>
      <param name="ppszDisplayName">此方法返回时，包含显示名称字符串。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetSizeMax(System.Int64@)">
      <summary>返回保存该对象所需的流的大小（以字节为单位）。</summary>
      <param name="pcbSize">此方法返回时，包含 long 值，该值指示保存此对象所需的流的大小（以字节为单位）。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary>提供一个数字，该数字表示当前名字对象所标识的对象的上次更改时间。</summary>
      <param name="pbc">对要在此绑定操作中使用的绑定上下文的引用。</param>
      <param name="pmkToLeft">如果名字对象是复合名字对象的一部分，则为对当前名字对象左边的名字对象的引用。</param>
      <param name="pFileTime">此方法返回时，包含上次更改时间。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Hash(System.Int32@)">
      <summary>使用该名字对象的内部状态计算 32 位整数。</summary>
      <param name="pdwHash">此方法返回时，包含此名字对象的哈希值。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Inverse(System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>提供一个名字对象，该名字对象在被复合到当前名字对象或一个结构相似的名字对象的右边时，将不复合到任何对象。</summary>
      <param name="ppmk">此方法返回时，包含一个名字对象，它是当前名字对象的逆命题。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsDirty">
      <summary>检查该对象自上次保存以来所发生的更改。</summary>
      <returns>如果该对象已更改，则为 S_OKHRESULT 值；否则为 S_FALSEHRESULT 值。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsEqual(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>将当前名字对象与指定的名字对象进行比较，并指示它们是否相同。</summary>
      <returns>如果名字对象相同，则为 S_OKHRESULT 值；否则为 S_FALSEHRESULT 值。</returns>
      <param name="pmkOtherMoniker">对用于比较的名字对象的引用。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsRunning(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>确定由当前名字对象标识的对象当前是否已加载并正在运行。</summary>
      <returns>如果名字对象处于运行状态，则为 S_OKHRESULT 值；如果名字对象不处于运行状态，则为 S_FALSEHRESULT 值；否则为 E_UNEXPECTEDHRESULT 值。</returns>
      <param name="pbc">对要在此绑定操作中使用的绑定上下文的引用。</param>
      <param name="pmkToLeft">如果当前名字对象是复合名字对象的一部分，则为对当前名字对象左边的名字对象的引用。</param>
      <param name="pmkNewlyRunning">对最近添加到运行对象表 (ROT) 的名字对象的引用。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsSystemMoniker(System.Int32@)">
      <summary>指示该名字对象是否是系统提供的名字对象类之一的对象。</summary>
      <returns>如果名字对象为系统名字对象，则为 S_OKHRESULT 值；否则为 S_FALSEHRESULT 值。</returns>
      <param name="pdwMksys">此方法返回时，包含指向一个整数的指针，该整数是 MKSYS 枚举值之一并引用 COM 名字对象类之一。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Load(System.Runtime.InteropServices.ComTypes.IStream)">
      <summary>从以前保存对象的流中初始化对象。</summary>
      <param name="pStm">从中加载对象的流。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>读取指定的显示名称中 <see cref="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)" /> 能够理解的全部字符并生成一个与读取的部分相对应的名字对象。</summary>
      <param name="pbc">对要在此绑定操作中使用的绑定上下文的引用。</param>
      <param name="pmkToLeft">对迄今为止已经从显示名称生成的名字对象的引用。</param>
      <param name="pszDisplayName">对包含要分析的剩余显示名称的字符串的引用。</param>
      <param name="pchEaten">此方法返回时，包含分析 <paramref name="pszDisplayName" /> 时所使用的字符数。 该参数未经初始化即被传递。</param>
      <param name="ppmkOut">此方法返回时，包含对从 <paramref name="pszDisplayName" /> 生成的名字对象的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Reduce(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>返回简化的名字对象，它是与当前名字对象引用同一对象但能够用相等或更高的效率绑定的另一个名字对象。</summary>
      <param name="pbc">对在此绑定操作中使用的绑定上下文中的 IBindCtx 接口的引用。</param>
      <param name="dwReduceHowFar">指定当前名字对象简化程度的值。</param>
      <param name="ppmkToLeft">对当前名字对象左边的名字对象的引用。</param>
      <param name="ppmkReduced">此方法返回时，包含对当前名字对象的简化形式的引用（如果发生错误或当前名字对象被简化为无，则可以为 null）。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.RelativePathTo(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>提供一个名字对象，该名字对象在被追加到当前名字对象（或一个有相似结构的名字对象）时生成指定名字对象。</summary>
      <param name="pmkOther">对应该对其采用相对路径的名字对象的引用。</param>
      <param name="ppmkRelPath">此方法返回时，包含对相关名字对象的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Save(System.Runtime.InteropServices.ComTypes.IStream,System.Boolean)">
      <summary>将对象保存到指定流。</summary>
      <param name="pStm">将对象保存到的流。</param>
      <param name="fClearDirty">如果要在保存完成之后清除修改后的标志，则为 true；否则为 false</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS">
      <summary>定义类型的实现或继承接口的特性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULT">
      <summary>该接口或调度接口表示源或接收器的默认值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULTVTABLE">
      <summary>接收器通过虚函数表 (VTBL) 接收事件。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FRESTRICTED">
      <summary>不应显示该成员，用户也不应可对该成员进行编程。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FSOURCE">
      <summary>调用而不是实现 coclass 的此成员。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND">
      <summary>指定如何通过 IDispatch::Invoke 来调用函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_FUNC">
      <summary>使用常规函数调用语法来调用该成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYGET">
      <summary>使用常规属性访问语法来调用该函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUT">
      <summary>使用属性值赋值语法来调用该函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUTREF">
      <summary>使用属性引用赋值语法来调用该函数。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IPersistFile">
      <summary>提供具有 IPersist 中的功能的 IPersistFile 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetClassID(System.Guid@)">
      <summary>检索对象的类标识符 (CLSID)。</summary>
      <param name="pClassID">此方法返回时，包含对 CLSID 的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetCurFile(System.String@)">
      <summary>检索该对象的当前工作文件的绝对路径，或者，如果没有当前工作文件，则检索该对象的默认文件名提示。</summary>
      <param name="ppszFileName">此方法返回时，包含指向一个以零终止的字符串的指针的地址，该字符串中包含当前文件的路径或者默认的文件名提示（如 *.txt）。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.IsDirty">
      <summary>检查对象自上次保存到其当前文件以来是否更改。</summary>
      <returns>如果文件自上次保存以来已经更改，则为 S_OK；如果文件自上次保存以来尚未更改，则为 S_FALSE。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Load(System.String,System.Int32)">
      <summary>打开指定文件并从文件内容初始化对象。</summary>
      <param name="pszFileName">以零结尾的字符串，包含要打开的文件的绝对路径。</param>
      <param name="dwMode">STGM 枚举中值的组合，指示用来打开 <paramref name="pszFileName" /> 的访问模式。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Save(System.String,System.Boolean)">
      <summary>将该对象的副本保存到指定文件。</summary>
      <param name="pszFileName">以零结尾的字符串，包含将该对象保存到的文件的绝对路径。</param>
      <param name="fRemember">将 <paramref name="pszFileName" /> 参数用作当前工作文件时为 true；否则为 false。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.SaveCompleted(System.String)">
      <summary>通知该对象它可以写入它的文件。</summary>
      <param name="pszFileName">以前保存该对象的文件的绝对路径。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IRunningObjectTable">
      <summary>提供 IRunningObjectTable 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.EnumRunning(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary>枚举当前注册为运行对象的对象。</summary>
      <param name="ppenumMoniker">此方法返回时，包含运行对象表 (ROT) 的新枚举器。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetObject(System.Runtime.InteropServices.ComTypes.IMoniker,System.Object@)">
      <summary>如果提供的对象名注册为运行对象，则返回该注册对象。</summary>
      <returns>一个 HRESULT 值，该值指示操作是成功还是失败。</returns>
      <param name="pmkObjectName">对要在运行对象表 (ROT) 中搜索的名字对象的引用。</param>
      <param name="ppunkObject">此方法返回时，包含请求的运行对象。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary>在运行对象表 (ROT) 中搜索此名字对象并报告所记录的更改时间（如果存在的话）。</summary>
      <returns>一个 HRESULT 值，该值指示操作是成功还是失败。</returns>
      <param name="pmkObjectName">对要在运行对象表 (ROT) 中搜索的名字对象的引用。</param>
      <param name="pfiletime">此对象返回时，包含对象的上次更改时间。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.IsRunning(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>确定指定名字对象当前是否在运行对象表 (ROT) 中注册。</summary>
      <returns>一个 HRESULT 值，该值指示操作是成功还是失败。</returns>
      <param name="pmkObjectName">对要在运行对象表 (ROT) 中搜索的名字对象的引用。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary>记录特定对象发生更改的时间，以便 IMoniker::GetTimeOfLastChange 可以报告相应更改时间。</summary>
      <param name="dwRegister">已更改对象的运行对象表 (ROT) 项。</param>
      <param name="pfiletime">对对象的上次更改时间的引用。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Register(System.Int32,System.Object,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>注册提供的对象已进入运行状态。</summary>
      <returns>一个值，该值可用于在随后对 <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)" /> 或 <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)" /> 的调用中标识此 ROT 项。</returns>
      <param name="grfFlags">指定运行对象表 (ROT) 对 <paramref name="punkObject" /> 的引用是弱引用还是强引用，并通过对象在 ROT 中的项控制对它的访问。</param>
      <param name="punkObject">对注册为运行对象的对象的引用。</param>
      <param name="pmkObjectName">对标识 <paramref name="punkObject" /> 的名字对象的引用。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)">
      <summary>从运行对象表 (ROT) 中注销指定的对象。</summary>
      <param name="dwRegister">要撤消的运行对象表 (ROT) 项。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IStream">
      <summary>提供具有 ISequentialStream 功能的 IStream 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Clone(System.Runtime.InteropServices.ComTypes.IStream@)">
      <summary>创建一个新的流对象，该流对象具有自己的查找指针且该指针与原始流引用相同的字节。</summary>
      <param name="ppstm">此方法返回时，包含新的流对象。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)">
      <summary>确保对在事务处理模式下打开的流对象所做的任何更改都能反映在父级存储中。</summary>
      <param name="grfCommitFlags">控制流对象更改的提交方式的值。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.CopyTo(System.Runtime.InteropServices.ComTypes.IStream,System.Int64,System.IntPtr,System.IntPtr)">
      <summary>将指定数量的字节从该流中的当前查找指针复制到另一个流中的当前查找指针。</summary>
      <param name="pstm">对目标流的引用。</param>
      <param name="cb">要从源流复制的字节数。</param>
      <param name="pcbRead">成功返回时包含从源读取的实际字节数。</param>
      <param name="pcbWritten">成功返回时包含写入到目标的实际字节数。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)">
      <summary>限制对流中指定字节范围的访问。</summary>
      <param name="libOffset">范围开始位置的字节偏移量。</param>
      <param name="cb">要限制的范围的长度（以字节为单位）。</param>
      <param name="dwLockType">所请求的对访问该范围的限制。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Read(System.Byte[],System.Int32,System.IntPtr)">
      <summary>将指定的字节数从流对象读入从当前查找指针开始的内存。</summary>
      <param name="pv">此方法返回时，包含从流中读取的数据。 该参数未经初始化即被传递。</param>
      <param name="cb">要从流对象中读取的字节数。</param>
      <param name="pcbRead">指向 ULONG 变量的指针，该变量接收从流对象中读取的实际字节数。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Revert">
      <summary>放弃自从上次 <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)" /> 调用以来对事务处理流所做的所有更改。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Seek(System.Int64,System.Int32,System.IntPtr)">
      <summary>将查找指针更改到相对于流的开头、流的结尾或当前查找指针的新位置。</summary>
      <param name="dlibMove">要添加到 <paramref name="dwOrigin" /> 的置换。</param>
      <param name="dwOrigin">查找的起始地址。 该起始地址可以是文件的开头、当前查找指针或文件的结尾。</param>
      <param name="plibNewPosition">成功返回时包含从流的开头算起的查找指针的偏移量。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.SetSize(System.Int64)">
      <summary>更改流对象的大小。</summary>
      <param name="libNewSize">流的新大小以字节数表示。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32)">
      <summary>检索此流的 <see cref="T:System.Runtime.InteropServices.STATSTG" /> 结构。</summary>
      <param name="pstatstg">此方法返回时，包含描述此流对象的 STATSTG 结构。 该参数未经初始化即被传递。</param>
      <param name="grfStatFlag">在 STATSTG 结构中指定此方法不返回的成员，这样就省去了一些内存分配操作。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.UnlockRegion(System.Int64,System.Int64,System.Int32)">
      <summary>移除对先前使用 <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)" /> 方法限制的字节范围的访问限制。</summary>
      <param name="libOffset">范围开始位置的字节偏移量。</param>
      <param name="cb">要限制的范围的长度（以字节为单位）。</param>
      <param name="dwLockType">先前设置在范围上的访问限制。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Write(System.Byte[],System.Int32,System.IntPtr)">
      <summary>将指定数量的字节写入从当前查找指针开始的流对象。</summary>
      <param name="pv">要将此流写入的缓冲区。</param>
      <param name="cb">要写入此流的字节数。</param>
      <param name="pcbWritten">成功返回时包含写入此流对象的实际的字节数。 如果调用方将此指针设置为 <see cref="F:System.IntPtr.Zero" />，则此方法不提供写入的实际字节数。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeComp">
      <summary>提供 ITypeComp 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.Bind(System.String,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.DESCKIND@,System.Runtime.InteropServices.ComTypes.BINDPTR@)">
      <summary>将名称映射到类型的成员，或者绑定类型库中包含的全局变量和函数。</summary>
      <param name="szName">要绑定的名称。</param>
      <param name="lHashVal">由 LHashValOfNameSys 计算的 <paramref name="szName" /> 的哈希值。</param>
      <param name="wFlags">标志字，包含一个或多个在 INVOKEKIND 枚举中定义的调用标志。</param>
      <param name="ppTInfo">此方法返回时，包含对类型说明（包含将其绑定到的项）的引用（如果返回了 FUNCDESC 或 VARDESC）。 该参数未经初始化即被传递。</param>
      <param name="pDescKind">此方法返回时，包含对 DESCKIND 枚举数的引用，该枚举数指示绑定到的名称是 VARDESC、FUNCDESC 还是 TYPECOMP。 该参数未经初始化即被传递。</param>
      <param name="pBindPtr">此方法返回时，包含对绑定到的 VARDESC、FUNCDESC 或 ITypeComp 接口的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.BindType(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>绑定到包含在类型库中的类型说明。</summary>
      <param name="szName">要绑定的名称。</param>
      <param name="lHashVal">由 LHashValOfNameSys 确定的 <paramref name="szName" /> 的哈希值。</param>
      <param name="ppTInfo">此方法返回时，包含对将 <paramref name="szName" /> 绑定到的类型的 ITypeInfo 的引用。 该参数未经初始化即被传递。</param>
      <param name="ppTComp">此方法返回时，包含对 ITypeComp 变量的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo">
      <summary>提供组件自动化 ITypeInfo 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary>检索静态函数或变量（如那些在 DLL 中定义的静态函数或变量）的地址。</summary>
      <param name="memid">要检索的 static 成员地址的成员 ID。</param>
      <param name="invKind">指定该成员是否为属性（如果是，还将指定它属于哪种属性）的 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 值之一。</param>
      <param name="ppv">此方法返回时，包含对 static 成员的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary>创建描述组件类 (coclass) 的类型的新实例。</summary>
      <param name="pUnkOuter">作为控制 IUnknown 的对象。</param>
      <param name="riid">接口的 IID，调用方将使用该接口与结果对象进行通信。</param>
      <param name="ppvObj">此方法返回时，包含对已创建对象的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary>检索类型库，该类型库包含此类型说明和它在该类型库中的索引。</summary>
      <param name="ppTLB">此方法返回时，包含对包含类型库的引用。 该参数未经初始化即被传递。</param>
      <param name="pIndex">此方法返回时，包含对包含类型库中的类型说明的索引的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>检索 DLL 中函数的入口点的说明或规范。</summary>
      <param name="memid">成员函数的 ID，要返回该成员函数的 DLL 入口说明。</param>
      <param name="invKind">指定由 <paramref name="memid" /> 标识的成员种类的 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 值之一。</param>
      <param name="pBstrDllName">如果不为 null，则此函数将 <paramref name="pBstrDllName" /> 设置为包含 DLL 名称的 BSTR。</param>
      <param name="pBstrName">如果不为 null，则此函数将 <paramref name="lpbstrName" /> 设置为包含入口点名称的 BSTR。</param>
      <param name="pwOrdinal">如果不为 null，并且此函数是按序号定义的，则 <paramref name="lpwOrdinal" /> 被设置为指向该序号。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>从文档字符串、完整的帮助文件名和路径以及帮助主题的上下文 ID 中检索指定的类型说明。</summary>
      <param name="index">要返回其文档的成员的 ID。</param>
      <param name="strName">此方法返回时，包含项方法的名称。 该参数未经初始化即被传递。</param>
      <param name="strDocString">此方法返回时，包含指定项的文档字符串。 该参数未经初始化即被传递。</param>
      <param name="dwHelpContext">此方法返回时，包含对与指定项相关联的帮助上下文的引用。 该参数未经初始化即被传递。</param>
      <param name="strHelpFile">此方法返回时，包含帮助文件的完全限定名。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary>检索包含有关指定函数的信息的 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 结构。</summary>
      <param name="index">要返回的函数说明的索引。</param>
      <param name="ppFuncDesc">此方法返回时，包含对描述指定函数的 FUNCDESC 结构的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary>在成员名和成员 ID 之间以及参数名和参数 ID 之间映射。</summary>
      <param name="rgszNames">要映射的名称数组。</param>
      <param name="cNames">要映射的名称计数。</param>
      <param name="pMemId">此方法返回时，包含对在其中放置名称映射的数组的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary>在类型说明中检索某个已实现的接口或基接口的 <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> 值。</summary>
      <param name="index">已实现的接口或基接口的索引。</param>
      <param name="pImplTypeFlags">此方法返回时，包含对 IMPLTYPEFLAGS 枚举的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetMops(System.Int32,System.String@)">
      <summary>检索封送处理信息。</summary>
      <param name="memid">成员 ID，它指示需要哪些封送处理信息。</param>
      <param name="pBstrMops">此方法返回时，包含对 opcode 字符串的引用，该字符串用于封送处理由引用类型说明描述的结构的字段；如果没有要返回的信息，则返回 null。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary>检索具有与指定函数 ID 相对应的指定成员 ID（或者属性或方法的名称及其参数）的变量。</summary>
      <param name="memid">要返回其名称的成员的 ID。</param>
      <param name="rgBstrNames">此方法返回时，包含与成员相关联的名称。 该参数未经初始化即被传递。</param>
      <param name="cMaxNames">
        <paramref name="rgBstrNames" /> 数组的长度。</param>
      <param name="pcNames">此方法返回时，包含 <paramref name="rgBstrNames" /> 数组中的名称数。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>检索被引用的类型说明（如果该类型说明引用其他类型说明）。</summary>
      <param name="hRef">要返回的被引用类型说明的句柄。</param>
      <param name="ppTI">此方法返回时，包含被引用的类型说明。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary>检索实现的接口类型的类型说明（如果类型说明描述 COM 类）。</summary>
      <param name="index">返回其句柄的已实现类型的索引。</param>
      <param name="href">此方法返回时，包含对已实现接口的句柄的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)">
      <summary>检索包含类型说明的特性的 <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 结构。</summary>
      <param name="ppTypeAttr">此方法返回时，包含对包含此类型说明的特性的结构的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>检索类型说明的 ITypeComp 接口，此接口使客户端编译器可以绑定到类型说明的成员。</summary>
      <param name="ppTComp">此方法返回时，包含对包含类型库的 ITypeComp 接口的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary>检索描述指定变量的 VARDESC 结构。</summary>
      <param name="index">要返回的变量说明的索引。</param>
      <param name="ppVarDesc">此方法返回时，包含对描述指定变量的 VARDESC 结构的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary>调用对象的方法或访问对象的属性，该方法或属性实现由类型说明描述的接口。</summary>
      <param name="pvInstance">对由此类型说明描述的接口的引用。</param>
      <param name="memid">用于标识接口成员的值。</param>
      <param name="wFlags">描述 Invoke 调用的上下文的标志。</param>
      <param name="pDispParams">对结构的引用，该结构包含一个参数数组、一个命名参数的 DISPID 数组和每个数组中元素数的计数。</param>
      <param name="pVarResult">对用于存储结果的位置的引用。 如果 <paramref name="wFlags" /> 指定 DISPATCH_PROPERTYPUT 或 DISPATCH_PROPERTYPUTREF，则忽略 <paramref name="pVarResult" />。 如果不需要任何结果，则设置为 null。</param>
      <param name="pExcepInfo">指向异常信息结构的指针，该结构仅在返回 DISP_E_EXCEPTION 时才被填充。</param>
      <param name="puArgErr">如果 Invoke 返回 DISP_E_TYPEMISMATCH，则 <paramref name="puArgErr" /> 指示具有错误类型的参数的 <paramref name="rgvarg" /> 中的索引。 如果多个参数返回错误，则 <paramref name="puArgErr" /> 仅指示第一个具有错误的参数。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseFuncDesc(System.IntPtr)">
      <summary>释放先前由 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" /> 方法返回的一个 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 结构。</summary>
      <param name="pFuncDesc">对要释放的 FUNCDESC 结构的引用。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseTypeAttr(System.IntPtr)">
      <summary>释放先前由 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" /> 方法返回的一个 <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 结构。</summary>
      <param name="pTypeAttr">对要释放的 TYPEATTR 结构的引用。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseVarDesc(System.IntPtr)">
      <summary>释放先前由 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" /> 方法返回的一个 VARDESC 结构。</summary>
      <param name="pVarDesc">对要释放的 VARDESC 结构的引用。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo2">
      <summary>提供 ITypeInfo2 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary>检索静态函数或变量（如那些在 DLL 中定义的静态函数或变量）的地址。</summary>
      <param name="memid">要检索的 static 成员地址的成员 ID。</param>
      <param name="invKind">指定该成员是否为属性（如果是，还将指定它属于哪种属性）的 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 值之一。</param>
      <param name="ppv">此方法返回时，包含对 static 成员的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary>创建描述组件类 (coclass) 的类型的新实例。</summary>
      <param name="pUnkOuter">作为控制 IUnknown 的对象。</param>
      <param name="riid">接口的 IID，调用方将使用该接口与结果对象进行通信。</param>
      <param name="ppvObj">此方法返回时，包含对已创建对象的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllCustData(System.IntPtr)">
      <summary>获取库的所有自定义数据项。</summary>
      <param name="pCustData">一个指向包含所有自定义数据项的 CUSTDATA 的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllFuncCustData(System.Int32,System.IntPtr)">
      <summary>从指定函数中获取所有自定义数据。</summary>
      <param name="index">用于为其获取自定义数据的函数的索引。</param>
      <param name="pCustData">一个指向包含所有自定义数据项的 CUSTDATA 的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllImplTypeCustData(System.Int32,System.IntPtr)">
      <summary>为指定的实现类型获取所有自定义数据。</summary>
      <param name="index">自定义数据的实现类型的索引。</param>
      <param name="pCustData">一个指向包含所有自定义数据项的 CUSTDATA 的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllParamCustData(System.Int32,System.Int32,System.IntPtr)">
      <summary>为指定的函数参数获取所有自定义数据。</summary>
      <param name="indexFunc">用于为其获取自定义数据的函数的索引。</param>
      <param name="indexParam">用于为其获取自定义数据的此函数的参数的索引。</param>
      <param name="pCustData">一个指向包含所有自定义数据项的 CUSTDATA 的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllVarCustData(System.Int32,System.IntPtr)">
      <summary>为自定义数据获取变量。</summary>
      <param name="index">用于为其获取自定义数据的变量的索引。</param>
      <param name="pCustData">一个指向包含所有自定义数据项的 CUSTDATA 的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary>检索类型库，该类型库包含此类型说明和它在该类型库中的索引。</summary>
      <param name="ppTLB">此方法返回时，包含对包含类型库的引用。 该参数未经初始化即被传递。</param>
      <param name="pIndex">此方法返回时，包含对包含类型库中的类型说明的索引的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetCustData(System.Guid@,System.Object@)">
      <summary>获取自定义数据。</summary>
      <param name="guid">用于标识数据的 GUID。</param>
      <param name="pVarVal">此方法返回时，包含一个指定在何处放置检索到的数据的 Object。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>检索 DLL 中函数的入口点的说明或规范。</summary>
      <param name="memid">成员函数的 ID，要返回该成员函数的 DLL 入口说明。</param>
      <param name="invKind">指定由 <paramref name="memid" /> 标识的成员种类的 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 值之一。</param>
      <param name="pBstrDllName">如果不为 null，则此函数将 <paramref name="pBstrDllName" /> 设置为包含 DLL 名称的 BSTR。</param>
      <param name="pBstrName">如果不为 null，则此函数将 <paramref name="lpbstrName" /> 设置为包含入口点名称的 BSTR。</param>
      <param name="pwOrdinal">如果不为 null，并且此函数是按序号定义的，则 <paramref name="lpwOrdinal" /> 被设置为指向该序号。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>从文档字符串、完整的帮助文件名和路径以及帮助主题的上下文 ID 中检索指定的类型说明。</summary>
      <param name="index">要返回其文档的成员的 ID。</param>
      <param name="strName">此方法返回时，包含项方法的名称。 该参数未经初始化即被传递。</param>
      <param name="strDocString">此方法返回时，包含指定项的文档字符串。 该参数未经初始化即被传递。</param>
      <param name="dwHelpContext">此方法返回时，包含对与指定项相关联的帮助上下文的引用。 该参数未经初始化即被传递。</param>
      <param name="strHelpFile">此方法返回时，包含帮助文件的完全限定名。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary>检索文档字符串、完整的帮助文件名和路径、要使用的本地化上下文，以及帮助文件中的库帮助主题的上下文 ID。</summary>
      <param name="memid">类型说明的成员标识符。</param>
      <param name="pbstrHelpString">此方法返回时，包含一个 BSTR，其中包含指定项的名称。 如果调用方不需要该项名称，则 <paramref name="pbstrHelpString" /> 可以为 null。 该参数未经初始化即被传递。</param>
      <param name="pdwHelpStringContext">此方法返回时，包含帮助本地化上下文。 如果调用方不需要该帮助上下文，则 <paramref name="pdwHelpStringContext" /> 可以为 null。 该参数未经初始化即被传递。</param>
      <param name="pbstrHelpStringDll">此方法返回时，包含一个 BSTR，其中包含特定文件（包含帮助文件所使用的 DLL）的完全限定名。 如果调用方不需要该文件名，则 <paramref name="pbstrHelpStringDll" /> 可以为 null。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncCustData(System.Int32,System.Guid@,System.Object@)">
      <summary>从指定函数中获取自定义数据。</summary>
      <param name="index">用于为其获取自定义数据的函数的索引。</param>
      <param name="guid">用于标识数据的 GUID。</param>
      <param name="pVarVal">此方法返回时，包含一个指定在何处放置数据的 Object。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary>检索包含有关指定函数的信息的 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 结构。</summary>
      <param name="index">要返回的函数说明的索引。</param>
      <param name="ppFuncDesc">此方法返回时，包含对描述指定函数的 FUNCDESC 结构的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncIndexOfMemId(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.Int32@)">
      <summary>基于已知 DISPID 绑定至特定成员，其中成员名称是未知的（例如，绑定至默认成员时）。</summary>
      <param name="memid">成员标识符。</param>
      <param name="invKind">指定由 memid 标识的成员种类的 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 值之一。</param>
      <param name="pFuncIndex">此方法返回时，将索引纳入函数中。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary>在成员名和成员 ID 之间以及参数名和参数 ID 之间映射。</summary>
      <param name="rgszNames">要映射的名称数组。</param>
      <param name="cNames">要映射的名称计数。</param>
      <param name="pMemId">此方法返回时，包含对在其中放置名称映射的数组的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeCustData(System.Int32,System.Guid@,System.Object@)">
      <summary>获取自定义数据的实现类型。</summary>
      <param name="index">自定义数据的实现类型的索引。</param>
      <param name="guid">用于标识数据的 GUID。</param>
      <param name="pVarVal">此方法返回时，包含一个指定在何处放置检索到的数据的 Object。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary>在类型说明中检索某个已实现的接口或基接口的 <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> 值。</summary>
      <param name="index">已实现的接口或基接口的索引。</param>
      <param name="pImplTypeFlags">此方法返回时，包含对 IMPLTYPEFLAGS 枚举的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetMops(System.Int32,System.String@)">
      <summary>检索封送处理信息。</summary>
      <param name="memid">成员 ID，它指示需要哪些封送处理信息。</param>
      <param name="pBstrMops">此方法返回时，包含对 opcode 字符串的引用，该字符串用于封送处理由引用类型说明描述的结构的字段；如果没有要返回的信息，则返回 null。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary>检索具有与指定函数 ID 相对应的指定成员 ID（或者属性或方法的名称及其参数）的变量。</summary>
      <param name="memid">要返回其名称的成员的 ID。</param>
      <param name="rgBstrNames">此方法返回时，包含与成员相关联的名称。 该参数未经初始化即被传递。</param>
      <param name="cMaxNames">
        <paramref name="rgBstrNames" /> 数组的长度。</param>
      <param name="pcNames">此方法返回时，包含 <paramref name="rgBstrNames" /> 数组中的名称数。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetParamCustData(System.Int32,System.Int32,System.Guid@,System.Object@)">
      <summary>获取指定的自定义数据参数。</summary>
      <param name="indexFunc">用于为其获取自定义数据的函数的索引。</param>
      <param name="indexParam">用于为其获取自定义数据的此函数的参数的索引。</param>
      <param name="guid">用于标识数据的 GUID。</param>
      <param name="pVarVal">此方法返回时，包含一个指定在何处放置检索到的数据的 Object。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>检索被引用的类型说明（如果该类型说明引用其他类型说明）。</summary>
      <param name="hRef">要返回的被引用类型说明的句柄。</param>
      <param name="ppTI">此方法返回时，包含被引用的类型说明。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary>检索已实现接口类型的类型说明（如果类型说明描述 COM 类）。</summary>
      <param name="index">返回其句柄的已实现类型的索引。</param>
      <param name="href">此方法返回时，包含对已实现接口的句柄的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeAttr(System.IntPtr@)">
      <summary>检索包含类型说明的特性的 <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 结构。</summary>
      <param name="ppTypeAttr">此方法返回时，包含对包含此类型说明的特性的结构的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>检索类型说明的 ITypeComp 接口，此接口使客户端编译器可以绑定到类型说明的成员。</summary>
      <param name="ppTComp">此方法返回时，包含对包含类型库的 ITypeComp 的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeFlags(System.Int32@)">
      <summary>返回类型标志，而不进行任何分配。 此方法返回 DWORD 类型标志，该标志将扩展类型标志，而不会增加 TYPEATTR（类型特性）。</summary>
      <param name="pTypeFlags">此方法返回时，包含对 TYPEFLAG 的 DWORD 引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeKind(System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>快速返回 TYPEKIND 枚举，而不进行任何分配。</summary>
      <param name="pTypeKind">此方法返回时，包含对 TYPEKIND 枚举的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarCustData(System.Int32,System.Guid@,System.Object@)">
      <summary>为自定义数据获取变量。</summary>
      <param name="index">用于为其获取自定义数据的变量的索引。</param>
      <param name="guid">用于标识数据的 GUID。</param>
      <param name="pVarVal">此方法返回时，包含一个指定在何处放置检索到的数据的 Object。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary>检索描述指定变量的 VARDESC 结构。</summary>
      <param name="index">要返回的变量说明的索引。</param>
      <param name="ppVarDesc">此方法返回时，包含对描述指定变量的 VARDESC 结构的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarIndexOfMemId(System.Int32,System.Int32@)">
      <summary>基于已知 DISPID 绑定至特定成员，其中成员名称是未知的（例如，绑定至默认成员时）。</summary>
      <param name="memid">成员标识符。</param>
      <param name="pVarIndex">此方法返回时，包含 <paramref name="memid" /> 的索引。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary>调用对象的方法或访问对象的属性，该方法或属性实现由类型说明描述的接口。</summary>
      <param name="pvInstance">对由此类型说明描述的接口的引用。</param>
      <param name="memid">接口成员的标识符。</param>
      <param name="wFlags">描述 Invoke 调用的上下文的标志。</param>
      <param name="pDispParams">对结构的引用，该结构包含一个参数数组、一个命名参数的 DISPID 数组和每个数组中元素数的计数。</param>
      <param name="pVarResult">对用于存储结果的位置的引用。 如果 <paramref name="wFlags" /> 指定 DISPATCH_PROPERTYPUT 或 DISPATCH_PROPERTYPUTREF，则忽略 <paramref name="pVarResult" />。 如果不需要任何结果，则设置为 null。</param>
      <param name="pExcepInfo">指向异常信息结构的指针，该结构仅在返回 DISP_E_EXCEPTION 时才被填充。</param>
      <param name="puArgErr">如果 Invoke 返回 DISP_E_TYPEMISMATCH，则 <paramref name="puArgErr" /> 指示具有错误类型的参数的索引。 如果多个参数返回错误，则 <paramref name="puArgErr" /> 仅指示第一个具有错误的参数。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseFuncDesc(System.IntPtr)">
      <summary>释放先前由 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" /> 方法返回的一个 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 结构。</summary>
      <param name="pFuncDesc">对要释放的 FUNCDESC 结构的引用。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseTypeAttr(System.IntPtr)">
      <summary>释放先前由 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" /> 方法返回的一个 <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 结构。</summary>
      <param name="pTypeAttr">对要释放的 TYPEATTR 结构的引用。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseVarDesc(System.IntPtr)">
      <summary>释放先前由 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" /> 方法返回的一个 VARDESC 结构。</summary>
      <param name="pVarDesc">对要释放的 VARDESC 结构的引用。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib">
      <summary>提供 ITypeLib 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary>在类型库中查找类型说明的匹配项。</summary>
      <param name="szNameBuf">要搜索的名称。 这是一个输入/输出参数。</param>
      <param name="lHashVal">一个用于加快搜索速度的哈希值，由 LHashValOfNameSys 函数计算。 如果 <paramref name="lHashVal" /> 为 0，则计算一个值。</param>
      <param name="ppTInfo">此方法返回时，包含一个指向类型说明的指针数组，这些类型说明中包含 <paramref name="szNameBuf" /> 中指定的名称。 该参数未经初始化即被传递。</param>
      <param name="rgMemId">所找到的项的 MEMBERID 数组；<paramref name="rgMemId" />[i] 是由 <paramref name="ppTInfo" />[i] 指定的类型说明中建立索引的 MEMBERID。 不能为 null。</param>
      <param name="pcFound">在进入时指示要查找的实例数。 例如，可以调用 <paramref name="pcFound" />= 1 以查找第一个匹配项。 当找到一个实例时停止搜索。 在退出时指示找到的实例数。 如果 <paramref name="pcFound" /> 的 in 和 out 值完全相同，则可能存在其他包含此名称的类型说明。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>检索库的文档字符串、完整的帮助文件名和路径以及帮助文件中的库帮助主题的上下文标识符。</summary>
      <param name="index">要返回其文档的类型说明的索引。</param>
      <param name="strName">此方法返回时，包含一个表示指定项的名称的字符串。 该参数未经初始化即被传递。</param>
      <param name="strDocString">此方法返回时，包含一个表示指定项的文档字符串的字符串。 该参数未经初始化即被传递。</param>
      <param name="dwHelpContext">此方法返回时，包含与指定项关联的帮助上下文标识符。 该参数未经初始化即被传递。</param>
      <param name="strHelpFile">此方法返回时，包含一个表示帮助文件的完全限定名的字符串。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)">
      <summary>检索包含库的特性的结构。</summary>
      <param name="ppTLibAttr">此方法返回时，包含一个结构，该结构包含库的特性。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>使客户端编译器能够绑定到库的类型、变量、常数和全局函数。</summary>
      <param name="ppTComp">此方法返回时，包含此 ITypeLib 的 ITypeComp 实例的一个实例。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>在库中检索指定的类型说明。</summary>
      <param name="index">要返回的 ITypeInfo 接口的索引。</param>
      <param name="ppTI">此方法返回时，包含一个 ITypeInfo，它描述 <paramref name="index" /> 引用的类型。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoCount">
      <summary>返回类型库中的类型说明的数量。</summary>
      <returns>类型库中的类型说明的数量。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>检索与指定的 GUID 相对应的类型说明。</summary>
      <param name="guid">请求其类型信息的类的接口的 IID 或 CLSID。</param>
      <param name="ppTInfo">此方法返回时，包含请求的 ITypeInfo 接口。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>检索类型说明的类型。</summary>
      <param name="index">类型库中类型说明的索引。</param>
      <param name="pTKind">此方法返回时，包含对用于类型说明的 TYPEKIND 枚举的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.IsName(System.String,System.Int32)">
      <summary>指示传入的字符串是否包含库中描述的类型或成员的名称。</summary>
      <returns>如果在类型库中找到 <paramref name="szNameBuf" />，则为 true；否则为 false。</returns>
      <param name="szNameBuf">要测试的字符串。 这是一个输入/输出参数。</param>
      <param name="lHashVal">
        <paramref name="szNameBuf" /> 的哈希值。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.ReleaseTLibAttr(System.IntPtr)">
      <summary>释放最初通过 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" /> 方法获取的 <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> 结构。</summary>
      <param name="pTLibAttr">要释放的 TLIBATTR 结构。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib2">
      <summary>提供 ITypeLib2 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary>在类型库中查找类型说明的匹配项。</summary>
      <param name="szNameBuf">要搜索的名称。</param>
      <param name="lHashVal">一个用于加快搜索速度的哈希值，由 LHashValOfNameSys 函数计算。 如果 <paramref name="lHashVal" /> 为 0，则计算一个值。</param>
      <param name="ppTInfo">此方法返回时，包含一个指向类型说明的指针数组，这些类型说明中包含 <paramref name="szNameBuf" /> 中指定的名称。 该参数未经初始化即被传递。</param>
      <param name="rgMemId">此方法返回时，包含所找到的项的 MEMBERID 数组；<paramref name="rgMemId" /> [i] 是用于通过索引访问 <paramref name="ppTInfo" /> [i] 指定的类型说明的 MEMBERID。 此参数不能为 null。 该参数未经初始化即被传递。</param>
      <param name="pcFound">输入时由引用传递的一个值，该值指示要查找的实例数。 例如，可以调用 <paramref name="pcFound" />= 1 以查找第一个匹配项。 当找到一个实例时停止搜索。 在退出时指示找到的实例数。 如果 <paramref name="pcFound" /> 的 in 和 out 值完全相同，则可能存在其他包含此名称的类型说明。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetAllCustData(System.IntPtr)">
      <summary>获取库的所有自定义数据项。</summary>
      <param name="pCustData">一个指向包含所有自定义数据项的 CUSTDATA 的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetCustData(System.Guid@,System.Object@)">
      <summary>获取自定义数据。</summary>
      <param name="guid">由引用传递的 <see cref="T:System.Guid" />，用于标识数据。</param>
      <param name="pVarVal">此方法返回时，包含一个指定在何处放置检索到的数据的对象。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>检索库的文档字符串、完整的帮助文件名和路径以及帮助文件中的库帮助主题的上下文标识符。</summary>
      <param name="index">要返回其文档的类型说明的索引。</param>
      <param name="strName">该参数在此方法返回时包含一个字符串，该字符串指定了指定项的名称。 该参数未经初始化即被传递。</param>
      <param name="strDocString">此方法返回时，包含指定项的文档字符串。 该参数未经初始化即被传递。</param>
      <param name="dwHelpContext">此方法返回时，包含与指定项关联的帮助上下文标识符。 该参数未经初始化即被传递。</param>
      <param name="strHelpFile">此方法返回时，包含指定帮助文件的完全限定名的字符串。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary>检索库的文档字符串、完整的帮助文件名和路径、要使用的本地化上下文以及帮助文件中的库帮助主题的上下文标识符。</summary>
      <param name="index">将返回其文档的类型说明的索引；如果 <paramref name="index" /> 为 -1，则返回库的文档。</param>
      <param name="pbstrHelpString">该参数在此方法返回时包含一个 BSTR，该 BSTR 指定了指定项的名称。 如果调用方不需要该项名称，则 <paramref name="pbstrHelpString" /> 可以为 null。 该参数未经初始化即被传递。</param>
      <param name="pdwHelpStringContext">此方法返回时，包含帮助本地化上下文。 如果调用方不需要该帮助上下文，则 <paramref name="pdwHelpStringContext" /> 可以为 null。 该参数未经初始化即被传递。</param>
      <param name="pbstrHelpStringDll">此方法返回时，包含一个指定文件（该文件中包含用于帮助文件的 DLL）的完全限定名的 BSTR。 如果调用方不需要该文件名，则 <paramref name="pbstrHelpStringDll" /> 可以为 null。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibAttr(System.IntPtr@)">
      <summary>检索包含库的特性的结构。</summary>
      <param name="ppTLibAttr">此方法返回时，包含一个结构，该结构包含库的特性。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibStatistics(System.IntPtr,System.Int32@)">
      <summary>返回有关类型库的统计信息，该信息是有效调整哈希表的大小所必需的。</summary>
      <param name="pcUniqueNames">指向唯一名称的计数的指针。 如果调用方不需要此信息，则将其设置为 null。</param>
      <param name="pcchUniqueNames">此方法返回时，包含一个指向唯一名称计数中的更改的指针。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>使客户端编译器能够绑定到库的类型、变量、常数和全局函数。</summary>
      <param name="ppTComp">此方法返回时，包含一个用于此 ITypeLib 的 ITypeComp 实例。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>在库中检索指定的类型说明。</summary>
      <param name="index">要返回的 ITypeInfo 接口的索引。</param>
      <param name="ppTI">此方法返回时，包含一个 ITypeInfo，它描述 <paramref name="index" /> 引用的类型。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoCount">
      <summary>返回类型库中的类型说明的数量。</summary>
      <returns>类型库中的类型说明的数量。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>检索与指定的 GUID 相对应的类型说明。</summary>
      <param name="guid">由引用传递的 <see cref="T:System.Guid" />，它表示被请求了类型信息的类的 CLSID 接口的 IID。</param>
      <param name="ppTInfo">此方法返回时，包含请求的 ITypeInfo 接口。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>检索类型说明的类型。</summary>
      <param name="index">类型库中类型说明的索引。</param>
      <param name="pTKind">此方法返回时，包含对用于类型说明的 TYPEKIND 枚举的引用。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.IsName(System.String,System.Int32)">
      <summary>指示传入的字符串是否包含库中描述的类型或成员的名称。</summary>
      <returns>如果在类型库中找到 <paramref name="szNameBuf" />，则为 true；否则为 false。</returns>
      <param name="szNameBuf">要测试的字符串。</param>
      <param name="lHashVal">
        <paramref name="szNameBuf" /> 的哈希值。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.ReleaseTLibAttr(System.IntPtr)">
      <summary>释放最初通过 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" /> 方法获取的 <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> 结构。</summary>
      <param name="pTLibAttr">要释放的 TLIBATTR 结构。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.LIBFLAGS">
      <summary>定义应用于类型库的标志。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FCONTROL">
      <summary>类型库描述控件，并且不应在供非可视对象使用的类型浏览器中显示。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHASDISKIMAGE">
      <summary>类型库以一种持久形式存在于磁盘上。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHIDDEN">
      <summary>不应将类型库显示给用户，虽然它的使用并未受到限制。 类型库应该由控件使用。 宿主应创建用扩展属性包装控件的新类型库。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FRESTRICTED">
      <summary>类型库受到限制且不应显示给用户。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMDESC">
      <summary>包含有关如何在进程之间传输结构元素、参数或函数返回值的信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.lpVarValue">
      <summary>表示指向正在进程之间传递的值的指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.wParamFlags">
      <summary>表示描述结构元素、参数或返回值的位屏蔽值。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMFLAG">
      <summary>描述如何在进程之间传输结构元素、参数或函数返回值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASCUSTDATA">
      <summary>该参数具有自定义数据。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASDEFAULT">
      <summary>参数定义了默认行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FIN">
      <summary>参数将信息从调用方传递到被调用方。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FLCID">
      <summary>参数是客户端应用程序的本地标识符。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOPT">
      <summary>该参数是可选的。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOUT">
      <summary>参数将信息从被调用方返回到调用方。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FRETVAL">
      <summary>参数是成员的返回值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_NONE">
      <summary>不会指定该参数传递还是接收信息。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATSTG">
      <summary>包含有关打开的存储、流或字节数组对象的统计信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.atime">
      <summary>指定此存储、流或字节数组的上次访问时间。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.cbSize">
      <summary>指定流或字节数组的大小（以字节为单位）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.clsid">
      <summary>指示存储对象的类标识符。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.ctime">
      <summary>指示此存储、流或字节数组的创建时间。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfLocksSupported">
      <summary>指示受该流或字节数组支持的区域锁定的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfMode">
      <summary>指示打开对象时指定的访问模式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfStateBits">
      <summary>指示存储对象的当前状态位（最近由 IStorage::SetStateBits 方法设置的值）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.mtime">
      <summary>指示此存储、流或字节数组的上次修改日期。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.pwcsName">
      <summary>表示指向以 NULL 结尾的字符串的指针，该字符串包含此结构所描述的对象的名称。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.reserved">
      <summary>保留供将来使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.type">
      <summary>指示存储对象的类型，该类型为 STGTY 枚举值之一。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.SYSKIND">
      <summary>标识目标操作系统平台。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_MAC">
      <summary>类型库的目标操作系统为 Apple Macintosh。 默认情况下，所有数据字段在偶字节边界对齐。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN16">
      <summary>类型库的目标操作系统是 16 位 Windows 系统。 默认情况下，数据字段被压缩。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN32">
      <summary>类型库的目标操作系统是 32 位 Windows 系统。 默认情况下，数据字段自然对齐（例如，2 字节整数在偶字节边界对齐；4 字节整数在四字边界对齐，依此类推）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN64">
      <summary>类型库的目标操作系统是 64 位 Windows 系统。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEATTR">
      <summary>包含 UCOMITypeInfo 的特性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbAlignment">
      <summary>指定此类型实例的字节对齐方式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeInstance">
      <summary>此类型的实例的大小。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeVft">
      <summary>此类型的虚方法表 (VTBL) 的大小。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cFuncs">
      <summary>指示此结构描述的接口上的函数数目。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cImplTypes">
      <summary>指示在此结构描述的接口上实现的接口数目。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cVars">
      <summary>指示此结构所描述的接口上的变量和数据字段的数目。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.dwReserved">
      <summary>保留供将来使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.guid">
      <summary>类型信息的 GUID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.idldescType">
      <summary>所描述的类型的 IDL 特性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lcid">
      <summary>成员名称和文档字符串的区域设置。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lpstrSchema">
      <summary>保留供将来使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.MEMBER_ID_NIL">
      <summary>与 <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidConstructor" /> 和 <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidDestructor" /> 字段一起使用的常数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidConstructor">
      <summary>构造函数的 ID，如果没有，则为 <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidDestructor">
      <summary>析构函数的 ID，如果没有，则为 <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.tdescAlias">
      <summary>如果 <see cref="F:System.Runtime.InteropServices.TYPEATTR.typekind" />==<see cref="F:System.Runtime.InteropServices.TYPEKIND.TKIND_ALIAS" />，则指定该类型（此类型为该类型的别名）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.typekind">
      <summary>
        <see cref="T:System.Runtime.InteropServices.TYPEKIND" /> 值，该值描述此信息描述的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMajorVerNum">
      <summary>主要版本号。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMinorVerNum">
      <summary>次要版本号。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wTypeFlags">
      <summary>描述此信息的 <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> 值。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEDESC">
      <summary>描述变量的类型、函数的返回类型或函数参数的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.lpValue">
      <summary>如果变量为 VT_SAFEARRAY 或 VT_PTR，则 lpValue 字段包含指向指定元素类型的 TYPEDESC 的指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.vt">
      <summary>指示由此 TYPEDESC 描述的项的 Variant 类型。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEFLAGS">
      <summary>定义类型说明的属性和特性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAGGREGATABLE">
      <summary>该类支持聚合。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAPPOBJECT">
      <summary>描述 Application 对象的类型说明。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCANCREATE">
      <summary>可由 ITypeInfo::CreateInstance 创建该类型的实例。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCONTROL">
      <summary>该类型是将派生其他类型的控件，而且不应显示给用户。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDISPATCHABLE">
      <summary>指示该接口直接或间接从 IDispatch 派生。 此标志为计算所得，没有此标志的对象描述语言。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDUAL">
      <summary>该接口同时支持 IDispatch 和 VTBL 绑定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FHIDDEN">
      <summary>该类型不应显示在浏览器中。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FLICENSED">
      <summary>该类型已授权。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FNONEXTENSIBLE">
      <summary>该接口在运行时无法添加成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FOLEAUTOMATION">
      <summary>该接口中使用的类型与自动化（包括 VTBL 绑定支持）完全兼容。 设置双重接口时，将同时设置此标志和 <see cref="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FDUAL" />。 不允许在调度接口上设置此标志。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPREDECLID">
      <summary>该类型是预定义的。 该客户端应用程序应自动创建具有此特性的对象的单个实例。 指向该对象的变量的名称与该对象的类名相同。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPROXY">
      <summary>指示接口将使用 proxy/stub 动态链接库。 此标志指定注销类型库时不应注销类型库代理。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREPLACEABLE">
      <summary>该对象支持 IConnectionPointWithDefault，而且具有默认行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FRESTRICTED">
      <summary>不应是可从宏语言访问的。 此标志用于系统级类型或类型浏览器不应显示的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREVERSEBIND">
      <summary>指示检查子级前应先检查基接口以进行名称解析，这与默认行为相反。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEKIND">
      <summary>指定各种类型的数据和函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ALIAS">
      <summary>类型，它是另一个类型的别名。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_COCLASS">
      <summary>已实现的组件接口集。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_DISPATCH">
      <summary>可通过 IDispatch::Invoke 访问的方法和属性集。 默认情况下，双重接口返回 TKIND_DISPATCH。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ENUM">
      <summary>枚举数集。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_INTERFACE">
      <summary>类型，它具有虚函数（全部为纯虚函数）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MAX">
      <summary>枚举结尾标记。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MODULE">
      <summary>模块，它只能包含静态函数和数据（例如 DLL）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_RECORD">
      <summary>没有方法的结构。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_UNION">
      <summary>偏移量为零的所有成员的联合。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPELIBATTR">
      <summary>标识特定类型库并为成员名称提供本地化支持。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.guid">
      <summary>表示类型库的全局唯一的库 ID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.lcid">
      <summary>表示类型库的区域设置 ID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.syskind">
      <summary>表示类型库的目标硬件平台。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wLibFlags">
      <summary>表示库标志。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMajorVerNum">
      <summary>表示类型库的主版本号。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMinorVerNum">
      <summary>表示类型库的次版本号。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC">
      <summary>描述变量、常数或数据成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.desc">
      <summary>包含有关变量的信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.elemdescVar">
      <summary>包含变量类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.lpstrSchema">
      <summary>保留此字段供将来使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.memid">
      <summary>指示变量的成员 ID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.varkind">
      <summary>定义如何封送变量。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.wVarFlags">
      <summary>定义变量的属性。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION">
      <summary>包含有关变量的信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.lpvarValue">
      <summary>描述符号常数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.oInst">
      <summary>指示此变量在该实例中的偏移量。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARFLAGS">
      <summary>标识定义变量属性的常数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FBINDABLE">
      <summary>该变量支持数据绑定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTBIND">
      <summary>此变量是最佳地表示此对象的唯一属性。 类型信息中仅有一个变量可以具有此特性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTCOLLELEM">
      <summary>允许进行一种优化，使编译器查找“abc”类型上名为“xyz”的成员。 如果找到这样的成员，而且该成员标志为默认集合的某元素的访问函数，则生成对该成员函数的调用。 可以对调度接口和接口中的成员使用；不能对模块使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDISPLAYBIND">
      <summary>该变量作为可绑定变量显示给用户。 还必须设置 <see cref="F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FBINDABLE" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FHIDDEN">
      <summary>尽管该变量存在并且是可绑定的，但不应在浏览器中将它显示给用户。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FIMMEDIATEBIND">
      <summary>该变量作为单独的可绑定属性映射。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FNONBROWSABLE">
      <summary>该变量出现在对象浏览器而非属性浏览器中。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREADONLY">
      <summary>不应允许给该变量赋值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREPLACEABLE">
      <summary>将该接口标记为具有默认行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREQUESTEDIT">
      <summary>设置后，任何直接更改该属性的尝试都会导致对 IPropertyNotifySink::OnRequestEdit 的调用。 OnRequestEdit 的实现确定是否接受此更改。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FRESTRICTED">
      <summary>该变量不应该是可以从宏语言访问的。 此标志用于系统级变量或不想让类型浏览器显示的变量。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FSOURCE">
      <summary>该变量返回一个对象，该对象为事件的源。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FUIDEFAULT">
      <summary>该变量是用户界面中的默认显示。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARKIND">
      <summary>定义变量的种类。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_CONST">
      <summary>VARDESC 结构描述符号常量。 没有与之关联的内存。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_DISPATCH">
      <summary>该变量只能通过 IDispatch::Invoke 访问。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_PERINSTANCE">
      <summary>该变量是类型的一个字段或成员。 它在类型的每个实例中存在于固定的偏移量处。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_STATIC">
      <summary>该变量只有一个实例。</summary>
    </member>
    <member name="T:System.Runtime.Serialization.OnDeserializedAttribute">
      <summary>如果将对象图中的对象应用于某方法，则应指定在反序列化该对象图后立即调用该方法。 相对于图中的其他对象的反序列化的顺序是非确定性的。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.OnDeserializedAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.OnDeserializedAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.Serialization.OnDeserializingAttribute">
      <summary>当将对象图应用某方法时，指定反序列化对象时调用的方法。 相对于图中的其他对象的反序列化的顺序是非确定性的。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.OnDeserializingAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.OnDeserializingAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.Serialization.OnSerializedAttribute">
      <summary>如果将对象图应用于某方法，则应指定在序列化该对象图后调用该方法。 相对于图中的其他对象的序列化的顺序是非确定性的。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.OnSerializedAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.OnSerializedAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.Serialization.OnSerializingAttribute">
      <summary>如果将对象图中的对象应用于某方法，则应指定在序列化该对象图时调用该方法。 相对于图中的其他对象的序列化的顺序是非确定性的。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.OnSerializingAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.OnSerializingAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.Serialization.SerializationException">
      <summary>在序列化或反序列化期间出错时所引发的异常。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationException.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.Runtime.Serialization.SerializationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationException.#ctor(System.String)">
      <summary>用指定的消息初始化 <see cref="T:System.Runtime.Serialization.SerializationException" /> 类的新实例。</summary>
      <param name="message">指出发生异常的原因。</param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息以及对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.Serialization.SerializationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Runtime.Serialization.StreamingContext">
      <summary>描述给定的序列化流的源和目标，并提供一个由调用方定义的附加上下文。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.StreamingContext.Equals(System.Object)">
      <summary>确定两个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 实例是否包含相同的值。</summary>
      <returns>如果指定对象是 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 的实例且等于当前实例的值，则为 true；否则为 false。</returns>
      <param name="obj">与当前实例进行比较的对象。</param>
    </member>
    <member name="M:System.Runtime.Serialization.StreamingContext.GetHashCode">
      <summary>返回该对象的哈希代码。</summary>
      <returns>
        <see cref="T:System.Runtime.Serialization.StreamingContextStates" /> 值，它包含为此 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 进行序列化的源或目标。</returns>
    </member>
    <member name="T:System.Runtime.Versioning.TargetFrameworkAttribute">
      <summary>标识某个特定程序集编译时针对 .NET Framework 的版本。</summary>
    </member>
    <member name="M:System.Runtime.Versioning.TargetFrameworkAttribute.#ctor(System.String)">
      <summary>通过指定一个程序集在生成时针对的 .NET Framework 版本，初始化 <see cref="T:System.Runtime.Versioning.TargetFrameworkAttribute" /> 类的实例。</summary>
      <param name="frameworkName">生成该程序集时针对的 .NET Framework 的版本。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frameworkName" /> 为 null。</exception>
    </member>
    <member name="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkDisplayName">
      <summary>获取生成某个程序集时针对的 .NET Framework 版本的显示名称。</summary>
      <returns>.NET Framework 版本的显示名称。</returns>
    </member>
    <member name="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName">
      <summary>获取编译某个特定程序集时针对的 .NET Framework 版本的名称。</summary>
      <returns>编译该程序集时针对的 .NET Framework 版本的名称。</returns>
    </member>
    <member name="T:System.Security.AllowPartiallyTrustedCallersAttribute">
      <summary>允许部分受信任的代码调用某个程序集。 如果没有此声明，则只有完全受信任的调用方才可以使用该程序集。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.AllowPartiallyTrustedCallersAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Security.SecurityCriticalAttribute">
      <summary>指定代码或程序集执行安全性关键型操作。</summary>
    </member>
    <member name="M:System.Security.SecurityCriticalAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Security.SecurityCriticalAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Security.SecurityException">
      <summary>检测到安全性错误时引发的异常。</summary>
    </member>
    <member name="M:System.Security.SecurityException.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.Security.SecurityException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.Security.SecurityException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Security.SecurityException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.Security.SecurityException.ToString">
      <summary>返回当前 <see cref="T:System.Security.SecurityException" /> 的表示形式。</summary>
      <returns>当前 <see cref="T:System.Security.SecurityException" /> 的字符串表示形式。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="T:System.Security.SecuritySafeCriticalAttribute">
      <summary>将类型或成员标识为安全关键并且可供透明代码安全访问。</summary>
    </member>
    <member name="M:System.Security.SecuritySafeCriticalAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Security.SecuritySafeCriticalAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Security.SecurityTransparentAttribute">
      <summary>指定程序集无法引起特权提升。</summary>
    </member>
    <member name="M:System.Security.SecurityTransparentAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Security.SecurityTransparentAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Security.VerificationException">
      <summary>在以下情况引发的异常：安全策略要求代码为类型安全的代码，并且验证过程无法验证该代码是否为类型安全的代码。</summary>
    </member>
    <member name="M:System.Security.VerificationException.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.Security.VerificationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.VerificationException.#ctor(System.String)">
      <summary>用说明性消息初始化 <see cref="T:System.Security.VerificationException" /> 类的新实例。</summary>
      <param name="message">一条指示异常发生原因的消息。</param>
    </member>
    <member name="M:System.Security.VerificationException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Security.VerificationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Security.Principal.IIdentity">
      <summary>定义标识对象的基本功能。</summary>
    </member>
    <member name="P:System.Security.Principal.IIdentity.AuthenticationType">
      <summary>获取所使用的身份验证的类型。</summary>
      <returns>用于标识用户的身份验证的类型。</returns>
    </member>
    <member name="P:System.Security.Principal.IIdentity.IsAuthenticated">
      <summary>获取一个值，该值指示是否验证了用户。</summary>
      <returns>如果用户已经过验证，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Security.Principal.IIdentity.Name">
      <summary>获取当前用户的名称。</summary>
      <returns>用户名，代码当前即以该用户的名义运行。</returns>
    </member>
    <member name="T:System.Security.Principal.IPrincipal">
      <summary>定义用户对象的基本功能。</summary>
    </member>
    <member name="P:System.Security.Principal.IPrincipal.Identity">
      <summary>获取当前用户的标识。</summary>
      <returns>与当前用户关联的 <see cref="T:System.Security.Principal.IIdentity" /> 对象。</returns>
    </member>
    <member name="M:System.Security.Principal.IPrincipal.IsInRole(System.String)">
      <summary>确定当前用户是否属于指定的角色。</summary>
      <returns>如果当前用户是指定角色的成员，则为 true；否则为 false。</returns>
      <param name="role">要检查其成员资格的角色的名称。</param>
    </member>
    <member name="T:System.Text.Decoder">
      <summary>将一个编码字节序列转换为一组字符。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Decoder.#ctor">
      <summary>初始化 <see cref="T:System.Text.Decoder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <summary>将已编码字节的数组转换为 UTF-16 编码字符，然后将结果存储在字符数组中。</summary>
      <param name="bytes">要转换的字节数组。</param>
      <param name="byteIndex">要转换的 <paramref name="bytes" /> 的第一个元素。</param>
      <param name="byteCount">要转换的 <paramref name="bytes" /> 的元素数。</param>
      <param name="chars">一个数组，存储已转换的字符。</param>
      <param name="charIndex">存储数据的 <paramref name="chars" /> 中的第一个元素。</param>
      <param name="charCount">要用于转换的 <paramref name="chars" /> 中的最大元素数。</param>
      <param name="flush">如果要指示没有要转换的更多数据，则为 true；否则为 false。</param>
      <param name="bytesUsed">此方法在返回时包含用于转换的字节数。 该参数未经初始化即被传递。</param>
      <param name="charsUsed">此方法在返回时包含转换产生的 <paramref name="chars" /> 中的字符数。 该参数未经初始化即被传递。</param>
      <param name="completed">此方法返回时，如果 <paramref name="byteCount" /> 指定的所有字符均已转换，则包含 true；否则包含 false。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 或 <paramref name="bytes" /> 为 null (Nothing)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />、<paramref name="charCount" />、<paramref name="byteIndex" /> 或 <paramref name="byteCount" /> 小于零。 - 或 - <paramref name="chars" /> 的长度。  -<paramref name="charIndex" /> 小于 <paramref name="charCount" />。 - 或 - <paramref name="bytes" /> 的长度。  -<paramref name="byteIndex" /> 小于 <paramref name="byteCount" />。</exception>
      <exception cref="T:System.ArgumentException">输出缓冲区太小，无法包含任何已转换的输入。 输出缓冲区应大于或等于 <see cref="Overload:System.Text.Decoder.GetCharCount" /> 方法指示的大小。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得更详细的解释） －和－ 将 <see cref="P:System.Text.Decoder.Fallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>在派生类中重写时，计算对字节序列（从指定字节数组开始）进行解码所产生的字符数。</summary>
      <returns>对指定的字节序列和内部缓冲区中的任何字节进行解码所产生的字符数。</returns>
      <param name="bytes">包含要解码的字节序列的字节数组。</param>
      <param name="index">第一个要解码的字节的索引。</param>
      <param name="count">要解码的字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 null (Nothing)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。 - 或 - <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得更详细的解释） －和－ 将 <see cref="P:System.Text.Decoder.Fallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>在派生类中重写时，计算对字节序列（从指定字节数组开始）进行解码所产生的字符数。 一个参数，指示计算后是否要清除解码器的内部状态。</summary>
      <returns>对指定的字节序列和内部缓冲区中的任何字节进行解码所产生的字符数。</returns>
      <param name="bytes">包含要解码的字节序列的字节数组。</param>
      <param name="index">第一个要解码的字节的索引。</param>
      <param name="count">要解码的字节数。</param>
      <param name="flush">如果要在计算后模拟编码器内部状态的清除过程，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 null (Nothing)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。 - 或 - <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得更详细的解释） －和－ 将 <see cref="P:System.Text.Decoder.Fallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>在派生类中重写时，将指定字节数组的字节序列和内部缓冲区中的任何字节解码到指定的字符数组。</summary>
      <returns>写入 <paramref name="chars" /> 的实际字符数。</returns>
      <param name="bytes">包含要解码的字节序列的字节数组。</param>
      <param name="byteIndex">第一个要解码的字节的索引。</param>
      <param name="byteCount">要解码的字节数。</param>
      <param name="chars">要用于包含所产生的字符集的字符数组。</param>
      <param name="charIndex">开始写入所产生的字符集的索引位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 null (Nothing)。 - 或 - <paramref name="chars" /> 为 null (Nothing)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小于零。 - 或 - <paramref name="byteindex" /> 和 <paramref name="byteCount" /> 不表示 <paramref name="bytes" /> 中的有效范围。 - 或 - <paramref name="charIndex" /> 不是 <paramref name="chars" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="chars" /> 中从 <paramref name="charIndex" /> 到数组结尾没有足够容量来容纳所产生的字符。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得更详细的解释） －和－ 将 <see cref="P:System.Text.Decoder.Fallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
      <summary>在派生类中重写时，将指定字节数组的字节序列和内部缓冲区中的任何字节解码到指定的字符数组。 一个参数，指示转换后是否要清除解码器的内部状态。</summary>
      <returns>写入 <paramref name="chars" /> 参数的实际字符数。</returns>
      <param name="bytes">包含要解码的字节序列的字节数组。</param>
      <param name="byteIndex">第一个要解码的字节的索引。</param>
      <param name="byteCount">要解码的字节数。</param>
      <param name="chars">要用于包含所产生的字符集的字符数组。</param>
      <param name="charIndex">开始写入所产生的字符集的索引位置。</param>
      <param name="flush">如果要在转换后清除解码器的内部状态，则为 true；否则，为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 null (Nothing)。 - 或 - <paramref name="chars" /> 为 null (Nothing)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小于零。 - 或 - <paramref name="byteindex" /> 和 <paramref name="byteCount" /> 不表示 <paramref name="bytes" /> 中的有效范围。 - 或 - <paramref name="charIndex" /> 不是 <paramref name="chars" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="chars" /> 中从 <paramref name="charIndex" /> 到数组结尾没有足够容量来容纳所产生的字符。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得更详细的解释） －和－ 将 <see cref="P:System.Text.Decoder.Fallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.Decoder.Reset">
      <summary>在派生类中重写时，将解码器设置回它的初始状态。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Text.DecoderFallbackException">
      <summary>解码器回退操作失败时引发的异常。 此类不能被继承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor">
      <summary>初始化 <see cref="T:System.Text.DecoderFallbackException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Text.DecoderFallbackException" /> 类的新实例。 一个参数指定错误信息。</summary>
      <param name="message">错误信息。</param>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor(System.String,System.Byte[],System.Int32)">
      <summary>初始化 <see cref="T:System.Text.DecoderFallbackException" /> 类的新实例。 参数指定错误信息、被解码的字节数组和无法被解码的字节的索引。</summary>
      <param name="message">错误信息。</param>
      <param name="bytesUnknown">输入字节数组。</param>
      <param name="index">无法解码的字节在 <paramref name="bytesUnknown" /> 中的索引位置。</param>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Text.DecoderFallbackException" /> 类的新实例。 参数指定错误信息和导致此异常的内部异常。</summary>
      <param name="message">错误信息。</param>
      <param name="innerException">导致此异常的异常。</param>
    </member>
    <member name="P:System.Text.DecoderFallbackException.BytesUnknown">
      <summary>获取导致异常的输入字节序列。</summary>
      <returns>无法解码的输入字节数组。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.DecoderFallbackException.Index">
      <summary>获取导致异常的字节在输入字节序列中的索引位置。</summary>
      <returns>无法解码的字节在输入字节数组中的索引位置。 索引位置是从零开始的。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Text.Encoder">
      <summary>将一组字符转换为一个字节序列。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoder.#ctor">
      <summary>初始化 <see cref="T:System.Text.Encoder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <summary>将 Unicode 字符数组转换为编码的字节序列并将结果存储在字节数组中。</summary>
      <param name="chars">要转换的字符数组。</param>
      <param name="charIndex">要转换的 <paramref name="chars" /> 的第一个元素。</param>
      <param name="charCount">要转换的 <paramref name="chars" /> 的元素数。</param>
      <param name="bytes">一个数组，其中存储已转换的字节。</param>
      <param name="byteIndex">用来存储数据的 <paramref name="bytes" /> 的第一个元素。</param>
      <param name="byteCount">要用于转换的 <paramref name="bytes" /> 的最大元素数。</param>
      <param name="flush">如果要指示没有要转换的更多数据，则为 true；否则为 false。</param>
      <param name="charsUsed">此方法在返回时包含用于转换的 <paramref name="chars" /> 中的字符数。 该参数未经初始化即被传递。</param>
      <param name="bytesUsed">此方法在返回时包含转换所产生的字节数。 该参数未经初始化即被传递。</param>
      <param name="completed">此方法返回时，如果 <paramref name="charCount" /> 指定的所有字符均已转换，则包含 true；否则包含 false。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 或 <paramref name="bytes" /> 为 null (Nothing)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />、<paramref name="charCount" />、<paramref name="byteIndex" /> 或 <paramref name="byteCount" /> 小于零。 - 或 - <paramref name="chars" /> 的长度。  -<paramref name="charIndex" /> 小于 <paramref name="charCount" />。 - 或 - <paramref name="bytes" /> 的长度。  -<paramref name="byteIndex" /> 小于 <paramref name="byteCount" />。</exception>
      <exception cref="T:System.ArgumentException">输出缓冲区太小，无法包含任何已转换的输入。 输出缓冲区应大于或等于 <see cref="Overload:System.Text.Encoder.GetByteCount" /> 方法指示的大小。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得更详细的解释） －和－ 将 <see cref="P:System.Text.Encoder.Fallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
      <summary>在派生类中重写时，计算对指定字符数组中的一组字符进行编码所产生的字节数。 一个参数指示计算后是否要清除编码器的内部状态。</summary>
      <returns>通过对指定字符和内部缓冲区中的所有字符进行编码而产生的字节数。</returns>
      <param name="chars">包含要编码的字符集的字符数组。</param>
      <param name="index">第一个要编码的字符的索引。</param>
      <param name="count">要编码的字符的数目。</param>
      <param name="flush">如果要在计算后模拟编码器内部状态的清除过程，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。 - 或 - <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="chars" /> 中的有效范围。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得更详细的解释） －和－ 将 <see cref="P:System.Text.Encoder.Fallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
      <summary>在派生类中重写时，将指定字符数组中的一组字符和内部缓冲区中的任何字符编码到指定的字节数组中。 一个参数指示转换后是否清除编码器的内部状态。</summary>
      <returns>写入 <paramref name="bytes" /> 的实际字节数。</returns>
      <param name="chars">包含要编码的字符集的字符数组。</param>
      <param name="charIndex">第一个要编码的字符的索引。</param>
      <param name="charCount">要编码的字符的数目。</param>
      <param name="bytes">要包含所产生的字节序列的字节数组。</param>
      <param name="byteIndex">开始写入所产生的字节序列的索引位置。</param>
      <param name="flush">如果要在转换后清除编码器的内部状态，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 为 null (Nothing)。 - 或 - <paramref name="bytes" /> 为 null (Nothing)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。 - 或 - <paramref name="charIndex" /> 和 <paramref name="charCount" /> 不表示 <paramref name="chars" /> 中的有效范围。 - 或 - <paramref name="byteIndex" /> 不是 <paramref name="bytes" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bytes" /> 中从 <paramref name="byteIndex" /> 到数组结尾没有足够的容量来容纳所产生的字节。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得更详细的解释） －和－ 将 <see cref="P:System.Text.Encoder.Fallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Text.EncoderFallbackException">
      <summary>编码器回退操作失败时引发的异常。 此类不能被继承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.EncoderFallbackException.#ctor">
      <summary>初始化 <see cref="T:System.Text.EncoderFallbackException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.EncoderFallbackException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Text.EncoderFallbackException" /> 类的新实例。 一个参数指定错误信息。</summary>
      <param name="message">错误信息。</param>
    </member>
    <member name="M:System.Text.EncoderFallbackException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Text.EncoderFallbackException" /> 类的新实例。 参数指定错误信息和导致此异常的内部异常。</summary>
      <param name="message">错误信息。</param>
      <param name="innerException">导致此异常的异常。</param>
    </member>
    <member name="P:System.Text.EncoderFallbackException.CharUnknown">
      <summary>获取导致异常的输入字符。</summary>
      <returns>无法编码的字符。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.EncoderFallbackException.CharUnknownHigh">
      <summary>获取导致异常的代理项对的高组件字符。</summary>
      <returns>无法编码的代理项对的高组件字符。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.EncoderFallbackException.CharUnknownLow">
      <summary>获取导致异常的代理项对的低组件字符。</summary>
      <returns>无法编码的代理项对的低组件字符。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.EncoderFallbackException.Index">
      <summary>获取导致异常的字符在输入缓冲区中的索引位置。</summary>
      <returns>无法编码的字符在输入缓冲区中的索引位置。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Text.Encoding">
      <summary>表示字符编码。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.#ctor">
      <summary>初始化 <see cref="T:System.Text.Encoding" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Text.Encoding.BigEndianUnicode">
      <summary>获取使用 Big Endian 字节顺序的 UTF-16 格式的编码。</summary>
      <returns>获取使用 Big Endian 字节顺序的 UTF-16 格式的编码对象。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
      <summary>将整个字节数组从一种编码转换为另一种编码。</summary>
      <returns>
        <see cref="T:System.Byte" /> 类型的数组包含将 <paramref name="bytes" /> 从 <paramref name="srcEncoding" /> 转换为 <paramref name="dstEncoding" /> 的结果。</returns>
      <param name="srcEncoding">
        <paramref name="bytes" /> 的编码格式。</param>
      <param name="dstEncoding">目标编码格式。</param>
      <param name="bytes">要转换的字节。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="srcEncoding" /> 为 null。 - 或 - <paramref name="dstEncoding" /> 为 null。 - 或 - <paramref name="bytes" /> 为 null。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得完整的解释） －和－ srcEncoding.<see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得完整的解释） －和－ dstEncoding.<see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
      <summary>将字节数组内某个范围的字节从一种编码转换为另一种编码。</summary>
      <returns>
        <see cref="T:System.Byte" /> 类型的数组包含将 <paramref name="bytes" /> 中某个范围的字节从 <paramref name="srcEncoding" /> 转换为 <paramref name="dstEncoding" /> 的结果。</returns>
      <param name="srcEncoding">源数组 <paramref name="bytes" /> 的编码。</param>
      <param name="dstEncoding">输出数组的编码。</param>
      <param name="bytes">要转换的字节数组。</param>
      <param name="index">要转换的 <paramref name="bytes" /> 中第一个元素的索引。</param>
      <param name="count">要转换的字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="srcEncoding" /> 为 null。 - 或 - <paramref name="dstEncoding" /> 为 null。 - 或 - <paramref name="bytes" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 和 <paramref name="count" /> 不指定字节数组中的有效范围。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得完整的解释） －和－ srcEncoding.<see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得完整的解释） －和－ dstEncoding.<see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 是否等于当前实例。</summary>
      <returns>如果 <paramref name="value" /> 是 <see cref="T:System.Text.Encoding" /> 的一个实例并且等于当前实例，则为 true；否则，为 false。</returns>
      <param name="value">与当前实例进行比较的 <see cref="T:System.Object" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.Char[])">
      <summary>在派生类中重写时，计算对指定字符数组中的所有字符进行编码所产生的字节数。</summary>
      <returns>对指定字符数组中的所有字符进行编码后产生的字节数。</returns>
      <param name="chars">包含要编码的字符的字符数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 为 null。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得完整的解释） －和－ 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
      <summary>在派生类中重写时，计算对指定字符数组中的一组字符进行编码所产生的字节数。</summary>
      <returns>对指定字符进行编码后生成的字节数。</returns>
      <param name="chars">包含要编码的字符集的字符数组。</param>
      <param name="index">第一个要编码的字符的索引。</param>
      <param name="count">要编码的字符的数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。 - 或 - <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="chars" /> 中的有效范围。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得完整的解释） －和－ 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.String)">
      <summary>在派生类中重写时，计算对指定字符串中的字符进行编码所产生的字节数。</summary>
      <returns>对指定字符进行编码后生成的字节数。</returns>
      <param name="s">包含要编码的字符集的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得完整的解释） －和－ 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char[])">
      <summary>在派生类中重写时，将指定字符数组中的所有字符编码为一个字节序列。</summary>
      <returns>一个字节数组，包含对指定的字符集进行编码的结果。</returns>
      <param name="chars">包含要编码的字符的字符数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 为 null。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得完整的解释） －和－ 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
      <summary>在派生类中重写时，将指定字符数组中的一组字符编码为一个字节序列。</summary>
      <returns>一个字节数组，包含对指定的字符集进行编码的结果。</returns>
      <param name="chars">包含要编码的字符集的字符数组。</param>
      <param name="index">第一个要编码的字符的索引。</param>
      <param name="count">要编码的字符的数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。 - 或 - <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="chars" /> 中的有效范围。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得完整的解释） －和－ 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>在派生类中重写时，将指定字符数组中的一组字符编码为指定的字节数组。</summary>
      <returns>写入 <paramref name="bytes" /> 的实际字节数。</returns>
      <param name="chars">包含要编码的字符集的字符数组。</param>
      <param name="charIndex">第一个要编码的字符的索引。</param>
      <param name="charCount">要编码的字符的数目。</param>
      <param name="bytes">要包含所产生的字节序列的字节数组。</param>
      <param name="byteIndex">开始写入所产生的字节序列的索引位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 为 null。 - 或 - <paramref name="bytes" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。 - 或 - <paramref name="charIndex" /> 和 <paramref name="charCount" /> 不表示 <paramref name="chars" /> 中的有效范围。 - 或 - <paramref name="byteIndex" /> 不是 <paramref name="bytes" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bytes" /> 中从 <paramref name="byteIndex" /> 到数组结尾没有足够的容量来容纳所产生的字节。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得完整的解释） －和－ 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.String)">
      <summary>在派生类中重写时，将指定字符串中的所有字符编码为一个字节序列。</summary>
      <returns>一个字节数组，包含对指定的字符集进行编码的结果。</returns>
      <param name="s">包含要编码的字符的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得完整的解释） －和－ 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>在派生类中重写时，将指定字符串中的一组字符编码为指定的字节数组。</summary>
      <returns>写入 <paramref name="bytes" /> 的实际字节数。</returns>
      <param name="s">包含要编码的字符集的字符串。</param>
      <param name="charIndex">第一个要编码的字符的索引。</param>
      <param name="charCount">要编码的字符的数目。</param>
      <param name="bytes">要包含所产生的字节序列的字节数组。</param>
      <param name="byteIndex">开始写入所产生的字节序列的索引位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。 - 或 - <paramref name="bytes" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。 - 或 - <paramref name="charIndex" /> 和 <paramref name="charCount" /> 不表示 <paramref name="chars" /> 中的有效范围。 - 或 - <paramref name="byteIndex" /> 不是 <paramref name="bytes" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bytes" /> 中从 <paramref name="byteIndex" /> 到数组结尾没有足够的容量来容纳所产生的字节。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得完整的解释） －和－ 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetCharCount(System.Byte[])">
      <summary>在派生类中重写时，计算对指定字节数组中的所有字节进行解码所产生的字符数。</summary>
      <returns>对指定字节序列进行解码所产生的字符数。</returns>
      <param name="bytes">包含要解码的字节序列的字节数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 null。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得完整的解释） －和－ 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>在派生类中重写时，计算对字节序列（从指定字节数组开始）进行解码所产生的字符数。</summary>
      <returns>对指定字节序列进行解码所产生的字符数。</returns>
      <param name="bytes">包含要解码的字节序列的字节数组。</param>
      <param name="index">第一个要解码的字节的索引。</param>
      <param name="count">要解码的字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。 - 或 - <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得完整的解释） －和－ 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte[])">
      <summary>在派生类中重写时，将指定字节数组中的所有字节解码为一组字符。</summary>
      <returns>一个字节数组，包含对指定的字节序列进行解码的结果。</returns>
      <param name="bytes">包含要解码的字节序列的字节数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 null。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得完整的解释） －和－ 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
      <summary>在派生类中重写时，将指定字节数组中的一个字节序列解码为一组字符。</summary>
      <returns>一个字节数组，包含对指定的字节序列进行解码的结果。</returns>
      <param name="bytes">包含要解码的字节序列的字节数组。</param>
      <param name="index">第一个要解码的字节的索引。</param>
      <param name="count">要解码的字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。 - 或 - <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得完整的解释） －和－ 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>在派生类中重写时，将指定字节数组中的字节序列解码为指定的字符数组。</summary>
      <returns>写入 <paramref name="chars" /> 的实际字符数。</returns>
      <param name="bytes">包含要解码的字节序列的字节数组。</param>
      <param name="byteIndex">第一个要解码的字节的索引。</param>
      <param name="byteCount">要解码的字节数。</param>
      <param name="chars">要用于包含所产生的字符集的字符数组。</param>
      <param name="charIndex">开始写入所产生的字符集的索引位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 null。 - 或 - <paramref name="chars" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小于零。 - 或 - <paramref name="byteindex" /> 和 <paramref name="byteCount" /> 不表示 <paramref name="bytes" /> 中的有效范围。 - 或 - <paramref name="charIndex" /> 不是 <paramref name="chars" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="chars" /> 中从 <paramref name="charIndex" /> 到数组结尾没有足够容量来容纳所产生的字符。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得完整的解释） －和－ 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetDecoder">
      <summary>在派生类中重写时，获取一个解码器，该解码器将已编码的字节序列转换为字符序列。</summary>
      <returns>一个 <see cref="T:System.Text.Decoder" />，它将已编码的字节序列转换为字符序列。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetEncoder">
      <summary>在派生类中重写时，获取一个解码器，该解码器将 Unicode 字符序列转换为已编码的字节序列。</summary>
      <returns>一个 <see cref="T:System.Text.Encoder" />，它将 Unicode 字符序列转换为已编码的字节序列。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetEncoding(System.String)">
      <summary>返回与指定代码页名称关联的编码。</summary>
      <returns>与指定代码页相关的编码对象。</returns>
      <param name="name">首选编码的代码页名称。 <see cref="P:System.Text.Encoding.WebName" /> 属性返回的值是有效的。 可能的值都在 <see cref="T:System.Text.Encoding" /> 类主题中出现的表的“名称”一列中列了出来。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 不是有效的代码页名称。 - 或 - 基础平台不支持 <paramref name="name" /> 所指示的代码页。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetHashCode">
      <summary>返回当前实例的哈希代码。</summary>
      <returns>当前实例的哈希代码。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
      <summary>在派生类中重写时，计算对指定数目的字符进行编码所产生的最大字节数。</summary>
      <returns>对指定数目的字符进行编码所产生的最大字节数。</returns>
      <param name="charCount">要编码的字符的数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> 小于零。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得完整的解释） －和－ 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
      <summary>在派生类中重写时，计算对指定数目的字节进行解码时所产生的最大字符数。</summary>
      <returns>对指定数目的字节进行解码时所产生的最大字符数。</returns>
      <param name="byteCount">要解码的字节数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> 小于零。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得完整的解释） －和－ 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetPreamble">
      <summary>在派生类中重写时，返回指定所用编码的字节序列。</summary>
      <returns>一个字节数组，包含指定所用编码的字节序列。 - 或 - 长度为零的字节数组（如果不需要前导码）。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
      <summary>在派生类中重写时，将指定字节数组中的一个字节序列解码为一个字符串。</summary>
      <returns>包含指定字节序列解码结果的字符串。</returns>
      <param name="bytes">包含要解码的字节序列的字节数组。</param>
      <param name="index">第一个要解码的字节的索引。</param>
      <param name="count">要解码的字节数。</param>
      <exception cref="T:System.ArgumentException">字节数组中包含无效的 Unicode 码位。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。 - 或 - <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得完整的解释） －和－ 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.Encoding.Unicode">
      <summary>获取使用 Little-Endian 字节顺序的 UTF-16 格式的编码。</summary>
      <returns>使用 Little-Endian 字节顺序的 UTF-16 格式的编码。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.Encoding.UTF8">
      <summary>获取 UTF-8 格式的编码。</summary>
      <returns>UTF-8 格式的编码。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.Encoding.WebName">
      <summary>在派生类中重写时，获取在 Internet 编号分配管理机构 (IANA) 注册的当前编码的名称。</summary>
      <returns>当前 <see cref="T:System.Text.Encoding" /> 的 IANA 名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Text.StringBuilder">
      <summary>表示可变字符字符串。 此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Text.StringBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.Int32)">
      <summary>使用指定的容量初始化 <see cref="T:System.Text.StringBuilder" /> 类的新实例。</summary>
      <param name="capacity">此实例的建议起始大小。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Text.StringBuilder" /> 类的新实例，该类起始于指定容量并且可增长到指定的最大容量。</summary>
      <param name="capacity">
        <see cref="T:System.Text.StringBuilder" /> 的建议起始大小。</param>
      <param name="maxCapacity">当前字符串可包含的最大字符数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxCapacity" /> 小于一，<paramref name="capacity" /> 小于零，或 <paramref name="capacity" /> 大于 <paramref name="maxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Text.StringBuilder" /> 类的新实例。</summary>
      <param name="value">用于初始化实例值的字符串。 如果 <paramref name="value" /> 为 null，则新的 <see cref="T:System.Text.StringBuilder" /> 将包含空字符串（即包含 <see cref="F:System.String.Empty" />）。</param>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32)">
      <summary>使用指定的字符串和容量初始化 <see cref="T:System.Text.StringBuilder" /> 类的新实例。</summary>
      <param name="value">用于初始化实例值的字符串。 如果 <paramref name="value" /> 为 null，则新的 <see cref="T:System.Text.StringBuilder" /> 将包含空字符串（即包含 <see cref="F:System.String.Empty" />）。</param>
      <param name="capacity">
        <see cref="T:System.Text.StringBuilder" /> 的建议起始大小。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>用指定的子字符串和容量初始化 <see cref="T:System.Text.StringBuilder" /> 类的新实例。</summary>
      <param name="value">字符串，包含用于初始化此实例值的子字符串。 如果 <paramref name="value" /> 为 null，则新的 <see cref="T:System.Text.StringBuilder" /> 将包含空字符串（即包含 <see cref="F:System.String.Empty" />）。</param>
      <param name="startIndex">
        <paramref name="value" /> 中子字符串开始的位置。</param>
      <param name="length">子字符串中的字符数。</param>
      <param name="capacity">
        <see cref="T:System.Text.StringBuilder" /> 的建议起始大小。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。 - 或 - <paramref name="startIndex" /> 加上 <paramref name="length" /> 不是 <paramref name="value" /> 中的位置。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Boolean)">
      <summary>在此实例追加指定的布尔值的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的布尔值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Byte)">
      <summary>在此实例追加指定的 8 位无符号整数的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char)">
      <summary>在此实例追加指定 Unicode 字符的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的 Unicode 字符。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char,System.Int32)">
      <summary>在此实例追加 Unicode 字符的字符串表示形式指定数目的副本。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的字符。</param>
      <param name="repeatCount">追加 <paramref name="value" /> 的次数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="repeatCount" /> 小于零。 - 或 - 增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <exception cref="T:System.OutOfMemoryException">内存不足。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char[])">
      <summary>在此实例追加指定数组中的 Unicode 字符的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的字符数组。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)">
      <summary>在此实例追加指定的 Unicode 字符子数组的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">字符数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 中的起始位置。</param>
      <param name="charCount">要追加的字符数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null，并且 <paramref name="startIndex" /> 和 <paramref name="charCount" /> 不为零。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> 小于零。 - 或 - <paramref name="startIndex" /> 小于零。 - 或 - <paramref name="startIndex" /> + <paramref name="charCount" /> 大于 <paramref name="value" /> 的长度。 - 或 - 增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Decimal)">
      <summary>在此实例追加指定的十进制数的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Double)">
      <summary>在此实例追加指定的双精度浮点数的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int16)">
      <summary>在此实例追加指定的 16 位有符号整数的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int32)">
      <summary>在此实例追加指定的 32 位有符号整数的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int64)">
      <summary>在此实例追加指定的 64 位有符号整数的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Object)">
      <summary>在此实例追加指定对象的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.SByte)">
      <summary>在此实例追加指定的 8 位有符号整数的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Single)">
      <summary>在此实例追加指定的单精度浮点数的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.String)">
      <summary>在此实例追加指定字符串的副本。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的字符串。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)">
      <summary>在此实例追加指定子字符串的副本。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">包含要追加的子字符串的字符串。</param>
      <param name="startIndex">
        <paramref name="value" /> 中子字符串开始的位置。</param>
      <param name="count">
        <paramref name="value" /> 中要追加的字符数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null，并且 <paramref name="startIndex" /> 和 <paramref name="count" /> 不为零。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小于零。 - 或 - <paramref name="startIndex" /> 小于零。 - 或 - <paramref name="startIndex" /> + <paramref name="count" /> 大于 <paramref name="value" /> 的长度。 - 或 - 增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt16)">
      <summary>在此实例追加指定的 16 位无符号整数的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt32)">
      <summary>在此实例追加指定的 32 位无符号整数的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt64)">
      <summary>在此实例追加指定的 64 位无符号整数的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>向此实例追加通过处理组合格式字符串（包含零个或更多格式项）而返回的字符串。 每个格式项都使用指定的格式提供程序由参数数组中相应参数的字符串表示形式替换。</summary>
      <returns>完成追加操作后对此实例的引用。 完成追加操作后，此实例包含执行该操作之前已存在的任何数据，并且有一个 <paramref name="format" /> 的副本作为后缀，其中任何格式规范都由相应对象参数的字符串表示形式替换。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <param name="format">符合格式字符串（参见“备注”）。</param>
      <param name="args">要设置其格式的对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。 - 或 - 格式项的索引小于 0（零）或大于等于 <paramref name="args" /> 数组的长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">扩展字符串的长度将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])">
      <summary>向此实例追加通过处理组合格式字符串（包含零个或更多格式项）而返回的字符串。 每个格式项都由参数数组中相应参数的字符串表示形式替换。</summary>
      <returns>对追加了 <paramref name="format" /> 的此实例的引用。 <paramref name="format" /> 中的每个格式项都由相应的对象参数的字符串表示形式替换。</returns>
      <param name="format">符合格式字符串（参见“备注”）。</param>
      <param name="args">要设置其格式的对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 或 <paramref name="args" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。 - 或 - 格式项的索引小于 0（零）或大于等于 <paramref name="args" /> 数组的长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">扩展字符串的长度将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendLine">
      <summary>将默认的行终止符追加到当前 <see cref="T:System.Text.StringBuilder" /> 对象的末尾。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendLine(System.String)">
      <summary>将后面跟有默认行终止符的指定字符串的副本追加到当前 <see cref="T:System.Text.StringBuilder" /> 对象的末尾。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的字符串。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.StringBuilder.Capacity">
      <summary>获取或设置可包含在当前实例所分配的内存中的最大字符数。</summary>
      <returns>可包含在当前实例所分配的内存中的最大字符数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">为设置操作指定的值小于此实例的当前长度。 - 或 - 为设置操作指定的值大于最大容量。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.StringBuilder.Chars(System.Int32)">
      <summary>获取或设置此实例中指定字符位置处的字符。</summary>
      <returns>
        <paramref name="index" /> 位置处的 Unicode 字符。</returns>
      <param name="index">字符的位置。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">在设置一个字符时 <paramref name="index" /> 在此实例的范围之外。</exception>
      <exception cref="T:System.IndexOutOfRangeException">在获取一个字符时 <paramref name="index" /> 在此实例的范围之外。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Clear">
      <summary>从当前 <see cref="T:System.Text.StringBuilder" /> 实例中移除所有字符。</summary>
      <returns>其 <see cref="P:System.Text.StringBuilder.Length" /> 为 0（零）的对象。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>将此实例的指定段中的字符复制到目标 <see cref="T:System.Char" /> 数组的指定段中。</summary>
      <param name="sourceIndex">此实例中开始复制字符的位置。 索引是从零开始的。</param>
      <param name="destination">将从中复制字符的数组。</param>
      <param name="destinationIndex">
        <paramref name="destination" /> 中将从其开始复制字符的起始位置。 索引是从零开始的。</param>
      <param name="count">要复制的字符数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" />、<paramref name="destinationIndex" /> 或 <paramref name="count" />，小于零。 - 或 - <paramref name="sourceIndex" /> 大于此实例的长度。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceIndex" /> + <paramref name="count" /> 大于此实例的长度。 - 或 - <paramref name="destinationIndex" /> + <paramref name="count" /> 大于 <paramref name="destination" /> 的长度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.EnsureCapacity(System.Int32)">
      <summary>确保 <see cref="T:System.Text.StringBuilder" /> 的此实例的容量至少是指定值。</summary>
      <returns>此实例的新容量。</returns>
      <param name="capacity">要确保的最小容量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。 - 或 - 增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Equals(System.Text.StringBuilder)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果此实例和 <paramref name="sb" /> 具有相等的字符串、<see cref="P:System.Text.StringBuilder.Capacity" /> 和 <see cref="P:System.Text.StringBuilder.MaxCapacity" /> 值，则为 true；否则，为 false。</returns>
      <param name="sb">与此实例进行比较的 object，或 null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Boolean)">
      <summary>将布尔值的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Byte)">
      <summary>将指定的 8 位无符号整数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char)">
      <summary>将指定的 Unicode 字符的字符串表示形式插入到此实例中的指定位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。 - 或 - 增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[])">
      <summary>将指定的 Unicode 字符数组的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的字符数组。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。 - 或 - 增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>将指定的 Unicode 字符子数组的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">字符数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始索引。</param>
      <param name="charCount">要插入的字符数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null，并且 <paramref name="startIndex" /> 和 <paramref name="charCount" /> 不为零。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />、<paramref name="startIndex" /> 或 <paramref name="charCount" /> 小于零。 - 或 - <paramref name="index" /> 大于此实例的长度。 - 或 - <paramref name="startIndex" /> 加上 <paramref name="charCount" /> 不是 <paramref name="value" /> 中的位置。 - 或 - 增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Decimal)">
      <summary>将十进制数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Double)">
      <summary>将双精度浮点数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int16)">
      <summary>将指定的 16 位带符号整数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int32)">
      <summary>将指定的 32 位带符号整数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int64)">
      <summary>将 64 位带符号整数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Object)">
      <summary>将对象的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的对象或 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.SByte)">
      <summary>将指定的 8 位带符号整数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Single)">
      <summary>将单精度浮点数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String)">
      <summary>将字符串插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的字符串。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的当前长度。 - 或 - 此 <see cref="T:System.Text.StringBuilder" /> 对象的当前长度加上 <paramref name="value" /> 的长度超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)">
      <summary>将指定字符串的一个或更多副本插入到此实例中的指定字符位置。</summary>
      <returns>完成插入后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的字符串。</param>
      <param name="count">插入 <paramref name="value" /> 的次数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的当前长度。 - 或 - <paramref name="count" /> 小于零。</exception>
      <exception cref="T:System.OutOfMemoryException">此 <see cref="T:System.Text.StringBuilder" /> 对象的当前长度加上 <paramref name="value" /> 的长度乘以 <paramref name="count" /> 的值超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt16)">
      <summary>将 16 位无符号整数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt32)">
      <summary>将 32 位无符号整数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt64)">
      <summary>将 64 位无符号整数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.StringBuilder.Length">
      <summary>获取或设置当前 <see cref="T:System.Text.StringBuilder" /> 对象的长度。</summary>
      <returns>此实例的长度。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">为设置操作指定的值小于零或大于 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.StringBuilder.MaxCapacity">
      <summary>获取此实例的最大容量。</summary>
      <returns>此实例可容纳的最大字符数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)">
      <summary>将指定范围的字符从此实例中移除。</summary>
      <returns>切除操作完成后对此实例的引用。</returns>
      <param name="startIndex">此实例中开始移除操作的从零开始的位置。</param>
      <param name="length">要移除的字符数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">如果 <paramref name="startIndex" /> 或 <paramref name="length" /> 小于零，或者 <paramref name="startIndex" />+<paramref name="length" /> 大于此实例的长度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char)">
      <summary>将此实例中所有的指定字符替换为其他指定字符。</summary>
      <returns>对此实例的引用，其中 <paramref name="oldChar" /> 被 <paramref name="newChar" /> 替换。</returns>
      <param name="oldChar">要替换的字符。</param>
      <param name="newChar">替换 <paramref name="oldChar" /> 的字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)">
      <summary>将此实例的子字符串中所有指定字符的匹配项替换为其他指定字符。</summary>
      <returns>对此实例的引用，其中从 <paramref name="startIndex" /> 到 <paramref name="startIndex" /> + <paramref name="count" /> -1 范围内的 <paramref name="oldChar" /> 被 <paramref name="newChar" /> 替换。</returns>
      <param name="oldChar">要替换的字符。</param>
      <param name="newChar">替换 <paramref name="oldChar" /> 的字符。</param>
      <param name="startIndex">此实例中子字符串开始的位置。</param>
      <param name="count">子字符串的长度。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" />+<paramref name="count" /> 大于此实例值的长度。 - 或 - <paramref name="startIndex" /> 或 <paramref name="count" /> 小于零。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.String,System.String)">
      <summary>将此实例中所有指定字符串的匹配项替换为其他指定字符串。</summary>
      <returns>对此实例的引用，其中 <paramref name="oldValue" /> 的所有实例被 <paramref name="newValue" /> 替换。</returns>
      <param name="oldValue">要替换的字符串。</param>
      <param name="newValue">替换 <paramref name="oldValue" /> 的字符串或 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> 的长度为零。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>将此实例的子字符串中所有指定字符串的匹配项替换为其他指定字符串。</summary>
      <returns>对此实例的引用，其中从 <paramref name="startIndex" /> 到 <paramref name="startIndex" />+<paramref name="count" />- 1 的范围内 <paramref name="oldValue" /> 的所有实例被 <paramref name="newValue" /> 替换。</returns>
      <param name="oldValue">要替换的字符串。</param>
      <param name="newValue">替换 <paramref name="oldValue" /> 的字符串或 null。</param>
      <param name="startIndex">此实例中子字符串开始的位置。</param>
      <param name="count">子字符串的长度。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> 的长度为零。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="count" /> 小于零。 - 或 - <paramref name="startIndex" /> 与 <paramref name="count" /> 之和指示一个不在此实例内的字符位置。 - 或 - 增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.ToString">
      <summary>将此实例的值转换为 <see cref="T:System.String" />。</summary>
      <returns>其值与此实例相同的字符串。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.ToString(System.Int32,System.Int32)">
      <summary>将此实例中子字符串的值转换为 <see cref="T:System.String" />。</summary>
      <returns>一个字符串，其值与此实例的指定子字符串相同。</returns>
      <param name="startIndex">此实例内子字符串的起始位置。</param>
      <param name="length">子字符串的长度。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 小于零。 - 或 - <paramref name="startIndex" /> 与 <paramref name="length" /> 的和大于当前实例的长度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Text.UnicodeEncoding">
      <summary>表示 Unicode 字符的 UTF-16 编码。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.#ctor">
      <summary>初始化 <see cref="T:System.Text.UnicodeEncoding" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)">
      <summary>初始化 <see cref="T:System.Text.UnicodeEncoding" /> 类的新实例。 参数指定是否使用 Big-Endian 字节顺序以及是否提供 Unicode 字节顺序标记。</summary>
      <param name="bigEndian">如果为 true，则使用 big-endian 字节顺序（从最高有效字节开始）；如果为 false，则使用 little-endian 字节顺序（从最低有效字节开始）。</param>
      <param name="byteOrderMark">如果为 true，则指定提供 Unicode 字节顺序标记；否则为 false。</param>
    </member>
    <member name="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>初始化 <see cref="T:System.Text.UnicodeEncoding" /> 类的新实例。 参数指定是否使用 Big-Endian 字节顺序，是否提供 Unicode 字节顺序标记，以及当检测到无效编码时是否引发异常。</summary>
      <param name="bigEndian">如果为 true，则使用 Big-Endian 字节顺序（从最高有效字节开始）；如果为 false，则使用 Little-Endian 字节顺序（从最低有效字节开始）。</param>
      <param name="byteOrderMark">如果为 true，则指定提供 Unicode 字节顺序标记；否则为 false。</param>
      <param name="throwOnInvalidBytes">如果为 true，则指定在检测到无效的编码时应当引发异常；否则为 false。</param>
    </member>
    <member name="M:System.Text.UnicodeEncoding.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 是否等于当前的 <see cref="T:System.Text.UnicodeEncoding" /> 对象。</summary>
      <returns>如果 <paramref name="value" /> 是 <see cref="T:System.Text.UnicodeEncoding" /> 的一个实例并且等于当前对象，则为 true；否则，为 false。</returns>
      <param name="value">将与当前对象进行比较的 <see cref="T:System.Object" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
      <summary>计算对指定字符数组中的一组字符进行编码时产生的字节数。</summary>
      <returns>对指定字符进行编码后生成的字节数。</returns>
      <param name="chars">包含要编码的字符集的字符数组。</param>
      <param name="index">第一个要编码的字符的索引。</param>
      <param name="count">要编码的字符的数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 为 null (Nothing)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。 - 或 - <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="chars" /> 中的有效范围。 - 或 - 产生的字节数超过了作为一个整数返回时允许的最大字节数。</exception>
      <exception cref="T:System.ArgumentException">启用了错误检测，检测到 <paramref name="chars" /> 包含无效字符序列。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得更详细的解释） －和－ 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
      <summary>计算对指定 <see cref="T:System.String" /> 中的字符进行编码时所产生的字节数。</summary>
      <returns>对指定字符进行编码后生成的字节数。</returns>
      <param name="s">包含要编码的字符集的 <see cref="T:System.String" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null (Nothing)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">产生的字节数超过了作为一个整数返回时允许的最大字节数。</exception>
      <exception cref="T:System.ArgumentException">启用了错误检测，检测到 <paramref name="s" /> 包含无效字符序列。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得更详细的解释） －和－ 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>将指定字符数组中的一组字符编码到指定的字节数组中。</summary>
      <returns>写入 <paramref name="bytes" /> 的实际字节数。</returns>
      <param name="chars">包含要编码的字符集的字符数组。</param>
      <param name="charIndex">第一个要编码的字符的索引。</param>
      <param name="charCount">要编码的字符的数目。</param>
      <param name="bytes">要包含所产生的字节序列的字节数组。</param>
      <param name="byteIndex">开始写入所产生的字节序列的索引位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 为 null (Nothing)。 - 或 - <paramref name="bytes" /> 为 null (Nothing)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。 - 或 - <paramref name="charIndex" /> 和 <paramref name="charCount" /> 不表示 <paramref name="chars" /> 中的有效范围。 - 或 - <paramref name="byteIndex" /> 不是 <paramref name="bytes" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">启用了错误检测，检测到 <paramref name="chars" /> 包含无效字符序列。 - 或 - <paramref name="bytes" /> 中从 <paramref name="byteIndex" /> 到数组结尾没有足够的容量来容纳所产生的字节。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得更详细的解释） －和－ 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>将指定 <see cref="T:System.String" /> 中的一组字符编码到指定的字节数组中。</summary>
      <returns>写入 <paramref name="bytes" /> 的实际字节数。</returns>
      <param name="s">包含要编码的字符集的 <see cref="T:System.String" />。</param>
      <param name="charIndex">第一个要编码的字符的索引。</param>
      <param name="charCount">要编码的字符的数目。</param>
      <param name="bytes">要包含所产生的字节序列的字节数组。</param>
      <param name="byteIndex">开始写入所产生的字节序列的索引位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null (Nothing)。 - 或 - <paramref name="bytes" /> 为 null (Nothing)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。 - 或 - <paramref name="charIndex" /> 和 <paramref name="charCount" /> 不表示 <paramref name="chars" /> 中的有效范围。 - 或 - <paramref name="byteIndex" /> 不是 <paramref name="bytes" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">启用了错误检测，检测到 <paramref name="s" /> 包含无效字符序列。 - 或 - <paramref name="bytes" /> 中从 <paramref name="byteIndex" /> 到数组结尾没有足够的容量来容纳所产生的字节。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得更详细的解释） －和－ 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>计算对指定字节数组中的一个字节序列进行解码所产生的字符数。</summary>
      <returns>对指定字节序列进行解码所产生的字符数。</returns>
      <param name="bytes">包含要解码的字节序列的字节数组。</param>
      <param name="index">第一个要解码的字节的索引。</param>
      <param name="count">要解码的字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 null (Nothing)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。 - 或 - <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。 - 或 - 产生的字节数超过了作为一个整数返回时允许的最大字节数。</exception>
      <exception cref="T:System.ArgumentException">启用了错误检测，检测到 <paramref name="bytes" /> 包含无效字节序列。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得更详细的解释） －和－ 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>将指定字节数组中的一个字节序列解码为指定的字符数组。</summary>
      <returns>写入 <paramref name="chars" /> 的实际字符数。</returns>
      <param name="bytes">包含要解码的字节序列的字节数组。</param>
      <param name="byteIndex">第一个要解码的字节的索引。</param>
      <param name="byteCount">要解码的字节数。</param>
      <param name="chars">要用于包含所产生的字符集的字符数组。</param>
      <param name="charIndex">开始写入所产生的字符集的索引位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 null (Nothing)。 - 或 - <paramref name="chars" /> 为 null (Nothing)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小于零。 - 或 - <paramref name="byteindex" /> 和 <paramref name="byteCount" /> 不表示 <paramref name="bytes" /> 中的有效范围。 - 或 - <paramref name="charIndex" /> 不是 <paramref name="chars" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">启用了错误检测，检测到 <paramref name="bytes" /> 包含无效字节序列。 - 或 - <paramref name="chars" /> 中从 <paramref name="charIndex" /> 到数组结尾没有足够容量来容纳所产生的字符。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得更详细的解释） －和－ 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetDecoder">
      <summary>获取可以将 UTF-16 编码的字节序列转换为 Unicode 字符序列的解码器。</summary>
      <returns>一个 <see cref="T:System.Text.Decoder" />，用于将 UTF-16 编码的字节序列转换为 Unicode 字符序列。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetEncoder">
      <summary>获取可将 Unicode 字符序列转换为 UTF-16 编码的字节序列的编码器。</summary>
      <returns>将 Unicode 字符序列转换为 UTF-16 编码字节序列的 <see cref="T:System.Text.Encoder" /> 对象。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetHashCode">
      <summary>返回当前实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.Text.UnicodeEncoding" /> 对象的哈希代码。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
      <summary>计算对指定数目的字符进行编码时产生的最大字节数。</summary>
      <returns>对指定数目的字符进行编码所产生的最大字节数。</returns>
      <param name="charCount">要编码的字符的数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> 小于零。 - 或 - 产生的字节数超过了作为一个整数返回时允许的最大字节数。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得更详细的解释） －和－ 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
      <summary>计算对指定数目的字节进行解码时产生的最大字符数。</summary>
      <returns>对指定数目的字节进行解码时所产生的最大字符数。</returns>
      <param name="byteCount">要解码的字节数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> 小于零。 - 或 - 产生的字节数超过了作为一个整数返回时允许的最大字节数。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得更详细的解释） －和－ 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetPreamble">
      <summary>如果此实例的构造函数请求一个字节顺序标记，则将返回用 UTF-16 格式编码的 Unicode 字节顺序标记。</summary>
      <returns>如果此实例的构造函数请求一个字节顺序标记，则将返回一个包含 Unicode 字节顺序标记的字节数组。 否则，此方法将返回一个长度零的字节数组。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
      <summary>将字节数组中某个范围的字节解码为一个字符串。</summary>
      <returns>包含指定字节序列解码结果的 <see cref="T:System.String" /> 对象。</returns>
      <param name="bytes">包含要解码的字节序列的字节数组。</param>
      <param name="index">第一个要解码的字节的索引。</param>
      <param name="count">要解码的字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 null (Nothing)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。 - 或 - <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</exception>
      <exception cref="T:System.ArgumentException">启用了错误检测，检测到 <paramref name="bytes" /> 包含无效字节序列。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得更详细的解释） －和－ 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Text.UTF8Encoding">
      <summary>表示 Unicode 字符的 UTF-8 编码。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.#ctor">
      <summary>初始化 <see cref="T:System.Text.UTF8Encoding" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.UTF8Encoding.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Text.UTF8Encoding" /> 类的新实例。 参数指定是否提供一个 Unicode 字节顺序标记。</summary>
      <param name="encoderShouldEmitUTF8Identifier">如果为 true，则指定提供 Unicode 字节顺序标记；否则为 false。</param>
    </member>
    <member name="M:System.Text.UTF8Encoding.#ctor(System.Boolean,System.Boolean)">
      <summary>初始化 <see cref="T:System.Text.UTF8Encoding" /> 类的新实例。 参数指定是否提供 Unicode 字节顺序标记，以及是否在检测到无效的编码时引发异常。</summary>
      <param name="encoderShouldEmitUTF8Identifier">如果为 true，则指定提供 Unicode 字节顺序标记；否则为 false。</param>
      <param name="throwOnInvalidBytes">true 则指定在检测到无效的编码时引发异常；否则为 false。</param>
    </member>
    <member name="M:System.Text.UTF8Encoding.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 是否等于当前的 <see cref="T:System.Text.UTF8Encoding" /> 对象。</summary>
      <returns>如果 <paramref name="value" /> 是 <see cref="T:System.Text.UTF8Encoding" /> 的一个实例并且等于当前对象，则为 true；否则，为 false。</returns>
      <param name="value">与当前实例进行比较的 <see cref="T:System.Object" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
      <summary>计算对指定字符数组中的一组字符进行编码时产生的字节数。</summary>
      <returns>对指定字符进行编码后生成的字节数。</returns>
      <param name="chars">包含要编码的字符集的字符数组。</param>
      <param name="index">第一个要编码的字符的索引。</param>
      <param name="count">要编码的字符的数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。 - 或 - <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="chars" /> 中的有效范围。 - 或 - 产生的字节数超过了作为一个整数返回时允许的最大字节数。</exception>
      <exception cref="T:System.ArgumentException">启用了错误检测，检测到 <paramref name="chars" /> 包含无效字符序列。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得完整的解释） －和－ 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetByteCount(System.String)">
      <summary>计算对指定 <see cref="T:System.String" /> 中的字符进行编码时所产生的字节数。</summary>
      <returns>对指定字符进行编码后生成的字节数。</returns>
      <param name="chars">包含要编码的字符集的 <see cref="T:System.String" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">产生的字节数超过了作为一个整数返回时允许的最大字节数。</exception>
      <exception cref="T:System.ArgumentException">启用了错误检测，检测到 <paramref name="chars" /> 包含无效字符序列。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得完整的解释） －和－ 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>将指定字符数组中的一组字符编码到指定的字节数组中。</summary>
      <returns>写入 <paramref name="bytes" /> 的实际字节数。</returns>
      <param name="chars">包含要编码的字符集的字符数组。</param>
      <param name="charIndex">第一个要编码的字符的索引。</param>
      <param name="charCount">要编码的字符的数目。</param>
      <param name="bytes">要包含所产生的字节序列的字节数组。</param>
      <param name="byteIndex">开始写入所产生的字节序列的索引位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 为 null。 - 或 - <paramref name="bytes" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。 - 或 - <paramref name="charIndex" /> 和 <paramref name="charCount" /> 不表示 <paramref name="chars" /> 中的有效范围。 - 或 - <paramref name="byteIndex" /> 不是 <paramref name="bytes" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">启用了错误检测，检测到 <paramref name="chars" /> 包含无效字符序列。 - 或 - <paramref name="bytes" /> 中从 <paramref name="byteIndex" /> 到数组结尾没有足够的容量来容纳所产生的字节。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得完整的解释） －和－ 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>将指定 <see cref="T:System.String" /> 中的一组字符编码到指定的字节数组中。</summary>
      <returns>写入 <paramref name="bytes" /> 的实际字节数。</returns>
      <param name="s">包含要编码的字符集的 <see cref="T:System.String" />。</param>
      <param name="charIndex">第一个要编码的字符的索引。</param>
      <param name="charCount">要编码的字符的数目。</param>
      <param name="bytes">要包含所产生的字节序列的字节数组。</param>
      <param name="byteIndex">开始写入所产生的字节序列的索引位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。 - 或 - <paramref name="bytes" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。 - 或 - <paramref name="charIndex" /> 和 <paramref name="charCount" /> 不表示 <paramref name="chars" /> 中的有效范围。 - 或 - <paramref name="byteIndex" /> 不是 <paramref name="bytes" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">启用了错误检测，检测到 <paramref name="s" /> 包含无效字符序列。 - 或 - <paramref name="bytes" /> 中从 <paramref name="byteIndex" /> 到数组结尾没有足够的容量来容纳所产生的字节。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得完整的解释） －和－ 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>计算对指定字节数组中的一个字节序列进行解码所产生的字符数。</summary>
      <returns>对指定字节序列进行解码所产生的字符数。</returns>
      <param name="bytes">包含要解码的字节序列的字节数组。</param>
      <param name="index">第一个要解码的字节的索引。</param>
      <param name="count">要解码的字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。 - 或 - <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。 - 或 - 产生的字节数超过了作为一个整数返回时允许的最大字节数。</exception>
      <exception cref="T:System.ArgumentException">启用了错误检测，检测到 <paramref name="bytes" /> 包含无效字节序列。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得完整的解释） －和－ 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>将指定字节数组中的一个字节序列解码为指定的字符数组。</summary>
      <returns>写入 <paramref name="chars" /> 的实际字符数。</returns>
      <param name="bytes">包含要解码的字节序列的字节数组。</param>
      <param name="byteIndex">第一个要解码的字节的索引。</param>
      <param name="byteCount">要解码的字节数。</param>
      <param name="chars">要用于包含所产生的字符集的字符数组。</param>
      <param name="charIndex">开始写入所产生的字符集的索引位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 null。 - 或 - <paramref name="chars" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小于零。 - 或 - <paramref name="byteindex" /> 和 <paramref name="byteCount" /> 不表示 <paramref name="bytes" /> 中的有效范围。 - 或 - <paramref name="charIndex" /> 不是 <paramref name="chars" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">启用了错误检测，检测到 <paramref name="bytes" /> 包含无效字节序列。 - 或 - <paramref name="chars" /> 中从 <paramref name="charIndex" /> 到数组结尾没有足够容量来容纳所产生的字符。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得完整的解释） －和－ 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetDecoder">
      <summary>获取可以将 UTF-8 编码的字节序列转换为 Unicode 字符序列的解码器。</summary>
      <returns>
        <see cref="T:System.Text.Decoder" /> 用于将 UTF-8 编码的字节序列转换为 Unicode 字符序列。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetEncoder">
      <summary>获取可将 Unicode 字符序列转换为 UTF-8 编码的字节序列的编码器。</summary>
      <returns>一个 <see cref="T:System.Text.Encoder" />，用于将 Unicode 字符序列转换为 UTF-8 编码的字节序列。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetHashCode">
      <summary>返回当前实例的哈希代码。</summary>
      <returns>当前实例的哈希代码。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)">
      <summary>计算对指定数目的字符进行编码时产生的最大字节数。</summary>
      <returns>对指定数目的字符进行编码所产生的最大字节数。</returns>
      <param name="charCount">要编码的字符的数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> 小于零。 - 或 - 产生的字节数超过了作为一个整数返回时允许的最大字节数。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得完整的解释） －和－ 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)">
      <summary>计算对指定数目的字节进行解码时产生的最大字符数。</summary>
      <returns>对指定数目的字节进行解码时所产生的最大字符数。</returns>
      <param name="byteCount">要解码的字节数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> 小于零。 - 或 - 产生的字节数超过了作为一个整数返回时允许的最大字节数。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得完整的解释） －和－ 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetPreamble">
      <summary>如果此实例的构造函数请求一个字节顺序标记，则将返回用 UTF-8 格式编码的 Unicode 字节顺序标记。</summary>
      <returns>如果此实例的构造函数请求一个字节顺序标记，则将返回一个包含 Unicode 字节顺序标记的字节数组。 否则，此方法将返回一个长度零的字节数组。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
      <summary>将字节数组中某个范围的字节解码为一个字符串。</summary>
      <returns>包含指定字节序列解码结果的 <see cref="T:System.String" />。</returns>
      <param name="bytes">包含要解码的字节序列的字节数组。</param>
      <param name="index">第一个要解码的字节的索引。</param>
      <param name="count">要解码的字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。 - 或 - <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</exception>
      <exception cref="T:System.ArgumentException">启用了错误检测，检测到 <paramref name="bytes" /> 包含无效字节序列。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生回退（请参见.NET Framework 中的字符编码以获得完整的解释） －和－ 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Threading.AbandonedMutexException">
      <summary>当某个线程获取由另一个线程放弃（即在未释放的情况下退出）的 <see cref="T:System.Threading.Mutex" /> 对象时引发的异常。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.AbandonedMutexException.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.Threading.AbandonedMutexException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Threading.AbandonedMutexException.#ctor(System.Int32,System.Threading.WaitHandle)">
      <summary>用被放弃的互斥体的指定索引（如果可用）和表示该互斥体的 <see cref="T:System.Threading.Mutex" /> 对象初始化 <see cref="T:System.Threading.AbandonedMutexException" /> 类的新实例。</summary>
      <param name="location">如果对 <see cref="Overload:System.Threading.WaitHandle.WaitAny" /> 方法引发异常，则为等待句柄数组中被放弃的互斥体的索引，如果对 <see cref="Overload:System.Threading.WaitHandle.WaitOne" /> 或 <see cref="Overload:System.Threading.WaitHandle.WaitAll" /> 方法引发异常，则为 –1。</param>
      <param name="handle">一个 <see cref="T:System.Threading.Mutex" /> 对象，表示被放弃的互斥体。</param>
    </member>
    <member name="M:System.Threading.AbandonedMutexException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.Threading.AbandonedMutexException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
    </member>
    <member name="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception)">
      <summary>用指定的错误信息和内部异常初始化 <see cref="T:System.Threading.AbandonedMutexException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception,System.Int32,System.Threading.WaitHandle)">
      <summary>用指定的错误信息、内部异常、被放弃的互斥体的索引（如果可用）以及表示该互斥体的 <see cref="T:System.Threading.Mutex" /> 对象初始化 <see cref="T:System.Threading.AbandonedMutexException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
      <param name="location">如果对 <see cref="Overload:System.Threading.WaitHandle.WaitAny" /> 方法引发异常，则为等待句柄数组中被放弃的互斥体的索引，如果对 <see cref="Overload:System.Threading.WaitHandle.WaitOne" /> 或 <see cref="Overload:System.Threading.WaitHandle.WaitAll" /> 方法引发异常，则为 –1。</param>
      <param name="handle">一个 <see cref="T:System.Threading.Mutex" /> 对象，表示被放弃的互斥体。</param>
    </member>
    <member name="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Int32,System.Threading.WaitHandle)">
      <summary>用指定的错误信息、被放弃的互斥体的索引（如果可用）以及被放弃的互斥体初始化 <see cref="T:System.Threading.AbandonedMutexException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="location">如果对 <see cref="Overload:System.Threading.WaitHandle.WaitAny" /> 方法引发异常，则为等待句柄数组中被放弃的互斥体的索引，如果对 <see cref="Overload:System.Threading.WaitHandle.WaitOne" /> 或 <see cref="Overload:System.Threading.WaitHandle.WaitAll" /> 方法引发异常，则为 –1。</param>
      <param name="handle">一个 <see cref="T:System.Threading.Mutex" /> 对象，表示被放弃的互斥体。</param>
    </member>
    <member name="P:System.Threading.AbandonedMutexException.Mutex">
      <summary>获取导致异常的被放弃的互斥体（如果已知的话）。</summary>
      <returns>如果未能识别被放弃的互斥体，则为表示该被放弃的互斥体的 <see cref="T:System.Threading.Mutex" /> 对象或 null。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Threading.AbandonedMutexException.MutexIndex">
      <summary>获取导致异常的被放弃的互斥体的索引（如果已知的话）。</summary>
      <returns>如果未能确定被放弃的互斥体的索引，则为传递给 <see cref="Overload:System.Threading.WaitHandle.WaitAny" /> 方法的等待句柄数组中的索引、表示该被放弃的互斥体的 <see cref="T:System.Threading.Mutex" /> 对象的索引或 –1。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Threading.AutoResetEvent">
      <summary>通知正在等待的线程已发生事件。 此类不能被继承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
      <summary>用一个指示是否将初始状态设置为终止的布尔值初始化 <see cref="T:System.Threading.AutoResetEvent" /> 类的新实例。</summary>
      <param name="initialState">若要将初始状态设置为终止，则为 true；若要将初始状态设置为非终止，则为 false。</param>
    </member>
    <member name="T:System.Threading.CancellationToken">
      <summary>传播有关应取消操作的通知。</summary>
    </member>
    <member name="M:System.Threading.CancellationToken.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <param name="canceled">标记的已取消状态。</param>
    </member>
    <member name="P:System.Threading.CancellationToken.CanBeCanceled">
      <summary>获取此标记是否能处于已取消状态。</summary>
      <returns>如果此标记能处于已取消状态，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Threading.CancellationToken.Equals(System.Object)">
      <summary>确定当前 <see cref="T:System.Threading.CancellationToken" /> 实例是否与指定 <see cref="T:System.Object" /> 相等。</summary>
      <returns>如果 <paramref name="other" /> 为 <see cref="T:System.Threading.CancellationToken" /> 并且两个实例相等，则为 true；否则为 false。 如果两个标记与同一 <see cref="T:System.Threading.CancellationTokenSource" /> 关联，或者它们均是根据公共 CancellationToken 构造函数构造并且其 <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> 值相等，则两个标记相等。</returns>
      <param name="other">要与此实例进行比较的其他对象。</param>
      <exception cref="T:System.ObjectDisposedException">已释放关联的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)">
      <summary>确定当前 <see cref="T:System.Threading.CancellationToken" /> 实例是否与指定标记相等。</summary>
      <returns>如果实例相等，则为 true；否则为 false。 如果两个标记与同一 <see cref="T:System.Threading.CancellationTokenSource" /> 关联，或者它们均是根据公共 CancellationToken 构造函数构造并且其 <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> 值相等，则两个标记相等。</returns>
      <param name="other">要与此实例进行比较的其他 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Threading.CancellationToken.GetHashCode">
      <summary>作为 <see cref="T:System.Threading.CancellationToken" /> 的哈希函数。</summary>
      <returns>当前 <see cref="T:System.Threading.CancellationToken" /> 实例的哈希代码。</returns>
    </member>
    <member name="P:System.Threading.CancellationToken.IsCancellationRequested">
      <summary>获取是否已请求取消此标记。</summary>
      <returns>如果已请求取消此标记，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Threading.CancellationToken.None">
      <summary>返回空 CancellationToken 值。</summary>
      <returns>返回空 CancellationToken 值。</returns>
    </member>
    <member name="M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
      <summary>确定两个 <see cref="T:System.Threading.CancellationToken" /> 实例是否相等。</summary>
      <returns>如果实例相等，则为 true；否则为 false。</returns>
      <param name="left">第一个实例。</param>
      <param name="right">第二个实例。</param>
      <exception cref="T:System.ObjectDisposedException">已释放关联的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
      <summary>确定两个 <see cref="T:System.Threading.CancellationToken" /> 实例是否不相等。</summary>
      <returns>如果实例不相等，则为 true；否则为 false。</returns>
      <param name="left">第一个实例。</param>
      <param name="right">第二个实例。</param>
      <exception cref="T:System.ObjectDisposedException">已释放关联的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action)">
      <summary>注册一个将在取消此 <see cref="T:System.Threading.CancellationToken" /> 时调用的委托。</summary>
      <returns>可用于取消注册回调的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 实例。</returns>
      <param name="callback">要在取消 <see cref="T:System.Threading.CancellationToken" /> 时执行的委托。</param>
      <exception cref="T:System.ObjectDisposedException">关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 为 null。</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)">
      <summary>注册一个将在取消此 <see cref="T:System.Threading.CancellationToken" /> 时调用的委托。</summary>
      <returns>可用于取消注册回调的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 实例。</returns>
      <param name="callback">要在取消 <see cref="T:System.Threading.CancellationToken" /> 时执行的委托。</param>
      <param name="useSynchronizationContext">一个布尔值，该值指示是否捕获当前 <see cref="T:System.Threading.SynchronizationContext" /> 并在调用 <paramref name="callback" /> 时使用它。</param>
      <exception cref="T:System.ObjectDisposedException">关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 为 null。</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)">
      <summary>注册一个将在取消此 <see cref="T:System.Threading.CancellationToken" /> 时调用的委托。</summary>
      <returns>可用于取消注册回调的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 实例。</returns>
      <param name="callback">要在取消 <see cref="T:System.Threading.CancellationToken" /> 时执行的委托。</param>
      <param name="state">要在调用委托时传递给 <paramref name="callback" /> 的状态。 这可能为 null。</param>
      <exception cref="T:System.ObjectDisposedException">关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 为 null。</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)">
      <summary>注册一个将在取消此 <see cref="T:System.Threading.CancellationToken" /> 时调用的委托。</summary>
      <returns>可用于取消注册回调的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 实例。</returns>
      <param name="callback">要在取消 <see cref="T:System.Threading.CancellationToken" /> 时执行的委托。</param>
      <param name="state">要在调用委托时传递给 <paramref name="callback" /> 的状态。 这可能为 null。</param>
      <param name="useSynchronizationContext">一个布尔值，该值指示是否捕获当前 <see cref="T:System.Threading.SynchronizationContext" /> 并在调用 <paramref name="callback" /> 时使用它。</param>
      <exception cref="T:System.ObjectDisposedException">关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 为 null。</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.ThrowIfCancellationRequested">
      <summary>如果已请求取消此标记，则引发 <see cref="T:System.OperationCanceledException" />。</summary>
      <exception cref="T:System.OperationCanceledException">该标记已请求取消。</exception>
      <exception cref="T:System.ObjectDisposedException">关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
    </member>
    <member name="P:System.Threading.CancellationToken.WaitHandle">
      <summary>获取在取消标记时处于有信号状态的 <see cref="T:System.Threading.WaitHandle" />。</summary>
      <returns>在取消标记时处于有信号状态的 <see cref="T:System.Threading.WaitHandle" />。</returns>
      <exception cref="T:System.ObjectDisposedException">关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
    </member>
    <member name="T:System.Threading.CancellationTokenRegistration">
      <summary>表示已向 <see cref="T:System.Threading.CancellationToken" /> 注册的回调委托。</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.Dispose">
      <summary>释放由 <see cref="T:System.Threading.CancellationTokenRegistration" /> 类的当前实例占用的所有资源。</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.Equals(System.Object)">
      <summary>确定当前 <see cref="T:System.Threading.CancellationTokenRegistration" /> 实例是否与指定 <see cref="T:System.Threading.CancellationTokenRegistration" /> 相等。</summary>
      <returns>如果此实例和 <paramref name="obj" /> 相等，则为 true。 否则为 false。 如果两个 <see cref="T:System.Threading.CancellationTokenRegistration" /> 实例均引用对相同 <see cref="T:System.Threading.CancellationToken" /> Register 方法的单一调用的输出，则这两个实例相等。</returns>
      <param name="obj">要与此实例进行比较的其他对象。</param>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.Equals(System.Threading.CancellationTokenRegistration)">
      <summary>确定当前 <see cref="T:System.Threading.CancellationTokenRegistration" /> 实例是否与指定 <see cref="T:System.Threading.CancellationTokenRegistration" /> 相等。</summary>
      <returns>如果此实例和 <paramref name="other" /> 相等，则为 true。 否则为 false。  如果两个 <see cref="T:System.Threading.CancellationTokenRegistration" /> 实例均引用对相同 <see cref="T:System.Threading.CancellationToken" /> Register 方法的单一调用的输出，则这两个实例相等。</returns>
      <param name="other">要与此实例进行比较的其他 <see cref="T:System.Threading.CancellationTokenRegistration" />。</param>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.GetHashCode">
      <summary>作为 <see cref="T:System.Threading.CancellationTokenRegistration" /> 的哈希函数。</summary>
      <returns>当前 <see cref="T:System.Threading.CancellationTokenRegistration" /> 实例的哈希代码。</returns>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.op_Equality(System.Threading.CancellationTokenRegistration,System.Threading.CancellationTokenRegistration)">
      <summary>确定两个 <see cref="T:System.Threading.CancellationTokenRegistration" /> 实例是否相等。</summary>
      <returns>如果实例相等，则为 true；否则为 false。</returns>
      <param name="left">第一个实例。</param>
      <param name="right">第二个实例。</param>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.op_Inequality(System.Threading.CancellationTokenRegistration,System.Threading.CancellationTokenRegistration)">
      <summary>确定两个 <see cref="T:System.Threading.CancellationTokenRegistration" /> 实例是否不相等。</summary>
      <returns>如果实例不相等，则为 true；否则为 false。</returns>
      <param name="left">第一个实例。</param>
      <param name="right">第二个实例。</param>
    </member>
    <member name="T:System.Threading.CancellationTokenSource">
      <summary>通知 <see cref="T:System.Threading.CancellationToken" />，告知其应被取消。</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor">
      <summary>初始化 <see cref="T:System.Threading.CancellationTokenSource" />。</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Cancel">
      <summary>传达取消请求。</summary>
      <exception cref="T:System.ObjectDisposedException">此 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.AggregateException">聚合异常包含由相关联的 <see cref="T:System.Threading.CancellationToken" /> 上已注册的回调引发的所有异常。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
      <summary>传达取消请求。</summary>
      <param name="throwOnFirstException">指定异常是否应立即传播。</param>
      <exception cref="T:System.ObjectDisposedException">此 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.AggregateException">聚合异常包含由相关联的 <see cref="T:System.Threading.CancellationToken" /> 上已注册的回调引发的所有异常。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
      <summary>创建一个将在任何源标记处于取消状态时处于取消状态的 <see cref="T:System.Threading.CancellationTokenSource" />。</summary>
      <returns>一个链接到源标记的 <see cref="T:System.Threading.CancellationTokenSource" />。</returns>
      <param name="token1">要观察的第一个 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="token2">要观察的第二个 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">与源标记之一关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentException">如果任何标记无法取消，它们将不被链接。 返回的源是可以取消的。 - 或 - 如果任何标记已被取消，那么链接的标记将返回“已取消”状态。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
      <summary>创建一个将在任何源标记处于取消状态时处于取消状态的 <see cref="T:System.Threading.CancellationTokenSource" />。</summary>
      <returns>一个链接到源标记的 <see cref="T:System.Threading.CancellationTokenSource" />。</returns>
      <param name="tokens">要观察的 <see cref="T:System.Threading.CancellationToken" /> 实例。</param>
      <exception cref="T:System.ObjectDisposedException">与源标记之一关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokens" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">如果任何标记无法取消，它们将不被链接。 返回的源是可以取消的。 - 或 - 如果任何标记已被取消，那么链接的标记将返回“已取消”状态。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Dispose">
      <summary>释放由 <see cref="T:System.Threading.CancellationTokenSource" /> 类的当前实例占用的所有资源。</summary>
    </member>
    <member name="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
      <summary>获取是否已请求取消此 <see cref="T:System.Threading.CancellationTokenSource" />。</summary>
      <returns>是否已请求取消此 <see cref="T:System.Threading.CancellationTokenSource" />。</returns>
    </member>
    <member name="P:System.Threading.CancellationTokenSource.Token">
      <summary>获取与此 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <returns>与此 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放标记源。</exception>
    </member>
    <member name="T:System.Threading.CountdownEvent">
      <summary>表示在计数变为零时处于有信号状态的同步基元。</summary>
    </member>
    <member name="M:System.Threading.CountdownEvent.#ctor(System.Int32)">
      <summary>使用指定计数初始化 <see cref="T:System.Threading.CountdownEvent" /> 类的新实例。</summary>
      <param name="initialCount">设置 <see cref="T:System.Threading.CountdownEvent" /> 时最初必需的信号数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="initialCount" /> 小于 0。</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.AddCount">
      <summary>将 <see cref="T:System.Threading.CountdownEvent" /> 的当前计数加 1。</summary>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">当前实例已设置 。 - 或 - <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> 等于或大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.AddCount(System.Int32)">
      <summary>将 <see cref="T:System.Threading.CountdownEvent" /> 的当前计数增加指定值。</summary>
      <param name="signalCount">
        <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> 的增量值。</param>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signalCount" /> 小于或等于零。</exception>
      <exception cref="T:System.InvalidOperationException">当前实例已设置 。 - 或 - 在计数由 <paramref name="signalCount." /> 递增后，<see cref="P:System.Threading.CountdownEvent.CurrentCount" /> 大于或等于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="P:System.Threading.CountdownEvent.CurrentCount">
      <summary>获取设置事件时所必需的剩余信号数。</summary>
      <returns>设置事件时所必需的剩余信号数。</returns>
    </member>
    <member name="M:System.Threading.CountdownEvent.Dispose">
      <summary>释放由 <see cref="T:System.Threading.CountdownEvent" /> 类的当前实例占用的所有资源。</summary>
    </member>
    <member name="M:System.Threading.CountdownEvent.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Threading.CountdownEvent" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">如果为 true，则同时释放托管资源和非托管资源；如果为 false，则仅释放非托管资源。</param>
    </member>
    <member name="P:System.Threading.CountdownEvent.InitialCount">
      <summary>获取设置事件时最初必需的信号数。</summary>
      <returns>设置事件时最初必需的信号数。</returns>
    </member>
    <member name="P:System.Threading.CountdownEvent.IsSet">
      <summary>确定是否设置了事件。</summary>
      <returns>如果设置了事件，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Threading.CountdownEvent.Reset">
      <summary>将 <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> 重置为 <see cref="P:System.Threading.CountdownEvent.InitialCount" /> 的值。</summary>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Reset(System.Int32)">
      <summary>将 <see cref="P:System.Threading.CountdownEvent.InitialCount" /> 属性重新设置为指定值。</summary>
      <param name="count">设置 <see cref="T:System.Threading.CountdownEvent" /> 时所必需的信号的数量。</param>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小于 0。</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Signal">
      <summary>向 <see cref="T:System.Threading.CountdownEvent" /> 注册信号，同时减小 <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> 的值。</summary>
      <returns>如果信号导致计数变为零并且设置了事件，则为 true；否则为 false。</returns>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">当前实例已设置 。</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Signal(System.Int32)">
      <summary>向 <see cref="T:System.Threading.CountdownEvent" /> 注册多个信号，同时将 <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> 的值减少指定数量。</summary>
      <returns>如果信号导致计数变为零并且设置了事件，则为 true；否则为 false。</returns>
      <param name="signalCount">要注册的信号的数量。</param>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signalCount" /> 小于 1。</exception>
      <exception cref="T:System.InvalidOperationException">当前实例已设置 。 - 或 - <paramref name="signalCount" /> 大于 <see cref="P:System.Threading.CountdownEvent.CurrentCount" />。</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.TryAddCount">
      <summary>增加一个 <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> 的尝试。</summary>
      <returns>如果成功增加，则为 true；否则为 false。 如果 <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> 已为零，则此方法将返回 false。</returns>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> 等于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.TryAddCount(System.Int32)">
      <summary>增加指定值的 <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> 的尝试。</summary>
      <returns>如果成功增加，则为 true；否则为 false。 如果 <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> 已为零，则此方法将返回 false。</returns>
      <param name="signalCount">
        <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> 的增量值。</param>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signalCount" /> 小于或等于零。</exception>
      <exception cref="T:System.InvalidOperationException">当前实例已设置 。 - 或 - <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> + <paramref name="signalCount" /> 大于等于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Wait">
      <summary>阻止当前线程，直到设置了 <see cref="T:System.Threading.CountdownEvent" /> 为止。</summary>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Wait(System.Int32)">
      <summary>阻止当前线程，直到设置了 <see cref="T:System.Threading.CountdownEvent" /> 为止，同时使用 32 位带符号整数测量超时。</summary>
      <returns>如果设置了 <see cref="T:System.Threading.CountdownEvent" />，则为 true；否则为 false。</returns>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Wait(System.Int32,System.Threading.CancellationToken)">
      <summary>阻止当前线程，直到设置了 <see cref="T:System.Threading.CountdownEvent" /> 为止，并使用 32 位带符号整数测量超时，同时观察 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <returns>如果设置了 <see cref="T:System.Threading.CountdownEvent" />，则为 true；否则为 false。</returns>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <param name="cancellationToken">要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。 - 或 - 创建 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Wait(System.Threading.CancellationToken)">
      <summary>阻止当前线程，直到设置了 <see cref="T:System.Threading.CountdownEvent" /> 为止，同时观察 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <param name="cancellationToken">要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。 - 或 - 创建 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Wait(System.TimeSpan)">
      <summary>阻止当前线程，直到设置了 <see cref="T:System.Threading.CountdownEvent" /> 为止，同时使用 <see cref="T:System.TimeSpan" /> 测量超时。</summary>
      <returns>如果设置了 <see cref="T:System.Threading.CountdownEvent" />，则为 true；否则为 false。</returns>
      <param name="timeout">表示等待的毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是 -1 毫秒之外的负数，表示无限超时或者超时大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Wait(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>阻止当前线程，直到设置了 <see cref="T:System.Threading.CountdownEvent" /> 为止，并使用 <see cref="T:System.TimeSpan" /> 测量超时，同时观察 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <returns>如果设置了 <see cref="T:System.Threading.CountdownEvent" />，则为 true；否则为 false。</returns>
      <param name="timeout">表示等待的毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <param name="cancellationToken">要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。 - 或 - 创建 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是 -1 毫秒之外的负数，表示无限超时或者超时大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="P:System.Threading.CountdownEvent.WaitHandle">
      <summary>获取用于等待要设置的事件的 <see cref="T:System.Threading.WaitHandle" />。</summary>
      <returns>用于等待要设置的事件的 <see cref="T:System.Threading.WaitHandle" />。</returns>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
    </member>
    <member name="T:System.Threading.EventResetMode">
      <summary>指示在接收信号后是自动重置 <see cref="T:System.Threading.EventWaitHandle" /> 还是手动重置。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Threading.EventResetMode.AutoReset">
      <summary>当终止时，<see cref="T:System.Threading.EventWaitHandle" /> 在释放一个线程后自动重置。 如果没有等待的线程，<see cref="T:System.Threading.EventWaitHandle" /> 将保持终止状态直到一个线程阻止，并在释放此线程后重置。</summary>
    </member>
    <member name="F:System.Threading.EventResetMode.ManualReset">
      <summary>当终止时，<see cref="T:System.Threading.EventWaitHandle" /> 释放所有等待的线程，并在手动重置前保持终止状态。</summary>
    </member>
    <member name="T:System.Threading.EventWaitHandle">
      <summary>表示一个线程同步事件。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode)">
      <summary>初始化 <see cref="T:System.Threading.EventWaitHandle" /> 类的新实例，并指定等待句柄最初是否处于终止状态，以及它是自动重置还是手动重置。</summary>
      <param name="initialState">如果为 true，则将初始状态设置为终止；如果为 false，则将初始状态设置为非终止。</param>
      <param name="mode">
        <see cref="T:System.Threading.EventResetMode" /> 值之一，它确定事件是自动重置还是手动重置。</param>
    </member>
    <member name="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)">
      <summary>初始化 <see cref="T:System.Threading.EventWaitHandle" /> 类的新实例，并指定在此调用后创建的等待句柄最初是否处于终止状态，它是自动重置还是手动重置，以及系统同步事件的名称。</summary>
      <param name="initialState">如果命名事件是通过此调用创建的，则 true 将初始状态设置为终止；false 将初始状态设置为非终止。</param>
      <param name="mode">
        <see cref="T:System.Threading.EventResetMode" /> 值之一，它确定事件是自动重置还是手动重置。</param>
      <param name="name">系统范围内同步事件的名称。</param>
      <exception cref="T:System.IO.IOException">发生了一个 Win32 错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">命名事件存在并具有访问控制安全性，但用户不具有 <see cref="F:System.Security.AccessControl.EventWaitHandleRights.FullControl" />。</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">无法创建命名事件，原因可能是与另一个不同类型的等待句柄同名。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的长度超过 260 个字符。</exception>
    </member>
    <member name="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)">
      <summary>初始化 <see cref="T:System.Threading.EventWaitHandle" /> 类的新实例，并指定在此调用后创建的等待句柄最初是否处于终止状态，它是自动重置还是手动重置，系统同步事件的名称，以及一个 Boolean 变量（其值在调用后表示是否创建了已命名的系统事件）。</summary>
      <param name="initialState">如果命名事件是通过此调用创建的，则 true 将初始状态设置为终止；false 将初始状态设置为非终止。</param>
      <param name="mode">
        <see cref="T:System.Threading.EventResetMode" /> 值之一，它确定事件是自动重置还是手动重置。</param>
      <param name="name">系统范围内同步事件的名称。</param>
      <param name="createdNew">在此方法返回时，如果创建了本地事件（即，如果 <paramref name="name" /> 为 null 或空字符串）或指定的命名系统事件，则包含 true；如果指定的命名系统事件已存在，则为 false。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.IO.IOException">发生了一个 Win32 错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">命名事件存在并具有访问控制安全性，但用户不具有 <see cref="F:System.Security.AccessControl.EventWaitHandleRights.FullControl" />。</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">无法创建命名事件，原因可能是与另一个不同类型的等待句柄同名。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的长度超过 260 个字符。</exception>
    </member>
    <member name="M:System.Threading.EventWaitHandle.OpenExisting(System.String)">
      <summary>打开指定名称为同步事件（如果已经存在）。</summary>
      <returns>一个对象，表示已命名的系统事件。</returns>
      <param name="name">要打开的系统同步事件的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 是空字符串。 - 或 - <paramref name="name" /> 的长度超过 260 个字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">命名的系统事件不存在。</exception>
      <exception cref="T:System.IO.IOException">发生了一个 Win32 错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">已命名的事件存在，但用户不具备使用它所需的安全访问权限。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Threading.EventWaitHandle.Reset">
      <summary>将事件状态设置为非终止状态，导致线程阻止。</summary>
      <returns>如果该操作成功，则为 true；否则，为 false。</returns>
      <exception cref="T:System.ObjectDisposedException">对此 <see cref="T:System.Threading.EventWaitHandle" /> 之前已调用 <see cref="M:System.Threading.EventWaitHandle.Close" /> 方法。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.EventWaitHandle.Set">
      <summary>将事件状态设置为终止状态，允许一个或多个等待线程继续。</summary>
      <returns>如果该操作成功，则为 true；否则，为 false。</returns>
      <exception cref="T:System.ObjectDisposedException">对此 <see cref="T:System.Threading.EventWaitHandle" /> 之前已调用 <see cref="M:System.Threading.EventWaitHandle.Close" /> 方法。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Threading.Interlocked">
      <summary>为多个线程共享的变量提供原子操作。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.Add(System.Int32@,System.Int32)">
      <summary>对两个 32 位整数进行求和并用和替换第一个整数，上述操作作为一个原子操作完成。</summary>
      <returns>存储在 <paramref name="location1" /> 处的新值。</returns>
      <param name="location1">一个变量，包含要添加的第一个值。 两个值的和存储在 <paramref name="location1" /> 中。</param>
      <param name="value">要添加到整数中的 <paramref name="location1" /> 位置的值。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="location1" /> 的地址为空指针。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.Add(System.Int64@,System.Int64)">
      <summary>对两个 64 位整数进行求和并用和替换第一个整数，上述操作作为一个原子操作完成。</summary>
      <returns>存储在 <paramref name="location1" /> 处的新值。</returns>
      <param name="location1">一个变量，包含要添加的第一个值。 两个值的和存储在 <paramref name="location1" /> 中。</param>
      <param name="value">要添加到整数中的 <paramref name="location1" /> 位置的值。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="location1" /> 的地址为空指针。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)">
      <summary>比较两个双精度浮点数是否相等，如果相等，则替换其中一个值。</summary>
      <returns>
        <paramref name="location1" /> 中的原始值。</returns>
      <param name="location1">其值将与 <paramref name="comparand" /> 进行比较并且可能被替换的目标。</param>
      <param name="value">比较结果相等时替换目标值的值。</param>
      <param name="comparand">与位于 <paramref name="location1" /> 处的值进行比较的值。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="location1" /> 的地址为空指针。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)">
      <summary>比较两个 32 位有符号整数是否相等，如果相等，则替换其中一个值。</summary>
      <returns>
        <paramref name="location1" /> 中的原始值。</returns>
      <param name="location1">其值将与 <paramref name="comparand" /> 进行比较并且可能被替换的目标。</param>
      <param name="value">比较结果相等时替换目标值的值。</param>
      <param name="comparand">与位于 <paramref name="location1" /> 处的值进行比较的值。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="location1" /> 的地址为空指针。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)">
      <summary>比较两个 64 位有符号整数是否相等，如果相等，则替换其中一个值。</summary>
      <returns>
        <paramref name="location1" /> 中的原始值。</returns>
      <param name="location1">其值将与 <paramref name="comparand" /> 进行比较并且可能被替换的目标。</param>
      <param name="value">比较结果相等时替换目标值的值。</param>
      <param name="comparand">与位于 <paramref name="location1" /> 处的值进行比较的值。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="location1" /> 的地址为空指针。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)">
      <summary>比较两个平台特定的句柄或指针是否相等，如果相等，则替换其中一个。</summary>
      <returns>
        <paramref name="location1" /> 中的原始值。</returns>
      <param name="location1">其值与 <paramref name="comparand" /> 的值进行比较并且可能被 <paramref name="value" /> 替换的目标 <see cref="T:System.IntPtr" />。</param>
      <param name="value">比较结果相等时替换目标值的 <see cref="T:System.IntPtr" />。</param>
      <param name="comparand">与位于 <paramref name="location1" /> 处的值进行比较的 <see cref="T:System.IntPtr" />。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="location1" /> 的地址为空指针。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)">
      <summary>比较两个对象是否相等，如果相等，则替换其中一个对象。</summary>
      <returns>
        <paramref name="location1" /> 中的原始值。</returns>
      <param name="location1">其值与 <paramref name="comparand" /> 进行比较并且可能被替换的目标对象。</param>
      <param name="value">在比较结果相等时替换目标对象的对象。</param>
      <param name="comparand">与位于 <paramref name="location1" /> 处的对象进行比较的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="location1" /> 的地址为空指针。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)">
      <summary>比较两个单精度浮点数是否相等，如果相等，则替换其中一个值。</summary>
      <returns>
        <paramref name="location1" /> 中的原始值。</returns>
      <param name="location1">其值将与 <paramref name="comparand" /> 进行比较并且可能被替换的目标。</param>
      <param name="value">比较结果相等时替换目标值的值。</param>
      <param name="comparand">与位于 <paramref name="location1" /> 处的值进行比较的值。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="location1" /> 的地址为空指针。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)">
      <summary>比较指定的引用类型 <paramref name="T" /> 的两个实例是否相等，如果相等，则替换其中一个。</summary>
      <returns>
        <paramref name="location1" /> 中的原始值。</returns>
      <param name="location1">其值将与 <paramref name="comparand" /> 进行比较并且可能被替换的目标。 这是一个引用参数（在 C# 中是 ref，在 Visual Basic 中是 ByRef）。</param>
      <param name="value">比较结果相等时替换目标值的值。</param>
      <param name="comparand">与位于 <paramref name="location1" /> 处的值进行比较的值。</param>
      <typeparam name="T">用于 <paramref name="location1" />、<paramref name="value" /> 和 <paramref name="comparand" /> 的类型。 此类型必须是引用类型。</typeparam>
      <exception cref="T:System.NullReferenceException">
        <paramref name="location1" /> 的地址为空指针。</exception>
    </member>
    <member name="M:System.Threading.Interlocked.Decrement(System.Int32@)">
      <summary>以原子操作的形式递减指定变量的值并存储结果。</summary>
      <returns>递减的值。</returns>
      <param name="location">其值要递减的变量。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="location" /> 的地址为空指针。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.Decrement(System.Int64@)">
      <summary>以原子操作的形式递减指定变量的值并存储结果。</summary>
      <returns>递减的值。</returns>
      <param name="location">其值要递减的变量。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="location" /> 的地址为空指针。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.Double@,System.Double)">
      <summary>以原子操作的形式，将双精度浮点数设置为指定的值并返回原始值。</summary>
      <returns>
        <paramref name="location1" /> 的原始值。</returns>
      <param name="location1">要设置为指定值的变量。</param>
      <param name="value">
        <paramref name="location1" /> 参数被设置为的值。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="location1" /> 的地址为空指针。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.Int32@,System.Int32)">
      <summary>以原子操作的形式，将 32 位有符号整数设置为指定的值并返回原始值。</summary>
      <returns>
        <paramref name="location1" /> 的原始值。</returns>
      <param name="location1">要设置为指定值的变量。</param>
      <param name="value">
        <paramref name="location1" /> 参数被设置为的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="location1" /> 的地址为空指针。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.Int64@,System.Int64)">
      <summary>将 64 位有符号整数设置为指定的值并返回原始值，上述操作作为一个原子操作完成。</summary>
      <returns>
        <paramref name="location1" /> 的原始值。</returns>
      <param name="location1">要设置为指定值的变量。</param>
      <param name="value">
        <paramref name="location1" /> 参数被设置为的值。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="location1" /> 的地址为空指针。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.IntPtr@,System.IntPtr)">
      <summary>以原子操作的形式，将平台特定的句柄或指针设置为指定的值并返回原始值。</summary>
      <returns>
        <paramref name="location1" /> 的原始值。</returns>
      <param name="location1">要设置为指定值的变量。</param>
      <param name="value">
        <paramref name="location1" /> 参数被设置为的值。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="location1" /> 的地址为空指针。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.Object@,System.Object)">
      <summary>以原子操作的形式，将对象设置为指定的值并返回对原始对象的引用。</summary>
      <returns>
        <paramref name="location1" /> 的原始值。</returns>
      <param name="location1">要设置为指定值的变量。</param>
      <param name="value">
        <paramref name="location1" /> 参数被设置为的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="location1" /> 的地址为空指针。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.Single@,System.Single)">
      <summary>以原子操作的形式，将单精度浮点数设置为指定的值并返回原始值。</summary>
      <returns>
        <paramref name="location1" /> 的原始值。</returns>
      <param name="location1">要设置为指定值的变量。</param>
      <param name="value">
        <paramref name="location1" /> 参数被设置为的值。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="location1" /> 的地址为空指针。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange``1(``0@,``0)">
      <summary>以原子操作的形式，将指定类型 <paramref name="T" /> 的变量设置为指定的值并返回原始值。</summary>
      <returns>
        <paramref name="location1" /> 的原始值。</returns>
      <param name="location1">要设置为指定值的变量。 这是一个引用参数（在 C# 中是 ref，在 Visual Basic 中是 ByRef）。</param>
      <param name="value">
        <paramref name="location1" /> 参数被设置为的值。</param>
      <typeparam name="T">用于 <paramref name="location1" /> 和 <paramref name="value" /> 的类型。 此类型必须是引用类型。</typeparam>
      <exception cref="T:System.NullReferenceException">
        <paramref name="location1" /> 的地址为空指针。</exception>
    </member>
    <member name="M:System.Threading.Interlocked.Increment(System.Int32@)">
      <summary>以原子操作的形式递增指定变量的值并存储结果。</summary>
      <returns>递增的值。</returns>
      <param name="location">其值要递增的变量。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="location" /> 的地址为空指针。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.Increment(System.Int64@)">
      <summary>以原子操作的形式递增指定变量的值并存储结果。</summary>
      <returns>递增的值。</returns>
      <param name="location">其值要递增的变量。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="location" /> 的地址为空指针。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.Read(System.Int64@)">
      <summary>返回一个以原子操作形式加载的 64 位值。</summary>
      <returns>加载的值。</returns>
      <param name="location">要加载的 64 位值。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Threading.LazyInitializer">
      <summary>提供延迟初始化例程。</summary>
    </member>
    <member name="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)">
      <summary>在目标引用或值类型尚未初始化的情况下，使用其默认构造函数初始化目标引用或值类型。</summary>
      <returns>类型 <paramref name="T" /> 的初始化引用。</returns>
      <param name="target">在类型尚未初始化的情况下，要初始化的类型 <paramref name="T" /> 的引用。</param>
      <typeparam name="T">要初始化的引用的类型。</typeparam>
      <exception cref="T:System.MemberAccessException">缺少访问类型 <paramref name="T" /> 的构造函数的权限。</exception>
      <exception cref="T:System.MissingMemberException">类型 <paramref name="T" /> 没有默认的构造函数。</exception>
    </member>
    <member name="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)">
      <summary>在目标引用或值类型尚未初始化的情况下，使用其默认构造函数初始化目标引用或值类型。</summary>
      <returns>类型 <paramref name="T" /> 的初始化值。</returns>
      <param name="target">在尚未初始化的情况下要初始化的类型 <paramref name="T" /> 的引用或值。</param>
      <param name="initialized">对布尔值的引用，该值确定目标是否已初始化。</param>
      <param name="syncLock">对用作相互排斥锁的对象的引用，用于初始化 <paramref name="target" />。 如果 <paramref name="syncLock" /> 为 null，则新的对象将被实例化。</param>
      <typeparam name="T">要初始化的引用的类型。</typeparam>
      <exception cref="T:System.MemberAccessException">缺少访问类型 <paramref name="T" /> 的构造函数的权限。</exception>
      <exception cref="T:System.MissingMemberException">类型 <paramref name="T" /> 没有默认的构造函数。</exception>
    </member>
    <member name="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})">
      <summary>在目标引用或值类型尚未初始化的情况下，使用指定函数初始化目标引用或值类型。</summary>
      <returns>类型 <paramref name="T" /> 的初始化值。</returns>
      <param name="target">在尚未初始化的情况下要初始化的类型 <paramref name="T" /> 的引用或值。</param>
      <param name="initialized">对布尔值的引用，该值确定目标是否已初始化。</param>
      <param name="syncLock">对用作相互排斥锁的对象的引用，用于初始化 <paramref name="target" />。 如果 <paramref name="syncLock" /> 为 null，则新的对象将被实例化。</param>
      <param name="valueFactory">调用函数以初始化该引用或值。</param>
      <typeparam name="T">要初始化的引用的类型。</typeparam>
      <exception cref="T:System.MemberAccessException">缺少访问类型 <paramref name="T" /> 的构造函数的权限。</exception>
      <exception cref="T:System.MissingMemberException">类型 <paramref name="T" /> 没有默认的构造函数。</exception>
    </member>
    <member name="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})">
      <summary>在目标引用类型尚未初始化的情况下，使用指定函数初始化目标引用类型。</summary>
      <returns>类型 <paramref name="T" /> 的初始化值。</returns>
      <param name="target">在类型尚未初始化的情况下，要初始化的类型 <paramref name="T" /> 的引用。</param>
      <param name="valueFactory">调用函数以初始化该引用。</param>
      <typeparam name="T">要初始化的引用的引用类型。</typeparam>
      <exception cref="T:System.MissingMemberException">类型 <paramref name="T" /> 没有默认的构造函数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="valueFactory" /> 返回 null（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="T:System.Threading.LazyThreadSafetyMode">
      <summary>指定 <see cref="T:System.Lazy`1" /> 实例如何同步多个线程间的访问。</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
      <summary>使用锁来确保只有一个线程可以在线程安全的方式下初始化 <see cref="T:System.Lazy`1" /> 实例。 如果初始化方法（如果没有初始化方法，则为默认构造函数）在内部使用锁，则可能会发生死锁。 如果您使用指定初始化方法（<paramref name="valueFactory" /> 参数的 <see cref="T:System.Lazy`1" /> 构造函数，并且如果首次调用 <see cref="P:System.Lazy`1.Value" /> 属性时，该初始化方法引发异常（或者无法处理异常），则该异常将在 <see cref="P:System.Lazy`1.Value" /> 属性的后续调用上再次缓存和引发该异常。 如果您使用不指定初始化方法的 <see cref="T:System.Lazy`1" /> 构造函数，则不会缓存 <paramref name="T" /> 默认构造函数引发的异常。 在这种情况下，随后调用 <see cref="P:System.Lazy`1.Value" /> 属性可能会成功地初始化 <see cref="T:System.Lazy`1" /> 实例。 如果初始化方法递归访问 <see cref="T:System.Lazy`1" /> 实例的 <see cref="P:System.Lazy`1.Value" /> 属性，则引发 <see cref="T:System.InvalidOperationException" />。</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.None">
      <summary>
        <see cref="T:System.Lazy`1" /> 实例不是线程安全的；如果从多个线程访问该实例，则其行为不确定。 仅应在高性能至关重要并且保证决不会从多个线程初始化 <see cref="T:System.Lazy`1" /> 实例时才使用该模式。 如果您使用指定初始化方法（<paramref name="valueFactory" /> 参数的 <see cref="T:System.Lazy`1" /> 构造函数，并且如果首次调用 <see cref="P:System.Lazy`1.Value" /> 属性时，该初始化方法引发异常（或者无法处理异常），则该异常将在 <see cref="P:System.Lazy`1.Value" /> 属性的后续调用上再次缓存和引发该异常。 如果您使用不指定初始化方法的 <see cref="T:System.Lazy`1" /> 构造函数，则不会缓存 <paramref name="T" /> 默认构造函数引发的异常。 在这种情况下，随后调用 <see cref="P:System.Lazy`1.Value" /> 属性可能会成功地初始化 <see cref="T:System.Lazy`1" /> 实例。 如果初始化方法递归访问 <see cref="T:System.Lazy`1" /> 实例的 <see cref="P:System.Lazy`1.Value" /> 属性，则引发 <see cref="T:System.InvalidOperationException" />。</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
      <summary>当多个线程尝试同时初始化一个 <see cref="T:System.Lazy`1" /> 实例时，允许所有线程都运行初始化方法（如果没有初始化方法，则为默认构造函数）。 完成初始化的第一个线程设置 <see cref="T:System.Lazy`1" /> 实例的值。 该值将返回给同时运行初始化方法的所有其他线程，除非该初始化方法对这些线程引发异常。 争用线程创建的任何 <paramref name="T" /> 实例都将被丢弃。 如果初始化方法对任何线程引发异常，则该异常会从在该线程上的<see cref="P:System.Lazy`1.Value" /> 属性传播出去。 不缓存该异常。 <see cref="P:System.Lazy`1.IsValueCreated" /> 属性的值仍然为 false，并且随后通过其中引发异常的线程或通过其他线程对 <see cref="P:System.Lazy`1.Value" /> 属性的调用会导致初始化方法再次运行。 如果初始化方法递归访问 <see cref="T:System.Lazy`1" /> 实例的 <see cref="P:System.Lazy`1.Value" /> 属性，则不会引发异常。</summary>
    </member>
    <member name="T:System.Threading.LockRecursionException">
      <summary>当进入锁定状态的递归与此锁定的递归策略不兼容时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.LockRecursionException.#ctor">
      <summary>使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.Threading.LockRecursionException" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.LockRecursionException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.Threading.LockRecursionException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方必须确保此字符串已针对当前系统区域性进行了本地化。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.LockRecursionException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Threading.LockRecursionException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方必须确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">引发当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Threading.ManualResetEvent">
      <summary>通知一个或多个正在等待的线程已发生事件。 此类不能被继承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)">
      <summary>用一个指示是否将初始状态设置为终止的布尔值初始化 <see cref="T:System.Threading.ManualResetEvent" /> 类的新实例。</summary>
      <param name="initialState">如果为 true，则将初始状态设置为终止；如果为 false，则将初始状态设置为非终止。</param>
    </member>
    <member name="T:System.Threading.ManualResetEventSlim">
      <summary>提供 <see cref="T:System.Threading.ManualResetEvent" /> 的简化版本。</summary>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.#ctor">
      <summary>使用无信号初始状态初始化 <see cref="T:System.Threading.ManualResetEventSlim" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean)">
      <summary>使用一个指示是否将初始状态设置为有信号的布尔值初始化 <see cref="T:System.Threading.ManualResetEventSlim" /> 类的新实例。</summary>
      <param name="initialState">若要将初始状态设置为有信号，则为 true；若要将初始状态设置为无信号，则为 false。</param>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)">
      <summary>使用一个指示是否将初始状态设置为有信号和指定自旋计数的布尔值初始化 <see cref="T:System.Threading.ManualResetEventSlim" /> 类的新实例。</summary>
      <param name="initialState">若要将初始状态设置为有信号，则为 true；若要将初始状态设置为无信号，则为 false。</param>
      <param name="spinCount">在回退到基于内核的等待操作之前发生的自旋等待数量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="spinCount" /> 小于 0 或大于允许的最大值。</exception>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Dispose">
      <summary>释放由 <see cref="T:System.Threading.ManualResetEventSlim" /> 类的当前实例占用的所有资源。</summary>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Threading.ManualResetEventSlim" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">如果为 true，则同时释放托管资源和非托管资源；如果为 false，则仅释放非托管资源。</param>
    </member>
    <member name="P:System.Threading.ManualResetEventSlim.IsSet">
      <summary>获取是否设置了事件。</summary>
      <returns>如果设置了事件，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Reset">
      <summary>将事件状态设置为非终止状态，从而导致线程受阻。</summary>
      <exception cref="T:System.ObjectDisposedException">对象已被释放。</exception>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Set">
      <summary>将事件状态设置为有信号，从而允许一个或多个等待该事件的线程继续。</summary>
    </member>
    <member name="P:System.Threading.ManualResetEventSlim.SpinCount">
      <summary>获取在回退到基于内核的等待操作之前发生的自旋等待数量。</summary>
      <returns>返回在回退到基于内核的等待操作之前发生的自旋等待数量。</returns>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Wait">
      <summary>阻止当前线程，直到设置了当前 <see cref="T:System.Threading.ManualResetEventSlim" /> 为止。</summary>
      <exception cref="T:System.InvalidOperationException">已超出最大等待者数</exception>
      <exception cref="T:System.ObjectDisposedException">对象已被释放。</exception>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Wait(System.Int32)">
      <summary>阻止当前线程，直到设置了当前 <see cref="T:System.Threading.ManualResetEventSlim" /> 为止，同时使用 32 位带符号整数测量时间间隔。</summary>
      <returns>如果设置了 <see cref="T:System.Threading.ManualResetEventSlim" />，则为 true；否则为 false。</returns>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.InvalidOperationException">已超出最大等待者数</exception>
      <exception cref="T:System.ObjectDisposedException">对象已被释放。</exception>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)">
      <summary>阻止当前线程，直到设置了当前 <see cref="T:System.Threading.ManualResetEventSlim" /> 为止，并使用 32 位带符号整数测量时间间隔，同时观察 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <returns>如果设置了 <see cref="T:System.Threading.ManualResetEventSlim" />，则为 true；否则为 false。</returns>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <param name="cancellationToken">要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.InvalidOperationException">已超出最大等待者数</exception>
      <exception cref="T:System.ObjectDisposedException">该对象已被释放，或者创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)">
      <summary>阻止当前线程，直到当前 <see cref="T:System.Threading.ManualResetEventSlim" /> 收到信号为止，同时观察 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <param name="cancellationToken">要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.InvalidOperationException">已超出最大等待者数</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">该对象已被释放，或者创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)">
      <summary>阻止当前线程，直到设置了当前 <see cref="T:System.Threading.ManualResetEventSlim" /> 为止，同时使用 <see cref="T:System.TimeSpan" /> 测量时间间隔。</summary>
      <returns>如果设置了 <see cref="T:System.Threading.ManualResetEventSlim" />，则为 true；否则为 false。</returns>
      <param name="timeout">表示等待的毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是 -1 毫秒之外的负数，表示无限超时或者超时大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.InvalidOperationException">已超出最大等待者数</exception>
      <exception cref="T:System.ObjectDisposedException">对象已被释放。</exception>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>阻止当前线程，直到设置了当前 <see cref="T:System.Threading.ManualResetEventSlim" /> 为止，并使用 <see cref="T:System.TimeSpan" /> 测量时间间隔，同时观察 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <returns>如果设置了 <see cref="T:System.Threading.ManualResetEventSlim" />，则为 true；否则为 false。</returns>
      <param name="timeout">表示等待的毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <param name="cancellationToken">要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是 -1 毫秒之外的负数，表示无限超时或者超时大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.InvalidOperationException">已超出最大等待者数</exception>
      <exception cref="T:System.ObjectDisposedException">该对象已被释放，或者创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
    </member>
    <member name="P:System.Threading.ManualResetEventSlim.WaitHandle">
      <summary>获取此 <see cref="T:System.Threading.ManualResetEventSlim" /> 的基础 <see cref="T:System.Threading.WaitHandle" /> 对象。</summary>
      <returns>此 <see cref="T:System.Threading.ManualResetEventSlim" /> 的基础 <see cref="T:System.Threading.WaitHandle" /> 事件对象。</returns>
    </member>
    <member name="T:System.Threading.Monitor">
      <summary>提供同步访问对象的机制。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.Monitor.Enter(System.Object)">
      <summary>在指定对象上获取排他锁。</summary>
      <param name="obj">在其上获取监视器锁的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 参数为 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
      <summary>获取指定对象上的排他锁，并自动设置一个值，指示是否获取了该锁。</summary>
      <param name="obj">要在其上等待的对象。</param>
      <param name="lockTaken">尝试获取锁的结果，通过引用传递。 输入必须为 false。 如果已获取锁，则输出为 true；否则输出为 false。 即使在尝试获取锁的过程中发生异常，也会设置输出。 注意   如果没有发生异常，则此方法的输出始终为 true。</param>
      <exception cref="T:System.ArgumentException">对 <paramref name="lockTaken" /> 的输入是 true。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Monitor.Exit(System.Object)">
      <summary>释放指定对象上的排他锁。</summary>
      <param name="obj">在其上释放锁的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 参数为 null。</exception>
      <exception cref="T:System.Threading.SynchronizationLockException">当前线程不拥有指定对象的锁。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Monitor.Pulse(System.Object)">
      <summary>通知等待队列中的线程锁定对象状态的更改。</summary>
      <param name="obj">线程正在等待的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 参数为 null。</exception>
      <exception cref="T:System.Threading.SynchronizationLockException">调用线程不拥有指定对象的锁。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Monitor.PulseAll(System.Object)">
      <summary>通知所有的等待线程对象状态的更改。</summary>
      <param name="obj">发送脉冲的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 参数为 null。</exception>
      <exception cref="T:System.Threading.SynchronizationLockException">调用线程不拥有指定对象的锁。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object)">
      <summary>试图获取指定对象的排他锁。</summary>
      <returns>如果当前线程获取该锁，则为 true；否则为 false。</returns>
      <param name="obj">在其上获取锁的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 参数为 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
      <summary>尝试获取指定对象上的排他锁，并自动设置一个值，指示是否得到了该锁。</summary>
      <param name="obj">在其上获取锁的对象。</param>
      <param name="lockTaken">尝试获取锁的结果，通过引用传递。 输入必须为 false。 如果已获取锁，则输出为 true；否则输出为 false。 即使在尝试获取锁的过程中发生异常，也会设置输出。</param>
      <exception cref="T:System.ArgumentException">对 <paramref name="lockTaken" /> 的输入是 true。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
      <summary>在指定的毫秒数内尝试获取指定对象上的排他锁。</summary>
      <returns>如果当前线程获取该锁，则为 true；否则为 false。</returns>
      <param name="obj">在其上获取锁的对象。</param>
      <param name="millisecondsTimeout">等待锁所需的毫秒数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 为负且不等于 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
      <summary>在指定的毫秒数中，尝试获取指定对象上的排他锁，并自动设置一个值，指示是否得到了该锁。</summary>
      <param name="obj">在其上获取锁的对象。</param>
      <param name="millisecondsTimeout">等待锁所需的毫秒数。</param>
      <param name="lockTaken">尝试获取锁的结果，通过引用传递。 输入必须为 false。 如果已获取锁，则输出为 true；否则输出为 false。 即使在尝试获取锁的过程中发生异常，也会设置输出。</param>
      <exception cref="T:System.ArgumentException">对 <paramref name="lockTaken" /> 的输入是 true。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 为负且不等于 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
      <summary>在指定的时间量内尝试获取指定对象上的排他锁。</summary>
      <returns>如果当前线程在不阻止的情况下获取该锁，则为 true；否则为 false。</returns>
      <param name="obj">在其上获取锁的对象。</param>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，表示等待锁所需的时间量。 值为 -1 毫秒表示指定无限期等待。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 值（以毫秒为单位）为负且不等于 <see cref="F:System.Threading.Timeout.Infinite" />（-1 毫秒），或者大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
      <summary>在指定的一段时间内，尝试获取指定对象上的排他锁，并自动设置一个值，指示是否得到了该锁。</summary>
      <param name="obj">在其上获取锁的对象。</param>
      <param name="timeout">用于等待锁的时间。 值为 -1 毫秒表示指定无限期等待。</param>
      <param name="lockTaken">尝试获取锁的结果，通过引用传递。 输入必须为 false。 如果已获取锁，则输出为 true；否则输出为 false。 即使在尝试获取锁的过程中发生异常，也会设置输出。</param>
      <exception cref="T:System.ArgumentException">对 <paramref name="lockTaken" /> 的输入是 true。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 值（以毫秒为单位）为负且不等于 <see cref="F:System.Threading.Timeout.Infinite" />（-1 毫秒），或者大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object)">
      <summary>释放对象上的锁并阻止当前线程，直到它重新获取该锁。</summary>
      <returns>如果调用由于调用方重新获取了指定对象的锁而返回，则为 true。 如果未重新获取该锁，则此方法不会返回。</returns>
      <param name="obj">要在其上等待的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 参数为 null。</exception>
      <exception cref="T:System.Threading.SynchronizationLockException">调用线程不拥有指定对象的锁。</exception>
      <exception cref="T:System.Threading.ThreadInterruptedException">调用 Wait 的线程稍后从等待状态中断。 当另一个线程调用此线程的 <see cref="M:System.Threading.Thread.Interrupt" /> 方法时会发生这种情况。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
      <summary>释放对象上的锁并阻止当前线程，直到它重新获取该锁。 如果指定的超时间隔已过，则线程进入就绪队列。</summary>
      <returns>如果在指定的时间过期之前重新获取该锁，则为 true；如果在指定的时间过期之后重新获取该锁，则为 false。 此方法只有在重新获取该锁后才会返回。</returns>
      <param name="obj">要在其上等待的对象。</param>
      <param name="millisecondsTimeout">线程进入就绪队列之前等待的毫秒数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 参数为 null。</exception>
      <exception cref="T:System.Threading.SynchronizationLockException">调用线程不拥有指定对象的锁。</exception>
      <exception cref="T:System.Threading.ThreadInterruptedException">调用 Wait 的线程稍后从等待状态中断。 当另一个线程调用此线程的 <see cref="M:System.Threading.Thread.Interrupt" /> 方法时会发生这种情况。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 参数值为负且不等于 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
      <summary>释放对象上的锁并阻止当前线程，直到它重新获取该锁。 如果指定的超时间隔已过，则线程进入就绪队列。</summary>
      <returns>如果在指定的时间过期之前重新获取该锁，则为 true；如果在指定的时间过期之后重新获取该锁，则为 false。 此方法只有在重新获取该锁后才会返回。</returns>
      <param name="obj">要在其上等待的对象。</param>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，表示线程进入就绪队列之前等待的时间量。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 参数为 null。</exception>
      <exception cref="T:System.Threading.SynchronizationLockException">调用线程不拥有指定对象的锁。</exception>
      <exception cref="T:System.Threading.ThreadInterruptedException">调用 Wait 的线程稍后从等待状态中断。 当另一个线程调用此线程的 <see cref="M:System.Threading.Thread.Interrupt" /> 方法时会发生这种情况。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 参数值（以毫秒为单位）为负且不表示 <see cref="F:System.Threading.Timeout.Infinite" />（-1 毫秒），或者大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Threading.Mutex">
      <summary>一个同步基元，也可用于进程间同步。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Mutex.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.Threading.Mutex" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Threading.Mutex.#ctor(System.Boolean)">
      <summary>用一个指示调用线程是否应拥有互斥体的初始所属权的布尔值来初始化 <see cref="T:System.Threading.Mutex" /> 类的新实例。</summary>
      <param name="initiallyOwned">如果给调用线程赋予互斥体的初始所属权，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Threading.Mutex.#ctor(System.Boolean,System.String)">
      <summary>用一个指示调用线程是否应拥有互斥体的初始所属权的布尔值和一个作为互斥体名称的字符串来初始化 <see cref="T:System.Threading.Mutex" /> 类的新实例。</summary>
      <param name="initiallyOwned">如果为 true，则给予调用线程已命名的系统互斥体的初始所属权（如果已命名的系统互斥体是通过此调用创建的）；否则为 false。</param>
      <param name="name">
        <see cref="T:System.Threading.Mutex" /> 的名称。 如果值为 null，则 <see cref="T:System.Threading.Mutex" /> 是未命名的。</param>
      <exception cref="T:System.UnauthorizedAccessException">命名的互斥体存在并具有访问控制安全性，但用户不具有 <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />。</exception>
      <exception cref="T:System.IO.IOException">发生了一个 Win32 错误。</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">无法创建命名的互斥体，原因可能是与其他类型的等待句柄同名。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的长度超过 260 个字符。</exception>
    </member>
    <member name="M:System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@)">
      <summary>使用一个指示调用线程是否应拥有互斥体的初始所属权的布尔值、一个作为互斥体名称的字符串，以及一个在方法返回时指示调用线程是否被授予互斥体的初始所属权的布尔值来初始化 <see cref="T:System.Threading.Mutex" /> 类的新实例。</summary>
      <param name="initiallyOwned">如果为 true，则给予调用线程已命名的系统互斥体的初始所属权（如果已命名的系统互斥体是通过此调用创建的）；否则为 false。</param>
      <param name="name">
        <see cref="T:System.Threading.Mutex" /> 的名称。 如果值为 null，则 <see cref="T:System.Threading.Mutex" /> 是未命名的。</param>
      <param name="createdNew">在此方法返回时，如果创建了局部互斥体（即，如果 <paramref name="name" /> 为 null 或空字符串）或指定的命名系统互斥体，则包含布尔值 true；如果指定的命名系统互斥体已存在，则为 false。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.UnauthorizedAccessException">命名的互斥体存在并具有访问控制安全性，但用户不具有 <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />。</exception>
      <exception cref="T:System.IO.IOException">发生了一个 Win32 错误。</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">无法创建命名的互斥体，原因可能是与其他类型的等待句柄同名。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的长度超过 260 个字符。</exception>
    </member>
    <member name="M:System.Threading.Mutex.OpenExisting(System.String)">
      <summary>打开指定名称为 mutex（如果已经存在）。</summary>
      <returns>一个对象，表示已命名的系统互斥体。</returns>
      <param name="name">要打开的系统互斥体的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 是空字符串。 - 或 - <paramref name="name" /> 的长度超过 260 个字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">命名的 mutex 不存在。</exception>
      <exception cref="T:System.IO.IOException">发生了一个 Win32 错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">已命名的互斥体存在，但用户不具备使用它所需的安全访问权限。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Threading.Mutex.ReleaseMutex">
      <summary>释放 <see cref="T:System.Threading.Mutex" /> 一次。</summary>
      <exception cref="T:System.ApplicationException">调用线程不拥有互斥体。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Threading.SemaphoreFullException">
      <summary>对计数已达到最大值的信号量调用 <see cref="Overload:System.Threading.Semaphore.Release" /> 方法时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.SemaphoreFullException.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.Threading.SemaphoreFullException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Threading.SemaphoreFullException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.Threading.SemaphoreFullException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.Threading.SemaphoreFullException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Threading.SemaphoreFullException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Threading.SemaphoreSlim">
      <summary>对可同时访问资源或资源池的线程数加以限制的 <see cref="T:System.Threading.Semaphore" /> 的轻量替代。</summary>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Threading.SemaphoreSlim" /> 类的新实例，以指定可同时授予的请求的初始数量。</summary>
      <param name="initialCount">可以同时授予的信号量的初始请求数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="initialCount" /> 小于 0。</exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Threading.SemaphoreSlim" /> 类的新实例，同时指定可同时授予的请求的初始数量和最大数量。</summary>
      <param name="initialCount">可以同时授予的信号量的初始请求数。</param>
      <param name="maxCount">可以同时授予的信号量的最大请求数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="initialCount" /> 小于 0，或 <paramref name="initialCount" /> 大于 <paramref name="maxCount" />，或 <paramref name="maxCount" /> 小于等于 0。</exception>
    </member>
    <member name="P:System.Threading.SemaphoreSlim.AvailableWaitHandle">
      <summary>返回一个可用于在信号量上等待的 <see cref="T:System.Threading.WaitHandle" />。</summary>
      <returns>一个可用于在信号量上等待的 <see cref="T:System.Threading.WaitHandle" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.SemaphoreSlim" /> 已被释放。</exception>
    </member>
    <member name="P:System.Threading.SemaphoreSlim.CurrentCount">
      <summary>获取将允许进入 <see cref="T:System.Threading.SemaphoreSlim" /> 的线程的数量。</summary>
      <returns>
        <see cref="T:System.Threading.SemaphoreSlim" /> 的当前计数。</returns>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Dispose">
      <summary>释放由 <see cref="T:System.Threading.SemaphoreSlim" /> 类的当前实例占用的所有资源。</summary>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Threading.ManualResetEventSlim" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Release">
      <summary>退出 <see cref="T:System.Threading.SemaphoreSlim" /> 一次。</summary>
      <returns>
        <see cref="T:System.Threading.SemaphoreSlim" /> 的前一个计数。</returns>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.Threading.SemaphoreFullException">
        <see cref="T:System.Threading.SemaphoreSlim" /> 已达到其最大大小。</exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
      <summary>退出 <see cref="T:System.Threading.SemaphoreSlim" /> 指定次数。</summary>
      <returns>
        <see cref="T:System.Threading.SemaphoreSlim" /> 的前一个计数。</returns>
      <param name="releaseCount">退出信号量的次数。</param>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="releaseCount" /> 小于 1。</exception>
      <exception cref="T:System.Threading.SemaphoreFullException">
        <see cref="T:System.Threading.SemaphoreSlim" /> 已达到其最大大小。</exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Wait">
      <summary>阻止当前线程，直至它可进入 <see cref="T:System.Threading.SemaphoreSlim" /> 为止。</summary>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
      <summary>阻止当前线程，直至它可进入 <see cref="T:System.Threading.SemaphoreSlim" /> 为止，同时使用 32 位带符号整数来指定超时。</summary>
      <returns>如果当前线程成功进入 <see cref="T:System.Threading.SemaphoreSlim" />，则为 true；否则为 false。</returns>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
      <summary>阻止当前线程，直至它可进入 <see cref="T:System.Threading.SemaphoreSlim" /> 为止，并使用 32 位带符号整数来指定超时，同时观察 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <returns>如果当前线程成功进入 <see cref="T:System.Threading.SemaphoreSlim" />，则为 true；否则为 false。</returns>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <param name="cancellationToken">要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.ObjectDisposedException">该 <see cref="T:System.Threading.SemaphoreSlim" /> 已被释放，或创建 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /><paramref name="" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
      <summary>阻止当前线程，直至它可进入 <see cref="T:System.Threading.SemaphoreSlim" /> 为止，同时观察 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <param name="cancellationToken">要观察的 <see cref="T:System.Threading.CancellationToken" /> 标记。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。 - 或 - 创建了 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
      <summary>阻止当前线程，直至它可进入 <see cref="T:System.Threading.SemaphoreSlim" /> 为止，同时使用 <see cref="T:System.TimeSpan" /> 来指定超时。</summary>
      <returns>如果当前线程成功进入 <see cref="T:System.Threading.SemaphoreSlim" />，则为 true；否则为 false。</returns>
      <param name="timeout">表示等待的毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是 -1 毫秒之外的负数，表示无限超时或者超时大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ObjectDisposedException">semaphoreSlim 实例已处理 <paramref name="." /></exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>阻止当前线程，直至它可进入 <see cref="T:System.Threading.SemaphoreSlim" /> 为止，并使用 <see cref="T:System.TimeSpan" /> 来指定超时，同时观察 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <returns>如果当前线程成功进入 <see cref="T:System.Threading.SemaphoreSlim" />，则为 true；否则为 false。</returns>
      <param name="timeout">表示等待的毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <param name="cancellationToken">要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是 -1 毫秒之外的负数，表示无限超时或者超时大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ObjectDisposedException">semaphoreSlim 实例已处理 <paramref name="." /><paramref name="-or-" />创建了 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
    </member>
    <member name="T:System.Threading.SendOrPostCallback">
      <summary>表示在消息即将被调度到同步上下文时要调用的方法。</summary>
      <param name="state">传递给委托的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Threading.SpinLock">
      <summary>提供一个相互排斥锁基元，在该基元中，尝试获取锁的线程将在重复检查的循环中等待，直至该锁变为可用为止。</summary>
    </member>
    <member name="M:System.Threading.SpinLock.#ctor(System.Boolean)">
      <summary>使用用于跟踪线程 ID 以改善调试的选项初始化 <see cref="T:System.Threading.SpinLock" /> 结构的新实例。</summary>
      <param name="enableThreadOwnerTracking">是否捕获线程 ID 并将其用于调试目的。</param>
    </member>
    <member name="M:System.Threading.SpinLock.Enter(System.Boolean@)">
      <summary>采用可靠的方式获取锁，这样，即使在方法调用中发生异常的情况下，都能采用可靠的方式检查 <paramref name="lockTaken" /> 以确定是否已获取锁。</summary>
      <param name="lockTaken">如果已获取锁，则为 true，否则为 false。 调用此方法前，必须将 <paramref name="lockTaken" /> 始化为 false。</param>
      <exception cref="T:System.ArgumentException">在调用 Enter 之前，<paramref name="lockTaken" /> 参数必须初始化为 false。</exception>
      <exception cref="T:System.Threading.LockRecursionException">线程所有权跟踪已启用，当前线程已获取此锁定。</exception>
    </member>
    <member name="M:System.Threading.SpinLock.Exit">
      <summary>释放锁。</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">启用线程所有权跟踪，当前线程不是此锁的所有者。</exception>
    </member>
    <member name="M:System.Threading.SpinLock.Exit(System.Boolean)">
      <summary>释放锁。</summary>
      <param name="useMemoryBarrier">一个布尔值，该值指示是否应发出内存界定，以便将退出操作立即发布到其他线程。</param>
      <exception cref="T:System.Threading.SynchronizationLockException">启用线程所有权跟踪，当前线程不是此锁的所有者。</exception>
    </member>
    <member name="P:System.Threading.SpinLock.IsHeld">
      <summary>获取锁当前是否已由任何线程占用。</summary>
      <returns>如果锁当前已由任何线程占用，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Threading.SpinLock.IsHeldByCurrentThread">
      <summary>获取锁是否已由当前线程占用。</summary>
      <returns>如果锁已由当前线程占用，则为 true；否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">禁用线程所有权跟踪。</exception>
    </member>
    <member name="P:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled">
      <summary>获取是否已为此实例启用了线程所有权跟踪。</summary>
      <returns>如果已为此实例启用了线程所有权跟踪，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Threading.SpinLock.TryEnter(System.Boolean@)">
      <summary>尝试采用可靠的方式获取锁，这样，即使在方法调用中发生异常的情况下，都能采用可靠的方式检查  <paramref name="lockTaken" /> 以确定是否已获取锁。</summary>
      <param name="lockTaken">如果已获取锁，则为 true，否则为 false。 调用此方法前，必须将 <paramref name="lockTaken" /> 始化为 false。</param>
      <exception cref="T:System.ArgumentException">在调用 TryEnter 之前，<paramref name="lockTaken" /> 参数必须在初始化为 false。</exception>
      <exception cref="T:System.Threading.LockRecursionException">线程所有权跟踪已启用，当前线程已获取此锁定。</exception>
    </member>
    <member name="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
      <summary>尝试采用可靠的方式获取锁，这样，即使在方法调用中发生异常的情况下，都能采用可靠的方式检查  <paramref name="lockTaken" /> 以确定是否已获取锁。</summary>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <param name="lockTaken">如果已获取锁，则为 true，否则为 false。 调用此方法前，必须将 <paramref name="lockTaken" /> 始化为 false。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.ArgumentException">在调用 TryEnter 之前，<paramref name="lockTaken" /> 参数必须在初始化为 false。</exception>
      <exception cref="T:System.Threading.LockRecursionException">线程所有权跟踪已启用，当前线程已获取此锁定。</exception>
    </member>
    <member name="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
      <summary>尝试采用可靠的方式获取锁，这样，即使在方法调用中发生异常的情况下，都能采用可靠的方式检查  <paramref name="lockTaken" /> 以确定是否已获取锁。</summary>
      <param name="timeout">表示等待的毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <param name="lockTaken">如果已获取锁，则为 true，否则为 false。 调用此方法前，必须将 <paramref name="lockTaken" /> 始化为 false。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是 -1 毫秒之外的负数，表示无限超时或者超时大于 <see cref="F:System.Int32.MaxValue" /> 毫秒。</exception>
      <exception cref="T:System.ArgumentException">在调用 TryEnter 之前，<paramref name="lockTaken" /> 参数必须在初始化为 false。</exception>
      <exception cref="T:System.Threading.LockRecursionException">线程所有权跟踪已启用，当前线程已获取此锁定。</exception>
    </member>
    <member name="T:System.Threading.SpinWait">
      <summary>提供对基于自旋的等待的支持。</summary>
    </member>
    <member name="P:System.Threading.SpinWait.Count">
      <summary>获取已对此实例调用 <see cref="M:System.Threading.SpinWait.SpinOnce" /> 的次数。</summary>
      <returns>返回一个整数，该整数表示已对此实例调用 <see cref="M:System.Threading.SpinWait.SpinOnce" /> 的次数。</returns>
    </member>
    <member name="P:System.Threading.SpinWait.NextSpinWillYield">
      <summary>获取对 <see cref="M:System.Threading.SpinWait.SpinOnce" /> 的下一次调用是否将产生处理器，同时触发强制上下文切换。</summary>
      <returns>对 <see cref="M:System.Threading.SpinWait.SpinOnce" /> 的下一次调用是否将产生处理器，同时触发强制上下文切换。</returns>
    </member>
    <member name="M:System.Threading.SpinWait.Reset">
      <summary>重置自旋计数器。</summary>
    </member>
    <member name="M:System.Threading.SpinWait.SpinOnce">
      <summary>执行单一自旋。</summary>
    </member>
    <member name="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean})">
      <summary>在指定条件得到满足之前自旋。</summary>
      <param name="condition">在返回 true 之前重复执行的委托。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.Int32)">
      <summary>在指定条件得到满足或指定超时过期之前自旋。</summary>
      <returns>如果条件在超时时间内得到满足，则为 true；否则为 false</returns>
      <param name="condition">在返回 true 之前重复执行的委托。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
    </member>
    <member name="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.TimeSpan)">
      <summary>在指定条件得到满足或指定超时过期之前自旋。</summary>
      <returns>如果条件在超时时间内得到满足，则为 true；否则为 false</returns>
      <param name="condition">在返回 true 之前重复执行的委托。</param>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" />，表示等待的毫秒数；或者一个 TimeSpan，表示 -1 毫秒（无限期等待）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是 -1 毫秒之外的负数，表示无限超时或者超时大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="T:System.Threading.SynchronizationContext">
      <summary>提供在各种同步模型中传播同步上下文的基本功能。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.SynchronizationContext.#ctor">
      <summary>创建 <see cref="T:System.Threading.SynchronizationContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Threading.SynchronizationContext.CreateCopy">
      <summary>当在派生类中重写时，创建同步上下文的一个副本。</summary>
      <returns>一个新的 <see cref="T:System.Threading.SynchronizationContext" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.SynchronizationContext.Current">
      <summary>获取当前线程的同步上下文。</summary>
      <returns>一个 <see cref="T:System.Threading.SynchronizationContext" /> 对象，它表示当前同步上下文。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.SynchronizationContext.OperationCompleted">
      <summary>当在派生类中重写时，响应操作已完成的通知。</summary>
    </member>
    <member name="M:System.Threading.SynchronizationContext.OperationStarted">
      <summary>当在派生类中重写时，响应操作已开始的通知。</summary>
    </member>
    <member name="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>当在派生类中重写时，将异步消息调度到一个同步上下文。</summary>
      <param name="d">要调用的 <see cref="T:System.Threading.SendOrPostCallback" /> 委托。</param>
      <param name="state">传递给委托的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
      <summary>当在派生类中重写时，将一个同步消息调度到一个同步上下文。</summary>
      <param name="d">要调用的 <see cref="T:System.Threading.SendOrPostCallback" /> 委托。</param>
      <param name="state">传递给委托的对象。</param>
      <exception cref="T:System.NotSupportedException">在 Windows Store 应用程序中调用的方法。 用于 Windows Store 应用程序的 <see cref="T:System.Threading.SynchronizationContext" /> 的实现应用不支持 <see cref="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> 方法。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Threading.SynchronizationLockException">
      <summary>当某个方法请求调用方拥有给定 Monitor 上的锁时将引发该异常，而且由不拥有该锁的调用方调用此方法。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.SynchronizationLockException.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.Threading.SynchronizationLockException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Threading.SynchronizationLockException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.Threading.SynchronizationLockException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.Threading.SynchronizationLockException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Threading.SynchronizationLockException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Threading.Thread">
      <summary>创建并控制线程，设置其优先级并获取其状态。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Threading.Thread.CurrentCulture">
      <summary>获取或设置当前线程的区域性。</summary>
      <returns>一个 <see cref="T:System.Globalization.CultureInfo" />，它表示当前线程的区域性。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 null。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlThread" />
      </PermissionSet>
    </member>
    <member name="P:System.Threading.Thread.CurrentThread">
      <summary>获取当前正在运行的线程。</summary>
      <returns>
        <see cref="T:System.Threading.Thread" />，它是当前正在运行的线程的表示形式。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Threading.Thread.CurrentUICulture">
      <summary>获取或设置资源管理器使用的当前区域性以便在运行时查找区域性特定的资源。</summary>
      <returns>
        <see cref="T:System.Globalization.CultureInfo" />，它表示当前区域性。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 null。</exception>
      <exception cref="T:System.ArgumentException">此属性被设置为不能用于定位资源文件的区域性名称。 资源文件名只能包含字母、数字、连字符或下划线。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Threading.Thread.ManagedThreadId">
      <summary>获取当前托管线程的唯一标识符。</summary>
      <returns>一个整数，表示此托管线程的唯一标识符。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.MemoryBarrier">
      <summary>按如下方式同步内存存取：执行当前线程的处理器在对指令重新排序时，不能采用先执行 <see cref="M:System.Threading.Thread.MemoryBarrier" /> 调用之后的内存存取，再执行 <see cref="M:System.Threading.Thread.MemoryBarrier" /> 调用之前的内存存取的方式。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Threading.ThreadLocal`1">
      <summary>提供数据的线程本地存储。</summary>
      <typeparam name="T">指定每线程的已存储数据的类型。</typeparam>
    </member>
    <member name="M:System.Threading.ThreadLocal`1.#ctor">
      <summary>初始化 <see cref="T:System.Threading.ThreadLocal`1" /> 实例。</summary>
    </member>
    <member name="M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0})">
      <summary>使用指定的 <paramref name="valueFactory" /> 函数初始化 <see cref="T:System.Threading.ThreadLocal`1" /> 实例。</summary>
      <param name="valueFactory">如果在 <see cref="P:System.Threading.ThreadLocal`1.Value" /> 之前尚未初始化的情况下尝试对其进行检索，则会调用 <see cref="T:System.Func`1" /> 生成延迟初始化的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> 是 null 引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Threading.ThreadLocal`1.Dispose">
      <summary>释放由 <see cref="T:System.Threading.ThreadLocal`1" /> 类的当前实例占用的所有资源。</summary>
    </member>
    <member name="M:System.Threading.ThreadLocal`1.Dispose(System.Boolean)">
      <summary>释放此 <see cref="T:System.Threading.ThreadLocal`1" /> 实例使用的资源。</summary>
      <param name="disposing">一个布尔值，该值指示是否由于调用 <see cref="M:System.Threading.ThreadLocal`1.Dispose" /> 的原因而调用此方法。</param>
    </member>
    <member name="M:System.Threading.ThreadLocal`1.Finalize">
      <summary>释放此 <see cref="T:System.Threading.ThreadLocal`1" /> 实例使用的资源。</summary>
    </member>
    <member name="P:System.Threading.ThreadLocal`1.IsValueCreated">
      <summary>获取是否在当前线程上初始化 <see cref="P:System.Threading.ThreadLocal`1.Value" />。</summary>
      <returns>如果在当前线程上初始化 <see cref="P:System.Threading.ThreadLocal`1.Value" />，则为 true；否则为 false。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <see cref="T:System.Threading.ThreadLocal`1" /> 实例。</exception>
    </member>
    <member name="M:System.Threading.ThreadLocal`1.ToString">
      <summary>创建并返回当前线程的此实例的字符串表示形式。</summary>
      <returns>对 <see cref="M:System.Object.ToString" /> 调用 <see cref="P:System.Threading.ThreadLocal`1.Value" /> 的结果。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <see cref="T:System.Threading.ThreadLocal`1" /> 实例。</exception>
      <exception cref="T:System.NullReferenceException">当前线程的 <see cref="P:System.Threading.ThreadLocal`1.Value" /> 为 null 引用（Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.InvalidOperationException">初始化函数尝试以递归方式引用 <see cref="P:System.Threading.ThreadLocal`1.Value" />。</exception>
      <exception cref="T:System.MissingMemberException">没有提供默认构造函数，且没有提供值工厂。</exception>
    </member>
    <member name="P:System.Threading.ThreadLocal`1.Value">
      <summary>获取或设置当前线程的此实例的值。</summary>
      <returns>返回此 ThreadLocal 负责初始化的对象的实例。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <see cref="T:System.Threading.ThreadLocal`1" /> 实例。</exception>
      <exception cref="T:System.InvalidOperationException">初始化函数尝试以递归方式引用 <see cref="P:System.Threading.ThreadLocal`1.Value" />。</exception>
      <exception cref="T:System.MissingMemberException">没有提供默认构造函数，且没有提供值工厂。</exception>
    </member>
    <member name="T:System.Threading.ThreadPool">
      <summary>提供一个线程池，该线程池可用于执行任务、发送工作项、处理异步 I/O、代表其他线程等待以及处理计时器。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
      <summary>将方法排入队列以便执行。 此方法在有线程池线程变得可用时执行。</summary>
      <returns>如果此方法成功排队，则为 true；如果无法将该工作项排队，则引发 <see cref="T:System.NotSupportedException" />。</returns>
      <param name="callBack">一个 <see cref="T:System.Threading.WaitCallback" />，表示要执行的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callBack" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">承载公共语言运行时 (CLR) 的宿主不支持此操作。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary>将方法排入队列以便执行，并指定包含该方法所用数据的对象。 此方法在有线程池线程变得可用时执行。</summary>
      <returns>如果此方法成功排队，则为 true；如果无法将该工作项排队，则引发 <see cref="T:System.NotSupportedException" />。</returns>
      <param name="callBack">
        <see cref="T:System.Threading.WaitCallback" />，它表示要执行的方法。</param>
      <param name="state">包含方法所用数据的对象。</param>
      <exception cref="T:System.NotSupportedException">承载公共语言运行时 (CLR) 的宿主不支持此操作。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callBack" /> 为 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Threading.Timeout">
      <summary>包含指定无限期超时间隔的常数。 此类不能被继承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Threading.Timeout.Infinite">
      <summary>用于指定无限长等待时间的常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Threading.Timer">
      <summary>提供以指定的时间间隔执行方法的机制。 此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
      <summary>使用 32 位的有符号整数指定时间间隔，初始化 Timer 类的新实例。</summary>
      <param name="callback">一个 <see cref="T:System.Threading.TimerCallback" /> 委托，表示要执行的方法。</param>
      <param name="state">一个包含回调方法要使用的信息的对象，或者为 null。</param>
      <param name="dueTime">调用 <paramref name="callback" /> 之前延迟的时间量（以毫秒为单位）。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可防止启动计时器。 指定零 (0) 可立即启动计时器。</param>
      <param name="period">调用 <paramref name="callback" /> 的时间间隔（以毫秒为单位）。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可以禁用定期终止。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> 或 <paramref name="period" /> 参数为负，并且不等于 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
      <summary>初始化 Timer 类的新实例，使用 <see cref="T:System.TimeSpan" /> 值来度量时间间隔。</summary>
      <param name="callback">一个 <see cref="T:System.Threading.TimerCallback" /> 委托，表示要执行的方法。</param>
      <param name="state">一个包含回调方法要使用的信息的对象，或者为 null。</param>
      <param name="dueTime">
        <see cref="T:System.TimeSpan" />，表示在 <paramref name="callback" /> 参数调用它的方法之前延迟的时间量。 指定 -1 毫秒以防止启动计时器。 指定零 (0) 可立即启动计时器。</param>
      <param name="period">在调用 <paramref name="callback" /> 所引用的方法之间的时间间隔。 指定 -1 毫秒可以禁用定期终止。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> 或 <paramref name="period" /> 值中的毫秒数为负并且不等于 <see cref="F:System.Threading.Timeout.Infinite" />，或者大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Timer.Change(System.Int32,System.Int32)">
      <summary>更改计时器的启动时间和方法调用之间的间隔，用 32 位有符号整数度量时间间隔。</summary>
      <returns>如果计时器更新成功，则为 true；否则为 false。</returns>
      <param name="dueTime">在调用构造 <see cref="T:System.Threading.Timer" /> 时指定的回调方法之前的延迟时间量（以毫秒为单位）。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可防止重新启动计时器。 指定零 (0) 可立即重新启动计时器。</param>
      <param name="period">调用构造 <see cref="T:System.Threading.Timer" /> 时指定的回调方法的时间间隔（以毫秒为单位）。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可以禁用定期终止。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Timer" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> 或 <paramref name="period" /> 参数为负，并且不等于 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)">
      <summary>更改计时器的启动时间和方法调用之间的时间间隔，使用 <see cref="T:System.TimeSpan" /> 值度量时间间隔。</summary>
      <returns>如果计时器更新成功，则为 true；否则为 false。</returns>
      <param name="dueTime">一个 <see cref="T:System.TimeSpan" />，表示在调用构造 <see cref="T:System.Threading.Timer" /> 时指定的回调方法之前的延迟时间量。 指定负 -1 毫秒以防止计时器重新启动。 指定零 (0) 可立即重新启动计时器。</param>
      <param name="period">在构造 <see cref="T:System.Threading.Timer" /> 时指定的回调方法调用之间的时间间隔。 指定 -1 毫秒可以禁用定期终止。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Timer" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> 或 <paramref name="period" /> 参数（单位为毫秒）小于 -1。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="dueTime" /> 或 <paramref name="period" /> 参数（单位为毫秒）大于 4294967294。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.Timer.Dispose">
      <summary>释放由 <see cref="T:System.Threading.Timer" /> 的当前实例使用的所有资源。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Threading.TimerCallback">
      <summary>表示处理来自 <see cref="T:System.Threading.Timer" /> 的调用的方法。</summary>
      <param name="state">一个对象（包含与该委托所调用的方法相关的特定于应用程序的信息）或为 null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Threading.WaitCallback">
      <summary>表示线程池线程要执行的回调方法。</summary>
      <param name="state">包含回调方法要使用的信息的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Threading.WaitHandle">
      <summary>封装等待对共享资源的独占访问的操作系统特定的对象。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.#ctor">
      <summary>初始化 <see cref="T:System.Threading.WaitHandle" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Dispose">
      <summary>释放由 <see cref="T:System.Threading.WaitHandle" /> 类的当前实例使用的所有资源。</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Dispose(System.Boolean)">
      <summary>在派生类中被重写时，释放由 <see cref="T:System.Threading.WaitHandle" /> 使用的非托管资源，也可以根据需要释放托管资源。</summary>
      <param name="explicitDisposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="F:System.Threading.WaitHandle.InvalidHandle">
      <summary>表示无效的本机操作系统句柄。 此字段为只读。</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
      <summary>等待指定数组中的所有元素都收到信号。</summary>
      <returns>如果 <paramref name="waitHandles" /> 中的每个元素都收到信号，则返回 true；否则该方法永不返回。</returns>
      <param name="waitHandles">一个 WaitHandle 数组，包含当前实例将等待的对象。 此数组不能包含对同一对象的多个引用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 参数为 null。 - 或 - <paramref name="waitHandles" /> 数组中的一个或多个对象为 null。 - 或 - <paramref name="waitHandles" /> 是不含元素的数组，并且 .NET Framework 的版本为 2.0 或更高。</exception>
      <exception cref="T:System.DuplicateWaitObjectException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.ArgumentException" />。 <paramref name="waitHandles" /> 数组包含重复的元素。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中对象的数目大于系统允许的数目。 - 或 - <see cref="T:System.STAThreadAttribute" /> 特性应用于当前线程的线程过程，且 <paramref name="waitHandles" /> 包含多个元素。</exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> 是不含元素的数组，并且 .NET Framework 的版本为 1.0 或 1.1。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">线程退出时未释放互斥体，等待过程已终止。 在 Windows 98 或 Windows Millennium Edition 中不引发此异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="waitHandles" /> 数组包含另一个应用程序域中的 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
      <summary>等待指定数组中的所有元素接收信号，同时使用 <see cref="T:System.Int32" /> 值指定时间间隔。</summary>
      <returns>如果 <paramref name="waitHandles" /> 中的每个元素都已收到信号，则为 true；否则为 false。</returns>
      <param name="waitHandles">一个 WaitHandle 数组，包含当前实例将等待的对象。 此数组不能包含对同一对象的多个引用（重复的元素）。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 参数为 null。 - 或 - <paramref name="waitHandles" /> 数组中的一个或多个对象为 null。 - 或 - <paramref name="waitHandles" /> 是不含任何元素的数组。</exception>
      <exception cref="T:System.DuplicateWaitObjectException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.ArgumentException" />。 <paramref name="waitHandles" /> 数组包含重复的元素。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中对象的数目大于系统允许的数目。 - 或 - <see cref="T:System.STAThreadAttribute" /> 特性应用于当前线程的线程过程，且 <paramref name="waitHandles" /> 包含多个元素。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">线程退出时未释放互斥体，等待过程已终止。 在 Windows 98 或 Windows Millennium Edition 中不引发此异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="waitHandles" /> 数组包含另一个应用程序域中的 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
      <summary>等待指定数组中的所有元素接收信号，同时使用 <see cref="T:System.TimeSpan" /> 值指定时间间隔。</summary>
      <returns>如果 <paramref name="waitHandles" /> 中的每个元素都已收到信号，则为 true；否则为 false。</returns>
      <param name="waitHandles">一个 WaitHandle 数组，包含当前实例将等待的对象。 此数组不能包含对同一对象的多个引用。</param>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" />，表示等待的毫秒数；或者一个 <see cref="T:System.TimeSpan" />，表示 -1 毫秒（无限期等待）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 参数为 null。 - 或 - <paramref name="waitHandles" /> 数组中的一个或多个对象为 null。 - 或 - <paramref name="waitHandles" /> 是不含任何元素的数组。</exception>
      <exception cref="T:System.DuplicateWaitObjectException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.ArgumentException" />。 <paramref name="waitHandles" /> 数组包含重复的元素。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中对象的数目大于系统允许的数目。 - 或 - <see cref="T:System.STAThreadAttribute" /> 特性应用于当前线程的线程过程，且 <paramref name="waitHandles" /> 包含多个元素。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是一个非 -1 毫秒的负数，而 -1 表示无限期超时。 - 或 - <paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">线程退出时未释放互斥体，等待过程已终止。 在 Windows 98 或 Windows Millennium Edition 中不引发此异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="waitHandles" /> 数组包含另一个应用程序域中的 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
      <summary>等待指定数组中的任一元素收到信号。</summary>
      <returns>满足等待的对象的数组索引。</returns>
      <param name="waitHandles">一个 WaitHandle 数组，包含当前实例将等待的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 参数为 null。 - 或 - <paramref name="waitHandles" /> 数组中的一个或多个对象为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中对象的数目大于系统允许的数目。</exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> 是不含元素的数组，并且 .NET Framework 的版本为 1.0 或 1.1。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">线程退出时未释放互斥体，等待过程已终止。 在 Windows 98 或 Windows Millennium Edition 中不引发此异常。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> 是不含元素的数组，并且 .NET Framework 的版本为 2.0 或更高。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="waitHandles" /> 数组包含另一个应用程序域中的 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
      <summary>等待指定数组中的任意元素接收信号，同时使用 32 位带符号整数指定时间间隔。</summary>
      <returns>满足等待的对象的数组索引；如果没有任何对象满足等待，并且等效于 <paramref name="millisecondsTimeout" /> 的时间间隔已过，则为 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</returns>
      <param name="waitHandles">一个 WaitHandle 数组，包含当前实例将等待的对象。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 参数为 null。 - 或 - <paramref name="waitHandles" /> 数组中的一个或多个对象为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中对象的数目大于系统允许的数目。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">线程退出时未释放互斥体，等待过程已终止。 在 Windows 98 或 Windows Millennium Edition 中不引发此异常。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> 是不含任何元素的数组。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="waitHandles" /> 数组包含另一个应用程序域中的 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
      <summary>等待指定数组中的任意元素接收信号，同时使用 <see cref="T:System.TimeSpan" /> 指定时间间隔。</summary>
      <returns>满足等待的对象的数组索引；如果没有任何对象满足等待，并且等效于 <paramref name="timeout" /> 的时间间隔已过，则为 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</returns>
      <param name="waitHandles">一个 WaitHandle 数组，包含当前实例将等待的对象。</param>
      <param name="timeout">表示等待的毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 参数为 null。 - 或 - <paramref name="waitHandles" /> 数组中的一个或多个对象为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中对象的数目大于系统允许的数目。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是一个非 -1 毫秒的负数，而 -1 表示无限期超时。 - 或 - <paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">线程退出时未释放互斥体，等待过程已终止。 在 Windows 98 或 Windows Millennium Edition 中不引发此异常。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> 是不含任何元素的数组。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="waitHandles" /> 数组包含另一个应用程序域中的 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne">
      <summary>阻止当前线程，直到当前 <see cref="T:System.Threading.WaitHandle" /> 收到信号。</summary>
      <returns>如果当前实例收到信号，则为 true。 如果当前实例永远收不到信号，则 <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" /> 永不返回。</returns>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">线程退出时未释放互斥体，等待过程已终止。 在 Windows 98 或 Windows Millennium Edition 中不引发此异常。</exception>
      <exception cref="T:System.InvalidOperationException">当前实例是另一个应用程序域中的 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.Int32)">
      <summary>阻止当前线程，直到当前 <see cref="T:System.Threading.WaitHandle" /> 收到信号，同时使用 32 位带符号整数指定时间间隔。</summary>
      <returns>如果当前实例收到信号，则为 true；否则为 false。</returns>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">线程退出时未释放互斥体，等待过程已终止。 在 Windows 98 或 Windows Millennium Edition 中不引发此异常。</exception>
      <exception cref="T:System.InvalidOperationException">当前实例是另一个应用程序域中的 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)">
      <summary>阻止当前线程，直到当前实例收到信号，同时使用 <see cref="T:System.TimeSpan" /> 指定时间间隔。</summary>
      <returns>如果当前实例收到信号，则为 true；否则为 false。</returns>
      <param name="timeout">表示等待的毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是一个非 -1 毫秒的负数，而 -1 表示无限期超时。 - 或 - <paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">线程退出时未释放互斥体，等待过程已终止。 在 Windows 98 或 Windows Millennium Edition 中不引发此异常。</exception>
      <exception cref="T:System.InvalidOperationException">当前实例是另一个应用程序域中的 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</exception>
    </member>
    <member name="F:System.Threading.WaitHandle.WaitTimeout">
      <summary>指示在任何等待句柄终止之前 <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> 操作已超时。 此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Threading.WaitHandleCannotBeOpenedException">
      <summary>在尝试打开不存在的系统互斥体或信号量时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandleCannotBeOpenedException.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.Threading.WaitHandleCannotBeOpenedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Threading.WaitHandleCannotBeOpenedException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.Threading.WaitHandleCannotBeOpenedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.Threading.WaitHandleCannotBeOpenedException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Threading.WaitHandleCannotBeOpenedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Threading.Tasks.Parallel">
      <summary>提供对并行循环和区域的支持。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})">
      <summary>执行 for（在 Visual Basic 中为 For）循环，其中可能会并行运行迭代。</summary>
      <returns>包含有关已完成的循环部分的信息的结构。</returns>
      <param name="fromInclusive">开始索引（含）。</param>
      <param name="toExclusive">结束索引（不含）。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 参数为 null。</exception>
      <exception cref="T:System.AggregateException">包含在所有线程上引发的全部单个异常的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})">
      <summary>执行 for（在 Visual Basic 中为 For）循环，其中可能会并行运行迭代，而且可以监视和操作循环的状态。</summary>
      <returns>包含有关已完成的循环部分的信息的结构。</returns>
      <param name="fromInclusive">开始索引（含）。</param>
      <param name="toExclusive">结束索引（不含）。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 参数为 null。</exception>
      <exception cref="T:System.AggregateException">包含在所有线程上引发的全部单个异常的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
      <summary>执行具有线程本地数据的 for（在 Visual Basic 中为 For）循环，其中可能会并行运行迭代，而且可以监视和操作循环的状态。</summary>
      <returns>包含有关已完成的循环部分的信息的结构。</returns>
      <param name="fromInclusive">开始索引（含）。</param>
      <param name="toExclusive">结束索引（不含）。</param>
      <param name="localInit">用于返回每个任务的本地数据的初始状态的函数委托。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <param name="localFinally">用于对每个任务的本地状态执行一个最终操作的委托。</param>
      <typeparam name="TLocal">线程本地数据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 参数为 null。 - 或 - <paramref name="localInit" /> 参数为 null。 - 或 - <paramref name="localFinally" /> 参数为 null。</exception>
      <exception cref="T:System.AggregateException">包含在所有线程上引发的全部单个异常的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})">
      <summary>执行 for（在 Visual Basic 中为 For）循环，其中可能会并行运行迭代，而且可以配置循环选项。</summary>
      <returns>包含有关已完成的循环部分的信息的结构。</returns>
      <param name="fromInclusive">开始索引（含）。</param>
      <param name="toExclusive">结束索引（不含）。</param>
      <param name="parallelOptions">一个对象，用于配置此操作的行为。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <exception cref="T:System.OperationCanceledException">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 参数为 null。 - 或 - <paramref name="parallelOptions" /> 参数为 null。</exception>
      <exception cref="T:System.AggregateException">包含在所有线程上引发的全部单个异常的异常。</exception>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationToken" /> 关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})">
      <summary>执行 for（在 Visual Basic 中为 For）循环，其中可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</summary>
      <returns>包含有关已完成的循环部分的信息的结构。</returns>
      <param name="fromInclusive">开始索引（含）。</param>
      <param name="toExclusive">结束索引（不含）。</param>
      <param name="parallelOptions">一个对象，用于配置此操作的行为。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <exception cref="T:System.OperationCanceledException">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 参数为 null。 - 或 - <paramref name="parallelOptions" /> 参数为 null。</exception>
      <exception cref="T:System.AggregateException">包含在所有线程上引发的全部单个异常的异常。</exception>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationToken" /> 关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
      <summary>执行具有线程本地数据的 for（在 Visual Basic 中为 For）循环，其中可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</summary>
      <returns>包含有关已完成的循环部分的信息的结构。</returns>
      <param name="fromInclusive">开始索引（含）。</param>
      <param name="toExclusive">结束索引（不含）。</param>
      <param name="parallelOptions">一个对象，用于配置此操作的行为。</param>
      <param name="localInit">用于返回每个任务的本地数据的初始状态的函数委托。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <param name="localFinally">用于对每个任务的本地状态执行一个最终操作的委托。</param>
      <typeparam name="TLocal">线程本地数据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 参数为 null。 - 或 - <paramref name="localInit" /> 参数为 null。 - 或 - <paramref name="localFinally" /> 参数为 null。 - 或 - <paramref name="parallelOptions" /> 参数为 null。</exception>
      <exception cref="T:System.OperationCanceledException">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</exception>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationToken" /> 关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.AggregateException">包含在所有线程上引发的全部单个异常的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})">
      <summary>执行具有 64 位索引的 for（在 Visual Basic 中为 For）循环，其中可能会并行运行迭代。</summary>
      <returns>包含有关已完成的循环部分的信息的结构。</returns>
      <param name="fromInclusive">开始索引（含）。</param>
      <param name="toExclusive">结束索引（不含）。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 参数为 null。</exception>
      <exception cref="T:System.AggregateException">包含在所有线程上引发的全部单个异常的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})">
      <summary>执行具有 64 位索引的 for（在 Visual Basic 中为 For）循环，其中可能会并行运行迭代，而且可以监视和操作循环的状态。</summary>
      <returns>一个 <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> 结构，其中包含有关已完成的循环部分的信息。</returns>
      <param name="fromInclusive">开始索引（含）。</param>
      <param name="toExclusive">结束索引（不含）。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 参数为 null。</exception>
      <exception cref="T:System.AggregateException">包含在所有线程上引发的全部单个异常的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
      <summary>执行具有 64 位索引和线程本地数据的 for（在 Visual Basic 中为 For）循环，其中可能会并行运行迭代，而且可以监视和操作循环的状态。</summary>
      <returns>包含有关已完成的循环部分的信息的结构。</returns>
      <param name="fromInclusive">开始索引（含）。</param>
      <param name="toExclusive">结束索引（不含）。</param>
      <param name="localInit">用于返回每个任务的本地数据的初始状态的函数委托。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <param name="localFinally">用于对每个任务的本地状态执行一个最终操作的委托。</param>
      <typeparam name="TLocal">线程本地数据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 参数为 null。 - 或 - <paramref name="localInit" /> 参数为 null。 - 或 - <paramref name="localFinally" /> 参数为 null。</exception>
      <exception cref="T:System.AggregateException">包含在所有线程上引发的全部单个异常的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})">
      <summary>执行具有 64 位索引的 for（在 Visual Basic 中为 For）循环，其中可能会并行运行迭代，而且可以配置循环选项。</summary>
      <returns>包含有关已完成的循环部分的信息的结构。</returns>
      <param name="fromInclusive">开始索引（含）。</param>
      <param name="toExclusive">结束索引（不含）。</param>
      <param name="parallelOptions">一个对象，用于配置此操作的行为。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <exception cref="T:System.OperationCanceledException">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 参数为 null。 - 或 - <paramref name="parallelOptions" /> 参数为 null。</exception>
      <exception cref="T:System.AggregateException">包含在所有线程上引发的全部单个异常的异常。</exception>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationToken" /> 关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})">
      <summary>执行具有 64 位索引的 for（在 Visual Basic 中为 For）循环，其中可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</summary>
      <returns>包含有关已完成的循环部分的信息的结构。</returns>
      <param name="fromInclusive">开始索引（含）。</param>
      <param name="toExclusive">结束索引（不含）。</param>
      <param name="parallelOptions">一个对象，用于配置此操作的行为。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <exception cref="T:System.OperationCanceledException">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 参数为 null。 - 或 - <paramref name="parallelOptions" /> 参数为 null。</exception>
      <exception cref="T:System.AggregateException">包含在所有线程上引发的全部单个异常的异常。</exception>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationToken" /> 关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
      <summary>执行具有 64 位索引和线程本地数据的 for（（在 Visual Basic 中为 For）循环，其中可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</summary>
      <returns>包含有关已完成的循环部分的信息的结构。</returns>
      <param name="fromInclusive">开始索引（含）。</param>
      <param name="toExclusive">结束索引（不含）。</param>
      <param name="parallelOptions">一个对象，用于配置此操作的行为。</param>
      <param name="localInit">用于返回每个线程的本地数据的初始状态的函数委托。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <param name="localFinally">用于对每个线程的本地状态执行一个最终操作的委托。</param>
      <typeparam name="TLocal">线程本地数据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 参数为 null。 - 或 - <paramref name="localInit" /> 参数为 null。 - 或 - <paramref name="localFinally" /> 参数为 null。 - 或 - <paramref name="parallelOptions" /> 参数为 null。</exception>
      <exception cref="T:System.OperationCanceledException">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</exception>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationToken" /> 关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.AggregateException">包含在所有线程上引发的全部单个异常的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})">
      <summary>执行 foreach（在 Visual Basic 中为 For Each）操作，其中在 <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> 中可能会并行运行迭代，而且可以监视和操作循环的状态。</summary>
      <returns>包含有关已完成的循环部分的信息的结构。</returns>
      <param name="source">包含原始数据源的可排序分区程序。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 参数为 null。 - 或 - <paramref name="body" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">在 <paramref name="source" /> 可排序的分区程序的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 属性返回 false。 - 或 - 在 false 可排序的分区程序的 <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> 属性返回 。 - 或 - 在源可排序的分区程序的所有方法都返回 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})">
      <summary>执行具有线程本地数据的 foreach（在 Visual Basic 中为 For Each）操作，其中在 <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> 上可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</summary>
      <returns>包含有关已完成的循环部分的信息的结构。</returns>
      <param name="source">包含原始数据源的可排序分区程序。</param>
      <param name="localInit">用于返回每个任务的本地数据的初始状态的函数委托。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <param name="localFinally">用于对每个任务的本地状态执行一个最终操作的委托。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TLocal">线程本地数据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 参数为 null。 - 或 - <paramref name="body" /> 参数为 null。 - 或 - <paramref name="localInit" /> 参数为 null。 - 或 - <paramref name="localFinally" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">在 <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> 的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 属性返回 false 或分区程序返回 null 分区。</exception>
      <exception cref="T:System.AggregateException">包含在所有线程上引发的全部单个异常的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})">
      <summary>执行 foreach（在 Visual Basic 中为 For Each）操作，其中在 <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> 中可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</summary>
      <returns>包含有关已完成的循环部分的信息的结构。</returns>
      <param name="source">包含原始数据源的可排序分区程序。</param>
      <param name="parallelOptions">一个对象，用于配置此操作的行为。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" />参数。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 参数为 null。 - 或 - <paramref name="parallelOptions" /> 参数为 null。 - 或 - <paramref name="body" /> 参数为 null。</exception>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationToken" /> 关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">在 <paramref name="source" /> 可排序的分区程序的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 属性返回 false。 - 或 - 在 <paramref name="source" /> 可排序的分区程序的 <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> 属性返回 false。 - 或 - 当 <paramref name="source" /> 可排序分区程序中的任何方法返回 null 时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})">
      <summary>执行具有 64 位索引和线程本地数据的 foreach（在 Visual Basic 中为 For Each）操作，其中在 <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> 上可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</summary>
      <returns>包含有关已完成的循环部分的信息的结构。</returns>
      <param name="source">包含原始数据源的可排序分区程序。</param>
      <param name="parallelOptions">一个对象，用于配置此操作的行为。</param>
      <param name="localInit">用于返回每个任务的本地数据的初始状态的函数委托。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <param name="localFinally">用于对每个任务的本地状态执行一个最终操作的委托。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TLocal">线程本地数据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 参数为 null。 - 或 - <paramref name="parallelOptions" /> 参数为 null。 - 或 - <paramref name="body" /> 参数为 null。 - 或 - <paramref name="localInit" /> 或 <paramref name="localFinally" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">在 <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> 的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 属性返回 false 或分区程序返回 null 分区。</exception>
      <exception cref="T:System.AggregateException">包含在所有线程上引发的全部单个异常的异常。</exception>
      <exception cref="T:System.OperationCanceledException">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</exception>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationToken" /> 关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})">
      <summary>执行 foreach（在 Visual Basic 中为 For Each）操作，其中在 <see cref="T:System.Collections.Concurrent.Partitioner" /> 上可能会并行运行迭代。</summary>
      <returns>包含有关已完成的循环部分的信息的结构。</returns>
      <param name="source">包含原始数据源的分区程序。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 参数为 null。 - 或 - <paramref name="body" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">在 <paramref name="source" /> 的分区程序的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 属性返回 false。 - 或 - 在 <paramref name="source" /> 分区程序中的任何方法返回 null 时引发的异常。 - 或 - <paramref name="source" /> 分区程序中的 <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> 方法未返回正确的分区数时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})">
      <summary>执行 foreach（在 Visual Basic 中为 For Each）操作，其中在 <see cref="T:System.Collections.Concurrent.Partitioner" /> 中可能会并行运行迭代，而且可以监视和操作循环的状态。</summary>
      <returns>包含有关已完成的循环部分的信息的结构。</returns>
      <param name="source">包含原始数据源的分区程序。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 参数为 null。 - 或 - <paramref name="body" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">在 <paramref name="source" /> 的分区程序的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 属性返回 false。 - 或 - <paramref name="source" /> 分区程序中的方法返回 null。 - 或 - <paramref name="source" /> 分区程序中的 <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> 方法未返回正确的分区数时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})">
      <summary>执行具有线程本地数据的 foreach（在 Visual Basic 中为 For Each）操作，其中在 <see cref="T:System.Collections.Concurrent.Partitioner" /> 上可能会并行运行迭代，而且可以监视和操作循环的状态。</summary>
      <returns>包含有关已完成的循环部分的信息的结构。</returns>
      <param name="source">包含原始数据源的分区程序。</param>
      <param name="localInit">用于返回每个任务的本地数据的初始状态的函数委托。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <param name="localFinally">用于对每个任务的本地状态执行一个最终操作的委托。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TLocal">线程本地数据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 参数为 null。 - 或 - <paramref name="body" /> 参数为 null。 - 或 - <paramref name="localInit" /> 参数为 null。 - 或 - <paramref name="localFinally" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">在 <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> 的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 属性返回 false 或分区程序返回 null 分区。</exception>
      <exception cref="T:System.AggregateException">包含在所有线程上引发的全部单个异常的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})">
      <summary>执行 following examplereach（在 Visual Basic 中为 For Each）操作，其中在 <see cref="T:System.Collections.Concurrent.Partitioner" /> 中可能会并行运行迭代，而且可以配置循环选项。</summary>
      <returns>包含有关已完成的循环部分的信息的结构。</returns>
      <param name="source">包含原始数据源的分区程序。</param>
      <param name="parallelOptions">一个对象，用于配置此操作的行为。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</exception>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationToken" /> 关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 参数为 null。 - 或 - <paramref name="parallelOptions" /> 参数为 null。 - 或 - <paramref name="body" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">在 <paramref name="source" /> 的分区程序的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 属性返回 false。 - 或 - 在 <paramref name="source" /> 分区程序中的任何方法返回 null 时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})">
      <summary>执行 foreach（在 Visual Basic 中为 For Each）操作，其中在 <see cref="T:System.Collections.Concurrent.Partitioner" /> 中可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</summary>
      <returns>包含有关已完成的循环部分的信息的结构。</returns>
      <param name="source">包含原始数据源的分区程序。</param>
      <param name="parallelOptions">一个对象，用于配置此操作的行为。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</exception>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationToken" /> 关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 参数为 null。 - 或 - <paramref name="parallelOptions" /> 参数为 null。 - 或 - <paramref name="body" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">在 <paramref name="source" /> 的分区程序的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 属性返回 false。 - 或 - 在 <paramref name="source" /> 分区程序中的任何方法返回 null 时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})">
      <summary>执行具有线程本地数据的 foreach（在 Visual Basic 中为 For Each）操作，其中在 <see cref="T:System.Collections.Concurrent.Partitioner" /> 上可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</summary>
      <returns>包含有关已完成的循环部分的信息的结构。</returns>
      <param name="source">包含原始数据源的分区程序。</param>
      <param name="parallelOptions">一个对象，用于配置此操作的行为。</param>
      <param name="localInit">用于返回每个任务的本地数据的初始状态的函数委托。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <param name="localFinally">用于对每个任务的本地状态执行一个最终操作的委托。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TLocal">线程本地数据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 参数为 null。 - 或 - <paramref name="parallelOptions" /> 参数为 null。 - 或 - <paramref name="body" /> 参数为 null。 - 或 - <paramref name="localInit" /> 参数为 null。 - 或 - <paramref name="localFinally" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">在 <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> 的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 属性返回 false 或分区程序返回 null 分区。</exception>
      <exception cref="T:System.AggregateException">包含在所有线程上引发的全部单个异常的异常。</exception>
      <exception cref="T:System.OperationCanceledException">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</exception>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationToken" /> 关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
      <summary>执行 foreach（在 Visual Basic 中为 For Each）操作，其中在 <see cref="T:System.Collections.IEnumerable" /> 上可能会并行运行迭代。</summary>
      <returns>包含有关已完成的循环部分的信息的结构。</returns>
      <param name="source">可枚举的数据源。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <typeparam name="TSource">源中数据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 参数为 null。 - 或 - <paramref name="body" /> 参数为 null。</exception>
      <exception cref="T:System.AggregateException">包含在所有线程上引发的全部单个异常的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})">
      <summary>执行 foreach（在 Visual Basic 中为 For Each）操作，其中在 <see cref="T:System.Collections.IEnumerable" /> 中可能会并行运行迭代，而且可以监视和操作循环的状态。</summary>
      <returns>包含有关已完成的循环部分的信息的结构。</returns>
      <param name="source">可枚举的数据源。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <typeparam name="TSource">源中数据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 参数为 null。 - 或 - <paramref name="body" /> 参数为 null。</exception>
      <exception cref="T:System.AggregateException">包含在所有线程上引发的全部单个异常的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})">
      <summary>执行具有 64 位索引的 foreach（在 Visual Basic 中为 For Each）操作，其中在 <see cref="T:System.Collections.IEnumerable" /> 上可能会并行运行迭代，而且可以监视和操作循环的状态。</summary>
      <returns>包含有关已完成的循环部分的信息的结构。</returns>
      <param name="source">可枚举的数据源。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <typeparam name="TSource">源中数据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 参数为 null。 - 或 - <paramref name="body" /> 参数为 null。</exception>
      <exception cref="T:System.AggregateException">包含在所有线程上引发的全部单个异常的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})">
      <summary>执行具有线程本地数据的 foreach（在 Visual Basic 中为 For Each）操作，其中在 <see cref="T:System.Collections.IEnumerable" /> 上可能会并行运行迭代，而且可以监视和操作循环的状态。</summary>
      <returns>包含有关已完成的循环部分的信息的结构。</returns>
      <param name="source">可枚举的数据源。</param>
      <param name="localInit">用于返回每个任务的本地数据的初始状态的函数委托。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <param name="localFinally">用于对每个任务的本地状态执行一个最终操作的委托。</param>
      <typeparam name="TSource">源中数据的类型。</typeparam>
      <typeparam name="TLocal">线程本地数据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 参数为 null。 - 或 - <paramref name="body" /> 参数为 null。 - 或 - <paramref name="localInit" /> 参数为 null。 - 或 - <paramref name="localFinally" /> 参数为 null。</exception>
      <exception cref="T:System.AggregateException">包含在所有线程上引发的全部单个异常的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})">
      <summary>执行具有线程本地数据的 foreach（在 Visual Basic 中为 For Each）操作，其中在 <see cref="T:System.Collections.IEnumerable" /> 上可能会并行运行迭代，而且可以监视和操作循环的状态。</summary>
      <returns>包含有关已完成的循环部分的信息的结构。</returns>
      <param name="source">可枚举的数据源。</param>
      <param name="localInit">用于返回每个任务的本地数据的初始状态的函数委托。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <param name="localFinally">用于对每个任务的本地状态执行一个最终操作的委托。</param>
      <typeparam name="TSource">源中数据的类型。</typeparam>
      <typeparam name="TLocal">线程本地数据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 参数为 null。 - 或 - <paramref name="body" /> 参数为 null。 - 或 - <paramref name="localInit" /> 参数为 null。 - 或 - <paramref name="localFinally" /> 参数为 null。</exception>
      <exception cref="T:System.AggregateException">包含在所有线程上引发的全部单个异常的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})">
      <summary>执行 foreach（在 Visual Basic 中为 For Each）操作，其中在 <see cref="T:System.Collections.IEnumerable" /> 中可能会并行运行迭代，而且可以匹配配置循环选项。</summary>
      <returns>包含有关已完成的循环部分的信息的结构。</returns>
      <param name="source">可枚举的数据源。</param>
      <param name="parallelOptions">一个对象，用于配置此操作的行为。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <typeparam name="TSource">源中数据的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" />参数。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 参数为 null。 - 或 - <paramref name="parallelOptions" /> 参数为 null。 - 或 - <paramref name="body" /> 参数为 null。</exception>
      <exception cref="T:System.AggregateException">包含在所有线程上引发的全部单个异常的异常。</exception>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationToken" /> 关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})">
      <summary>执行 foreach（在 Visual Basic 中为 For Each）操作，其中在 <see cref="T:System.Collections.IEnumerable" /> 中可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</summary>
      <returns>包含有关已完成的循环部分的信息的结构。</returns>
      <param name="source">可枚举的数据源。</param>
      <param name="parallelOptions">一个对象，用于配置此操作的行为。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <typeparam name="TSource">源中数据的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" />参数。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 参数为 null。 - 或 - <paramref name="parallelOptions" /> 参数为 null。 - 或 - <paramref name="body" /> 参数为 null。</exception>
      <exception cref="T:System.AggregateException">包含在所有线程上引发的全部单个异常的异常。</exception>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationToken" /> 关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})">
      <summary>执行具有 64 位索引的 foreach（在 Visual Basic 中为 For Each）操作，其中在 <see cref="T:System.Collections.IEnumerable" /> 上可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</summary>
      <returns>包含有关已完成的循环部分的信息的结构。</returns>
      <param name="source">可枚举的数据源。</param>
      <param name="parallelOptions">一个对象，用于配置此操作的行为。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <typeparam name="TSource">源中数据的类型。</typeparam>
      <exception cref="T:System.OperationCanceledException">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" />参数。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 参数为 null。 - 或 - <paramref name="parallelOptions" /> 参数为 null。 - 或 - <paramref name="body" /> 参数为 null。</exception>
      <exception cref="T:System.AggregateException">包含在所有线程上引发的全部单个异常的异常。</exception>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationToken" /> 关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})">
      <summary>执行具有线程本地数据的 foreach（在 Visual Basic 中为 For Each）操作，其中在 <see cref="T:System.Collections.IEnumerable" /> 上可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</summary>
      <returns>包含有关已完成的循环部分的信息的结构。</returns>
      <param name="source">可枚举的数据源。</param>
      <param name="parallelOptions">一个对象，用于配置此操作的行为。</param>
      <param name="localInit">用于返回每个任务的本地数据的初始状态的函数委托。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <param name="localFinally">用于对每个任务的本地状态执行一个最终操作的委托。</param>
      <typeparam name="TSource">源中数据的类型。</typeparam>
      <typeparam name="TLocal">线程本地数据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 参数为 null。 - 或 - <paramref name="parallelOptions" /> 参数为 null。 - 或 - <paramref name="body" /> 参数为 null。 - 或 - <paramref name="localInit" /> 参数为 null。 - 或 - <paramref name="localFinally" /> 参数为 null。</exception>
      <exception cref="T:System.OperationCanceledException">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</exception>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationToken" /> 关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.AggregateException">包含在所有线程上引发的全部单个异常的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})">
      <summary>执行具有线程本地数据和 64 位索引的 foreach（在 Visual Basic 中为 For Each）操作，其中在 <see cref="T:System.Collections.IEnumerable" /> 上可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</summary>
      <returns>包含有关已完成的循环部分的信息的结构。</returns>
      <param name="source">可枚举的数据源。</param>
      <param name="parallelOptions">一个对象，用于配置此操作的行为。</param>
      <param name="localInit">用于返回每个任务的本地数据的初始状态的函数委托。</param>
      <param name="body">将为每个迭代调用一次的委托。</param>
      <param name="localFinally">用于对每个任务的本地状态执行一个最终操作的委托。</param>
      <typeparam name="TSource">源中数据的类型。</typeparam>
      <typeparam name="TLocal">线程本地数据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 参数为 null。 - 或 - <paramref name="parallelOptions" /> 参数为 null。 - 或 - <paramref name="body" /> 参数为 null。 - 或 - <paramref name="localInit" /> 参数为 null。 - 或 - <paramref name="localFinally" /> 参数为 null。</exception>
      <exception cref="T:System.OperationCanceledException">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</exception>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationToken" /> 关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.AggregateException">包含在所有线程上引发的全部单个异常的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.Invoke(System.Action[])">
      <summary>尽可能并行执行提供的每个操作。</summary>
      <param name="actions">要执行的 <see cref="T:System.Action" /> 数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="actions" /> 参数为 null。</exception>
      <exception cref="T:System.AggregateException">当 <paramref name="actions" /> 数组中的任何操作引发异常时引发的异常。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actions" />数组包含 null 个元素。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])">
      <summary>执行所提供的每个操作，而且尽可能并行运行，除非用户取消了操作。</summary>
      <param name="parallelOptions">一个对象，用于配置此操作的行为。</param>
      <param name="actions">要执行的操作数组。</param>
      <exception cref="T:System.OperationCanceledException">
        <see cref="T:System.Threading.CancellationToken" /> 处于 <paramref name="parallelOptions" /> 设置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="actions" /> 参数为 null。 - 或 - <paramref name="parallelOptions" /> 参数为 null。</exception>
      <exception cref="T:System.AggregateException">当 <paramref name="actions" /> 数组中的任何操作引发异常时引发的异常。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actions" />数组包含 null 个元素。</exception>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationToken" /> 关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
    </member>
    <member name="T:System.Threading.Tasks.ParallelLoopResult">
      <summary>提供执行 <see cref="T:System.Threading.Tasks.Parallel" /> 循环的完成状态。</summary>
    </member>
    <member name="P:System.Threading.Tasks.ParallelLoopResult.IsCompleted">
      <summary>获取该循环是否已运行完成（即，该循环的所有迭代均已执行，并且该循环没有收到提前结束的请求）。</summary>
      <returns>如果该循环已运行完成，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration">
      <summary>获取从中调用 <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 的最低迭代的索引。</summary>
      <returns>返回一个表示从中调用 Break 语句的最低迭代的整数。</returns>
    </member>
    <member name="T:System.Threading.Tasks.ParallelLoopState">
      <summary>可用来使 <see cref="T:System.Threading.Tasks.Parallel" /> 循环的迭代与其他迭代交互。 此类的实例由 Parallel 类提供给每个循环；不能在您的用户代码中创建实例。</summary>
    </member>
    <member name="M:System.Threading.Tasks.ParallelLoopState.Break">
      <summary>告知 <see cref="T:System.Threading.Tasks.Parallel" /> 循环应在系统方便的时候尽早停止执行当前迭代之外的迭代。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> 方法以前被调用过。 <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 和 <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> 不能被相同循环的迭代组合使用。</exception>
    </member>
    <member name="P:System.Threading.Tasks.ParallelLoopState.IsExceptional">
      <summary>获取循环的任何迭代是否已引发相应迭代未处理的异常。</summary>
      <returns>如果引发了未经处理的异常，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
      <summary>获取循环的任何迭代是否已调用 <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />。</summary>
      <returns>如果任何迭代已停止循环，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
      <summary>获取从中调用 <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 的最低循环迭代。</summary>
      <returns>一个表示从中调用 Break 的最低迭代的整数。 如果是 <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> 循环，该值会基于内部生成的索引。</returns>
    </member>
    <member name="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
      <summary>获取循环的当前迭代是否应基于此迭代或其他迭代发出的请求退出。</summary>
      <returns>如果当前迭代应退出，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ParallelLoopState.Stop">
      <summary>告知 <see cref="T:System.Threading.Tasks.Parallel" /> 循环应在系统方便的时候尽早停止执行。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 方法以前被调用过。 <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 和 <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> 不能被相同循环的迭代组合使用。</exception>
    </member>
    <member name="T:System.Threading.Tasks.ParallelOptions">
      <summary>存储用于配置 <see cref="T:System.Threading.Tasks.Parallel" /> 类的方法的操作的选项。</summary>
    </member>
    <member name="M:System.Threading.Tasks.ParallelOptions.#ctor">
      <summary>初始化 <see cref="T:System.Threading.Tasks.ParallelOptions" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Threading.Tasks.ParallelOptions.CancellationToken">
      <summary>获取或设置与此 <see cref="T:System.Threading.Tasks.ParallelOptions" /> 实例关联的 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <returns>与此实例关联的标记。</returns>
    </member>
    <member name="P:System.Threading.Tasks.ParallelOptions.MaxDegreeOfParallelism">
      <summary>获取或设置此 ParallelOptions 实例所允许的最大并行度。</summary>
      <returns>一个表示最大并行度的整数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">当此 <see cref="P:System.Threading.Tasks.ParallelOptions.MaxDegreeOfParallelism" /> 设置为 0 或小于 -1 的某个值时引发的异常。</exception>
    </member>
    <member name="P:System.Threading.Tasks.ParallelOptions.TaskScheduler">
      <summary>获取或设置与此 <see cref="T:System.Threading.Tasks.ParallelOptions" /> 实例关联的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。 将此属性设置为 null，以指示应使用当前计划程序。</summary>
      <returns>与此实例关联的任务计划程序。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Task">
      <summary>表示一个异步操作。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action)">
      <summary>使用指定的操作初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">表示要在任务中执行的代码的委托。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)">
      <summary>用指定的操作和 <see cref="T:System.Threading.CancellationToken" /> 初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">表示要在任务中执行的代码的委托。</param>
      <param name="cancellationToken">新任务将观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的操作和创建选项初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">表示要在任务中执行的代码的委托。</param>
      <param name="cancellationToken">新任务将观察的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <param name="creationOptions">用于自定义任务的行为的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</param>
      <exception cref="T:System.ObjectDisposedException">创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 指定无效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的操作和创建选项初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">表示要在任务中执行的代码的委托。</param>
      <param name="creationOptions">用于自定义任务的行为的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 指定无效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)">
      <summary>使用指定的操作和状态初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">表示要在任务中执行的代码的委托。</param>
      <param name="state">一个表示由该操作使用的数据的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
      <summary>使用指定的操作、状态和选项初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">表示要在任务中执行的代码的委托。</param>
      <param name="state">一个表示由该操作使用的数据的对象。</param>
      <param name="cancellationToken">新任务将观察的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的操作、状态和选项初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">表示要在任务中执行的代码的委托。</param>
      <param name="state">一个表示由该操作使用的数据的对象。</param>
      <param name="cancellationToken">新任务将观察的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <param name="creationOptions">用于自定义任务的行为的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</param>
      <exception cref="T:System.ObjectDisposedException">创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 指定无效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的操作、状态和选项初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">表示要在任务中执行的代码的委托。</param>
      <param name="state">一个表示由该操作使用的数据的对象。</param>
      <param name="creationOptions">用于自定义任务的行为的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 指定无效值。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.AsyncState">
      <summary>获取在创建 <see cref="T:System.Threading.Tasks.Task" /> 时提供的状态对象，如果未提供，则为 null。</summary>
      <returns>一个 <see cref="T:System.Object" />，表示在创建任务时传递给该任务的状态数据。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时异步执行的延续任务。</summary>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="continuationAction">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的操作。 在运行时，委托将作为一个参数传递给完成的任务。</param>
      <exception cref="T:System.ObjectDisposedException">创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时异步执行的延续任务。</summary>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="continuationAction">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的操作。 在运行时，委托将作为一个参数传递给完成的任务。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已被释放。 - 或 - 创建了该标记的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个按照指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 执行的延续任务。</summary>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="continuationAction">根据在 <paramref name="continuationOptions" /> 中指定的条件运行的操作。 在运行时，委托将作为一个参数传递给完成的任务。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <param name="continuationOptions">用于设置计划延续任务的时间以及延续任务的工作方式的选项。 这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</param>
      <param name="scheduler">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已被释放。 - 或 - 创建了该标记的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 参数为 null。 - 或 - <paramref name="scheduler" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个按照指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 执行的延续任务。</summary>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="continuationAction">根据在 <paramref name="continuationOptions" /> 中指定的条件运行的操作。 在运行时，委托将作为一个参数传递给完成的任务。</param>
      <param name="continuationOptions">用于设置计划延续任务的时间以及延续任务的工作方式的选项。 这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时异步执行的延续任务。</summary>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="continuationAction">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的操作。 在运行时，委托将作为一个参数传递给完成的任务。</param>
      <param name="scheduler">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 参数为 null。 - 或 - <paramref name="scheduler" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时异步执行的延续任务。</summary>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="continuationFunction">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的函数。 在运行时，委托将作为一个参数传递给完成的任务。</param>
      <typeparam name="TResult">延续任务生成的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时异步执行的延续任务。</summary>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="continuationFunction">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的函数。 在运行时，委托将作为一个参数传递给完成的任务。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <typeparam name="TResult">延续任务生成的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已被释放。 - 或 - 创建了该标记的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个按照条件指定的 <paramref name="continuationOptions" /> 执行的延续任务。</summary>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="continuationFunction">根据 <paramref name="continuationOptions." /> 中指定的条件运行函数。在运行时，委托将作为一个自变量传递给完成的任务。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <param name="continuationOptions">用于设置计划延续任务的时间以及延续任务的工作方式的选项。 这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</param>
      <param name="scheduler">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TResult">延续任务生成的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已被释放。 - 或 - 创建了该标记的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 参数为 null。 - 或 - <paramref name="scheduler" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个按照条件指定的 <paramref name="continuationOptions" /> 执行的延续任务。</summary>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="continuationFunction">根据 <paramref name="continuationOptions" /> 中指定的条件运行函数。 在运行时，委托将作为一个参数传递给完成的任务。</param>
      <param name="continuationOptions">用于设置计划延续任务的时间以及延续任务的工作方式的选项。 这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</param>
      <typeparam name="TResult">延续任务生成的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时异步执行的延续任务。</summary>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="continuationFunction">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的函数。 在运行时，委托将作为一个参数传递给完成的任务。</param>
      <param name="scheduler">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TResult">延续任务生成的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 参数为 null。 - 或 - <paramref name="scheduler" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.CreationOptions">
      <summary>获取用于创建此任务的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</summary>
      <returns>用于创建此任务的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.CurrentId">
      <summary>返回当前正在执行的 <see cref="T:System.Threading.Tasks.Task" /> 的唯一 ID。</summary>
      <returns>系统分配给当前正在执行的任务的一个整数。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.Exception">
      <summary>获取导致 <see cref="T:System.Threading.Tasks.Task" /> 提前结束的 <see cref="T:System.AggregateException" />。 如果 <see cref="T:System.Threading.Tasks.Task" /> 成功完成或尚未引发任何异常，这将返回 null。</summary>
      <returns>导致 <see cref="T:System.Threading.Tasks.Task" /> 提前结束的 <see cref="T:System.AggregateException" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.Factory">
      <summary>提供对用于创建 <see cref="T:System.Threading.Tasks.Task" /> 和 <see cref="T:System.Threading.Tasks.Task`1" /> 实例的工厂方法的访问。</summary>
      <returns>当前任务的默认 <see cref="T:System.Threading.Tasks.TaskFactory" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.Id">
      <summary>获取此 <see cref="T:System.Threading.Tasks.Task" /> 实例的唯一 ID。</summary>
      <returns>系统分配给此任务实例的一个整数。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.IsCanceled">
      <summary>获取此 <see cref="T:System.Threading.Tasks.Task" /> 实例是否由于被取消的原因而已完成执行。</summary>
      <returns>如果任务由于被取消而完成，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.IsCompleted">
      <summary>获取此 <see cref="T:System.Threading.Tasks.Task" /> 是否已完成。</summary>
      <returns>如果任务已完成，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.IsFaulted">
      <summary>获取 <see cref="T:System.Threading.Tasks.Task" /> 是否由于未经处理异常的原因而完成。</summary>
      <returns>如果任务引发了未经处理的异常，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.RunSynchronously">
      <summary>对当前的 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 同步运行 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <exception cref="T:System.ObjectDisposedException">已释放 <see cref="T:System.Threading.Tasks.Task" /> 实例。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Threading.Tasks.Task" /> 未处于有效状态，无法启动。 它可能已启动、已执行或已取消，或者可能已经以不支持直接计划的方式创建。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)">
      <summary>对提供的 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 同步运行 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="scheduler">尝试对其以内联方式运行此任务的计划程序。</param>
      <exception cref="T:System.ObjectDisposedException">已释放 <see cref="T:System.Threading.Tasks.Task" /> 实例。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Threading.Tasks.Task" /> 未处于有效状态，无法启动。 它可能已启动、已执行或已取消，或者可能已经以不支持直接计划的方式创建。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Start">
      <summary>启动 <see cref="T:System.Threading.Tasks.Task" />，并将它安排到当前的 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 中执行。</summary>
      <exception cref="T:System.ObjectDisposedException">已释放 <see cref="T:System.Threading.Tasks.Task" /> 实例。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Threading.Tasks.Task" /> 未处于有效状态，无法启动。 它可能已启动、已执行或已取消，或者可能已经以不支持直接计划的方式创建。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)">
      <summary>启动 <see cref="T:System.Threading.Tasks.Task" />，并将它安排到指定的 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 中执行。</summary>
      <param name="scheduler">要关联并执行此任务的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <exception cref="T:System.ObjectDisposedException">已释放 <see cref="T:System.Threading.Tasks.Task" /> 实例。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Threading.Tasks.Task" /> 未处于有效状态，无法启动。 它可能已启动、已执行或已取消，或者可能已经以不支持直接计划的方式创建。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.Status">
      <summary>获取此任务的 <see cref="T:System.Threading.Tasks.TaskStatus" />。</summary>
      <returns>此任务实例的当前 <see cref="T:System.Threading.Tasks.TaskStatus" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle">
      <summary>获取可用于等待任务完成的 <see cref="T:System.Threading.WaitHandle" />。</summary>
      <returns>可用于等待任务完成的 <see cref="T:System.Threading.WaitHandle" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已被释放。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously">
      <summary>获取操作是否已同步完成的指示。</summary>
      <returns>如果操作已同步完成，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait">
      <summary>等待 <see cref="T:System.Threading.Tasks.Task" /> 完成执行过程。</summary>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已被释放。</exception>
      <exception cref="T:System.AggregateException">
        <see cref="T:System.Threading.Tasks.Task" /> 已取消 - 或 - 在 <see cref="T:System.Threading.Tasks.Task" /> 的执行期间引发了异常。 如果任务已被取消，<see cref="T:System.AggregateException" /> 将包含其 <see cref="P:System.AggregateException.InnerExceptions" /> 集合中的 <see cref="T:System.OperationCanceledException" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.Int32)">
      <summary>等待 <see cref="T:System.Threading.Tasks.Task" /> 完成执行过程。</summary>
      <returns>如果在分配的时间内 <see cref="T:System.Threading.Tasks.Task" /> 完成执行，则为 true；否则为 false。</returns>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.AggregateException">
        <see cref="T:System.Threading.Tasks.Task" /> 已取消 - 或 - 在 <see cref="T:System.Threading.Tasks.Task" /> 的执行期间引发了异常。 如果任务已被取消，<see cref="T:System.AggregateException" /> 将包含其 <see cref="P:System.AggregateException.InnerExceptions" /> 集合中的 <see cref="T:System.OperationCanceledException" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
      <summary>等待 <see cref="T:System.Threading.Tasks.Task" /> 完成执行过程。</summary>
      <returns>如果在分配的时间内 <see cref="T:System.Threading.Tasks.Task" /> 完成执行，则为 true；否则为 false。</returns>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.AggregateException">
        <see cref="T:System.Threading.Tasks.Task" /> 已取消 - 或 - 在 <see cref="T:System.Threading.Tasks.Task" /> 的执行期间引发了异常。 如果任务已被取消，<see cref="T:System.AggregateException" /> 将包含其 <see cref="P:System.AggregateException.InnerExceptions" /> 集合中的 <see cref="T:System.OperationCanceledException" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)">
      <summary>等待 <see cref="T:System.Threading.Tasks.Task" /> 完成执行过程。</summary>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已被释放。</exception>
      <exception cref="T:System.AggregateException">
        <see cref="T:System.Threading.Tasks.Task" /> 已取消 - 或 - 在 <see cref="T:System.Threading.Tasks.Task" /> 的执行期间引发了异常。 如果任务已被取消，<see cref="T:System.AggregateException" /> 将包含其 <see cref="P:System.AggregateException.InnerExceptions" /> 集合中的 <see cref="T:System.OperationCanceledException" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
      <summary>等待 <see cref="T:System.Threading.Tasks.Task" /> 完成执行过程。</summary>
      <returns>如果在分配的时间内 <see cref="T:System.Threading.Tasks.Task" /> 完成执行，则为 true；否则为 false。</returns>
      <param name="timeout">表示等待的毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是 -1 毫秒之外的负数，表示无限超时或者超时大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.AggregateException">
        <see cref="T:System.Threading.Tasks.Task" /> 已取消 - 或 - 在 <see cref="T:System.Threading.Tasks.Task" /> 的执行期间引发了异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])">
      <summary>等待提供的所有 <see cref="T:System.Threading.Tasks.Task" /> 对象完成执行过程。</summary>
      <param name="tasks">要等待的 <see cref="T:System.Threading.Tasks.Task" /> 实例的数组。</param>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 中的一个或多个 <see cref="T:System.Threading.Tasks.Task" /> 对象已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 参数为 null。 - 或 - <paramref name="tasks" /> 参数包含 null 元素。</exception>
      <exception cref="T:System.AggregateException">至少有一个 <see cref="T:System.Threading.Tasks.Task" /> 实例已取消 - 或 - 在至少一个 <see cref="T:System.Threading.Tasks.Task" /> 实例的执行过程中引发了异常。 如果任务已被取消，<see cref="T:System.AggregateException" /> 将包含在其 <see cref="P:System.AggregateException.InnerExceptions" /> 集合中的 <see cref="T:System.OperationCanceledException" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)">
      <summary>等待提供的所有 <see cref="T:System.Threading.Tasks.Task" /> 对象完成执行过程。</summary>
      <returns>如果在分配的时间内所有 <see cref="T:System.Threading.Tasks.Task" /> 实例都已完成执行，则为 true；否则为 false。</returns>
      <param name="tasks">要等待的 <see cref="T:System.Threading.Tasks.Task" /> 实例的数组。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 中的一个或多个 <see cref="T:System.Threading.Tasks.Task" /> 对象已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 参数为 null。</exception>
      <exception cref="T:System.AggregateException">至少有一个 <see cref="T:System.Threading.Tasks.Task" /> 实例已取消 - 或 - 在至少一个 <see cref="T:System.Threading.Tasks.Task" /> 实例的执行过程中引发了异常。 如果任务已被取消，<see cref="T:System.AggregateException" /> 将包含在其 <see cref="P:System.AggregateException.InnerExceptions" /> 集合中的 <see cref="T:System.OperationCanceledException" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 参数包含 null 元素。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
      <summary>等待提供的所有 <see cref="T:System.Threading.Tasks.Task" /> 对象完成执行过程。</summary>
      <returns>如果在分配的时间内所有 <see cref="T:System.Threading.Tasks.Task" /> 实例都已完成执行，则为 true；否则为 false。</returns>
      <param name="tasks">要等待的 <see cref="T:System.Threading.Tasks.Task" /> 实例的数组。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 中的一个或多个 <see cref="T:System.Threading.Tasks.Task" /> 对象已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 参数为 null。</exception>
      <exception cref="T:System.AggregateException">至少有一个 <see cref="T:System.Threading.Tasks.Task" /> 实例已取消 - 或 - 在至少一个 <see cref="T:System.Threading.Tasks.Task" /> 实例的执行过程中引发了异常。 如果任务已被取消，<see cref="T:System.AggregateException" /> 将包含在其 <see cref="P:System.AggregateException.InnerExceptions" /> 集合中的 <see cref="T:System.OperationCanceledException" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 参数包含 null 元素。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
      <summary>等待提供的所有 <see cref="T:System.Threading.Tasks.Task" /> 对象完成执行过程。</summary>
      <param name="tasks">要等待的 <see cref="T:System.Threading.Tasks.Task" /> 实例的数组。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 参数为 null。</exception>
      <exception cref="T:System.AggregateException">至少有一个 <see cref="T:System.Threading.Tasks.Task" /> 实例已取消 - 或 - 在至少一个 <see cref="T:System.Threading.Tasks.Task" /> 实例的执行过程中引发了异常。 如果任务已被取消，<see cref="T:System.AggregateException" /> 将包含在其 <see cref="P:System.AggregateException.InnerExceptions" /> 集合中的 <see cref="T:System.OperationCanceledException" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 参数包含 null 元素。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 中的一个或多个 <see cref="T:System.Threading.Tasks.Task" /> 对象已被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)">
      <summary>等待提供的所有 <see cref="T:System.Threading.Tasks.Task" /> 对象完成执行过程。</summary>
      <returns>如果在分配的时间内所有 <see cref="T:System.Threading.Tasks.Task" /> 实例都已完成执行，则为 true；否则为 false。</returns>
      <param name="tasks">要等待的 <see cref="T:System.Threading.Tasks.Task" /> 实例的数组。</param>
      <param name="timeout">表示等待的毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 中的一个或多个 <see cref="T:System.Threading.Tasks.Task" /> 对象已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 参数为 null。</exception>
      <exception cref="T:System.AggregateException">至少有一个 <see cref="T:System.Threading.Tasks.Task" /> 实例已取消 - 或 - 在至少一个 <see cref="T:System.Threading.Tasks.Task" /> 实例的执行过程中引发了异常。 如果任务已被取消，<see cref="T:System.AggregateException" /> 将包含在其 <see cref="P:System.AggregateException.InnerExceptions" /> 集合中的 <see cref="T:System.OperationCanceledException" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是 -1 毫秒之外的负数，表示无限超时或者超时大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 参数包含 null 元素。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])">
      <summary>等待提供的任何 <see cref="T:System.Threading.Tasks.Task" /> 对象完成执行过程。</summary>
      <returns>已完成的任务在 <paramref name="tasks" /> 数组参数中的索引。</returns>
      <param name="tasks">要等待的 <see cref="T:System.Threading.Tasks.Task" /> 实例的数组。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 参数包含 null 元素。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)">
      <summary>等待提供的任何 <see cref="T:System.Threading.Tasks.Task" /> 对象完成执行过程。</summary>
      <returns>已完成的任务在 <paramref name="tasks" /> 数组参数中的索引，如果发生超时，则为 -1。</returns>
      <param name="tasks">要等待的 <see cref="T:System.Threading.Tasks.Task" /> 实例的数组。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 参数包含 null 元素。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
      <summary>等待提供的任何 <see cref="T:System.Threading.Tasks.Task" /> 对象完成执行过程。</summary>
      <returns>已完成的任务在 <paramref name="tasks" /> 数组参数中的索引，如果发生超时，则为 -1。</returns>
      <param name="tasks">要等待的 <see cref="T:System.Threading.Tasks.Task" /> 实例的数组。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 参数包含 null 元素。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
      <summary>等待提供的任何 <see cref="T:System.Threading.Tasks.Task" /> 对象完成执行过程。</summary>
      <returns>已完成的任务在 <paramref name="tasks" /> 数组参数中的索引。</returns>
      <param name="tasks">要等待的 <see cref="T:System.Threading.Tasks.Task" /> 实例的数组。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 参数包含 null 元素。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)">
      <summary>等待提供的任何 <see cref="T:System.Threading.Tasks.Task" /> 对象完成执行过程。</summary>
      <returns>已完成的任务在 <paramref name="tasks" /> 数组参数中的索引，如果发生超时，则为 -1。</returns>
      <param name="tasks">要等待的 <see cref="T:System.Threading.Tasks.Task" /> 实例的数组。</param>
      <param name="timeout">表示等待的毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是 -1 毫秒之外的负数，表示无限超时或者超时大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 参数包含 null 元素。</exception>
    </member>
    <member name="T:System.Threading.Tasks.Task`1">
      <summary>表示一个可以返回值的异步操作。</summary>
      <typeparam name="TResult">此 <see cref="T:System.Threading.Tasks.Task`1" /> 生成的结果的类型。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0})">
      <summary>使用指定的函数初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">表示要在任务中执行的代码的委托。 在完成此函数后，该任务的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将设置为返回此函数的结果值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken)">
      <summary>使用指定的函数初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">表示要在任务中执行的代码的委托。 在完成此函数后，该任务的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将设置为返回此函数的结果值。</param>
      <param name="cancellationToken">将指派给此任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">创建了 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的函数和创建选项初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">表示要在任务中执行的代码的委托。 在完成此函数后，该任务的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将设置为返回此函数的结果值。</param>
      <param name="cancellationToken">将指派给新任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="creationOptions">用于自定义任务的行为的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</param>
      <exception cref="T:System.ObjectDisposedException">创建了 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 指定无效值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的函数和创建选项初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">表示要在任务中执行的代码的委托。 在完成此函数后，该任务的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将设置为返回此函数的结果值。</param>
      <param name="creationOptions">用于自定义任务的行为的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 指定无效值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)">
      <summary>使用指定的函数和状态初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">表示要在任务中执行的代码的委托。 在完成此函数后，该任务的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将设置为返回此函数的结果值。</param>
      <param name="state">一个表示由该操作使用的数据的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
      <summary>使用指定的操作、状态和选项初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">表示要在任务中执行的代码的委托。 在完成此函数后，该任务的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将设置为返回此函数的结果值。</param>
      <param name="state">一个表示将由此函数使用的数据的对象。</param>
      <param name="cancellationToken">将指派给新任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">创建了 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的操作、状态和选项初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">表示要在任务中执行的代码的委托。 在完成此函数后，该任务的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将设置为返回此函数的结果值。</param>
      <param name="state">一个表示将由此函数使用的数据的对象。</param>
      <param name="cancellationToken">将指派给新任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="creationOptions">用于自定义任务的行为的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</param>
      <exception cref="T:System.ObjectDisposedException">创建了 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 指定无效值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的操作、状态和选项初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">表示要在任务中执行的代码的委托。 在完成此函数后，该任务的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将设置为返回此函数的结果值。</param>
      <param name="state">一个表示将由此函数使用的数据的对象。</param>
      <param name="creationOptions">用于自定义任务的行为的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 指定无效值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时异步执行的延续任务。</summary>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="continuationAction">在 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时要运行的操作。 在运行时，委托将作为一个参数传递给完成的任务。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task`1" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时异步执行的延续任务。</summary>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="continuationAction">在 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时要运行的操作。 在运行时，委托将作为一个参数传递给完成的任务。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task`1" /> 已被释放。 - 或 - 创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建根据 <paramref name="continuationOptions" /> 中指定的条件加以执行的延续任务。</summary>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="continuationAction">根据在 <paramref name="continuationOptions" /> 中指定的条件运行的操作。 在运行时，委托将作为一个参数传递给完成的任务。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">用于设置计划延续任务的时间以及延续任务的工作方式的选项。 这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</param>
      <param name="scheduler">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task`1" /> 已被释放。 - 或 - 创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 参数为 null。 - 或 - <paramref name="scheduler" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建根据 <paramref name="continuationOptions" /> 中指定的条件加以执行的延续任务。</summary>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="continuationAction">在 <paramref name="continuationOptions" /> 中指定的条件的操作。 在运行时，委托将作为一个参数传递给完成的任务。</param>
      <param name="continuationOptions">用于设置计划延续任务的时间以及延续任务的工作方式的选项。 这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task`1" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时异步执行的延续任务。</summary>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="continuationAction">在 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时要运行的操作。 在运行时，委托将作为一个参数传递给完成的任务。</param>
      <param name="scheduler">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task`1" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 参数为 null。 - 或 - <paramref name="scheduler" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时异步执行的延续任务。</summary>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="continuationFunction">在 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时要运行的函数。 在运行时，委托将作为一个参数传递给完成的任务。</param>
      <typeparam name="TNewResult">延续任务生成的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task`1" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时异步执行的延续任务。</summary>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="continuationFunction">在 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时要运行的函数。 在运行时，委托将作为一个参数传递给完成的任务。</param>
      <param name="cancellationToken">将指派给新任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TNewResult">延续任务生成的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task`1" /> 已被释放。 - 或 - 创建了 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建根据 <paramref name="continuationOptions" /> 中指定的条件加以执行的延续任务。</summary>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="continuationFunction">根据 <paramref name="continuationOptions" /> 中指定的条件运行函数。 在运行时，委托将作为一个参数传递给此完成的任务。</param>
      <param name="cancellationToken">将指派给新任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">用于设置计划延续任务的时间以及延续任务的工作方式的选项。 这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</param>
      <param name="scheduler">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TNewResult">延续任务生成的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task`1" /> 已被释放。 - 或 - 创建了 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 参数为 null。 - 或 - <paramref name="scheduler" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建根据 <paramref name="continuationOptions" /> 中指定的条件加以执行的延续任务。</summary>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="continuationFunction">根据 <paramref name="continuationOptions" /> 中指定的条件运行函数。 在运行时，委托将作为一个参数传递给完成的任务。</param>
      <param name="continuationOptions">用于设置计划延续任务的时间以及延续任务的工作方式的选项。 这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</param>
      <typeparam name="TNewResult">延续任务生成的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task`1" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时异步执行的延续任务。</summary>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="continuationFunction">在 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时要运行的函数。 在运行时，委托将作为一个参数传递给完成的任务。</param>
      <param name="scheduler">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TNewResult">延续任务生成的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task`1" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 参数为 null。 - 或 - <paramref name="scheduler" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task`1.Factory">
      <summary>提供对用于创建 <see cref="T:System.Threading.Tasks.Task`1" /> 实例的工厂方法的访问。</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 的默认实例。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task`1.Result">
      <summary>获取此 <see cref="T:System.Threading.Tasks.Task`1" /> 的结果值。</summary>
      <returns>此 <see cref="T:System.Threading.Tasks.Task`1" /> 的结果值，该值类型与任务参数类型相同。</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskCanceledException">
      <summary>表示一个用于告知任务取消的异常。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor">
      <summary>使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.Threading.Tasks.Task)">
      <summary>使用对已取消的 <see cref="T:System.Threading.Tasks.Task" /> 的引用初始化 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 类的新实例。</summary>
      <param name="task">已取消的任务。</param>
    </member>
    <member name="P:System.Threading.Tasks.TaskCanceledException.Task">
      <summary>获取与此异常关联的任务。</summary>
      <returns>对与此异常关联的 <see cref="T:System.Threading.Tasks.Task" /> 的引用。</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskCompletionSource`1">
      <summary>表示未绑定到委托的 <see cref="T:System.Threading.Tasks.Task`1" /> 的制造者方，并通过 <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> 属性提供对使用者方的访问。</summary>
      <typeparam name="TResult">与此 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> 关联的结果值的类型。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object)">
      <summary>使用指定的状态创建一个 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />。</summary>
      <param name="state">要用作基础 <see cref="T:System.Threading.Tasks.Task`1" /> 的 AsyncState 的状态。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的状态和选项创建一个 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />。</summary>
      <param name="state">要用作基础 <see cref="T:System.Threading.Tasks.Task`1" /> 的 AsyncState 的状态。</param>
      <param name="creationOptions">创建基础 <see cref="T:System.Threading.Tasks.Task`1" /> 时要使用的选项。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 表示与 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> 一起使用时无效的选项。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的选项创建一个 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />。</summary>
      <param name="creationOptions">创建基础 <see cref="T:System.Threading.Tasks.Task`1" /> 时要使用的选项。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 表示与 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> 一起使用时无效的选项。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetCanceled">
      <summary>将基础 <see cref="T:System.Threading.Tasks.Task`1" /> 转换为 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> 状态。</summary>
      <exception cref="T:System.InvalidOperationException">基础 <see cref="T:System.Threading.Tasks.Task`1" /> 已经处于三个最终状态之一： <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />、 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 或 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />；或者基础 <see cref="T:System.Threading.Tasks.Task`1" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>将基础 <see cref="T:System.Threading.Tasks.Task`1" /> 转换为 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状态。</summary>
      <param name="exceptions">要绑定到此 <see cref="T:System.Threading.Tasks.Task`1" /> 的异常的集合。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> 已处理。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exceptions" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">在 <paramref name="exceptions" /> 中有一个或多个 null 元素。</exception>
      <exception cref="T:System.InvalidOperationException">基础 <see cref="T:System.Threading.Tasks.Task`1" /> 已经处于三个最终状态之一： <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 或 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Exception)">
      <summary>将基础 <see cref="T:System.Threading.Tasks.Task`1" /> 转换为 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状态。</summary>
      <param name="exception">要绑定到此 <see cref="T:System.Threading.Tasks.Task`1" /> 的异常。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> 已处理。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">基础 <see cref="T:System.Threading.Tasks.Task`1" /> 已经处于三个最终状态之一： <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 或 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetResult(`0)">
      <summary>将基础 <see cref="T:System.Threading.Tasks.Task`1" /> 转换为 <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /> 状态。</summary>
      <param name="result">要绑定到此 <see cref="T:System.Threading.Tasks.Task`1" /> 的结果值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> 已处理。</exception>
      <exception cref="T:System.InvalidOperationException">基础 <see cref="T:System.Threading.Tasks.Task`1" /> 已经处于三个最终状态之一： <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 或 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />。</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskCompletionSource`1.Task">
      <summary>获取由此 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> 创建的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <returns>返回由此 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> 创建的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled">
      <summary>尝试将基础 <see cref="T:System.Threading.Tasks.Task`1" /> 转换为 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> 状态。</summary>
      <returns>如果操作成功，则为 true；如果操作失败或对象已被释放，则为 false。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>尝试将基础 <see cref="T:System.Threading.Tasks.Task`1" /> 转换为 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状态。</summary>
      <returns>如果操作成功，则为 true，否则为 false。</returns>
      <param name="exceptions">要绑定到此 <see cref="T:System.Threading.Tasks.Task`1" /> 的异常的集合。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> 已处理。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exceptions" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">在 <paramref name="exceptions" /> 中有一个或多个 null 元素。 - 或 - <paramref name="exceptions" /> 集合是空的。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)">
      <summary>尝试将基础 <see cref="T:System.Threading.Tasks.Task`1" /> 转换为 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状态。</summary>
      <returns>如果操作成功，则为 true，否则为 false。</returns>
      <param name="exception">要绑定到此 <see cref="T:System.Threading.Tasks.Task`1" /> 的异常。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> 已处理。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(`0)">
      <summary>尝试将基础 <see cref="T:System.Threading.Tasks.Task`1" /> 转换为 <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /> 状态。</summary>
      <returns>如果操作成功，则为 true，否则为 false。</returns>
      <param name="result">要绑定到此 <see cref="T:System.Threading.Tasks.Task`1" /> 的结果值。</param>
    </member>
    <member name="T:System.Threading.Tasks.TaskContinuationOptions">
      <summary>为通过使用 <see cref="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" /> 或 <see cref="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)" /> 方法创建的任务指定行为。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
      <summary>指定将任务附加到任务层次结构中的某个父级。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
      <summary>指定应同步执行延续任务。 指定此选项后，延续任务将在导致前面的任务转换为其最终状态的相同线程上运行。 如果在创建延续任务时已经完成前面的任务，则延续任务将在创建此延续任务的线程上运行。 只应同步执行运行时间非常短的延续任务。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.LongRunning">
      <summary>指定某个任务将是运行时间长、粗粒度的操作。 它会向 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 提示，过度订阅可能是合理的。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.None">
      <summary>Default = "Continue on any, no task options, run asynchronously" 指定应使用默认行为。 默认情况下，完成前面的任务之后将安排运行延续任务，而不考虑前面任务的最终 <see cref="T:System.Threading.Tasks.TaskStatus" />。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled">
      <summary>指定不应在延续任务前面的任务已取消的情况下安排延续任务。 此选项对多任务延续无效。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted">
      <summary>指定不应在延续任务前面的任务引发了未处理异常的情况下安排延续任务。 此选项对多任务延续无效。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion">
      <summary>指定不应在延续任务前面的任务已完成运行的情况下安排延续任务。 此选项对多任务延续无效。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled">
      <summary>指定只应在延续任务前面的任务已取消的情况下才安排延续任务。 此选项对多任务延续无效。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
      <summary>指定只应在延续任务前面的任务引发了未处理异常的情况下才安排延续任务。 此选项对多任务延续无效。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion">
      <summary>指定只应在延续任务前面的任务已完成运行的情况下才安排延续任务。 此选项对多任务延续无效。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.PreferFairness">
      <summary>提示 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 以一种尽可能公平的方式安排任务，这意味着较早安排的任务将更可能较早运行，而较晚安排运行的任务将更可能较晚运行。</summary>
    </member>
    <member name="T:System.Threading.Tasks.TaskCreationOptions">
      <summary>指定可控制任务的创建和执行的可选行为的标志。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent">
      <summary>指定将任务附加到任务层次结构中的某个父级。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.LongRunning">
      <summary>指定某个任务将是运行时间长、粗粒度的操作。 它会向 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 提示，过度订阅可能是合理的。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.None">
      <summary>指定应使用默认行为。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.PreferFairness">
      <summary>提示 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 以一种尽可能公平的方式安排任务，这意味着较早安排的任务将更可能较早运行，而较晚安排运行的任务将更可能较晚运行。</summary>
    </member>
    <member name="T:System.Threading.Tasks.TaskFactory">
      <summary>提供对创建和计划 <see cref="T:System.Threading.Tasks.Task" /> 对象的支持。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor">
      <summary>使用默认配置初始化 <see cref="T:System.Threading.Tasks.TaskFactory" /> 实例。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)">
      <summary>使用指定配置初始化 <see cref="T:System.Threading.Tasks.TaskFactory" /> 实例。</summary>
      <param name="cancellationToken">将指派给由此 <see cref="T:System.Threading.Tasks.TaskFactory" /> 创建的任务的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />，除非在调用工厂方法时显式指定另一个 CancellationToken。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>使用指定配置初始化 <see cref="T:System.Threading.Tasks.TaskFactory" /> 实例。</summary>
      <param name="cancellationToken">默认情况下将指派给由此 <see cref="T:System.Threading.Tasks.TaskFactory" /> 创建的任务的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />，除非在调用工厂方法时显式指定另一个 CancellationToken。</param>
      <param name="creationOptions">在使用此 TaskFactory 创建任务时要使用的默认 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</param>
      <param name="continuationOptions">在使用此 TaskFactory 创建延续任务时要使用的默认 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />。</param>
      <param name="scheduler">要用于计划使用此 TaskFactory 创建的任何任务的默认 <see cref="T:System.Threading.Tasks.TaskScheduler" />。 一个 null 值，该值指示应使用 TaskScheduler.Current。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">当 <paramref name="creationOptions" /> 参数或 <paramref name="continuationOptions" /> 参数指定无效值时引发的异常。 <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>使用指定配置初始化 <see cref="T:System.Threading.Tasks.TaskFactory" /> 实例。</summary>
      <param name="creationOptions">在使用此 TaskFactory 创建任务时要使用的默认 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</param>
      <param name="continuationOptions">在使用此 TaskFactory 创建延续任务时要使用的默认 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">当 <paramref name="creationOptions" /> 参数或 <paramref name="continuationOptions" /> 参数指定无效值时引发的异常。 <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)">
      <summary>使用指定配置初始化 <see cref="T:System.Threading.Tasks.TaskFactory" /> 实例。</summary>
      <param name="scheduler">要用于计划使用此 TaskFactory 创建的任何任务的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。 一个 null 值，该值指示应使用当前的 TaskScheduler。</param>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.CancellationToken">
      <summary>获取此 TaskFactory 的默认 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <returns>此 TaskFactory 的默认 <see cref="T:System.Threading.CancellationToken" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.ContinuationOptions">
      <summary>获取此 TaskFactory 的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值。</summary>
      <returns>此 TaskFactory 的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task" />，它将在提供的一组任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的所有任务完成时要执行的操作委托。</param>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="tasks" /> 数组中的元素之一已经被释放时引发的异常。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationAction" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task" />，它将在提供的一组任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的所有任务完成时要执行的操作委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="tasks" /> 数组中的元素之一已经被释放时引发的异常。 - 或 - 创建了 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationAction" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task" />，它将在提供的一组任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的所有任务完成时要执行的操作委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，用于控制所创建的延续 <see cref="T:System.Threading.Tasks.Task" /> 的行为。</param>
      <param name="scheduler">用于计划所创建的延续 <see cref="T:System.Threading.Tasks.Task" /> 的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationAction" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="scheduler" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task" />，它将在提供的一组任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的所有任务完成时要执行的操作委托。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，用于控制所创建的延续 <see cref="T:System.Threading.Tasks.Task" /> 的行为。</param>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="tasks" /> 数组中的元素之一已经被释放时引发的异常。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationAction" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">当 <paramref name="continuationOptions" /> 参数指定无效 TaskContinuationOptions 值时引发的异常。 <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task" />，它将在提供的一组任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 关联的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="tasks" /> 数组中的元素之一已经被释放时引发的异常。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationFunction" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task" />，它将在提供的一组任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 关联的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="tasks" /> 数组中的元素之一已经被释放时引发的异常。 - 或 - 创建了 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationFunction" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task`1" />，它将在提供的一组任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，用于控制所创建的延续 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <param name="scheduler">用于计划所创建的延续 <see cref="T:System.Threading.Tasks.Task`1" /> 的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 关联的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationFunction" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="scheduler" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task`1" />，它将在提供的一组任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，用于控制所创建的延续 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 关联的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="tasks" /> 数组中的元素之一已经被释放时引发的异常。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationFunction" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">当 <paramref name="continuationOptions" /> 参数指定无效 TaskContinuationOptions 值时引发的异常。 <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task" />，它将在提供的一组任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的所有任务完成时要执行的操作委托。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="tasks" /> 数组中的元素之一已经被释放时引发的异常。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationAction" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task" />，它将在提供的一组任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的所有任务完成时要执行的操作委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="tasks" /> 数组中的元素之一已经被释放时引发的异常。 - 或 - 创建了 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationAction" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task" />，它将在提供的一组任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的所有任务完成时要执行的操作委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，用于控制所创建的延续 <see cref="T:System.Threading.Tasks.Task" /> 的行为。</param>
      <param name="scheduler">用于计划所创建的延续 <see cref="T:System.Threading.Tasks.Task" /> 的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationAction" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="scheduler" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task" />，它将在提供的一组任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的所有任务完成时要执行的操作委托。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，用于控制所创建的延续 <see cref="T:System.Threading.Tasks.Task" /> 的行为。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="tasks" /> 数组中的元素之一已经被释放时引发的异常。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationAction" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">当 <paramref name="continuationOptions" /> 参数指定无效 TaskContinuationOptions 值时引发的异常。 <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task`1" />，它将在提供的一组任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 关联的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="tasks" /> 数组中的元素之一已经被释放时引发的异常。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationFunction" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task`1" />，它将在提供的一组任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 关联的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="tasks" /> 数组中的元素之一已经被释放时引发的异常。 - 或 - 创建了 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationFunction" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task`1" />，它将在提供的一组任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，用于控制所创建的延续 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <param name="scheduler">用于计划所创建的延续 <see cref="T:System.Threading.Tasks.Task`1" /> 的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 关联的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationFunction" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="scheduler" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">当 <paramref name="continuationOptions" /> 参数指定无效 TaskContinuationOptions 值时引发的异常。 <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="tasks" /> 数组中的元素之一已经被释放时引发的异常。 - 或 - 创建了 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task`1" />，它将在提供的一组任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，用于控制所创建的延续 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 关联的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="tasks" /> 数组中的元素之一已经被释放时引发的异常。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationFunction" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">当 <paramref name="continuationOptions" /> 参数指定无效 TaskContinuationOptions 值时引发的异常。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的一个任务完成时要执行的操作委托。</param>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="tasks" /> 数组中的元素之一已经被释放时引发的异常。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationAction" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的一个任务完成时要执行的操作委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="tasks" /> 数组中的元素之一已经被释放时引发的异常。 - 或 - 提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationAction" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的一个任务完成时要执行的操作委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，用于控制所创建的延续 <see cref="T:System.Threading.Tasks.Task" /> 的行为。</param>
      <param name="scheduler">用于计划所创建的延续 <see cref="T:System.Threading.Tasks.Task" /> 的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationAction" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="scheduler" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的一个任务完成时要执行的操作委托。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，用于控制所创建的延续 <see cref="T:System.Threading.Tasks.Task" /> 的行为。</param>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="tasks" /> 数组中的元素之一已经被释放时引发的异常。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationAction" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">当 <paramref name="continuationOptions" /> 参数指定无效 TaskContinuationOptions 值时引发的异常。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task`1" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 关联的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="tasks" /> 数组中的元素之一已经被释放时引发的异常。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationFunction" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task`1" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 关联的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="tasks" /> 数组中的元素之一已经被释放时引发的异常。 - 或 - 提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationFunction" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task`1" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，用于控制所创建的延续 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <param name="scheduler">用于计划所创建的延续 <see cref="T:System.Threading.Tasks.Task`1" /> 的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 关联的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationFunction" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="scheduler" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task`1" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，用于控制所创建的延续 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 关联的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="tasks" /> 数组中的元素之一已经被释放时引发的异常。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationFunction" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">当 <paramref name="continuationOptions" /> 参数指定无效 TaskContinuationOptions 值时引发的异常。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的一个任务完成时要执行的操作委托。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="tasks" /> 数组中的元素之一已经被释放时引发的异常。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationAction" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的一个任务完成时要执行的操作委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="tasks" /> 数组中的元素之一已经被释放时引发的异常。 - 或 - 提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationAction" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的一个任务完成时要执行的操作委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，用于控制所创建的延续 <see cref="T:System.Threading.Tasks.Task" /> 的行为。</param>
      <param name="scheduler">用于计划所创建的延续 <see cref="T:System.Threading.Tasks.Task`1" /> 的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationAction" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="scheduler" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的一个任务完成时要执行的操作委托。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，用于控制所创建的延续 <see cref="T:System.Threading.Tasks.Task" /> 的行为。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="tasks" /> 数组中的元素之一已经被释放时引发的异常。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationAction" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">当 <paramref name="continuationOptions" /> 参数指定无效 TaskContinuationOptions 值时引发的异常。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task`1" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 关联的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="tasks" /> 数组中的元素之一已经被释放时引发的异常。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationFunction" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task`1" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 关联的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="tasks" /> 数组中的元素之一已经被释放时引发的异常。 - 或 - 提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationFunction" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task`1" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，用于控制所创建的延续 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <param name="scheduler">用于计划所创建的延续 <see cref="T:System.Threading.Tasks.Task`1" /> 的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 关联的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationFunction" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="scheduler" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task`1" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，用于控制所创建的延续 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 关联的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">在 <paramref name="tasks" /> 数组中的元素之一已经被释放时引发的异常。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="tasks" /> 数组为 null 时引发的异常。 - 或 - 当 <paramref name="continuationFunction" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">当 <paramref name="continuationOptions" /> 参数指定无效 TaskContinuationOptions 值时引发的异常。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="tasks" /> 数组包含 null 值时引发的异常。 - 或 - 当 <paramref name="tasks" /> 数组为空时引发的异常。</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.CreationOptions">
      <summary>获取此 TaskFactory 的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。</summary>
      <returns>此 TaskFactory 的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="beginMethod" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="endMethod" /> 参数为 null 时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <param name="creationOptions">TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task" /> 的行为。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="beginMethod" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="endMethod" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task`1" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="beginMethod" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="endMethod" /> 参数为 null 时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task`1" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <param name="creationOptions">TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="beginMethod" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="endMethod" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="beginMethod" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="endMethod" /> 参数为 null 时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <param name="creationOptions">TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task" /> 的行为。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="beginMethod" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="endMethod" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task`1" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="beginMethod" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="endMethod" /> 参数为 null 时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task`1" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <param name="creationOptions">TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="beginMethod" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="endMethod" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="arg2">传递给 <paramref name="beginMethod" /> 委托的第二个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第二个参数的类型。</typeparam>
      <typeparam name="TArg2">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="beginMethod" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="endMethod" /> 参数为 null 时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="arg2">传递给 <paramref name="beginMethod" /> 委托的第二个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <param name="creationOptions">TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task" /> 的行为。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第二个参数的类型。</typeparam>
      <typeparam name="TArg2">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="beginMethod" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="endMethod" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task`1" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="arg2">传递给 <paramref name="beginMethod" /> 委托的第二个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第二个参数的类型。</typeparam>
      <typeparam name="TArg2">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="beginMethod" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="endMethod" /> 参数为 null 时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task`1" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="arg2">传递给 <paramref name="beginMethod" /> 委托的第二个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <param name="creationOptions">TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第二个参数的类型。</typeparam>
      <typeparam name="TArg2">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="beginMethod" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="endMethod" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="arg2">传递给 <paramref name="beginMethod" /> 委托的第二个参数。</param>
      <param name="arg3">传递给 <paramref name="beginMethod" /> 委托的第三个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第二个参数的类型。</typeparam>
      <typeparam name="TArg2">传递给 <paramref name="beginMethod" /> 委托的第三个参数的类型。</typeparam>
      <typeparam name="TArg3">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="beginMethod" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="endMethod" /> 参数为 null 时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="arg2">传递给 <paramref name="beginMethod" /> 委托的第二个参数。</param>
      <param name="arg3">传递给 <paramref name="beginMethod" /> 委托的第三个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <param name="creationOptions">TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task" /> 的行为。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第二个参数的类型。</typeparam>
      <typeparam name="TArg2">传递给 <paramref name="beginMethod" /> 委托的第三个参数的类型。</typeparam>
      <typeparam name="TArg3">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="beginMethod" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="endMethod" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task`1" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="arg2">传递给 <paramref name="beginMethod" /> 委托的第二个参数。</param>
      <param name="arg3">传递给 <paramref name="beginMethod" /> 委托的第三个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第二个参数的类型。</typeparam>
      <typeparam name="TArg2">传递给 <paramref name="beginMethod" /> 委托的第三个参数的类型。</typeparam>
      <typeparam name="TArg3">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="beginMethod" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="endMethod" /> 参数为 null 时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task`1" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="arg2">传递给 <paramref name="beginMethod" /> 委托的第二个参数。</param>
      <param name="arg3">传递给 <paramref name="beginMethod" /> 委托的第三个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <param name="creationOptions">TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第二个参数的类型。</typeparam>
      <typeparam name="TArg2">传递给 <paramref name="beginMethod" /> 委托的第三个参数的类型。</typeparam>
      <typeparam name="TArg3">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="beginMethod" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="endMethod" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task" />，它在指定的 <see cref="T:System.IAsyncResult" /> 完成时执行一个结束方法操作。</summary>
      <returns>一个表示异步操作的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="asyncResult">IAsyncResult，完成它时将触发对 <paramref name="endMethod" /> 的处理。</param>
      <param name="endMethod">用于处理完成的 <paramref name="asyncResult" /> 的操作委托。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="asyncResult" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="endMethod" /> 参数为 null 时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task" />，它在指定的 <see cref="T:System.IAsyncResult" /> 完成时执行一个结束方法操作。</summary>
      <returns>一个表示异步操作的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="asyncResult">IAsyncResult，完成它时将触发对 <paramref name="endMethod" /> 的处理。</param>
      <param name="endMethod">用于处理完成的 <paramref name="asyncResult" /> 的操作委托。</param>
      <param name="creationOptions">TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task" /> 的行为。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="asyncResult" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="endMethod" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task" />，它在指定的 <see cref="T:System.IAsyncResult" /> 完成时执行一个结束方法操作。</summary>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="asyncResult">IAsyncResult，完成它时将触发对 <paramref name="endMethod" /> 的处理。</param>
      <param name="endMethod">用于处理完成的 <paramref name="asyncResult" /> 的操作委托。</param>
      <param name="creationOptions">TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task" /> 的行为。</param>
      <param name="scheduler">用于计划将执行结束方法的任务的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="asyncResult" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="endMethod" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="scheduler" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task`1" />，它在指定的 <see cref="T:System.IAsyncResult" /> 完成时执行一个结束方法函数。</summary>
      <returns>一个表示异步操作的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="asyncResult">IAsyncResult，完成它时将触发对 <paramref name="endMethod" /> 的处理。</param>
      <param name="endMethod">用于处理完成的 <paramref name="asyncResult" /> 的函数委托。</param>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="asyncResult" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="endMethod" /> 参数为 null 时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task`1" />，它在指定的 <see cref="T:System.IAsyncResult" /> 完成时执行一个结束方法函数。</summary>
      <returns>一个表示异步操作的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="asyncResult">IAsyncResult，完成它时将触发对 <paramref name="endMethod" /> 的处理。</param>
      <param name="endMethod">用于处理完成的 <paramref name="asyncResult" /> 的函数委托。</param>
      <param name="creationOptions">TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="asyncResult" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="endMethod" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task`1" />，它在指定的 <see cref="T:System.IAsyncResult" /> 完成时执行一个结束方法函数。</summary>
      <returns>一个表示异步操作的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="asyncResult">IAsyncResult，完成它时将触发对 <paramref name="endMethod" /> 的处理。</param>
      <param name="endMethod">用于处理完成的 <paramref name="asyncResult" /> 的函数委托。</param>
      <param name="creationOptions">TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <param name="scheduler">用于计划将执行结束方法的任务的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="asyncResult" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="endMethod" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="scheduler" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.Scheduler">
      <summary>获取此 TaskFactory 的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</summary>
      <returns>此 TaskFactory 的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action)">
      <summary>创建并启动 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="action">要异步执行的操作委托。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="action" /> 参数为 null 时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)">
      <summary>创建并启动 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="action">要异步执行的操作委托。</param>
      <param name="cancellationToken">将指派给新任务的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="action" /> 参数为 null 时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建并启动 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="action">要异步执行的操作委托。</param>
      <param name="cancellationToken">将指派给新 <see cref="T:System.Threading.Tasks.Task" /> 的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /></param>
      <param name="creationOptions">一个 TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task" /> 的行为</param>
      <param name="scheduler">用于计划所创建的 <see cref="T:System.Threading.Tasks.Task" /> 的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="action" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="scheduler" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建并启动 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="action">要异步执行的操作委托。</param>
      <param name="creationOptions">一个 TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task" /> 的行为</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="action" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)">
      <summary>创建并启动 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="action">要异步执行的操作委托。</param>
      <param name="state">一个包含由 <paramref name="action" /> 委托使用的数据的对象。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="action" /> 参数为 null 时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
      <summary>创建并启动 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="action">要异步执行的操作委托。</param>
      <param name="state">一个包含由 <paramref name="action" /> 委托使用的数据的对象。</param>
      <param name="cancellationToken">将指派给新 <see cref="T:System.Threading.Tasks.Task" /> 的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /></param>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="action" /> 参数为 null 时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建并启动 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="action">要异步执行的操作委托。</param>
      <param name="state">一个包含由 <paramref name="action" /> 委托使用的数据的对象。</param>
      <param name="cancellationToken">将指派给新任务的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <param name="creationOptions">一个 TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task" /> 的行为</param>
      <param name="scheduler">用于计划所创建的 <see cref="T:System.Threading.Tasks.Task" /> 的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="action" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="scheduler" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建并启动 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="action">要异步执行的操作委托。</param>
      <param name="state">一个包含由 <paramref name="action" /> 委托使用的数据的对象。</param>
      <param name="creationOptions">一个 TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task" /> 的行为</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="action" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})">
      <summary>创建并启动 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="function">一个函数委托，可返回能够通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的将来结果。</param>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="function" /> 参数为 null 时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)">
      <summary>创建并启动 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="function">一个函数委托，可返回能够通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的将来结果。</param>
      <param name="cancellationToken">将指派给新 <see cref="T:System.Threading.Tasks.Task" /> 的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /></param>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="function" /> 参数为 null 时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建并启动 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="function">一个函数委托，可返回能够通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的将来结果。</param>
      <param name="cancellationToken">将指派给新任务的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <param name="creationOptions">一个 TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <param name="scheduler">用于计划所创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="function" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="scheduler" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建并启动 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="function">一个函数委托，可返回能够通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的将来结果。</param>
      <param name="creationOptions">一个 TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="function" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)">
      <summary>创建并启动 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="function">一个函数委托，可返回能够通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的将来结果。</param>
      <param name="state">一个包含由 <paramref name="function" /> 委托使用的数据的对象。</param>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="function" /> 参数为 null 时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)">
      <summary>创建并启动 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="function">一个函数委托，可返回能够通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的将来结果。</param>
      <param name="state">一个包含由 <paramref name="function" /> 委托使用的数据的对象。</param>
      <param name="cancellationToken">将指派给新 <see cref="T:System.Threading.Tasks.Task" /> 的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /></param>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="function" /> 参数为 null 时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建并启动 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="function">一个函数委托，可返回能够通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的将来结果。</param>
      <param name="state">一个包含由 <paramref name="function" /> 委托使用的数据的对象。</param>
      <param name="cancellationToken">将指派给新任务的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <param name="creationOptions">一个 TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <param name="scheduler">用于计划所创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="function" /> 参数为 null 时引发的异常。 - 或 - 当 <paramref name="scheduler" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建并启动 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="function">一个函数委托，可返回能够通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的将来结果。</param>
      <param name="state">一个包含由 <paramref name="function" /> 委托使用的数据的对象。</param>
      <param name="creationOptions">一个 TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="function" /> 参数为 null 时引发的异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 <paramref name="creationOptions" /> 参数指定无效 TaskCreationOptions 值时引发的异常。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskFactory`1">
      <summary>提供对创建和计划 <see cref="T:System.Threading.Tasks.Task`1" /> 对象的支持。</summary>
      <typeparam name="TResult">可通过与此类中的方法相关联的 <see cref="T:System.Threading.Tasks.Task`1" /> 对象获得的结果的类型。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor">
      <summary>使用默认配置初始化 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 实例。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)">
      <summary>使用默认配置初始化 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 实例。</summary>
      <param name="cancellationToken">默认取消标记将指派给由此 <see cref="T:System.Threading.Tasks.TaskFactory" /> 创建的任务的，除非在调用工厂方法时显式指定另一个取消标记。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>使用指定配置初始化 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 实例。</summary>
      <param name="cancellationToken">默认取消标记将指派给由此 <see cref="T:System.Threading.Tasks.TaskFactory" /> 创建的任务，除非在调用工厂方法时显式指定另一个取消标记。</param>
      <param name="creationOptions">在使用此 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 创建任务时要使用的默认选项。</param>
      <param name="continuationOptions">在使用此 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 创建继续任务时要使用的默认选项。</param>
      <param name="scheduler">要用于计划使用此 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 创建的任何任务的默认计划程序。 null 值指示应使用 <see cref="P:System.Threading.Tasks.TaskScheduler.Current" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 或 <paramref name="continuationOptions" /> 指定了一个无效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>使用指定配置初始化 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 实例。</summary>
      <param name="creationOptions">在使用此 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 创建任务时要使用的默认选项。</param>
      <param name="continuationOptions">在使用此 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 创建继续任务时要使用的默认选项。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 或 <paramref name="continuationOptions" /> 指定了一个无效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)">
      <summary>使用指定配置初始化 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 实例。</summary>
      <param name="scheduler">要用于计划使用此 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 创建的任何任务的默认计划程序。 一个 null 值，该值指示应使用当前 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.CancellationToken">
      <summary>获取此任务工厂的默认取消标记。</summary>
      <returns>此任务工厂的默认取消标记。</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.ContinuationOptions">
      <summary>获取此任务工厂的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 枚举。</summary>
      <returns>一个枚举值是否指定此任务工厂的默认延续选项。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})">
      <summary>创建一个延续任务，它将在提供的一组任务完成后马上开始。</summary>
      <returns>新的延续任务。</returns>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 数组中的某个元素已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 null。 - 或 - <paramref name="continuationFunction" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值或为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
      <summary>创建一个延续任务，它将在提供的一组任务完成后马上开始。</summary>
      <returns>新的延续任务。</returns>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的取消标记。</param>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 数组中的某个元素已被释放。 - 或 - 创建了 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 null。 - 或 - <paramref name="continuationFunction" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值或为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个延续任务，它将在提供的一组任务完成后马上开始。</summary>
      <returns>新的延续任务。</returns>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的取消标记。</param>
      <param name="continuationOptions">其中一个控制所创建的延续任务的行为的枚举值。 NotOn* 或 OnlyOn* 值均无效。</param>
      <param name="scheduler">用于计划所创建的延续任务的计划程序。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 null。 - 或 - <paramref name="continuationFunction" /> 参数为 null。 - 或 - <paramref name="scheduler" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值或为空。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 指定了一个无效值。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 数组中的某个元素已被释放。 - 或 - 创建了 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个延续任务，它将在提供的一组任务完成后马上开始。</summary>
      <returns>新的延续任务。</returns>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <param name="continuationOptions">其中一个控制所创建的延续任务的行为的枚举值。 NotOn* 或 OnlyOn* 值均无效。</param>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 数组中的某个元素已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 null。 - 或 - <paramref name="continuationFunction" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数指定的值无效。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值或为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})">
      <summary>创建一个延续任务，它将在提供的一组任务完成后马上开始。</summary>
      <returns>新的延续任务。</returns>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 数组中的某个元素已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 null。 - 或 - <paramref name="continuationFunction" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值或为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
      <summary>创建一个延续任务，它将在提供的一组任务完成后马上开始。</summary>
      <returns>新的延续任务。</returns>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的取消标记。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 数组中的某个元素已被释放。 - 或 - 创建了 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 null。 - 或 - <paramref name="continuationFunction" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值或为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个延续任务，它将在提供的一组任务完成后马上开始。</summary>
      <returns>新的延续任务。</returns>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的取消标记。</param>
      <param name="continuationOptions">其中一个控制所创建的延续任务的行为的枚举值。 NotOn* 或 OnlyOn* 值均无效。</param>
      <param name="scheduler">用于计划所创建的延续任务的计划程序。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 null。 - 或 - <paramref name="continuationFunction" /> 参数为 null。 - 或 - <paramref name="scheduler" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值或为空。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数指定的值无效。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 数组中的某个元素已被释放。 - 或 - 创建了 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个延续任务，它将在提供的一组任务完成后马上开始。</summary>
      <returns>新的延续任务。</returns>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <param name="continuationOptions">其中一个控制所创建的延续任务的行为的枚举值。 NotOn* 或 OnlyOn* 值均无效。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 数组中的某个元素已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 null。 - 或 - <paramref name="continuationFunction" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数指定的值无效。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值或为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})">
      <summary>创建一个延续任务，它将在提供的组中的任何任务完成后马上开始。</summary>
      <returns>新的延续任务。</returns>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 数组中的某个元素已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 null。 - 或 - <paramref name="continuationFunction" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值或为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
      <summary>创建一个延续任务，它将在提供的组中的任何任务完成后马上开始。</summary>
      <returns>新的延续任务。</returns>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的取消标记。</param>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 数组中的某个元素已被释放。 - 或 - 创建了 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组参数为 null。 - 或 - <paramref name="continuationFunction" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值。 - 或 - <paramref name="tasks" /> 数组为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个延续任务，它将在提供的组中的任何任务完成后马上开始。</summary>
      <returns>新的延续任务。</returns>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的取消标记。</param>
      <param name="continuationOptions">其中一个控制所创建的延续任务的行为的枚举值。 NotOn* 或 OnlyOn* 值均无效。</param>
      <param name="scheduler">用于计划所创建的延续任务的任务计划程序。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 null。 - 或 - <paramref name="continuationFunction" /> 参数为 null。 - 或 - <paramref name="scheduler" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值。 - 或 - <paramref name="tasks" /> 数组为空。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值无效。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 数组中的某个元素已被释放。 - 或 - 创建了 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个延续任务，它将在提供的组中的任何任务完成后马上开始。</summary>
      <returns>新的延续任务。</returns>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <param name="continuationOptions">其中一个控制所创建的延续任务的行为的枚举值。 NotOn* 或 OnlyOn* 值均无效。</param>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 数组中的某个元素已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 null。 - 或 - <paramref name="continuationFunction" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数指定的枚举值无效。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值。 - 或 - <paramref name="tasks" /> 数组为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
      <summary>创建一个延续任务，它将在提供的组中的任何任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 数组中的某个元素已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 null。 - 或 - <paramref name="continuationFunction" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值。 - 或 - <paramref name="tasks" /> 数组为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
      <summary>创建一个延续任务，它将在提供的组中的任何任务完成后马上开始。</summary>
      <returns>新的延续任务。</returns>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的取消标记。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 数组中的某个元素已被释放。 - 或 - 创建了 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 null。 - 或 - <paramref name="continuationFunction" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值。 - 或 - <paramref name="tasks" /> 数组为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个延续任务，它将在提供的组中的任何任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的取消标记。</param>
      <param name="continuationOptions">其中一个控制所创建的延续任务的行为的枚举值。 NotOn* 或 OnlyOn* 值均无效。</param>
      <param name="scheduler">用于计划所创建的延续 <see cref="T:System.Threading.Tasks.Task`1" /> 的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 null。 - 或 - <paramref name="continuationFunction" /> 参数为 null。 - 或 - <paramref name="scheduler" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值。 - 或 - <paramref name="tasks" /> 数组为空。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数指定的 TaskContinuationOptions 值无效。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 数组中的某个元素已被释放。 - 或 - 创建了 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个延续任务，它将在提供的组中的任何任务完成后马上开始。</summary>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <param name="continuationOptions">其中一个控制所创建的延续任务的行为的枚举值。 NotOn* 或 OnlyOn* 值均无效。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 数组中的某个元素已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 null。 - 或 - <paramref name="continuationFunction" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数指定的枚举值无效。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值。 - 或 - <paramref name="tasks" /> 数组为空。</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.CreationOptions">
      <summary>获取此任务工厂的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 枚举。</summary>
      <returns>一个枚举值是否指定此任务工厂的默认创建选项。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)">
      <summary>创建一个任务，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <returns>创建的表示异步操作的任务。</returns>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 参数为 null。 - 或 - <paramref name="endMethod" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建一个任务，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <param name="creationOptions">其中一个控制所创建的任务的行为的枚举值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 参数为 null。 - 或 - <paramref name="endMethod" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定的值无效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
      <summary>创建一个任务，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <returns>创建的表示异步操作的任务。</returns>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 参数为 null。 - 或 - <paramref name="endMethod" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建一个任务，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <returns>创建的表示异步操作的任务。</returns>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <param name="creationOptions">其中一个控制所创建的任务的行为的枚举值。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 参数为 null。 - 或 - <paramref name="endMethod" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定的值无效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
      <summary>创建一个任务，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <returns>创建的表示异步操作的任务。</returns>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="arg2">传递给 <paramref name="beginMethod" /> 委托的第二个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第二个参数的类型。</typeparam>
      <typeparam name="TArg2">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 参数为 null。 - 或 - <paramref name="endMethod" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建一个任务，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <returns>创建的表示异步操作的任务。</returns>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="arg2">传递给 <paramref name="beginMethod" /> 委托的第二个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <param name="creationOptions">一个对象，用于控制所创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第二个参数的类型。</typeparam>
      <typeparam name="TArg2">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 参数为 null。 - 或 - <paramref name="endMethod" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定的值无效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
      <summary>创建一个任务，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <returns>创建的表示异步操作的任务。</returns>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="arg2">传递给 <paramref name="beginMethod" /> 委托的第二个参数。</param>
      <param name="arg3">传递给 <paramref name="beginMethod" /> 委托的第三个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第二个参数的类型。</typeparam>
      <typeparam name="TArg2">传递给 <paramref name="beginMethod" /> 委托的第三个参数的类型。</typeparam>
      <typeparam name="TArg3">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 参数为 null。 - 或 - <paramref name="endMethod" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建一个任务，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <returns>创建的表示异步操作的任务。</returns>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="arg2">传递给 <paramref name="beginMethod" /> 委托的第二个参数。</param>
      <param name="arg3">传递给 <paramref name="beginMethod" /> 委托的第三个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <param name="creationOptions">一个对象，用于控制所创建的任务的行为。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第二个参数的类型。</typeparam>
      <typeparam name="TArg2">传递给 <paramref name="beginMethod" /> 委托的第三个参数的类型。</typeparam>
      <typeparam name="TArg3">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 参数为 null。 - 或 - <paramref name="endMethod" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定的值无效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})">
      <summary>创建一个任务，它在指定的 <see cref="T:System.IAsyncResult" /> 完成时执行一个结束方法函数。</summary>
      <returns>一个表示异步操作的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" />，完成它时将触发对 <paramref name="endMethod" /> 的处理。</param>
      <param name="endMethod">用于处理完成的 <paramref name="asyncResult" /> 的函数委托。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 参数为 null。 - 或 - <paramref name="endMethod" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建一个任务，它在指定的 <see cref="T:System.IAsyncResult" /> 完成时执行一个结束方法函数。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" />，完成它时将触发对 <paramref name="endMethod" /> 的处理。</param>
      <param name="endMethod">用于处理完成的 <paramref name="asyncResult" /> 的函数委托。</param>
      <param name="creationOptions">其中一个控制所创建的任务的行为的枚举值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 参数为 null。 - 或 - <paramref name="endMethod" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定的值无效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个任务，它在指定的 <see cref="T:System.IAsyncResult" /> 完成时执行一个结束方法函数。</summary>
      <returns>创建的表示异步操作的任务。</returns>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" />，完成它时将触发对 <paramref name="endMethod" /> 的处理。</param>
      <param name="endMethod">用于处理完成的 <paramref name="asyncResult" /> 的函数委托。</param>
      <param name="creationOptions">其中一个控制所创建的任务的行为的枚举值。</param>
      <param name="scheduler">用于计划将执行结束方法的任务计划程序。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 参数为 null。 - 或 - <paramref name="endMethod" /> 参数为 null。 - 或 - <paramref name="scheduler" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定的值无效。</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.Scheduler">
      <summary>获取此任务工厂的任务计划程序。</summary>
      <returns>此任务工厂的任务计划程序。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})">
      <summary>创建并启动 任务。</summary>
      <returns>已启动的任务。</returns>
      <param name="function">一个函数委托，可返回能够通过任务获得的将来结果。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)">
      <summary>创建并启动 任务。</summary>
      <returns>已启动的任务。</returns>
      <param name="function">一个函数委托，可返回能够通过任务获得的将来结果。</param>
      <param name="cancellationToken">将指派给新的任务的取消标记。</param>
      <exception cref="T:System.ObjectDisposedException">已处理创建的 <paramref name="cancellationToken" /> 的取消标记源。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建并启动 任务。</summary>
      <returns>已启动的任务。</returns>
      <param name="function">一个函数委托，可返回能够通过任务获得的将来结果。</param>
      <param name="cancellationToken">将指派给新的任务的取消标记。</param>
      <param name="creationOptions">其中一个控制所创建的任务的行为的枚举值。</param>
      <param name="scheduler">用于计划所创建的任务的任务计划程序。</param>
      <exception cref="T:System.ObjectDisposedException">已处理创建的 <paramref name="cancellationToken" /> 的取消标记源。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 null。 - 或 - <paramref name="scheduler" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定的值无效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建并启动 任务。</summary>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="function">一个函数委托，可返回能够通过任务获得的将来结果。</param>
      <param name="creationOptions">其中一个控制所创建的任务的行为的枚举值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定的值无效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)">
      <summary>创建并启动 任务。</summary>
      <returns>已启动的任务。</returns>
      <param name="function">一个函数委托，可返回能够通过任务获得的将来结果。</param>
      <param name="state">包含 <paramref name="function" /> 委托所用数据的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
      <summary>创建并启动 任务。</summary>
      <returns>已启动的任务。</returns>
      <param name="function">一个函数委托，可返回能够通过任务获得的将来结果。</param>
      <param name="state">包含 <paramref name="function" /> 委托所用数据的对象。</param>
      <param name="cancellationToken">将指派给新的任务的取消标记。</param>
      <exception cref="T:System.ObjectDisposedException">已处理创建的 <paramref name="cancellationToken" /> 的取消标记源。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建并启动 任务。</summary>
      <returns>已启动的任务。</returns>
      <param name="function">一个函数委托，可返回能够通过任务获得的将来结果。</param>
      <param name="state">包含 <paramref name="function" /> 委托所用数据的对象。</param>
      <param name="cancellationToken">将指派给新的任务的取消标记。</param>
      <param name="creationOptions">其中一个控制所创建的任务的行为的枚举值。</param>
      <param name="scheduler">用于计划所创建的任务的任务计划程序。</param>
      <exception cref="T:System.ObjectDisposedException">已处理创建的 <paramref name="cancellationToken" /> 的取消标记源。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 null。 - 或 - <paramref name="scheduler" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定的值无效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建并启动 任务。</summary>
      <returns>已启动的任务。</returns>
      <param name="function">一个函数委托，可返回能够通过任务获得的将来结果。</param>
      <param name="state">包含 <paramref name="function" /> 委托所用数据的对象。</param>
      <param name="creationOptions">其中一个控制所创建的任务的行为的枚举值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定的值无效。</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskScheduler">
      <summary>表示一个处理将任务排队到线程中的低级工作的对象。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.#ctor">
      <summary>初始化 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</summary>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.Current">
      <summary>获取与当前正在执行的任务关联的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</summary>
      <returns>返回与当前正在执行的任务关联的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.Default">
      <summary>获取由 .NET Framework 提供的默认 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 实例。</summary>
      <returns>返回默认的 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 实例。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.Finalize">
      <summary>释放与此计划程序关联的所有资源。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext">
      <summary>创建一个与当前 <see cref="T:System.Threading.SynchronizationContext" /> 关联的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</summary>
      <returns>与由 <see cref="P:System.Threading.SynchronizationContext.Current" /> 确定的当前 <see cref="T:System.Threading.SynchronizationContext" /> 关联的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</returns>
      <exception cref="T:System.InvalidOperationException">当前的 SynchronizationContext 不能用作 TaskScheduler。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.GetScheduledTasks">
      <summary>仅对于调试器支持，生成当前排队到计划程序中等待执行的 <see cref="T:System.Threading.Tasks.Task" /> 实例的枚举。</summary>
      <returns>一个允许调试器遍历当前排队到此计划程序中的任务的枚举。</returns>
      <exception cref="T:System.NotSupportedException">此计划程序无法在此时生成排队任务的列表。</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.Id">
      <summary>获取此 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 的唯一 ID。</summary>
      <returns>返回此 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 的唯一 ID。</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.MaximumConcurrencyLevel">
      <summary>指示此 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 能够支持的最大并发级别。</summary>
      <returns>返回表示最大并发级别的一个整数。 默认计划程序返回 <see cref="F:System.Int32.MaxValue" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.QueueTask(System.Threading.Tasks.Task)">
      <summary>将 <see cref="T:System.Threading.Tasks.Task" /> 排队到计划程序中。</summary>
      <param name="task">要排队的 <see cref="T:System.Threading.Tasks.Task" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="task" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.TryDequeue(System.Threading.Tasks.Task)">
      <summary>尝试将以前排队到此计划程序中的 <see cref="T:System.Threading.Tasks.Task" /> 取消排队。</summary>
      <returns>一个布尔值，该值指示是否已成功地将 <paramref name="task" /> 参数取消排队。</returns>
      <param name="task">要取消排队的 <see cref="T:System.Threading.Tasks.Task" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="task" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)">
      <summary>尝试在此计划程序上执行提供的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>一个布尔值，如果成功执行了 <paramref name="task" />，则该值为 true；如果未成功执行，则该值为 false。 执行失败的常见原因是，该任务先前已经执行或者位于正在由另一个线程执行的进程中。</returns>
      <param name="task">要执行的 <see cref="T:System.Threading.Tasks.Task" /> 对象。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="task" /> 与此计划程序无关联。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
      <summary>确定是否可以在此调用中同步执行提供的 <see cref="T:System.Threading.Tasks.Task" />，如果可以，将执行该任务。</summary>
      <returns>一个布尔值，该值指示是否已以内联方式执行该任务。</returns>
      <param name="task">要执行的 <see cref="T:System.Threading.Tasks.Task" />。</param>
      <param name="taskWasPreviouslyQueued">一个布尔值，该值指示任务之前是否已排队。 如果此参数为 True，则该任务以前可能已排队（已计划）；如果为 False，则已知该任务尚未排队，此时将执行此调用，以便以内联方式执行该任务，而不用将其排队。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="task" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">已执行的 <paramref name="task" />。</exception>
    </member>
    <member name="E:System.Threading.Tasks.TaskScheduler.UnobservedTaskException">
      <summary>当出错的 <see cref="T:System.Threading.Tasks.Task" /> 的未观察到的异常将要触发异常升级策略时发生，默认情况下，这将终止进程。</summary>
    </member>
    <member name="T:System.Threading.Tasks.TaskSchedulerException">
      <summary>表示一个用于告知由 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 计划的某个操作无效的异常。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor">
      <summary>使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.Exception)">
      <summary>使用默认的错误消息和对作为此异常原因的内部异常的引用，初始化 <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> 类的新实例。</summary>
      <param name="innerException">导致当前异常的异常。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Threading.Tasks.TaskStatus">
      <summary>表示 <see cref="T:System.Threading.Tasks.Task" /> 的生命周期中的当前阶段。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Canceled">
      <summary>该任务已通过对其自身的 CancellationToken 引发 OperationCanceledException 对取消进行了确认，此时该标记处于已发送信号状态；或者在该任务开始执行之前，已向该任务的 CancellationToken 发出了信号。 有关更多信息，请参见任务取消。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Created">
      <summary>该任务已初始化，但尚未被计划。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Faulted">
      <summary>由于未处理异常的原因而完成的任务。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.RanToCompletion">
      <summary>已成功完成执行的任务。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Running">
      <summary>该任务正在运行，但尚未完成。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.WaitingForActivation">
      <summary>该任务正在等待 .NET Framework 基础结构在内部将其激活并进行计划。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.WaitingForChildrenToComplete">
      <summary>该任务已完成执行，正在隐式等待附加的子任务完成。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.WaitingToRun">
      <summary>该任务已被计划执行，但尚未开始执行。</summary>
    </member>
    <member name="T:System.Threading.Tasks.UnobservedTaskExceptionEventArgs">
      <summary>为在出错的 <see cref="T:System.Threading.Tasks.Task" /> 的异常未观察到时引发的事件提供数据。</summary>
    </member>
    <member name="M:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.#ctor(System.AggregateException)">
      <summary>使用未观察到的异常初始化 <see cref="T:System.Threading.Tasks.UnobservedTaskExceptionEventArgs" /> 类的新实例。</summary>
      <param name="exception">未观察到的异常。</param>
    </member>
    <member name="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception">
      <summary>未观察到的异常。</summary>
      <returns>未观察到的异常。</returns>
    </member>
    <member name="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Observed">
      <summary>获取此异常是否已标记为“已观察到”。</summary>
      <returns>如果此异常已标记为“已观察到”，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.SetObserved">
      <summary>将 <see cref="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception" /> 标记为“已观察到”，这样将阻止该异常触发默认情况下会终止进程的异常升级策略。</summary>
    </member>
  </members>
</doc>